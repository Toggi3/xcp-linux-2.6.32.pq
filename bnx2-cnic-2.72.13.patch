# HG changeset patch
# Parent 2e9e6572f41c2b834d115ff9e26fc7b48b47b2ac

diff -r 2e9e6572f41c drivers/net/Kconfig
--- a/drivers/net/Kconfig
+++ b/drivers/net/Kconfig
@@ -2292,6 +2292,17 @@ config TIGON3
 	  To compile this driver as a module, choose M here: the module
 	  will be called tg3.  This is recommended.
 
+config BNX2
+       tristate "Broadcom NetXtremeII support"
+       depends on PCI
+       select CRC32
+       select FW_LOADER
+       help
+         This driver supports Broadcom NetXtremeII gigabit Ethernet cards.
+
+         To compile this driver as a module, choose M here: the module
+         will be called bnx2.  This is recommended.
+
 config SPIDER_NET
 	tristate "Spider Gigabit Ethernet driver"
 	depends on PCI && (PPC_IBM_CELL_BLADE || PPC_CELLEB)
diff -r 2e9e6572f41c drivers/net/Makefile
--- a/drivers/net/Makefile
+++ b/drivers/net/Makefile
@@ -81,6 +81,7 @@ obj-$(CONFIG_NS83820) += ns83820.o
 obj-$(CONFIG_STNIC) += stnic.o 8390.o
 obj-$(CONFIG_FEALNX) += fealnx.o
 obj-$(CONFIG_TIGON3) += tg3/
+obj-$(CONFIG_BNX2) += bnx2/
 spidernet-y += spider_net.o spider_net_ethtool.o
 obj-$(CONFIG_SPIDER_NET) += spidernet.o sungem_phy.o
 obj-$(CONFIG_GELIC_NET) += ps3_gelic.o
diff -r 2e9e6572f41c drivers/net/bnx2/57xx_iscsi_constants.h
--- /dev/null
+++ b/drivers/net/bnx2/57xx_iscsi_constants.h
@@ -0,0 +1,160 @@
+/* 57xx_iscsi_constants.h: Broadcom NetXtreme II iSCSI HSI
+ *
+ * Copyright (c) 2006 - 2012 Broadcom Corporation
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation.
+ *
+ * Written by: Anil Veerabhadrappa (anilgv@broadcom.com)
+ * Maintained by: Eddie Wai (eddie.wai@broadcom.com)
+ */
+#ifndef __57XX_ISCSI_CONSTANTS_H_
+#define __57XX_ISCSI_CONSTANTS_H_
+
+/**
+* This file defines HSI constants for the iSCSI flows
+*/
+
+/* iSCSI request op codes */
+#define ISCSI_OPCODE_CLEANUP_REQUEST    (7)
+
+/* iSCSI response/messages op codes */
+#define ISCSI_OPCODE_CLEANUP_RESPONSE 		(0x27)
+#define ISCSI_OPCODE_NOPOUT_LOCAL_COMPLETION    (0)
+
+/* iSCSI task types */
+#define ISCSI_TASK_TYPE_READ    (0)
+#define ISCSI_TASK_TYPE_WRITE   (1)
+#define ISCSI_TASK_TYPE_MPATH   (2)
+
+/* initial CQ sequence numbers */
+#define ISCSI_INITIAL_SN    (1)
+
+/* KWQ (kernel work queue) layer codes */
+#define ISCSI_KWQE_LAYER_CODE   (6)
+
+/* KWQ (kernel work queue) request op codes */
+#define ISCSI_KWQE_OPCODE_OFFLOAD_CONN1 (0)
+#define ISCSI_KWQE_OPCODE_OFFLOAD_CONN2 (1)
+#define ISCSI_KWQE_OPCODE_UPDATE_CONN   (2)
+#define ISCSI_KWQE_OPCODE_DESTROY_CONN  (3)
+#define ISCSI_KWQE_OPCODE_INIT1         (4)
+#define ISCSI_KWQE_OPCODE_INIT2         (5)
+
+/* KCQ (kernel completion queue) response op codes */
+#define ISCSI_KCQE_OPCODE_OFFLOAD_CONN  (0x10)
+#define ISCSI_KCQE_OPCODE_UPDATE_CONN   (0x12)
+#define ISCSI_KCQE_OPCODE_DESTROY_CONN  (0x13)
+#define ISCSI_KCQE_OPCODE_INIT          (0x14)
+#define ISCSI_KCQE_OPCODE_FW_CLEAN_TASK	(0x15)
+#define ISCSI_KCQE_OPCODE_TCP_RESET     (0x16)
+#define ISCSI_KCQE_OPCODE_TCP_SYN       (0x17)
+#define ISCSI_KCQE_OPCODE_TCP_FIN       (0X18)
+#define ISCSI_KCQE_OPCODE_TCP_ERROR     (0x19)
+#define ISCSI_KCQE_OPCODE_CQ_EVENT_NOTIFICATION (0x20)
+#define ISCSI_KCQE_OPCODE_ISCSI_ERROR   (0x21)
+
+/* KCQ (kernel completion queue) completion status */
+#define ISCSI_KCQE_COMPLETION_STATUS_SUCCESS                            (0x0)
+#define ISCSI_KCQE_COMPLETION_STATUS_INVALID_OPCODE                     (0x1)
+#define ISCSI_KCQE_COMPLETION_STATUS_CTX_ALLOC_FAILURE                  (0x2)
+#define ISCSI_KCQE_COMPLETION_STATUS_CTX_FREE_FAILURE                   (0x3)
+#define ISCSI_KCQE_COMPLETION_STATUS_NIC_ERROR                          (0x4)
+
+#define ISCSI_KCQE_COMPLETION_STATUS_HDR_DIG_ERR                        (0x5)
+#define ISCSI_KCQE_COMPLETION_STATUS_DATA_DIG_ERR                       (0x6)
+
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_UNEXPECTED_OPCODE     (0xa)
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_OPCODE                (0xb)
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_AHS_LEN               (0xc)
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_ITT                   (0xd)
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_STATSN                (0xe)
+
+/* Response */
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_EXP_DATASN            (0xf)
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_PEND_R2T              (0x10)
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_DATA_SEG_LEN_IS_ZERO  (0x2c)
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_DATA_SEG_LEN_TOO_BIG  (0x2d)
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_O_U_0                 (0x11)
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_O_U_1                 (0x12)
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_O_U_2                 (0x13)
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_O_U_3                 (0x14)
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_O_U_4                 (0x15)
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_O_U_5                 (0x16)
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_O_U_6                 (0x17)
+
+/* Data-In */
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_REMAIN_RCV_LEN        (0x18)
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_MAX_RCV_PDU_LEN       (0x19)
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_F_BIT_ZERO            (0x1a)
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_TTT_NOT_RSRV          (0x1b)
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_DATASN                (0x1c)
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_REMAIN_BURST_LEN      (0x1d)
+
+/* R2T */
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_BUFFER_OFF            (0x1f)
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_LUN                   (0x20)
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_R2TSN                 (0x21)
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_DESIRED_DATA_TRNS_LEN_0 (0x22)
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_DESIRED_DATA_TRNS_LEN_1 (0x23)
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_PEND_R2T_EXCEED       (0x24)
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_TTT_IS_RSRV           (0x25)
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_MAX_BURST_LEN         (0x26)
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_DATA_SEG_LEN_NOT_ZERO (0x27)
+
+/* TMF */
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_REJECT_PDU_LEN        (0x28)
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_ASYNC_PDU_LEN         (0x29)
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_NOPIN_PDU_LEN         (0x2a)
+#define ISCSI_KCQE_COMPLETION_STATUS_PROTOCOL_ERR_PEND_R2T_IN_CLEANUP   (0x2b)
+
+/* IP/TCP processing errors: */
+#define ISCI_KCQE_COMPLETION_STATUS_TCP_ERROR_IP_FRAGMENT               (0x40)
+#define ISCI_KCQE_COMPLETION_STATUS_TCP_ERROR_IP_OPTIONS                (0x41)
+#define ISCI_KCQE_COMPLETION_STATUS_TCP_ERROR_URGENT_FLAG               (0x42)
+#define ISCI_KCQE_COMPLETION_STATUS_TCP_ERROR_MAX_RTRANS                (0x43)
+
+/* iSCSI licensing errors */
+/* general iSCSI license not installed */
+#define ISCSI_KCQE_COMPLETION_STATUS_ISCSI_NOT_SUPPORTED                (0x50)
+/* additional LOM specific iSCSI license not installed */
+#define ISCSI_KCQE_COMPLETION_STATUS_LOM_ISCSI_NOT_ENABLED              (0x51)
+
+/* Driver internal error code */
+#define ISCSI_KCQE_COMPLETION_STATUS_CID_BUSY                           (0x80)
+#define ISCSI_KCQE_COMPLETION_STATUS_PARITY_ERR                         (0x81)
+
+/* SQ/RQ/CQ DB structure sizes */
+#define ISCSI_SQ_DB_SIZE    (16)
+#define ISCSI_RQ_DB_SIZE    (64)
+#define ISCSI_CQ_DB_SIZE    (80)
+
+#define ISCSI_SQN_TO_NOTIFY_NOT_VALID                                   0xFFFF
+
+/* Page size codes (for flags field in connection offload request) */
+#define ISCSI_PAGE_SIZE_256     (0)
+#define ISCSI_PAGE_SIZE_512     (1)
+#define ISCSI_PAGE_SIZE_1K      (2)
+#define ISCSI_PAGE_SIZE_2K      (3)
+#define ISCSI_PAGE_SIZE_4K      (4)
+#define ISCSI_PAGE_SIZE_8K      (5)
+#define ISCSI_PAGE_SIZE_16K     (6)
+#define ISCSI_PAGE_SIZE_32K     (7)
+#define ISCSI_PAGE_SIZE_64K     (8)
+#define ISCSI_PAGE_SIZE_128K    (9)
+#define ISCSI_PAGE_SIZE_256K    (10)
+#define ISCSI_PAGE_SIZE_512K    (11)
+#define ISCSI_PAGE_SIZE_1M      (12)
+#define ISCSI_PAGE_SIZE_2M      (13)
+#define ISCSI_PAGE_SIZE_4M      (14)
+#define ISCSI_PAGE_SIZE_8M      (15)
+
+/* Iscsi PDU related defines */
+#define ISCSI_HEADER_SIZE   (48)
+#define ISCSI_DIGEST_SHIFT  (2)
+#define ISCSI_DIGEST_SIZE   (4)
+
+#define B577XX_ISCSI_CONNECTION_TYPE    3
+
+#endif /*__57XX_ISCSI_CONSTANTS_H_ */
diff -r 2e9e6572f41c drivers/net/bnx2/57xx_iscsi_hsi.h
--- /dev/null
+++ b/drivers/net/bnx2/57xx_iscsi_hsi.h
@@ -0,0 +1,1520 @@
+/* 57xx_iscsi_hsi.h: Broadcom NetXtreme II iSCSI HSI.
+ *
+ * Copyright (c) 2006 - 2012 Broadcom Corporation
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation.
+ *
+ * Written by: Anil Veerabhadrappa (anilgv@broadcom.com)
+ * Maintained by: Eddie Wai (eddie.wai@broadcom.com)
+ */
+#ifndef __57XX_ISCSI_HSI_LINUX_LE__
+#define __57XX_ISCSI_HSI_LINUX_LE__
+
+/*
+ * iSCSI Async CQE
+ */
+struct bnx2i_async_msg {
+#if defined(__BIG_ENDIAN)
+	u8 op_code;
+	u8 reserved1;
+	u16 reserved0;
+#elif defined(__LITTLE_ENDIAN)
+	u16 reserved0;
+	u8 reserved1;
+	u8 op_code;
+#endif
+	u32 reserved2;
+	u32 exp_cmd_sn;
+	u32 max_cmd_sn;
+	u32 reserved3[2];
+#if defined(__BIG_ENDIAN)
+	u16 reserved5;
+	u8 err_code;
+	u8 reserved4;
+#elif defined(__LITTLE_ENDIAN)
+	u8 reserved4;
+	u8 err_code;
+	u16 reserved5;
+#endif
+	u32 reserved6;
+	u32 lun[2];
+#if defined(__BIG_ENDIAN)
+	u8 async_event;
+	u8 async_vcode;
+	u16 param1;
+#elif defined(__LITTLE_ENDIAN)
+	u16 param1;
+	u8 async_vcode;
+	u8 async_event;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 param2;
+	u16 param3;
+#elif defined(__LITTLE_ENDIAN)
+	u16 param3;
+	u16 param2;
+#endif
+	u32 reserved7[3];
+	u32 cq_req_sn;
+};
+
+
+/*
+ * iSCSI Buffer Descriptor (BD)
+ */
+struct iscsi_bd {
+	u32 buffer_addr_hi;
+	u32 buffer_addr_lo;
+#if defined(__BIG_ENDIAN)
+	u16 reserved0;
+	u16 buffer_length;
+#elif defined(__LITTLE_ENDIAN)
+	u16 buffer_length;
+	u16 reserved0;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 reserved3;
+	u16 flags;
+#define ISCSI_BD_RESERVED1 (0x3F<<0)
+#define ISCSI_BD_RESERVED1_SHIFT 0
+#define ISCSI_BD_LAST_IN_BD_CHAIN (0x1<<6)
+#define ISCSI_BD_LAST_IN_BD_CHAIN_SHIFT 6
+#define ISCSI_BD_FIRST_IN_BD_CHAIN (0x1<<7)
+#define ISCSI_BD_FIRST_IN_BD_CHAIN_SHIFT 7
+#define ISCSI_BD_RESERVED2 (0xFF<<8)
+#define ISCSI_BD_RESERVED2_SHIFT 8
+#elif defined(__LITTLE_ENDIAN)
+	u16 flags;
+#define ISCSI_BD_RESERVED1 (0x3F<<0)
+#define ISCSI_BD_RESERVED1_SHIFT 0
+#define ISCSI_BD_LAST_IN_BD_CHAIN (0x1<<6)
+#define ISCSI_BD_LAST_IN_BD_CHAIN_SHIFT 6
+#define ISCSI_BD_FIRST_IN_BD_CHAIN (0x1<<7)
+#define ISCSI_BD_FIRST_IN_BD_CHAIN_SHIFT 7
+#define ISCSI_BD_RESERVED2 (0xFF<<8)
+#define ISCSI_BD_RESERVED2_SHIFT 8
+	u16 reserved3;
+#endif
+};
+
+
+/*
+ * iSCSI Cleanup SQ WQE
+ */
+struct bnx2i_cleanup_request {
+#if defined(__BIG_ENDIAN)
+	u8 op_code;
+	u8 reserved1;
+	u16 reserved0;
+#elif defined(__LITTLE_ENDIAN)
+	u16 reserved0;
+	u8 reserved1;
+	u8 op_code;
+#endif
+	u32 reserved2[3];
+#if defined(__BIG_ENDIAN)
+	u16 reserved3;
+	u16 itt;
+#define ISCSI_CLEANUP_REQUEST_INDEX (0x3FFF<<0)
+#define ISCSI_CLEANUP_REQUEST_INDEX_SHIFT 0
+#define ISCSI_CLEANUP_REQUEST_TYPE (0x3<<14)
+#define ISCSI_CLEANUP_REQUEST_TYPE_SHIFT 14
+#elif defined(__LITTLE_ENDIAN)
+	u16 itt;
+#define ISCSI_CLEANUP_REQUEST_INDEX (0x3FFF<<0)
+#define ISCSI_CLEANUP_REQUEST_INDEX_SHIFT 0
+#define ISCSI_CLEANUP_REQUEST_TYPE (0x3<<14)
+#define ISCSI_CLEANUP_REQUEST_TYPE_SHIFT 14
+	u16 reserved3;
+#endif
+	u32 reserved4[10];
+#if defined(__BIG_ENDIAN)
+	u8 cq_index;
+	u8 reserved6;
+	u16 reserved5;
+#elif defined(__LITTLE_ENDIAN)
+	u16 reserved5;
+	u8 reserved6;
+	u8 cq_index;
+#endif
+};
+
+
+/*
+ * iSCSI Cleanup CQE
+ */
+struct bnx2i_cleanup_response {
+#if defined(__BIG_ENDIAN)
+	u8 op_code;
+	u8 status;
+	u16 reserved0;
+#elif defined(__LITTLE_ENDIAN)
+	u16 reserved0;
+	u8 status;
+	u8 op_code;
+#endif
+	u32 reserved1[3];
+	u32 reserved2[2];
+#if defined(__BIG_ENDIAN)
+	u16 reserved4;
+	u8 err_code;
+	u8 reserved3;
+#elif defined(__LITTLE_ENDIAN)
+	u8 reserved3;
+	u8 err_code;
+	u16 reserved4;
+#endif
+	u32 reserved5[7];
+#if defined(__BIG_ENDIAN)
+	u16 reserved6;
+	u16 itt;
+#define ISCSI_CLEANUP_RESPONSE_INDEX (0x3FFF<<0)
+#define ISCSI_CLEANUP_RESPONSE_INDEX_SHIFT 0
+#define ISCSI_CLEANUP_RESPONSE_TYPE (0x3<<14)
+#define ISCSI_CLEANUP_RESPONSE_TYPE_SHIFT 14
+#elif defined(__LITTLE_ENDIAN)
+	u16 itt;
+#define ISCSI_CLEANUP_RESPONSE_INDEX (0x3FFF<<0)
+#define ISCSI_CLEANUP_RESPONSE_INDEX_SHIFT 0
+#define ISCSI_CLEANUP_RESPONSE_TYPE (0x3<<14)
+#define ISCSI_CLEANUP_RESPONSE_TYPE_SHIFT 14
+	u16 reserved6;
+#endif
+	u32 cq_req_sn;
+};
+
+
+/*
+ * SCSI read/write SQ WQE
+ */
+struct bnx2i_cmd_request {
+#if defined(__BIG_ENDIAN)
+	u8 op_code;
+	u8 op_attr;
+#define ISCSI_CMD_REQUEST_TASK_ATTR (0x7<<0)
+#define ISCSI_CMD_REQUEST_TASK_ATTR_SHIFT 0
+#define ISCSI_CMD_REQUEST_RESERVED1 (0x3<<3)
+#define ISCSI_CMD_REQUEST_RESERVED1_SHIFT 3
+#define ISCSI_CMD_REQUEST_WRITE (0x1<<5)
+#define ISCSI_CMD_REQUEST_WRITE_SHIFT 5
+#define ISCSI_CMD_REQUEST_READ (0x1<<6)
+#define ISCSI_CMD_REQUEST_READ_SHIFT 6
+#define ISCSI_CMD_REQUEST_FINAL (0x1<<7)
+#define ISCSI_CMD_REQUEST_FINAL_SHIFT 7
+	u16 reserved0;
+#elif defined(__LITTLE_ENDIAN)
+	u16 reserved0;
+	u8 op_attr;
+#define ISCSI_CMD_REQUEST_TASK_ATTR (0x7<<0)
+#define ISCSI_CMD_REQUEST_TASK_ATTR_SHIFT 0
+#define ISCSI_CMD_REQUEST_RESERVED1 (0x3<<3)
+#define ISCSI_CMD_REQUEST_RESERVED1_SHIFT 3
+#define ISCSI_CMD_REQUEST_WRITE (0x1<<5)
+#define ISCSI_CMD_REQUEST_WRITE_SHIFT 5
+#define ISCSI_CMD_REQUEST_READ (0x1<<6)
+#define ISCSI_CMD_REQUEST_READ_SHIFT 6
+#define ISCSI_CMD_REQUEST_FINAL (0x1<<7)
+#define ISCSI_CMD_REQUEST_FINAL_SHIFT 7
+	u8 op_code;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 ud_buffer_offset;
+	u16 sd_buffer_offset;
+#elif defined(__LITTLE_ENDIAN)
+	u16 sd_buffer_offset;
+	u16 ud_buffer_offset;
+#endif
+	u32 lun[2];
+#if defined(__BIG_ENDIAN)
+	u16 reserved2;
+	u16 itt;
+#define ISCSI_CMD_REQUEST_INDEX (0x3FFF<<0)
+#define ISCSI_CMD_REQUEST_INDEX_SHIFT 0
+#define ISCSI_CMD_REQUEST_TYPE (0x3<<14)
+#define ISCSI_CMD_REQUEST_TYPE_SHIFT 14
+#elif defined(__LITTLE_ENDIAN)
+	u16 itt;
+#define ISCSI_CMD_REQUEST_INDEX (0x3FFF<<0)
+#define ISCSI_CMD_REQUEST_INDEX_SHIFT 0
+#define ISCSI_CMD_REQUEST_TYPE (0x3<<14)
+#define ISCSI_CMD_REQUEST_TYPE_SHIFT 14
+	u16 reserved2;
+#endif
+	u32 total_data_transfer_length;
+	u32 cmd_sn;
+	u32 reserved3;
+	u32 cdb[4];
+	u32 zero_fill;
+	u32 bd_list_addr_lo;
+	u32 bd_list_addr_hi;
+#if defined(__BIG_ENDIAN)
+	u8 cq_index;
+	u8 sd_start_bd_index;
+	u8 ud_start_bd_index;
+	u8 num_bds;
+#elif defined(__LITTLE_ENDIAN)
+	u8 num_bds;
+	u8 ud_start_bd_index;
+	u8 sd_start_bd_index;
+	u8 cq_index;
+#endif
+};
+
+
+/*
+ * task statistics for write response
+ */
+struct bnx2i_write_resp_task_stat {
+#if defined(__BIG_ENDIAN)
+	u16 num_r2ts;
+	u16 num_data_outs;
+#elif defined(__LITTLE_ENDIAN)
+	u16 num_data_outs;
+	u16 num_r2ts;
+#endif
+};
+
+/*
+ * task statistics for read response
+ */
+struct bnx2i_read_resp_task_stat {
+#if defined(__BIG_ENDIAN)
+	u16 reserved;
+	u16 num_data_ins;
+#elif defined(__LITTLE_ENDIAN)
+	u16 num_data_ins;
+	u16 reserved;
+#endif
+};
+
+/*
+ * task statistics for iSCSI cmd response
+ */
+union bnx2i_cmd_resp_task_stat {
+	struct bnx2i_write_resp_task_stat write_stat;
+	struct bnx2i_read_resp_task_stat read_stat;
+};
+
+/*
+ * SCSI Command CQE
+ */
+struct bnx2i_cmd_response {
+#if defined(__BIG_ENDIAN)
+	u8 op_code;
+	u8 response_flags;
+#define ISCSI_CMD_RESPONSE_RESERVED0 (0x1<<0)
+#define ISCSI_CMD_RESPONSE_RESERVED0_SHIFT 0
+#define ISCSI_CMD_RESPONSE_RESIDUAL_UNDERFLOW (0x1<<1)
+#define ISCSI_CMD_RESPONSE_RESIDUAL_UNDERFLOW_SHIFT 1
+#define ISCSI_CMD_RESPONSE_RESIDUAL_OVERFLOW (0x1<<2)
+#define ISCSI_CMD_RESPONSE_RESIDUAL_OVERFLOW_SHIFT 2
+#define ISCSI_CMD_RESPONSE_BR_RESIDUAL_UNDERFLOW (0x1<<3)
+#define ISCSI_CMD_RESPONSE_BR_RESIDUAL_UNDERFLOW_SHIFT 3
+#define ISCSI_CMD_RESPONSE_BR_RESIDUAL_OVERFLOW (0x1<<4)
+#define ISCSI_CMD_RESPONSE_BR_RESIDUAL_OVERFLOW_SHIFT 4
+#define ISCSI_CMD_RESPONSE_RESERVED1 (0x7<<5)
+#define ISCSI_CMD_RESPONSE_RESERVED1_SHIFT 5
+	u8 response;
+	u8 status;
+#elif defined(__LITTLE_ENDIAN)
+	u8 status;
+	u8 response;
+	u8 response_flags;
+#define ISCSI_CMD_RESPONSE_RESERVED0 (0x1<<0)
+#define ISCSI_CMD_RESPONSE_RESERVED0_SHIFT 0
+#define ISCSI_CMD_RESPONSE_RESIDUAL_UNDERFLOW (0x1<<1)
+#define ISCSI_CMD_RESPONSE_RESIDUAL_UNDERFLOW_SHIFT 1
+#define ISCSI_CMD_RESPONSE_RESIDUAL_OVERFLOW (0x1<<2)
+#define ISCSI_CMD_RESPONSE_RESIDUAL_OVERFLOW_SHIFT 2
+#define ISCSI_CMD_RESPONSE_BR_RESIDUAL_UNDERFLOW (0x1<<3)
+#define ISCSI_CMD_RESPONSE_BR_RESIDUAL_UNDERFLOW_SHIFT 3
+#define ISCSI_CMD_RESPONSE_BR_RESIDUAL_OVERFLOW (0x1<<4)
+#define ISCSI_CMD_RESPONSE_BR_RESIDUAL_OVERFLOW_SHIFT 4
+#define ISCSI_CMD_RESPONSE_RESERVED1 (0x7<<5)
+#define ISCSI_CMD_RESPONSE_RESERVED1_SHIFT 5
+	u8 op_code;
+#endif
+	u32 data_length;
+	u32 exp_cmd_sn;
+	u32 max_cmd_sn;
+	u32 reserved2;
+	u32 residual_count;
+#if defined(__BIG_ENDIAN)
+	u16 reserved4;
+	u8 err_code;
+	u8 reserved3;
+#elif defined(__LITTLE_ENDIAN)
+	u8 reserved3;
+	u8 err_code;
+	u16 reserved4;
+#endif
+	u32 reserved5[5];
+	union bnx2i_cmd_resp_task_stat task_stat;
+	u32 reserved6;
+#if defined(__BIG_ENDIAN)
+	u16 reserved7;
+	u16 itt;
+#define ISCSI_CMD_RESPONSE_INDEX (0x3FFF<<0)
+#define ISCSI_CMD_RESPONSE_INDEX_SHIFT 0
+#define ISCSI_CMD_RESPONSE_TYPE (0x3<<14)
+#define ISCSI_CMD_RESPONSE_TYPE_SHIFT 14
+#elif defined(__LITTLE_ENDIAN)
+	u16 itt;
+#define ISCSI_CMD_RESPONSE_INDEX (0x3FFF<<0)
+#define ISCSI_CMD_RESPONSE_INDEX_SHIFT 0
+#define ISCSI_CMD_RESPONSE_TYPE (0x3<<14)
+#define ISCSI_CMD_RESPONSE_TYPE_SHIFT 14
+	u16 reserved7;
+#endif
+	u32 cq_req_sn;
+};
+
+
+
+/*
+ * firmware middle-path request SQ WQE
+ */
+struct bnx2i_fw_mp_request {
+#if defined(__BIG_ENDIAN)
+	u8 op_code;
+	u8 op_attr;
+	u16 hdr_opaque1;
+#elif defined(__LITTLE_ENDIAN)
+	u16 hdr_opaque1;
+	u8 op_attr;
+	u8 op_code;
+#endif
+	u32 data_length;
+	u32 hdr_opaque2[2];
+#if defined(__BIG_ENDIAN)
+	u16 reserved0;
+	u16 itt;
+#define ISCSI_FW_MP_REQUEST_INDEX (0x3FFF<<0)
+#define ISCSI_FW_MP_REQUEST_INDEX_SHIFT 0
+#define ISCSI_FW_MP_REQUEST_TYPE (0x3<<14)
+#define ISCSI_FW_MP_REQUEST_TYPE_SHIFT 14
+#elif defined(__LITTLE_ENDIAN)
+	u16 itt;
+#define ISCSI_FW_MP_REQUEST_INDEX (0x3FFF<<0)
+#define ISCSI_FW_MP_REQUEST_INDEX_SHIFT 0
+#define ISCSI_FW_MP_REQUEST_TYPE (0x3<<14)
+#define ISCSI_FW_MP_REQUEST_TYPE_SHIFT 14
+	u16 reserved0;
+#endif
+	u32 hdr_opaque3[4];
+	u32 resp_bd_list_addr_lo;
+	u32 resp_bd_list_addr_hi;
+	u32 resp_buffer;
+#define ISCSI_FW_MP_REQUEST_RESP_BUFFER_LENGTH (0xFFFFFF<<0)
+#define ISCSI_FW_MP_REQUEST_RESP_BUFFER_LENGTH_SHIFT 0
+#define ISCSI_FW_MP_REQUEST_NUM_RESP_BDS (0xFF<<24)
+#define ISCSI_FW_MP_REQUEST_NUM_RESP_BDS_SHIFT 24
+#if defined(__BIG_ENDIAN)
+	u16 reserved4;
+	u8 reserved3;
+	u8 flags;
+#define ISCSI_FW_MP_REQUEST_RESERVED1 (0x1<<0)
+#define ISCSI_FW_MP_REQUEST_RESERVED1_SHIFT 0
+#define ISCSI_FW_MP_REQUEST_LOCAL_COMPLETION (0x1<<1)
+#define ISCSI_FW_MP_REQUEST_LOCAL_COMPLETION_SHIFT 1
+#define ISCSI_FW_MP_REQUEST_UPDATE_EXP_STAT_SN (0x1<<2)
+#define ISCSI_FW_MP_REQUEST_UPDATE_EXP_STAT_SN_SHIFT 2
+#define ISCSI_FW_MP_REQUEST_RESERVED2 (0x1F<<3)
+#define ISCSI_FW_MP_REQUEST_RESERVED2_SHIFT 3
+#elif defined(__LITTLE_ENDIAN)
+	u8 flags;
+#define ISCSI_FW_MP_REQUEST_RESERVED1 (0x1<<0)
+#define ISCSI_FW_MP_REQUEST_RESERVED1_SHIFT 0
+#define ISCSI_FW_MP_REQUEST_LOCAL_COMPLETION (0x1<<1)
+#define ISCSI_FW_MP_REQUEST_LOCAL_COMPLETION_SHIFT 1
+#define ISCSI_FW_MP_REQUEST_UPDATE_EXP_STAT_SN (0x1<<2)
+#define ISCSI_FW_MP_REQUEST_UPDATE_EXP_STAT_SN_SHIFT 2
+#define ISCSI_FW_MP_REQUEST_RESERVED2 (0x1F<<3)
+#define ISCSI_FW_MP_REQUEST_RESERVED2_SHIFT 3
+	u8 reserved3;
+	u16 reserved4;
+#endif
+	u32 bd_list_addr_lo;
+	u32 bd_list_addr_hi;
+#if defined(__BIG_ENDIAN)
+	u8 cq_index;
+	u8 reserved6;
+	u8 reserved5;
+	u8 num_bds;
+#elif defined(__LITTLE_ENDIAN)
+	u8 num_bds;
+	u8 reserved5;
+	u8 reserved6;
+	u8 cq_index;
+#endif
+};
+
+
+/*
+ * firmware response - CQE: used only by firmware
+ */
+struct bnx2i_fw_response {
+	u32 hdr_dword1[2];
+	u32 hdr_exp_cmd_sn;
+	u32 hdr_max_cmd_sn;
+	u32 hdr_ttt;
+	u32 hdr_res_cnt;
+	u32 cqe_flags;
+#define ISCSI_FW_RESPONSE_RESERVED2 (0xFF<<0)
+#define ISCSI_FW_RESPONSE_RESERVED2_SHIFT 0
+#define ISCSI_FW_RESPONSE_ERR_CODE (0xFF<<8)
+#define ISCSI_FW_RESPONSE_ERR_CODE_SHIFT 8
+#define ISCSI_FW_RESPONSE_RESERVED3 (0xFFFF<<16)
+#define ISCSI_FW_RESPONSE_RESERVED3_SHIFT 16
+	u32 stat_sn;
+	u32 hdr_dword2[2];
+	u32 hdr_dword3[2];
+	u32 task_stat;
+	u32 reserved0;
+	u32 hdr_itt;
+	u32 cq_req_sn;
+};
+
+
+/*
+ * iSCSI KCQ CQE parameters
+ */
+union iscsi_kcqe_params {
+	u32 reserved0[4];
+};
+
+/*
+ * iSCSI KCQ CQE
+ */
+struct iscsi_kcqe {
+	u32 iscsi_conn_id;
+	u32 completion_status;
+	u32 iscsi_conn_context_id;
+	union iscsi_kcqe_params params;
+#if defined(__BIG_ENDIAN)
+	u8 flags;
+#define ISCSI_KCQE_RESERVED0 (0xF<<0)
+#define ISCSI_KCQE_RESERVED0_SHIFT 0
+#define ISCSI_KCQE_LAYER_CODE (0x7<<4)
+#define ISCSI_KCQE_LAYER_CODE_SHIFT 4
+#define ISCSI_KCQE_RESERVED1 (0x1<<7)
+#define ISCSI_KCQE_RESERVED1_SHIFT 7
+	u8 op_code;
+	u16 qe_self_seq;
+#elif defined(__LITTLE_ENDIAN)
+	u16 qe_self_seq;
+	u8 op_code;
+	u8 flags;
+#define ISCSI_KCQE_RESERVED0 (0xF<<0)
+#define ISCSI_KCQE_RESERVED0_SHIFT 0
+#define ISCSI_KCQE_LAYER_CODE (0x7<<4)
+#define ISCSI_KCQE_LAYER_CODE_SHIFT 4
+#define ISCSI_KCQE_RESERVED1 (0x1<<7)
+#define ISCSI_KCQE_RESERVED1_SHIFT 7
+#endif
+};
+
+
+
+/*
+ * iSCSI KWQE header
+ */
+struct iscsi_kwqe_header {
+#if defined(__BIG_ENDIAN)
+	u8 flags;
+#define ISCSI_KWQE_HEADER_RESERVED0 (0xF<<0)
+#define ISCSI_KWQE_HEADER_RESERVED0_SHIFT 0
+#define ISCSI_KWQE_HEADER_LAYER_CODE (0x7<<4)
+#define ISCSI_KWQE_HEADER_LAYER_CODE_SHIFT 4
+#define ISCSI_KWQE_HEADER_RESERVED1 (0x1<<7)
+#define ISCSI_KWQE_HEADER_RESERVED1_SHIFT 7
+	u8 op_code;
+#elif defined(__LITTLE_ENDIAN)
+	u8 op_code;
+	u8 flags;
+#define ISCSI_KWQE_HEADER_RESERVED0 (0xF<<0)
+#define ISCSI_KWQE_HEADER_RESERVED0_SHIFT 0
+#define ISCSI_KWQE_HEADER_LAYER_CODE (0x7<<4)
+#define ISCSI_KWQE_HEADER_LAYER_CODE_SHIFT 4
+#define ISCSI_KWQE_HEADER_RESERVED1 (0x1<<7)
+#define ISCSI_KWQE_HEADER_RESERVED1_SHIFT 7
+#endif
+};
+
+/*
+ * iSCSI firmware init request 1
+ */
+struct iscsi_kwqe_init1 {
+#if defined(__BIG_ENDIAN)
+	struct iscsi_kwqe_header hdr;
+	u8 hsi_version;
+	u8 num_cqs;
+#elif defined(__LITTLE_ENDIAN)
+	u8 num_cqs;
+	u8 hsi_version;
+	struct iscsi_kwqe_header hdr;
+#endif
+	u32 dummy_buffer_addr_lo;
+	u32 dummy_buffer_addr_hi;
+#if defined(__BIG_ENDIAN)
+	u16 num_ccells_per_conn;
+	u16 num_tasks_per_conn;
+#elif defined(__LITTLE_ENDIAN)
+	u16 num_tasks_per_conn;
+	u16 num_ccells_per_conn;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 sq_wqes_per_page;
+	u16 sq_num_wqes;
+#elif defined(__LITTLE_ENDIAN)
+	u16 sq_num_wqes;
+	u16 sq_wqes_per_page;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 cq_log_wqes_per_page;
+	u8 flags;
+#define ISCSI_KWQE_INIT1_PAGE_SIZE (0xF<<0)
+#define ISCSI_KWQE_INIT1_PAGE_SIZE_SHIFT 0
+#define ISCSI_KWQE_INIT1_DELAYED_ACK_ENABLE (0x1<<4)
+#define ISCSI_KWQE_INIT1_DELAYED_ACK_ENABLE_SHIFT 4
+#define ISCSI_KWQE_INIT1_KEEP_ALIVE_ENABLE (0x1<<5)
+#define ISCSI_KWQE_INIT1_KEEP_ALIVE_ENABLE_SHIFT 5
+#define ISCSI_KWQE_INIT1_RESERVED1 (0x3<<6)
+#define ISCSI_KWQE_INIT1_RESERVED1_SHIFT 6
+	u16 cq_num_wqes;
+#elif defined(__LITTLE_ENDIAN)
+	u16 cq_num_wqes;
+	u8 flags;
+#define ISCSI_KWQE_INIT1_PAGE_SIZE (0xF<<0)
+#define ISCSI_KWQE_INIT1_PAGE_SIZE_SHIFT 0
+#define ISCSI_KWQE_INIT1_DELAYED_ACK_ENABLE (0x1<<4)
+#define ISCSI_KWQE_INIT1_DELAYED_ACK_ENABLE_SHIFT 4
+#define ISCSI_KWQE_INIT1_KEEP_ALIVE_ENABLE (0x1<<5)
+#define ISCSI_KWQE_INIT1_KEEP_ALIVE_ENABLE_SHIFT 5
+#define ISCSI_KWQE_INIT1_RESERVED1 (0x3<<6)
+#define ISCSI_KWQE_INIT1_RESERVED1_SHIFT 6
+	u8 cq_log_wqes_per_page;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 cq_num_pages;
+	u16 sq_num_pages;
+#elif defined(__LITTLE_ENDIAN)
+	u16 sq_num_pages;
+	u16 cq_num_pages;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 rq_buffer_size;
+	u16 rq_num_wqes;
+#elif defined(__LITTLE_ENDIAN)
+	u16 rq_num_wqes;
+	u16 rq_buffer_size;
+#endif
+};
+
+/*
+ * iSCSI firmware init request 2
+ */
+struct iscsi_kwqe_init2 {
+#if defined(__BIG_ENDIAN)
+	struct iscsi_kwqe_header hdr;
+	u16 max_cq_sqn;
+#elif defined(__LITTLE_ENDIAN)
+	u16 max_cq_sqn;
+	struct iscsi_kwqe_header hdr;
+#endif
+	u32 error_bit_map[2];
+	u32 reserved1[5];
+};
+
+/*
+ * Initial iSCSI connection offload request 1
+ */
+struct iscsi_kwqe_conn_offload1 {
+#if defined(__BIG_ENDIAN)
+	struct iscsi_kwqe_header hdr;
+	u16 iscsi_conn_id;
+#elif defined(__LITTLE_ENDIAN)
+	u16 iscsi_conn_id;
+	struct iscsi_kwqe_header hdr;
+#endif
+	u32 sq_page_table_addr_lo;
+	u32 sq_page_table_addr_hi;
+	u32 cq_page_table_addr_lo;
+	u32 cq_page_table_addr_hi;
+	u32 reserved0[3];
+};
+
+/*
+ * iSCSI Page Table Entry (PTE)
+ */
+struct iscsi_pte {
+	u32 hi;
+	u32 lo;
+};
+
+/*
+ * Initial iSCSI connection offload request 2
+ */
+struct iscsi_kwqe_conn_offload2 {
+#if defined(__BIG_ENDIAN)
+	struct iscsi_kwqe_header hdr;
+	u16 reserved0;
+#elif defined(__LITTLE_ENDIAN)
+	u16 reserved0;
+	struct iscsi_kwqe_header hdr;
+#endif
+	u32 rq_page_table_addr_lo;
+	u32 rq_page_table_addr_hi;
+	struct iscsi_pte sq_first_pte;
+	struct iscsi_pte cq_first_pte;
+	u32 num_additional_wqes;
+};
+
+
+/*
+ * Initial iSCSI connection offload request 3
+ */
+struct iscsi_kwqe_conn_offload3 {
+#if defined(__BIG_ENDIAN)
+	struct iscsi_kwqe_header hdr;
+	u16 reserved0;
+#elif defined(__LITTLE_ENDIAN)
+	u16 reserved0;
+	struct iscsi_kwqe_header hdr;
+#endif
+	u32 reserved1;
+	struct iscsi_pte qp_first_pte[3];
+};
+
+
+/*
+ * iSCSI connection update request
+ */
+struct iscsi_kwqe_conn_update {
+#if defined(__BIG_ENDIAN)
+	struct iscsi_kwqe_header hdr;
+	u16 reserved0;
+#elif defined(__LITTLE_ENDIAN)
+	u16 reserved0;
+	struct iscsi_kwqe_header hdr;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 session_error_recovery_level;
+	u8 max_outstanding_r2ts;
+	u8 reserved2;
+	u8 conn_flags;
+#define ISCSI_KWQE_CONN_UPDATE_HEADER_DIGEST (0x1<<0)
+#define ISCSI_KWQE_CONN_UPDATE_HEADER_DIGEST_SHIFT 0
+#define ISCSI_KWQE_CONN_UPDATE_DATA_DIGEST (0x1<<1)
+#define ISCSI_KWQE_CONN_UPDATE_DATA_DIGEST_SHIFT 1
+#define ISCSI_KWQE_CONN_UPDATE_INITIAL_R2T (0x1<<2)
+#define ISCSI_KWQE_CONN_UPDATE_INITIAL_R2T_SHIFT 2
+#define ISCSI_KWQE_CONN_UPDATE_IMMEDIATE_DATA (0x1<<3)
+#define ISCSI_KWQE_CONN_UPDATE_IMMEDIATE_DATA_SHIFT 3
+#define ISCSI_KWQE_CONN_UPDATE_OOO_SUPPORT_MODE (0x3<<4)
+#define ISCSI_KWQE_CONN_UPDATE_OOO_SUPPORT_MODE_SHIFT 4
+#define ISCSI_KWQE_CONN_UPDATE_RESERVED1 (0x3<<6)
+#define ISCSI_KWQE_CONN_UPDATE_RESERVED1_SHIFT 6
+#elif defined(__LITTLE_ENDIAN)
+	u8 conn_flags;
+#define ISCSI_KWQE_CONN_UPDATE_HEADER_DIGEST (0x1<<0)
+#define ISCSI_KWQE_CONN_UPDATE_HEADER_DIGEST_SHIFT 0
+#define ISCSI_KWQE_CONN_UPDATE_DATA_DIGEST (0x1<<1)
+#define ISCSI_KWQE_CONN_UPDATE_DATA_DIGEST_SHIFT 1
+#define ISCSI_KWQE_CONN_UPDATE_INITIAL_R2T (0x1<<2)
+#define ISCSI_KWQE_CONN_UPDATE_INITIAL_R2T_SHIFT 2
+#define ISCSI_KWQE_CONN_UPDATE_IMMEDIATE_DATA (0x1<<3)
+#define ISCSI_KWQE_CONN_UPDATE_IMMEDIATE_DATA_SHIFT 3
+#define ISCSI_KWQE_CONN_UPDATE_OOO_SUPPORT_MODE (0x3<<4)
+#define ISCSI_KWQE_CONN_UPDATE_OOO_SUPPORT_MODE_SHIFT 4
+#define ISCSI_KWQE_CONN_UPDATE_RESERVED1 (0x3<<6)
+#define ISCSI_KWQE_CONN_UPDATE_RESERVED1_SHIFT 6
+	u8 reserved2;
+	u8 max_outstanding_r2ts;
+	u8 session_error_recovery_level;
+#endif
+	u32 context_id;
+	u32 max_send_pdu_length;
+	u32 max_recv_pdu_length;
+	u32 first_burst_length;
+	u32 max_burst_length;
+	u32 exp_stat_sn;
+};
+
+/*
+ * iSCSI destroy connection request
+ */
+struct iscsi_kwqe_conn_destroy {
+#if defined(__BIG_ENDIAN)
+	struct iscsi_kwqe_header hdr;
+	u16 reserved0;
+#elif defined(__LITTLE_ENDIAN)
+	u16 reserved0;
+	struct iscsi_kwqe_header hdr;
+#endif
+	u32 context_id;
+	u32 reserved1[6];
+};
+
+/*
+ * iSCSI KWQ WQE
+ */
+union iscsi_kwqe {
+	struct iscsi_kwqe_init1 init1;
+	struct iscsi_kwqe_init2 init2;
+	struct iscsi_kwqe_conn_offload1 conn_offload1;
+	struct iscsi_kwqe_conn_offload2 conn_offload2;
+	struct iscsi_kwqe_conn_update conn_update;
+	struct iscsi_kwqe_conn_destroy conn_destroy;
+};
+
+/*
+ * iSCSI Login SQ WQE
+ */
+struct bnx2i_login_request {
+#if defined(__BIG_ENDIAN)
+	u8 op_code;
+	u8 op_attr;
+#define ISCSI_LOGIN_REQUEST_NEXT_STAGE (0x3<<0)
+#define ISCSI_LOGIN_REQUEST_NEXT_STAGE_SHIFT 0
+#define ISCSI_LOGIN_REQUEST_CURRENT_STAGE (0x3<<2)
+#define ISCSI_LOGIN_REQUEST_CURRENT_STAGE_SHIFT 2
+#define ISCSI_LOGIN_REQUEST_RESERVED0 (0x3<<4)
+#define ISCSI_LOGIN_REQUEST_RESERVED0_SHIFT 4
+#define ISCSI_LOGIN_REQUEST_CONT (0x1<<6)
+#define ISCSI_LOGIN_REQUEST_CONT_SHIFT 6
+#define ISCSI_LOGIN_REQUEST_TRANSIT (0x1<<7)
+#define ISCSI_LOGIN_REQUEST_TRANSIT_SHIFT 7
+	u8 version_max;
+	u8 version_min;
+#elif defined(__LITTLE_ENDIAN)
+	u8 version_min;
+	u8 version_max;
+	u8 op_attr;
+#define ISCSI_LOGIN_REQUEST_NEXT_STAGE (0x3<<0)
+#define ISCSI_LOGIN_REQUEST_NEXT_STAGE_SHIFT 0
+#define ISCSI_LOGIN_REQUEST_CURRENT_STAGE (0x3<<2)
+#define ISCSI_LOGIN_REQUEST_CURRENT_STAGE_SHIFT 2
+#define ISCSI_LOGIN_REQUEST_RESERVED0 (0x3<<4)
+#define ISCSI_LOGIN_REQUEST_RESERVED0_SHIFT 4
+#define ISCSI_LOGIN_REQUEST_CONT (0x1<<6)
+#define ISCSI_LOGIN_REQUEST_CONT_SHIFT 6
+#define ISCSI_LOGIN_REQUEST_TRANSIT (0x1<<7)
+#define ISCSI_LOGIN_REQUEST_TRANSIT_SHIFT 7
+	u8 op_code;
+#endif
+	u32 data_length;
+	u32 isid_lo;
+#if defined(__BIG_ENDIAN)
+	u16 isid_hi;
+	u16 tsih;
+#elif defined(__LITTLE_ENDIAN)
+	u16 tsih;
+	u16 isid_hi;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 reserved2;
+	u16 itt;
+#define ISCSI_LOGIN_REQUEST_INDEX (0x3FFF<<0)
+#define ISCSI_LOGIN_REQUEST_INDEX_SHIFT 0
+#define ISCSI_LOGIN_REQUEST_TYPE (0x3<<14)
+#define ISCSI_LOGIN_REQUEST_TYPE_SHIFT 14
+#elif defined(__LITTLE_ENDIAN)
+	u16 itt;
+#define ISCSI_LOGIN_REQUEST_INDEX (0x3FFF<<0)
+#define ISCSI_LOGIN_REQUEST_INDEX_SHIFT 0
+#define ISCSI_LOGIN_REQUEST_TYPE (0x3<<14)
+#define ISCSI_LOGIN_REQUEST_TYPE_SHIFT 14
+	u16 reserved2;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 cid;
+	u16 reserved3;
+#elif defined(__LITTLE_ENDIAN)
+	u16 reserved3;
+	u16 cid;
+#endif
+	u32 cmd_sn;
+	u32 exp_stat_sn;
+	u32 reserved4;
+	u32 resp_bd_list_addr_lo;
+	u32 resp_bd_list_addr_hi;
+	u32 resp_buffer;
+#define ISCSI_LOGIN_REQUEST_RESP_BUFFER_LENGTH (0xFFFFFF<<0)
+#define ISCSI_LOGIN_REQUEST_RESP_BUFFER_LENGTH_SHIFT 0
+#define ISCSI_LOGIN_REQUEST_NUM_RESP_BDS (0xFF<<24)
+#define ISCSI_LOGIN_REQUEST_NUM_RESP_BDS_SHIFT 24
+#if defined(__BIG_ENDIAN)
+	u16 reserved8;
+	u8 reserved7;
+	u8 flags;
+#define ISCSI_LOGIN_REQUEST_RESERVED5 (0x3<<0)
+#define ISCSI_LOGIN_REQUEST_RESERVED5_SHIFT 0
+#define ISCSI_LOGIN_REQUEST_UPDATE_EXP_STAT_SN (0x1<<2)
+#define ISCSI_LOGIN_REQUEST_UPDATE_EXP_STAT_SN_SHIFT 2
+#define ISCSI_LOGIN_REQUEST_RESERVED6 (0x1F<<3)
+#define ISCSI_LOGIN_REQUEST_RESERVED6_SHIFT 3
+#elif defined(__LITTLE_ENDIAN)
+	u8 flags;
+#define ISCSI_LOGIN_REQUEST_RESERVED5 (0x3<<0)
+#define ISCSI_LOGIN_REQUEST_RESERVED5_SHIFT 0
+#define ISCSI_LOGIN_REQUEST_UPDATE_EXP_STAT_SN (0x1<<2)
+#define ISCSI_LOGIN_REQUEST_UPDATE_EXP_STAT_SN_SHIFT 2
+#define ISCSI_LOGIN_REQUEST_RESERVED6 (0x1F<<3)
+#define ISCSI_LOGIN_REQUEST_RESERVED6_SHIFT 3
+	u8 reserved7;
+	u16 reserved8;
+#endif
+	u32 bd_list_addr_lo;
+	u32 bd_list_addr_hi;
+#if defined(__BIG_ENDIAN)
+	u8 cq_index;
+	u8 reserved10;
+	u8 reserved9;
+	u8 num_bds;
+#elif defined(__LITTLE_ENDIAN)
+	u8 num_bds;
+	u8 reserved9;
+	u8 reserved10;
+	u8 cq_index;
+#endif
+};
+
+
+/*
+ * iSCSI Login CQE
+ */
+struct bnx2i_login_response {
+#if defined(__BIG_ENDIAN)
+	u8 op_code;
+	u8 response_flags;
+#define ISCSI_LOGIN_RESPONSE_NEXT_STAGE (0x3<<0)
+#define ISCSI_LOGIN_RESPONSE_NEXT_STAGE_SHIFT 0
+#define ISCSI_LOGIN_RESPONSE_CURRENT_STAGE (0x3<<2)
+#define ISCSI_LOGIN_RESPONSE_CURRENT_STAGE_SHIFT 2
+#define ISCSI_LOGIN_RESPONSE_RESERVED0 (0x3<<4)
+#define ISCSI_LOGIN_RESPONSE_RESERVED0_SHIFT 4
+#define ISCSI_LOGIN_RESPONSE_CONT (0x1<<6)
+#define ISCSI_LOGIN_RESPONSE_CONT_SHIFT 6
+#define ISCSI_LOGIN_RESPONSE_TRANSIT (0x1<<7)
+#define ISCSI_LOGIN_RESPONSE_TRANSIT_SHIFT 7
+	u8 version_max;
+	u8 version_active;
+#elif defined(__LITTLE_ENDIAN)
+	u8 version_active;
+	u8 version_max;
+	u8 response_flags;
+#define ISCSI_LOGIN_RESPONSE_NEXT_STAGE (0x3<<0)
+#define ISCSI_LOGIN_RESPONSE_NEXT_STAGE_SHIFT 0
+#define ISCSI_LOGIN_RESPONSE_CURRENT_STAGE (0x3<<2)
+#define ISCSI_LOGIN_RESPONSE_CURRENT_STAGE_SHIFT 2
+#define ISCSI_LOGIN_RESPONSE_RESERVED0 (0x3<<4)
+#define ISCSI_LOGIN_RESPONSE_RESERVED0_SHIFT 4
+#define ISCSI_LOGIN_RESPONSE_CONT (0x1<<6)
+#define ISCSI_LOGIN_RESPONSE_CONT_SHIFT 6
+#define ISCSI_LOGIN_RESPONSE_TRANSIT (0x1<<7)
+#define ISCSI_LOGIN_RESPONSE_TRANSIT_SHIFT 7
+	u8 op_code;
+#endif
+	u32 data_length;
+	u32 exp_cmd_sn;
+	u32 max_cmd_sn;
+	u32 reserved1[2];
+#if defined(__BIG_ENDIAN)
+	u16 reserved3;
+	u8 err_code;
+	u8 reserved2;
+#elif defined(__LITTLE_ENDIAN)
+	u8 reserved2;
+	u8 err_code;
+	u16 reserved3;
+#endif
+	u32 stat_sn;
+	u32 isid_lo;
+#if defined(__BIG_ENDIAN)
+	u16 isid_hi;
+	u16 tsih;
+#elif defined(__LITTLE_ENDIAN)
+	u16 tsih;
+	u16 isid_hi;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 status_class;
+	u8 status_detail;
+	u16 reserved4;
+#elif defined(__LITTLE_ENDIAN)
+	u16 reserved4;
+	u8 status_detail;
+	u8 status_class;
+#endif
+	u32 reserved5[3];
+#if defined(__BIG_ENDIAN)
+	u16 reserved6;
+	u16 itt;
+#define ISCSI_LOGIN_RESPONSE_INDEX (0x3FFF<<0)
+#define ISCSI_LOGIN_RESPONSE_INDEX_SHIFT 0
+#define ISCSI_LOGIN_RESPONSE_TYPE (0x3<<14)
+#define ISCSI_LOGIN_RESPONSE_TYPE_SHIFT 14
+#elif defined(__LITTLE_ENDIAN)
+	u16 itt;
+#define ISCSI_LOGIN_RESPONSE_INDEX (0x3FFF<<0)
+#define ISCSI_LOGIN_RESPONSE_INDEX_SHIFT 0
+#define ISCSI_LOGIN_RESPONSE_TYPE (0x3<<14)
+#define ISCSI_LOGIN_RESPONSE_TYPE_SHIFT 14
+	u16 reserved6;
+#endif
+	u32 cq_req_sn;
+};
+
+
+/*
+ * iSCSI Logout SQ WQE
+ */
+struct bnx2i_logout_request {
+#if defined(__BIG_ENDIAN)
+	u8 op_code;
+	u8 op_attr;
+#define ISCSI_LOGOUT_REQUEST_REASON (0x7F<<0)
+#define ISCSI_LOGOUT_REQUEST_REASON_SHIFT 0
+#define ISCSI_LOGOUT_REQUEST_ALWAYS_ONE (0x1<<7)
+#define ISCSI_LOGOUT_REQUEST_ALWAYS_ONE_SHIFT 7
+	u16 reserved0;
+#elif defined(__LITTLE_ENDIAN)
+	u16 reserved0;
+	u8 op_attr;
+#define ISCSI_LOGOUT_REQUEST_REASON (0x7F<<0)
+#define ISCSI_LOGOUT_REQUEST_REASON_SHIFT 0
+#define ISCSI_LOGOUT_REQUEST_ALWAYS_ONE (0x1<<7)
+#define ISCSI_LOGOUT_REQUEST_ALWAYS_ONE_SHIFT 7
+	u8 op_code;
+#endif
+	u32 data_length;
+	u32 reserved1[2];
+#if defined(__BIG_ENDIAN)
+	u16 reserved2;
+	u16 itt;
+#define ISCSI_LOGOUT_REQUEST_INDEX (0x3FFF<<0)
+#define ISCSI_LOGOUT_REQUEST_INDEX_SHIFT 0
+#define ISCSI_LOGOUT_REQUEST_TYPE (0x3<<14)
+#define ISCSI_LOGOUT_REQUEST_TYPE_SHIFT 14
+#elif defined(__LITTLE_ENDIAN)
+	u16 itt;
+#define ISCSI_LOGOUT_REQUEST_INDEX (0x3FFF<<0)
+#define ISCSI_LOGOUT_REQUEST_INDEX_SHIFT 0
+#define ISCSI_LOGOUT_REQUEST_TYPE (0x3<<14)
+#define ISCSI_LOGOUT_REQUEST_TYPE_SHIFT 14
+	u16 reserved2;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 cid;
+	u16 reserved3;
+#elif defined(__LITTLE_ENDIAN)
+	u16 reserved3;
+	u16 cid;
+#endif
+	u32 cmd_sn;
+	u32 reserved4[5];
+	u32 zero_fill;
+	u32 bd_list_addr_lo;
+	u32 bd_list_addr_hi;
+#if defined(__BIG_ENDIAN)
+	u8 cq_index;
+	u8 reserved6;
+	u8 reserved5;
+	u8 num_bds;
+#elif defined(__LITTLE_ENDIAN)
+	u8 num_bds;
+	u8 reserved5;
+	u8 reserved6;
+	u8 cq_index;
+#endif
+};
+
+
+/*
+ * iSCSI Logout CQE
+ */
+struct bnx2i_logout_response {
+#if defined(__BIG_ENDIAN)
+	u8 op_code;
+	u8 reserved1;
+	u8 response;
+	u8 reserved0;
+#elif defined(__LITTLE_ENDIAN)
+	u8 reserved0;
+	u8 response;
+	u8 reserved1;
+	u8 op_code;
+#endif
+	u32 reserved2;
+	u32 exp_cmd_sn;
+	u32 max_cmd_sn;
+	u32 reserved3[2];
+#if defined(__BIG_ENDIAN)
+	u16 reserved5;
+	u8 err_code;
+	u8 reserved4;
+#elif defined(__LITTLE_ENDIAN)
+	u8 reserved4;
+	u8 err_code;
+	u16 reserved5;
+#endif
+	u32 reserved6[3];
+#if defined(__BIG_ENDIAN)
+	u16 time_to_wait;
+	u16 time_to_retain;
+#elif defined(__LITTLE_ENDIAN)
+	u16 time_to_retain;
+	u16 time_to_wait;
+#endif
+	u32 reserved7[3];
+#if defined(__BIG_ENDIAN)
+	u16 reserved8;
+	u16 itt;
+#define ISCSI_LOGOUT_RESPONSE_INDEX (0x3FFF<<0)
+#define ISCSI_LOGOUT_RESPONSE_INDEX_SHIFT 0
+#define ISCSI_LOGOUT_RESPONSE_TYPE (0x3<<14)
+#define ISCSI_LOGOUT_RESPONSE_TYPE_SHIFT 14
+#elif defined(__LITTLE_ENDIAN)
+	u16 itt;
+#define ISCSI_LOGOUT_RESPONSE_INDEX (0x3FFF<<0)
+#define ISCSI_LOGOUT_RESPONSE_INDEX_SHIFT 0
+#define ISCSI_LOGOUT_RESPONSE_TYPE (0x3<<14)
+#define ISCSI_LOGOUT_RESPONSE_TYPE_SHIFT 14
+	u16 reserved8;
+#endif
+	u32 cq_req_sn;
+};
+
+
+/*
+ * iSCSI Nop-In CQE
+ */
+struct bnx2i_nop_in_msg {
+#if defined(__BIG_ENDIAN)
+	u8 op_code;
+	u8 reserved1;
+	u16 reserved0;
+#elif defined(__LITTLE_ENDIAN)
+	u16 reserved0;
+	u8 reserved1;
+	u8 op_code;
+#endif
+	u32 data_length;
+	u32 exp_cmd_sn;
+	u32 max_cmd_sn;
+	u32 ttt;
+	u32 reserved2;
+#if defined(__BIG_ENDIAN)
+	u16 reserved4;
+	u8 err_code;
+	u8 reserved3;
+#elif defined(__LITTLE_ENDIAN)
+	u8 reserved3;
+	u8 err_code;
+	u16 reserved4;
+#endif
+	u32 reserved5;
+	u32 lun[2];
+	u32 reserved6[4];
+#if defined(__BIG_ENDIAN)
+	u16 reserved7;
+	u16 itt;
+#define ISCSI_NOP_IN_MSG_INDEX (0x3FFF<<0)
+#define ISCSI_NOP_IN_MSG_INDEX_SHIFT 0
+#define ISCSI_NOP_IN_MSG_TYPE (0x3<<14)
+#define ISCSI_NOP_IN_MSG_TYPE_SHIFT 14
+#elif defined(__LITTLE_ENDIAN)
+	u16 itt;
+#define ISCSI_NOP_IN_MSG_INDEX (0x3FFF<<0)
+#define ISCSI_NOP_IN_MSG_INDEX_SHIFT 0
+#define ISCSI_NOP_IN_MSG_TYPE (0x3<<14)
+#define ISCSI_NOP_IN_MSG_TYPE_SHIFT 14
+	u16 reserved7;
+#endif
+	u32 cq_req_sn;
+};
+
+
+/*
+ * iSCSI NOP-OUT SQ WQE
+ */
+struct bnx2i_nop_out_request {
+#if defined(__BIG_ENDIAN)
+	u8 op_code;
+	u8 op_attr;
+#define ISCSI_NOP_OUT_REQUEST_RESERVED1 (0x7F<<0)
+#define ISCSI_NOP_OUT_REQUEST_RESERVED1_SHIFT 0
+#define ISCSI_NOP_OUT_REQUEST_ALWAYS_ONE (0x1<<7)
+#define ISCSI_NOP_OUT_REQUEST_ALWAYS_ONE_SHIFT 7
+	u16 reserved0;
+#elif defined(__LITTLE_ENDIAN)
+	u16 reserved0;
+	u8 op_attr;
+#define ISCSI_NOP_OUT_REQUEST_RESERVED1 (0x7F<<0)
+#define ISCSI_NOP_OUT_REQUEST_RESERVED1_SHIFT 0
+#define ISCSI_NOP_OUT_REQUEST_ALWAYS_ONE (0x1<<7)
+#define ISCSI_NOP_OUT_REQUEST_ALWAYS_ONE_SHIFT 7
+	u8 op_code;
+#endif
+	u32 data_length;
+	u32 lun[2];
+#if defined(__BIG_ENDIAN)
+	u16 reserved2;
+	u16 itt;
+#define ISCSI_NOP_OUT_REQUEST_INDEX (0x3FFF<<0)
+#define ISCSI_NOP_OUT_REQUEST_INDEX_SHIFT 0
+#define ISCSI_NOP_OUT_REQUEST_TYPE (0x3<<14)
+#define ISCSI_NOP_OUT_REQUEST_TYPE_SHIFT 14
+#elif defined(__LITTLE_ENDIAN)
+	u16 itt;
+#define ISCSI_NOP_OUT_REQUEST_INDEX (0x3FFF<<0)
+#define ISCSI_NOP_OUT_REQUEST_INDEX_SHIFT 0
+#define ISCSI_NOP_OUT_REQUEST_TYPE (0x3<<14)
+#define ISCSI_NOP_OUT_REQUEST_TYPE_SHIFT 14
+	u16 reserved2;
+#endif
+	u32 ttt;
+	u32 cmd_sn;
+	u32 reserved3[2];
+	u32 resp_bd_list_addr_lo;
+	u32 resp_bd_list_addr_hi;
+	u32 resp_buffer;
+#define ISCSI_NOP_OUT_REQUEST_RESP_BUFFER_LENGTH (0xFFFFFF<<0)
+#define ISCSI_NOP_OUT_REQUEST_RESP_BUFFER_LENGTH_SHIFT 0
+#define ISCSI_NOP_OUT_REQUEST_NUM_RESP_BDS (0xFF<<24)
+#define ISCSI_NOP_OUT_REQUEST_NUM_RESP_BDS_SHIFT 24
+#if defined(__BIG_ENDIAN)
+	u16 reserved7;
+	u8 reserved6;
+	u8 flags;
+#define ISCSI_NOP_OUT_REQUEST_RESERVED4 (0x1<<0)
+#define ISCSI_NOP_OUT_REQUEST_RESERVED4_SHIFT 0
+#define ISCSI_NOP_OUT_REQUEST_LOCAL_COMPLETION (0x1<<1)
+#define ISCSI_NOP_OUT_REQUEST_LOCAL_COMPLETION_SHIFT 1
+#define ISCSI_NOP_OUT_REQUEST_ZERO_FILL (0x3F<<2)
+#define ISCSI_NOP_OUT_REQUEST_ZERO_FILL_SHIFT 2
+#elif defined(__LITTLE_ENDIAN)
+	u8 flags;
+#define ISCSI_NOP_OUT_REQUEST_RESERVED4 (0x1<<0)
+#define ISCSI_NOP_OUT_REQUEST_RESERVED4_SHIFT 0
+#define ISCSI_NOP_OUT_REQUEST_LOCAL_COMPLETION (0x1<<1)
+#define ISCSI_NOP_OUT_REQUEST_LOCAL_COMPLETION_SHIFT 1
+#define ISCSI_NOP_OUT_REQUEST_ZERO_FILL (0x3F<<2)
+#define ISCSI_NOP_OUT_REQUEST_ZERO_FILL_SHIFT 2
+	u8 reserved6;
+	u16 reserved7;
+#endif
+	u32 bd_list_addr_lo;
+	u32 bd_list_addr_hi;
+#if defined(__BIG_ENDIAN)
+	u8 cq_index;
+	u8 reserved9;
+	u8 reserved8;
+	u8 num_bds;
+#elif defined(__LITTLE_ENDIAN)
+	u8 num_bds;
+	u8 reserved8;
+	u8 reserved9;
+	u8 cq_index;
+#endif
+};
+
+/*
+ * iSCSI Reject CQE
+ */
+struct bnx2i_reject_msg {
+#if defined(__BIG_ENDIAN)
+	u8 op_code;
+	u8 reserved1;
+	u8 reason;
+	u8 reserved0;
+#elif defined(__LITTLE_ENDIAN)
+	u8 reserved0;
+	u8 reason;
+	u8 reserved1;
+	u8 op_code;
+#endif
+	u32 data_length;
+	u32 exp_cmd_sn;
+	u32 max_cmd_sn;
+	u32 reserved2[2];
+#if defined(__BIG_ENDIAN)
+	u16 reserved4;
+	u8 err_code;
+	u8 reserved3;
+#elif defined(__LITTLE_ENDIAN)
+	u8 reserved3;
+	u8 err_code;
+	u16 reserved4;
+#endif
+	u32 reserved5[8];
+	u32 cq_req_sn;
+};
+
+/*
+ * bnx2i iSCSI TMF SQ WQE
+ */
+struct bnx2i_tmf_request {
+#if defined(__BIG_ENDIAN)
+	u8 op_code;
+	u8 op_attr;
+#define ISCSI_TMF_REQUEST_FUNCTION (0x7F<<0)
+#define ISCSI_TMF_REQUEST_FUNCTION_SHIFT 0
+#define ISCSI_TMF_REQUEST_ALWAYS_ONE (0x1<<7)
+#define ISCSI_TMF_REQUEST_ALWAYS_ONE_SHIFT 7
+	u16 reserved0;
+#elif defined(__LITTLE_ENDIAN)
+	u16 reserved0;
+	u8 op_attr;
+#define ISCSI_TMF_REQUEST_FUNCTION (0x7F<<0)
+#define ISCSI_TMF_REQUEST_FUNCTION_SHIFT 0
+#define ISCSI_TMF_REQUEST_ALWAYS_ONE (0x1<<7)
+#define ISCSI_TMF_REQUEST_ALWAYS_ONE_SHIFT 7
+	u8 op_code;
+#endif
+	u32 data_length;
+	u32 lun[2];
+#if defined(__BIG_ENDIAN)
+	u16 reserved1;
+	u16 itt;
+#define ISCSI_TMF_REQUEST_INDEX (0x3FFF<<0)
+#define ISCSI_TMF_REQUEST_INDEX_SHIFT 0
+#define ISCSI_TMF_REQUEST_TYPE (0x3<<14)
+#define ISCSI_TMF_REQUEST_TYPE_SHIFT 14
+#elif defined(__LITTLE_ENDIAN)
+	u16 itt;
+#define ISCSI_TMF_REQUEST_INDEX (0x3FFF<<0)
+#define ISCSI_TMF_REQUEST_INDEX_SHIFT 0
+#define ISCSI_TMF_REQUEST_TYPE (0x3<<14)
+#define ISCSI_TMF_REQUEST_TYPE_SHIFT 14
+	u16 reserved1;
+#endif
+	u32 ref_itt;
+	u32 cmd_sn;
+	u32 reserved2;
+	u32 ref_cmd_sn;
+	u32 reserved3[3];
+	u32 zero_fill;
+	u32 bd_list_addr_lo;
+	u32 bd_list_addr_hi;
+#if defined(__BIG_ENDIAN)
+	u8 cq_index;
+	u8 reserved5;
+	u8 reserved4;
+	u8 num_bds;
+#elif defined(__LITTLE_ENDIAN)
+	u8 num_bds;
+	u8 reserved4;
+	u8 reserved5;
+	u8 cq_index;
+#endif
+};
+
+/*
+ * iSCSI Text SQ WQE
+ */
+struct bnx2i_text_request {
+#if defined(__BIG_ENDIAN)
+	u8 op_code;
+	u8 op_attr;
+#define ISCSI_TEXT_REQUEST_RESERVED1 (0x3F<<0)
+#define ISCSI_TEXT_REQUEST_RESERVED1_SHIFT 0
+#define ISCSI_TEXT_REQUEST_CONT (0x1<<6)
+#define ISCSI_TEXT_REQUEST_CONT_SHIFT 6
+#define ISCSI_TEXT_REQUEST_FINAL (0x1<<7)
+#define ISCSI_TEXT_REQUEST_FINAL_SHIFT 7
+	u16 reserved0;
+#elif defined(__LITTLE_ENDIAN)
+	u16 reserved0;
+	u8 op_attr;
+#define ISCSI_TEXT_REQUEST_RESERVED1 (0x3F<<0)
+#define ISCSI_TEXT_REQUEST_RESERVED1_SHIFT 0
+#define ISCSI_TEXT_REQUEST_CONT (0x1<<6)
+#define ISCSI_TEXT_REQUEST_CONT_SHIFT 6
+#define ISCSI_TEXT_REQUEST_FINAL (0x1<<7)
+#define ISCSI_TEXT_REQUEST_FINAL_SHIFT 7
+	u8 op_code;
+#endif
+	u32 data_length;
+	u32 lun[2];
+#if defined(__BIG_ENDIAN)
+	u16 reserved3;
+	u16 itt;
+#define ISCSI_TEXT_REQUEST_INDEX (0x3FFF<<0)
+#define ISCSI_TEXT_REQUEST_INDEX_SHIFT 0
+#define ISCSI_TEXT_REQUEST_TYPE (0x3<<14)
+#define ISCSI_TEXT_REQUEST_TYPE_SHIFT 14
+#elif defined(__LITTLE_ENDIAN)
+	u16 itt;
+#define ISCSI_TEXT_REQUEST_INDEX (0x3FFF<<0)
+#define ISCSI_TEXT_REQUEST_INDEX_SHIFT 0
+#define ISCSI_TEXT_REQUEST_TYPE (0x3<<14)
+#define ISCSI_TEXT_REQUEST_TYPE_SHIFT 14
+	u16 reserved3;
+#endif
+	u32 ttt;
+	u32 cmd_sn;
+	u32 reserved4[2];
+	u32 resp_bd_list_addr_lo;
+	u32 resp_bd_list_addr_hi;
+	u32 resp_buffer;
+#define ISCSI_TEXT_REQUEST_RESP_BUFFER_LENGTH (0xFFFFFF<<0)
+#define ISCSI_TEXT_REQUEST_RESP_BUFFER_LENGTH_SHIFT 0
+#define ISCSI_TEXT_REQUEST_NUM_RESP_BDS (0xFF<<24)
+#define ISCSI_TEXT_REQUEST_NUM_RESP_BDS_SHIFT 24
+	u32 zero_fill;
+	u32 bd_list_addr_lo;
+	u32 bd_list_addr_hi;
+#if defined(__BIG_ENDIAN)
+	u8 cq_index;
+	u8 reserved7;
+	u8 reserved6;
+	u8 num_bds;
+#elif defined(__LITTLE_ENDIAN)
+	u8 num_bds;
+	u8 reserved6;
+	u8 reserved7;
+	u8 cq_index;
+#endif
+};
+
+/*
+ * iSCSI SQ WQE
+ */
+union iscsi_request {
+	struct bnx2i_cmd_request cmd;
+	struct bnx2i_tmf_request tmf;
+	struct bnx2i_nop_out_request nop_out;
+	struct bnx2i_login_request login_req;
+	struct bnx2i_text_request text;
+	struct bnx2i_logout_request logout_req;
+	struct bnx2i_cleanup_request cleanup;
+};
+
+
+/*
+ * iSCSI TMF CQE
+ */
+struct bnx2i_tmf_response {
+#if defined(__BIG_ENDIAN)
+	u8 op_code;
+	u8 reserved1;
+	u8 response;
+	u8 reserved0;
+#elif defined(__LITTLE_ENDIAN)
+	u8 reserved0;
+	u8 response;
+	u8 reserved1;
+	u8 op_code;
+#endif
+	u32 reserved2;
+	u32 exp_cmd_sn;
+	u32 max_cmd_sn;
+	u32 reserved3[2];
+#if defined(__BIG_ENDIAN)
+	u16 reserved5;
+	u8 err_code;
+	u8 reserved4;
+#elif defined(__LITTLE_ENDIAN)
+	u8 reserved4;
+	u8 err_code;
+	u16 reserved5;
+#endif
+	u32 reserved6[7];
+#if defined(__BIG_ENDIAN)
+	u16 reserved7;
+	u16 itt;
+#define ISCSI_TMF_RESPONSE_INDEX (0x3FFF<<0)
+#define ISCSI_TMF_RESPONSE_INDEX_SHIFT 0
+#define ISCSI_TMF_RESPONSE_TYPE (0x3<<14)
+#define ISCSI_TMF_RESPONSE_TYPE_SHIFT 14
+#elif defined(__LITTLE_ENDIAN)
+	u16 itt;
+#define ISCSI_TMF_RESPONSE_INDEX (0x3FFF<<0)
+#define ISCSI_TMF_RESPONSE_INDEX_SHIFT 0
+#define ISCSI_TMF_RESPONSE_TYPE (0x3<<14)
+#define ISCSI_TMF_RESPONSE_TYPE_SHIFT 14
+	u16 reserved7;
+#endif
+	u32 cq_req_sn;
+};
+
+/*
+ * iSCSI Text CQE
+ */
+struct bnx2i_text_response {
+#if defined(__BIG_ENDIAN)
+	u8 op_code;
+	u8 response_flags;
+#define ISCSI_TEXT_RESPONSE_RESERVED1 (0x3F<<0)
+#define ISCSI_TEXT_RESPONSE_RESERVED1_SHIFT 0
+#define ISCSI_TEXT_RESPONSE_CONT (0x1<<6)
+#define ISCSI_TEXT_RESPONSE_CONT_SHIFT 6
+#define ISCSI_TEXT_RESPONSE_FINAL (0x1<<7)
+#define ISCSI_TEXT_RESPONSE_FINAL_SHIFT 7
+	u16 reserved0;
+#elif defined(__LITTLE_ENDIAN)
+	u16 reserved0;
+	u8 response_flags;
+#define ISCSI_TEXT_RESPONSE_RESERVED1 (0x3F<<0)
+#define ISCSI_TEXT_RESPONSE_RESERVED1_SHIFT 0
+#define ISCSI_TEXT_RESPONSE_CONT (0x1<<6)
+#define ISCSI_TEXT_RESPONSE_CONT_SHIFT 6
+#define ISCSI_TEXT_RESPONSE_FINAL (0x1<<7)
+#define ISCSI_TEXT_RESPONSE_FINAL_SHIFT 7
+	u8 op_code;
+#endif
+	u32 data_length;
+	u32 exp_cmd_sn;
+	u32 max_cmd_sn;
+	u32 ttt;
+	u32 reserved2;
+#if defined(__BIG_ENDIAN)
+	u16 reserved4;
+	u8 err_code;
+	u8 reserved3;
+#elif defined(__LITTLE_ENDIAN)
+	u8 reserved3;
+	u8 err_code;
+	u16 reserved4;
+#endif
+	u32 reserved5;
+	u32 lun[2];
+	u32 reserved6[4];
+#if defined(__BIG_ENDIAN)
+	u16 reserved7;
+	u16 itt;
+#define ISCSI_TEXT_RESPONSE_INDEX (0x3FFF<<0)
+#define ISCSI_TEXT_RESPONSE_INDEX_SHIFT 0
+#define ISCSI_TEXT_RESPONSE_TYPE (0x3<<14)
+#define ISCSI_TEXT_RESPONSE_TYPE_SHIFT 14
+#elif defined(__LITTLE_ENDIAN)
+	u16 itt;
+#define ISCSI_TEXT_RESPONSE_INDEX (0x3FFF<<0)
+#define ISCSI_TEXT_RESPONSE_INDEX_SHIFT 0
+#define ISCSI_TEXT_RESPONSE_TYPE (0x3<<14)
+#define ISCSI_TEXT_RESPONSE_TYPE_SHIFT 14
+	u16 reserved7;
+#endif
+	u32 cq_req_sn;
+};
+
+/*
+ * iSCSI CQE
+ */
+union iscsi_response {
+	struct bnx2i_cmd_response cmd;
+	struct bnx2i_tmf_response tmf;
+	struct bnx2i_login_response login_resp;
+	struct bnx2i_text_response text;
+	struct bnx2i_logout_response logout_resp;
+	struct bnx2i_cleanup_response cleanup;
+	struct bnx2i_reject_msg reject;
+	struct bnx2i_async_msg async;
+	struct bnx2i_nop_in_msg nop_in;
+};
+
+#endif /* __57XX_ISCSI_HSI_LINUX_LE__ */
diff -r 2e9e6572f41c drivers/net/bnx2/Makefile
--- /dev/null
+++ b/drivers/net/bnx2/Makefile
@@ -0,0 +1,3 @@
+EXTRA_CFLAGS += -DNEW_SKB -DHAVE_IP_HDR -DHAVE_LE32 -DHAVE_GFP -DHAVE_BOOL -DHAVE_AER -DHAVE_DEV_ERR -DHAVE_DEV_PRINTK -DHAVE_REAL_TX
+
+obj-$(CONFIG_BNX2) += bnx2.o cnic.o
diff -r 2e9e6572f41c drivers/net/bnx2/bnx2.c
--- /dev/null
+++ b/drivers/net/bnx2/bnx2.c
@@ -0,0 +1,12213 @@
+/* bnx2.c: Broadcom NX2 network driver.
+ *
+ * Copyright (c) 2004-2012 Broadcom Corporation
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation.
+ *
+ * Written by: Michael Chan  (mchan@broadcom.com)
+ */
+
+#include <linux/version.h>
+
+#if (LINUX_VERSION_CODE < 0x020612)
+#include <linux/config.h>
+#endif
+
+#if (LINUX_VERSION_CODE < 0x020500)
+#if defined(CONFIG_MODVERSIONS) && defined(MODULE) && ! defined(MODVERSIONS)
+#define MODVERSIONS
+#include <linux/modversions.h>
+#endif
+#endif
+
+#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
+
+#include <linux/module.h>
+#if (LINUX_VERSION_CODE >= 0x020600)
+#include <linux/moduleparam.h>
+#endif
+
+#include <linux/kernel.h>
+#include <linux/timer.h>
+#include <linux/errno.h>
+#include <linux/ioport.h>
+#include <linux/slab.h>
+#include <linux/vmalloc.h>
+#include <linux/interrupt.h>
+#include <linux/pci.h>
+#include <linux/init.h>
+#include <linux/netdevice.h>
+#include <linux/etherdevice.h>
+#include <linux/skbuff.h>
+#if (LINUX_VERSION_CODE >= 0x020600)
+#include <linux/dma-mapping.h>
+#endif
+#include <linux/bitops.h>
+#include <asm/io.h>
+#include <asm/irq.h>
+#include <linux/delay.h>
+#include <asm/byteorder.h>
+#include <asm/page.h>
+#include <linux/time.h>
+#include <linux/ethtool.h>
+#include <linux/mii.h>
+#include <linux/if_vlan.h>
+#if defined(CONFIG_VLAN_8021Q) || defined(CONFIG_VLAN_8021Q_MODULE)
+#define BCM_VLAN 1
+#endif
+
+#ifdef NETIF_F_TSO
+#include <net/ip.h>
+#include <net/tcp.h>
+#include <net/checksum.h>
+#define BCM_TSO 1
+#endif
+#if (LINUX_VERSION_CODE >= 0x020600)
+#include <linux/workqueue.h>
+#endif
+#ifndef BNX2_BOOT_DISK
+#include <linux/crc32.h>
+#endif
+#include <linux/prefetch.h>
+#include <linux/cache.h>
+#include <linux/zlib.h>
+#if (LINUX_VERSION_CODE >= 0x20617) && !defined(NETIF_F_MULTI_QUEUE)
+#include <linux/log2.h>
+#endif
+#ifdef HAVE_AER
+#include <linux/aer.h>
+#endif
+
+#if (LINUX_VERSION_CODE >= 0x020610)
+#define BCM_CNIC 1
+
+#include "cnic_if.h"
+#endif
+#include "bnx2.h"
+#include "bnx2_fw.h"
+#include "bnx2_fw2.h"
+
+#define DRV_MODULE_NAME		"bnx2"
+#define DRV_MODULE_VERSION	"2.2.1j"
+#define DRV_MODULE_RELDATE	"Mar 07, 2012"
+
+#define RUN_AT(x) (jiffies + (x))
+
+/* Time in jiffies before concluding the transmitter is hung. */
+#if defined(__VMKLNX__)
+/* On VMware ESX there is a possibility that that netdev watchdog thread
+ * runs before the reset task if the machine is loaded.  If this occurs
+ * too many times, these premature watchdog triggers will cause a PSOD
+ * on a VMware ESX beta build */ 
+#define TX_TIMEOUT  (20*HZ)
+#else
+#define TX_TIMEOUT  (5*HZ)
+#endif /* defined(__VMKLNX__) */
+
+#if defined(__VMKLNX__) && (VMWARE_ESX_DDK_VERSION >= 50000)
+#include "cnic_register.h"
+
+static int bnx2_registered_cnic_adapter;
+#endif /* defined(__VMKLNX__) && (VMWARE_ESX_DDK_VERSION >= 50000)*/
+
+static char version[] __devinitdata =
+	"Broadcom NetXtreme II Gigabit Ethernet Driver " DRV_MODULE_NAME " v" DRV_MODULE_VERSION " (" DRV_MODULE_RELDATE ")\n";
+
+MODULE_AUTHOR("Michael Chan <mchan@broadcom.com>");
+MODULE_DESCRIPTION("Broadcom NetXtreme II BCM5706/5708/5709/5716 Driver");
+MODULE_LICENSE("GPL");
+MODULE_VERSION(DRV_MODULE_VERSION);
+
+static int disable_msi = 0;
+
+#if (LINUX_VERSION_CODE >= 0x20600)
+module_param(disable_msi, int, 0);
+MODULE_PARM_DESC(disable_msi, "Disable Message Signaled Interrupt (MSI)");
+#endif
+
+static int stop_on_tx_timeout = 0;
+
+module_param(stop_on_tx_timeout, int, 0);
+MODULE_PARM_DESC(stop_on_tx_timeout, "For debugging purposes, prevent a chip "
+				     " reset when a tx timeout occurs");
+#if defined(__VMKLNX__)
+static int psod_on_tx_timeout;
+
+module_param(psod_on_tx_timeout, int, 0);
+MODULE_PARM_DESC(psod_on_tx_timeout, "For debugging purposes, crash the system "
+				     " when a tx timeout occurs");
+
+static int disable_msi_1shot = 0;
+module_param(disable_msi_1shot, int, 0);
+MODULE_PARM_DESC(disable_msi_1shot, "For debugging purposes, disable 1shot "
+                                     " MSI mode if set to value of 1");
+#endif
+
+#ifdef BNX2_ENABLE_NETQUEUE
+#define BNX2_MAX_NIC	32
+#define BNX2_OPTION_UNSET   -1
+#define BNX2_OPTION_ZERO	0
+
+#define BNX2_NETQUEUE_ENABLED(bp) ((force_netq_param[bp->index] > 1) || \
+				   (force_netq_param[bp->index] == \
+						BNX2_OPTION_UNSET))
+#define BNX2_NETQUEUE_DISABLED(bp) (force_netq_param[bp->index] == 0)
+
+static int __devinitdata force_netq_param[BNX2_MAX_NIC+1] =
+		{ [0 ... BNX2_MAX_NIC] = BNX2_OPTION_UNSET };
+
+static unsigned int num_force_netq;
+module_param_array_named(force_netq, force_netq_param, int,
+			 &num_force_netq, 0);
+MODULE_PARM_DESC(force_netq, "Option used for 5709/5716 only: "
+			     "Enforce the number of NetQueues per port "
+			     "(allowed values: -1 to 7 queues: "
+			     "1-7 will force the number of NetQueues for the "
+			     " given device, "
+			     "0 to disable NetQueue, "
+			     "-1 to use the default driver NetQueues value) "
+			     "[Maximum supported NIC's = 32] "
+			     "[example usage: force_net=-1,0,1,2: "
+			     "This corresponds to the first 5709/5716 to use "
+			     "the default number of NetQueues, "
+			     "disable NetQueue on the second 5709/5716, "
+			     "use 1 NetQueue on the third 5709/5716"
+			     "use 2 NetQueues on the fourth 5709/5716]");
+#endif /* BNX2_ENABLE_NETQUEUE */
+
+typedef enum {
+	BCM5706 = 0,
+	NC370T,
+	NC370I,
+	BCM5706S,
+	NC370F,
+	BCM5708,
+	BCM5708S,
+	BCM5709,
+	BCM5709S,
+	BCM5716,
+	BCM5716S,
+} board_t;
+
+/* indexed by board_t, above */
+static struct {
+	char *name;
+} board_info[] __devinitdata = {
+	{ "Broadcom NetXtreme II BCM5706 1000Base-T" },
+	{ "HP NC370T Multifunction Gigabit Server Adapter" },
+	{ "HP NC370i Multifunction Gigabit Server Adapter" },
+	{ "Broadcom NetXtreme II BCM5706 1000Base-SX" },
+	{ "HP NC370F Multifunction Gigabit Server Adapter" },
+	{ "Broadcom NetXtreme II BCM5708 1000Base-T" },
+	{ "Broadcom NetXtreme II BCM5708 1000Base-SX" },
+	{ "Broadcom NetXtreme II BCM5709 1000Base-T" },
+	{ "Broadcom NetXtreme II BCM5709 1000Base-SX" },
+	{ "Broadcom NetXtreme II BCM5716 1000Base-T" },
+	{ "Broadcom NetXtreme II BCM5716 1000Base-SX" },
+	};
+
+static DEFINE_PCI_DEVICE_TABLE(bnx2_pci_tbl) = {
+	{ PCI_VENDOR_ID_BROADCOM, PCI_DEVICE_ID_NX2_5706,
+	  PCI_VENDOR_ID_HP, 0x3101, 0, 0, NC370T },
+	{ PCI_VENDOR_ID_BROADCOM, PCI_DEVICE_ID_NX2_5706,
+	  PCI_VENDOR_ID_HP, 0x3106, 0, 0, NC370I },
+	{ PCI_VENDOR_ID_BROADCOM, PCI_DEVICE_ID_NX2_5706,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, BCM5706 },
+	{ PCI_VENDOR_ID_BROADCOM, PCI_DEVICE_ID_NX2_5708,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, BCM5708 },
+	{ PCI_VENDOR_ID_BROADCOM, PCI_DEVICE_ID_NX2_5706S,
+	  PCI_VENDOR_ID_HP, 0x3102, 0, 0, NC370F },
+	{ PCI_VENDOR_ID_BROADCOM, PCI_DEVICE_ID_NX2_5706S,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, BCM5706S },
+	{ PCI_VENDOR_ID_BROADCOM, PCI_DEVICE_ID_NX2_5708S,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, BCM5708S },
+	{ PCI_VENDOR_ID_BROADCOM, PCI_DEVICE_ID_NX2_5709,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, BCM5709 },
+	{ PCI_VENDOR_ID_BROADCOM, PCI_DEVICE_ID_NX2_5709S,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, BCM5709S },
+	{ PCI_VENDOR_ID_BROADCOM, 0x163b,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, BCM5716 },
+	{ PCI_VENDOR_ID_BROADCOM, 0x163c,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, BCM5716S },
+	{ 0, }
+};
+
+static const struct flash_spec flash_table[] =
+{
+#define BUFFERED_FLAGS		(BNX2_NV_BUFFERED | BNX2_NV_TRANSLATE)
+#define NONBUFFERED_FLAGS	(BNX2_NV_WREN)
+	/* Slow EEPROM */
+	{0x00000000, 0x40830380, 0x009f0081, 0xa184a053, 0xaf000400,
+	 BUFFERED_FLAGS, SEEPROM_PAGE_BITS, SEEPROM_PAGE_SIZE,
+	 SEEPROM_BYTE_ADDR_MASK, SEEPROM_TOTAL_SIZE,
+	 "EEPROM - slow"},
+	/* Expansion entry 0001 */
+	{0x08000002, 0x4b808201, 0x00050081, 0x03840253, 0xaf020406,
+	 NONBUFFERED_FLAGS, SAIFUN_FLASH_PAGE_BITS, SAIFUN_FLASH_PAGE_SIZE,
+	 SAIFUN_FLASH_BYTE_ADDR_MASK, 0,
+	 "Entry 0001"},
+	/* Saifun SA25F010 (non-buffered flash) */
+	/* strap, cfg1, & write1 need updates */
+	{0x04000001, 0x47808201, 0x00050081, 0x03840253, 0xaf020406,
+	 NONBUFFERED_FLAGS, SAIFUN_FLASH_PAGE_BITS, SAIFUN_FLASH_PAGE_SIZE,
+	 SAIFUN_FLASH_BYTE_ADDR_MASK, SAIFUN_FLASH_BASE_TOTAL_SIZE*2,
+	 "Non-buffered flash (128kB)"},
+	/* Saifun SA25F020 (non-buffered flash) */
+	/* strap, cfg1, & write1 need updates */
+	{0x0c000003, 0x4f808201, 0x00050081, 0x03840253, 0xaf020406,
+	 NONBUFFERED_FLAGS, SAIFUN_FLASH_PAGE_BITS, SAIFUN_FLASH_PAGE_SIZE,
+	 SAIFUN_FLASH_BYTE_ADDR_MASK, SAIFUN_FLASH_BASE_TOTAL_SIZE*4,
+	 "Non-buffered flash (256kB)"},
+	/* Expansion entry 0100 */
+	{0x11000000, 0x53808201, 0x00050081, 0x03840253, 0xaf020406,
+	 NONBUFFERED_FLAGS, SAIFUN_FLASH_PAGE_BITS, SAIFUN_FLASH_PAGE_SIZE,
+	 SAIFUN_FLASH_BYTE_ADDR_MASK, 0,
+	 "Entry 0100"},
+	/* Entry 0101: ST M45PE10 (non-buffered flash, TetonII B0) */
+	{0x19000002, 0x5b808201, 0x000500db, 0x03840253, 0xaf020406,
+	 NONBUFFERED_FLAGS, ST_MICRO_FLASH_PAGE_BITS, ST_MICRO_FLASH_PAGE_SIZE,
+	 ST_MICRO_FLASH_BYTE_ADDR_MASK, ST_MICRO_FLASH_BASE_TOTAL_SIZE*2,
+	 "Entry 0101: ST M45PE10 (128kB non-bufferred)"},
+	/* Entry 0110: ST M45PE20 (non-buffered flash)*/
+	{0x15000001, 0x57808201, 0x000500db, 0x03840253, 0xaf020406,
+	 NONBUFFERED_FLAGS, ST_MICRO_FLASH_PAGE_BITS, ST_MICRO_FLASH_PAGE_SIZE,
+	 ST_MICRO_FLASH_BYTE_ADDR_MASK, ST_MICRO_FLASH_BASE_TOTAL_SIZE*4,
+	 "Entry 0110: ST M45PE20 (256kB non-bufferred)"},
+	/* Saifun SA25F005 (non-buffered flash) */
+	/* strap, cfg1, & write1 need updates */
+	{0x1d000003, 0x5f808201, 0x00050081, 0x03840253, 0xaf020406,
+	 NONBUFFERED_FLAGS, SAIFUN_FLASH_PAGE_BITS, SAIFUN_FLASH_PAGE_SIZE,
+	 SAIFUN_FLASH_BYTE_ADDR_MASK, SAIFUN_FLASH_BASE_TOTAL_SIZE,
+	 "Non-buffered flash (64kB)"},
+	/* Fast EEPROM */
+	{0x22000000, 0x62808380, 0x009f0081, 0xa184a053, 0xaf000400,
+	 BUFFERED_FLAGS, SEEPROM_PAGE_BITS, SEEPROM_PAGE_SIZE,
+	 SEEPROM_BYTE_ADDR_MASK, SEEPROM_TOTAL_SIZE,
+	 "EEPROM - fast"},
+	/* Expansion entry 1001 */
+	{0x2a000002, 0x6b808201, 0x00050081, 0x03840253, 0xaf020406,
+	 NONBUFFERED_FLAGS, SAIFUN_FLASH_PAGE_BITS, SAIFUN_FLASH_PAGE_SIZE,
+	 SAIFUN_FLASH_BYTE_ADDR_MASK, 0,
+	 "Entry 1001"},
+	/* Expansion entry 1010 */
+	{0x26000001, 0x67808201, 0x00050081, 0x03840253, 0xaf020406,
+	 NONBUFFERED_FLAGS, SAIFUN_FLASH_PAGE_BITS, SAIFUN_FLASH_PAGE_SIZE,
+	 SAIFUN_FLASH_BYTE_ADDR_MASK, 0,
+	 "Entry 1010"},
+	/* ATMEL AT45DB011B (buffered flash) */
+	{0x2e000003, 0x6e808273, 0x00570081, 0x68848353, 0xaf000400,
+	 BUFFERED_FLAGS, BUFFERED_FLASH_PAGE_BITS, BUFFERED_FLASH_PAGE_SIZE,
+	 BUFFERED_FLASH_BYTE_ADDR_MASK, BUFFERED_FLASH_TOTAL_SIZE,
+	 "Buffered flash (128kB)"},
+	/* Expansion entry 1100 */
+	{0x33000000, 0x73808201, 0x00050081, 0x03840253, 0xaf020406,
+	 NONBUFFERED_FLAGS, SAIFUN_FLASH_PAGE_BITS, SAIFUN_FLASH_PAGE_SIZE,
+	 SAIFUN_FLASH_BYTE_ADDR_MASK, 0,
+	 "Entry 1100"},
+	/* Expansion entry 1101 */
+	{0x3b000002, 0x7b808201, 0x00050081, 0x03840253, 0xaf020406,
+	 NONBUFFERED_FLAGS, SAIFUN_FLASH_PAGE_BITS, SAIFUN_FLASH_PAGE_SIZE,
+	 SAIFUN_FLASH_BYTE_ADDR_MASK, 0,
+	 "Entry 1101"},
+	/* Ateml Expansion entry 1110 */
+	{0x37000001, 0x76808273, 0x00570081, 0x68848353, 0xaf000400,
+	 BUFFERED_FLAGS, BUFFERED_FLASH_PAGE_BITS, BUFFERED_FLASH_PAGE_SIZE,
+	 BUFFERED_FLASH_BYTE_ADDR_MASK, 0,
+	 "Entry 1110 (Atmel)"},
+	/* ATMEL AT45DB021B (buffered flash) */
+	{0x3f000003, 0x7e808273, 0x00570081, 0x68848353, 0xaf000400,
+	 BUFFERED_FLAGS, BUFFERED_FLASH_PAGE_BITS, BUFFERED_FLASH_PAGE_SIZE,
+	 BUFFERED_FLASH_BYTE_ADDR_MASK, BUFFERED_FLASH_TOTAL_SIZE*2,
+	 "Buffered flash (256kB)"},
+};
+
+static const struct flash_spec flash_5709 = {
+	.flags		= BNX2_NV_BUFFERED,
+	.page_bits	= BCM5709_FLASH_PAGE_BITS,
+	.page_size	= BCM5709_FLASH_PAGE_SIZE,
+	.addr_mask	= BCM5709_FLASH_BYTE_ADDR_MASK,
+	.total_size	= BUFFERED_FLASH_TOTAL_SIZE*2,
+	.name		= "5709 Buffered flash (256kB)",
+};
+
+MODULE_DEVICE_TABLE(pci, bnx2_pci_tbl);
+
+#if !defined(__VMKLNX__)
+static void bnx2_init_napi(struct bnx2 *bp);
+static void bnx2_del_napi(struct bnx2 *bp);
+#else
+static void __devinit bnx2_init_napi(struct bnx2 *bp);
+static void __devexit bnx2_del_napi(struct bnx2 *bp);
+#endif
+
+static void bnx2_set_rx_ring_size(struct bnx2 *bp, u32 size);
+
+#if defined(__VMKLNX__) 
+static int
+bnx2_tx_int(struct bnx2 *bp, struct bnx2_napi *bnapi, int budget,
+	    int check_queue);
+#endif /* defined(__VMKLNX__) */
+
+#if defined(BNX2_ENABLE_NETQUEUE)
+static int bnx2_netqueue_ops(vmknetddi_queueops_op_t op, void *args);
+static void bnx2_stop_netqueue_hw(struct bnx2 *bp);
+static void bnx2_start_netqueue_hw(struct bnx2 *bp);
+static void bnx2_netqueue_service_bnx2_msix(struct bnx2_napi *bnapi);
+static int bnx2_netqueue_is_avail(struct bnx2 *bp);
+static void bnx2_close_netqueue_hw(struct bnx2 *bp);
+static void bnx2_init_netqueue_hw(struct bnx2 *bp);
+static int bnx2_open_netqueue_hw(struct bnx2 *bp);
+static void bnx2_netqueue_flush_all(struct bnx2 *bp);
+static int bnx2_netqueue_open_started(struct bnx2 *bp);
+
+static inline u16 bnx2_get_hw_tx_cons(struct bnx2_napi *bnapi);
+static inline u16 bnx2_get_hw_rx_cons(struct bnx2_napi *bnapi);
+
+#ifdef BNX2_DEBUG
+static u32 bnx2_read_ctx(struct bnx2 *bp, u32 offset);
+#endif
+
+#define TRUE 1
+#define FALSE 0
+
+#define for_each_nondefault_rx_queue(bp, var) \
+				for (var = 1; var < bp->num_rx_rings; var++)
+#define for_each_nondefault_tx_queue(bp, var) \
+				for (var = 1; var < bp->num_tx_rings; var++)
+#define is_multi(bp)		(bp->num_rx_ring > 1)
+#endif /* defined(BNX2_ENABLE_NETQUEUE) */
+
+#ifdef BNX2_BOOT_DISK
+u32 ether_crc_le(size_t len, unsigned char const *p)
+{
+	u32 crc = ~0;
+	int i;
+#define CRCPOLY_LE 0xedb88320
+
+	while (len--) {
+		crc ^= *p++;
+		for (i = 0; i < 8; i++)
+			crc = (crc >> 1) ^ ((crc & 1) ? CRCPOLY_LE : 0);
+	}
+	return crc;
+}
+#endif
+
+static inline u32 bnx2_tx_avail(struct bnx2 *bp, struct bnx2_tx_ring_info *txr)
+{
+	u32 diff;
+
+	/* Tell compiler to fetch tx_prod and tx_cons from memory. */
+	barrier();
+
+	/* The ring uses 256 indices for 255 entries, one of them
+	 * needs to be skipped.
+	 */
+	diff = txr->tx_prod - txr->tx_cons;
+	if (unlikely(diff >= TX_DESC_CNT)) {
+		diff &= 0xffff;
+		if (diff == TX_DESC_CNT)
+			diff = MAX_TX_DESC_CNT;
+	}
+	return bp->tx_ring_size - diff;
+}
+
+static u32
+bnx2_reg_rd_ind(struct bnx2 *bp, u32 offset)
+{
+	u32 val;
+
+	spin_lock_bh(&bp->indirect_lock);
+	REG_WR(bp, BNX2_PCICFG_REG_WINDOW_ADDRESS, offset);
+	val = REG_RD(bp, BNX2_PCICFG_REG_WINDOW);
+	spin_unlock_bh(&bp->indirect_lock);
+	return val;
+}
+
+static void
+bnx2_reg_wr_ind(struct bnx2 *bp, u32 offset, u32 val)
+{
+	spin_lock_bh(&bp->indirect_lock);
+	REG_WR(bp, BNX2_PCICFG_REG_WINDOW_ADDRESS, offset);
+	REG_WR(bp, BNX2_PCICFG_REG_WINDOW, val);
+	spin_unlock_bh(&bp->indirect_lock);
+}
+
+#if defined(__VMKLNX__)
+static void
+bnx2_reg_wr_ind_cfg(struct bnx2 *bp, u32 offset, u32 val)
+{
+	struct pci_dev *pdev = bp->pdev;
+
+	spin_lock_bh(&bp->indirect_lock);
+	pci_write_config_dword(pdev, BNX2_PCICFG_REG_WINDOW_ADDRESS, offset);
+	pci_write_config_dword(pdev, BNX2_PCICFG_REG_WINDOW, val);
+	spin_unlock_bh(&bp->indirect_lock);
+}
+#endif /* defined(__VMKLNX__) */
+
+static void
+bnx2_shmem_wr(struct bnx2 *bp, u32 offset, u32 val)
+{
+	bnx2_reg_wr_ind(bp, bp->shmem_base + offset, val);
+}
+
+static u32
+bnx2_shmem_rd(struct bnx2 *bp, u32 offset)
+{
+	return bnx2_reg_rd_ind(bp, bp->shmem_base + offset);
+}
+
+static void
+bnx2_ctx_wr(struct bnx2 *bp, u32 cid_addr, u32 offset, u32 val)
+{
+	offset += cid_addr;
+	spin_lock_bh(&bp->indirect_lock);
+	if (CHIP_NUM(bp) == CHIP_NUM_5709) {
+		int i;
+
+		REG_WR(bp, BNX2_CTX_CTX_DATA, val);
+		REG_WR(bp, BNX2_CTX_CTX_CTRL,
+		       offset | BNX2_CTX_CTX_CTRL_WRITE_REQ);
+		for (i = 0; i < 5; i++) {
+			val = REG_RD(bp, BNX2_CTX_CTX_CTRL);
+			if ((val & BNX2_CTX_CTX_CTRL_WRITE_REQ) == 0)
+				break;
+			udelay(5);
+		}
+	} else {
+		REG_WR(bp, BNX2_CTX_DATA_ADR, offset);
+		REG_WR(bp, BNX2_CTX_DATA, val);
+	}
+	spin_unlock_bh(&bp->indirect_lock);
+}
+
+#ifdef BCM_CNIC
+static int
+bnx2_drv_ctl(struct net_device *dev, struct drv_ctl_info *info)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+	struct drv_ctl_io *io = &info->data.io;
+
+	switch (info->cmd) {
+	case DRV_CTL_IO_WR_CMD:
+		bnx2_reg_wr_ind(bp, io->offset, io->data);
+		break;
+	case DRV_CTL_IO_RD_CMD:
+		io->data = bnx2_reg_rd_ind(bp, io->offset);
+		break;
+	case DRV_CTL_CTX_WR_CMD:
+		bnx2_ctx_wr(bp, io->cid_addr, io->offset, io->data);
+		break;
+	default:
+		return -EINVAL;
+	}
+	return 0;
+}
+
+static void bnx2_setup_cnic_irq_info(struct bnx2 *bp)
+{
+	struct cnic_eth_dev *cp = &bp->cnic_eth_dev;
+	struct bnx2_napi *bnapi = &bp->bnx2_napi[0];
+	int sb_id;
+
+	if (bp->flags & BNX2_FLAG_USING_MSIX) {
+		cp->drv_state |= CNIC_DRV_STATE_USING_MSIX;
+		bnapi->cnic_present = 0;
+		sb_id = bp->irq_nvecs;
+		cp->irq_arr[0].irq_flags |= CNIC_IRQ_FL_MSIX;
+	} else {
+		cp->drv_state &= ~CNIC_DRV_STATE_USING_MSIX;
+		bnapi->cnic_tag = bnapi->last_status_idx;
+		bnapi->cnic_present = 1;
+		sb_id = 0;
+		cp->irq_arr[0].irq_flags &= ~CNIC_IRQ_FL_MSIX;
+	}
+
+	cp->irq_arr[0].vector = bp->irq_tbl[sb_id].vector;
+	cp->irq_arr[0].status_blk = (void *)
+		((unsigned long) bnapi->status_blk.msi +
+		(BNX2_SBLK_MSIX_ALIGN_SIZE * sb_id));
+	cp->irq_arr[0].status_blk_num = sb_id;
+	cp->num_irq = 1;
+}
+
+static int bnx2_register_cnic(struct net_device *dev, struct cnic_ops *ops,
+			      void *data)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+	struct cnic_eth_dev *cp = &bp->cnic_eth_dev;
+
+	if (ops == NULL)
+		return -EINVAL;
+
+	if (cp->drv_state & CNIC_DRV_STATE_REGD)
+		return -EBUSY;
+
+	if (!bnx2_reg_rd_ind(bp, BNX2_FW_MAX_ISCSI_CONN))
+		return -ENODEV;
+
+	bp->cnic_data = data;
+	rcu_assign_pointer(bp->cnic_ops, ops);
+
+	cp->num_irq = 0;
+	cp->drv_state = CNIC_DRV_STATE_REGD;
+
+	bnx2_setup_cnic_irq_info(bp);
+
+	return 0;
+}
+
+static int bnx2_unregister_cnic(struct net_device *dev)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+	struct bnx2_napi *bnapi = &bp->bnx2_napi[0];
+	struct cnic_eth_dev *cp = &bp->cnic_eth_dev;
+
+	mutex_lock(&bp->cnic_lock);
+	cp->drv_state = 0;
+	bnapi->cnic_present = 0;
+	RCU_INIT_POINTER(bp->cnic_ops, NULL);
+	mutex_unlock(&bp->cnic_lock);
+	synchronize_rcu();
+	return 0;
+}
+
+#if defined(BNX2_INBOX)
+struct cnic_eth_dev *bnx2_cnic_probe(struct net_device *dev)
+#else /* !defined(BNX2_INBOX) */
+struct cnic_eth_dev *bnx2_cnic_probe2(struct net_device *dev)
+#endif /* defined(BNX2_INBOX) */
+{
+	struct bnx2 *bp = netdev_priv(dev);
+	struct cnic_eth_dev *cp = &bp->cnic_eth_dev;
+
+	if (!cp->max_iscsi_conn)
+		return NULL;
+
+	cp->version = CNIC_ETH_DEV_VER;
+	cp->drv_owner = THIS_MODULE;
+	cp->chip_id = bp->chip_id;
+	cp->pdev = bp->pdev;
+	cp->io_base = bp->regview;
+	cp->drv_ctl = bnx2_drv_ctl;
+	cp->drv_register_cnic = bnx2_register_cnic;
+	cp->drv_unregister_cnic = bnx2_unregister_cnic;
+
+	return cp;
+}
+#if !(defined(__VMKLNX__) && (VMWARE_ESX_DDK_VERSION >= 50000))
+#if defined(BNX2_INBOX)
+EXPORT_SYMBOL(bnx2_cnic_probe);
+#else /* !defined(BNX2_INBOX) */
+EXPORT_SYMBOL(bnx2_cnic_probe2);
+#endif /* defined(BNX2_INBOX) */
+#endif
+
+static void
+bnx2_cnic_stop(struct bnx2 *bp)
+{
+	struct cnic_ops *c_ops;
+	struct cnic_ctl_info info;
+
+	mutex_lock(&bp->cnic_lock);
+	c_ops = rcu_dereference_protected(bp->cnic_ops,
+					  lockdep_is_held(&bp->cnic_lock));
+	if (c_ops) {
+		info.cmd = CNIC_CTL_STOP_CMD;
+
+#if defined(__VMKLNX__)
+		VMKAPI_MODULE_CALL_VOID(c_ops->cnic_owner->moduleID,
+					c_ops->cnic_ctl, bp->cnic_data, &info);
+#else
+		c_ops->cnic_ctl(bp->cnic_data, &info);
+#endif
+	}
+	mutex_unlock(&bp->cnic_lock);
+}
+
+static void
+bnx2_cnic_start(struct bnx2 *bp)
+{
+	struct cnic_ops *c_ops;
+	struct cnic_ctl_info info;
+
+	mutex_lock(&bp->cnic_lock);
+	c_ops = rcu_dereference_protected(bp->cnic_ops,
+					  lockdep_is_held(&bp->cnic_lock));
+	if (c_ops) {
+		if (!(bp->flags & BNX2_FLAG_USING_MSIX)) {
+			struct bnx2_napi *bnapi = &bp->bnx2_napi[0];
+
+			bnapi->cnic_tag = bnapi->last_status_idx;
+		}
+		info.cmd = CNIC_CTL_START_CMD;
+#if defined(__VMKLNX__)
+		VMKAPI_MODULE_CALL_VOID(c_ops->cnic_owner->moduleID,
+					c_ops->cnic_ctl, bp->cnic_data, &info);
+#else
+		c_ops->cnic_ctl(bp->cnic_data, &info);
+#endif
+	}
+	mutex_unlock(&bp->cnic_lock);
+}
+
+#else
+
+static void
+bnx2_cnic_stop(struct bnx2 *bp)
+{
+}
+
+static void
+bnx2_cnic_start(struct bnx2 *bp)
+{
+}
+
+#endif
+
+static int
+bnx2_read_phy(struct bnx2 *bp, u32 reg, u32 *val)
+{
+	u32 val1;
+	int i, ret;
+
+	if (bp->phy_flags & BNX2_PHY_FLAG_INT_MODE_AUTO_POLLING) {
+		val1 = REG_RD(bp, BNX2_EMAC_MDIO_MODE);
+		val1 &= ~BNX2_EMAC_MDIO_MODE_AUTO_POLL;
+
+		REG_WR(bp, BNX2_EMAC_MDIO_MODE, val1);
+		REG_RD(bp, BNX2_EMAC_MDIO_MODE);
+
+		udelay(40);
+	}
+
+	val1 = (bp->phy_addr << 21) | (reg << 16) |
+		BNX2_EMAC_MDIO_COMM_COMMAND_READ | BNX2_EMAC_MDIO_COMM_DISEXT |
+		BNX2_EMAC_MDIO_COMM_START_BUSY;
+	REG_WR(bp, BNX2_EMAC_MDIO_COMM, val1);
+
+	for (i = 0; i < 50; i++) {
+		udelay(10);
+
+		val1 = REG_RD(bp, BNX2_EMAC_MDIO_COMM);
+		if (!(val1 & BNX2_EMAC_MDIO_COMM_START_BUSY)) {
+			udelay(5);
+
+			val1 = REG_RD(bp, BNX2_EMAC_MDIO_COMM);
+			val1 &= BNX2_EMAC_MDIO_COMM_DATA;
+
+			break;
+		}
+	}
+
+	if (val1 & BNX2_EMAC_MDIO_COMM_START_BUSY) {
+		*val = 0x0;
+		ret = -EBUSY;
+	}
+	else {
+		*val = val1;
+		ret = 0;
+	}
+
+	if (bp->phy_flags & BNX2_PHY_FLAG_INT_MODE_AUTO_POLLING) {
+		val1 = REG_RD(bp, BNX2_EMAC_MDIO_MODE);
+		val1 |= BNX2_EMAC_MDIO_MODE_AUTO_POLL;
+
+		REG_WR(bp, BNX2_EMAC_MDIO_MODE, val1);
+		REG_RD(bp, BNX2_EMAC_MDIO_MODE);
+
+		udelay(40);
+	}
+
+	return ret;
+}
+
+static int
+bnx2_write_phy(struct bnx2 *bp, u32 reg, u32 val)
+{
+	u32 val1;
+	int i, ret;
+
+	if (bp->phy_flags & BNX2_PHY_FLAG_INT_MODE_AUTO_POLLING) {
+		val1 = REG_RD(bp, BNX2_EMAC_MDIO_MODE);
+		val1 &= ~BNX2_EMAC_MDIO_MODE_AUTO_POLL;
+
+		REG_WR(bp, BNX2_EMAC_MDIO_MODE, val1);
+		REG_RD(bp, BNX2_EMAC_MDIO_MODE);
+
+		udelay(40);
+	}
+
+	val1 = (bp->phy_addr << 21) | (reg << 16) | val |
+		BNX2_EMAC_MDIO_COMM_COMMAND_WRITE |
+		BNX2_EMAC_MDIO_COMM_START_BUSY | BNX2_EMAC_MDIO_COMM_DISEXT;
+	REG_WR(bp, BNX2_EMAC_MDIO_COMM, val1);
+
+	for (i = 0; i < 50; i++) {
+		udelay(10);
+
+		val1 = REG_RD(bp, BNX2_EMAC_MDIO_COMM);
+		if (!(val1 & BNX2_EMAC_MDIO_COMM_START_BUSY)) {
+			udelay(5);
+			break;
+		}
+	}
+
+	if (val1 & BNX2_EMAC_MDIO_COMM_START_BUSY)
+        	ret = -EBUSY;
+	else
+		ret = 0;
+
+	if (bp->phy_flags & BNX2_PHY_FLAG_INT_MODE_AUTO_POLLING) {
+		val1 = REG_RD(bp, BNX2_EMAC_MDIO_MODE);
+		val1 |= BNX2_EMAC_MDIO_MODE_AUTO_POLL;
+
+		REG_WR(bp, BNX2_EMAC_MDIO_MODE, val1);
+		REG_RD(bp, BNX2_EMAC_MDIO_MODE);
+
+		udelay(40);
+	}
+
+	return ret;
+}
+
+static void
+bnx2_disable_int(struct bnx2 *bp)
+{
+	int i;
+	struct bnx2_napi *bnapi;
+
+	for (i = 0; i < bp->irq_nvecs; i++) {
+		bnapi = &bp->bnx2_napi[i];
+		REG_WR(bp, BNX2_PCICFG_INT_ACK_CMD, bnapi->int_num |
+		       BNX2_PCICFG_INT_ACK_CMD_MASK_INT);
+	}
+	REG_RD(bp, BNX2_PCICFG_INT_ACK_CMD);
+}
+
+static void
+bnx2_enable_int(struct bnx2 *bp)
+{
+	int i;
+	struct bnx2_napi *bnapi;
+
+	for (i = 0; i < bp->irq_nvecs; i++) {
+		bnapi = &bp->bnx2_napi[i];
+
+		REG_WR(bp, BNX2_PCICFG_INT_ACK_CMD, bnapi->int_num |
+		       BNX2_PCICFG_INT_ACK_CMD_INDEX_VALID |
+		       BNX2_PCICFG_INT_ACK_CMD_MASK_INT |
+		       bnapi->last_status_idx);
+
+		REG_WR(bp, BNX2_PCICFG_INT_ACK_CMD, bnapi->int_num |
+		       BNX2_PCICFG_INT_ACK_CMD_INDEX_VALID |
+		       bnapi->last_status_idx);
+	}
+	REG_WR(bp, BNX2_HC_COMMAND, bp->hc_cmd | BNX2_HC_COMMAND_COAL_NOW);
+}
+
+static void
+bnx2_disable_int_sync(struct bnx2 *bp)
+{
+	int i;
+
+	atomic_inc(&bp->intr_sem);
+	if (!netif_running(bp->dev))
+		return;
+
+	bnx2_disable_int(bp);
+	for (i = 0; i < bp->irq_nvecs; i++)
+#if (LINUX_VERSION_CODE >= 0x2051c)
+		synchronize_irq(bp->irq_tbl[i].vector);
+#else
+		synchronize_irq();
+#endif
+}
+
+static void
+bnx2_napi_disable(struct bnx2 *bp)
+{
+#ifdef BNX2_NEW_NAPI
+	int i;
+
+	for (i = 0; i < bp->irq_nvecs; i++)
+		napi_disable(&bp->bnx2_napi[i].napi);
+#else
+	netif_poll_disable(bp->dev);
+#endif
+}
+
+static void
+bnx2_napi_enable(struct bnx2 *bp)
+{
+#ifdef BNX2_NEW_NAPI
+	int i;
+
+	for (i = 0; i < bp->irq_nvecs; i++)
+		napi_enable(&bp->bnx2_napi[i].napi);
+#else
+	netif_poll_enable(bp->dev);
+#endif
+}
+
+#if defined(BNX2_ENABLE_NETQUEUE)
+static void
+bnx2_netqueue_tx_flush_queue(struct bnx2_napi *bnapi,
+			     struct bnx2_tx_ring_info *txr)
+{
+	struct bnx2 *bp = bnapi->bp;	
+
+	rmb();
+	if ((bnx2_get_hw_tx_cons(bnapi) != txr->hw_tx_cons) ||
+	    (bnapi->tx_packets_sent != bnapi->tx_packets_processed)) {
+		bnx2_tx_int(bp, bnapi, 100, 0);
+		msleep(1);
+
+		rmb();
+	}
+}
+
+
+static void
+bnx2_netqueue_tx_flush(struct bnx2 *bp)
+{
+	int i;
+	struct bnx2_napi *bnapi;
+        struct bnx2_tx_ring_info *txr;
+
+	/*  Flush default ring */
+	bnapi = &bp->bnx2_napi[0];
+	txr = &bnapi->tx_ring;
+
+	bnx2_netqueue_tx_flush_queue(bnapi, txr);
+	netdev_info(bp->dev, "flushed default TX queue\n");
+
+	/*  Flush NetQ rings */
+	for_each_nondefault_tx_queue(bp, i) {
+		bnapi = &bp->bnx2_napi[i];
+		txr = &bnapi->tx_ring;
+
+		rmb();
+
+		bnx2_netqueue_tx_flush_queue(bnapi, txr);
+		netdev_info(bp->dev, "flushed TX queue %d\n", i);
+	}
+}
+
+static void
+bnx2_netif_stop(struct bnx2 *bp, bool stop_cnic)
+{
+	if (stop_cnic)
+		bnx2_cnic_stop(bp);
+	if (netif_running(bp->dev)) {
+		netif_tx_disable(bp->dev);
+	}
+
+	bnx2_disable_int_sync(bp);
+	netif_carrier_off(bp->dev);	/* prevent tx timeout */
+
+	/*  Give some settling time */
+	msleep(250);
+
+	if (netif_running(bp->dev)) {
+		bnx2_napi_disable(bp);
+	}
+
+	rmb();
+
+	if (bnx2_netqueue_open_started(bp))
+		bnx2_netqueue_tx_flush(bp);
+}
+
+#else
+
+static void
+bnx2_netif_stop(struct bnx2 *bp, bool stop_cnic)
+{
+	if (stop_cnic)
+		bnx2_cnic_stop(bp);
+	if (netif_running(bp->dev)) {
+		bnx2_napi_disable(bp);
+		netif_tx_disable(bp->dev);
+	}
+	bnx2_disable_int_sync(bp);
+	netif_carrier_off(bp->dev);	/* prevent tx timeout */
+}
+
+#endif
+
+static void
+bnx2_netif_start(struct bnx2 *bp, bool start_cnic)
+{
+	if (atomic_dec_and_test(&bp->intr_sem)) {
+		if (netif_running(bp->dev)) {
+			netif_tx_wake_all_queues(bp->dev);
+			spin_lock_bh(&bp->phy_lock);
+			if (bp->link_up)
+				netif_carrier_on(bp->dev);
+			spin_unlock_bh(&bp->phy_lock);
+			bnx2_napi_enable(bp);
+			bnx2_enable_int(bp);
+			if (start_cnic)
+				bnx2_cnic_start(bp);
+		}
+	}
+}
+
+static void
+bnx2_free_tx_mem(struct bnx2 *bp)
+{
+	int i;
+
+	for (i = 0; i < bp->num_tx_rings; i++) {
+		struct bnx2_napi *bnapi = &bp->bnx2_napi[i];
+		struct bnx2_tx_ring_info *txr = &bnapi->tx_ring;
+
+		if (txr->tx_desc_ring) {
+#if (LINUX_VERSION_CODE >= 0x02061b)
+			dma_free_coherent(&bp->pdev->dev, TXBD_RING_SIZE,
+					  txr->tx_desc_ring,
+					  txr->tx_desc_mapping);
+#else
+			pci_free_consistent(bp->pdev, TXBD_RING_SIZE,
+					    txr->tx_desc_ring,
+					    txr->tx_desc_mapping);
+#endif
+			txr->tx_desc_ring = NULL;
+		}
+		kfree(txr->tx_buf_ring);
+		txr->tx_buf_ring = NULL;
+	}
+}
+
+static void
+bnx2_free_rx_mem(struct bnx2 *bp)
+{
+	int i;
+
+	for (i = 0; i < bp->num_rx_rings; i++) {
+		struct bnx2_napi *bnapi = &bp->bnx2_napi[i];
+		struct bnx2_rx_ring_info *rxr = &bnapi->rx_ring;
+		int j;
+
+		for (j = 0; j < bp->rx_max_ring; j++) {
+			if (rxr->rx_desc_ring[j])
+#if (LINUX_VERSION_CODE >= 0x02061b)
+				dma_free_coherent(&bp->pdev->dev, RXBD_RING_SIZE,
+						  rxr->rx_desc_ring[j],
+						  rxr->rx_desc_mapping[j]);
+#else
+				pci_free_consistent(bp->pdev, RXBD_RING_SIZE,
+						    rxr->rx_desc_ring[j],
+						    rxr->rx_desc_mapping[j]);
+#endif
+			rxr->rx_desc_ring[j] = NULL;
+		}
+		vfree(rxr->rx_buf_ring);
+		rxr->rx_buf_ring = NULL;
+
+		for (j = 0; j < bp->rx_max_pg_ring; j++) {
+			if (rxr->rx_pg_desc_ring[j])
+#if (LINUX_VERSION_CODE >= 0x02061b)
+				dma_free_coherent(&bp->pdev->dev, RXBD_RING_SIZE,
+						  rxr->rx_pg_desc_ring[j],
+						  rxr->rx_pg_desc_mapping[j]);
+#else
+				pci_free_consistent(bp->pdev, RXBD_RING_SIZE,
+						    rxr->rx_pg_desc_ring[j],
+						    rxr->rx_pg_desc_mapping[j]);
+#endif
+			rxr->rx_pg_desc_ring[j] = NULL;
+		}
+		vfree(rxr->rx_pg_ring);
+		rxr->rx_pg_ring = NULL;
+	}
+}
+
+static int
+bnx2_alloc_tx_mem(struct bnx2 *bp)
+{
+	int i;
+
+	for (i = 0; i < bp->num_tx_rings; i++) {
+		struct bnx2_napi *bnapi = &bp->bnx2_napi[i];
+		struct bnx2_tx_ring_info *txr = &bnapi->tx_ring;
+
+		txr->tx_buf_ring = kmalloc(SW_TXBD_RING_SIZE, GFP_KERNEL);
+		if (txr->tx_buf_ring == NULL)
+			return -ENOMEM;
+
+		memset(txr->tx_buf_ring, 0, SW_TXBD_RING_SIZE);
+		txr->tx_desc_ring =
+#if (LINUX_VERSION_CODE >= 0x02061b)
+			dma_alloc_coherent(&bp->pdev->dev, TXBD_RING_SIZE,
+					   &txr->tx_desc_mapping, GFP_KERNEL);
+#else
+			pci_alloc_consistent(bp->pdev, TXBD_RING_SIZE,
+					     &txr->tx_desc_mapping);
+#endif
+		if (txr->tx_desc_ring == NULL)
+			return -ENOMEM;
+	}
+	return 0;
+}
+
+static int
+bnx2_alloc_rx_mem(struct bnx2 *bp)
+{
+	int i;
+
+	for (i = 0; i < bp->num_rx_rings; i++) {
+		struct bnx2_napi *bnapi = &bp->bnx2_napi[i];
+		struct bnx2_rx_ring_info *rxr = &bnapi->rx_ring;
+		int j;
+
+		rxr->rx_buf_ring =
+			vmalloc(SW_RXBD_RING_SIZE * bp->rx_max_ring);
+		if (rxr->rx_buf_ring == NULL)
+			return -ENOMEM;
+
+		memset(rxr->rx_buf_ring, 0,
+		       SW_RXBD_RING_SIZE * bp->rx_max_ring);
+
+		for (j = 0; j < bp->rx_max_ring; j++) {
+			rxr->rx_desc_ring[j] =
+#if (LINUX_VERSION_CODE >= 0x02061b)
+				dma_alloc_coherent(&bp->pdev->dev,
+						   RXBD_RING_SIZE,
+						   &rxr->rx_desc_mapping[j],
+						   GFP_KERNEL);
+#else
+				pci_alloc_consistent(bp->pdev, RXBD_RING_SIZE,
+						     &rxr->rx_desc_mapping[j]);
+#endif
+			if (rxr->rx_desc_ring[j] == NULL)
+				return -ENOMEM;
+
+		}
+
+		if (bp->rx_pg_ring_size) {
+			rxr->rx_pg_ring = vmalloc(SW_RXPG_RING_SIZE *
+						  bp->rx_max_pg_ring);
+			if (rxr->rx_pg_ring == NULL)
+				return -ENOMEM;
+
+			memset(rxr->rx_pg_ring, 0, SW_RXPG_RING_SIZE *
+			       bp->rx_max_pg_ring);
+		}
+
+		for (j = 0; j < bp->rx_max_pg_ring; j++) {
+			rxr->rx_pg_desc_ring[j] =
+#if (LINUX_VERSION_CODE >= 0x02061b)
+				dma_alloc_coherent(&bp->pdev->dev,
+						   RXBD_RING_SIZE,
+						   &rxr->rx_pg_desc_mapping[j],
+						   GFP_KERNEL);
+#else
+				pci_alloc_consistent(bp->pdev, RXBD_RING_SIZE,
+						&rxr->rx_pg_desc_mapping[j]);
+#endif
+			if (rxr->rx_pg_desc_ring[j] == NULL)
+				return -ENOMEM;
+
+		}
+	}
+	return 0;
+}
+
+static void
+bnx2_free_mem(struct bnx2 *bp)
+{
+	int i;
+	struct bnx2_napi *bnapi = &bp->bnx2_napi[0];
+
+	bnx2_free_tx_mem(bp);
+	bnx2_free_rx_mem(bp);
+
+	for (i = 0; i < bp->ctx_pages; i++) {
+		if (bp->ctx_blk[i]) {
+#if (LINUX_VERSION_CODE >= 0x02061b)
+			dma_free_coherent(&bp->pdev->dev, BCM_PAGE_SIZE,
+					  bp->ctx_blk[i],
+					  bp->ctx_blk_mapping[i]);
+#else
+			pci_free_consistent(bp->pdev, BCM_PAGE_SIZE,
+					    bp->ctx_blk[i],
+					    bp->ctx_blk_mapping[i]);
+#endif
+			bp->ctx_blk[i] = NULL;
+		}
+	}
+	if (bnapi->status_blk.msi) {
+#if (LINUX_VERSION_CODE >= 0x02061b)
+		dma_free_coherent(&bp->pdev->dev, bp->status_stats_size,
+				  bnapi->status_blk.msi,
+				  bp->status_blk_mapping);
+#else
+		pci_free_consistent(bp->pdev, bp->status_stats_size,
+				    bnapi->status_blk.msi,
+				    bp->status_blk_mapping);
+#endif
+		bnapi->status_blk.msi = NULL;
+		bp->stats_blk = NULL;
+	}
+}
+
+static int
+bnx2_alloc_mem(struct bnx2 *bp)
+{
+	int i, status_blk_size, err;
+	struct bnx2_napi *bnapi;
+	void *status_blk;
+
+	/* Combine status and statistics blocks into one allocation. */
+	status_blk_size = L1_CACHE_ALIGN(sizeof(struct status_block));
+#ifdef CONFIG_PCI_MSI
+	if (bp->flags & BNX2_FLAG_MSIX_CAP)
+		status_blk_size = L1_CACHE_ALIGN(BNX2_MAX_MSIX_HW_VEC *
+						 BNX2_SBLK_MSIX_ALIGN_SIZE);
+#endif
+	bp->status_stats_size = status_blk_size +
+				sizeof(struct statistics_block);
+
+#if (LINUX_VERSION_CODE >= 0x02061b)
+	status_blk = dma_alloc_coherent(&bp->pdev->dev, bp->status_stats_size,
+					&bp->status_blk_mapping, GFP_KERNEL);
+#else
+	status_blk = pci_alloc_consistent(bp->pdev, bp->status_stats_size,
+					  &bp->status_blk_mapping);
+#endif
+	if (status_blk == NULL)
+		goto alloc_mem_err;
+
+	memset(status_blk, 0, bp->status_stats_size);
+
+	bnapi = &bp->bnx2_napi[0];
+	bnapi->status_blk.msi = status_blk;
+	bnapi->hw_tx_cons_ptr =
+		&bnapi->status_blk.msi->status_tx_quick_consumer_index0;
+	bnapi->hw_rx_cons_ptr =
+		&bnapi->status_blk.msi->status_rx_quick_consumer_index0;
+	if (bp->flags & BNX2_FLAG_MSIX_CAP) {
+		for (i = 1; i < bp->irq_nvecs; i++) {
+			struct status_block_msix *sblk;
+
+			bnapi = &bp->bnx2_napi[i];
+
+			sblk = (void *) (status_blk +
+					 BNX2_SBLK_MSIX_ALIGN_SIZE * i);
+			bnapi->status_blk.msix = sblk;
+			bnapi->hw_tx_cons_ptr =
+				&sblk->status_tx_quick_consumer_index;
+			bnapi->hw_rx_cons_ptr =
+				&sblk->status_rx_quick_consumer_index;
+			bnapi->int_num = i << 24;
+		}
+	}
+
+	bp->stats_blk = status_blk + status_blk_size;
+
+	bp->stats_blk_mapping = bp->status_blk_mapping + status_blk_size;
+
+	if (CHIP_NUM(bp) == CHIP_NUM_5709) {
+		/* NetQ uses CID 100, so we need 16K of context memory */
+#if defined(BNX2_ENABLE_NETQUEUE)
+		bp->ctx_pages = 0x4000 / BCM_PAGE_SIZE;
+#else  /* !defined(__VMKLNX__) */
+		bp->ctx_pages = 0x2000 / BCM_PAGE_SIZE;
+#endif /* defined(__VMKLNX__) */
+		if (bp->ctx_pages == 0)
+			bp->ctx_pages = 1;
+		for (i = 0; i < bp->ctx_pages; i++) {
+#if (LINUX_VERSION_CODE >= 0x02061b)
+			bp->ctx_blk[i] = dma_alloc_coherent(&bp->pdev->dev,
+						BCM_PAGE_SIZE,
+						&bp->ctx_blk_mapping[i],
+						GFP_KERNEL);
+#else
+			bp->ctx_blk[i] = pci_alloc_consistent(bp->pdev,
+						BCM_PAGE_SIZE,
+						&bp->ctx_blk_mapping[i]);
+#endif
+			if (bp->ctx_blk[i] == NULL)
+				goto alloc_mem_err;
+		}
+	}
+
+	err = bnx2_alloc_rx_mem(bp);
+	if (err)
+		goto alloc_mem_err;
+
+	err = bnx2_alloc_tx_mem(bp);
+	if (err)
+		goto alloc_mem_err;
+
+	return 0;
+
+alloc_mem_err:
+	bnx2_free_mem(bp);
+	return -ENOMEM;
+}
+
+static void
+bnx2_report_fw_link(struct bnx2 *bp)
+{
+	u32 fw_link_status = 0;
+
+	if (bp->phy_flags & BNX2_PHY_FLAG_REMOTE_PHY_CAP)
+		return;
+
+	if (bp->link_up) {
+		u32 bmsr;
+
+		switch (bp->line_speed) {
+		case SPEED_10:
+			if (bp->duplex == DUPLEX_HALF)
+				fw_link_status = BNX2_LINK_STATUS_10HALF;
+			else
+				fw_link_status = BNX2_LINK_STATUS_10FULL;
+			break;
+		case SPEED_100:
+			if (bp->duplex == DUPLEX_HALF)
+				fw_link_status = BNX2_LINK_STATUS_100HALF;
+			else
+				fw_link_status = BNX2_LINK_STATUS_100FULL;
+			break;
+		case SPEED_1000:
+			if (bp->duplex == DUPLEX_HALF)
+				fw_link_status = BNX2_LINK_STATUS_1000HALF;
+			else
+				fw_link_status = BNX2_LINK_STATUS_1000FULL;
+			break;
+		case SPEED_2500:
+			if (bp->duplex == DUPLEX_HALF)
+				fw_link_status = BNX2_LINK_STATUS_2500HALF;
+			else
+				fw_link_status = BNX2_LINK_STATUS_2500FULL;
+			break;
+		}
+
+		fw_link_status |= BNX2_LINK_STATUS_LINK_UP;
+
+		if (bp->autoneg) {
+			fw_link_status |= BNX2_LINK_STATUS_AN_ENABLED;
+
+			bnx2_read_phy(bp, bp->mii_bmsr, &bmsr);
+			bnx2_read_phy(bp, bp->mii_bmsr, &bmsr);
+
+			if (!(bmsr & BMSR_ANEGCOMPLETE) ||
+			    bp->phy_flags & BNX2_PHY_FLAG_PARALLEL_DETECT)
+				fw_link_status |= BNX2_LINK_STATUS_PARALLEL_DET;
+			else
+				fw_link_status |= BNX2_LINK_STATUS_AN_COMPLETE;
+		}
+	}
+	else
+		fw_link_status = BNX2_LINK_STATUS_LINK_DOWN;
+
+	bnx2_shmem_wr(bp, BNX2_LINK_STATUS, fw_link_status);
+}
+
+static char *
+bnx2_xceiver_str(struct bnx2 *bp)
+{
+	return (bp->phy_port == PORT_FIBRE) ? "SerDes" :
+		((bp->phy_flags & BNX2_PHY_FLAG_SERDES) ? "Remote Copper" :
+		 "Copper");
+}
+
+static void
+bnx2_report_link(struct bnx2 *bp)
+{
+	if (bp->link_up) {
+		netif_carrier_on(bp->dev);
+		netdev_info(bp->dev, "NIC %s Link is Up, %d Mbps %s duplex",
+			    bnx2_xceiver_str(bp),
+			    bp->line_speed,
+			    bp->duplex == DUPLEX_FULL ? "full" : "half");
+
+		if (bp->flow_ctrl) {
+			if (bp->flow_ctrl & FLOW_CTRL_RX) {
+				pr_cont(", receive ");
+				if (bp->flow_ctrl & FLOW_CTRL_TX)
+					pr_cont("& transmit ");
+			}
+			else {
+				pr_cont(", transmit ");
+			}
+			pr_cont("flow control ON");
+		}
+		pr_cont("\n");
+	} else {
+		netif_carrier_off(bp->dev);
+		netdev_err(bp->dev, "NIC %s Link is Down\n",
+			   bnx2_xceiver_str(bp));
+	}
+
+	bnx2_report_fw_link(bp);
+}
+
+static void
+bnx2_resolve_flow_ctrl(struct bnx2 *bp)
+{
+	u32 local_adv, remote_adv;
+
+	bp->flow_ctrl = 0;
+	if ((bp->autoneg & (AUTONEG_SPEED | AUTONEG_FLOW_CTRL)) !=
+		(AUTONEG_SPEED | AUTONEG_FLOW_CTRL)) {
+
+		if (bp->duplex == DUPLEX_FULL) {
+			bp->flow_ctrl = bp->req_flow_ctrl;
+		}
+		return;
+	}
+
+	if (bp->duplex != DUPLEX_FULL) {
+		return;
+	}
+
+	if ((bp->phy_flags & BNX2_PHY_FLAG_SERDES) &&
+	    (CHIP_NUM(bp) == CHIP_NUM_5708)) {
+		u32 val;
+
+		bnx2_read_phy(bp, BCM5708S_1000X_STAT1, &val);
+		if (val & BCM5708S_1000X_STAT1_TX_PAUSE)
+			bp->flow_ctrl |= FLOW_CTRL_TX;
+		if (val & BCM5708S_1000X_STAT1_RX_PAUSE)
+			bp->flow_ctrl |= FLOW_CTRL_RX;
+		return;
+	}
+
+	bnx2_read_phy(bp, bp->mii_adv, &local_adv);
+	bnx2_read_phy(bp, bp->mii_lpa, &remote_adv);
+
+	if (bp->phy_flags & BNX2_PHY_FLAG_SERDES) {
+		u32 new_local_adv = 0;
+		u32 new_remote_adv = 0;
+
+		if (local_adv & ADVERTISE_1000XPAUSE)
+			new_local_adv |= ADVERTISE_PAUSE_CAP;
+		if (local_adv & ADVERTISE_1000XPSE_ASYM)
+			new_local_adv |= ADVERTISE_PAUSE_ASYM;
+		if (remote_adv & ADVERTISE_1000XPAUSE)
+			new_remote_adv |= ADVERTISE_PAUSE_CAP;
+		if (remote_adv & ADVERTISE_1000XPSE_ASYM)
+			new_remote_adv |= ADVERTISE_PAUSE_ASYM;
+
+		local_adv = new_local_adv;
+		remote_adv = new_remote_adv;
+	}
+
+	/* See Table 28B-3 of 802.3ab-1999 spec. */
+	if (local_adv & ADVERTISE_PAUSE_CAP) {
+		if(local_adv & ADVERTISE_PAUSE_ASYM) {
+	                if (remote_adv & ADVERTISE_PAUSE_CAP) {
+				bp->flow_ctrl = FLOW_CTRL_TX | FLOW_CTRL_RX;
+			}
+			else if (remote_adv & ADVERTISE_PAUSE_ASYM) {
+				bp->flow_ctrl = FLOW_CTRL_RX;
+			}
+		}
+		else {
+			if (remote_adv & ADVERTISE_PAUSE_CAP) {
+				bp->flow_ctrl = FLOW_CTRL_TX | FLOW_CTRL_RX;
+			}
+		}
+	}
+	else if (local_adv & ADVERTISE_PAUSE_ASYM) {
+		if ((remote_adv & ADVERTISE_PAUSE_CAP) &&
+			(remote_adv & ADVERTISE_PAUSE_ASYM)) {
+
+			bp->flow_ctrl = FLOW_CTRL_TX;
+		}
+	}
+}
+
+static int
+bnx2_5709s_linkup(struct bnx2 *bp)
+{
+	u32 val, speed;
+
+	bp->link_up = 1;
+
+	bnx2_write_phy(bp, MII_BNX2_BLK_ADDR, MII_BNX2_BLK_ADDR_GP_STATUS);
+	bnx2_read_phy(bp, MII_BNX2_GP_TOP_AN_STATUS1, &val);
+	bnx2_write_phy(bp, MII_BNX2_BLK_ADDR, MII_BNX2_BLK_ADDR_COMBO_IEEEB0);
+
+	if ((bp->autoneg & AUTONEG_SPEED) == 0) {
+		bp->line_speed = bp->req_line_speed;
+		bp->duplex = bp->req_duplex;
+		return 0;
+	}
+	speed = val & MII_BNX2_GP_TOP_AN_SPEED_MSK;
+	switch (speed) {
+		case MII_BNX2_GP_TOP_AN_SPEED_10:
+			bp->line_speed = SPEED_10;
+			break;
+		case MII_BNX2_GP_TOP_AN_SPEED_100:
+			bp->line_speed = SPEED_100;
+			break;
+		case MII_BNX2_GP_TOP_AN_SPEED_1G:
+		case MII_BNX2_GP_TOP_AN_SPEED_1GKV:
+			bp->line_speed = SPEED_1000;
+			break;
+		case MII_BNX2_GP_TOP_AN_SPEED_2_5G:
+			bp->line_speed = SPEED_2500;
+			break;
+	}
+	if (val & MII_BNX2_GP_TOP_AN_FD)
+		bp->duplex = DUPLEX_FULL;
+	else
+		bp->duplex = DUPLEX_HALF;
+	return 0;
+}
+
+static int
+bnx2_5708s_linkup(struct bnx2 *bp)
+{
+	u32 val;
+
+	bp->link_up = 1;
+	bnx2_read_phy(bp, BCM5708S_1000X_STAT1, &val);
+	switch (val & BCM5708S_1000X_STAT1_SPEED_MASK) {
+		case BCM5708S_1000X_STAT1_SPEED_10:
+			bp->line_speed = SPEED_10;
+			break;
+		case BCM5708S_1000X_STAT1_SPEED_100:
+			bp->line_speed = SPEED_100;
+			break;
+		case BCM5708S_1000X_STAT1_SPEED_1G:
+			bp->line_speed = SPEED_1000;
+			break;
+		case BCM5708S_1000X_STAT1_SPEED_2G5:
+			bp->line_speed = SPEED_2500;
+			break;
+	}
+	if (val & BCM5708S_1000X_STAT1_FD)
+		bp->duplex = DUPLEX_FULL;
+	else
+		bp->duplex = DUPLEX_HALF;
+
+	return 0;
+}
+
+static int
+bnx2_5706s_linkup(struct bnx2 *bp)
+{
+	u32 bmcr, local_adv, remote_adv, common;
+
+	bp->link_up = 1;
+	bp->line_speed = SPEED_1000;
+
+	bnx2_read_phy(bp, bp->mii_bmcr, &bmcr);
+	if (bmcr & BMCR_FULLDPLX) {
+		bp->duplex = DUPLEX_FULL;
+	}
+	else {
+		bp->duplex = DUPLEX_HALF;
+	}
+
+	if (!(bmcr & BMCR_ANENABLE)) {
+		return 0;
+	}
+
+	bnx2_read_phy(bp, bp->mii_adv, &local_adv);
+	bnx2_read_phy(bp, bp->mii_lpa, &remote_adv);
+
+	common = local_adv & remote_adv;
+	if (common & (ADVERTISE_1000XHALF | ADVERTISE_1000XFULL)) {
+
+		if (common & ADVERTISE_1000XFULL) {
+			bp->duplex = DUPLEX_FULL;
+		}
+		else {
+			bp->duplex = DUPLEX_HALF;
+		}
+	}
+
+	return 0;
+}
+
+static int
+bnx2_copper_linkup(struct bnx2 *bp)
+{
+	u32 bmcr;
+
+	bnx2_read_phy(bp, bp->mii_bmcr, &bmcr);
+	if (bmcr & BMCR_ANENABLE) {
+		u32 local_adv, remote_adv, common;
+
+		bnx2_read_phy(bp, MII_CTRL1000, &local_adv);
+		bnx2_read_phy(bp, MII_STAT1000, &remote_adv);
+
+		common = local_adv & (remote_adv >> 2);
+		if (common & ADVERTISE_1000FULL) {
+			bp->line_speed = SPEED_1000;
+			bp->duplex = DUPLEX_FULL;
+		}
+		else if (common & ADVERTISE_1000HALF) {
+			bp->line_speed = SPEED_1000;
+			bp->duplex = DUPLEX_HALF;
+		}
+		else {
+			bnx2_read_phy(bp, bp->mii_adv, &local_adv);
+			bnx2_read_phy(bp, bp->mii_lpa, &remote_adv);
+
+			common = local_adv & remote_adv;
+			if (common & ADVERTISE_100FULL) {
+				bp->line_speed = SPEED_100;
+				bp->duplex = DUPLEX_FULL;
+			}
+			else if (common & ADVERTISE_100HALF) {
+				bp->line_speed = SPEED_100;
+				bp->duplex = DUPLEX_HALF;
+			}
+			else if (common & ADVERTISE_10FULL) {
+				bp->line_speed = SPEED_10;
+				bp->duplex = DUPLEX_FULL;
+			}
+			else if (common & ADVERTISE_10HALF) {
+				bp->line_speed = SPEED_10;
+				bp->duplex = DUPLEX_HALF;
+			}
+			else {
+				bp->line_speed = 0;
+				bp->link_up = 0;
+			}
+		}
+	}
+	else {
+		if (bmcr & BMCR_SPEED100) {
+			bp->line_speed = SPEED_100;
+		}
+		else {
+			bp->line_speed = SPEED_10;
+		}
+		if (bmcr & BMCR_FULLDPLX) {
+			bp->duplex = DUPLEX_FULL;
+		}
+		else {
+			bp->duplex = DUPLEX_HALF;
+		}
+	}
+
+	return 0;
+}
+
+static void
+bnx2_init_rx_context(struct bnx2 *bp, u32 cid)
+{
+	u32 val, rx_cid_addr = GET_CID_ADDR(cid);
+
+	val = BNX2_L2CTX_CTX_TYPE_CTX_BD_CHN_TYPE_VALUE;
+	val |= BNX2_L2CTX_CTX_TYPE_SIZE_L2;
+	val |= 0x02 << 8;
+
+	if (bp->flow_ctrl & FLOW_CTRL_TX)
+		val |= BNX2_L2CTX_FLOW_CTRL_ENABLE;
+
+	bnx2_ctx_wr(bp, rx_cid_addr, BNX2_L2CTX_CTX_TYPE, val);
+}
+
+static void
+bnx2_init_all_rx_contexts(struct bnx2 *bp)
+{
+	int i;
+	u32 cid;
+
+	for (i = 0, cid = RX_CID; i < bp->num_rx_rings; i++, cid++) {
+		if (i == 1)
+			cid = RX_RSS_CID;
+		bnx2_init_rx_context(bp, cid);
+	}
+}
+
+static void
+bnx2_set_mac_link(struct bnx2 *bp)
+{
+	u32 val;
+
+	REG_WR(bp, BNX2_EMAC_TX_LENGTHS, 0x2620);
+	if (bp->link_up && (bp->line_speed == SPEED_1000) &&
+		(bp->duplex == DUPLEX_HALF)) {
+		REG_WR(bp, BNX2_EMAC_TX_LENGTHS, 0x26ff);
+	}
+
+	/* Configure the EMAC mode register. */
+	val = REG_RD(bp, BNX2_EMAC_MODE);
+
+	val &= ~(BNX2_EMAC_MODE_PORT | BNX2_EMAC_MODE_HALF_DUPLEX |
+		BNX2_EMAC_MODE_MAC_LOOP | BNX2_EMAC_MODE_FORCE_LINK |
+		BNX2_EMAC_MODE_25G_MODE);
+
+	if (bp->link_up) {
+		switch (bp->line_speed) {
+			case SPEED_10:
+				if (CHIP_NUM(bp) != CHIP_NUM_5706) {
+					val |= BNX2_EMAC_MODE_PORT_MII_10M;
+					break;
+				}
+				/* fall through */
+			case SPEED_100:
+				val |= BNX2_EMAC_MODE_PORT_MII;
+				break;
+			case SPEED_2500:
+				val |= BNX2_EMAC_MODE_25G_MODE;
+				/* fall through */
+			case SPEED_1000:
+				val |= BNX2_EMAC_MODE_PORT_GMII;
+				break;
+		}
+	}
+	else {
+		val |= BNX2_EMAC_MODE_PORT_GMII;
+	}
+
+	/* Set the MAC to operate in the appropriate duplex mode. */
+	if (bp->duplex == DUPLEX_HALF)
+		val |= BNX2_EMAC_MODE_HALF_DUPLEX;
+	REG_WR(bp, BNX2_EMAC_MODE, val);
+
+	/* Enable/disable rx PAUSE. */
+	bp->rx_mode &= ~BNX2_EMAC_RX_MODE_FLOW_EN;
+
+	if (bp->flow_ctrl & FLOW_CTRL_RX)
+		bp->rx_mode |= BNX2_EMAC_RX_MODE_FLOW_EN;
+	REG_WR(bp, BNX2_EMAC_RX_MODE, bp->rx_mode);
+
+	/* Enable/disable tx PAUSE. */
+	val = REG_RD(bp, BNX2_EMAC_TX_MODE);
+	val &= ~BNX2_EMAC_TX_MODE_FLOW_EN;
+
+	if (bp->flow_ctrl & FLOW_CTRL_TX)
+		val |= BNX2_EMAC_TX_MODE_FLOW_EN;
+	REG_WR(bp, BNX2_EMAC_TX_MODE, val);
+
+	/* Acknowledge the interrupt. */
+	REG_WR(bp, BNX2_EMAC_STATUS, BNX2_EMAC_STATUS_LINK_CHANGE);
+
+	bnx2_init_all_rx_contexts(bp);
+}
+
+static void
+bnx2_enable_bmsr1(struct bnx2 *bp)
+{
+	if ((bp->phy_flags & BNX2_PHY_FLAG_SERDES) &&
+	    (CHIP_NUM(bp) == CHIP_NUM_5709))
+		bnx2_write_phy(bp, MII_BNX2_BLK_ADDR,
+			       MII_BNX2_BLK_ADDR_GP_STATUS);
+}
+
+static void
+bnx2_disable_bmsr1(struct bnx2 *bp)
+{
+	if ((bp->phy_flags & BNX2_PHY_FLAG_SERDES) &&
+	    (CHIP_NUM(bp) == CHIP_NUM_5709))
+		bnx2_write_phy(bp, MII_BNX2_BLK_ADDR,
+			       MII_BNX2_BLK_ADDR_COMBO_IEEEB0);
+}
+
+static int
+bnx2_test_and_enable_2g5(struct bnx2 *bp)
+{
+	u32 up1;
+	int ret = 1;
+
+	if (!(bp->phy_flags & BNX2_PHY_FLAG_2_5G_CAPABLE))
+		return 0;
+
+	if (bp->autoneg & AUTONEG_SPEED)
+		bp->advertising |= ADVERTISED_2500baseX_Full;
+
+	if (CHIP_NUM(bp) == CHIP_NUM_5709)
+		bnx2_write_phy(bp, MII_BNX2_BLK_ADDR, MII_BNX2_BLK_ADDR_OVER1G);
+
+	bnx2_read_phy(bp, bp->mii_up1, &up1);
+	if (!(up1 & BCM5708S_UP1_2G5)) {
+		up1 |= BCM5708S_UP1_2G5;
+		bnx2_write_phy(bp, bp->mii_up1, up1);
+		ret = 0;
+	}
+
+	if (CHIP_NUM(bp) == CHIP_NUM_5709)
+		bnx2_write_phy(bp, MII_BNX2_BLK_ADDR,
+			       MII_BNX2_BLK_ADDR_COMBO_IEEEB0);
+
+	return ret;
+}
+
+static int
+bnx2_test_and_disable_2g5(struct bnx2 *bp)
+{
+	u32 up1;
+	int ret = 0;
+
+	if (!(bp->phy_flags & BNX2_PHY_FLAG_2_5G_CAPABLE))
+		return 0;
+
+	if (CHIP_NUM(bp) == CHIP_NUM_5709)
+		bnx2_write_phy(bp, MII_BNX2_BLK_ADDR, MII_BNX2_BLK_ADDR_OVER1G);
+
+	bnx2_read_phy(bp, bp->mii_up1, &up1);
+	if (up1 & BCM5708S_UP1_2G5) {
+		up1 &= ~BCM5708S_UP1_2G5;
+		bnx2_write_phy(bp, bp->mii_up1, up1);
+		ret = 1;
+	}
+
+	if (CHIP_NUM(bp) == CHIP_NUM_5709)
+		bnx2_write_phy(bp, MII_BNX2_BLK_ADDR,
+			       MII_BNX2_BLK_ADDR_COMBO_IEEEB0);
+
+	return ret;
+}
+
+static void
+bnx2_enable_forced_2g5(struct bnx2 *bp)
+{
+	u32 uninitialized_var(bmcr);
+	int err;
+
+	if (!(bp->phy_flags & BNX2_PHY_FLAG_2_5G_CAPABLE))
+		return;
+
+	if (CHIP_NUM(bp) == CHIP_NUM_5709) {
+		u32 val;
+
+		bnx2_write_phy(bp, MII_BNX2_BLK_ADDR,
+			       MII_BNX2_BLK_ADDR_SERDES_DIG);
+		if (!bnx2_read_phy(bp, MII_BNX2_SERDES_DIG_MISC1, &val)) {
+			val &= ~MII_BNX2_SD_MISC1_FORCE_MSK;
+			val |= MII_BNX2_SD_MISC1_FORCE |
+				MII_BNX2_SD_MISC1_FORCE_2_5G;
+			bnx2_write_phy(bp, MII_BNX2_SERDES_DIG_MISC1, val);
+		}
+
+		bnx2_write_phy(bp, MII_BNX2_BLK_ADDR,
+			       MII_BNX2_BLK_ADDR_COMBO_IEEEB0);
+		err = bnx2_read_phy(bp, bp->mii_bmcr, &bmcr);
+
+	} else if (CHIP_NUM(bp) == CHIP_NUM_5708) {
+		err = bnx2_read_phy(bp, bp->mii_bmcr, &bmcr);
+		if (!err)
+			bmcr |= BCM5708S_BMCR_FORCE_2500;
+	} else {
+		return;
+	}
+
+	if (err)
+		return;
+
+	if (bp->autoneg & AUTONEG_SPEED) {
+		bmcr &= ~BMCR_ANENABLE;
+		if (bp->req_duplex == DUPLEX_FULL)
+			bmcr |= BMCR_FULLDPLX;
+	}
+	bnx2_write_phy(bp, bp->mii_bmcr, bmcr);
+}
+
+static void
+bnx2_disable_forced_2g5(struct bnx2 *bp)
+{
+	u32 uninitialized_var(bmcr);
+	int err;
+
+	if (!(bp->phy_flags & BNX2_PHY_FLAG_2_5G_CAPABLE))
+		return;
+
+	if (CHIP_NUM(bp) == CHIP_NUM_5709) {
+		u32 val;
+
+		bnx2_write_phy(bp, MII_BNX2_BLK_ADDR,
+			       MII_BNX2_BLK_ADDR_SERDES_DIG);
+		if (!bnx2_read_phy(bp, MII_BNX2_SERDES_DIG_MISC1, &val)) {
+			val &= ~MII_BNX2_SD_MISC1_FORCE;
+			bnx2_write_phy(bp, MII_BNX2_SERDES_DIG_MISC1, val);
+		}
+
+		bnx2_write_phy(bp, MII_BNX2_BLK_ADDR,
+			       MII_BNX2_BLK_ADDR_COMBO_IEEEB0);
+		err = bnx2_read_phy(bp, bp->mii_bmcr, &bmcr);
+
+	} else if (CHIP_NUM(bp) == CHIP_NUM_5708) {
+		err = bnx2_read_phy(bp, bp->mii_bmcr, &bmcr);
+		if (!err)
+			bmcr &= ~BCM5708S_BMCR_FORCE_2500;
+	} else {
+		return;
+	}
+
+	if (err)
+		return;
+
+	if (bp->autoneg & AUTONEG_SPEED)
+		bmcr |= BMCR_SPEED1000 | BMCR_ANENABLE | BMCR_ANRESTART;
+	bnx2_write_phy(bp, bp->mii_bmcr, bmcr);
+}
+
+static void
+bnx2_5706s_force_link_dn(struct bnx2 *bp, int start)
+{
+	u32 val;
+
+	bnx2_write_phy(bp, MII_BNX2_DSP_ADDRESS, MII_EXPAND_SERDES_CTL);
+	bnx2_read_phy(bp, MII_BNX2_DSP_RW_PORT, &val);
+	if (start)
+		bnx2_write_phy(bp, MII_BNX2_DSP_RW_PORT, val & 0xff0f);
+	else
+		bnx2_write_phy(bp, MII_BNX2_DSP_RW_PORT, val | 0xc0);
+}
+
+static int
+bnx2_set_link(struct bnx2 *bp)
+{
+	u32 bmsr;
+	u8 link_up;
+
+	if (bp->loopback == MAC_LOOPBACK || bp->loopback == PHY_LOOPBACK) {
+		bp->link_up = 1;
+		return 0;
+	}
+
+	if (bp->phy_flags & BNX2_PHY_FLAG_REMOTE_PHY_CAP)
+		return 0;
+
+	link_up = bp->link_up;
+
+	bnx2_enable_bmsr1(bp);
+	bnx2_read_phy(bp, bp->mii_bmsr1, &bmsr);
+	bnx2_read_phy(bp, bp->mii_bmsr1, &bmsr);
+	bnx2_disable_bmsr1(bp);
+
+	if ((bp->phy_flags & BNX2_PHY_FLAG_SERDES) &&
+	    (CHIP_NUM(bp) == CHIP_NUM_5706)) {
+		u32 val, an_dbg;
+
+		if (bp->phy_flags & BNX2_PHY_FLAG_FORCED_DOWN) {
+			bnx2_5706s_force_link_dn(bp, 0);
+			bp->phy_flags &= ~BNX2_PHY_FLAG_FORCED_DOWN;
+		}
+		val = REG_RD(bp, BNX2_EMAC_STATUS);
+
+		bnx2_write_phy(bp, MII_BNX2_MISC_SHADOW, MISC_SHDW_AN_DBG);
+		bnx2_read_phy(bp, MII_BNX2_MISC_SHADOW, &an_dbg);
+		bnx2_read_phy(bp, MII_BNX2_MISC_SHADOW, &an_dbg);
+
+		if ((val & BNX2_EMAC_STATUS_LINK) &&
+		    !(an_dbg & MISC_SHDW_AN_DBG_NOSYNC))
+			bmsr |= BMSR_LSTATUS;
+		else
+			bmsr &= ~BMSR_LSTATUS;
+	}
+
+	if (bmsr & BMSR_LSTATUS) {
+		bp->link_up = 1;
+
+		if (bp->phy_flags & BNX2_PHY_FLAG_SERDES) {
+			if (CHIP_NUM(bp) == CHIP_NUM_5706)
+				bnx2_5706s_linkup(bp);
+			else if (CHIP_NUM(bp) == CHIP_NUM_5708)
+				bnx2_5708s_linkup(bp);
+			else if (CHIP_NUM(bp) == CHIP_NUM_5709)
+				bnx2_5709s_linkup(bp);
+		}
+		else {
+			bnx2_copper_linkup(bp);
+		}
+		bnx2_resolve_flow_ctrl(bp);
+	}
+	else {
+		if ((bp->phy_flags & BNX2_PHY_FLAG_SERDES) &&
+		    (bp->autoneg & AUTONEG_SPEED))
+			bnx2_disable_forced_2g5(bp);
+
+		if (bp->phy_flags & BNX2_PHY_FLAG_PARALLEL_DETECT) {
+			u32 bmcr;
+
+			bnx2_read_phy(bp, bp->mii_bmcr, &bmcr);
+			bmcr |= BMCR_ANENABLE;
+			bnx2_write_phy(bp, bp->mii_bmcr, bmcr);
+
+			bp->phy_flags &= ~BNX2_PHY_FLAG_PARALLEL_DETECT;
+		}
+		bp->link_up = 0;
+	}
+
+	if (bp->link_up != link_up) {
+		bnx2_report_link(bp);
+	}
+
+	bnx2_set_mac_link(bp);
+
+	return 0;
+}
+
+static int
+bnx2_reset_phy(struct bnx2 *bp)
+{
+	int i;
+	u32 reg;
+
+        bnx2_write_phy(bp, bp->mii_bmcr, BMCR_RESET);
+
+#define PHY_RESET_MAX_WAIT 100
+	for (i = 0; i < PHY_RESET_MAX_WAIT; i++) {
+		udelay(10);
+
+		bnx2_read_phy(bp, bp->mii_bmcr, &reg);
+		if (!(reg & BMCR_RESET)) {
+			udelay(20);
+			break;
+		}
+	}
+	if (i == PHY_RESET_MAX_WAIT) {
+		return -EBUSY;
+	}
+	return 0;
+}
+
+static u32
+bnx2_phy_get_pause_adv(struct bnx2 *bp)
+{
+	u32 adv = 0;
+
+	if ((bp->req_flow_ctrl & (FLOW_CTRL_RX | FLOW_CTRL_TX)) ==
+		(FLOW_CTRL_RX | FLOW_CTRL_TX)) {
+
+		if (bp->phy_flags & BNX2_PHY_FLAG_SERDES) {
+			adv = ADVERTISE_1000XPAUSE;
+		}
+		else {
+			adv = ADVERTISE_PAUSE_CAP;
+		}
+	}
+	else if (bp->req_flow_ctrl & FLOW_CTRL_TX) {
+		if (bp->phy_flags & BNX2_PHY_FLAG_SERDES) {
+			adv = ADVERTISE_1000XPSE_ASYM;
+		}
+		else {
+			adv = ADVERTISE_PAUSE_ASYM;
+		}
+	}
+	else if (bp->req_flow_ctrl & FLOW_CTRL_RX) {
+		if (bp->phy_flags & BNX2_PHY_FLAG_SERDES) {
+			adv = ADVERTISE_1000XPAUSE | ADVERTISE_1000XPSE_ASYM;
+		}
+		else {
+			adv = ADVERTISE_PAUSE_CAP | ADVERTISE_PAUSE_ASYM;
+		}
+	}
+	return adv;
+}
+
+static int bnx2_fw_sync(struct bnx2 *, u32, int, int);
+
+static int
+bnx2_setup_remote_phy(struct bnx2 *bp, u8 port)
+__releases(&bp->phy_lock)
+__acquires(&bp->phy_lock)
+{
+	u32 speed_arg = 0, pause_adv;
+
+	pause_adv = bnx2_phy_get_pause_adv(bp);
+
+	if (bp->autoneg & AUTONEG_SPEED) {
+		speed_arg |= BNX2_NETLINK_SET_LINK_ENABLE_AUTONEG;
+		if (bp->advertising & ADVERTISED_10baseT_Half)
+			speed_arg |= BNX2_NETLINK_SET_LINK_SPEED_10HALF;
+		if (bp->advertising & ADVERTISED_10baseT_Full)
+			speed_arg |= BNX2_NETLINK_SET_LINK_SPEED_10FULL;
+		if (bp->advertising & ADVERTISED_100baseT_Half)
+			speed_arg |= BNX2_NETLINK_SET_LINK_SPEED_100HALF;
+		if (bp->advertising & ADVERTISED_100baseT_Full)
+			speed_arg |= BNX2_NETLINK_SET_LINK_SPEED_100FULL;
+		if (bp->advertising & ADVERTISED_1000baseT_Full)
+			speed_arg |= BNX2_NETLINK_SET_LINK_SPEED_1GFULL;
+		if (bp->advertising & ADVERTISED_2500baseX_Full)
+			speed_arg |= BNX2_NETLINK_SET_LINK_SPEED_2G5FULL;
+	} else {
+		if (bp->req_line_speed == SPEED_2500)
+			speed_arg = BNX2_NETLINK_SET_LINK_SPEED_2G5FULL;
+		else if (bp->req_line_speed == SPEED_1000)
+			speed_arg = BNX2_NETLINK_SET_LINK_SPEED_1GFULL;
+		else if (bp->req_line_speed == SPEED_100) {
+			if (bp->req_duplex == DUPLEX_FULL)
+				speed_arg = BNX2_NETLINK_SET_LINK_SPEED_100FULL;
+			else
+				speed_arg = BNX2_NETLINK_SET_LINK_SPEED_100HALF;
+		} else if (bp->req_line_speed == SPEED_10) {
+			if (bp->req_duplex == DUPLEX_FULL)
+				speed_arg = BNX2_NETLINK_SET_LINK_SPEED_10FULL;
+			else
+				speed_arg = BNX2_NETLINK_SET_LINK_SPEED_10HALF;
+		}
+	}
+
+	if (pause_adv & (ADVERTISE_1000XPAUSE | ADVERTISE_PAUSE_CAP))
+		speed_arg |= BNX2_NETLINK_SET_LINK_FC_SYM_PAUSE;
+	if (pause_adv & (ADVERTISE_1000XPSE_ASYM | ADVERTISE_PAUSE_ASYM))
+		speed_arg |= BNX2_NETLINK_SET_LINK_FC_ASYM_PAUSE;
+
+	if (port == PORT_TP)
+		speed_arg |= BNX2_NETLINK_SET_LINK_PHY_APP_REMOTE |
+			     BNX2_NETLINK_SET_LINK_ETH_AT_WIRESPEED;
+
+	bnx2_shmem_wr(bp, BNX2_DRV_MB_ARG0, speed_arg);
+
+	spin_unlock_bh(&bp->phy_lock);
+	bnx2_fw_sync(bp, BNX2_DRV_MSG_CODE_CMD_SET_LINK, 1, 0);
+	spin_lock_bh(&bp->phy_lock);
+
+	return 0;
+}
+
+static int
+bnx2_setup_serdes_phy(struct bnx2 *bp, u8 port)
+__releases(&bp->phy_lock)
+__acquires(&bp->phy_lock)
+{
+	u32 adv, bmcr;
+	u32 new_adv = 0;
+
+	if (bp->phy_flags & BNX2_PHY_FLAG_REMOTE_PHY_CAP)
+		return bnx2_setup_remote_phy(bp, port);
+
+	if (!(bp->autoneg & AUTONEG_SPEED)) {
+		u32 new_bmcr;
+		int force_link_down = 0;
+
+		if (bp->req_line_speed == SPEED_2500) {
+			if (!bnx2_test_and_enable_2g5(bp))
+				force_link_down = 1;
+		} else if (bp->req_line_speed == SPEED_1000) {
+			if (bnx2_test_and_disable_2g5(bp))
+				force_link_down = 1;
+		}
+		bnx2_read_phy(bp, bp->mii_adv, &adv);
+		adv &= ~(ADVERTISE_1000XFULL | ADVERTISE_1000XHALF);
+
+		bnx2_read_phy(bp, bp->mii_bmcr, &bmcr);
+		new_bmcr = bmcr & ~BMCR_ANENABLE;
+		new_bmcr |= BMCR_SPEED1000;
+
+		if (CHIP_NUM(bp) == CHIP_NUM_5709) {
+			if (bp->req_line_speed == SPEED_2500)
+				bnx2_enable_forced_2g5(bp);
+			else if (bp->req_line_speed == SPEED_1000) {
+				bnx2_disable_forced_2g5(bp);
+				new_bmcr &= ~0x2000;
+			}
+
+		} else if (CHIP_NUM(bp) == CHIP_NUM_5708) {
+			if (bp->req_line_speed == SPEED_2500)
+				new_bmcr |= BCM5708S_BMCR_FORCE_2500;
+			else
+				new_bmcr = bmcr & ~BCM5708S_BMCR_FORCE_2500;
+		}
+
+		if (bp->req_duplex == DUPLEX_FULL) {
+			adv |= ADVERTISE_1000XFULL;
+			new_bmcr |= BMCR_FULLDPLX;
+		}
+		else {
+			adv |= ADVERTISE_1000XHALF;
+			new_bmcr &= ~BMCR_FULLDPLX;
+		}
+		if ((new_bmcr != bmcr) || (force_link_down)) {
+			/* Force a link down visible on the other side */
+			if (bp->link_up) {
+				bnx2_write_phy(bp, bp->mii_adv, adv &
+					       ~(ADVERTISE_1000XFULL |
+						 ADVERTISE_1000XHALF));
+				bnx2_write_phy(bp, bp->mii_bmcr, bmcr |
+					BMCR_ANRESTART | BMCR_ANENABLE);
+
+				bp->link_up = 0;
+				netif_carrier_off(bp->dev);
+				bnx2_write_phy(bp, bp->mii_bmcr, new_bmcr);
+				bnx2_report_link(bp);
+			}
+			bnx2_write_phy(bp, bp->mii_adv, adv);
+			bnx2_write_phy(bp, bp->mii_bmcr, new_bmcr);
+		} else {
+			bnx2_resolve_flow_ctrl(bp);
+			bnx2_set_mac_link(bp);
+		}
+		return 0;
+	}
+
+	bnx2_test_and_enable_2g5(bp);
+
+	if (bp->advertising & ADVERTISED_1000baseT_Full)
+		new_adv |= ADVERTISE_1000XFULL;
+
+	new_adv |= bnx2_phy_get_pause_adv(bp);
+
+	bnx2_read_phy(bp, bp->mii_adv, &adv);
+	bnx2_read_phy(bp, bp->mii_bmcr, &bmcr);
+
+	bp->serdes_an_pending = 0;
+	if ((adv != new_adv) || ((bmcr & BMCR_ANENABLE) == 0)) {
+		/* Force a link down visible on the other side */
+		if (bp->link_up) {
+			bnx2_write_phy(bp, bp->mii_bmcr, BMCR_LOOPBACK);
+			spin_unlock_bh(&bp->phy_lock);
+			bnx2_msleep(20);
+			spin_lock_bh(&bp->phy_lock);
+		}
+
+		bnx2_write_phy(bp, bp->mii_adv, new_adv);
+		bnx2_write_phy(bp, bp->mii_bmcr, bmcr | BMCR_ANRESTART |
+			BMCR_ANENABLE);
+		/* Speed up link-up time when the link partner
+		 * does not autonegotiate which is very common
+		 * in blade servers. Some blade servers use
+		 * IPMI for kerboard input and it's important
+		 * to minimize link disruptions. Autoneg. involves
+		 * exchanging base pages plus 3 next pages and
+		 * normally completes in about 120 msec.
+		 */
+		bp->current_interval = BNX2_SERDES_AN_TIMEOUT;
+		bp->serdes_an_pending = 1;
+		mod_timer(&bp->timer, jiffies + bp->current_interval);
+	} else {
+		bnx2_resolve_flow_ctrl(bp);
+		bnx2_set_mac_link(bp);
+	}
+
+	return 0;
+}
+
+#define ETHTOOL_ALL_FIBRE_SPEED						\
+	(bp->phy_flags & BNX2_PHY_FLAG_2_5G_CAPABLE) ?			\
+		(ADVERTISED_2500baseX_Full | ADVERTISED_1000baseT_Full) :\
+		(ADVERTISED_1000baseT_Full)
+
+#define ETHTOOL_ALL_COPPER_SPEED					\
+	(ADVERTISED_10baseT_Half | ADVERTISED_10baseT_Full |		\
+	ADVERTISED_100baseT_Half | ADVERTISED_100baseT_Full |		\
+	ADVERTISED_1000baseT_Full)
+
+#define PHY_ALL_10_100_SPEED (ADVERTISE_10HALF | ADVERTISE_10FULL | \
+	ADVERTISE_100HALF | ADVERTISE_100FULL | ADVERTISE_CSMA)
+
+#define PHY_ALL_1000_SPEED (ADVERTISE_1000HALF | ADVERTISE_1000FULL)
+
+static void
+bnx2_set_default_remote_link(struct bnx2 *bp)
+{
+	u32 link;
+
+	if (bp->phy_port == PORT_TP)
+		link = bnx2_shmem_rd(bp, BNX2_RPHY_COPPER_LINK);
+	else
+		link = bnx2_shmem_rd(bp, BNX2_RPHY_SERDES_LINK);
+
+	if (link & BNX2_NETLINK_SET_LINK_ENABLE_AUTONEG) {
+		bp->req_line_speed = 0;
+		bp->autoneg |= AUTONEG_SPEED;
+		bp->advertising = ADVERTISED_Autoneg;
+		if (link & BNX2_NETLINK_SET_LINK_SPEED_10HALF)
+			bp->advertising |= ADVERTISED_10baseT_Half;
+		if (link & BNX2_NETLINK_SET_LINK_SPEED_10FULL)
+			bp->advertising |= ADVERTISED_10baseT_Full;
+		if (link & BNX2_NETLINK_SET_LINK_SPEED_100HALF)
+			bp->advertising |= ADVERTISED_100baseT_Half;
+		if (link & BNX2_NETLINK_SET_LINK_SPEED_100FULL)
+			bp->advertising |= ADVERTISED_100baseT_Full;
+		if (link & BNX2_NETLINK_SET_LINK_SPEED_1GFULL)
+			bp->advertising |= ADVERTISED_1000baseT_Full;
+		if (link & BNX2_NETLINK_SET_LINK_SPEED_2G5FULL)
+			bp->advertising |= ADVERTISED_2500baseX_Full;
+	} else {
+		bp->autoneg = 0;
+		bp->advertising = 0;
+		bp->req_duplex = DUPLEX_FULL;
+		if (link & BNX2_NETLINK_SET_LINK_SPEED_10) {
+			bp->req_line_speed = SPEED_10;
+			if (link & BNX2_NETLINK_SET_LINK_SPEED_10HALF)
+				bp->req_duplex = DUPLEX_HALF;
+		}
+		if (link & BNX2_NETLINK_SET_LINK_SPEED_100) {
+			bp->req_line_speed = SPEED_100;
+			if (link & BNX2_NETLINK_SET_LINK_SPEED_100HALF)
+				bp->req_duplex = DUPLEX_HALF;
+		}
+		if (link & BNX2_NETLINK_SET_LINK_SPEED_1GFULL)
+			bp->req_line_speed = SPEED_1000;
+		if (link & BNX2_NETLINK_SET_LINK_SPEED_2G5FULL)
+			bp->req_line_speed = SPEED_2500;
+	}
+}
+
+static void
+bnx2_set_default_link(struct bnx2 *bp)
+{
+	if (bp->phy_flags & BNX2_PHY_FLAG_REMOTE_PHY_CAP) {
+		bnx2_set_default_remote_link(bp);
+		return;
+	}
+
+	bp->autoneg = AUTONEG_SPEED | AUTONEG_FLOW_CTRL;
+	bp->req_line_speed = 0;
+	if (bp->phy_flags & BNX2_PHY_FLAG_SERDES) {
+		u32 reg;
+
+		bp->advertising = ETHTOOL_ALL_FIBRE_SPEED | ADVERTISED_Autoneg;
+
+		reg = bnx2_shmem_rd(bp, BNX2_PORT_HW_CFG_CONFIG);
+		reg &= BNX2_PORT_HW_CFG_CFG_DFLT_LINK_MASK;
+		if (reg == BNX2_PORT_HW_CFG_CFG_DFLT_LINK_1G) {
+			bp->autoneg = 0;
+			bp->req_line_speed = bp->line_speed = SPEED_1000;
+			bp->req_duplex = DUPLEX_FULL;
+		}
+	} else
+		bp->advertising = ETHTOOL_ALL_COPPER_SPEED | ADVERTISED_Autoneg;
+}
+
+static void
+bnx2_send_heart_beat(struct bnx2 *bp)
+{
+	u32 msg;
+	u32 addr;
+
+	spin_lock(&bp->indirect_lock);
+	msg = (u32) (++bp->fw_drv_pulse_wr_seq & BNX2_DRV_PULSE_SEQ_MASK);
+	addr = bp->shmem_base + BNX2_DRV_PULSE_MB;
+	REG_WR(bp, BNX2_PCICFG_REG_WINDOW_ADDRESS, addr);
+	REG_WR(bp, BNX2_PCICFG_REG_WINDOW, msg);
+	spin_unlock(&bp->indirect_lock);
+}
+
+static void
+bnx2_remote_phy_event(struct bnx2 *bp)
+{
+	u32 msg;
+	u8 link_up = bp->link_up;
+	u8 old_port;
+
+	msg = bnx2_shmem_rd(bp, BNX2_LINK_STATUS);
+
+	if (msg & BNX2_LINK_STATUS_HEART_BEAT_EXPIRED)
+		bnx2_send_heart_beat(bp);
+
+	msg &= ~BNX2_LINK_STATUS_HEART_BEAT_EXPIRED;
+
+	if ((msg & BNX2_LINK_STATUS_LINK_UP) == BNX2_LINK_STATUS_LINK_DOWN)
+		bp->link_up = 0;
+	else {
+		u32 speed;
+
+		bp->link_up = 1;
+		speed = msg & BNX2_LINK_STATUS_SPEED_MASK;
+		bp->duplex = DUPLEX_FULL;
+		switch (speed) {
+			case BNX2_LINK_STATUS_10HALF:
+				bp->duplex = DUPLEX_HALF;
+				/* fall through */
+			case BNX2_LINK_STATUS_10FULL:
+				bp->line_speed = SPEED_10;
+				break;
+			case BNX2_LINK_STATUS_100HALF:
+				bp->duplex = DUPLEX_HALF;
+				/* fall through */
+			case BNX2_LINK_STATUS_100BASE_T4:
+				/* fall through */
+			case BNX2_LINK_STATUS_100FULL:
+				bp->line_speed = SPEED_100;
+				break;
+			case BNX2_LINK_STATUS_1000HALF:
+				bp->duplex = DUPLEX_HALF;
+				/* fall through */
+			case BNX2_LINK_STATUS_1000FULL:
+				bp->line_speed = SPEED_1000;
+				break;
+			case BNX2_LINK_STATUS_2500HALF:
+				bp->duplex = DUPLEX_HALF;
+				/* fall through */
+			case BNX2_LINK_STATUS_2500FULL:
+				bp->line_speed = SPEED_2500;
+				break;
+			default:
+				bp->line_speed = 0;
+				break;
+		}
+
+		bp->flow_ctrl = 0;
+		if ((bp->autoneg & (AUTONEG_SPEED | AUTONEG_FLOW_CTRL)) !=
+		    (AUTONEG_SPEED | AUTONEG_FLOW_CTRL)) {
+			if (bp->duplex == DUPLEX_FULL)
+				bp->flow_ctrl = bp->req_flow_ctrl;
+		} else {
+			if (msg & BNX2_LINK_STATUS_TX_FC_ENABLED)
+				bp->flow_ctrl |= FLOW_CTRL_TX;
+			if (msg & BNX2_LINK_STATUS_RX_FC_ENABLED)
+				bp->flow_ctrl |= FLOW_CTRL_RX;
+		}
+
+		old_port = bp->phy_port;
+		if (msg & BNX2_LINK_STATUS_SERDES_LINK)
+			bp->phy_port = PORT_FIBRE;
+		else
+			bp->phy_port = PORT_TP;
+
+		if (old_port != bp->phy_port)
+			bnx2_set_default_link(bp);
+
+	}
+	if (bp->link_up != link_up)
+		bnx2_report_link(bp);
+
+	bnx2_set_mac_link(bp);
+}
+
+static int
+bnx2_set_remote_link(struct bnx2 *bp)
+{
+	u32 evt_code;
+
+	spin_lock(&bp->indirect_lock);
+	REG_WR(bp, BNX2_PCICFG_REG_WINDOW_ADDRESS,
+	       bp->shmem_base + BNX2_FW_EVT_CODE_MB);
+	evt_code = REG_RD(bp, BNX2_PCICFG_REG_WINDOW);
+	spin_unlock(&bp->indirect_lock);
+	switch (evt_code) {
+		case BNX2_FW_EVT_CODE_LINK_EVENT:
+			bnx2_remote_phy_event(bp);
+			break;
+		case BNX2_FW_EVT_CODE_SW_TIMER_EXPIRATION_EVENT:
+		default:
+			bnx2_send_heart_beat(bp);
+			break;
+	}
+	return 0;
+}
+
+static int
+bnx2_setup_copper_phy(struct bnx2 *bp)
+__releases(&bp->phy_lock)
+__acquires(&bp->phy_lock)
+{
+	u32 bmcr;
+	u32 new_bmcr;
+
+	bnx2_read_phy(bp, bp->mii_bmcr, &bmcr);
+
+	if (bp->autoneg & AUTONEG_SPEED) {
+		u32 adv_reg, adv1000_reg;
+		u32 new_adv_reg = 0;
+		u32 new_adv1000_reg = 0;
+
+		bnx2_read_phy(bp, bp->mii_adv, &adv_reg);
+		adv_reg &= (PHY_ALL_10_100_SPEED | ADVERTISE_PAUSE_CAP |
+			ADVERTISE_PAUSE_ASYM);
+
+		bnx2_read_phy(bp, MII_CTRL1000, &adv1000_reg);
+		adv1000_reg &= PHY_ALL_1000_SPEED;
+
+		if (bp->advertising & ADVERTISED_10baseT_Half)
+			new_adv_reg |= ADVERTISE_10HALF;
+		if (bp->advertising & ADVERTISED_10baseT_Full)
+			new_adv_reg |= ADVERTISE_10FULL;
+		if (bp->advertising & ADVERTISED_100baseT_Half)
+			new_adv_reg |= ADVERTISE_100HALF;
+		if (bp->advertising & ADVERTISED_100baseT_Full)
+			new_adv_reg |= ADVERTISE_100FULL;
+		if (bp->advertising & ADVERTISED_1000baseT_Full)
+			new_adv1000_reg |= ADVERTISE_1000FULL;
+
+		new_adv_reg |= ADVERTISE_CSMA;
+
+		new_adv_reg |= bnx2_phy_get_pause_adv(bp);
+
+		if ((adv1000_reg != new_adv1000_reg) ||
+			(adv_reg != new_adv_reg) ||
+			((bmcr & BMCR_ANENABLE) == 0)) {
+
+			bnx2_write_phy(bp, bp->mii_adv, new_adv_reg);
+			bnx2_write_phy(bp, MII_CTRL1000, new_adv1000_reg);
+			bnx2_write_phy(bp, bp->mii_bmcr, BMCR_ANRESTART |
+				BMCR_ANENABLE);
+		}
+		else if (bp->link_up) {
+			/* Flow ctrl may have changed from auto to forced */
+			/* or vice-versa. */
+
+			bnx2_resolve_flow_ctrl(bp);
+			bnx2_set_mac_link(bp);
+		}
+		return 0;
+	}
+
+	new_bmcr = 0;
+	if (bp->req_line_speed == SPEED_100) {
+		new_bmcr |= BMCR_SPEED100;
+	}
+	if (bp->req_duplex == DUPLEX_FULL) {
+		new_bmcr |= BMCR_FULLDPLX;
+	}
+	if (new_bmcr != bmcr) {
+		u32 bmsr;
+
+		bnx2_read_phy(bp, bp->mii_bmsr, &bmsr);
+		bnx2_read_phy(bp, bp->mii_bmsr, &bmsr);
+
+		if (bmsr & BMSR_LSTATUS) {
+			/* Force link down */
+			bnx2_write_phy(bp, bp->mii_bmcr, BMCR_LOOPBACK);
+			spin_unlock_bh(&bp->phy_lock);
+			bnx2_msleep(50);
+			spin_lock_bh(&bp->phy_lock);
+
+			bnx2_read_phy(bp, bp->mii_bmsr, &bmsr);
+			bnx2_read_phy(bp, bp->mii_bmsr, &bmsr);
+		}
+
+		bnx2_write_phy(bp, bp->mii_bmcr, new_bmcr);
+
+		/* Normally, the new speed is setup after the link has
+		 * gone down and up again. In some cases, link will not go
+		 * down so we need to set up the new speed here.
+		 */
+		if (bmsr & BMSR_LSTATUS) {
+			bp->line_speed = bp->req_line_speed;
+			bp->duplex = bp->req_duplex;
+			bnx2_resolve_flow_ctrl(bp);
+			bnx2_set_mac_link(bp);
+		}
+	} else {
+		bnx2_resolve_flow_ctrl(bp);
+		bnx2_set_mac_link(bp);
+	}
+	return 0;
+}
+
+static int
+bnx2_setup_phy(struct bnx2 *bp, u8 port)
+__releases(&bp->phy_lock)
+__acquires(&bp->phy_lock)
+{
+	if (bp->loopback == MAC_LOOPBACK)
+		return 0;
+
+	if (bp->phy_flags & BNX2_PHY_FLAG_SERDES) {
+		return bnx2_setup_serdes_phy(bp, port);
+	}
+	else {
+		return bnx2_setup_copper_phy(bp);
+	}
+}
+
+static int
+bnx2_init_5709s_phy(struct bnx2 *bp, int reset_phy)
+{
+	u32 val;
+
+	bp->mii_bmcr = MII_BMCR + 0x10;
+	bp->mii_bmsr = MII_BMSR + 0x10;
+	bp->mii_bmsr1 = MII_BNX2_GP_TOP_AN_STATUS1;
+	bp->mii_adv = MII_ADVERTISE + 0x10;
+	bp->mii_lpa = MII_LPA + 0x10;
+	bp->mii_up1 = MII_BNX2_OVER1G_UP1;
+
+	bnx2_write_phy(bp, MII_BNX2_BLK_ADDR, MII_BNX2_BLK_ADDR_AER);
+	bnx2_write_phy(bp, MII_BNX2_AER_AER, MII_BNX2_AER_AER_AN_MMD);
+
+	bnx2_write_phy(bp, MII_BNX2_BLK_ADDR, MII_BNX2_BLK_ADDR_COMBO_IEEEB0);
+	if (reset_phy)
+		bnx2_reset_phy(bp);
+
+	bnx2_write_phy(bp, MII_BNX2_BLK_ADDR, MII_BNX2_BLK_ADDR_SERDES_DIG);
+
+	bnx2_read_phy(bp, MII_BNX2_SERDES_DIG_1000XCTL1, &val);
+	val &= ~MII_BNX2_SD_1000XCTL1_AUTODET;
+	val |= MII_BNX2_SD_1000XCTL1_FIBER;
+	/* NEMO temp. FIX */
+	if (bnx2_shmem_rd(bp, BNX2_SHARED_HW_CFG_CONFIG) & 0x80000000)
+		val |= (1 << 3);
+	bnx2_write_phy(bp, MII_BNX2_SERDES_DIG_1000XCTL1, val);
+
+	bnx2_write_phy(bp, MII_BNX2_BLK_ADDR, MII_BNX2_BLK_ADDR_OVER1G);
+	bnx2_read_phy(bp, MII_BNX2_OVER1G_UP1, &val);
+	if (bp->phy_flags & BNX2_PHY_FLAG_2_5G_CAPABLE)
+		val |= BCM5708S_UP1_2G5;
+	else
+		val &= ~BCM5708S_UP1_2G5;
+	bnx2_write_phy(bp, MII_BNX2_OVER1G_UP1, val);
+
+	bnx2_write_phy(bp, MII_BNX2_BLK_ADDR, MII_BNX2_BLK_ADDR_BAM_NXTPG);
+	bnx2_read_phy(bp, MII_BNX2_BAM_NXTPG_CTL, &val);
+	val |= MII_BNX2_NXTPG_CTL_T2 | MII_BNX2_NXTPG_CTL_BAM;
+	bnx2_write_phy(bp, MII_BNX2_BAM_NXTPG_CTL, val);
+
+	bnx2_write_phy(bp, MII_BNX2_BLK_ADDR, MII_BNX2_BLK_ADDR_CL73_USERB0);
+
+	val = MII_BNX2_CL73_BAM_EN | MII_BNX2_CL73_BAM_STA_MGR_EN |
+	      MII_BNX2_CL73_BAM_NP_AFT_BP_EN;
+	bnx2_write_phy(bp, MII_BNX2_CL73_BAM_CTL1, val);
+
+	bnx2_write_phy(bp, MII_BNX2_BLK_ADDR, MII_BNX2_BLK_ADDR_COMBO_IEEEB0);
+
+	return 0;
+}
+
+static int
+bnx2_init_5708s_phy(struct bnx2 *bp, int reset_phy)
+{
+	u32 val;
+
+	if (reset_phy)
+		bnx2_reset_phy(bp);
+
+	bp->mii_up1 = BCM5708S_UP1;
+
+	bnx2_write_phy(bp, BCM5708S_BLK_ADDR, BCM5708S_BLK_ADDR_DIG3);
+	bnx2_write_phy(bp, BCM5708S_DIG_3_0, BCM5708S_DIG_3_0_USE_IEEE);
+	bnx2_write_phy(bp, BCM5708S_BLK_ADDR, BCM5708S_BLK_ADDR_DIG);
+
+	bnx2_read_phy(bp, BCM5708S_1000X_CTL1, &val);
+	val |= BCM5708S_1000X_CTL1_FIBER_MODE | BCM5708S_1000X_CTL1_AUTODET_EN;
+	bnx2_write_phy(bp, BCM5708S_1000X_CTL1, val);
+
+	bnx2_read_phy(bp, BCM5708S_1000X_CTL2, &val);
+	val |= BCM5708S_1000X_CTL2_PLLEL_DET_EN;
+	bnx2_write_phy(bp, BCM5708S_1000X_CTL2, val);
+
+	if (bp->phy_flags & BNX2_PHY_FLAG_2_5G_CAPABLE) {
+		bnx2_read_phy(bp, BCM5708S_UP1, &val);
+		val |= BCM5708S_UP1_2G5;
+		bnx2_write_phy(bp, BCM5708S_UP1, val);
+	}
+
+	if ((CHIP_ID(bp) == CHIP_ID_5708_A0) ||
+	    (CHIP_ID(bp) == CHIP_ID_5708_B0) ||
+	    (CHIP_ID(bp) == CHIP_ID_5708_B1)) {
+		/* increase tx signal amplitude */
+		bnx2_write_phy(bp, BCM5708S_BLK_ADDR,
+			       BCM5708S_BLK_ADDR_TX_MISC);
+		bnx2_read_phy(bp, BCM5708S_TX_ACTL1, &val);
+		val &= ~BCM5708S_TX_ACTL1_DRIVER_VCM;
+		bnx2_write_phy(bp, BCM5708S_TX_ACTL1, val);
+		bnx2_write_phy(bp, BCM5708S_BLK_ADDR, BCM5708S_BLK_ADDR_DIG);
+	}
+
+	val = bnx2_shmem_rd(bp, BNX2_PORT_HW_CFG_CONFIG) &
+	      BNX2_PORT_HW_CFG_CFG_TXCTL3_MASK;
+
+	if (val) {
+		u32 is_backplane;
+
+		is_backplane = bnx2_shmem_rd(bp, BNX2_SHARED_HW_CFG_CONFIG);
+		if (is_backplane & BNX2_SHARED_HW_CFG_PHY_BACKPLANE) {
+			bnx2_write_phy(bp, BCM5708S_BLK_ADDR,
+				       BCM5708S_BLK_ADDR_TX_MISC);
+			bnx2_write_phy(bp, BCM5708S_TX_ACTL3, val);
+			bnx2_write_phy(bp, BCM5708S_BLK_ADDR,
+				       BCM5708S_BLK_ADDR_DIG);
+		}
+	}
+	return 0;
+}
+
+static int
+bnx2_init_5706s_phy(struct bnx2 *bp, int reset_phy)
+{
+	if (reset_phy)
+		bnx2_reset_phy(bp);
+
+	bp->phy_flags &= ~BNX2_PHY_FLAG_PARALLEL_DETECT;
+
+	if (CHIP_NUM(bp) == CHIP_NUM_5706)
+        	REG_WR(bp, BNX2_MISC_GP_HW_CTL0, 0x300);
+
+	if (bp->dev->mtu > 1500) {
+		u32 val;
+
+		/* Set extended packet length bit */
+		bnx2_write_phy(bp, 0x18, 0x7);
+		bnx2_read_phy(bp, 0x18, &val);
+		bnx2_write_phy(bp, 0x18, (val & 0xfff8) | 0x4000);
+
+		bnx2_write_phy(bp, 0x1c, 0x6c00);
+		bnx2_read_phy(bp, 0x1c, &val);
+		bnx2_write_phy(bp, 0x1c, (val & 0x3ff) | 0xec02);
+	}
+	else {
+		u32 val;
+
+		bnx2_write_phy(bp, 0x18, 0x7);
+		bnx2_read_phy(bp, 0x18, &val);
+		bnx2_write_phy(bp, 0x18, val & ~0x4007);
+
+		bnx2_write_phy(bp, 0x1c, 0x6c00);
+		bnx2_read_phy(bp, 0x1c, &val);
+		bnx2_write_phy(bp, 0x1c, (val & 0x3fd) | 0xec00);
+	}
+
+	return 0;
+}
+
+static int
+bnx2_init_copper_phy(struct bnx2 *bp, int reset_phy)
+{
+	u32 val;
+
+	if (reset_phy)
+		bnx2_reset_phy(bp);
+
+	if (bp->phy_flags & BNX2_PHY_FLAG_CRC_FIX) {
+		bnx2_write_phy(bp, 0x18, 0x0c00);
+		bnx2_write_phy(bp, 0x17, 0x000a);
+		bnx2_write_phy(bp, 0x15, 0x310b);
+		bnx2_write_phy(bp, 0x17, 0x201f);
+		bnx2_write_phy(bp, 0x15, 0x9506);
+		bnx2_write_phy(bp, 0x17, 0x401f);
+		bnx2_write_phy(bp, 0x15, 0x14e2);
+		bnx2_write_phy(bp, 0x18, 0x0400);
+	}
+
+	if (bp->phy_flags & BNX2_PHY_FLAG_DIS_EARLY_DAC) {
+		bnx2_write_phy(bp, MII_BNX2_DSP_ADDRESS,
+			       MII_BNX2_DSP_EXPAND_REG | 0x8);
+		bnx2_read_phy(bp, MII_BNX2_DSP_RW_PORT, &val);
+		val &= ~(1 << 8);
+		bnx2_write_phy(bp, MII_BNX2_DSP_RW_PORT, val);
+	}
+
+	if (bp->dev->mtu > 1500) {
+		/* Set extended packet length bit */
+		bnx2_write_phy(bp, 0x18, 0x7);
+		bnx2_read_phy(bp, 0x18, &val);
+		bnx2_write_phy(bp, 0x18, val | 0x4000);
+
+		bnx2_read_phy(bp, 0x10, &val);
+		bnx2_write_phy(bp, 0x10, val | 0x1);
+	}
+	else {
+		bnx2_write_phy(bp, 0x18, 0x7);
+		bnx2_read_phy(bp, 0x18, &val);
+		bnx2_write_phy(bp, 0x18, val & ~0x4007);
+
+		bnx2_read_phy(bp, 0x10, &val);
+		bnx2_write_phy(bp, 0x10, val & ~0x1);
+	}
+
+	/* ethernet@wirespeed */
+	bnx2_write_phy(bp, 0x18, 0x7007);
+	bnx2_read_phy(bp, 0x18, &val);
+	bnx2_write_phy(bp, 0x18, val | (1 << 15) | (1 << 4));
+	return 0;
+}
+
+
+static int
+bnx2_init_phy(struct bnx2 *bp, int reset_phy)
+__releases(&bp->phy_lock)
+__acquires(&bp->phy_lock)
+{
+	u32 val;
+	int rc = 0;
+
+	bp->phy_flags &= ~BNX2_PHY_FLAG_INT_MODE_MASK;
+	bp->phy_flags |= BNX2_PHY_FLAG_INT_MODE_LINK_READY;
+
+	bp->mii_bmcr = MII_BMCR;
+	bp->mii_bmsr = MII_BMSR;
+	bp->mii_bmsr1 = MII_BMSR;
+	bp->mii_adv = MII_ADVERTISE;
+	bp->mii_lpa = MII_LPA;
+
+        REG_WR(bp, BNX2_EMAC_ATTENTION_ENA, BNX2_EMAC_ATTENTION_ENA_LINK);
+
+	if (bp->phy_flags & BNX2_PHY_FLAG_REMOTE_PHY_CAP)
+		goto setup_phy;
+
+	bnx2_read_phy(bp, MII_PHYSID1, &val);
+	bp->phy_id = val << 16;
+	bnx2_read_phy(bp, MII_PHYSID2, &val);
+	bp->phy_id |= val & 0xffff;
+
+	if (bp->phy_flags & BNX2_PHY_FLAG_SERDES) {
+		if (CHIP_NUM(bp) == CHIP_NUM_5706)
+			rc = bnx2_init_5706s_phy(bp, reset_phy);
+		else if (CHIP_NUM(bp) == CHIP_NUM_5708)
+			rc = bnx2_init_5708s_phy(bp, reset_phy);
+		else if (CHIP_NUM(bp) == CHIP_NUM_5709)
+			rc = bnx2_init_5709s_phy(bp, reset_phy);
+	}
+	else {
+		rc = bnx2_init_copper_phy(bp, reset_phy);
+	}
+
+setup_phy:
+	if (!rc)
+		rc = bnx2_setup_phy(bp, bp->phy_port);
+
+	return rc;
+}
+
+static int
+bnx2_set_mac_loopback(struct bnx2 *bp)
+{
+	u32 mac_mode;
+
+	mac_mode = REG_RD(bp, BNX2_EMAC_MODE);
+	mac_mode &= ~BNX2_EMAC_MODE_PORT;
+	mac_mode |= BNX2_EMAC_MODE_MAC_LOOP | BNX2_EMAC_MODE_FORCE_LINK;
+	REG_WR(bp, BNX2_EMAC_MODE, mac_mode);
+	bp->link_up = 1;
+	return 0;
+}
+
+static int bnx2_test_link(struct bnx2 *);
+
+static int
+bnx2_set_phy_loopback(struct bnx2 *bp)
+{
+	u32 mac_mode;
+	int rc, i;
+
+	spin_lock_bh(&bp->phy_lock);
+	rc = bnx2_write_phy(bp, bp->mii_bmcr, BMCR_LOOPBACK | BMCR_FULLDPLX |
+			    BMCR_SPEED1000);
+	spin_unlock_bh(&bp->phy_lock);
+	if (rc)
+		return rc;
+
+	for (i = 0; i < 10; i++) {
+		if (bnx2_test_link(bp) == 0)
+			break;
+		bnx2_msleep(100);
+	}
+
+	mac_mode = REG_RD(bp, BNX2_EMAC_MODE);
+	mac_mode &= ~(BNX2_EMAC_MODE_PORT | BNX2_EMAC_MODE_HALF_DUPLEX |
+		      BNX2_EMAC_MODE_MAC_LOOP | BNX2_EMAC_MODE_FORCE_LINK |
+		      BNX2_EMAC_MODE_25G_MODE);
+
+	mac_mode |= BNX2_EMAC_MODE_PORT_GMII;
+	REG_WR(bp, BNX2_EMAC_MODE, mac_mode);
+	bp->link_up = 1;
+	return 0;
+}
+
+static void
+bnx2_dump_mcp_state(struct bnx2 *bp)
+{
+	struct net_device *dev = bp->dev;
+	u32 mcp_p0, mcp_p1;
+
+	netdev_err(dev, "<--- start MCP states dump --->\n");
+	if (CHIP_NUM(bp) == CHIP_NUM_5709) {
+		mcp_p0 = BNX2_MCP_STATE_P0;
+		mcp_p1 = BNX2_MCP_STATE_P1;
+	} else {
+		mcp_p0 = BNX2_MCP_STATE_P0_5708;
+		mcp_p1 = BNX2_MCP_STATE_P1_5708;
+	}
+	netdev_err(dev, "DEBUG: MCP_STATE_P0[%08x] MCP_STATE_P1[%08x]\n",
+		   bnx2_reg_rd_ind(bp, mcp_p0), bnx2_reg_rd_ind(bp, mcp_p1));
+	netdev_err(dev, "DEBUG: MCP mode[%08x] state[%08x] evt_mask[%08x]\n",
+		   bnx2_reg_rd_ind(bp, BNX2_MCP_CPU_MODE),
+		   bnx2_reg_rd_ind(bp, BNX2_MCP_CPU_STATE),
+		   bnx2_reg_rd_ind(bp, BNX2_MCP_CPU_EVENT_MASK));
+	netdev_err(dev, "DEBUG: pc[%08x] pc[%08x] instr[%08x]\n",
+		   bnx2_reg_rd_ind(bp, BNX2_MCP_CPU_PROGRAM_COUNTER),
+		   bnx2_reg_rd_ind(bp, BNX2_MCP_CPU_PROGRAM_COUNTER),
+		   bnx2_reg_rd_ind(bp, BNX2_MCP_CPU_INSTRUCTION));
+	netdev_err(dev, "DEBUG: shmem states:\n");
+	netdev_err(dev, "DEBUG: drv_mb[%08x] fw_mb[%08x] link_status[%08x]",
+		   bnx2_shmem_rd(bp, BNX2_DRV_MB),
+		   bnx2_shmem_rd(bp, BNX2_FW_MB),
+		   bnx2_shmem_rd(bp, BNX2_LINK_STATUS));
+	pr_cont(" drv_pulse_mb[%08x]\n", bnx2_shmem_rd(bp, BNX2_DRV_PULSE_MB));
+	netdev_err(dev, "DEBUG: dev_info_signature[%08x] reset_type[%08x]",
+		   bnx2_shmem_rd(bp, BNX2_DEV_INFO_SIGNATURE),
+		   bnx2_shmem_rd(bp, BNX2_BC_STATE_RESET_TYPE));
+	pr_cont(" condition[%08x]\n",
+		bnx2_shmem_rd(bp, BNX2_BC_STATE_CONDITION));
+	DP_SHMEM_LINE(bp, 0x3cc);
+	DP_SHMEM_LINE(bp, 0x3dc);
+	DP_SHMEM_LINE(bp, 0x3ec);
+	netdev_err(dev, "DEBUG: 0x3fc[%08x]\n", bnx2_shmem_rd(bp, 0x3fc));
+	netdev_err(dev, "<--- end MCP states dump --->\n");
+}
+
+static int
+bnx2_fw_sync(struct bnx2 *bp, u32 msg_data, int ack, int silent)
+{
+	int i;
+	u32 val;
+
+	bp->fw_wr_seq++;
+	msg_data |= bp->fw_wr_seq;
+
+	bnx2_shmem_wr(bp, BNX2_DRV_MB, msg_data);
+
+	if (!ack)
+		return 0;
+
+	/* wait for an acknowledgement. */
+	for (i = 0; i < (BNX2_FW_ACK_TIME_OUT_MS / 10); i++) {
+		bnx2_msleep(10);
+
+		val = bnx2_shmem_rd(bp, BNX2_FW_MB);
+
+		if ((val & BNX2_FW_MSG_ACK) == (msg_data & BNX2_DRV_MSG_SEQ))
+			break;
+	}
+	if ((msg_data & BNX2_DRV_MSG_DATA) == BNX2_DRV_MSG_DATA_WAIT0)
+		return 0;
+
+	/* If we timed out, inform the firmware that this is the case. */
+	if ((val & BNX2_FW_MSG_ACK) != (msg_data & BNX2_DRV_MSG_SEQ)) {
+		msg_data &= ~BNX2_DRV_MSG_CODE;
+		msg_data |= BNX2_DRV_MSG_CODE_FW_TIMEOUT;
+
+		bnx2_shmem_wr(bp, BNX2_DRV_MB, msg_data);
+		if (!silent) {
+			pr_err("fw sync timeout, reset code = %x\n", msg_data);
+			bnx2_dump_mcp_state(bp);
+		}
+
+		return -EBUSY;
+	}
+
+	if ((val & BNX2_FW_MSG_STATUS_MASK) != BNX2_FW_MSG_STATUS_OK)
+		return -EIO;
+
+	return 0;
+}
+
+static int
+bnx2_init_5709_context(struct bnx2 *bp)
+{
+	int i, ret = 0;
+	u32 val;
+
+	val = BNX2_CTX_COMMAND_ENABLED | BNX2_CTX_COMMAND_MEM_INIT | (1 << 12);
+	val |= (BCM_PAGE_BITS - 8) << 16;
+	REG_WR(bp, BNX2_CTX_COMMAND, val);
+	for (i = 0; i < 10; i++) {
+		val = REG_RD(bp, BNX2_CTX_COMMAND);
+		if (!(val & BNX2_CTX_COMMAND_MEM_INIT))
+			break;
+		udelay(2);
+	}
+	if (val & BNX2_CTX_COMMAND_MEM_INIT)
+		return -EBUSY;
+
+	for (i = 0; i < bp->ctx_pages; i++) {
+		int j;
+
+		if (bp->ctx_blk[i])
+			memset(bp->ctx_blk[i], 0, BCM_PAGE_SIZE);
+		else
+			return -ENOMEM;
+
+		REG_WR(bp, BNX2_CTX_HOST_PAGE_TBL_DATA0,
+		       (bp->ctx_blk_mapping[i] & 0xffffffff) |
+		       BNX2_CTX_HOST_PAGE_TBL_DATA0_VALID);
+		REG_WR(bp, BNX2_CTX_HOST_PAGE_TBL_DATA1,
+		       (u64) bp->ctx_blk_mapping[i] >> 32);
+		REG_WR(bp, BNX2_CTX_HOST_PAGE_TBL_CTRL, i |
+		       BNX2_CTX_HOST_PAGE_TBL_CTRL_WRITE_REQ);
+		for (j = 0; j < 10; j++) {
+
+			val = REG_RD(bp, BNX2_CTX_HOST_PAGE_TBL_CTRL);
+			if (!(val & BNX2_CTX_HOST_PAGE_TBL_CTRL_WRITE_REQ))
+				break;
+			udelay(5);
+		}
+		if (val & BNX2_CTX_HOST_PAGE_TBL_CTRL_WRITE_REQ) {
+			ret = -EBUSY;
+			break;
+		}
+	}
+	return ret;
+}
+
+static void
+bnx2_init_context(struct bnx2 *bp)
+{
+	u32 vcid;
+
+	vcid = 96;
+	while (vcid) {
+		u32 vcid_addr, pcid_addr, offset;
+		int i;
+
+		vcid--;
+
+		if (CHIP_ID(bp) == CHIP_ID_5706_A0) {
+			u32 new_vcid;
+
+			vcid_addr = GET_PCID_ADDR(vcid);
+			if (vcid & 0x8) {
+				new_vcid = 0x60 + (vcid & 0xf0) + (vcid & 0x7);
+			}
+			else {
+				new_vcid = vcid;
+			}
+			pcid_addr = GET_PCID_ADDR(new_vcid);
+		}
+		else {
+	    		vcid_addr = GET_CID_ADDR(vcid);
+			pcid_addr = vcid_addr;
+		}
+
+		for (i = 0; i < (CTX_SIZE / PHY_CTX_SIZE); i++) {
+			vcid_addr += (i << PHY_CTX_SHIFT);
+			pcid_addr += (i << PHY_CTX_SHIFT);
+
+			REG_WR(bp, BNX2_CTX_VIRT_ADDR, vcid_addr);
+			REG_WR(bp, BNX2_CTX_PAGE_TBL, pcid_addr);
+
+			/* Zero out the context. */
+			for (offset = 0; offset < PHY_CTX_SIZE; offset += 4)
+				bnx2_ctx_wr(bp, vcid_addr, offset, 0);
+		}
+	}
+}
+
+static int
+bnx2_alloc_bad_rbuf(struct bnx2 *bp)
+{
+	u16 *good_mbuf;
+	u32 good_mbuf_cnt;
+	u32 val;
+
+	good_mbuf = kmalloc(512 * sizeof(u16), GFP_KERNEL);
+	if (good_mbuf == NULL) {
+		pr_err("Failed to allocate memory in %s\n", __func__);
+		return -ENOMEM;
+	}
+
+	REG_WR(bp, BNX2_MISC_ENABLE_SET_BITS,
+		BNX2_MISC_ENABLE_SET_BITS_RX_MBUF_ENABLE);
+
+	good_mbuf_cnt = 0;
+
+	/* Allocate a bunch of mbufs and save the good ones in an array. */
+	val = bnx2_reg_rd_ind(bp, BNX2_RBUF_STATUS1);
+	while (val & BNX2_RBUF_STATUS1_FREE_COUNT) {
+		bnx2_reg_wr_ind(bp, BNX2_RBUF_COMMAND,
+				BNX2_RBUF_COMMAND_ALLOC_REQ);
+
+		val = bnx2_reg_rd_ind(bp, BNX2_RBUF_FW_BUF_ALLOC);
+
+		val &= BNX2_RBUF_FW_BUF_ALLOC_VALUE;
+
+		/* The addresses with Bit 9 set are bad memory blocks. */
+		if (!(val & (1 << 9))) {
+			good_mbuf[good_mbuf_cnt] = (u16) val;
+			good_mbuf_cnt++;
+		}
+
+		val = bnx2_reg_rd_ind(bp, BNX2_RBUF_STATUS1);
+	}
+
+	/* Free the good ones back to the mbuf pool thus discarding
+	 * all the bad ones. */
+	while (good_mbuf_cnt) {
+		good_mbuf_cnt--;
+
+		val = good_mbuf[good_mbuf_cnt];
+		val = (val << 9) | val | 1;
+
+		bnx2_reg_wr_ind(bp, BNX2_RBUF_FW_BUF_FREE, val);
+	}
+	kfree(good_mbuf);
+	return 0;
+}
+
+static void
+bnx2_set_mac_addr(struct bnx2 *bp, u8 *mac_addr, u32 pos)
+{
+	u32 val;
+
+	val = (mac_addr[0] << 8) | mac_addr[1];
+
+	REG_WR(bp, BNX2_EMAC_MAC_MATCH0 + (pos * 8), val);
+
+	val = (mac_addr[2] << 24) | (mac_addr[3] << 16) |
+		(mac_addr[4] << 8) | mac_addr[5];
+
+	REG_WR(bp, BNX2_EMAC_MAC_MATCH1 + (pos * 8), val);
+}
+
+static inline int
+bnx2_alloc_rx_page(struct bnx2 *bp, struct bnx2_rx_ring_info *rxr, u16 index, gfp_t gfp)
+{
+	dma_addr_t mapping;
+	struct sw_pg *rx_pg = &rxr->rx_pg_ring[index];
+	struct rx_bd *rxbd =
+		&rxr->rx_pg_desc_ring[RX_RING(index)][RX_IDX(index)];
+	struct page *page = alloc_page(gfp);
+
+	if (!page)
+		return -ENOMEM;
+#if (LINUX_VERSION_CODE >= 0x02061b)
+	mapping = dma_map_page(&bp->pdev->dev, page, 0, PAGE_SIZE,
+			       PCI_DMA_FROMDEVICE);
+	if (dma_mapping_error(&bp->pdev->dev, mapping)) {
+#else
+	mapping = pci_map_page(bp->pdev, page, 0, PAGE_SIZE,
+			       PCI_DMA_FROMDEVICE);
+	if (pci_dma_mapping_error(mapping)) {
+#endif
+		__free_page(page);
+		return -EIO;
+	}
+
+	rx_pg->page = page;
+	dma_unmap_addr_set(rx_pg, mapping, mapping);
+	rxbd->rx_bd_haddr_hi = (u64) mapping >> 32;
+	rxbd->rx_bd_haddr_lo = (u64) mapping & 0xffffffff;
+	return 0;
+}
+
+static void
+bnx2_free_rx_page(struct bnx2 *bp, struct bnx2_rx_ring_info *rxr, u16 index)
+{
+	struct sw_pg *rx_pg = &rxr->rx_pg_ring[index];
+	struct page *page = rx_pg->page;
+
+	if (!page)
+		return;
+
+#if (LINUX_VERSION_CODE >= 0x02061b)
+	dma_unmap_page(&bp->pdev->dev, dma_unmap_addr(rx_pg, mapping),
+		       PAGE_SIZE, PCI_DMA_FROMDEVICE);
+#else
+	pci_unmap_page(bp->pdev, dma_unmap_addr(rx_pg, mapping), PAGE_SIZE,
+		       PCI_DMA_FROMDEVICE);
+#endif
+
+	__free_page(page);
+	rx_pg->page = NULL;
+}
+
+static inline int
+bnx2_alloc_rx_skb(struct bnx2 *bp, struct bnx2_rx_ring_info *rxr, u16 index, gfp_t gfp)
+{
+	struct sk_buff *skb;
+	struct sw_bd *rx_buf = &rxr->rx_buf_ring[index];
+	dma_addr_t mapping;
+	struct rx_bd *rxbd = &rxr->rx_desc_ring[RX_RING(index)][RX_IDX(index)];
+	unsigned long align;
+
+	skb = __netdev_alloc_skb(bp->dev, bp->rx_buf_size, gfp);
+	if (skb == NULL) {
+		return -ENOMEM;
+	}
+
+	if (unlikely((align = (unsigned long) skb->data & (BNX2_RX_ALIGN - 1))))
+		skb_reserve(skb, BNX2_RX_ALIGN - align);
+
+#if (LINUX_VERSION_CODE >= 0x02061b)
+	mapping = dma_map_single(&bp->pdev->dev, skb->data, bp->rx_buf_use_size,
+				 PCI_DMA_FROMDEVICE);
+	if (dma_mapping_error(&bp->pdev->dev, mapping)) {
+#else
+	mapping = pci_map_single(bp->pdev, skb->data, bp->rx_buf_use_size,
+		PCI_DMA_FROMDEVICE);
+	if (pci_dma_mapping_error(mapping)) {
+#endif
+		dev_kfree_skb(skb);
+		return -EIO;
+	}
+
+	rx_buf->skb = skb;
+	rx_buf->desc = (struct l2_fhdr *) skb->data;
+	dma_unmap_addr_set(rx_buf, mapping, mapping);
+
+	rxbd->rx_bd_haddr_hi = (u64) mapping >> 32;
+	rxbd->rx_bd_haddr_lo = (u64) mapping & 0xffffffff;
+
+	rxr->rx_prod_bseq += bp->rx_buf_use_size;
+
+	return 0;
+}
+
+static int
+bnx2_phy_event_is_set(struct bnx2 *bp, struct bnx2_napi *bnapi, u32 event)
+{
+	struct status_block *sblk = bnapi->status_blk.msi;
+	u32 new_link_state, old_link_state;
+	int is_set = 1;
+
+	new_link_state = sblk->status_attn_bits & event;
+	old_link_state = sblk->status_attn_bits_ack & event;
+	if (new_link_state != old_link_state) {
+		if (new_link_state)
+			REG_WR(bp, BNX2_PCICFG_STATUS_BIT_SET_CMD, event);
+		else
+			REG_WR(bp, BNX2_PCICFG_STATUS_BIT_CLEAR_CMD, event);
+	} else
+		is_set = 0;
+
+	return is_set;
+}
+
+static void
+bnx2_phy_int(struct bnx2 *bp, struct bnx2_napi *bnapi)
+{
+	spin_lock(&bp->phy_lock);
+
+	if (bnx2_phy_event_is_set(bp, bnapi, STATUS_ATTN_BITS_LINK_STATE))
+		bnx2_set_link(bp);
+	if (bnx2_phy_event_is_set(bp, bnapi, STATUS_ATTN_BITS_TIMER_ABORT))
+		bnx2_set_remote_link(bp);
+
+	spin_unlock(&bp->phy_lock);
+
+}
+
+static inline u16
+bnx2_get_hw_tx_cons(struct bnx2_napi *bnapi)
+{
+	u16 cons;
+
+	/* Tell compiler that status block fields can change. */
+	barrier();
+	cons = *bnapi->hw_tx_cons_ptr;
+	barrier();
+	if (unlikely((cons & MAX_TX_DESC_CNT) == MAX_TX_DESC_CNT))
+		cons++;
+	return cons;
+}
+
+static int
+#if defined(__VMKLNX__)
+bnx2_tx_int(struct bnx2 *bp, struct bnx2_napi *bnapi, int budget,
+	    int check_queue)
+#else	    
+bnx2_tx_int(struct bnx2 *bp, struct bnx2_napi *bnapi, int budget)
+#endif
+{
+	struct bnx2_tx_ring_info *txr = &bnapi->tx_ring;
+	u16 hw_cons, sw_cons, sw_ring_cons;
+#ifndef BCM_HAVE_MULTI_QUEUE
+	int tx_pkt = 0;
+#else
+	int tx_pkt = 0, index;
+	struct netdev_queue *txq;
+
+	index = (bnapi - bp->bnx2_napi);
+	txq = netdev_get_tx_queue(bp->dev, index);
+#endif
+
+	hw_cons = bnx2_get_hw_tx_cons(bnapi);
+	sw_cons = txr->tx_cons;
+
+	while (sw_cons != hw_cons) {
+		struct sw_tx_bd *tx_buf;
+		struct sk_buff *skb;
+		int i, last;
+
+		sw_ring_cons = TX_RING_IDX(sw_cons);
+
+		tx_buf = &txr->tx_buf_ring[sw_ring_cons];
+		skb = tx_buf->skb;
+
+		/* prefetch skb_end_pointer() to speedup skb_shinfo(skb) */
+		prefetch(&skb->end);
+
+#ifdef BCM_TSO 
+		/* partial BD completions possible with TSO packets */
+		if (tx_buf->is_gso) {
+			u16 last_idx, last_ring_idx;
+
+			last_idx = sw_cons + tx_buf->nr_frags + 1;
+			last_ring_idx = sw_ring_cons + tx_buf->nr_frags + 1;
+			if (unlikely(last_ring_idx >= MAX_TX_DESC_CNT)) {
+				last_idx++;
+			}
+			if (((s16) ((s16) last_idx - (s16) hw_cons)) > 0) {
+				break;
+			}
+		}
+#endif
+#if (LINUX_VERSION_CODE >= 0x02061b)
+		dma_unmap_single(&bp->pdev->dev, dma_unmap_addr(tx_buf, mapping),
+			skb_headlen(skb), PCI_DMA_TODEVICE);
+#else
+		pci_unmap_single(bp->pdev, dma_unmap_addr(tx_buf, mapping),
+			skb_headlen(skb), PCI_DMA_TODEVICE);
+#endif
+
+		tx_buf->skb = NULL;
+		last = tx_buf->nr_frags;
+
+		for (i = 0; i < last; i++) {
+			sw_cons = NEXT_TX_BD(sw_cons);
+
+#if (LINUX_VERSION_CODE >= 0x02061b)
+			dma_unmap_page(&bp->pdev->dev,
+#else
+			pci_unmap_page(bp->pdev,
+#endif
+				dma_unmap_addr(
+					&txr->tx_buf_ring[TX_RING_IDX(sw_cons)],
+					mapping),
+				skb_shinfo(skb)->frags[i].size,
+				PCI_DMA_TODEVICE);
+		}
+
+		sw_cons = NEXT_TX_BD(sw_cons);
+
+		dev_kfree_skb(skb);
+#if defined(BNX2_ENABLE_NETQUEUE)
+		bnapi->stats.tx_packets++;
+		bnapi->stats.tx_bytes += skb->len;
+		bnapi->tx_packets_processed++;
+		wmb();
+#endif
+		tx_pkt++;
+		if (tx_pkt == budget)
+			break;
+
+		if (hw_cons == sw_cons)
+			hw_cons = bnx2_get_hw_tx_cons(bnapi);
+	}
+
+	txr->hw_tx_cons = hw_cons;
+	txr->tx_cons = sw_cons;
+
+	/* Need to make the tx_cons update visible to bnx2_start_xmit()
+	 * before checking for netif_tx_queue_stopped().  Without the
+	 * memory barrier, there is a small possibility that bnx2_start_xmit()
+	 * will miss it and cause the queue to be stopped forever.
+	 */
+	smp_mb();
+
+#if defined(BNX2_ENABLE_NETQUEUE)
+	if ((!check_queue) || (bp->netq_state & BNX2_NETQ_SUSPENDED))
+		return tx_pkt;
+#endif		
+
+#ifndef BCM_HAVE_MULTI_QUEUE
+	if (unlikely(netif_queue_stopped(bp->dev)) &&
+		     (bnx2_tx_avail(bp, txr) > bp->tx_wake_thresh)) {
+		netif_tx_lock(bp->dev);
+		if ((netif_queue_stopped(bp->dev)) &&
+		    (bnx2_tx_avail(bp, txr) > bp->tx_wake_thresh))
+			netif_wake_queue(bp->dev);
+		netif_tx_unlock(bp->dev);
+	}
+#else
+	if (unlikely(netif_tx_queue_stopped(txq)) &&
+		     (bnx2_tx_avail(bp, txr) > bp->tx_wake_thresh)) {
+		__netif_tx_lock(txq, smp_processor_id());
+		if ((netif_tx_queue_stopped(txq)) &&
+		    (bnx2_tx_avail(bp, txr) > bp->tx_wake_thresh))
+			netif_tx_wake_queue(txq);
+		__netif_tx_unlock(txq);
+	}
+#endif
+	return tx_pkt;
+}
+
+static void
+bnx2_reuse_rx_skb_pages(struct bnx2 *bp, struct bnx2_rx_ring_info *rxr,
+			struct sk_buff *skb, int count)
+{
+	struct sw_pg *cons_rx_pg, *prod_rx_pg;
+	struct rx_bd *cons_bd, *prod_bd;
+	int i;
+	u16 hw_prod, prod;
+	u16 cons = rxr->rx_pg_cons;
+
+	cons_rx_pg = &rxr->rx_pg_ring[cons];
+
+	/* The caller was unable to allocate a new page to replace the
+	 * last one in the frags array, so we need to recycle that page
+	 * and then free the skb.
+	 */
+	if (skb) {
+		struct page *page;
+		struct skb_shared_info *shinfo;
+
+		shinfo = skb_shinfo(skb);
+		shinfo->nr_frags--;
+		page = shinfo->frags[shinfo->nr_frags].page;
+		shinfo->frags[shinfo->nr_frags].page = NULL;
+
+		cons_rx_pg->page = page;
+		dev_kfree_skb(skb);
+	}
+
+	hw_prod = rxr->rx_pg_prod;
+
+	for (i = 0; i < count; i++) {
+		prod = RX_PG_RING_IDX(hw_prod);
+
+		prod_rx_pg = &rxr->rx_pg_ring[prod];
+		cons_rx_pg = &rxr->rx_pg_ring[cons];
+		cons_bd = &rxr->rx_pg_desc_ring[RX_RING(cons)][RX_IDX(cons)];
+		prod_bd = &rxr->rx_pg_desc_ring[RX_RING(prod)][RX_IDX(prod)];
+
+		if (prod != cons) {
+			prod_rx_pg->page = cons_rx_pg->page;
+			cons_rx_pg->page = NULL;
+			dma_unmap_addr_set(prod_rx_pg, mapping,
+				dma_unmap_addr(cons_rx_pg, mapping));
+
+			prod_bd->rx_bd_haddr_hi = cons_bd->rx_bd_haddr_hi;
+			prod_bd->rx_bd_haddr_lo = cons_bd->rx_bd_haddr_lo;
+
+		}
+		cons = RX_PG_RING_IDX(NEXT_RX_BD(cons));
+		hw_prod = NEXT_RX_BD(hw_prod);
+	}
+	rxr->rx_pg_prod = hw_prod;
+	rxr->rx_pg_cons = cons;
+}
+
+static inline void
+bnx2_reuse_rx_skb(struct bnx2 *bp, struct bnx2_rx_ring_info *rxr,
+		  struct sk_buff *skb, u16 cons, u16 prod)
+{
+	struct sw_bd *cons_rx_buf, *prod_rx_buf;
+	struct rx_bd *cons_bd, *prod_bd;
+
+	cons_rx_buf = &rxr->rx_buf_ring[cons];
+	prod_rx_buf = &rxr->rx_buf_ring[prod];
+
+#if (LINUX_VERSION_CODE >= 0x02061b)
+	dma_sync_single_for_device(&bp->pdev->dev,
+#else
+	pci_dma_sync_single_for_device(bp->pdev,
+#endif
+ 		dma_unmap_addr(cons_rx_buf, mapping),
+ 		BNX2_RX_OFFSET + BNX2_RX_COPY_THRESH, PCI_DMA_FROMDEVICE);
+
+	rxr->rx_prod_bseq += bp->rx_buf_use_size;
+
+	prod_rx_buf->skb = skb;
+	prod_rx_buf->desc = (struct l2_fhdr *) skb->data;
+
+	if (cons == prod)
+		return;
+
+	dma_unmap_addr_set(prod_rx_buf, mapping,
+			dma_unmap_addr(cons_rx_buf, mapping));
+
+	cons_bd = &rxr->rx_desc_ring[RX_RING(cons)][RX_IDX(cons)];
+	prod_bd = &rxr->rx_desc_ring[RX_RING(prod)][RX_IDX(prod)];
+	prod_bd->rx_bd_haddr_hi = cons_bd->rx_bd_haddr_hi;
+	prod_bd->rx_bd_haddr_lo = cons_bd->rx_bd_haddr_lo;
+}
+
+static int
+bnx2_rx_skb(struct bnx2 *bp, struct bnx2_rx_ring_info *rxr, struct sk_buff *skb,
+	    unsigned int len, unsigned int hdr_len, dma_addr_t dma_addr,
+	    u32 ring_idx)
+{
+	int err;
+	u16 prod = ring_idx & 0xffff;
+
+	err = bnx2_alloc_rx_skb(bp, rxr, prod, GFP_ATOMIC);
+	if (unlikely(err)) {
+		bnx2_reuse_rx_skb(bp, rxr, skb, (u16) (ring_idx >> 16), prod);
+		if (hdr_len) {
+			unsigned int raw_len = len + 4;
+			int pages = PAGE_ALIGN(raw_len - hdr_len) >> PAGE_SHIFT;
+
+			bnx2_reuse_rx_skb_pages(bp, rxr, NULL, pages);
+		}
+		return err;
+	}
+
+	skb_reserve(skb, BNX2_RX_OFFSET);
+#if (LINUX_VERSION_CODE >= 0x02061b)
+	dma_unmap_single(&bp->pdev->dev, dma_addr, bp->rx_buf_use_size,
+			 PCI_DMA_FROMDEVICE);
+#else
+	pci_unmap_single(bp->pdev, dma_addr, bp->rx_buf_use_size,
+			 PCI_DMA_FROMDEVICE);
+#endif
+
+	if (hdr_len == 0) {
+		skb_put(skb, len);
+		return 0;
+	} else {
+		unsigned int i, frag_len, frag_size, pages;
+		struct sw_pg *rx_pg;
+		u16 pg_cons = rxr->rx_pg_cons;
+		u16 pg_prod = rxr->rx_pg_prod;
+
+		frag_size = len + 4 - hdr_len;
+		pages = PAGE_ALIGN(frag_size) >> PAGE_SHIFT;
+		skb_put(skb, hdr_len);
+
+		for (i = 0; i < pages; i++) {
+			dma_addr_t mapping_old;
+
+			frag_len = min(frag_size, (unsigned int) PAGE_SIZE);
+			if (unlikely(frag_len <= 4)) {
+				unsigned int tail = 4 - frag_len;
+
+				rxr->rx_pg_cons = pg_cons;
+				rxr->rx_pg_prod = pg_prod;
+				bnx2_reuse_rx_skb_pages(bp, rxr, NULL,
+							pages - i);
+				skb->len -= tail;
+				if (i == 0) {
+					skb->tail -= tail;
+				} else {
+					skb_frag_t *frag =
+						&skb_shinfo(skb)->frags[i - 1];
+					frag->size -= tail;
+					skb->data_len -= tail;
+				}
+				return 0;
+			}
+			rx_pg = &rxr->rx_pg_ring[pg_cons];
+
+			/* Don't unmap yet.  If we're unable to allocate a new
+			 * page, we need to recycle the page and the DMA addr.
+			 */
+			mapping_old = dma_unmap_addr(rx_pg, mapping);
+			if (i == pages - 1)
+				frag_len -= 4;
+
+			bnx2_skb_fill_page_desc(skb, i, rx_pg->page, 0,
+						frag_len);
+			rx_pg->page = NULL;
+
+			err = bnx2_alloc_rx_page(bp, rxr,
+						 RX_PG_RING_IDX(pg_prod),
+						 GFP_ATOMIC);
+			if (unlikely(err)) {
+				rxr->rx_pg_cons = pg_cons;
+				rxr->rx_pg_prod = pg_prod;
+				bnx2_reuse_rx_skb_pages(bp, rxr, skb,
+							pages - i);
+				return err;
+			}
+
+#if (LINUX_VERSION_CODE >= 0x02061b)
+			dma_unmap_page(&bp->pdev->dev, mapping_old,
+ 				       PAGE_SIZE, PCI_DMA_FROMDEVICE);
+#else
+			pci_unmap_page(bp->pdev, mapping_old,
+				       PAGE_SIZE, PCI_DMA_FROMDEVICE);
+#endif
+
+			frag_size -= frag_len;
+			skb->data_len += frag_len;
+			skb->truesize += PAGE_SIZE;
+			skb->len += frag_len;
+
+			pg_prod = NEXT_RX_BD(pg_prod);
+			pg_cons = RX_PG_RING_IDX(NEXT_RX_BD(pg_cons));
+		}
+		rxr->rx_pg_prod = pg_prod;
+		rxr->rx_pg_cons = pg_cons;
+	}
+	return 0;
+}
+
+static inline u16
+bnx2_get_hw_rx_cons(struct bnx2_napi *bnapi)
+{
+	u16 cons;
+
+	/* Tell compiler that status block fields can change. */
+	barrier();
+	cons = *bnapi->hw_rx_cons_ptr;
+	barrier();
+	if (unlikely((cons & MAX_RX_DESC_CNT) == MAX_RX_DESC_CNT))
+		cons++;
+	return cons;
+}
+
+static int
+bnx2_rx_int(struct bnx2 *bp, struct bnx2_napi *bnapi, int budget)
+{
+	struct bnx2_rx_ring_info *rxr = &bnapi->rx_ring;
+	u16 hw_cons, sw_cons, sw_ring_cons, sw_prod, sw_ring_prod;
+	struct l2_fhdr *rx_hdr;
+	int rx_pkt = 0, pg_ring_used = 0;
+#if defined(BNX2_ENABLE_NETQUEUE)
+	int index = (bnapi - bp->bnx2_napi);
+#endif
+
+	hw_cons = bnx2_get_hw_rx_cons(bnapi);
+	sw_cons = rxr->rx_cons;
+	sw_prod = rxr->rx_prod;
+
+	/* Memory barrier necessary as speculative reads of the rx
+	 * buffer can be ahead of the index in the status block
+	 */
+	rmb();
+	while (sw_cons != hw_cons) {
+		unsigned int len, hdr_len;
+		u32 status;
+		struct sw_bd *rx_buf, *next_rx_buf;
+		struct sk_buff *skb;
+		dma_addr_t dma_addr;
+		u16 vtag = 0;
+		int hw_vlan __maybe_unused = 0;
+
+		sw_ring_cons = RX_RING_IDX(sw_cons);
+		sw_ring_prod = RX_RING_IDX(sw_prod);
+
+		rx_buf = &rxr->rx_buf_ring[sw_ring_cons];
+		skb = rx_buf->skb;
+		prefetchw(skb);
+
+		next_rx_buf =
+			&rxr->rx_buf_ring[RX_RING_IDX(NEXT_RX_BD(sw_cons))];
+		prefetch(next_rx_buf->desc);
+
+		rx_buf->skb = NULL;
+
+		dma_addr = dma_unmap_addr(rx_buf, mapping);
+
+#if (LINUX_VERSION_CODE >= 0x02061b)
+		dma_sync_single_for_cpu(&bp->pdev->dev, dma_addr,
+#else
+		pci_dma_sync_single_for_cpu(bp->pdev, dma_addr,
+#endif
+			BNX2_RX_OFFSET + BNX2_RX_COPY_THRESH,
+			PCI_DMA_FROMDEVICE);
+
+		rx_hdr = rx_buf->desc;
+		len = rx_hdr->l2_fhdr_pkt_len;
+		status = rx_hdr->l2_fhdr_status;
+
+		hdr_len = 0;
+		if (status & L2_FHDR_STATUS_SPLIT) {
+			hdr_len = rx_hdr->l2_fhdr_ip_xsum;
+			pg_ring_used = 1;
+		} else if (len > bp->rx_jumbo_thresh) {
+			hdr_len = bp->rx_jumbo_thresh;
+			pg_ring_used = 1;
+		}
+
+		if (unlikely(status & (L2_FHDR_ERRORS_BAD_CRC |
+				       L2_FHDR_ERRORS_PHY_DECODE |
+				       L2_FHDR_ERRORS_ALIGNMENT |
+				       L2_FHDR_ERRORS_TOO_SHORT |
+				       L2_FHDR_ERRORS_GIANT_FRAME))) {
+
+#if defined(BNX2_ENABLE_NETQUEUE)
+			bnapi->stats.rx_errors++;
+
+			if (status & L2_FHDR_ERRORS_BAD_CRC)
+				bnapi->stats.rx_crc_errors++;
+
+			if (status &
+			     (L2_FHDR_ERRORS_TOO_SHORT |
+			      L2_FHDR_ERRORS_GIANT_FRAME))
+				bnapi->stats.rx_frame_errors++;
+#endif
+
+			bnx2_reuse_rx_skb(bp, rxr, skb, sw_ring_cons,
+					  sw_ring_prod);
+			if (pg_ring_used) {
+				int pages;
+
+				pages = PAGE_ALIGN(len - hdr_len) >> PAGE_SHIFT;
+
+				bnx2_reuse_rx_skb_pages(bp, rxr, NULL, pages);
+			}
+			goto next_rx;
+		}
+
+		len -= 4;
+
+		if (len <= bp->rx_copy_thresh) {
+			struct sk_buff *new_skb;
+
+			new_skb = netdev_alloc_skb(bp->dev, len + 6);
+			if (new_skb == NULL) {
+				bnx2_reuse_rx_skb(bp, rxr, skb, sw_ring_cons,
+						  sw_ring_prod);
+				goto next_rx;
+			}
+
+			/* aligned copy */
+#if (LINUX_VERSION_CODE >= 0x20616)
+			skb_copy_from_linear_data_offset(skb,
+							 BNX2_RX_OFFSET - 6,
+				      new_skb->data, len + 6);
+#else
+			memcpy(new_skb->data, skb->data + BNX2_RX_OFFSET - 6,
+			       len + 6);
+#endif
+
+			skb_reserve(new_skb, 6);
+			skb_put(new_skb, len);
+
+			bnx2_reuse_rx_skb(bp, rxr, skb,
+				sw_ring_cons, sw_ring_prod);
+
+			skb = new_skb;
+		} else if (unlikely(bnx2_rx_skb(bp, rxr, skb, len, hdr_len,
+			   dma_addr, (sw_ring_cons << 16) | sw_ring_prod)))
+			goto next_rx;
+
+		if ((status & L2_FHDR_STATUS_L2_VLAN_TAG) &&
+		    !(bp->rx_mode & BNX2_EMAC_RX_MODE_KEEP_VLAN_TAG)) {
+			vtag = rx_hdr->l2_fhdr_vlan_tag;
+#ifdef BCM_VLAN
+			if (bp->vlgrp)
+				hw_vlan = 1;
+			else
+#endif
+			{
+				struct vlan_ethhdr *ve = (struct vlan_ethhdr *)
+					__skb_push(skb, 4);
+
+				bcm_memmove(ve, skb->data + 4, ETH_ALEN * 2);
+				ve->h_vlan_proto = htons(ETH_P_8021Q);
+				ve->h_vlan_TCI = htons(vtag);
+				len += 4;
+			}
+		}
+
+		skb->protocol = eth_type_trans(skb, bp->dev);
+
+		if ((len > (bp->dev->mtu + ETH_HLEN)) &&
+			(ntohs(skb->protocol) != 0x8100)) {
+
+			dev_kfree_skb(skb);
+			goto next_rx;
+
+		}
+
+		skb->ip_summed = CHECKSUM_NONE;
+		if (bp->rx_csum &&
+			(status & (L2_FHDR_STATUS_TCP_SEGMENT |
+			L2_FHDR_STATUS_UDP_DATAGRAM))) {
+
+			if (likely((status & (L2_FHDR_ERRORS_TCP_XSUM |
+					      L2_FHDR_ERRORS_UDP_XSUM)) == 0))
+				skb->ip_summed = CHECKSUM_UNNECESSARY;
+		}
+#ifdef NETIF_F_RXHASH
+		if ((bp->dev->features & NETIF_F_RXHASH) &&
+		    ((status & L2_FHDR_STATUS_USE_RXHASH) ==
+		     L2_FHDR_STATUS_USE_RXHASH))
+			skb->rxhash = rx_hdr->l2_fhdr_hash;
+#endif
+
+		skb_record_rx_queue(skb, bnapi - &bp->bnx2_napi[0]);
+
+#if defined(BNX2_ENABLE_NETQUEUE)
+		vmknetddi_queueops_set_skb_queueid(skb,
+				VMKNETDDI_QUEUEOPS_MK_RX_QUEUEID(index));
+#endif
+
+#if defined(NETIF_F_GRO) && defined(BNX2_NEW_NAPI)
+#ifdef BCM_VLAN
+		if (hw_vlan)
+			vlan_gro_receive(&bnapi->napi, bp->vlgrp, vtag, skb);
+		else
+#endif
+			napi_gro_receive(&bnapi->napi, skb);
+#else
+#ifdef BCM_VLAN
+		if (hw_vlan)
+			vlan_hwaccel_receive_skb(skb, bp->vlgrp, vtag);
+		else
+#endif
+			netif_receive_skb(skb);
+#endif
+
+#if (LINUX_VERSION_CODE < 0x02061b) || defined(__VMKLNX__)
+		bp->dev->last_rx = jiffies;
+#endif
+		rx_pkt++;
+
+#if defined(BNX2_ENABLE_NETQUEUE)
+		/*  Update queue specific stats */
+		bnapi->stats.rx_packets++;
+		bnapi->stats.rx_bytes += len;
+#endif
+
+next_rx:
+		sw_cons = NEXT_RX_BD(sw_cons);
+		sw_prod = NEXT_RX_BD(sw_prod);
+
+		if ((rx_pkt == budget))
+			break;
+
+		/* Refresh hw_cons to see if there is new work */
+		if (sw_cons == hw_cons) {
+			hw_cons = bnx2_get_hw_rx_cons(bnapi);
+			rmb();
+		}
+	}
+	rxr->rx_cons = sw_cons;
+	rxr->rx_prod = sw_prod;
+
+	if (pg_ring_used)
+		REG_WR16(bp, rxr->rx_pg_bidx_addr, rxr->rx_pg_prod);
+
+	REG_WR16(bp, rxr->rx_bidx_addr, sw_prod);
+
+	REG_WR(bp, rxr->rx_bseq_addr, rxr->rx_prod_bseq);
+
+	mmiowb();
+
+	return rx_pkt;
+
+}
+
+#ifdef CONFIG_PCI_MSI
+/* MSI ISR - The only difference between this and the INTx ISR
+ * is that the MSI interrupt is always serviced.
+ */
+static irqreturn_t
+#if (LINUX_VERSION_CODE >= 0x20613) || (defined(__VMKLNX__) && (VMWARE_ESX_DDK_VERSION >= 40000))
+bnx2_msi(int irq, void *dev_instance)
+#else
+bnx2_msi(int irq, void *dev_instance, struct pt_regs *regs)
+#endif
+{
+	struct bnx2_napi *bnapi = dev_instance;
+	struct bnx2 *bp = bnapi->bp;
+
+	prefetch(bnapi->status_blk.msi);
+	REG_WR(bp, BNX2_PCICFG_INT_ACK_CMD,
+#if defined(__VMKLNX__)
+		bnapi->int_num |
+#endif
+		BNX2_PCICFG_INT_ACK_CMD_USE_INT_HC_PARAM |
+		BNX2_PCICFG_INT_ACK_CMD_MASK_INT);
+
+	/* Return here if interrupt is disabled. */
+	if (unlikely(atomic_read(&bp->intr_sem) != 0))
+		return IRQ_HANDLED;
+
+#ifdef BNX2_NEW_NAPI
+	napi_schedule(&bnapi->napi);
+#else
+	netif_rx_schedule(bp->dev);
+#endif
+
+	return IRQ_HANDLED;
+}
+
+static irqreturn_t
+#if (LINUX_VERSION_CODE >= 0x20613) || (defined(__VMKLNX__) && (VMWARE_ESX_DDK_VERSION >= 40000))
+bnx2_msi_1shot(int irq, void *dev_instance)
+#else
+bnx2_msi_1shot(int irq, void *dev_instance, struct pt_regs *regs)
+#endif
+{
+	struct bnx2_napi *bnapi = dev_instance;
+	struct bnx2 *bp = bnapi->bp;
+
+	prefetch(bnapi->status_blk.msi);
+
+	/* Return here if interrupt is disabled. */
+	if (unlikely(atomic_read(&bp->intr_sem) != 0))
+		return IRQ_HANDLED;
+
+#ifdef BNX2_NEW_NAPI
+	napi_schedule(&bnapi->napi);
+#else
+	netif_rx_schedule(bp->dev);
+#endif
+
+	return IRQ_HANDLED;
+}
+#endif
+
+static irqreturn_t
+#if (LINUX_VERSION_CODE >= 0x20613) || (defined(__VMKLNX__) && (VMWARE_ESX_DDK_VERSION >= 40000))
+bnx2_interrupt(int irq, void *dev_instance)
+#else
+bnx2_interrupt(int irq, void *dev_instance, struct pt_regs *regs)
+#endif
+{
+	struct bnx2_napi *bnapi = dev_instance;
+	struct bnx2 *bp = bnapi->bp;
+	struct status_block *sblk = bnapi->status_blk.msi;
+
+	/* When using INTx, it is possible for the interrupt to arrive
+	 * at the CPU before the status block posted prior to the
+	 * interrupt. Reading a register will flush the status block.
+	 * When using MSI, the MSI message will always complete after
+	 * the status block write.
+	 */
+	if ((sblk->status_idx == bnapi->last_status_idx) &&
+	    (REG_RD(bp, BNX2_PCICFG_MISC_STATUS) &
+	     BNX2_PCICFG_MISC_STATUS_INTA_VALUE))
+		return IRQ_NONE;
+
+	REG_WR(bp, BNX2_PCICFG_INT_ACK_CMD,
+		BNX2_PCICFG_INT_ACK_CMD_USE_INT_HC_PARAM |
+		BNX2_PCICFG_INT_ACK_CMD_MASK_INT);
+
+	/* Read back to deassert IRQ immediately to avoid too many
+	 * spurious interrupts.
+	 */
+	REG_RD(bp, BNX2_PCICFG_INT_ACK_CMD);
+
+	/* Return here if interrupt is shared and is disabled. */
+	if (unlikely(atomic_read(&bp->intr_sem) != 0))
+		return IRQ_HANDLED;
+
+#ifdef BNX2_NEW_NAPI
+	if (napi_schedule_prep(&bnapi->napi)) {
+		bnapi->last_status_idx = sblk->status_idx;
+		__napi_schedule(&bnapi->napi);
+	}
+#else
+	if (netif_rx_schedule_prep(bp->dev)) {
+		bnapi->last_status_idx = sblk->status_idx;
+		__netif_rx_schedule(bp->dev);
+	}
+#endif
+
+	return IRQ_HANDLED;
+}
+
+static inline int
+bnx2_has_fast_work(struct bnx2_napi *bnapi)
+{
+	struct bnx2_tx_ring_info *txr = &bnapi->tx_ring;
+	struct bnx2_rx_ring_info *rxr = &bnapi->rx_ring;
+
+	if ((bnx2_get_hw_rx_cons(bnapi) != rxr->rx_cons) ||
+	    (bnx2_get_hw_tx_cons(bnapi) != txr->hw_tx_cons))
+		return 1;
+	return 0;
+}
+
+#define STATUS_ATTN_EVENTS	(STATUS_ATTN_BITS_LINK_STATE | \
+				 STATUS_ATTN_BITS_TIMER_ABORT)
+
+static inline int
+bnx2_has_work(struct bnx2_napi *bnapi)
+{
+	struct status_block *sblk = bnapi->status_blk.msi;
+
+	if (bnx2_has_fast_work(bnapi))
+		return 1;
+
+#ifdef BCM_CNIC
+	if (bnapi->cnic_present && (bnapi->cnic_tag != sblk->status_idx))
+		return 1;
+#endif
+
+	if ((sblk->status_attn_bits & STATUS_ATTN_EVENTS) !=
+	    (sblk->status_attn_bits_ack & STATUS_ATTN_EVENTS))
+		return 1;
+
+	return 0;
+}
+
+#ifdef CONFIG_PCI_MSI
+static void
+bnx2_chk_missed_msi(struct bnx2 *bp)
+{
+	struct bnx2_napi *bnapi = &bp->bnx2_napi[0];
+	u32 msi_ctrl;
+
+	if (bnx2_has_work(bnapi)) {
+		msi_ctrl = REG_RD(bp, BNX2_PCICFG_MSI_CONTROL);
+		if (!(msi_ctrl & BNX2_PCICFG_MSI_CONTROL_ENABLE))
+			return;
+
+		if (bnapi->last_status_idx == bp->idle_chk_status_idx) {
+			REG_WR(bp, BNX2_PCICFG_MSI_CONTROL, msi_ctrl &
+			       ~BNX2_PCICFG_MSI_CONTROL_ENABLE);
+			REG_WR(bp, BNX2_PCICFG_MSI_CONTROL, msi_ctrl);
+#if (LINUX_VERSION_CODE >= 0x20613) || (defined(__VMKLNX__) && (VMWARE_ESX_DDK_VERSION >= 40000))
+			bnx2_msi(bp->irq_tbl[0].vector, bnapi);
+#else
+			bnx2_msi(bp->irq_tbl[0].vector, bnapi, NULL);
+#endif
+		}
+	}
+
+	bp->idle_chk_status_idx = bnapi->last_status_idx;
+}
+#endif
+
+#ifdef BCM_CNIC
+static void bnx2_poll_cnic(struct bnx2 *bp, struct bnx2_napi *bnapi)
+{
+	struct cnic_ops *c_ops;
+
+	if (!bnapi->cnic_present)
+		return;
+
+	rcu_read_lock();
+	c_ops = rcu_dereference(bp->cnic_ops);
+	if (c_ops)
+		bnapi->cnic_tag = c_ops->cnic_handler(bp->cnic_data,
+						      bnapi->status_blk.msi);
+	rcu_read_unlock();
+}
+#endif
+
+#ifdef BNX2_NEW_NAPI
+static void bnx2_poll_link(struct bnx2 *bp, struct bnx2_napi *bnapi)
+{
+	struct status_block *sblk = bnapi->status_blk.msi;
+	u32 status_attn_bits = sblk->status_attn_bits;
+	u32 status_attn_bits_ack = sblk->status_attn_bits_ack;
+
+	if ((status_attn_bits & STATUS_ATTN_EVENTS) !=
+	    (status_attn_bits_ack & STATUS_ATTN_EVENTS)) {
+
+		bnx2_phy_int(bp, bnapi);
+
+		/* This is needed to take care of transient status
+		 * during link changes.
+		 */
+		REG_WR(bp, BNX2_HC_COMMAND,
+		       bp->hc_cmd | BNX2_HC_COMMAND_COAL_NOW_WO_INT);
+		REG_RD(bp, BNX2_HC_COMMAND);
+	}
+}
+
+static int bnx2_poll_work(struct bnx2 *bp, struct bnx2_napi *bnapi,
+			  int work_done, int budget)
+{
+	struct bnx2_tx_ring_info *txr = &bnapi->tx_ring;
+	struct bnx2_rx_ring_info *rxr = &bnapi->rx_ring;
+
+	if (bnx2_get_hw_tx_cons(bnapi) != txr->hw_tx_cons)
+#if defined(__VMKLNX__)
+		bnx2_tx_int(bp, bnapi, 0, 1);
+#else
+		bnx2_tx_int(bp, bnapi, 0);
+#endif
+
+	if (bnx2_get_hw_rx_cons(bnapi) != rxr->rx_cons)
+		work_done += bnx2_rx_int(bp, bnapi, budget - work_done);
+
+#if defined(__VMKLNX__)
+	wmb();
+#endif
+	return work_done;
+}
+
+static int bnx2_poll_msix(struct napi_struct *napi, int budget)
+{
+	struct bnx2_napi *bnapi = container_of(napi, struct bnx2_napi, napi);
+	struct bnx2 *bp = bnapi->bp;
+	int work_done = 0;
+	struct status_block_msix *sblk = bnapi->status_blk.msix;
+
+	while (1) {
+		work_done = bnx2_poll_work(bp, bnapi, work_done, budget);
+		if (unlikely(work_done >= budget))
+			break;
+
+		bnapi->last_status_idx = sblk->status_idx;
+		/* status idx must be read before checking for more work. */
+		rmb();
+		if (likely(!bnx2_has_fast_work(bnapi))) {
+
+			napi_complete(napi);
+			REG_WR(bp, BNX2_PCICFG_INT_ACK_CMD, bnapi->int_num |
+			       BNX2_PCICFG_INT_ACK_CMD_INDEX_VALID |
+			       bnapi->last_status_idx);
+			break;
+		}
+	}
+	return work_done;
+}
+
+static int bnx2_poll(struct napi_struct *napi, int budget)
+{
+	struct bnx2_napi *bnapi = container_of(napi, struct bnx2_napi, napi);
+	struct bnx2 *bp = bnapi->bp;
+	int work_done = 0;
+	struct status_block *sblk = bnapi->status_blk.msi;
+
+	while (1) {
+		bnx2_poll_link(bp, bnapi);
+
+		work_done = bnx2_poll_work(bp, bnapi, work_done, budget);
+
+#if defined(BNX2_ENABLE_NETQUEUE)
+		if (bnx2_netqueue_is_avail(bp) &&
+		    (bp->netq_state & BNX2_NETQ_HW_STARTED))
+			bnx2_netqueue_service_bnx2_msix(bnapi);
+#endif
+
+#ifdef BCM_CNIC
+		bnx2_poll_cnic(bp, bnapi);
+#endif
+
+		/* bnapi->last_status_idx is used below to tell the hw how
+		 * much work has been processed, so we must read it before
+		 * checking for more work.
+		 */
+		bnapi->last_status_idx = sblk->status_idx;
+
+		if (unlikely(work_done >= budget))
+			break;
+
+		rmb();
+		if (likely(!bnx2_has_work(bnapi))) {
+			napi_complete(napi);
+			if (likely(bp->flags & BNX2_FLAG_USING_MSI_OR_MSIX)) {
+				REG_WR(bp, BNX2_PCICFG_INT_ACK_CMD,
+				       BNX2_PCICFG_INT_ACK_CMD_INDEX_VALID |
+				       bnapi->last_status_idx);
+				break;
+			}
+			REG_WR(bp, BNX2_PCICFG_INT_ACK_CMD,
+			       BNX2_PCICFG_INT_ACK_CMD_INDEX_VALID |
+			       BNX2_PCICFG_INT_ACK_CMD_MASK_INT |
+			       bnapi->last_status_idx);
+
+			REG_WR(bp, BNX2_PCICFG_INT_ACK_CMD,
+			       BNX2_PCICFG_INT_ACK_CMD_INDEX_VALID |
+			       bnapi->last_status_idx);
+			break;
+		}
+	}
+
+	return work_done;
+}
+
+#else
+
+static int
+bnx2_poll(struct net_device *dev, int *budget)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+	struct bnx2_napi *bnapi = &bp->bnx2_napi[0];
+	struct bnx2_tx_ring_info *txr = &bnapi->tx_ring;
+	struct bnx2_rx_ring_info *rxr = &bnapi->rx_ring;
+	struct status_block *sblk = bnapi->status_blk.msi;
+	u32 status_attn_bits = sblk->status_attn_bits;
+	u32 status_attn_bits_ack = sblk->status_attn_bits_ack;
+
+	if ((status_attn_bits & STATUS_ATTN_EVENTS) !=
+	    (status_attn_bits_ack & STATUS_ATTN_EVENTS)) {
+
+		bnx2_phy_int(bp, bnapi);
+
+		/* This is needed to take care of transient status
+		 * during link changes.
+		 */
+		REG_WR(bp, BNX2_HC_COMMAND,
+		       bp->hc_cmd | BNX2_HC_COMMAND_COAL_NOW_WO_INT);
+		REG_RD(bp, BNX2_HC_COMMAND);
+	}
+
+	if (bnx2_get_hw_tx_cons(bnapi) != txr->hw_tx_cons)
+#if defined(__VMKLNX__)
+		bnx2_tx_int(bp, bnapi, 0, 1);
+#else
+		bnx2_tx_int(bp, bnapi, 0);
+#endif
+
+	if (bnx2_get_hw_rx_cons(bnapi) != rxr->rx_cons) {
+		int orig_budget = *budget;
+		int work_done;
+
+		if (orig_budget > dev->quota)
+			orig_budget = dev->quota;
+
+		work_done = bnx2_rx_int(bp, bnapi, orig_budget);
+		*budget -= work_done;
+		dev->quota -= work_done;
+	}
+
+#ifdef BCM_CNIC
+	bnx2_poll_cnic(bp, bnapi);
+#endif
+
+	bnapi->last_status_idx = sblk->status_idx;
+	rmb();
+
+	if (!bnx2_has_work(bnapi)) {
+		netif_rx_complete(dev);
+		if (likely(bp->flags & BNX2_FLAG_USING_MSI_OR_MSIX)) {
+			REG_WR(bp, BNX2_PCICFG_INT_ACK_CMD,
+			       BNX2_PCICFG_INT_ACK_CMD_INDEX_VALID |
+			       bnapi->last_status_idx);
+			return 0;
+		}
+		REG_WR(bp, BNX2_PCICFG_INT_ACK_CMD,
+		       BNX2_PCICFG_INT_ACK_CMD_INDEX_VALID |
+		       BNX2_PCICFG_INT_ACK_CMD_MASK_INT |
+		       bnapi->last_status_idx);
+
+		REG_WR(bp, BNX2_PCICFG_INT_ACK_CMD,
+		       BNX2_PCICFG_INT_ACK_CMD_INDEX_VALID |
+		       bnapi->last_status_idx);
+		return 0;
+	}
+
+	return 1;
+}
+#endif
+
+/* Called with rtnl_lock from vlan functions and also netif_tx_lock
+ * from set_multicast.
+ */
+static void
+bnx2_set_rx_mode(struct net_device *dev)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+	u32 rx_mode, sort_mode;
+#ifdef BCM_HAVE_SET_RX_MODE
+#if (LINUX_VERSION_CODE >= 0x2061f)
+	struct netdev_hw_addr *ha;
+#else
+	struct dev_addr_list *uc_ptr;
+#endif
+#endif
+	int i;
+
+	if (!netif_running(dev))
+		return;
+
+	spin_lock_bh(&bp->phy_lock);
+
+	rx_mode = bp->rx_mode & ~(BNX2_EMAC_RX_MODE_PROMISCUOUS |
+				  BNX2_EMAC_RX_MODE_KEEP_VLAN_TAG);
+	sort_mode = 1 | BNX2_RPM_SORT_USER0_BC_EN;
+#ifdef BCM_VLAN
+	if (!bp->vlgrp && (bp->flags & BNX2_FLAG_CAN_KEEP_VLAN))
+		rx_mode |= BNX2_EMAC_RX_MODE_KEEP_VLAN_TAG;
+#else
+	if (bp->flags & BNX2_FLAG_CAN_KEEP_VLAN)
+		rx_mode |= BNX2_EMAC_RX_MODE_KEEP_VLAN_TAG;
+#endif
+	if (dev->flags & IFF_PROMISC) {
+		/* Promiscuous mode. */
+		rx_mode |= BNX2_EMAC_RX_MODE_PROMISCUOUS;
+		sort_mode |= BNX2_RPM_SORT_USER0_PROM_EN |
+			     BNX2_RPM_SORT_USER0_PROM_VLAN;
+	}
+	else if (dev->flags & IFF_ALLMULTI) {
+		for (i = 0; i < NUM_MC_HASH_REGISTERS; i++) {
+			REG_WR(bp, BNX2_EMAC_MULTICAST_HASH0 + (i * 4),
+			       0xffffffff);
+        	}
+		sort_mode |= BNX2_RPM_SORT_USER0_MC_EN;
+	}
+	else {
+		/* Accept one or more multicast(s). */
+#ifndef BCM_NEW_NETDEV_HW_ADDR
+		struct dev_mc_list *mclist;
+#endif
+		u32 mc_filter[NUM_MC_HASH_REGISTERS];
+		u32 regidx;
+		u32 bit;
+		u32 crc;
+
+		memset(mc_filter, 0, 4 * NUM_MC_HASH_REGISTERS);
+
+#ifdef BCM_NEW_NETDEV_HW_ADDR
+		netdev_for_each_mc_addr(ha, dev) {
+			crc = ether_crc_le(ETH_ALEN, ha->addr);
+#else
+		netdev_for_each_mc_addr(mclist, dev) {
+			crc = ether_crc_le(ETH_ALEN, mclist->dmi_addr);
+#endif
+			bit = crc & 0xff;
+			regidx = (bit & 0xe0) >> 5;
+			bit &= 0x1f;
+			mc_filter[regidx] |= (1 << bit);
+		}
+
+		for (i = 0; i < NUM_MC_HASH_REGISTERS; i++) {
+			REG_WR(bp, BNX2_EMAC_MULTICAST_HASH0 + (i * 4),
+			       mc_filter[i]);
+		}
+
+		sort_mode |= BNX2_RPM_SORT_USER0_MC_HSH_EN;
+	}
+
+#ifdef BCM_HAVE_SET_RX_MODE
+	if (netdev_uc_count(dev) > BNX2_MAX_UNICAST_ADDRESSES) {
+		rx_mode |= BNX2_EMAC_RX_MODE_PROMISCUOUS;
+		sort_mode |= BNX2_RPM_SORT_USER0_PROM_EN |
+			     BNX2_RPM_SORT_USER0_PROM_VLAN;
+	} else if (!(dev->flags & IFF_PROMISC)) {
+#if (LINUX_VERSION_CODE < 0x2061f)
+		uc_ptr = dev->uc_list;
+
+		/* Add all entries into to the match filter list */
+		for (i = 0; i < dev->uc_count; i++) {
+			bnx2_set_mac_addr(bp, uc_ptr->da_addr,
+					  i + BNX2_START_UNICAST_ADDRESS_INDEX);
+			sort_mode |= (1 <<
+				      (i + BNX2_START_UNICAST_ADDRESS_INDEX));
+			uc_ptr = uc_ptr->next;
+		}
+#else
+		i = 0;
+		netdev_for_each_uc_addr(ha, dev) {
+			bnx2_set_mac_addr(bp, ha->addr,
+					  i + BNX2_START_UNICAST_ADDRESS_INDEX);
+			sort_mode |= (1 <<
+				      (i + BNX2_START_UNICAST_ADDRESS_INDEX));
+			i++;
+		}
+#endif
+	}
+#endif
+
+	if (rx_mode != bp->rx_mode) {
+		bp->rx_mode = rx_mode;
+		REG_WR(bp, BNX2_EMAC_RX_MODE, rx_mode);
+	}
+
+	REG_WR(bp, BNX2_RPM_SORT_USER0, 0x0);
+	REG_WR(bp, BNX2_RPM_SORT_USER0, sort_mode);
+	REG_WR(bp, BNX2_RPM_SORT_USER0, sort_mode | BNX2_RPM_SORT_USER0_ENA);
+
+	spin_unlock_bh(&bp->phy_lock);
+}
+
+#define FW_BUF_SIZE	0x10000
+
+static int
+bnx2_gunzip_init(struct bnx2 *bp)
+{
+	if ((bp->gunzip_buf = vmalloc(FW_BUF_SIZE)) == NULL)
+		goto gunzip_nomem1;
+
+	if ((bp->strm = kmalloc(sizeof(*bp->strm), GFP_KERNEL)) == NULL)
+		goto gunzip_nomem2;
+
+	bp->strm->workspace = kmalloc(zlib_inflate_workspacesize(), GFP_KERNEL);
+	if (bp->strm->workspace == NULL)
+		goto gunzip_nomem3;
+
+	return 0;
+
+gunzip_nomem3:
+	kfree(bp->strm);
+	bp->strm = NULL;
+
+gunzip_nomem2:
+	vfree(bp->gunzip_buf);
+	bp->gunzip_buf = NULL;
+
+gunzip_nomem1:
+	netdev_err(bp->dev, "Cannot allocate firmware buffer for "
+			    "uncompression.\n");
+	return -ENOMEM;
+}
+
+static void
+bnx2_gunzip_end(struct bnx2 *bp)
+{
+	kfree(bp->strm->workspace);
+
+	kfree(bp->strm);
+	bp->strm = NULL;
+
+	if (bp->gunzip_buf) {
+		vfree(bp->gunzip_buf);
+		bp->gunzip_buf = NULL;
+	}
+}
+
+static int
+bnx2_gunzip(struct bnx2 *bp, const u8 *zbuf,
+	    int len, void **outbuf, int *outlen)
+{
+	int rc;
+
+	bp->strm->next_in = zbuf;
+	bp->strm->avail_in = len;
+	bp->strm->next_out = bp->gunzip_buf;
+	bp->strm->avail_out = FW_BUF_SIZE;
+
+	rc = zlib_inflateInit2(bp->strm, -MAX_WBITS);
+	if (rc != Z_OK)
+		return rc;
+
+	rc = zlib_inflate(bp->strm, Z_FINISH);
+
+	*outlen = FW_BUF_SIZE - bp->strm->avail_out;
+	*outbuf = bp->gunzip_buf;
+
+	if ((rc != Z_OK) && (rc != Z_STREAM_END))
+		netdev_err(bp->dev, "Firmware decompression error: %s\n",
+			   bp->strm->msg);
+
+	zlib_inflateEnd(bp->strm);
+
+	if (rc == Z_STREAM_END)
+		return 0;
+
+	return rc;
+}
+
+#if defined(__VMKLNX__)
+struct bnx2_cpus_scratch_debug {
+	u32	offset;		/*  Scratch pad offset to firmware version */
+	char 	*name;		/*  Name of the CPU */
+};
+
+#define BNX2_SCRATCH_FW_VERSION_OFFSET		0x10
+#define BNX2_TPAT_SCRATCH_FW_VERSION_OFFSET	0x410
+
+static void
+bnx2_print_fw_versions(struct bnx2 *bp)
+{
+	/*  Array of the firmware offset's + CPU strings */
+	const struct bnx2_cpus_scratch_debug cpus_scratch[] = {
+		{ .offset = BNX2_TXP_SCRATCH + BNX2_SCRATCH_FW_VERSION_OFFSET,
+		  .name   = "TXP" },
+		{ .offset = BNX2_TPAT_SCRATCH +
+			    BNX2_TPAT_SCRATCH_FW_VERSION_OFFSET,
+		  .name   = "TPAT" },
+		{ .offset = BNX2_RXP_SCRATCH + BNX2_SCRATCH_FW_VERSION_OFFSET,
+		  .name   = "RXP" },
+		{ .offset = BNX2_COM_SCRATCH + BNX2_SCRATCH_FW_VERSION_OFFSET,
+		  .name   = "COM" },
+		{ .offset = BNX2_CP_SCRATCH + BNX2_SCRATCH_FW_VERSION_OFFSET,
+		  .name   = "CP" },
+		/* There is no versioning for MCP firmware */
+	};
+	int i;
+
+	netdev_info(bp->dev, "CPU fw versions: ");
+	for (i = 0; i < ARRAY_SIZE(cpus_scratch); i++) {
+		/*  The FW versions are 11 bytes long + 1 extra byte for
+		 *  the NULL termination */
+		char version[12];
+		int j;
+
+		/*  Copy 4 bytes at a time */
+		for (j = 0; j < sizeof(version); j += 4) {
+			u32 val;
+
+			val = bnx2_reg_rd_ind(bp, cpus_scratch[i].offset + j);
+			val = be32_to_cpu(val);
+			memcpy(&version[j], &val, sizeof(val));
+		}
+
+		/*  Force a NULL terminiated string */
+		version[11] = '\0';
+
+		printk("%s: '%s' ", cpus_scratch[i].name, version);
+	}
+	printk("\n");
+}
+#endif
+
+static u32
+rv2p_fw_fixup(u32 rv2p_proc, int idx, u32 loc, u32 rv2p_code)
+{
+	switch (idx) {
+	case RV2P_P1_FIXUP_PAGE_SIZE_IDX:
+		rv2p_code &= ~RV2P_BD_PAGE_SIZE_MSK;
+		rv2p_code |= RV2P_BD_PAGE_SIZE;
+		break;
+	}
+	return rv2p_code;
+}
+
+static void
+load_rv2p_fw(struct bnx2 *bp, __le32 *rv2p_code, u32 rv2p_code_len,
+	u32 rv2p_proc, u32 fixup_loc)
+{
+	__le32 *rv2p_code_start = rv2p_code;
+	int i;
+	u32 val, cmd, addr;
+
+	if (rv2p_proc == RV2P_PROC1) {
+		cmd = BNX2_RV2P_PROC1_ADDR_CMD_RDWR;
+		addr = BNX2_RV2P_PROC1_ADDR_CMD;
+	} else {
+		cmd = BNX2_RV2P_PROC2_ADDR_CMD_RDWR;
+		addr = BNX2_RV2P_PROC2_ADDR_CMD;
+	}
+
+	for (i = 0; i < rv2p_code_len; i += 8) {
+		REG_WR(bp, BNX2_RV2P_INSTR_HIGH, le32_to_cpu(*rv2p_code));
+		rv2p_code++;
+		REG_WR(bp, BNX2_RV2P_INSTR_LOW, le32_to_cpu(*rv2p_code));
+		rv2p_code++;
+
+		val = (i / 8) | cmd;
+		REG_WR(bp, addr, val);
+	}
+
+	rv2p_code = rv2p_code_start;
+	if (fixup_loc && ((fixup_loc * 4) < rv2p_code_len)) {
+		u32 code;
+
+		code = le32_to_cpu(*(rv2p_code + fixup_loc - 1));
+		REG_WR(bp, BNX2_RV2P_INSTR_HIGH, code);
+		code = le32_to_cpu(*(rv2p_code + fixup_loc));
+		code = rv2p_fw_fixup(rv2p_proc, 0, fixup_loc, code);
+		REG_WR(bp, BNX2_RV2P_INSTR_LOW, code);
+
+		val = (fixup_loc / 2) | cmd;
+		REG_WR(bp, addr, val);
+	}
+
+	/* Reset the processor, un-stall is done later. */
+	if (rv2p_proc == RV2P_PROC1) {
+		REG_WR(bp, BNX2_RV2P_COMMAND, BNX2_RV2P_COMMAND_PROC1_RESET);
+	}
+	else {
+		REG_WR(bp, BNX2_RV2P_COMMAND, BNX2_RV2P_COMMAND_PROC2_RESET);
+	}
+}
+
+static int
+load_cpu_fw(struct bnx2 *bp, const struct cpu_reg *cpu_reg, struct fw_info *fw)
+{
+	u32 offset;
+	u32 val;
+	int rc;
+
+	/* Halt the CPU. */
+	val = bnx2_reg_rd_ind(bp, cpu_reg->mode);
+	val |= cpu_reg->mode_value_halt;
+	bnx2_reg_wr_ind(bp, cpu_reg->mode, val);
+	bnx2_reg_wr_ind(bp, cpu_reg->state, cpu_reg->state_value_clear);
+
+	/* Load the Text area. */
+	offset = cpu_reg->spad_base + (fw->text_addr - cpu_reg->mips_view_base);
+
+	if (fw->gz_text) {
+		u32 text_len;
+		void *text;
+
+		rc = bnx2_gunzip(bp, fw->gz_text, fw->gz_text_len, &text,
+				 &text_len);
+		if (rc)
+			return rc;
+
+		fw->text = text;
+	}
+	if (fw->text) {
+		int j;
+		for (j = 0; j < (fw->text_len / 4); j++, offset += 4) {
+			bnx2_reg_wr_ind(bp, offset, le32_to_cpu(fw->text[j]));
+	        }
+	}
+
+	/* Load the Data area. */
+	offset = cpu_reg->spad_base + (fw->data_addr - cpu_reg->mips_view_base);
+	if (fw->data) {
+		int j;
+
+		for (j = 0; j < (fw->data_len / 4); j++, offset += 4) {
+			bnx2_reg_wr_ind(bp, offset, fw->data[j]);
+		}
+	}
+
+	/* Load the SBSS area. */
+	offset = cpu_reg->spad_base + (fw->sbss_addr - cpu_reg->mips_view_base);
+	if (fw->sbss_len) {
+		int j;
+
+		for (j = 0; j < (fw->sbss_len / 4); j++, offset += 4) {
+			bnx2_reg_wr_ind(bp, offset, 0);
+		}
+	}
+
+	/* Load the BSS area. */
+	offset = cpu_reg->spad_base + (fw->bss_addr - cpu_reg->mips_view_base);
+	if (fw->bss_len) {
+		int j;
+
+		for (j = 0; j < (fw->bss_len/4); j++, offset += 4) {
+			bnx2_reg_wr_ind(bp, offset, 0);
+		}
+	}
+
+	/* Load the Read-Only area. */
+	offset = cpu_reg->spad_base +
+		(fw->rodata_addr - cpu_reg->mips_view_base);
+	if (fw->rodata) {
+		int j;
+
+		for (j = 0; j < (fw->rodata_len / 4); j++, offset += 4) {
+			bnx2_reg_wr_ind(bp, offset, fw->rodata[j]);
+		}
+	}
+
+	/* Clear the pre-fetch instruction. */
+	bnx2_reg_wr_ind(bp, cpu_reg->inst, 0);
+	bnx2_reg_wr_ind(bp, cpu_reg->pc, fw->start_addr);
+
+	/* Start the CPU. */
+	val = bnx2_reg_rd_ind(bp, cpu_reg->mode);
+	val &= ~cpu_reg->mode_value_halt;
+	bnx2_reg_wr_ind(bp, cpu_reg->state, cpu_reg->state_value_clear);
+	bnx2_reg_wr_ind(bp, cpu_reg->mode, val);
+
+	return 0;
+}
+
+static int
+bnx2_init_cpus(struct bnx2 *bp)
+{
+	struct fw_info *fw;
+	int rc = 0, rv2p_len;
+	void *text;
+	const void *rv2p;
+	u32 text_len, fixup_loc;
+
+	if ((rc = bnx2_gunzip_init(bp)) != 0)
+		return rc;
+
+	/* Initialize the RV2P processor. */
+	if (CHIP_NUM(bp) == CHIP_NUM_5709) {
+		if ((CHIP_ID(bp) == CHIP_ID_5709_A0) ||
+		    (CHIP_ID(bp) == CHIP_ID_5709_A1)) {
+			rv2p = bnx2_xi90_rv2p_proc1;
+			rv2p_len = sizeof(bnx2_xi90_rv2p_proc1);
+			fixup_loc = XI90_RV2P_PROC1_MAX_BD_PAGE_LOC;
+		} else {
+			rv2p = bnx2_xi_rv2p_proc1;
+			rv2p_len = sizeof(bnx2_xi_rv2p_proc1);
+			fixup_loc = XI_RV2P_PROC1_MAX_BD_PAGE_LOC;
+		}
+	} else {
+		rv2p = bnx2_rv2p_proc1;
+		rv2p_len = sizeof(bnx2_rv2p_proc1);
+		fixup_loc = RV2P_PROC1_MAX_BD_PAGE_LOC;
+	}
+	rc = bnx2_gunzip(bp, rv2p, rv2p_len, &text, &text_len);
+	if (rc)
+		goto init_cpu_err;
+
+	load_rv2p_fw(bp, text, text_len, RV2P_PROC1, fixup_loc);
+
+	if (CHIP_NUM(bp) == CHIP_NUM_5709) {
+		if ((CHIP_ID(bp) == CHIP_ID_5709_A0) ||
+		    (CHIP_ID(bp) == CHIP_ID_5709_A1)) {
+			rv2p = bnx2_xi90_rv2p_proc2;
+			rv2p_len = sizeof(bnx2_xi90_rv2p_proc2);
+			fixup_loc = XI90_RV2P_PROC2_MAX_BD_PAGE_LOC;
+		} else {
+			rv2p = bnx2_xi_rv2p_proc2;
+			rv2p_len = sizeof(bnx2_xi_rv2p_proc2);
+			fixup_loc = XI_RV2P_PROC2_MAX_BD_PAGE_LOC;
+		}
+	} else {
+		rv2p = bnx2_rv2p_proc2;
+		rv2p_len = sizeof(bnx2_rv2p_proc2);
+		fixup_loc = RV2P_PROC2_MAX_BD_PAGE_LOC;
+	}
+	rc = bnx2_gunzip(bp, rv2p, rv2p_len, &text, &text_len);
+	if (rc)
+		goto init_cpu_err;
+
+	load_rv2p_fw(bp, text, text_len, RV2P_PROC2, fixup_loc);
+
+	/* Initialize the RX Processor. */
+	if (CHIP_NUM(bp) == CHIP_NUM_5709)
+		fw = &bnx2_rxp_fw_09;
+	else
+		fw = &bnx2_rxp_fw_06;
+
+	rc = load_cpu_fw(bp, &cpu_reg_rxp, fw);
+	if (rc)
+		goto init_cpu_err;
+
+	/* Initialize the TX Processor. */
+	if (CHIP_NUM(bp) == CHIP_NUM_5709)
+		fw = &bnx2_txp_fw_09;
+	else
+		fw = &bnx2_txp_fw_06;
+
+	rc = load_cpu_fw(bp, &cpu_reg_txp, fw);
+	if (rc)
+		goto init_cpu_err;
+
+	/* Initialize the TX Patch-up Processor. */
+	if (CHIP_NUM(bp) == CHIP_NUM_5709)
+		fw = &bnx2_tpat_fw_09;
+	else
+		fw = &bnx2_tpat_fw_06;
+
+	rc = load_cpu_fw(bp, &cpu_reg_tpat, fw);
+	if (rc)
+		goto init_cpu_err;
+
+	/* Initialize the Completion Processor. */
+	if (CHIP_NUM(bp) == CHIP_NUM_5709)
+		fw = &bnx2_com_fw_09;
+	else
+		fw = &bnx2_com_fw_06;
+
+	rc = load_cpu_fw(bp, &cpu_reg_com, fw);
+	if (rc)
+		goto init_cpu_err;
+
+	/* Initialize the Command Processor. */
+	if (CHIP_NUM(bp) == CHIP_NUM_5709)
+		fw = &bnx2_cp_fw_09;
+	else
+		fw = &bnx2_cp_fw_06;
+
+	rc = load_cpu_fw(bp, &cpu_reg_cp, fw);
+	if (rc)
+		goto init_cpu_err;
+
+#if defined(__VMKLNX__)
+	bnx2_print_fw_versions(bp);
+#endif
+
+init_cpu_err:
+	bnx2_gunzip_end(bp);
+	return rc;
+}
+
+static int
+bnx2_set_power_state(struct bnx2 *bp, pci_power_t state)
+{
+	u16 pmcsr;
+
+	pci_read_config_word(bp->pdev, bp->pm_cap + PCI_PM_CTRL, &pmcsr);
+
+	switch (state) {
+	case PCI_D0: {
+		u32 val;
+
+		pci_write_config_word(bp->pdev, bp->pm_cap + PCI_PM_CTRL,
+			(pmcsr & ~PCI_PM_CTRL_STATE_MASK) |
+			PCI_PM_CTRL_PME_STATUS);
+
+		if (pmcsr & PCI_PM_CTRL_STATE_MASK)
+			/* delay required during transition out of D3hot */
+			bnx2_msleep(20);
+
+		val = REG_RD(bp, BNX2_EMAC_MODE);
+		val |= BNX2_EMAC_MODE_MPKT_RCVD | BNX2_EMAC_MODE_ACPI_RCVD;
+		val &= ~BNX2_EMAC_MODE_MPKT;
+		REG_WR(bp, BNX2_EMAC_MODE, val);
+
+		val = REG_RD(bp, BNX2_RPM_CONFIG);
+		val &= ~BNX2_RPM_CONFIG_ACPI_ENA;
+		REG_WR(bp, BNX2_RPM_CONFIG, val);
+		break;
+	}
+	case PCI_D3hot: {
+		int i;
+		u32 val, wol_msg;
+
+		if (bp->wol) {
+			u32 advertising;
+			u8 autoneg;
+
+			autoneg = bp->autoneg;
+			advertising = bp->advertising;
+
+			if (bp->phy_port == PORT_TP) {
+				bp->autoneg = AUTONEG_SPEED;
+				bp->advertising = ADVERTISED_10baseT_Half |
+					ADVERTISED_10baseT_Full |
+					ADVERTISED_100baseT_Half |
+					ADVERTISED_100baseT_Full |
+					ADVERTISED_Autoneg;
+			}
+
+			spin_lock_bh(&bp->phy_lock);
+			bnx2_setup_phy(bp, bp->phy_port);
+			spin_unlock_bh(&bp->phy_lock);
+
+			bp->autoneg = autoneg;
+			bp->advertising = advertising;
+
+			bnx2_set_mac_addr(bp, bp->dev->dev_addr, 0);
+
+			val = REG_RD(bp, BNX2_EMAC_MODE);
+
+			/* Enable port mode. */
+			val &= ~BNX2_EMAC_MODE_PORT;
+			val |= BNX2_EMAC_MODE_MPKT_RCVD |
+			       BNX2_EMAC_MODE_ACPI_RCVD |
+			       BNX2_EMAC_MODE_MPKT;
+			if (bp->phy_port == PORT_TP)
+				val |= BNX2_EMAC_MODE_PORT_MII;
+			else {
+				val |= BNX2_EMAC_MODE_PORT_GMII;
+				if (bp->line_speed == SPEED_2500)
+					val |= BNX2_EMAC_MODE_25G_MODE;
+			}
+
+			REG_WR(bp, BNX2_EMAC_MODE, val);
+
+			/* receive all multicast */
+			for (i = 0; i < NUM_MC_HASH_REGISTERS; i++) {
+				REG_WR(bp, BNX2_EMAC_MULTICAST_HASH0 + (i * 4),
+				       0xffffffff);
+			}
+			REG_WR(bp, BNX2_EMAC_RX_MODE,
+			       BNX2_EMAC_RX_MODE_SORT_MODE);
+
+			val = 1 | BNX2_RPM_SORT_USER0_BC_EN |
+			      BNX2_RPM_SORT_USER0_MC_EN;
+			REG_WR(bp, BNX2_RPM_SORT_USER0, 0x0);
+			REG_WR(bp, BNX2_RPM_SORT_USER0, val);
+			REG_WR(bp, BNX2_RPM_SORT_USER0, val |
+			       BNX2_RPM_SORT_USER0_ENA);
+
+			/* Need to enable EMAC and RPM for WOL. */
+			REG_WR(bp, BNX2_MISC_ENABLE_SET_BITS,
+			       BNX2_MISC_ENABLE_SET_BITS_RX_PARSER_MAC_ENABLE |
+			       BNX2_MISC_ENABLE_SET_BITS_TX_HEADER_Q_ENABLE |
+			       BNX2_MISC_ENABLE_SET_BITS_EMAC_ENABLE);
+
+			val = REG_RD(bp, BNX2_RPM_CONFIG);
+			val &= ~BNX2_RPM_CONFIG_ACPI_ENA;
+			REG_WR(bp, BNX2_RPM_CONFIG, val);
+
+			wol_msg = BNX2_DRV_MSG_CODE_SUSPEND_WOL;
+		}
+		else {
+			wol_msg = BNX2_DRV_MSG_CODE_SUSPEND_NO_WOL;
+		}
+
+		if (!(bp->flags & BNX2_FLAG_NO_WOL))
+			bnx2_fw_sync(bp, BNX2_DRV_MSG_DATA_WAIT3 | wol_msg,
+				     1, 0);
+
+		pmcsr &= ~PCI_PM_CTRL_STATE_MASK;
+		if ((CHIP_ID(bp) == CHIP_ID_5706_A0) ||
+		    (CHIP_ID(bp) == CHIP_ID_5706_A1)) {
+
+			if (bp->wol)
+				pmcsr |= 3;
+		}
+		else {
+			pmcsr |= 3;
+		}
+		if (bp->wol) {
+			pmcsr |= PCI_PM_CTRL_PME_ENABLE;
+		}
+		pci_write_config_word(bp->pdev, bp->pm_cap + PCI_PM_CTRL,
+				      pmcsr);
+
+		/* No more memory access after this point until
+		 * device is brought back to D0.
+		 */
+		udelay(50);
+		break;
+	}
+	default:
+		return -EINVAL;
+	}
+	return 0;
+}
+
+static int
+bnx2_acquire_nvram_lock(struct bnx2 *bp)
+{
+	u32 val;
+	int j;
+
+	/* Request access to the flash interface. */
+	REG_WR(bp, BNX2_NVM_SW_ARB, BNX2_NVM_SW_ARB_ARB_REQ_SET2);
+	for (j = 0; j < NVRAM_TIMEOUT_COUNT; j++) {
+		val = REG_RD(bp, BNX2_NVM_SW_ARB);
+		if (val & BNX2_NVM_SW_ARB_ARB_ARB2)
+			break;
+
+		udelay(5);
+	}
+
+	if (j >= NVRAM_TIMEOUT_COUNT)
+		return -EBUSY;
+
+	return 0;
+}
+
+static int
+bnx2_release_nvram_lock(struct bnx2 *bp)
+{
+	int j;
+	u32 val;
+
+	/* Relinquish nvram interface. */
+	REG_WR(bp, BNX2_NVM_SW_ARB, BNX2_NVM_SW_ARB_ARB_REQ_CLR2);
+
+	for (j = 0; j < NVRAM_TIMEOUT_COUNT; j++) {
+		val = REG_RD(bp, BNX2_NVM_SW_ARB);
+		if (!(val & BNX2_NVM_SW_ARB_ARB_ARB2))
+			break;
+
+		udelay(5);
+	}
+
+	if (j >= NVRAM_TIMEOUT_COUNT)
+		return -EBUSY;
+
+	return 0;
+}
+
+
+static int
+bnx2_enable_nvram_write(struct bnx2 *bp)
+{
+	u32 val;
+
+	val = REG_RD(bp, BNX2_MISC_CFG);
+	REG_WR(bp, BNX2_MISC_CFG, val | BNX2_MISC_CFG_NVM_WR_EN_PCI);
+
+	if (bp->flash_info->flags & BNX2_NV_WREN) {
+		int j;
+
+		REG_WR(bp, BNX2_NVM_COMMAND, BNX2_NVM_COMMAND_DONE);
+		REG_WR(bp, BNX2_NVM_COMMAND,
+		       BNX2_NVM_COMMAND_WREN | BNX2_NVM_COMMAND_DOIT);
+
+		for (j = 0; j < NVRAM_TIMEOUT_COUNT; j++) {
+			udelay(5);
+
+			val = REG_RD(bp, BNX2_NVM_COMMAND);
+			if (val & BNX2_NVM_COMMAND_DONE)
+				break;
+		}
+
+		if (j >= NVRAM_TIMEOUT_COUNT)
+			return -EBUSY;
+	}
+	return 0;
+}
+
+static void
+bnx2_disable_nvram_write(struct bnx2 *bp)
+{
+	u32 val;
+
+	val = REG_RD(bp, BNX2_MISC_CFG);
+	REG_WR(bp, BNX2_MISC_CFG, val & ~BNX2_MISC_CFG_NVM_WR_EN);
+}
+
+
+static void
+bnx2_enable_nvram_access(struct bnx2 *bp)
+{
+	u32 val;
+
+	val = REG_RD(bp, BNX2_NVM_ACCESS_ENABLE);
+	/* Enable both bits, even on read. */
+	REG_WR(bp, BNX2_NVM_ACCESS_ENABLE,
+	       val | BNX2_NVM_ACCESS_ENABLE_EN | BNX2_NVM_ACCESS_ENABLE_WR_EN);
+}
+
+static void
+bnx2_disable_nvram_access(struct bnx2 *bp)
+{
+	u32 val;
+
+	val = REG_RD(bp, BNX2_NVM_ACCESS_ENABLE);
+	/* Disable both bits, even after read. */
+	REG_WR(bp, BNX2_NVM_ACCESS_ENABLE,
+		val & ~(BNX2_NVM_ACCESS_ENABLE_EN |
+			BNX2_NVM_ACCESS_ENABLE_WR_EN));
+}
+
+static int
+bnx2_nvram_erase_page(struct bnx2 *bp, u32 offset)
+{
+	u32 cmd;
+	int j;
+
+	if (bp->flash_info->flags & BNX2_NV_BUFFERED)
+		/* Buffered flash, no erase needed */
+		return 0;
+
+	/* Build an erase command */
+	cmd = BNX2_NVM_COMMAND_ERASE | BNX2_NVM_COMMAND_WR |
+	      BNX2_NVM_COMMAND_DOIT;
+
+	/* Need to clear DONE bit separately. */
+	REG_WR(bp, BNX2_NVM_COMMAND, BNX2_NVM_COMMAND_DONE);
+
+	/* Address of the NVRAM to read from. */
+	REG_WR(bp, BNX2_NVM_ADDR, offset & BNX2_NVM_ADDR_NVM_ADDR_VALUE);
+
+	/* Issue an erase command. */
+	REG_WR(bp, BNX2_NVM_COMMAND, cmd);
+
+	/* Wait for completion. */
+	for (j = 0; j < NVRAM_TIMEOUT_COUNT; j++) {
+		u32 val;
+
+		udelay(5);
+
+		val = REG_RD(bp, BNX2_NVM_COMMAND);
+		if (val & BNX2_NVM_COMMAND_DONE)
+			break;
+	}
+
+	if (j >= NVRAM_TIMEOUT_COUNT)
+		return -EBUSY;
+
+	return 0;
+}
+
+static int
+bnx2_nvram_read_dword(struct bnx2 *bp, u32 offset, u8 *ret_val, u32 cmd_flags)
+{
+	u32 cmd;
+	int j;
+
+	/* Build the command word. */
+	cmd = BNX2_NVM_COMMAND_DOIT | cmd_flags;
+
+	/* Calculate an offset of a buffered flash, not needed for 5709. */
+	if (bp->flash_info->flags & BNX2_NV_TRANSLATE) {
+		offset = ((offset / bp->flash_info->page_size) <<
+			   bp->flash_info->page_bits) +
+			  (offset % bp->flash_info->page_size);
+	}
+
+	/* Need to clear DONE bit separately. */
+	REG_WR(bp, BNX2_NVM_COMMAND, BNX2_NVM_COMMAND_DONE);
+
+	/* Address of the NVRAM to read from. */
+	REG_WR(bp, BNX2_NVM_ADDR, offset & BNX2_NVM_ADDR_NVM_ADDR_VALUE);
+
+	/* Issue a read command. */
+	REG_WR(bp, BNX2_NVM_COMMAND, cmd);
+
+	/* Wait for completion. */
+	for (j = 0; j < NVRAM_TIMEOUT_COUNT; j++) {
+		u32 val;
+
+		udelay(5);
+
+		val = REG_RD(bp, BNX2_NVM_COMMAND);
+		if (val & BNX2_NVM_COMMAND_DONE) {
+			__be32 v = cpu_to_be32(REG_RD(bp, BNX2_NVM_READ));
+			memcpy(ret_val, &v, 4);
+			break;
+		}
+	}
+	if (j >= NVRAM_TIMEOUT_COUNT)
+		return -EBUSY;
+
+	return 0;
+}
+
+
+static int
+bnx2_nvram_write_dword(struct bnx2 *bp, u32 offset, u8 *val, u32 cmd_flags)
+{
+	u32 cmd;
+	__be32 val32;
+	int j;
+
+	/* Build the command word. */
+	cmd = BNX2_NVM_COMMAND_DOIT | BNX2_NVM_COMMAND_WR | cmd_flags;
+
+	/* Calculate an offset of a buffered flash, not needed for 5709. */
+	if (bp->flash_info->flags & BNX2_NV_TRANSLATE) {
+		offset = ((offset / bp->flash_info->page_size) <<
+			  bp->flash_info->page_bits) +
+			 (offset % bp->flash_info->page_size);
+	}
+
+	/* Need to clear DONE bit separately. */
+	REG_WR(bp, BNX2_NVM_COMMAND, BNX2_NVM_COMMAND_DONE);
+
+	memcpy(&val32, val, 4);
+
+	/* Write the data. */
+	REG_WR(bp, BNX2_NVM_WRITE, be32_to_cpu(val32));
+
+	/* Address of the NVRAM to write to. */
+	REG_WR(bp, BNX2_NVM_ADDR, offset & BNX2_NVM_ADDR_NVM_ADDR_VALUE);
+
+	/* Issue the write command. */
+	REG_WR(bp, BNX2_NVM_COMMAND, cmd);
+
+	/* Wait for completion. */
+	for (j = 0; j < NVRAM_TIMEOUT_COUNT; j++) {
+		udelay(5);
+
+		if (REG_RD(bp, BNX2_NVM_COMMAND) & BNX2_NVM_COMMAND_DONE)
+			break;
+	}
+	if (j >= NVRAM_TIMEOUT_COUNT)
+		return -EBUSY;
+
+	return 0;
+}
+
+static int
+bnx2_init_nvram(struct bnx2 *bp)
+{
+	u32 val;
+	int j, entry_count, rc = 0;
+	const struct flash_spec *flash;
+
+	if (CHIP_NUM(bp) == CHIP_NUM_5709) {
+		bp->flash_info = &flash_5709;
+		goto get_flash_size;
+	}
+
+	/* Determine the selected interface. */
+	val = REG_RD(bp, BNX2_NVM_CFG1);
+
+	entry_count = ARRAY_SIZE(flash_table);
+
+	if (val & 0x40000000) {
+
+		/* Flash interface has been reconfigured */
+		for (j = 0, flash = &flash_table[0]; j < entry_count;
+		     j++, flash++) {
+			if ((val & FLASH_BACKUP_STRAP_MASK) ==
+			    (flash->config1 & FLASH_BACKUP_STRAP_MASK)) {
+				bp->flash_info = flash;
+				break;
+			}
+		}
+	}
+	else {
+		u32 mask;
+		/* Not yet been reconfigured */
+
+		if (val & (1 << 23))
+			mask = FLASH_BACKUP_STRAP_MASK;
+		else
+			mask = FLASH_STRAP_MASK;
+
+		for (j = 0, flash = &flash_table[0]; j < entry_count;
+			j++, flash++) {
+
+			if ((val & mask) == (flash->strapping & mask)) {
+				bp->flash_info = flash;
+
+				/* Request access to the flash interface. */
+				if ((rc = bnx2_acquire_nvram_lock(bp)) != 0)
+					return rc;
+
+				/* Enable access to flash interface */
+				bnx2_enable_nvram_access(bp);
+
+				/* Reconfigure the flash interface */
+				REG_WR(bp, BNX2_NVM_CFG1, flash->config1);
+				REG_WR(bp, BNX2_NVM_CFG2, flash->config2);
+				REG_WR(bp, BNX2_NVM_CFG3, flash->config3);
+				REG_WR(bp, BNX2_NVM_WRITE1, flash->write1);
+
+				/* Disable access to flash interface */
+				bnx2_disable_nvram_access(bp);
+				bnx2_release_nvram_lock(bp);
+
+				break;
+			}
+		}
+	} /* if (val & 0x40000000) */
+
+	if (j == entry_count) {
+		bp->flash_info = NULL;
+		pr_alert("Unknown flash/EEPROM type\n");
+		return -ENODEV;
+	}
+
+get_flash_size:
+	val = bnx2_shmem_rd(bp, BNX2_SHARED_HW_CFG_CONFIG2);
+	val &= BNX2_SHARED_HW_CFG2_NVM_SIZE_MASK;
+	if (val)
+		bp->flash_size = val;
+	else
+		bp->flash_size = bp->flash_info->total_size;
+
+	return rc;
+}
+
+static int
+bnx2_nvram_read(struct bnx2 *bp, u32 offset, u8 *ret_buf,
+		int buf_size)
+{
+	int rc = 0;
+	u32 cmd_flags, offset32, len32, extra;
+
+	if (buf_size == 0)
+		return 0;
+
+	/* Request access to the flash interface. */
+	if ((rc = bnx2_acquire_nvram_lock(bp)) != 0)
+		return rc;
+
+	/* Enable access to flash interface */
+	bnx2_enable_nvram_access(bp);
+
+	len32 = buf_size;
+	offset32 = offset;
+	extra = 0;
+
+	cmd_flags = 0;
+
+	if (offset32 & 3) {
+		u8 buf[4];
+		u32 pre_len;
+
+		offset32 &= ~3;
+		pre_len = 4 - (offset & 3);
+
+		if (pre_len >= len32) {
+			pre_len = len32;
+			cmd_flags = BNX2_NVM_COMMAND_FIRST |
+				    BNX2_NVM_COMMAND_LAST;
+		}
+		else {
+			cmd_flags = BNX2_NVM_COMMAND_FIRST;
+		}
+
+		rc = bnx2_nvram_read_dword(bp, offset32, buf, cmd_flags);
+
+		if (rc)
+			return rc;
+
+		memcpy(ret_buf, buf + (offset & 3), pre_len);
+
+		offset32 += 4;
+		ret_buf += pre_len;
+		len32 -= pre_len;
+	}
+	if (len32 & 3) {
+		extra = 4 - (len32 & 3);
+		len32 = (len32 + 4) & ~3;
+	}
+
+	if (len32 == 4) {
+		u8 buf[4];
+
+		if (cmd_flags)
+			cmd_flags = BNX2_NVM_COMMAND_LAST;
+		else
+			cmd_flags = BNX2_NVM_COMMAND_FIRST |
+				    BNX2_NVM_COMMAND_LAST;
+
+		rc = bnx2_nvram_read_dword(bp, offset32, buf, cmd_flags);
+
+		memcpy(ret_buf, buf, 4 - extra);
+	}
+	else if (len32 > 0) {
+		u8 buf[4];
+
+		/* Read the first word. */
+		if (cmd_flags)
+			cmd_flags = 0;
+		else
+			cmd_flags = BNX2_NVM_COMMAND_FIRST;
+
+		rc = bnx2_nvram_read_dword(bp, offset32, ret_buf, cmd_flags);
+
+		/* Advance to the next dword. */
+		offset32 += 4;
+		ret_buf += 4;
+		len32 -= 4;
+
+		while (len32 > 4 && rc == 0) {
+			rc = bnx2_nvram_read_dword(bp, offset32, ret_buf, 0);
+
+			/* Advance to the next dword. */
+			offset32 += 4;
+			ret_buf += 4;
+			len32 -= 4;
+		}
+
+		if (rc)
+			return rc;
+
+		cmd_flags = BNX2_NVM_COMMAND_LAST;
+		rc = bnx2_nvram_read_dword(bp, offset32, buf, cmd_flags);
+
+		memcpy(ret_buf, buf, 4 - extra);
+	}
+
+	/* Disable access to flash interface */
+	bnx2_disable_nvram_access(bp);
+
+	bnx2_release_nvram_lock(bp);
+
+	return rc;
+}
+
+static int
+bnx2_nvram_write(struct bnx2 *bp, u32 offset, u8 *data_buf,
+		int buf_size)
+{
+	u32 written, offset32, len32;
+	u8 *buf, start[4], end[4], *align_buf = NULL, *flash_buffer = NULL;
+	int rc = 0;
+	int align_start, align_end;
+
+	buf = data_buf;
+	offset32 = offset;
+	len32 = buf_size;
+	align_start = align_end = 0;
+
+	if ((align_start = (offset32 & 3))) {
+		offset32 &= ~3;
+		len32 += align_start;
+		if (len32 < 4)
+			len32 = 4;
+		if ((rc = bnx2_nvram_read(bp, offset32, start, 4)))
+			return rc;
+	}
+
+	if (len32 & 3) {
+		align_end = 4 - (len32 & 3);
+		len32 += align_end;
+		if ((rc = bnx2_nvram_read(bp, offset32 + len32 - 4, end, 4)))
+			return rc;
+	}
+
+	if (align_start || align_end) {
+		align_buf = kmalloc(len32, GFP_KERNEL);
+		if (align_buf == NULL)
+			return -ENOMEM;
+		if (align_start) {
+			memcpy(align_buf, start, 4);
+		}
+		if (align_end) {
+			memcpy(align_buf + len32 - 4, end, 4);
+		}
+		memcpy(align_buf + align_start, data_buf, buf_size);
+		buf = align_buf;
+	}
+
+	if (!(bp->flash_info->flags & BNX2_NV_BUFFERED)) {
+		flash_buffer = kmalloc(264, GFP_KERNEL);
+		if (flash_buffer == NULL) {
+			rc = -ENOMEM;
+			goto nvram_write_end;
+		}
+	}
+
+	written = 0;
+	while ((written < len32) && (rc == 0)) {
+		u32 page_start, page_end, data_start, data_end;
+		u32 addr, cmd_flags;
+		int i;
+
+	        /* Find the page_start addr */
+		page_start = offset32 + written;
+		page_start -= (page_start % bp->flash_info->page_size);
+		/* Find the page_end addr */
+		page_end = page_start + bp->flash_info->page_size;
+		/* Find the data_start addr */
+		data_start = (written == 0) ? offset32 : page_start;
+		/* Find the data_end addr */
+		data_end = (page_end > offset32 + len32) ?
+			(offset32 + len32) : page_end;
+
+		/* Request access to the flash interface. */
+		if ((rc = bnx2_acquire_nvram_lock(bp)) != 0)
+			goto nvram_write_end;
+
+		/* Enable access to flash interface */
+		bnx2_enable_nvram_access(bp);
+
+		cmd_flags = BNX2_NVM_COMMAND_FIRST;
+		if (!(bp->flash_info->flags & BNX2_NV_BUFFERED)) {
+			int j;
+
+			/* Read the whole page into the buffer
+			 * (non-buffer flash only) */
+			for (j = 0; j < bp->flash_info->page_size; j += 4) {
+				if (j == (bp->flash_info->page_size - 4)) {
+					cmd_flags |= BNX2_NVM_COMMAND_LAST;
+				}
+				rc = bnx2_nvram_read_dword(bp,
+					page_start + j,
+					&flash_buffer[j],
+					cmd_flags);
+
+				if (rc)
+					goto nvram_write_end;
+
+				cmd_flags = 0;
+			}
+		}
+
+		/* Enable writes to flash interface (unlock write-protect) */
+		if ((rc = bnx2_enable_nvram_write(bp)) != 0)
+			goto nvram_write_end;
+
+		/* Loop to write back the buffer data from page_start to
+		 * data_start */
+		i = 0;
+		if (!(bp->flash_info->flags & BNX2_NV_BUFFERED)) {
+			/* Erase the page */
+			if ((rc = bnx2_nvram_erase_page(bp, page_start)) != 0)
+				goto nvram_write_end;
+
+			/* Re-enable the write again for the actual write */
+			bnx2_enable_nvram_write(bp);
+
+			for (addr = page_start; addr < data_start;
+				addr += 4, i += 4) {
+
+				rc = bnx2_nvram_write_dword(bp, addr,
+					&flash_buffer[i], cmd_flags);
+
+				if (rc != 0)
+					goto nvram_write_end;
+
+				cmd_flags = 0;
+			}
+		}
+
+		/* Loop to write the new data from data_start to data_end */
+		for (addr = data_start; addr < data_end; addr += 4, i += 4) {
+			if ((addr == page_end - 4) ||
+				((bp->flash_info->flags & BNX2_NV_BUFFERED) &&
+				 (addr == data_end - 4))) {
+
+				cmd_flags |= BNX2_NVM_COMMAND_LAST;
+			}
+			rc = bnx2_nvram_write_dword(bp, addr, buf,
+				cmd_flags);
+
+			if (rc != 0)
+				goto nvram_write_end;
+
+			cmd_flags = 0;
+			buf += 4;
+		}
+
+		/* Loop to write back the buffer data from data_end
+		 * to page_end */
+		if (!(bp->flash_info->flags & BNX2_NV_BUFFERED)) {
+			for (addr = data_end; addr < page_end;
+				addr += 4, i += 4) {
+
+				if (addr == page_end-4) {
+					cmd_flags = BNX2_NVM_COMMAND_LAST;
+                		}
+				rc = bnx2_nvram_write_dword(bp, addr,
+					&flash_buffer[i], cmd_flags);
+
+				if (rc != 0)
+					goto nvram_write_end;
+
+				cmd_flags = 0;
+			}
+		}
+
+		/* Disable writes to flash interface (lock write-protect) */
+		bnx2_disable_nvram_write(bp);
+
+		/* Disable access to flash interface */
+		bnx2_disable_nvram_access(bp);
+		bnx2_release_nvram_lock(bp);
+
+		/* Increment written */
+		written += data_end - data_start;
+	}
+
+nvram_write_end:
+	kfree(flash_buffer);
+	kfree(align_buf);
+	return rc;
+}
+
+static void
+bnx2_init_fw_cap(struct bnx2 *bp)
+{
+	u32 val, sig = 0;
+
+	bp->phy_flags &= ~BNX2_PHY_FLAG_REMOTE_PHY_CAP;
+	bp->flags &= ~BNX2_FLAG_CAN_KEEP_VLAN;
+
+	if (!(bp->flags & BNX2_FLAG_ASF_ENABLE))
+		bp->flags |= BNX2_FLAG_CAN_KEEP_VLAN;
+
+	val = bnx2_shmem_rd(bp, BNX2_FW_CAP_MB);
+	if ((val & BNX2_FW_CAP_SIGNATURE_MASK) != BNX2_FW_CAP_SIGNATURE)
+		return;
+
+	if ((val & BNX2_FW_CAP_CAN_KEEP_VLAN) == BNX2_FW_CAP_CAN_KEEP_VLAN) {
+		bp->flags |= BNX2_FLAG_CAN_KEEP_VLAN;
+		sig |= BNX2_DRV_ACK_CAP_SIGNATURE | BNX2_FW_CAP_CAN_KEEP_VLAN;
+	}
+
+	if ((bp->phy_flags & BNX2_PHY_FLAG_SERDES) &&
+	    (val & BNX2_FW_CAP_REMOTE_PHY_CAPABLE)) {
+		u32 link;
+
+		bp->phy_flags |= BNX2_PHY_FLAG_REMOTE_PHY_CAP;
+
+		link = bnx2_shmem_rd(bp, BNX2_LINK_STATUS);
+		if (link & BNX2_LINK_STATUS_SERDES_LINK)
+			bp->phy_port = PORT_FIBRE;
+		else
+			bp->phy_port = PORT_TP;
+
+		sig |= BNX2_DRV_ACK_CAP_SIGNATURE |
+		       BNX2_FW_CAP_REMOTE_PHY_CAPABLE;
+	}
+
+	if (netif_running(bp->dev) && sig)
+		bnx2_shmem_wr(bp, BNX2_DRV_ACK_CAP_MB, sig);
+}
+
+#if defined(__VMKLNX__)
+static void
+bnx2_setup_msix_tbl_cfg(struct bnx2 *bp)
+{
+	bnx2_reg_wr_ind_cfg(bp, BNX2_PCI_GRC_WINDOW_ADDR,
+			    BNX2_PCI_GRC_WINDOW_ADDR_SEP_WIN);
+
+	bnx2_reg_wr_ind_cfg(bp, BNX2_PCI_GRC_WINDOW2_ADDR,
+			    BNX2_MSIX_TABLE_ADDR);
+	bnx2_reg_wr_ind_cfg(bp, BNX2_PCI_GRC_WINDOW3_ADDR, BNX2_MSIX_PBA_ADDR);
+}
+#endif /* defined(__VMKLNX__) */
+
+static void
+bnx2_setup_msix_tbl(struct bnx2 *bp)
+{
+	REG_WR(bp, BNX2_PCI_GRC_WINDOW_ADDR, BNX2_PCI_GRC_WINDOW_ADDR_SEP_WIN);
+
+	REG_WR(bp, BNX2_PCI_GRC_WINDOW2_ADDR, BNX2_MSIX_TABLE_ADDR);
+	REG_WR(bp, BNX2_PCI_GRC_WINDOW3_ADDR, BNX2_MSIX_PBA_ADDR);
+}
+
+static int
+bnx2_reset_chip(struct bnx2 *bp, u32 reset_code)
+{
+	u32 val;
+	int i, rc = 0;
+	u8 old_port;
+
+	/* Wait for the current PCI transaction to complete before
+	 * issuing a reset. */
+	if ((CHIP_NUM(bp) == CHIP_NUM_5706) ||
+	    (CHIP_NUM(bp) == CHIP_NUM_5708)) {
+		REG_WR(bp, BNX2_MISC_ENABLE_CLR_BITS,
+		       BNX2_MISC_ENABLE_CLR_BITS_TX_DMA_ENABLE |
+		       BNX2_MISC_ENABLE_CLR_BITS_DMA_ENGINE_ENABLE |
+		       BNX2_MISC_ENABLE_CLR_BITS_RX_DMA_ENABLE |
+		       BNX2_MISC_ENABLE_CLR_BITS_HOST_COALESCE_ENABLE);
+		val = REG_RD(bp, BNX2_MISC_ENABLE_CLR_BITS);
+		udelay(5);
+	} else {  /* 5709 */
+		val = REG_RD(bp, BNX2_MISC_NEW_CORE_CTL);
+		val &= ~BNX2_MISC_NEW_CORE_CTL_DMA_ENABLE;
+		REG_WR(bp, BNX2_MISC_NEW_CORE_CTL, val);
+		val = REG_RD(bp, BNX2_MISC_NEW_CORE_CTL);
+
+		for (i = 0; i < 100; i++) {
+			bnx2_msleep(1);
+			val = REG_RD(bp, BNX2_PCICFG_DEVICE_CONTROL);
+			if (!(val & BNX2_PCICFG_DEVICE_STATUS_NO_PEND))
+				break;
+		}
+	}
+
+	/* Wait for the firmware to tell us it is ok to issue a reset. */
+	bnx2_fw_sync(bp, BNX2_DRV_MSG_DATA_WAIT0 | reset_code, 1, 1);
+
+	/* Deposit a driver reset signature so the firmware knows that
+	 * this is a soft reset. */
+	bnx2_shmem_wr(bp, BNX2_DRV_RESET_SIGNATURE,
+		      BNX2_DRV_RESET_SIGNATURE_MAGIC);
+
+#if defined(__VMKLNX__)
+#if (LINUX_VERSION_CODE >= 0x020611)
+	pci_save_state(bp->pdev);
+#endif
+#endif /* defined(__VMKLNX__) */
+
+	/* Do a dummy read to force the chip to complete all current transaction
+	 * before we issue a reset. */
+	val = REG_RD(bp, BNX2_MISC_ID);
+
+	if (CHIP_NUM(bp) == CHIP_NUM_5709) {
+		REG_WR(bp, BNX2_MISC_COMMAND, BNX2_MISC_COMMAND_SW_RESET);
+		REG_RD(bp, BNX2_MISC_COMMAND);
+		udelay(5);
+
+		val = BNX2_PCICFG_MISC_CONFIG_REG_WINDOW_ENA |
+		      BNX2_PCICFG_MISC_CONFIG_TARGET_MB_WORD_SWAP;
+
+		REG_WR(bp, BNX2_PCICFG_MISC_CONFIG, val);
+
+	} else {
+		val = BNX2_PCICFG_MISC_CONFIG_CORE_RST_REQ |
+		      BNX2_PCICFG_MISC_CONFIG_REG_WINDOW_ENA |
+		      BNX2_PCICFG_MISC_CONFIG_TARGET_MB_WORD_SWAP;
+
+		/* Chip reset. */
+		REG_WR(bp, BNX2_PCICFG_MISC_CONFIG, val);
+
+		/* Reading back any register after chip reset will hang the
+		 * bus on 5706 A0 and A1.  The msleep below provides plenty
+		 * of margin for write posting.
+		 */
+		if ((CHIP_ID(bp) == CHIP_ID_5706_A0) ||
+		    (CHIP_ID(bp) == CHIP_ID_5706_A1))
+			bnx2_msleep(20);
+
+		/* Reset takes approximate 30 usec */
+		for (i = 0; i < 10; i++) {
+			val = REG_RD(bp, BNX2_PCICFG_MISC_CONFIG);
+			if ((val & (BNX2_PCICFG_MISC_CONFIG_CORE_RST_REQ |
+				    BNX2_PCICFG_MISC_CONFIG_CORE_RST_BSY)) == 0)
+				break;
+			udelay(10);
+		}
+
+		if (val & (BNX2_PCICFG_MISC_CONFIG_CORE_RST_REQ |
+			   BNX2_PCICFG_MISC_CONFIG_CORE_RST_BSY)) {
+			pr_err("Chip reset did not complete\n");
+			return -EBUSY;
+		}
+	}
+
+#if defined(__VMKLNX__)
+	if (bp->flags & BNX2_FLAG_USING_MSIX)
+		bnx2_setup_msix_tbl_cfg(bp);
+
+#if (LINUX_VERSION_CODE >= 0x020611)
+	pci_restore_state(bp->pdev);
+#endif
+#endif /* defined(__VMKLNX__) */
+
+	/* Make sure byte swapping is properly configured. */
+	val = REG_RD(bp, BNX2_PCI_SWAP_DIAG0);
+	if (val != 0x01020304) {
+		pr_err("Chip not in correct endian mode\n");
+		return -ENODEV;
+	}
+
+	/* Wait for the firmware to finish its initialization. */
+	rc = bnx2_fw_sync(bp, BNX2_DRV_MSG_DATA_WAIT1 | reset_code, 1, 0);
+	if (rc)
+		return rc;
+
+	spin_lock_bh(&bp->phy_lock);
+	old_port = bp->phy_port;
+	bnx2_init_fw_cap(bp);
+	if ((bp->phy_flags & BNX2_PHY_FLAG_REMOTE_PHY_CAP) &&
+	    old_port != bp->phy_port)
+		bnx2_set_default_remote_link(bp);
+	spin_unlock_bh(&bp->phy_lock);
+
+	if (CHIP_ID(bp) == CHIP_ID_5706_A0) {
+		/* Adjust the voltage regular to two steps lower.  The default
+		 * of this register is 0x0000000e. */
+		REG_WR(bp, BNX2_MISC_VREG_CONTROL, 0x000000fa);
+
+		/* Remove bad rbuf memory from the free pool. */
+		rc = bnx2_alloc_bad_rbuf(bp);
+	}
+
+	if (bp->flags & BNX2_FLAG_USING_MSIX) {
+		bnx2_setup_msix_tbl(bp);
+		/* Prevent MSIX table reads and write from timing out */
+		REG_WR(bp, BNX2_MISC_ECO_HW_CTL,
+			BNX2_MISC_ECO_HW_CTL_LARGE_GRC_TMOUT_EN);
+	}
+
+	return rc;
+}
+
+static int
+bnx2_init_chip(struct bnx2 *bp)
+{
+	u32 val, mtu;
+	int rc, i;
+
+	/* Make sure the interrupt is not active. */
+	REG_WR(bp, BNX2_PCICFG_INT_ACK_CMD, BNX2_PCICFG_INT_ACK_CMD_MASK_INT);
+
+	val = BNX2_DMA_CONFIG_DATA_BYTE_SWAP |
+	      BNX2_DMA_CONFIG_DATA_WORD_SWAP |
+#ifdef __BIG_ENDIAN
+	      BNX2_DMA_CONFIG_CNTL_BYTE_SWAP |
+#endif
+	      BNX2_DMA_CONFIG_CNTL_WORD_SWAP |
+	      DMA_READ_CHANS << 12 |
+	      DMA_WRITE_CHANS << 16;
+
+	val |= (0x2 << 20) | (1 << 11);
+
+	if ((bp->flags & BNX2_FLAG_PCIX) && (bp->bus_speed_mhz == 133))
+		val |= (1 << 23);
+
+	if ((CHIP_NUM(bp) == CHIP_NUM_5706) &&
+	    (CHIP_ID(bp) != CHIP_ID_5706_A0) && !(bp->flags & BNX2_FLAG_PCIX))
+		val |= BNX2_DMA_CONFIG_CNTL_PING_PONG_DMA;
+
+	REG_WR(bp, BNX2_DMA_CONFIG, val);
+
+	if (CHIP_ID(bp) == CHIP_ID_5706_A0) {
+		val = REG_RD(bp, BNX2_TDMA_CONFIG);
+		val |= BNX2_TDMA_CONFIG_ONE_DMA;
+		REG_WR(bp, BNX2_TDMA_CONFIG, val);
+	}
+
+	if (bp->flags & BNX2_FLAG_PCIX) {
+		u16 val16;
+
+		pci_read_config_word(bp->pdev, bp->pcix_cap + PCI_X_CMD,
+				     &val16);
+		pci_write_config_word(bp->pdev, bp->pcix_cap + PCI_X_CMD,
+				      val16 & ~PCI_X_CMD_ERO);
+	}
+
+	REG_WR(bp, BNX2_MISC_ENABLE_SET_BITS,
+	       BNX2_MISC_ENABLE_SET_BITS_HOST_COALESCE_ENABLE |
+	       BNX2_MISC_ENABLE_STATUS_BITS_RX_V2P_ENABLE |
+	       BNX2_MISC_ENABLE_STATUS_BITS_CONTEXT_ENABLE);
+
+	/* Initialize context mapping and zero out the quick contexts.  The
+	 * context block must have already been enabled. */
+	if (CHIP_NUM(bp) == CHIP_NUM_5709) {
+		rc = bnx2_init_5709_context(bp);
+		if (rc)
+			return rc;
+	} else
+		bnx2_init_context(bp);
+
+	if ((rc = bnx2_init_cpus(bp)) != 0)
+		return rc;
+
+	bnx2_init_nvram(bp);
+
+	bnx2_set_mac_addr(bp, bp->dev->dev_addr, 0);
+
+	val = REG_RD(bp, BNX2_MQ_CONFIG);
+	val &= ~BNX2_MQ_CONFIG_KNL_BYP_BLK_SIZE;
+	val |= BNX2_MQ_CONFIG_KNL_BYP_BLK_SIZE_256;
+	if (CHIP_NUM(bp) == CHIP_NUM_5709) {
+		val |= BNX2_MQ_CONFIG_BIN_MQ_MODE;
+		if (CHIP_REV(bp) == CHIP_REV_Ax)
+			val |= BNX2_MQ_CONFIG_HALT_DIS;
+	}
+
+	REG_WR(bp, BNX2_MQ_CONFIG, val);
+
+	val = 0x10000 + (MAX_CID_CNT * MB_KERNEL_CTX_SIZE);
+	REG_WR(bp, BNX2_MQ_KNL_BYP_WIND_START, val);
+	REG_WR(bp, BNX2_MQ_KNL_WIND_END, val);
+
+	val = (BCM_PAGE_BITS - 8) << 24;
+	REG_WR(bp, BNX2_RV2P_CONFIG, val);
+
+	/* Configure page size. */
+	val = REG_RD(bp, BNX2_TBDR_CONFIG);
+	val &= ~BNX2_TBDR_CONFIG_PAGE_SIZE;
+	val |= (BCM_PAGE_BITS - 8) << 24 | 0x40;
+	REG_WR(bp, BNX2_TBDR_CONFIG, val);
+
+	val = bp->mac_addr[0] +
+	      (bp->mac_addr[1] << 8) +
+	      (bp->mac_addr[2] << 16) +
+	      bp->mac_addr[3] +
+	      (bp->mac_addr[4] << 8) +
+	      (bp->mac_addr[5] << 16);
+	REG_WR(bp, BNX2_EMAC_BACKOFF_SEED, val);
+
+	/* Program the MTU.  Also include 4 bytes for CRC32. */
+	mtu = bp->dev->mtu;
+	val = mtu + ETH_HLEN + ETH_FCS_LEN;
+	if (val > (MAX_ETHERNET_PACKET_SIZE + 4))
+		val |= BNX2_EMAC_RX_MTU_SIZE_JUMBO_ENA;
+	REG_WR(bp, BNX2_EMAC_RX_MTU_SIZE, val);
+
+	if (mtu < 1500)
+		mtu = 1500;
+
+	bnx2_reg_wr_ind(bp, BNX2_RBUF_CONFIG, BNX2_RBUF_CONFIG_VAL(mtu));
+	bnx2_reg_wr_ind(bp, BNX2_RBUF_CONFIG2, BNX2_RBUF_CONFIG2_VAL(mtu));
+	bnx2_reg_wr_ind(bp, BNX2_RBUF_CONFIG3, BNX2_RBUF_CONFIG3_VAL(mtu));
+
+	memset(bp->bnx2_napi[0].status_blk.msi, 0, bp->status_stats_size);
+	for (i = 0; i < BNX2_MAX_MSIX_VEC; i++)
+		bp->bnx2_napi[i].last_status_idx = 0;
+
+	bp->idle_chk_status_idx = 0xffff;
+
+	bp->rx_mode = BNX2_EMAC_RX_MODE_SORT_MODE;
+
+	/* Set up how to generate a link change interrupt. */
+	REG_WR(bp, BNX2_EMAC_ATTENTION_ENA, BNX2_EMAC_ATTENTION_ENA_LINK);
+
+	REG_WR(bp, BNX2_HC_STATUS_ADDR_L,
+	       (u64) bp->status_blk_mapping & 0xffffffff);
+	REG_WR(bp, BNX2_HC_STATUS_ADDR_H, (u64) bp->status_blk_mapping >> 32);
+
+	REG_WR(bp, BNX2_HC_STATISTICS_ADDR_L,
+	       (u64) bp->stats_blk_mapping & 0xffffffff);
+	REG_WR(bp, BNX2_HC_STATISTICS_ADDR_H,
+	       (u64) bp->stats_blk_mapping >> 32);
+
+	REG_WR(bp, BNX2_HC_TX_QUICK_CONS_TRIP,
+	       (bp->tx_quick_cons_trip_int << 16) | bp->tx_quick_cons_trip);
+
+	REG_WR(bp, BNX2_HC_RX_QUICK_CONS_TRIP,
+	       (bp->rx_quick_cons_trip_int << 16) | bp->rx_quick_cons_trip);
+
+	REG_WR(bp, BNX2_HC_COMP_PROD_TRIP,
+	       (bp->comp_prod_trip_int << 16) | bp->comp_prod_trip);
+
+	REG_WR(bp, BNX2_HC_TX_TICKS, (bp->tx_ticks_int << 16) | bp->tx_ticks);
+
+	REG_WR(bp, BNX2_HC_RX_TICKS, (bp->rx_ticks_int << 16) | bp->rx_ticks);
+
+	REG_WR(bp, BNX2_HC_COM_TICKS,
+	       (bp->com_ticks_int << 16) | bp->com_ticks);
+
+	REG_WR(bp, BNX2_HC_CMD_TICKS,
+	       (bp->cmd_ticks_int << 16) | bp->cmd_ticks);
+
+	if (bp->flags & BNX2_FLAG_BROKEN_STATS)
+		REG_WR(bp, BNX2_HC_STATS_TICKS, 0);
+	else
+		REG_WR(bp, BNX2_HC_STATS_TICKS, bp->stats_ticks);
+	REG_WR(bp, BNX2_HC_STAT_COLLECT_TICKS, 0xbb8);  /* 3ms */
+
+	if (CHIP_ID(bp) == CHIP_ID_5706_A1)
+		val = BNX2_HC_CONFIG_COLLECT_STATS;
+	else {
+		val = BNX2_HC_CONFIG_RX_TMR_MODE | BNX2_HC_CONFIG_TX_TMR_MODE |
+		      BNX2_HC_CONFIG_COLLECT_STATS;
+	}
+
+	if (bp->flags & BNX2_FLAG_USING_MSIX) {
+		REG_WR(bp, BNX2_HC_MSIX_BIT_VECTOR,
+		       BNX2_HC_MSIX_BIT_VECTOR_VAL);
+
+		val |= BNX2_HC_CONFIG_SB_ADDR_INC_128B;
+	}
+
+	if (bp->flags & BNX2_FLAG_ONE_SHOT_MSI)
+		val |= BNX2_HC_CONFIG_ONE_SHOT | BNX2_HC_CONFIG_USE_INT_PARAM;
+
+	REG_WR(bp, BNX2_HC_CONFIG, val);
+
+	if (bp->rx_ticks < 25)
+		bnx2_reg_wr_ind(bp, BNX2_FW_RX_LOW_LATENCY, 1);
+	else
+		bnx2_reg_wr_ind(bp, BNX2_FW_RX_LOW_LATENCY, 0);
+
+	for (i = 1; i < bp->irq_nvecs; i++) {
+		u32 base = ((i - 1) * BNX2_HC_SB_CONFIG_SIZE) +
+			   BNX2_HC_SB_CONFIG_1;
+
+		REG_WR(bp, base,
+			BNX2_HC_SB_CONFIG_1_TX_TMR_MODE |
+			BNX2_HC_SB_CONFIG_1_RX_TMR_MODE |
+			BNX2_HC_SB_CONFIG_1_ONE_SHOT);
+
+		REG_WR(bp, base + BNX2_HC_TX_QUICK_CONS_TRIP_OFF,
+			(bp->tx_quick_cons_trip_int << 16) |
+			 bp->tx_quick_cons_trip);
+
+		REG_WR(bp, base + BNX2_HC_TX_TICKS_OFF,
+			(bp->tx_ticks_int << 16) | bp->tx_ticks);
+
+		REG_WR(bp, base + BNX2_HC_RX_QUICK_CONS_TRIP_OFF,
+		       (bp->rx_quick_cons_trip_int << 16) |
+			bp->rx_quick_cons_trip);
+
+		REG_WR(bp, base + BNX2_HC_RX_TICKS_OFF,
+			(bp->rx_ticks_int << 16) | bp->rx_ticks);
+	}
+
+	/* Clear internal stats counters. */
+	REG_WR(bp, BNX2_HC_COMMAND, BNX2_HC_COMMAND_CLR_STAT_NOW);
+
+	REG_WR(bp, BNX2_HC_ATTN_BITS_ENABLE, STATUS_ATTN_EVENTS);
+
+	/* Initialize the receive filter. */
+	bnx2_set_rx_mode(bp->dev);
+
+	if (CHIP_NUM(bp) == CHIP_NUM_5709) {
+		val = REG_RD(bp, BNX2_MISC_NEW_CORE_CTL);
+		val |= BNX2_MISC_NEW_CORE_CTL_DMA_ENABLE;
+		REG_WR(bp, BNX2_MISC_NEW_CORE_CTL, val);
+	}
+	rc = bnx2_fw_sync(bp, BNX2_DRV_MSG_DATA_WAIT2 | BNX2_DRV_MSG_CODE_RESET,
+			  1, 0);
+
+	REG_WR(bp, BNX2_MISC_ENABLE_SET_BITS, BNX2_MISC_ENABLE_DEFAULT);
+	REG_RD(bp, BNX2_MISC_ENABLE_SET_BITS);
+
+	udelay(20);
+
+	bp->hc_cmd = REG_RD(bp, BNX2_HC_COMMAND);
+
+	return rc;
+}
+
+static void
+bnx2_clear_ring_states(struct bnx2 *bp)
+{
+	struct bnx2_napi *bnapi;
+	struct bnx2_tx_ring_info *txr;
+	struct bnx2_rx_ring_info *rxr;
+	int i;
+
+	for (i = 0; i < BNX2_MAX_MSIX_VEC; i++) {
+		bnapi = &bp->bnx2_napi[i];
+		txr = &bnapi->tx_ring;
+		rxr = &bnapi->rx_ring;
+
+		txr->tx_cons = 0;
+		txr->hw_tx_cons = 0;
+		rxr->rx_prod_bseq = 0;
+		rxr->rx_prod = 0;
+		rxr->rx_cons = 0;
+		rxr->rx_pg_prod = 0;
+		rxr->rx_pg_cons = 0;
+	}
+}
+
+static void
+bnx2_init_tx_context(struct bnx2 *bp, u32 cid, struct bnx2_tx_ring_info *txr)
+{
+	u32 val, offset0, offset1, offset2, offset3;
+	u32 cid_addr = GET_CID_ADDR(cid);
+
+	if (CHIP_NUM(bp) == CHIP_NUM_5709) {
+		offset0 = BNX2_L2CTX_TYPE_XI;
+		offset1 = BNX2_L2CTX_CMD_TYPE_XI;
+		offset2 = BNX2_L2CTX_TBDR_BHADDR_HI_XI;
+		offset3 = BNX2_L2CTX_TBDR_BHADDR_LO_XI;
+	} else {
+		offset0 = BNX2_L2CTX_TYPE;
+		offset1 = BNX2_L2CTX_CMD_TYPE;
+		offset2 = BNX2_L2CTX_TBDR_BHADDR_HI;
+		offset3 = BNX2_L2CTX_TBDR_BHADDR_LO;
+	}
+	val = BNX2_L2CTX_TYPE_TYPE_L2 | BNX2_L2CTX_TYPE_SIZE_L2;
+	bnx2_ctx_wr(bp, cid_addr, offset0, val);
+
+	val = BNX2_L2CTX_CMD_TYPE_TYPE_L2 | (8 << 16);
+	bnx2_ctx_wr(bp, cid_addr, offset1, val);
+
+	val = (u64) txr->tx_desc_mapping >> 32;
+	bnx2_ctx_wr(bp, cid_addr, offset2, val);
+
+	val = (u64) txr->tx_desc_mapping & 0xffffffff;
+	bnx2_ctx_wr(bp, cid_addr, offset3, val);
+}
+
+static void
+bnx2_init_tx_ring(struct bnx2 *bp, int ring_num)
+{
+	struct tx_bd *txbd;
+	u32 cid = TX_CID;
+	struct bnx2_napi *bnapi;
+	struct bnx2_tx_ring_info *txr;
+
+	bnapi = &bp->bnx2_napi[ring_num];
+	txr = &bnapi->tx_ring;
+
+	if (ring_num == 0)
+		cid = TX_CID;
+	else
+		cid = TX_TSS_CID + ring_num - 1;
+
+	bp->tx_wake_thresh = bp->tx_ring_size / 2;
+
+	txbd = &txr->tx_desc_ring[MAX_TX_DESC_CNT];
+
+	txbd->tx_bd_haddr_hi = (u64) txr->tx_desc_mapping >> 32;
+	txbd->tx_bd_haddr_lo = (u64) txr->tx_desc_mapping & 0xffffffff;
+
+	txr->tx_prod = 0;
+	txr->tx_prod_bseq = 0;
+
+	txr->tx_bidx_addr = MB_GET_CID_ADDR(cid) + BNX2_L2CTX_TX_HOST_BIDX;
+	txr->tx_bseq_addr = MB_GET_CID_ADDR(cid) + BNX2_L2CTX_TX_HOST_BSEQ;
+
+	bnx2_init_tx_context(bp, cid, txr);
+}
+
+static void
+bnx2_init_rxbd_rings(struct rx_bd *rx_ring[], dma_addr_t dma[], u32 buf_size,
+		     int num_rings)
+{
+	int i;
+	struct rx_bd *rxbd;
+
+	for (i = 0; i < num_rings; i++) {
+		int j;
+
+		rxbd = &rx_ring[i][0];
+		for (j = 0; j < MAX_RX_DESC_CNT; j++, rxbd++) {
+			rxbd->rx_bd_len = buf_size;
+			rxbd->rx_bd_flags = RX_BD_FLAGS_START | RX_BD_FLAGS_END;
+		}
+		if (i == (num_rings - 1))
+			j = 0;
+		else
+			j = i + 1;
+		rxbd->rx_bd_haddr_hi = (u64) dma[j] >> 32;
+		rxbd->rx_bd_haddr_lo = (u64) dma[j] & 0xffffffff;
+	}
+}
+
+static void
+bnx2_init_rx_ring(struct bnx2 *bp, int ring_num)
+{
+	int i;
+	u16 prod, ring_prod;
+	u32 cid, rx_cid_addr, val;
+	struct bnx2_napi *bnapi = &bp->bnx2_napi[ring_num];
+	struct bnx2_rx_ring_info *rxr = &bnapi->rx_ring;
+
+	if (ring_num == 0)
+		cid = RX_CID;
+	else
+		cid = RX_RSS_CID + ring_num - 1;
+
+	rx_cid_addr = GET_CID_ADDR(cid);
+
+	bnx2_init_rxbd_rings(rxr->rx_desc_ring, rxr->rx_desc_mapping,
+			     bp->rx_buf_use_size, bp->rx_max_ring);
+
+	bnx2_init_rx_context(bp, cid);
+
+	if (CHIP_NUM(bp) == CHIP_NUM_5709) {
+		val = REG_RD(bp, BNX2_MQ_MAP_L2_5);
+		REG_WR(bp, BNX2_MQ_MAP_L2_5, val | BNX2_MQ_MAP_L2_5_ARM);
+
+#if defined(BNX2_ENABLE_NETQUEUE)
+		/*  Set in the RX context the proper CID location
+		 *  for the completion
+		 */
+		if(BNX2_NETQUEUE_ENABLED(bp))
+			bnx2_ctx_wr(bp, rx_cid_addr, 0x04, 1 << 16);
+#endif
+	}
+
+	bnx2_ctx_wr(bp, rx_cid_addr, BNX2_L2CTX_PG_BUF_SIZE, 0);
+	if (bp->rx_pg_ring_size) {
+		bnx2_init_rxbd_rings(rxr->rx_pg_desc_ring,
+				     rxr->rx_pg_desc_mapping,
+				     PAGE_SIZE, bp->rx_max_pg_ring);
+		val = (bp->rx_buf_use_size << 16) | PAGE_SIZE;
+		bnx2_ctx_wr(bp, rx_cid_addr, BNX2_L2CTX_PG_BUF_SIZE, val);
+		bnx2_ctx_wr(bp, rx_cid_addr, BNX2_L2CTX_RBDC_KEY,
+		       BNX2_L2CTX_RBDC_JUMBO_KEY - ring_num);
+
+		val = (u64) rxr->rx_pg_desc_mapping[0] >> 32;
+		bnx2_ctx_wr(bp, rx_cid_addr, BNX2_L2CTX_NX_PG_BDHADDR_HI, val);
+
+		val = (u64) rxr->rx_pg_desc_mapping[0] & 0xffffffff;
+		bnx2_ctx_wr(bp, rx_cid_addr, BNX2_L2CTX_NX_PG_BDHADDR_LO, val);
+
+		if (CHIP_NUM(bp) == CHIP_NUM_5709)
+			REG_WR(bp, BNX2_MQ_MAP_L2_3, BNX2_MQ_MAP_L2_3_DEFAULT);
+	}
+
+	val = (u64) rxr->rx_desc_mapping[0] >> 32;
+	bnx2_ctx_wr(bp, rx_cid_addr, BNX2_L2CTX_NX_BDHADDR_HI, val);
+
+	val = (u64) rxr->rx_desc_mapping[0] & 0xffffffff;
+	bnx2_ctx_wr(bp, rx_cid_addr, BNX2_L2CTX_NX_BDHADDR_LO, val);
+
+	ring_prod = prod = rxr->rx_pg_prod;
+	for (i = 0; i < bp->rx_pg_ring_size; i++) {
+		if (bnx2_alloc_rx_page(bp, rxr, ring_prod, GFP_KERNEL) < 0) {
+			netdev_warn(bp->dev, "init'ed rx page ring %d with %d/%d pages only\n",
+				    ring_num, i, bp->rx_pg_ring_size);
+			break;
+		}
+		prod = NEXT_RX_BD(prod);
+		ring_prod = RX_PG_RING_IDX(prod);
+	}
+	rxr->rx_pg_prod = prod;
+
+	ring_prod = prod = rxr->rx_prod;
+	for (i = 0; i < bp->rx_ring_size; i++) {
+		if (bnx2_alloc_rx_skb(bp, rxr, ring_prod, GFP_KERNEL) < 0) {
+			netdev_warn(bp->dev, "init'ed rx ring %d with %d/%d skbs only\n",
+				    ring_num, i, bp->rx_ring_size);
+			break;
+		}
+		prod = NEXT_RX_BD(prod);
+		ring_prod = RX_RING_IDX(prod);
+	}
+	rxr->rx_prod = prod;
+
+	rxr->rx_bidx_addr = MB_GET_CID_ADDR(cid) + BNX2_L2CTX_HOST_BDIDX;
+	rxr->rx_bseq_addr = MB_GET_CID_ADDR(cid) + BNX2_L2CTX_HOST_BSEQ;
+	rxr->rx_pg_bidx_addr = MB_GET_CID_ADDR(cid) + BNX2_L2CTX_HOST_PG_BDIDX;
+
+	REG_WR16(bp, rxr->rx_pg_bidx_addr, rxr->rx_pg_prod);
+	REG_WR16(bp, rxr->rx_bidx_addr, prod);
+
+	REG_WR(bp, rxr->rx_bseq_addr, rxr->rx_prod_bseq);
+}
+
+static void
+bnx2_init_all_rings(struct bnx2 *bp)
+{
+	int i;
+	u32 val;
+
+	bnx2_clear_ring_states(bp);
+
+	REG_WR(bp, BNX2_TSCH_TSS_CFG, 0);
+	for (i = 0; i < bp->num_tx_rings; i++)
+		bnx2_init_tx_ring(bp, i);
+
+	if (bp->num_tx_rings > 1)
+		REG_WR(bp, BNX2_TSCH_TSS_CFG, ((bp->num_tx_rings - 1) << 24) |
+		       (TX_TSS_CID << 7));
+
+	REG_WR(bp, BNX2_RLUP_RSS_CONFIG, 0);
+	bnx2_reg_wr_ind(bp, BNX2_RXP_SCRATCH_RSS_TBL_SZ, 0);
+
+	for (i = 0; i < bp->num_rx_rings; i++)
+		bnx2_init_rx_ring(bp, i);
+
+	if (bp->num_rx_rings > 1) {
+		u32 tbl_32 = 0;
+
+		for (i = 0; i < BNX2_RXP_SCRATCH_RSS_TBL_MAX_ENTRIES; i++) {
+			int shift = (i % 8) << 2;
+
+			tbl_32 |= (i % (bp->num_rx_rings - 1)) << shift;
+			if ((i % 8) == 7) {
+				REG_WR(bp, BNX2_RLUP_RSS_DATA, tbl_32);
+				REG_WR(bp, BNX2_RLUP_RSS_COMMAND, (i >> 3) |
+					BNX2_RLUP_RSS_COMMAND_RSS_WRITE_MASK |
+					BNX2_RLUP_RSS_COMMAND_WRITE |
+					BNX2_RLUP_RSS_COMMAND_HASH_MASK);
+				tbl_32 = 0;
+			}
+		}
+
+		val = BNX2_RLUP_RSS_CONFIG_IPV4_RSS_TYPE_ALL_XI |
+		      BNX2_RLUP_RSS_CONFIG_IPV6_RSS_TYPE_ALL_XI;
+
+		REG_WR(bp, BNX2_RLUP_RSS_CONFIG, val);
+
+	}
+}
+
+static u32 bnx2_find_max_ring(u32 ring_size, u32 max_size)
+{
+	u32 max, num_rings = 1;
+
+	while (ring_size > MAX_RX_DESC_CNT) {
+		ring_size -= MAX_RX_DESC_CNT;
+		num_rings++;
+	}
+	/* round to next power of 2 */
+	max = max_size;
+	while ((max & num_rings) == 0)
+		max >>= 1;
+
+	if (num_rings != max)
+		max <<= 1;
+
+	return max;
+}
+
+static void
+bnx2_set_rx_ring_size(struct bnx2 *bp, u32 size)
+{
+	u32 rx_size, rx_space;
+
+	/* 8 for CRC and VLAN */
+	rx_size = bp->dev->mtu + ETH_HLEN + BNX2_RX_OFFSET + 8;
+
+	rx_space = SKB_DATA_ALIGN(rx_size + BNX2_RX_ALIGN) + NET_SKB_PAD +
+		sizeof(struct skb_shared_info);
+
+	bp->rx_copy_thresh = BNX2_RX_COPY_THRESH;
+	bp->rx_pg_ring_size = 0;
+	bp->rx_max_pg_ring = 0;
+	bp->rx_max_pg_ring_idx = 0;
+#if !defined(__VMKLNX__)
+	if ((rx_space > PAGE_SIZE) && !(bp->flags & BNX2_FLAG_JUMBO_BROKEN)) {
+		int pages = PAGE_ALIGN(bp->dev->mtu - 40) >> PAGE_SHIFT;
+
+		u32 jumbo_size = size * pages;
+		if (jumbo_size > MAX_TOTAL_RX_PG_DESC_CNT)
+			jumbo_size = MAX_TOTAL_RX_PG_DESC_CNT;
+
+		bp->rx_pg_ring_size = jumbo_size;
+		bp->rx_max_pg_ring = bnx2_find_max_ring(jumbo_size,
+							MAX_RX_PG_RINGS);
+		bp->rx_max_pg_ring_idx = (bp->rx_max_pg_ring * RX_DESC_CNT) - 1;
+		rx_size = BNX2_RX_COPY_THRESH + BNX2_RX_OFFSET;
+		bp->rx_copy_thresh = 0;
+	}
+#endif
+
+	bp->rx_buf_use_size = rx_size;
+	/* hw alignment */
+	bp->rx_buf_size = bp->rx_buf_use_size + BNX2_RX_ALIGN;
+	bp->rx_jumbo_thresh = rx_size - BNX2_RX_OFFSET;
+	bp->rx_ring_size = size;
+	bp->rx_max_ring = bnx2_find_max_ring(size, MAX_RX_RINGS);
+	bp->rx_max_ring_idx = (bp->rx_max_ring * RX_DESC_CNT) - 1;
+}
+
+static void
+bnx2_free_tx_skbs(struct bnx2 *bp)
+{
+	int i;
+
+	for (i = 0; i < bp->num_tx_rings; i++) {
+		struct bnx2_napi *bnapi = &bp->bnx2_napi[i];
+		struct bnx2_tx_ring_info *txr = &bnapi->tx_ring;
+		int j;
+
+		if (txr->tx_buf_ring == NULL)
+			continue;
+
+		for (j = 0; j < TX_DESC_CNT; ) {
+			struct sw_tx_bd *tx_buf = &txr->tx_buf_ring[j];
+			struct sk_buff *skb = tx_buf->skb;
+			int k, last;
+
+			if (skb == NULL) {
+				j++;
+				continue;
+			}
+
+#if (LINUX_VERSION_CODE >= 0x02061b)
+			dma_unmap_single(&bp->pdev->dev,
+#else
+			pci_unmap_single(bp->pdev,
+#endif
+					 dma_unmap_addr(tx_buf, mapping),
+					 skb_headlen(skb),
+					 PCI_DMA_TODEVICE);
+
+			tx_buf->skb = NULL;
+
+			last = tx_buf->nr_frags;
+			j++;
+			for (k = 0; k < last; k++, j++) {
+				tx_buf = &txr->tx_buf_ring[TX_RING_IDX(j)];
+#if (LINUX_VERSION_CODE >= 0x02061b)
+				dma_unmap_page(&bp->pdev->dev,
+#else
+				pci_unmap_page(bp->pdev,
+#endif
+					dma_unmap_addr(tx_buf, mapping),
+					skb_shinfo(skb)->frags[k].size,
+					PCI_DMA_TODEVICE);
+			}
+			dev_kfree_skb(skb);
+		}
+	}
+}
+
+static void
+bnx2_free_rx_skbs(struct bnx2 *bp)
+{
+	int i;
+
+	for (i = 0; i < bp->num_rx_rings; i++) {
+		struct bnx2_napi *bnapi = &bp->bnx2_napi[i];
+		struct bnx2_rx_ring_info *rxr = &bnapi->rx_ring;
+		int j;
+
+		if (rxr->rx_buf_ring == NULL)
+			return;
+
+		for (j = 0; j < bp->rx_max_ring_idx; j++) {
+			struct sw_bd *rx_buf = &rxr->rx_buf_ring[j];
+			struct sk_buff *skb = rx_buf->skb;
+
+			if (skb == NULL)
+				continue;
+
+#if (LINUX_VERSION_CODE >= 0x02061b)
+			dma_unmap_single(&bp->pdev->dev,
+#else
+			pci_unmap_single(bp->pdev,
+#endif
+					 dma_unmap_addr(rx_buf, mapping),
+					 bp->rx_buf_use_size,
+					 PCI_DMA_FROMDEVICE);
+
+			rx_buf->skb = NULL;
+
+			dev_kfree_skb(skb);
+		}
+		for (j = 0; j < bp->rx_max_pg_ring_idx; j++)
+			bnx2_free_rx_page(bp, rxr, j);
+	}
+}
+
+static void
+bnx2_free_skbs(struct bnx2 *bp)
+{
+	bnx2_free_tx_skbs(bp);
+	bnx2_free_rx_skbs(bp);
+}
+
+static int
+bnx2_reset_nic(struct bnx2 *bp, u32 reset_code)
+{
+	int rc;
+
+	rc = bnx2_reset_chip(bp, reset_code);
+	bnx2_free_skbs(bp);
+	if (rc)
+		return rc;
+
+	if ((rc = bnx2_init_chip(bp)) != 0)
+		return rc;
+
+	bnx2_init_all_rings(bp);
+	return 0;
+}
+
+static int
+bnx2_init_nic(struct bnx2 *bp, int reset_phy)
+{
+	int rc;
+
+	if ((rc = bnx2_reset_nic(bp, BNX2_DRV_MSG_CODE_RESET)) != 0)
+		return rc;
+
+	spin_lock_bh(&bp->phy_lock);
+	bnx2_init_phy(bp, reset_phy);
+	bnx2_set_link(bp);
+	if (bp->phy_flags & BNX2_PHY_FLAG_REMOTE_PHY_CAP)
+		bnx2_remote_phy_event(bp);
+	spin_unlock_bh(&bp->phy_lock);
+	return 0;
+}
+
+static int
+bnx2_shutdown_chip(struct bnx2 *bp)
+{
+	u32 reset_code;
+
+	if (bp->flags & BNX2_FLAG_NO_WOL)
+		reset_code = BNX2_DRV_MSG_CODE_UNLOAD_LNK_DN;
+	else if (bp->wol)
+		reset_code = BNX2_DRV_MSG_CODE_SUSPEND_WOL;
+	else
+		reset_code = BNX2_DRV_MSG_CODE_SUSPEND_NO_WOL;
+
+	return bnx2_reset_chip(bp, reset_code);
+}
+
+static int
+bnx2_test_registers(struct bnx2 *bp)
+{
+	int ret;
+	int i, is_5709;
+	static const struct {
+		u16   offset;
+		u16   flags;
+#define BNX2_FL_NOT_5709	1
+		u32   rw_mask;
+		u32   ro_mask;
+	} reg_tbl[] = {
+		{ 0x006c, 0, 0x00000000, 0x0000003f },
+		{ 0x0090, 0, 0xffffffff, 0x00000000 },
+		{ 0x0094, 0, 0x00000000, 0x00000000 },
+
+		{ 0x0404, BNX2_FL_NOT_5709, 0x00003f00, 0x00000000 },
+		{ 0x0418, BNX2_FL_NOT_5709, 0x00000000, 0xffffffff },
+		{ 0x041c, BNX2_FL_NOT_5709, 0x00000000, 0xffffffff },
+		{ 0x0420, BNX2_FL_NOT_5709, 0x00000000, 0x80ffffff },
+		{ 0x0424, BNX2_FL_NOT_5709, 0x00000000, 0x00000000 },
+		{ 0x0428, BNX2_FL_NOT_5709, 0x00000000, 0x00000001 },
+		{ 0x0450, BNX2_FL_NOT_5709, 0x00000000, 0x0000ffff },
+		{ 0x0454, BNX2_FL_NOT_5709, 0x00000000, 0xffffffff },
+		{ 0x0458, BNX2_FL_NOT_5709, 0x00000000, 0xffffffff },
+
+		{ 0x0808, BNX2_FL_NOT_5709, 0x00000000, 0xffffffff },
+		{ 0x0854, BNX2_FL_NOT_5709, 0x00000000, 0xffffffff },
+		{ 0x0868, BNX2_FL_NOT_5709, 0x00000000, 0x77777777 },
+		{ 0x086c, BNX2_FL_NOT_5709, 0x00000000, 0x77777777 },
+		{ 0x0870, BNX2_FL_NOT_5709, 0x00000000, 0x77777777 },
+		{ 0x0874, BNX2_FL_NOT_5709, 0x00000000, 0x77777777 },
+
+		{ 0x0c00, BNX2_FL_NOT_5709, 0x00000000, 0x00000001 },
+		{ 0x0c04, BNX2_FL_NOT_5709, 0x00000000, 0x03ff0001 },
+		{ 0x0c08, BNX2_FL_NOT_5709,  0x0f0ff073, 0x00000000 },
+
+		{ 0x1000, 0, 0x00000000, 0x00000001 },
+		{ 0x1004, BNX2_FL_NOT_5709, 0x00000000, 0x000f0001 },
+
+		{ 0x1408, 0, 0x01c00800, 0x00000000 },
+		{ 0x149c, 0, 0x8000ffff, 0x00000000 },
+		{ 0x14a8, 0, 0x00000000, 0x000001ff },
+		{ 0x14ac, 0, 0x0fffffff, 0x10000000 },
+		{ 0x14b0, 0, 0x00000002, 0x00000001 },
+		{ 0x14b8, 0, 0x00000000, 0x00000000 },
+		{ 0x14c0, 0, 0x00000000, 0x00000009 },
+		{ 0x14c4, 0, 0x00003fff, 0x00000000 },
+		{ 0x14cc, 0, 0x00000000, 0x00000001 },
+		{ 0x14d0, 0, 0xffffffff, 0x00000000 },
+
+		{ 0x1800, 0, 0x00000000, 0x00000001 },
+		{ 0x1804, 0, 0x00000000, 0x00000003 },
+
+		{ 0x2800, 0, 0x00000000, 0x00000001 },
+		{ 0x2804, 0, 0x00000000, 0x00003f01 },
+		{ 0x2808, 0, 0x0f3f3f03, 0x00000000 },
+		{ 0x2810, 0, 0xffff0000, 0x00000000 },
+		{ 0x2814, 0, 0xffff0000, 0x00000000 },
+		{ 0x2818, 0, 0xffff0000, 0x00000000 },
+		{ 0x281c, 0, 0xffff0000, 0x00000000 },
+		{ 0x2834, 0, 0xffffffff, 0x00000000 },
+		{ 0x2840, 0, 0x00000000, 0xffffffff },
+		{ 0x2844, 0, 0x00000000, 0xffffffff },
+		{ 0x2848, 0, 0xffffffff, 0x00000000 },
+		{ 0x284c, 0, 0xf800f800, 0x07ff07ff },
+
+		{ 0x2c00, 0, 0x00000000, 0x00000011 },
+		{ 0x2c04, 0, 0x00000000, 0x00030007 },
+
+		{ 0x3c00, 0, 0x00000000, 0x00000001 },
+		{ 0x3c04, 0, 0x00000000, 0x00070000 },
+		{ 0x3c08, 0, 0x00007f71, 0x07f00000 },
+		{ 0x3c0c, 0, 0x1f3ffffc, 0x00000000 },
+		{ 0x3c10, 0, 0xffffffff, 0x00000000 },
+		{ 0x3c14, 0, 0x00000000, 0xffffffff },
+		{ 0x3c18, 0, 0x00000000, 0xffffffff },
+		{ 0x3c1c, 0, 0xfffff000, 0x00000000 },
+		{ 0x3c20, 0, 0xffffff00, 0x00000000 },
+
+		{ 0x5004, 0, 0x00000000, 0x0000007f },
+		{ 0x5008, 0, 0x0f0007ff, 0x00000000 },
+
+		{ 0x5c00, 0, 0x00000000, 0x00000001 },
+		{ 0x5c04, 0, 0x00000000, 0x0003000f },
+		{ 0x5c08, 0, 0x00000003, 0x00000000 },
+		{ 0x5c0c, 0, 0x0000fff8, 0x00000000 },
+		{ 0x5c10, 0, 0x00000000, 0xffffffff },
+		{ 0x5c80, 0, 0x00000000, 0x0f7113f1 },
+		{ 0x5c84, 0, 0x00000000, 0x0000f333 },
+		{ 0x5c88, 0, 0x00000000, 0x00077373 },
+		{ 0x5c8c, 0, 0x00000000, 0x0007f737 },
+
+		{ 0x6808, 0, 0x0000ff7f, 0x00000000 },
+		{ 0x680c, 0, 0xffffffff, 0x00000000 },
+		{ 0x6810, 0, 0xffffffff, 0x00000000 },
+		{ 0x6814, 0, 0xffffffff, 0x00000000 },
+		{ 0x6818, 0, 0xffffffff, 0x00000000 },
+		{ 0x681c, 0, 0xffffffff, 0x00000000 },
+		{ 0x6820, 0, 0x00ff00ff, 0x00000000 },
+		{ 0x6824, 0, 0x00ff00ff, 0x00000000 },
+		{ 0x6828, 0, 0x00ff00ff, 0x00000000 },
+		{ 0x682c, 0, 0x03ff03ff, 0x00000000 },
+		{ 0x6830, 0, 0x03ff03ff, 0x00000000 },
+		{ 0x6834, 0, 0x03ff03ff, 0x00000000 },
+		{ 0x6838, 0, 0x03ff03ff, 0x00000000 },
+		{ 0x683c, 0, 0x0000ffff, 0x00000000 },
+		{ 0x6840, 0, 0x00000ff0, 0x00000000 },
+		{ 0x6844, 0, 0x00ffff00, 0x00000000 },
+		{ 0x684c, 0, 0xffffffff, 0x00000000 },
+		{ 0x6850, 0, 0x7f7f7f7f, 0x00000000 },
+		{ 0x6854, 0, 0x7f7f7f7f, 0x00000000 },
+		{ 0x6858, 0, 0x7f7f7f7f, 0x00000000 },
+		{ 0x685c, 0, 0x7f7f7f7f, 0x00000000 },
+		{ 0x6908, 0, 0x00000000, 0x0001ff0f },
+		{ 0x690c, 0, 0x00000000, 0x0ffe00f0 },
+
+		{ 0xffff, 0, 0x00000000, 0x00000000 },
+	};
+
+	ret = 0;
+	is_5709 = 0;
+	if (CHIP_NUM(bp) == CHIP_NUM_5709)
+		is_5709 = 1;
+
+	for (i = 0; reg_tbl[i].offset != 0xffff; i++) {
+		u32 offset, rw_mask, ro_mask, save_val, val;
+		u16 flags = reg_tbl[i].flags;
+
+		if (is_5709 && (flags & BNX2_FL_NOT_5709))
+			continue;
+
+		offset = (u32) reg_tbl[i].offset;
+		rw_mask = reg_tbl[i].rw_mask;
+		ro_mask = reg_tbl[i].ro_mask;
+
+		save_val = readl(bp->regview + offset);
+
+		writel(0, bp->regview + offset);
+
+		val = readl(bp->regview + offset);
+		if ((val & rw_mask) != 0) {
+			goto reg_test_err;
+		}
+
+		if ((val & ro_mask) != (save_val & ro_mask)) {
+			goto reg_test_err;
+		}
+
+		writel(0xffffffff, bp->regview + offset);
+
+		val = readl(bp->regview + offset);
+		if ((val & rw_mask) != rw_mask) {
+			goto reg_test_err;
+		}
+
+		if ((val & ro_mask) != (save_val & ro_mask)) {
+			goto reg_test_err;
+		}
+
+		writel(save_val, bp->regview + offset);
+		continue;
+
+reg_test_err:
+		writel(save_val, bp->regview + offset);
+		ret = -ENODEV;
+		break;
+	}
+	return ret;
+}
+
+static int
+bnx2_do_mem_test(struct bnx2 *bp, u32 start, u32 size)
+{
+	static const u32 test_pattern[] = { 0x00000000, 0xffffffff, 0x55555555,
+		0xaaaaaaaa , 0xaa55aa55, 0x55aa55aa };
+	int i;
+
+	for (i = 0; i < sizeof(test_pattern) / 4; i++) {
+		u32 offset;
+
+		for (offset = 0; offset < size; offset += 4) {
+
+			bnx2_reg_wr_ind(bp, start + offset, test_pattern[i]);
+
+			if (bnx2_reg_rd_ind(bp, start + offset) !=
+				test_pattern[i]) {
+				return -ENODEV;
+			}
+		}
+	}
+	return 0;
+}
+
+static int
+bnx2_test_memory(struct bnx2 *bp)
+{
+	int ret = 0;
+	int i;
+	static struct mem_entry {
+		u32   offset;
+		u32   len;
+	} mem_tbl_5706[] = {
+		{ 0x60000,  0x4000 },
+		{ 0xa0000,  0x3000 },
+		{ 0xe0000,  0x4000 },
+		{ 0x120000, 0x4000 },
+		{ 0x1a0000, 0x4000 },
+		{ 0x160000, 0x4000 },
+		{ 0xffffffff, 0    },
+	},
+	mem_tbl_5709[] = {
+		{ 0x60000,  0x4000 },
+		{ 0xa0000,  0x3000 },
+		{ 0xe0000,  0x4000 },
+		{ 0x120000, 0x4000 },
+		{ 0x1a0000, 0x4000 },
+		{ 0xffffffff, 0    },
+	};
+	struct mem_entry *mem_tbl;
+
+	if (CHIP_NUM(bp) == CHIP_NUM_5709)
+		mem_tbl = mem_tbl_5709;
+	else
+		mem_tbl = mem_tbl_5706;
+
+	for (i = 0; mem_tbl[i].offset != 0xffffffff; i++) {
+		if ((ret = bnx2_do_mem_test(bp, mem_tbl[i].offset,
+			mem_tbl[i].len)) != 0) {
+			return ret;
+		}
+	}
+
+	return ret;
+}
+
+#define BNX2_MAC_LOOPBACK	0
+#define BNX2_PHY_LOOPBACK	1
+
+static int
+bnx2_run_loopback(struct bnx2 *bp, int loopback_mode)
+{
+	unsigned int pkt_size, num_pkts, i;
+	struct sk_buff *skb, *rx_skb;
+	unsigned char *packet;
+	u16 rx_start_idx, rx_idx;
+	dma_addr_t map;
+	struct tx_bd *txbd;
+	struct sw_bd *rx_buf;
+	struct l2_fhdr *rx_hdr;
+	int ret = -ENODEV;
+	struct bnx2_napi *bnapi = &bp->bnx2_napi[0], *tx_napi;
+	struct bnx2_tx_ring_info *txr = &bnapi->tx_ring;
+	struct bnx2_rx_ring_info *rxr = &bnapi->rx_ring;
+
+	tx_napi = bnapi;
+
+	txr = &tx_napi->tx_ring;
+	rxr = &bnapi->rx_ring;
+	if (loopback_mode == BNX2_MAC_LOOPBACK) {
+		bp->loopback = MAC_LOOPBACK;
+		bnx2_set_mac_loopback(bp);
+	}
+	else if (loopback_mode == BNX2_PHY_LOOPBACK) {
+		if (bp->phy_flags & BNX2_PHY_FLAG_REMOTE_PHY_CAP)
+			return 0;
+
+		bp->loopback = PHY_LOOPBACK;
+		bnx2_set_phy_loopback(bp);
+	}
+	else
+		return -EINVAL;
+
+	pkt_size = min(bp->dev->mtu + ETH_HLEN, bp->rx_jumbo_thresh - 4);
+	skb = netdev_alloc_skb(bp->dev, pkt_size);
+	if (!skb)
+		return -ENOMEM;
+	packet = skb_put(skb, pkt_size);
+	memcpy(packet, bp->dev->dev_addr, 6);
+	memset(packet + 6, 0x0, 8);
+	for (i = 14; i < pkt_size; i++)
+		packet[i] = (unsigned char) (i & 0xff);
+
+#if (LINUX_VERSION_CODE >= 0x02061b)
+	map = dma_map_single(&bp->pdev->dev, skb->data, pkt_size,
+			     PCI_DMA_TODEVICE);
+	if (dma_mapping_error(&bp->pdev->dev, map)) {
+#else
+	map = pci_map_single(bp->pdev, skb->data, pkt_size,
+		PCI_DMA_TODEVICE);
+	if (pci_dma_mapping_error(map)) {
+#endif
+		dev_kfree_skb(skb);
+		return -EIO;
+	}
+
+	REG_WR(bp, BNX2_HC_COMMAND,
+	       bp->hc_cmd | BNX2_HC_COMMAND_COAL_NOW_WO_INT);
+
+	REG_RD(bp, BNX2_HC_COMMAND);
+
+	udelay(5);
+	rx_start_idx = bnx2_get_hw_rx_cons(bnapi);
+
+	num_pkts = 0;
+
+	txbd = &txr->tx_desc_ring[TX_RING_IDX(txr->tx_prod)];
+
+	txbd->tx_bd_haddr_hi = (u64) map >> 32;
+	txbd->tx_bd_haddr_lo = (u64) map & 0xffffffff;
+	txbd->tx_bd_mss_nbytes = pkt_size;
+	txbd->tx_bd_vlan_tag_flags = TX_BD_FLAGS_START | TX_BD_FLAGS_END;
+
+	num_pkts++;
+	txr->tx_prod = NEXT_TX_BD(txr->tx_prod);
+	txr->tx_prod_bseq += pkt_size;
+
+	REG_WR16(bp, txr->tx_bidx_addr, txr->tx_prod);
+	REG_WR(bp, txr->tx_bseq_addr, txr->tx_prod_bseq);
+
+	udelay(100);
+
+	REG_WR(bp, BNX2_HC_COMMAND,
+	       bp->hc_cmd | BNX2_HC_COMMAND_COAL_NOW_WO_INT);
+
+	REG_RD(bp, BNX2_HC_COMMAND);
+
+	udelay(5);
+
+#if (LINUX_VERSION_CODE >= 0x02061b)
+	dma_unmap_single(&bp->pdev->dev, map, pkt_size, PCI_DMA_TODEVICE);
+#else
+	pci_unmap_single(bp->pdev, map, pkt_size, PCI_DMA_TODEVICE);
+#endif
+	dev_kfree_skb(skb);
+
+	if (bnx2_get_hw_tx_cons(tx_napi) != txr->tx_prod)
+		goto loopback_test_done;
+
+	rx_idx = bnx2_get_hw_rx_cons(bnapi);
+	if (rx_idx != rx_start_idx + num_pkts) {
+		goto loopback_test_done;
+	}
+
+	rx_buf = &rxr->rx_buf_ring[rx_start_idx];
+	rx_skb = rx_buf->skb;
+
+	rx_hdr = rx_buf->desc;
+	skb_reserve(rx_skb, BNX2_RX_OFFSET);
+
+#if (LINUX_VERSION_CODE >= 0x02061b)
+	dma_sync_single_for_cpu(&bp->pdev->dev,
+#else
+	pci_dma_sync_single_for_cpu(bp->pdev,
+#endif
+		dma_unmap_addr(rx_buf, mapping),
+		bp->rx_buf_size, PCI_DMA_FROMDEVICE);
+
+	if (rx_hdr->l2_fhdr_status &
+		(L2_FHDR_ERRORS_BAD_CRC |
+		L2_FHDR_ERRORS_PHY_DECODE |
+		L2_FHDR_ERRORS_ALIGNMENT |
+		L2_FHDR_ERRORS_TOO_SHORT |
+		L2_FHDR_ERRORS_GIANT_FRAME)) {
+
+		goto loopback_test_done;
+	}
+
+	if ((rx_hdr->l2_fhdr_pkt_len - 4) != pkt_size) {
+		goto loopback_test_done;
+	}
+
+	for (i = 14; i < pkt_size; i++) {
+		if (*(rx_skb->data + i) != (unsigned char) (i & 0xff)) {
+			goto loopback_test_done;
+		}
+	}
+
+	ret = 0;
+
+loopback_test_done:
+	bp->loopback = 0;
+	return ret;
+}
+
+#define BNX2_MAC_LOOPBACK_FAILED	1
+#define BNX2_PHY_LOOPBACK_FAILED	2
+#define BNX2_LOOPBACK_FAILED		(BNX2_MAC_LOOPBACK_FAILED |	\
+					 BNX2_PHY_LOOPBACK_FAILED)
+
+static int
+bnx2_test_loopback(struct bnx2 *bp)
+{
+	int rc = 0;
+
+	if (!netif_running(bp->dev))
+		return BNX2_LOOPBACK_FAILED;
+
+	bnx2_reset_nic(bp, BNX2_DRV_MSG_CODE_RESET);
+	spin_lock_bh(&bp->phy_lock);
+	bnx2_init_phy(bp, 1);
+	spin_unlock_bh(&bp->phy_lock);
+	if (bnx2_run_loopback(bp, BNX2_MAC_LOOPBACK))
+		rc |= BNX2_MAC_LOOPBACK_FAILED;
+	if (bnx2_run_loopback(bp, BNX2_PHY_LOOPBACK))
+		rc |= BNX2_PHY_LOOPBACK_FAILED;
+	return rc;
+}
+
+#define NVRAM_SIZE 0x200
+#define CRC32_RESIDUAL 0xdebb20e3
+
+static int
+bnx2_test_nvram(struct bnx2 *bp)
+{
+	__be32 buf[NVRAM_SIZE / 4];
+	u8 *data = (u8 *) buf;
+	int rc = 0;
+	u32 magic, csum;
+
+	if ((rc = bnx2_nvram_read(bp, 0, data, 4)) != 0)
+		goto test_nvram_done;
+
+        magic = be32_to_cpu(buf[0]);
+	if (magic != 0x669955aa) {
+		rc = -ENODEV;
+		goto test_nvram_done;
+	}
+
+	if ((rc = bnx2_nvram_read(bp, 0x100, data, NVRAM_SIZE)) != 0)
+		goto test_nvram_done;
+
+	csum = ether_crc_le(0x100, data);
+	if (csum != CRC32_RESIDUAL) {
+		rc = -ENODEV;
+		goto test_nvram_done;
+	}
+
+	csum = ether_crc_le(0x100, data + 0x100);
+	if (csum != CRC32_RESIDUAL) {
+		rc = -ENODEV;
+	}
+
+test_nvram_done:
+	return rc;
+}
+
+static int
+bnx2_test_link(struct bnx2 *bp)
+{
+	u32 bmsr;
+
+	if (!netif_running(bp->dev))
+		return -ENODEV;
+
+	if (bp->phy_flags & BNX2_PHY_FLAG_REMOTE_PHY_CAP) {
+		int i;
+
+		for (i = 0; i < 6 && !bp->link_up; i++) {
+			if (bnx2_msleep_interruptible(500))
+				break;
+		}
+		if (bp->link_up)
+			return 0;
+		return -ENODEV;
+	}
+	spin_lock_bh(&bp->phy_lock);
+	bnx2_enable_bmsr1(bp);
+	bnx2_read_phy(bp, bp->mii_bmsr1, &bmsr);
+	bnx2_read_phy(bp, bp->mii_bmsr1, &bmsr);
+	bnx2_disable_bmsr1(bp);
+	spin_unlock_bh(&bp->phy_lock);
+
+	if (bmsr & BMSR_LSTATUS) {
+		return 0;
+	}
+	return -ENODEV;
+}
+
+static int
+bnx2_test_intr(struct bnx2 *bp)
+{
+	int i;
+	u16 status_idx;
+
+	if (!netif_running(bp->dev))
+		return -ENODEV;
+
+	status_idx = REG_RD(bp, BNX2_PCICFG_INT_ACK_CMD) & 0xffff;
+
+	/* This register is not touched during run-time. */
+	REG_WR(bp, BNX2_HC_COMMAND, bp->hc_cmd | BNX2_HC_COMMAND_COAL_NOW);
+	REG_RD(bp, BNX2_HC_COMMAND);
+
+	for (i = 0; i < 10; i++) {
+		if ((REG_RD(bp, BNX2_PCICFG_INT_ACK_CMD) & 0xffff) !=
+			status_idx) {
+
+			break;
+		}
+
+		bnx2_msleep_interruptible(10);
+	}
+	if (i < 10)
+		return 0;
+
+	return -ENODEV;
+}
+
+/* Determining link for parallel detection. */
+static int
+bnx2_5706_serdes_has_link(struct bnx2 *bp)
+{
+	u32 mode_ctl, an_dbg, exp;
+
+	if (bp->phy_flags & BNX2_PHY_FLAG_NO_PARALLEL)
+		return 0;
+
+	bnx2_write_phy(bp, MII_BNX2_MISC_SHADOW, MISC_SHDW_MODE_CTL);
+	bnx2_read_phy(bp, MII_BNX2_MISC_SHADOW, &mode_ctl);
+
+	if (!(mode_ctl & MISC_SHDW_MODE_CTL_SIG_DET))
+		return 0;
+
+	bnx2_write_phy(bp, MII_BNX2_MISC_SHADOW, MISC_SHDW_AN_DBG);
+	bnx2_read_phy(bp, MII_BNX2_MISC_SHADOW, &an_dbg);
+	bnx2_read_phy(bp, MII_BNX2_MISC_SHADOW, &an_dbg);
+
+	if (an_dbg & (MISC_SHDW_AN_DBG_NOSYNC | MISC_SHDW_AN_DBG_RUDI_INVALID))
+		return 0;
+
+	bnx2_write_phy(bp, MII_BNX2_DSP_ADDRESS, MII_EXPAND_REG1);
+	bnx2_read_phy(bp, MII_BNX2_DSP_RW_PORT, &exp);
+	bnx2_read_phy(bp, MII_BNX2_DSP_RW_PORT, &exp);
+
+	if (exp & MII_EXPAND_REG1_RUDI_C)	/* receiving CONFIG */
+		return 0;
+
+	return 1;
+}
+
+static void
+bnx2_5706_serdes_timer(struct bnx2 *bp)
+{
+	int check_link = 1;
+
+	spin_lock(&bp->phy_lock);
+	if (bp->serdes_an_pending) {
+		bp->serdes_an_pending--;
+		check_link = 0;
+	} else if ((bp->link_up == 0) && (bp->autoneg & AUTONEG_SPEED)) {
+		u32 bmcr;
+
+		bp->current_interval = BNX2_TIMER_INTERVAL;
+
+		bnx2_read_phy(bp, bp->mii_bmcr, &bmcr);
+
+		if (bmcr & BMCR_ANENABLE) {
+			if (bnx2_5706_serdes_has_link(bp)) {
+				bmcr &= ~BMCR_ANENABLE;
+				bmcr |= BMCR_SPEED1000 | BMCR_FULLDPLX;
+				bnx2_write_phy(bp, bp->mii_bmcr, bmcr);
+				bp->phy_flags |= BNX2_PHY_FLAG_PARALLEL_DETECT;
+			}
+		}
+	}
+	else if ((bp->link_up) && (bp->autoneg & AUTONEG_SPEED) &&
+		 (bp->phy_flags & BNX2_PHY_FLAG_PARALLEL_DETECT)) {
+		u32 phy2;
+
+		bnx2_write_phy(bp, 0x17, 0x0f01);
+		bnx2_read_phy(bp, 0x15, &phy2);
+		if (phy2 & 0x20) {
+			u32 bmcr;
+
+			bnx2_read_phy(bp, bp->mii_bmcr, &bmcr);
+			bmcr |= BMCR_ANENABLE;
+			bnx2_write_phy(bp, bp->mii_bmcr, bmcr);
+
+			bp->phy_flags &= ~BNX2_PHY_FLAG_PARALLEL_DETECT;
+		}
+	} else
+		bp->current_interval = BNX2_TIMER_INTERVAL;
+
+	if (check_link) {
+		u32 val;
+
+		bnx2_write_phy(bp, MII_BNX2_MISC_SHADOW, MISC_SHDW_AN_DBG);
+		bnx2_read_phy(bp, MII_BNX2_MISC_SHADOW, &val);
+		bnx2_read_phy(bp, MII_BNX2_MISC_SHADOW, &val);
+
+		if (bp->link_up && (val & MISC_SHDW_AN_DBG_NOSYNC)) {
+			if (!(bp->phy_flags & BNX2_PHY_FLAG_FORCED_DOWN)) {
+				bnx2_5706s_force_link_dn(bp, 1);
+				bp->phy_flags |= BNX2_PHY_FLAG_FORCED_DOWN;
+			} else
+				bnx2_set_link(bp);
+		} else if (!bp->link_up && !(val & MISC_SHDW_AN_DBG_NOSYNC))
+			bnx2_set_link(bp);
+	}
+	spin_unlock(&bp->phy_lock);
+}
+
+static void
+bnx2_5708_serdes_timer(struct bnx2 *bp)
+{
+	if (bp->phy_flags & BNX2_PHY_FLAG_REMOTE_PHY_CAP)
+		return;
+
+	if ((bp->phy_flags & BNX2_PHY_FLAG_2_5G_CAPABLE) == 0) {
+		bp->serdes_an_pending = 0;
+		return;
+	}
+
+	spin_lock(&bp->phy_lock);
+	if (bp->serdes_an_pending)
+		bp->serdes_an_pending--;
+	else if ((bp->link_up == 0) && (bp->autoneg & AUTONEG_SPEED)) {
+		u32 bmcr;
+
+		bnx2_read_phy(bp, bp->mii_bmcr, &bmcr);
+		if (bmcr & BMCR_ANENABLE) {
+			bnx2_enable_forced_2g5(bp);
+			bp->current_interval = BNX2_SERDES_FORCED_TIMEOUT;
+		} else {
+			bnx2_disable_forced_2g5(bp);
+			bp->serdes_an_pending = 2;
+			bp->current_interval = BNX2_TIMER_INTERVAL;
+		}
+
+	} else
+		bp->current_interval = BNX2_TIMER_INTERVAL;
+
+	spin_unlock(&bp->phy_lock);
+}
+
+static void
+bnx2_timer(unsigned long data)
+{
+	struct bnx2 *bp = (struct bnx2 *) data;
+
+	if (!netif_running(bp->dev))
+		return;
+
+	if (atomic_read(&bp->intr_sem) != 0)
+		goto bnx2_restart_timer;
+
+#ifdef CONFIG_PCI_MSI
+	if ((bp->flags & (BNX2_FLAG_USING_MSI | BNX2_FLAG_ONE_SHOT_MSI)) ==
+	     BNX2_FLAG_USING_MSI)
+		bnx2_chk_missed_msi(bp);
+#endif
+
+	bnx2_send_heart_beat(bp);
+
+	bp->stats_blk->stat_FwRxDrop =
+		bnx2_reg_rd_ind(bp, BNX2_FW_RX_DROP_COUNT);
+
+	/* workaround occasional corrupted counters */
+	if ((bp->flags & BNX2_FLAG_BROKEN_STATS) && bp->stats_ticks)
+		REG_WR(bp, BNX2_HC_COMMAND, bp->hc_cmd |
+					    BNX2_HC_COMMAND_STATS_NOW);
+
+	if (bp->phy_flags & BNX2_PHY_FLAG_SERDES) {
+		if (CHIP_NUM(bp) == CHIP_NUM_5706)
+			bnx2_5706_serdes_timer(bp);
+		else
+			bnx2_5708_serdes_timer(bp);
+	}
+
+bnx2_restart_timer:
+	mod_timer(&bp->timer, jiffies + bp->current_interval);
+}
+
+static int
+bnx2_request_irq(struct bnx2 *bp)
+{
+	unsigned long flags;
+	struct bnx2_irq *irq;
+	int rc = 0, i;
+
+	if (bp->flags & BNX2_FLAG_USING_MSI_OR_MSIX)
+		flags = 0;
+	else
+		flags = IRQF_SHARED;
+
+#if defined(__VMKLNX__)
+	/*
+	 * In ESX, bnx2 will setup int mode during .probe time. However, the dev->name
+	 * will be finalized only when pci_announce_device is done. So, we assign
+	 * irq->name here instead of in bnx2_setup_int_mode.
+	 */
+	strcpy(bp->irq_tbl[0].name, bp->dev->name);
+	if (bp->flags & BNX2_FLAG_USING_MSIX) {
+		for (i = 0; i < BNX2_MAX_MSIX_VEC; i++) {
+                   snprintf(bp->irq_tbl[i].name, sizeof(bp->irq_tbl[i].name),
+				"%s-%d", bp->dev->name, i);
+		}
+        }
+#endif
+
+	for (i = 0; i < bp->irq_nvecs; i++) {
+		irq = &bp->irq_tbl[i];
+		rc = request_irq(irq->vector, irq->handler, flags, irq->name,
+				 &bp->bnx2_napi[i]);
+		if (rc)
+			break;
+		irq->requested = 1;
+	}
+	return rc;
+}
+
+#if defined(__VMKLNX__)
+static void
+bnx2_free_irq(struct bnx2 *bp)
+{
+	struct bnx2_irq *irq;
+	int i;
+
+	for (i = 0; i < bp->irq_nvecs; i++) {
+		irq = &bp->irq_tbl[i];
+		if (irq->requested)
+			free_irq(irq->vector, &bp->bnx2_napi[i]);
+		irq->requested = 0;
+	}
+}
+
+/* disable MSI/MSIX */
+static void
+bnx2_disable_msi(struct bnx2 *bp)
+{
+#ifdef CONFIG_PCI_MSI
+	if (bp->flags & BNX2_FLAG_USING_MSI)
+		pci_disable_msi(bp->pdev);
+	else if (bp->flags & BNX2_FLAG_USING_MSIX)
+		pci_disable_msix(bp->pdev);
+
+	bp->flags &= ~(BNX2_FLAG_USING_MSI_OR_MSIX | BNX2_FLAG_ONE_SHOT_MSI);
+#endif
+}
+
+#else
+
+static void
+__bnx2_free_irq(struct bnx2 *bp)
+{
+	struct bnx2_irq *irq;
+	int i;
+
+	for (i = 0; i < bp->irq_nvecs; i++) {
+		irq = &bp->irq_tbl[i];
+		if (irq->requested)
+			free_irq(irq->vector, &bp->bnx2_napi[i]);
+		irq->requested = 0;
+	}
+}
+
+static void
+bnx2_free_irq(struct bnx2 *bp)
+{
+
+	__bnx2_free_irq(bp);
+#ifdef CONFIG_PCI_MSI
+	if (bp->flags & BNX2_FLAG_USING_MSI)
+		pci_disable_msi(bp->pdev);
+	else if (bp->flags & BNX2_FLAG_USING_MSIX)
+		pci_disable_msix(bp->pdev);
+
+	bp->flags &= ~(BNX2_FLAG_USING_MSI_OR_MSIX | BNX2_FLAG_ONE_SHOT_MSI);
+#endif
+}
+#endif  /* defined(__VMKLNX__) */
+
+#ifdef CONFIG_PCI_MSI
+static void
+bnx2_enable_msix(struct bnx2 *bp, int msix_vecs)
+{
+#ifdef BNX2_NEW_NAPI
+	int i, total_vecs, rc;
+	struct msix_entry msix_ent[BNX2_MAX_MSIX_VEC];
+#if !defined(__VMKLNX__)
+	struct net_device *dev = bp->dev;
+	const int len = sizeof(bp->irq_tbl[0].name);
+#endif
+
+	bnx2_setup_msix_tbl(bp);
+	REG_WR(bp, BNX2_PCI_MSIX_CONTROL, BNX2_MAX_MSIX_HW_VEC - 1);
+	REG_WR(bp, BNX2_PCI_MSIX_TBL_OFF_BIR, BNX2_PCI_GRC_WINDOW2_BASE);
+	REG_WR(bp, BNX2_PCI_MSIX_PBA_OFF_BIT, BNX2_PCI_GRC_WINDOW3_BASE);
+
+	/*  Need to flush the previous three writes to ensure MSI-X
+	 *  is setup properly */
+	REG_RD(bp, BNX2_PCI_MSIX_CONTROL);
+
+	for (i = 0; i < BNX2_MAX_MSIX_VEC; i++) {
+		msix_ent[i].entry = i;
+		msix_ent[i].vector = 0;
+	}
+
+	total_vecs = msix_vecs;
+#ifdef BCM_CNIC
+	total_vecs++;
+#endif
+	rc = -ENOSPC;
+	while (total_vecs >= BNX2_MIN_MSIX_VEC) {
+		rc = pci_enable_msix(bp->pdev, msix_ent, total_vecs);
+		if (rc <= 0)
+			break;
+		if (rc > 0)
+			total_vecs = rc;
+	}
+
+	if (rc != 0)
+		return;
+
+	msix_vecs = total_vecs;
+#ifdef BCM_CNIC
+	msix_vecs--;
+#endif
+	bp->irq_nvecs = msix_vecs;
+	bp->flags |= BNX2_FLAG_USING_MSIX | BNX2_FLAG_ONE_SHOT_MSI;
+#if defined(__VMKLNX__)
+	if (disable_msi_1shot) 
+		bp->flags &= ~BNX2_FLAG_ONE_SHOT_MSI; 
+#endif
+	for (i = 0; i < total_vecs; i++) {
+		bp->irq_tbl[i].vector = msix_ent[i].vector;
+#if !defined(__VMKLNX__)
+		snprintf(bp->irq_tbl[i].name, len, "%s-%d", dev->name, i);
+		bp->irq_tbl[i].handler = bnx2_msi_1shot;
+#else
+		if (disable_msi_1shot)
+			bp->irq_tbl[i].handler = bnx2_msi;
+		else
+			bp->irq_tbl[i].handler = bnx2_msi_1shot;
+#endif
+	}
+#endif
+}
+#endif
+
+static int
+bnx2_setup_int_mode(struct bnx2 *bp, int dis_msi)
+{
+#ifdef CONFIG_PCI_MSI
+	int cpus = num_online_cpus();
+#if defined(BNX2_ENABLE_NETQUEUE)
+	int msix_vecs = min(cpus, 4);
+	if(force_netq_param[bp->index] != BNX2_OPTION_UNSET)
+		msix_vecs = min(force_netq_param[bp->index], RX_MAX_RSS_RINGS);
+
+	/* Once is for the default queuue */
+	msix_vecs += 1;
+#else
+#if defined(__VMKLNX__)
+	/*  If NetQueue is not enable then force the number of queues to 1 */
+	int msix_vecs = 1;
+#else
+	int msix_vecs;
+#endif /* defined(__VMKLNX__) */
+#endif
+#endif
+
+#if !defined(__VMKLNX__)
+	if (!bp->num_req_rx_rings)
+		msix_vecs = max(cpus + 1, bp->num_req_tx_rings);
+	else if (!bp->num_req_tx_rings)
+		msix_vecs = max(cpus, bp->num_req_rx_rings);
+	else
+		msix_vecs = max(bp->num_req_rx_rings, bp->num_req_tx_rings);
+
+	msix_vecs = min(msix_vecs, RX_MAX_RINGS);
+#endif
+	bp->irq_tbl[0].handler = bnx2_interrupt;
+#if !defined(__VMKLNX__)
+	strcpy(bp->irq_tbl[0].name, bp->dev->name);
+#endif
+	bp->irq_nvecs = 1;
+	bp->irq_tbl[0].vector = bp->pdev->irq;
+
+#ifdef CONFIG_PCI_MSI
+	if ((bp->flags & BNX2_FLAG_MSIX_CAP) && !dis_msi)
+		bnx2_enable_msix(bp, msix_vecs);
+
+	if ((bp->flags & BNX2_FLAG_MSI_CAP) && !dis_msi &&
+	    !(bp->flags & BNX2_FLAG_USING_MSIX)) {
+		if (pci_enable_msi(bp->pdev) == 0) {
+			bp->flags |= BNX2_FLAG_USING_MSI;
+			if (CHIP_NUM(bp) == CHIP_NUM_5709) {
+				bp->flags |= BNX2_FLAG_ONE_SHOT_MSI;
+				bp->irq_tbl[0].handler = bnx2_msi_1shot;
+#if defined(__VMKLNX__)
+				if (disable_msi_1shot) {
+					bp->flags &= ~BNX2_FLAG_ONE_SHOT_MSI;
+					bp->irq_tbl[0].handler = bnx2_msi;
+				}
+#endif
+			} else
+				bp->irq_tbl[0].handler = bnx2_msi;
+
+			bp->irq_tbl[0].vector = bp->pdev->irq;
+		}
+	}
+#endif
+
+#ifndef BCM_HAVE_MULTI_QUEUE
+	bp->num_tx_rings = 1;
+	bp->num_rx_rings = bp->irq_nvecs;
+#else
+#if defined(__VMKLNX__)
+#if defined(BNX2_ENABLE_NETQUEUE)
+	bp->num_tx_rings = bp->irq_nvecs;
+	bp->dev->real_num_tx_queues = bp->num_tx_rings;
+#else
+	bp->num_tx_rings = 1;
+#endif
+	bp->num_rx_rings = bp->irq_nvecs;
+#else
+	if (!bp->num_req_tx_rings)
+		bp->num_tx_rings = rounddown_pow_of_two(bp->irq_nvecs);
+	else
+		bp->num_tx_rings = min(bp->irq_nvecs, bp->num_req_tx_rings);
+
+	if (!bp->num_req_rx_rings)
+		bp->num_rx_rings = bp->irq_nvecs;
+	else
+		bp->num_rx_rings = min(bp->irq_nvecs, bp->num_req_rx_rings);
+#endif
+	netif_set_real_num_tx_queues(bp->dev, bp->num_tx_rings);
+#endif
+	return netif_set_real_num_rx_queues(bp->dev, bp->num_rx_rings);
+}
+
+/* Called with rtnl_lock */
+static int
+bnx2_open(struct net_device *dev)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+	int rc;
+
+	netif_carrier_off(dev);
+
+	bnx2_set_power_state(bp, PCI_D0);
+	bnx2_disable_int(bp);
+
+#if !(defined __VMKLNX__)
+	rc = bnx2_setup_int_mode(bp, disable_msi);
+	if (rc)
+		goto open_err;
+	bnx2_init_napi(bp);
+#endif /* !(defined __VMKLNX__) */
+#ifdef BNX2_NEW_NAPI
+	bnx2_napi_enable(bp);
+#endif
+	rc = bnx2_alloc_mem(bp);
+	if (rc)
+		goto open_err;
+
+	rc = bnx2_request_irq(bp);
+	if (rc)
+		goto open_err;
+
+	rc = bnx2_init_nic(bp, 1);
+	if (rc)
+		goto open_err;
+
+	mod_timer(&bp->timer, jiffies + bp->current_interval);
+
+	atomic_set(&bp->intr_sem, 0);
+
+	memset(bp->temp_stats_blk, 0, sizeof(struct statistics_block));
+
+	bnx2_enable_int(bp);
+
+#ifdef CONFIG_PCI_MSI
+	if (bp->flags & BNX2_FLAG_USING_MSI) {
+		/* Test MSI to make sure it is working
+		 * If MSI test fails, go back to INTx mode
+		 */
+		if (bnx2_test_intr(bp) != 0) {
+			netdev_warn(bp->dev, "No interrupt was generated using MSI, switching to INTx mode. Please report this failure to the PCI maintainer and include system chipset information.\n");
+
+			bnx2_disable_int(bp);
+			bnx2_free_irq(bp);
+#if defined(__VMKLNX__)
+			bnx2_disable_msi(bp);
+#endif
+
+			bnx2_setup_int_mode(bp, 1);
+
+			rc = bnx2_init_nic(bp, 0);
+
+			if (!rc)
+				rc = bnx2_request_irq(bp);
+
+			if (rc) {
+				del_timer_sync(&bp->timer);
+				goto open_err;
+			}
+			bnx2_enable_int(bp);
+		}
+	}
+	if (bp->flags & BNX2_FLAG_USING_MSI)
+		netdev_info(dev, "using MSI\n");
+	else if (bp->flags & BNX2_FLAG_USING_MSIX)
+		netdev_info(dev, "using MSIX\n");
+#endif
+#if defined(BNX2_ENABLE_NETQUEUE)
+	if (bnx2_netqueue_is_avail(bp))
+		bnx2_open_netqueue_hw(bp);
+#endif
+
+	netif_tx_start_all_queues(dev);
+
+	return 0;
+
+open_err:
+#ifdef BNX2_NEW_NAPI
+	bnx2_napi_disable(bp);
+#endif
+	bnx2_free_skbs(bp);
+	bnx2_free_irq(bp);
+	bnx2_free_mem(bp);
+#if !defined(__VMKLNX__)
+	bnx2_del_napi(bp);
+#endif /* !(defined __VMKLNX__) */
+	return rc;
+}
+
+static void
+#if defined(INIT_DELAYED_WORK_DEFERRABLE) || defined(INIT_WORK_NAR)  || (defined(__VMKLNX__) && (VMWARE_ESX_DDK_VERSION >= 40000))
+bnx2_reset_task(struct work_struct *work)
+#else
+bnx2_reset_task(void *data)
+#endif
+{
+#if defined(INIT_DELAYED_WORK_DEFERRABLE) || defined(INIT_WORK_NAR)  || (defined(__VMKLNX__) && (VMWARE_ESX_DDK_VERSION >= 40000))
+	struct bnx2 *bp = container_of(work, struct bnx2, reset_task);
+#else
+	struct bnx2 *bp = data;
+#endif
+	int rc;
+
+	rtnl_lock();
+	if (!netif_running(bp->dev)) {
+		rtnl_unlock();
+		return;
+	}
+
+	bnx2_netif_stop(bp, true);
+
+	rc = bnx2_init_nic(bp, 1);
+	if (rc) {
+		netdev_err(bp->dev, "failed to reset NIC, closing\n");
+		bnx2_napi_enable(bp);
+		dev_close(bp->dev);
+#if defined(__VMKLNX__)
+#if (VMWARE_ESX_DDK_VERSION == 41000) || (VMWARE_ESX_DDK_VERSION == 50000)
+		/* PR 533926
+		 * This is a workaround to sync device status in dev->flags and
+		 * dev->gflags. It is needed to avoid PSOD (due to double dev_close)
+		 * on reboot. For post MN releases, we plan to move it to vmklinux.
+		 */
+		bp->dev->gflags &= ~IFF_DEV_IS_OPEN;
+#endif
+#endif
+		rtnl_unlock();
+		return;
+	}
+ 
+ 	atomic_set(&bp->intr_sem, 1);
+ 	bnx2_netif_start(bp, true);
+
+	rtnl_unlock();
+}
+
+static void bnx2_dump_ftq(struct bnx2 *bp)
+{
+	u32 i;
+	u32 bdidx;
+	u32 cid;
+	u32 valid;
+	struct net_device *dev = bp->dev;
+
+	netdev_err(dev, "<--- start FTQ dump --->\n");
+	netdev_err(dev, "BNX2_RV2P_PFTQ_CTL %x\n",
+		   REG_RD(bp, BNX2_RV2P_PFTQ_CTL));
+	netdev_err(dev, "BNX2_RV2P_TFTQ_CTL %x\n",
+		   REG_RD(bp, BNX2_RV2P_TFTQ_CTL));
+	netdev_err(dev, "BNX2_RV2P_MFTQ_CTL %x\n",
+		   REG_RD(bp, BNX2_RV2P_MFTQ_CTL));
+	netdev_err(dev, "BNX2_TBDR_FTQ_CTL %x\n",
+		   REG_RD(bp, BNX2_TBDR_FTQ_CTL));
+	netdev_err(dev, "BNX2_TDMA_FTQ_CTL %x\n",
+		   REG_RD(bp, BNX2_TDMA_FTQ_CTL));
+	netdev_err(dev, "BNX2_TXP_FTQ_CTL %x\n",
+		   bnx2_reg_rd_ind(bp, BNX2_TXP_FTQ_CTL));
+	netdev_err(dev, "BNX2_TPAT_FTQ_CTL %x\n",
+		   bnx2_reg_rd_ind(bp, BNX2_TPAT_FTQ_CTL));
+	netdev_err(dev, "BNX2_RXP_CFTQ_CTL %x\n",
+		   bnx2_reg_rd_ind(bp, BNX2_RXP_CFTQ_CTL));
+	netdev_err(dev, "BNX2_RXP_FTQ_CTL %x\n",
+		   bnx2_reg_rd_ind(bp, BNX2_RXP_FTQ_CTL));
+	netdev_err(dev, "BNX2_COM_COMXQ_FTQ_CTL %x\n",
+		   bnx2_reg_rd_ind(bp, BNX2_COM_COMXQ_FTQ_CTL));
+	netdev_err(dev, "BNX2_COM_COMTQ_FTQ_CTL %x\n",
+		   bnx2_reg_rd_ind(bp, BNX2_COM_COMTQ_FTQ_CTL));
+	netdev_err(dev, "BNX2_COM_COMQ_FTQ_CTL %x\n",
+		   bnx2_reg_rd_ind(bp, BNX2_COM_COMQ_FTQ_CTL));
+	netdev_err(dev, "BNX2_CP_CPQ_FTQ_CTL %x\n",
+		   bnx2_reg_rd_ind(bp, BNX2_CP_CPQ_FTQ_CTL));
+	netdev_err(dev,
+		   "TXP mode %x state %x evt_mask %x pc %x pc %x instr %x\n",
+		   bnx2_reg_rd_ind(bp, BNX2_TXP_CPU_MODE),
+		   bnx2_reg_rd_ind(bp, BNX2_TXP_CPU_STATE),
+		   bnx2_reg_rd_ind(bp, BNX2_TXP_CPU_EVENT_MASK),
+		   bnx2_reg_rd_ind(bp, BNX2_TXP_CPU_PROGRAM_COUNTER),
+		   bnx2_reg_rd_ind(bp, BNX2_TXP_CPU_PROGRAM_COUNTER),
+		   bnx2_reg_rd_ind(bp, BNX2_TXP_CPU_INSTRUCTION));
+	netdev_err(dev,
+		   "TPAT mode %x state %x evt_mask %x pc %x pc %x instr %x\n",
+		   bnx2_reg_rd_ind(bp, BNX2_TPAT_CPU_MODE),
+		   bnx2_reg_rd_ind(bp, BNX2_TPAT_CPU_STATE),
+		   bnx2_reg_rd_ind(bp, BNX2_TPAT_CPU_EVENT_MASK),
+		   bnx2_reg_rd_ind(bp, BNX2_TPAT_CPU_PROGRAM_COUNTER),
+		   bnx2_reg_rd_ind(bp, BNX2_TPAT_CPU_PROGRAM_COUNTER),
+		   bnx2_reg_rd_ind(bp, BNX2_TPAT_CPU_INSTRUCTION));
+	netdev_err(dev,
+		   "RXP mode %x state %x evt_mask %x pc %x pc %x instr %x\n",
+		   bnx2_reg_rd_ind(bp, BNX2_RXP_CPU_MODE),
+		   bnx2_reg_rd_ind(bp, BNX2_RXP_CPU_STATE),
+		   bnx2_reg_rd_ind(bp, BNX2_RXP_CPU_EVENT_MASK),
+		   bnx2_reg_rd_ind(bp, BNX2_RXP_CPU_PROGRAM_COUNTER),
+		   bnx2_reg_rd_ind(bp, BNX2_RXP_CPU_PROGRAM_COUNTER),
+		   bnx2_reg_rd_ind(bp, BNX2_RXP_CPU_INSTRUCTION));
+	netdev_err(dev,
+		   "COM mode %x state %x evt_mask %x pc %x pc %x instr %x\n",
+		   bnx2_reg_rd_ind(bp, BNX2_COM_CPU_MODE),
+		   bnx2_reg_rd_ind(bp, BNX2_COM_CPU_STATE),
+		   bnx2_reg_rd_ind(bp, BNX2_COM_CPU_EVENT_MASK),
+		   bnx2_reg_rd_ind(bp, BNX2_COM_CPU_PROGRAM_COUNTER),
+		   bnx2_reg_rd_ind(bp, BNX2_COM_CPU_PROGRAM_COUNTER),
+		   bnx2_reg_rd_ind(bp, BNX2_COM_CPU_INSTRUCTION));
+	netdev_err(dev,
+		   "CP mode %x state %x evt_mask %x pc %x pc %x instr %x\n",
+		   bnx2_reg_rd_ind(bp, BNX2_CP_CPU_MODE),
+		   bnx2_reg_rd_ind(bp, BNX2_CP_CPU_STATE),
+		   bnx2_reg_rd_ind(bp, BNX2_CP_CPU_EVENT_MASK),
+		   bnx2_reg_rd_ind(bp, BNX2_CP_CPU_PROGRAM_COUNTER),
+		   bnx2_reg_rd_ind(bp, BNX2_CP_CPU_PROGRAM_COUNTER),
+		   bnx2_reg_rd_ind(bp, BNX2_CP_CPU_INSTRUCTION));
+	netdev_err(dev, "<--- end FTQ dump --->\n");
+	netdev_err(dev, "<--- start TBDC dump --->\n");
+	netdev_err(dev, "TBDC free cnt: %d.\n",
+	       (int)(REG_RD(bp, BNX2_TBDC_STATUS) & BNX2_TBDC_STATUS_FREE_CNT));
+	netdev_err(dev,
+		   "%-4.4s   %-5.5s  %-4.4s  %-4.4s  %-6.6s\n",
+		   "LINE", "CID", "BIDX", "CMD", "VALIDS");
+	for (i = 0; i < 0x20; i++) {
+		REG_WR(bp, BNX2_TBDC_BD_ADDR, i);
+		REG_WR(bp,
+		       BNX2_TBDC_CAM_OPCODE,
+		       BNX2_TBDC_CAM_OPCODE_OPCODE_CAM_READ);
+		REG_WR(bp, BNX2_TBDC_COMMAND, BNX2_TBDC_COMMAND_CMD_REG_ARB);
+		while (REG_RD(bp, BNX2_TBDC_COMMAND) &
+		       BNX2_TBDC_COMMAND_CMD_REG_ARB)
+			;
+		cid   = REG_RD(bp, BNX2_TBDC_CID);
+		bdidx = REG_RD(bp, BNX2_TBDC_BIDX);
+		valid = REG_RD(bp, BNX2_TBDC_CAM_OPCODE);
+		netdev_err(dev,
+			   "%02x     %05x  %04x  %02x    [%x]\n",
+			   i, cid,
+			   (unsigned int)(bdidx & BNX2_TBDC_BDIDX_BDIDX),
+			   (bdidx >> 24), (valid >> 8) & 0x0ff);
+	}
+	netdev_err(dev, "<--- end TBDC dump --->\n");
+}
+
+static void
+bnx2_dump_state(struct bnx2 *bp)
+{
+	struct net_device *dev = bp->dev;
+	u32 val1, val2;
+
+	pci_read_config_dword(bp->pdev, PCI_COMMAND, &val1);
+	netdev_err(dev, "DEBUG: intr_sem[%x] PCI_CMD[%08x]\n",
+		   atomic_read(&bp->intr_sem), val1);
+	pci_read_config_dword(bp->pdev, bp->pm_cap + PCI_PM_CTRL, &val1);
+	pci_read_config_dword(bp->pdev, BNX2_PCICFG_MISC_CONFIG, &val2);
+	netdev_err(dev, "DEBUG: PCI_PM[%08x] PCI_MISC_CFG[%08x]\n", val1, val2);
+	netdev_err(dev, "DEBUG: EMAC_TX_STATUS[%08x] EMAC_RX_STATUS[%08x]\n",
+		   REG_RD(bp, BNX2_EMAC_TX_STATUS),
+		   REG_RD(bp, BNX2_EMAC_RX_STATUS));
+	netdev_err(dev, "DEBUG: RPM_MGMT_PKT_CTRL[%08x]\n",
+		   REG_RD(bp, BNX2_RPM_MGMT_PKT_CTRL));
+	netdev_err(dev, "DEBUG: HC_STATS_INTERRUPT_STATUS[%08x]\n",
+		   REG_RD(bp, BNX2_HC_STATS_INTERRUPT_STATUS));
+	if (bp->flags & BNX2_FLAG_USING_MSIX) {
+		int i;
+
+		netdev_err(dev, "DEBUG: PBA[%08x]\n",
+			   REG_RD(bp, BNX2_PCI_GRC_WINDOW3_BASE));
+		netdev_err(dev, "DEBUG: MSIX table:\n");
+		val1 = BNX2_PCI_GRC_WINDOW2_BASE;
+		for (i = 0; i < bp->irq_nvecs; i++) {
+			netdev_err(dev, "DEBUG: [%d]: %08x %08x %08x %08x\n",
+				   i, REG_RD(bp, val1), 
+				   REG_RD(bp, val1 + 4), REG_RD(bp, val1 + 8),
+				   REG_RD(bp, val1 + 12));
+			val1 += 16;
+		}
+	}
+}
+
+static void
+bnx2_tx_timeout(struct net_device *dev)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+
+	bnx2_dump_ftq(bp);
+	bnx2_dump_state(bp);
+	bnx2_dump_mcp_state(bp);
+
+#if defined(__VMKLNX__)
+	if (psod_on_tx_timeout) {
+		msleep(100);
+		BUG_ON(1);
+		return;
+	}
+#endif
+	if (stop_on_tx_timeout) {
+		netdev_err(dev, "prevent chip reset during tx timeout\n");
+		return;
+	}
+
+	/* This allows the netif to be shutdown gracefully before resetting */
+#if (LINUX_VERSION_CODE >= 0x20600)
+	schedule_work(&bp->reset_task);
+#else
+	schedule_task(&bp->reset_task);
+#endif
+}
+
+#ifdef BCM_VLAN
+/* Called with rtnl_lock */
+static void
+bnx2_vlan_rx_register(struct net_device *dev, struct vlan_group *vlgrp)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+
+#if defined(__VMKLNX__) && (VMWARE_ESX_DDK_VERSION < 50000)
+	/* rtnl_lock() needed for ESX 4.0 and 4.1 only */
+	rtnl_lock();
+#endif
+	if (netif_running(dev))
+		bnx2_netif_stop(bp, false);
+
+	bp->vlgrp = vlgrp;
+
+	if (netif_running(dev)) {
+		bnx2_set_rx_mode(dev);
+		if (bp->flags & BNX2_FLAG_CAN_KEEP_VLAN)
+			bnx2_fw_sync(bp, BNX2_DRV_MSG_CODE_KEEP_VLAN_UPDATE, 0,
+				     1);
+		bnx2_netif_start(bp, false);
+	}
+#if defined(__VMKLNX__) && (VMWARE_ESX_DDK_VERSION < 50000)
+	rtnl_unlock();
+#endif
+}
+
+#if (LINUX_VERSION_CODE < 0x20616)
+/* Called with rtnl_lock */
+static void
+bnx2_vlan_rx_kill_vid(struct net_device *dev, uint16_t vid)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+
+#if defined(__VMKLNX__) && (VMWARE_ESX_DDK_VERSION < 50000)
+	/* rtnl_lock() needed for ESX 4.0 and 4.1 only */
+	rtnl_lock();
+#endif
+	if (netif_running(dev))
+		bnx2_netif_stop(bp, false);
+
+	vlan_group_set_device(bp->vlgrp, vid, NULL);
+
+	if (!netif_running(dev)) {
+#if defined(__VMKLNX__) && (VMWARE_ESX_DDK_VERSION < 50000)
+		rtnl_unlock();
+#endif
+		return;
+	}
+
+	bnx2_set_rx_mode(dev);
+	if (bp->flags & BNX2_FLAG_CAN_KEEP_VLAN)
+		bnx2_fw_sync(bp, BNX2_DRV_MSG_CODE_KEEP_VLAN_UPDATE, 0, 1);
+
+	bnx2_netif_start(bp, false);
+#if defined(__VMKLNX__) && (VMWARE_ESX_DDK_VERSION < 50000)
+	rtnl_unlock();
+#endif
+}
+#endif
+#endif
+
+/* Called with netif_tx_lock.
+ * bnx2_tx_int() runs without netif_tx_lock unless it needs to call
+ * netif_wake_queue().
+ */
+static netdev_tx_t
+bnx2_start_xmit(struct sk_buff *skb, struct net_device *dev)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+	dma_addr_t mapping;
+	struct tx_bd *txbd;
+	struct sw_tx_bd *tx_buf;
+	u32 len, vlan_tag_flags, last_frag, mss;
+	u16 prod, ring_prod;
+	int i;
+#ifndef BCM_HAVE_MULTI_QUEUE
+	struct bnx2_napi *bnapi = &bp->bnx2_napi[0];
+	struct bnx2_tx_ring_info *txr = &bnapi->tx_ring;
+
+#if defined(__VMKLNX__) && (VMWARE_ESX_DDK_VERSION < 50000)
+	/*  Drop the packet if the queue has been stopped */
+	if (unlikely(netif_queue_stopped(dev))) {
+		dev_kfree_skb(skb);
+		return NETDEV_TX_OK;
+	}
+#endif
+#else
+	struct bnx2_napi *bnapi;
+	struct bnx2_tx_ring_info *txr;
+	struct netdev_queue *txq;
+
+	/*  Determine which tx ring we will be placed on */
+	i = skb_get_queue_mapping(skb);
+	bnapi = &bp->bnx2_napi[i];
+	txr = &bnapi->tx_ring;
+	txq = netdev_get_tx_queue(dev, i);
+
+#if defined(__VMKLNX__) && (VMWARE_ESX_DDK_VERSION < 50000)
+	/*  Drop the packet if the queue has been stopped */
+	if (unlikely(netif_tx_queue_stopped(txq))) {
+		dev_kfree_skb(skb);
+		return NETDEV_TX_OK;
+	}
+#endif
+#endif
+
+	if (unlikely(bnx2_tx_avail(bp, txr) <
+	    (skb_shinfo(skb)->nr_frags + 1))) {
+#ifndef BCM_HAVE_MULTI_QUEUE
+		netif_stop_queue(dev);
+#else
+		netif_tx_stop_queue(txq);
+#endif
+		netdev_err(dev, "BUG! Tx ring full when queue awake!\n");
+
+		return NETDEV_TX_BUSY;
+	}
+	len = skb_headlen(skb);
+	prod = txr->tx_prod;
+	ring_prod = TX_RING_IDX(prod);
+
+	vlan_tag_flags = 0;
+	if (skb->ip_summed == CHECKSUM_PARTIAL) {
+		vlan_tag_flags |= TX_BD_FLAGS_TCP_UDP_CKSUM;
+	}
+
+#ifdef BCM_VLAN
+	if (bp->vlgrp && vlan_tx_tag_present(skb)) {
+		vlan_tag_flags |=
+			(TX_BD_FLAGS_VLAN_TAG | (vlan_tx_tag_get(skb) << 16));
+	}
+#endif
+#ifdef BCM_TSO 
+	if ((mss = skb_shinfo(skb)->gso_size)) {
+		u32 tcp_opt_len;
+		struct iphdr *iph;
+
+		tcp_opt_len = tcp_optlen(skb);
+
+		if (skb_transport_offset(skb) + tcp_opt_len +
+		    sizeof(struct tcphdr) + mss >= skb->len)
+			goto abort_tso;
+
+		vlan_tag_flags |= TX_BD_FLAGS_SW_LSO;
+
+#ifndef BCM_NO_TSO6
+		if (skb_shinfo(skb)->gso_type & SKB_GSO_TCPV6) {
+			u32 tcp_off = skb_transport_offset(skb) -
+				      sizeof(struct ipv6hdr) - ETH_HLEN;
+
+			vlan_tag_flags |= ((tcp_opt_len >> 2) << 8) |
+					  TX_BD_FLAGS_SW_FLAGS;
+			if (likely(tcp_off == 0))
+				vlan_tag_flags &= ~TX_BD_FLAGS_TCP6_OFF0_MSK;
+			else {
+				tcp_off >>= 3;
+				vlan_tag_flags |= ((tcp_off & 0x3) <<
+						   TX_BD_FLAGS_TCP6_OFF0_SHL) |
+						  ((tcp_off & 0x10) <<
+						   TX_BD_FLAGS_TCP6_OFF4_SHL);
+				mss |= (tcp_off & 0xc) << TX_BD_TCP6_OFF2_SHL;
+			}
+		} else
+#endif
+		{
+			iph = ip_hdr(skb);
+			if (tcp_opt_len || (iph->ihl > 5)) {
+				vlan_tag_flags |= ((iph->ihl - 5) +
+						   (tcp_opt_len >> 2)) << 8;
+			}
+		}
+	}
+	else
+abort_tso:
+#endif
+	{
+		mss = 0;
+	}
+
+#if (LINUX_VERSION_CODE >= 0x02061b)
+	mapping = dma_map_single(&bp->pdev->dev, skb->data, len, PCI_DMA_TODEVICE);
+	if (dma_mapping_error(&bp->pdev->dev, mapping)) {
+#else
+	mapping = pci_map_single(bp->pdev, skb->data, len, PCI_DMA_TODEVICE);
+	if (pci_dma_mapping_error(mapping)) {
+#endif
+		dev_kfree_skb(skb);
+		return NETDEV_TX_OK;
+	}
+
+	tx_buf = &txr->tx_buf_ring[ring_prod];
+	tx_buf->skb = skb;
+	dma_unmap_addr_set(tx_buf, mapping, mapping);
+
+	txbd = &txr->tx_desc_ring[ring_prod];
+
+	txbd->tx_bd_haddr_hi = (u64) mapping >> 32;
+	txbd->tx_bd_haddr_lo = (u64) mapping & 0xffffffff;
+	txbd->tx_bd_mss_nbytes = len | (mss << 16);
+	txbd->tx_bd_vlan_tag_flags = vlan_tag_flags | TX_BD_FLAGS_START;
+
+	last_frag = skb_shinfo(skb)->nr_frags;
+	tx_buf->nr_frags = last_frag;
+	tx_buf->is_gso = skb_is_gso(skb);
+
+	for (i = 0; i < last_frag; i++) {
+		skb_frag_t *frag = &skb_shinfo(skb)->frags[i];
+
+		prod = NEXT_TX_BD(prod);
+		ring_prod = TX_RING_IDX(prod);
+		txbd = &txr->tx_desc_ring[ring_prod];
+
+		len = frag->size;
+#if (LINUX_VERSION_CODE >= 0x02061b)
+		mapping = dma_map_page(&bp->pdev->dev, frag->page, frag->page_offset,
+				       len, PCI_DMA_TODEVICE);
+		if (dma_mapping_error(&bp->pdev->dev, mapping))
+#else
+		mapping = pci_map_page(bp->pdev, frag->page, frag->page_offset,
+			len, PCI_DMA_TODEVICE);
+		if (pci_dma_mapping_error(mapping))
+#endif
+			goto dma_error;
+		dma_unmap_addr_set(&txr->tx_buf_ring[ring_prod], mapping,
+				   mapping);
+
+		txbd->tx_bd_haddr_hi = (u64) mapping >> 32;
+		txbd->tx_bd_haddr_lo = (u64) mapping & 0xffffffff;
+		txbd->tx_bd_mss_nbytes = len | (mss << 16);
+		txbd->tx_bd_vlan_tag_flags = vlan_tag_flags;
+
+	}
+	txbd->tx_bd_vlan_tag_flags |= TX_BD_FLAGS_END;
+
+	/* Sync BD data before updating TX mailbox */
+	wmb();
+
+	prod = NEXT_TX_BD(prod);
+	txr->tx_prod_bseq += skb->len;
+
+	REG_WR16(bp, txr->tx_bidx_addr, prod);
+	REG_WR(bp, txr->tx_bseq_addr, txr->tx_prod_bseq);
+
+	mmiowb();
+
+	txr->tx_prod = prod;
+#if (LINUX_VERSION_CODE <= 0x2061e) || defined(__VMKLNX__)
+	dev->trans_start = jiffies;
+#endif
+
+#if defined(BNX2_ENABLE_NETQUEUE)
+	bnapi->tx_packets_sent++;
+	wmb();
+#endif
+
+	if (unlikely(bnx2_tx_avail(bp, txr) <= MAX_SKB_FRAGS)) {
+#ifndef BCM_HAVE_MULTI_QUEUE
+		netif_stop_queue(dev);
+#else
+		netif_tx_stop_queue(txq);
+#endif
+		/* netif_tx_stop_queue() must be done before checking
+		 * tx index in bnx2_tx_avail() below, because in
+		 * bnx2_tx_int(), we update tx index before checking for
+		 * netif_tx_queue_stopped().
+		 */
+		smp_mb();
+		if (bnx2_tx_avail(bp, txr) > bp->tx_wake_thresh)
+#ifndef BCM_HAVE_MULTI_QUEUE
+			netif_wake_queue(dev);
+#else
+			netif_tx_wake_queue(txq);
+#endif
+	}
+
+	return NETDEV_TX_OK;
+dma_error:
+	/* save value of frag that failed */
+	last_frag = i;
+
+	/* start back at beginning and unmap skb */
+	prod = txr->tx_prod;
+	ring_prod = TX_RING_IDX(prod);
+	tx_buf = &txr->tx_buf_ring[ring_prod];
+	tx_buf->skb = NULL;
+#if (LINUX_VERSION_CODE >= 0x02061b)
+	dma_unmap_single(&bp->pdev->dev, dma_unmap_addr(tx_buf, mapping),
+			 skb_headlen(skb), PCI_DMA_TODEVICE);
+#else
+	pci_unmap_single(bp->pdev, dma_unmap_addr(tx_buf, mapping),
+			 skb_headlen(skb), PCI_DMA_TODEVICE);
+#endif
+
+	/* unmap remaining mapped pages */
+	for (i = 0; i < last_frag; i++) {
+		prod = NEXT_TX_BD(prod);
+		ring_prod = TX_RING_IDX(prod);
+		tx_buf = &txr->tx_buf_ring[ring_prod];
+#if (LINUX_VERSION_CODE >= 0x02061b)
+		dma_unmap_page(&bp->pdev->dev, dma_unmap_addr(tx_buf, mapping),
+#else
+		pci_unmap_page(bp->pdev, dma_unmap_addr(tx_buf, mapping),
+#endif
+			       skb_shinfo(skb)->frags[i].size,
+			       PCI_DMA_TODEVICE);
+	}
+
+	dev_kfree_skb(skb);
+	return NETDEV_TX_OK;
+}
+
+#if defined(BNX2_ENABLE_NETQUEUE)
+/* Called with rtnl_lock */
+static int
+bnx2_close(struct net_device *dev)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+
+	netif_tx_disable(bp->dev);
+	bp->dev->trans_start = jiffies;	/* prevent tx timeout */
+
+	if (bnx2_netqueue_is_avail(bp) &&
+	    (bp->netq_state == BNX2_NETQ_HW_STARTED))
+		bnx2_netqueue_flush_all(bp);
+	bnx2_netif_stop(bp, true);
+
+	if (bnx2_netqueue_is_avail(bp))
+		bnx2_close_netqueue_hw(bp);
+
+	del_timer_sync(&bp->timer);
+	if (bp->reset_failed == 0)
+		bnx2_shutdown_chip(bp);
+	bnx2_free_irq(bp);
+	bnx2_free_skbs(bp);
+	bnx2_free_mem(bp);
+#if !defined(__VMKLNX__)
+	bnx2_del_napi(bp);
+#endif
+	bp->link_up = 0;
+	netif_carrier_off(bp->dev);
+	bnx2_set_power_state(bp, PCI_D3hot);
+
+	return 0;
+}
+#else
+/* Called with rtnl_lock */
+static int
+bnx2_close(struct net_device *dev)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+
+	bnx2_disable_int_sync(bp);
+#ifdef BNX2_NEW_NAPI
+	bnx2_napi_disable(bp);
+#endif
+	del_timer_sync(&bp->timer);
+	bnx2_shutdown_chip(bp);
+	bnx2_free_irq(bp);
+	bnx2_free_skbs(bp);
+	bnx2_free_mem(bp);
+#if !defined(__VMKLNX__)
+	bnx2_del_napi(bp);
+#endif
+	bp->link_up = 0;
+	netif_carrier_off(bp->dev);
+	bnx2_set_power_state(bp, PCI_D3hot);
+	return 0;
+}
+#endif /* defined(BNX2_ENABLE_NETQUEUE) */
+
+static void
+bnx2_save_stats(struct bnx2 *bp)
+{
+	u32 *hw_stats = (u32 *) bp->stats_blk;
+	u32 *temp_stats = (u32 *) bp->temp_stats_blk;
+	int i;
+
+	/* The 1st 10 counters are 64-bit counters */
+	for (i = 0; i < 20; i += 2) {
+		u32 hi;
+		u64 lo;
+
+		hi = temp_stats[i] + hw_stats[i];
+		lo = (u64) temp_stats[i + 1] + (u64) hw_stats[i + 1];
+		if (lo > 0xffffffff)
+			hi++;
+		temp_stats[i] = hi;
+		temp_stats[i + 1] = lo & 0xffffffff;
+	}
+
+	for ( ; i < sizeof(struct statistics_block) / 4; i++)
+		temp_stats[i] += hw_stats[i];
+}
+
+#define GET_64BIT_NET_STATS64(ctr)				\
+	(unsigned long) ((unsigned long) (ctr##_hi) << 32) +	\
+	(unsigned long) (ctr##_lo)
+
+#define GET_64BIT_NET_STATS32(ctr)				\
+	(ctr##_lo)
+
+#if (BITS_PER_LONG == 64)
+#define GET_64BIT_NET_STATS(ctr)				\
+	GET_64BIT_NET_STATS64(bp->stats_blk->ctr) +		\
+	GET_64BIT_NET_STATS64(bp->temp_stats_blk->ctr)
+#else
+#define GET_64BIT_NET_STATS(ctr)				\
+	GET_64BIT_NET_STATS32(bp->stats_blk->ctr) +		\
+	GET_64BIT_NET_STATS32(bp->temp_stats_blk->ctr)
+#endif
+
+#define GET_32BIT_NET_STATS(ctr)				\
+	(unsigned long) (bp->stats_blk->ctr +			\
+			 bp->temp_stats_blk->ctr)
+
+static struct net_device_stats *
+bnx2_get_stats(struct net_device *dev)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+	struct net_device_stats *net_stats = &bp->net_stats;
+
+	if (bp->stats_blk == NULL)
+		return net_stats;
+
+	net_stats->rx_packets =
+		GET_64BIT_NET_STATS(stat_IfHCInUcastPkts) +
+		GET_64BIT_NET_STATS(stat_IfHCInMulticastPkts) +
+		GET_64BIT_NET_STATS(stat_IfHCInBroadcastPkts);
+
+	net_stats->tx_packets =
+		GET_64BIT_NET_STATS(stat_IfHCOutUcastPkts) +
+		GET_64BIT_NET_STATS(stat_IfHCOutMulticastPkts) +
+		GET_64BIT_NET_STATS(stat_IfHCOutBroadcastPkts);
+
+	net_stats->rx_bytes =
+		GET_64BIT_NET_STATS(stat_IfHCInOctets);
+
+	net_stats->tx_bytes =
+		GET_64BIT_NET_STATS(stat_IfHCOutOctets);
+
+	net_stats->multicast =
+		GET_64BIT_NET_STATS(stat_IfHCInMulticastPkts);
+
+	net_stats->collisions =
+		GET_32BIT_NET_STATS(stat_EtherStatsCollisions);
+
+	net_stats->rx_length_errors =
+		GET_32BIT_NET_STATS(stat_EtherStatsUndersizePkts) +
+		GET_32BIT_NET_STATS(stat_EtherStatsOverrsizePkts);
+
+	net_stats->rx_over_errors =
+		GET_32BIT_NET_STATS(stat_IfInFTQDiscards) +
+		GET_32BIT_NET_STATS(stat_IfInMBUFDiscards);
+
+	net_stats->rx_frame_errors =
+		GET_32BIT_NET_STATS(stat_Dot3StatsAlignmentErrors);
+
+	net_stats->rx_crc_errors =
+		GET_32BIT_NET_STATS(stat_Dot3StatsFCSErrors);
+
+	net_stats->rx_errors = net_stats->rx_length_errors +
+		net_stats->rx_over_errors + net_stats->rx_frame_errors +
+		net_stats->rx_crc_errors;
+
+	net_stats->tx_aborted_errors =
+		GET_32BIT_NET_STATS(stat_Dot3StatsExcessiveCollisions) +
+		GET_32BIT_NET_STATS(stat_Dot3StatsLateCollisions);
+
+	if ((CHIP_NUM(bp) == CHIP_NUM_5706) ||
+	    (CHIP_ID(bp) == CHIP_ID_5708_A0))
+		net_stats->tx_carrier_errors = 0;
+	else {
+		net_stats->tx_carrier_errors =
+			GET_32BIT_NET_STATS(stat_Dot3StatsCarrierSenseErrors);
+	}
+
+	net_stats->tx_errors =
+		GET_32BIT_NET_STATS(stat_emac_tx_stat_dot3statsinternalmactransmiterrors) +
+		net_stats->tx_aborted_errors +
+		net_stats->tx_carrier_errors;
+
+	net_stats->rx_missed_errors =
+		GET_32BIT_NET_STATS(stat_IfInFTQDiscards) +
+		GET_32BIT_NET_STATS(stat_IfInMBUFDiscards) +
+		GET_32BIT_NET_STATS(stat_FwRxDrop);
+
+	return net_stats;
+}
+
+/* All ethtool functions called with rtnl_lock */
+
+static int
+bnx2_get_settings(struct net_device *dev, struct ethtool_cmd *cmd)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+	int support_serdes = 0, support_copper = 0;
+
+	cmd->supported = SUPPORTED_Autoneg;
+	if (bp->phy_flags & BNX2_PHY_FLAG_REMOTE_PHY_CAP) {
+		support_serdes = 1;
+		support_copper = 1;
+	} else if (bp->phy_port == PORT_FIBRE)
+		support_serdes = 1;
+	else
+		support_copper = 1;
+
+	if (support_serdes) {
+		cmd->supported |= SUPPORTED_1000baseT_Full |
+			SUPPORTED_FIBRE;
+		if (bp->phy_flags & BNX2_PHY_FLAG_2_5G_CAPABLE)
+			cmd->supported |= SUPPORTED_2500baseX_Full;
+
+	}
+	if (support_copper) {
+		cmd->supported |= SUPPORTED_10baseT_Half |
+			SUPPORTED_10baseT_Full |
+			SUPPORTED_100baseT_Half |
+			SUPPORTED_100baseT_Full |
+			SUPPORTED_1000baseT_Full |
+			SUPPORTED_TP;
+
+	}
+
+	spin_lock_bh(&bp->phy_lock);
+	cmd->port = bp->phy_port;
+	cmd->advertising = bp->advertising;
+
+	if (bp->autoneg & AUTONEG_SPEED) {
+		cmd->autoneg = AUTONEG_ENABLE;
+	} else {
+		cmd->autoneg = AUTONEG_DISABLE;
+	}
+
+	if (netif_carrier_ok(dev)) {
+		ethtool_cmd_speed_set(cmd, bp->line_speed);
+		cmd->duplex = bp->duplex;
+	}
+	else {
+		ethtool_cmd_speed_set(cmd, -1);
+		cmd->duplex = -1;
+	}
+	spin_unlock_bh(&bp->phy_lock);
+
+	cmd->transceiver = XCVR_INTERNAL;
+	cmd->phy_address = bp->phy_addr;
+
+	return 0;
+}
+
+static int
+bnx2_set_settings(struct net_device *dev, struct ethtool_cmd *cmd)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+	u8 autoneg = bp->autoneg;
+	u8 req_duplex = bp->req_duplex;
+	u16 req_line_speed = bp->req_line_speed;
+	u32 advertising = bp->advertising;
+	int err = -EINVAL;
+
+	spin_lock_bh(&bp->phy_lock);
+
+	if (cmd->port != PORT_TP && cmd->port != PORT_FIBRE)
+		goto err_out_unlock;
+
+	if (cmd->port != bp->phy_port &&
+	    !(bp->phy_flags & BNX2_PHY_FLAG_REMOTE_PHY_CAP))
+		goto err_out_unlock;
+
+	/* If device is down, we can store the settings only if the user
+	 * is setting the currently active port.
+	 */
+	if (!netif_running(dev) && cmd->port != bp->phy_port)
+		goto err_out_unlock;
+
+	if (cmd->autoneg == AUTONEG_ENABLE) {
+		autoneg |= AUTONEG_SPEED;
+
+		advertising = cmd->advertising;
+		if (cmd->port == PORT_TP) {
+			advertising &= ETHTOOL_ALL_COPPER_SPEED;
+			if (!advertising)
+				advertising = ETHTOOL_ALL_COPPER_SPEED;
+		} else {
+			advertising &= ETHTOOL_ALL_FIBRE_SPEED;
+			if (!advertising)
+				advertising = ETHTOOL_ALL_FIBRE_SPEED;
+		}
+		advertising |= ADVERTISED_Autoneg;
+	}
+	else {
+		if (cmd->port == PORT_FIBRE) {
+			if ((cmd->speed != SPEED_1000 &&
+			     cmd->speed != SPEED_2500) ||
+			    (cmd->duplex != DUPLEX_FULL))
+				goto err_out_unlock;
+
+			if (cmd->speed == SPEED_2500 &&
+			    !(bp->phy_flags & BNX2_PHY_FLAG_2_5G_CAPABLE))
+				goto err_out_unlock;
+		}
+		else if (cmd->speed == SPEED_1000 || cmd->speed == SPEED_2500)
+			goto err_out_unlock;
+
+		autoneg &= ~AUTONEG_SPEED;
+		req_line_speed = cmd->speed;
+		req_duplex = cmd->duplex;
+		advertising = 0;
+	}
+
+	bp->autoneg = autoneg;
+	bp->advertising = advertising;
+	bp->req_line_speed = req_line_speed;
+	bp->req_duplex = req_duplex;
+
+	err = 0;
+	/* If device is down, the new settings will be picked up when it is
+	 * brought up.
+	 */
+	if (netif_running(dev))
+		err = bnx2_setup_phy(bp, cmd->port);
+
+err_out_unlock:
+	spin_unlock_bh(&bp->phy_lock);
+
+	return err;
+}
+
+static void
+bnx2_get_drvinfo(struct net_device *dev, struct ethtool_drvinfo *info)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+
+	strcpy(info->driver, DRV_MODULE_NAME);
+	strcpy(info->version, DRV_MODULE_VERSION);
+	strcpy(info->bus_info, pci_name(bp->pdev));
+	strcpy(info->fw_version, bp->fw_version);
+
+#if defined(VMWARE_ESX_DDK_VERSION) && \
+    (VMWARE_ESX_DDK_VERSION >= 35000) && (VMWARE_ESX_DDK_VERSION < 40000)
+	info->eedump_len = bnx2_get_eeprom_len(dev);
+#endif
+}
+
+#define BNX2_REGDUMP_LEN		(32 * 1024)
+
+static int
+bnx2_get_regs_len(struct net_device *dev)
+{
+	return BNX2_REGDUMP_LEN;
+}
+
+static void
+bnx2_get_regs(struct net_device *dev, struct ethtool_regs *regs, void *_p)
+{
+	u32 *p = _p, i, offset;
+	u8 *orig_p = _p;
+	struct bnx2 *bp = netdev_priv(dev);
+	static const u32 reg_boundaries[] = {
+		0x0000, 0x0098, 0x0400, 0x045c,
+		0x0800, 0x0880, 0x0c00, 0x0c10,
+		0x0c30, 0x0d08, 0x1000, 0x101c,
+		0x1040, 0x1048, 0x1080, 0x10a4,
+		0x1400, 0x1490, 0x1498, 0x14f0,
+		0x1500, 0x155c, 0x1580, 0x15dc,
+		0x1600, 0x1658, 0x1680, 0x16d8,
+		0x1800, 0x1820, 0x1840, 0x1854,
+		0x1880, 0x1894, 0x1900, 0x1984,
+		0x1c00, 0x1c0c, 0x1c40, 0x1c54,
+		0x1c80, 0x1c94, 0x1d00, 0x1d84,
+		0x2000, 0x2030, 0x23c0, 0x2400,
+		0x2800, 0x2820, 0x2830, 0x2850,
+		0x2b40, 0x2c10, 0x2fc0, 0x3058,
+		0x3c00, 0x3c94, 0x4000, 0x4010,
+		0x4080, 0x4090, 0x43c0, 0x4458,
+		0x4c00, 0x4c18, 0x4c40, 0x4c54,
+		0x4fc0, 0x5010, 0x53c0, 0x5444,
+		0x5c00, 0x5c18, 0x5c80, 0x5c90,
+		0x5fc0, 0x6000, 0x6400, 0x6428,
+		0x6800, 0x6848, 0x684c, 0x6860,
+		0x6888, 0x6910, 0x8000
+	};
+
+	regs->version = 0;
+
+	memset(p, 0, BNX2_REGDUMP_LEN);
+
+	if (!netif_running(bp->dev))
+		return;
+
+	i = 0;
+	offset = reg_boundaries[0];
+	p += offset;
+	while (offset < BNX2_REGDUMP_LEN) {
+		*p++ = REG_RD(bp, offset);
+		offset += 4;
+		if (offset == reg_boundaries[i + 1]) {
+			offset = reg_boundaries[i + 2];
+			p = (u32 *) (orig_p + offset);
+			i += 2;
+		}
+	}
+}
+
+static void
+bnx2_get_wol(struct net_device *dev, struct ethtool_wolinfo *wol)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+
+	if (bp->flags & BNX2_FLAG_NO_WOL) {
+		wol->supported = 0;
+		wol->wolopts = 0;
+	}
+	else {
+		wol->supported = WAKE_MAGIC;
+		if (bp->wol)
+			wol->wolopts = WAKE_MAGIC;
+		else
+			wol->wolopts = 0;
+	}
+	memset(&wol->sopass, 0, sizeof(wol->sopass));
+}
+
+static int
+bnx2_set_wol(struct net_device *dev, struct ethtool_wolinfo *wol)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+
+	if (wol->wolopts & ~WAKE_MAGIC)
+		return -EINVAL;
+
+	if (wol->wolopts & WAKE_MAGIC) {
+		if (bp->flags & BNX2_FLAG_NO_WOL)
+			return -EINVAL;
+
+		bp->wol = 1;
+	}
+	else {
+		bp->wol = 0;
+	}
+	return 0;
+}
+
+static int
+bnx2_nway_reset(struct net_device *dev)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+	u32 bmcr;
+
+	if (!netif_running(dev))
+		return -EAGAIN;
+
+	if (!(bp->autoneg & AUTONEG_SPEED)) {
+		return -EINVAL;
+	}
+
+	spin_lock_bh(&bp->phy_lock);
+
+	if (bp->phy_flags & BNX2_PHY_FLAG_REMOTE_PHY_CAP) {
+		int rc;
+
+		rc = bnx2_setup_remote_phy(bp, bp->phy_port);
+		spin_unlock_bh(&bp->phy_lock);
+		return rc;
+	}
+
+	/* Force a link down visible on the other side */
+	if (bp->phy_flags & BNX2_PHY_FLAG_SERDES) {
+		bnx2_write_phy(bp, bp->mii_bmcr, BMCR_LOOPBACK);
+		spin_unlock_bh(&bp->phy_lock);
+
+		bnx2_msleep(20);
+
+		spin_lock_bh(&bp->phy_lock);
+
+		bp->current_interval = BNX2_SERDES_AN_TIMEOUT;
+		bp->serdes_an_pending = 1;
+		mod_timer(&bp->timer, jiffies + bp->current_interval);
+	}
+
+	bnx2_read_phy(bp, bp->mii_bmcr, &bmcr);
+	bmcr &= ~BMCR_LOOPBACK;
+	bnx2_write_phy(bp, bp->mii_bmcr, bmcr | BMCR_ANRESTART | BMCR_ANENABLE);
+
+	spin_unlock_bh(&bp->phy_lock);
+
+	return 0;
+}
+
+static u32
+bnx2_get_link(struct net_device *dev)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+
+	return bp->link_up;
+}
+
+#if (LINUX_VERSION_CODE >= 0x20418) || \
+    (defined(VMWARE_ESX_DDK_VERSION) && \
+    ((VMWARE_ESX_DDK_VERSION >= 35000) && (VMWARE_ESX_DDK_VERSION < 40000)))
+static int
+bnx2_get_eeprom_len(struct net_device *dev)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+
+	if (bp->flash_info == NULL)
+		return 0;
+
+	return (int) bp->flash_size;
+}
+#endif
+
+#ifdef ETHTOOL_GEEPROM
+static int
+bnx2_get_eeprom(struct net_device *dev, struct ethtool_eeprom *eeprom,
+		u8 *eebuf)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+	int rc;
+
+	if (!netif_running(dev))
+		return -EAGAIN;
+
+	/* parameters already validated in ethtool_get_eeprom */
+
+	rc = bnx2_nvram_read(bp, eeprom->offset, eebuf, eeprom->len);
+
+	return rc;
+}
+#endif
+
+#ifdef ETHTOOL_SEEPROM
+static int
+bnx2_set_eeprom(struct net_device *dev, struct ethtool_eeprom *eeprom,
+		u8 *eebuf)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+	int rc;
+
+	if (!netif_running(dev))
+		return -EAGAIN;
+
+	/* parameters already validated in ethtool_set_eeprom */
+
+	rc = bnx2_nvram_write(bp, eeprom->offset, eebuf, eeprom->len);
+
+	return rc;
+}
+#endif
+
+static int
+bnx2_get_coalesce(struct net_device *dev, struct ethtool_coalesce *coal)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+
+	memset(coal, 0, sizeof(struct ethtool_coalesce));
+
+	coal->rx_coalesce_usecs = bp->rx_ticks;
+	coal->rx_max_coalesced_frames = bp->rx_quick_cons_trip;
+	coal->rx_coalesce_usecs_irq = bp->rx_ticks_int;
+	coal->rx_max_coalesced_frames_irq = bp->rx_quick_cons_trip_int;
+
+	coal->tx_coalesce_usecs = bp->tx_ticks;
+	coal->tx_max_coalesced_frames = bp->tx_quick_cons_trip;
+	coal->tx_coalesce_usecs_irq = bp->tx_ticks_int;
+	coal->tx_max_coalesced_frames_irq = bp->tx_quick_cons_trip_int;
+
+	coal->stats_block_coalesce_usecs = bp->stats_ticks;
+
+	return 0;
+}
+
+static int
+bnx2_set_coalesce(struct net_device *dev, struct ethtool_coalesce *coal)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+
+	bp->rx_ticks = (u16) coal->rx_coalesce_usecs;
+	if (bp->rx_ticks > 0x3ff) bp->rx_ticks = 0x3ff;
+
+	bp->rx_quick_cons_trip = (u16) coal->rx_max_coalesced_frames;
+	if (bp->rx_quick_cons_trip > 0xff) bp->rx_quick_cons_trip = 0xff;
+
+	bp->rx_ticks_int = (u16) coal->rx_coalesce_usecs_irq;
+	if (bp->rx_ticks_int > 0x3ff) bp->rx_ticks_int = 0x3ff;
+
+	bp->rx_quick_cons_trip_int = (u16) coal->rx_max_coalesced_frames_irq;
+	if (bp->rx_quick_cons_trip_int > 0xff)
+		bp->rx_quick_cons_trip_int = 0xff;
+
+	bp->tx_ticks = (u16) coal->tx_coalesce_usecs;
+	if (bp->tx_ticks > 0x3ff) bp->tx_ticks = 0x3ff;
+
+	bp->tx_quick_cons_trip = (u16) coal->tx_max_coalesced_frames;
+	if (bp->tx_quick_cons_trip > 0xff) bp->tx_quick_cons_trip = 0xff;
+
+	bp->tx_ticks_int = (u16) coal->tx_coalesce_usecs_irq;
+	if (bp->tx_ticks_int > 0x3ff) bp->tx_ticks_int = 0x3ff;
+
+	bp->tx_quick_cons_trip_int = (u16) coal->tx_max_coalesced_frames_irq;
+	if (bp->tx_quick_cons_trip_int > 0xff) bp->tx_quick_cons_trip_int =
+		0xff;
+
+	bp->stats_ticks = coal->stats_block_coalesce_usecs;
+	if (bp->flags & BNX2_FLAG_BROKEN_STATS) {
+		if (bp->stats_ticks != 0 && bp->stats_ticks != USEC_PER_SEC)
+			bp->stats_ticks = USEC_PER_SEC;
+	}
+	if (bp->stats_ticks > BNX2_HC_STATS_TICKS_HC_STAT_TICKS)
+		bp->stats_ticks = BNX2_HC_STATS_TICKS_HC_STAT_TICKS;
+	bp->stats_ticks &= BNX2_HC_STATS_TICKS_HC_STAT_TICKS;
+
+	if (netif_running(bp->dev)) {
+		bnx2_netif_stop(bp, true);
+		bnx2_init_nic(bp, 0);
+		bnx2_netif_start(bp, true);
+	}
+
+	return 0;
+}
+
+static void
+bnx2_get_ringparam(struct net_device *dev, struct ethtool_ringparam *ering)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+
+	ering->rx_max_pending = MAX_TOTAL_RX_DESC_CNT;
+	ering->rx_jumbo_max_pending = MAX_TOTAL_RX_PG_DESC_CNT;
+
+	ering->rx_pending = bp->rx_ring_size;
+	ering->rx_jumbo_pending = bp->rx_pg_ring_size;
+
+	ering->tx_max_pending = MAX_TX_DESC_CNT;
+	ering->tx_pending = bp->tx_ring_size;
+}
+
+static int
+bnx2_change_ring_size(struct bnx2 *bp, u32 rx, u32 tx, bool reset_irq)
+{
+	int rc = 0;
+
+#if defined(__VMKLNX__)
+	if(bp->reset_failed) {
+		netdev_err(bp->dev, "Previous error detected preventing MTU "
+				    "change\n");
+		return -EIO;
+	}
+#endif /* defined(__VMKLNX__) */
+
+	if (netif_running(bp->dev)) {
+		/* Reset will erase chipset stats; save them */
+		bnx2_save_stats(bp);
+
+#if defined(__VMKLNX__) && defined(BNX2_ENABLE_NETQUEUE)
+		netif_tx_disable(bp->dev);
+		bp->dev->trans_start = jiffies; /* prevent tx timeout */
+
+		if (bnx2_netqueue_is_avail(bp) &&
+		    (bp->netq_state & BNX2_NETQ_HW_STARTED)) {
+			bnx2_netqueue_flush_all(bp);
+		}
+		bnx2_stop_netqueue_hw(bp);
+#endif /* defined(BNX2_ENABLE_NETQUEUE) && defined(__VMKLNX__) */
+
+		bnx2_netif_stop(bp, true);
+
+#if defined(__VMKLNX__)
+#if defined(BNX2_ENABLE_NETQUEUE) && (VMWARE_ESX_DDK_VERSION >= 41000)
+		vmknetddi_queueops_invalidate_state(bp->dev);
+#endif /* defined(BNX2_ENABLE_NETQUEUE) && (VMWARE_ESX_DDK_VERSION >= 41000) */
+
+		rc = bnx2_reset_chip(bp, BNX2_DRV_MSG_CODE_RESET);
+
+		/*  Did the chip reset fail ? */
+		if (rc != 0) {
+			netdev_err(bp->dev, "chip reset failed during MTU "
+					    "change\n");
+
+			bp->reset_failed = 1;
+
+			goto error;
+		}
+		bnx2_free_irq(bp);
+#else  /* !defined(__VMKLNX__) */
+		bnx2_reset_chip(bp, BNX2_DRV_MSG_CODE_RESET);
+		if (reset_irq) {
+			bnx2_free_irq(bp);
+			bnx2_del_napi(bp);
+		} else {
+			__bnx2_free_irq(bp);
+		}
+#endif /* defined(__VMKLNX__) */
+		bnx2_free_skbs(bp);
+		bnx2_free_mem(bp);
+	}
+
+	bnx2_set_rx_ring_size(bp, rx);
+	bp->tx_ring_size = tx;
+
+	if (netif_running(bp->dev)) {
+		if (reset_irq) {
+			rc = bnx2_setup_int_mode(bp, disable_msi);
+			bnx2_init_napi(bp);
+		}
+
+		if (!rc) 
+			rc = bnx2_alloc_mem(bp);
+#if defined(BNX2_ENABLE_NETQUEUE)
+		if (rc) {
+			netdev_err(bp->dev, "failed alloc mem during MTU "
+					    "change\n");
+			goto error;
+		}
+
+		rc = bnx2_request_irq(bp);
+		if (rc) {
+			netdev_err(bp->dev, "failed request irq during MTU "
+					    "change %d\n", rc);
+			goto error;
+		}
+
+		rc = bnx2_init_nic(bp, 0);
+		if (rc) {
+			netdev_err(bp->dev, "failed init nic during MTU "
+					    "change\n");
+			goto error;
+		}
+
+		bnx2_init_netqueue_hw(bp);
+		bnx2_start_netqueue_hw(bp);
+#else /* !defined(BNX2_ENABLE_NETQUEUE) */
+		if (!rc)
+			rc = bnx2_request_irq(bp);
+
+		if (!rc)
+			rc = bnx2_init_nic(bp, 0);
+
+		if (rc) {
+
+			bnx2_napi_enable(bp);
+			dev_close(bp->dev);
+#if defined(__VMKLNX__) && (VMWARE_ESX_DDK_VERSION == 41000)
+			/* PR 533926
+			 * This is a workaround to sync device status in dev->flags and
+			 * dev->gflags. It is needed to avoid PSOD (due to double dev_close)
+			 * on reboot. In ESX5.0, the return value of this function will be
+			 * checked by NICSetMTU, where gflags will be updated appropriately.
+			 */
+			bp->dev->gflags &= ~IFF_DEV_IS_OPEN;
+#endif
+			return rc;
+		}
+#endif /* defined(BNX2_ENABLE_NETQUEUE) */
+#ifdef BCM_CNIC
+		mutex_lock(&bp->cnic_lock);
+		/* Let cnic know about the new status block. */
+		if (bp->cnic_eth_dev.drv_state & CNIC_DRV_STATE_REGD)
+			bnx2_setup_cnic_irq_info(bp);
+		mutex_unlock(&bp->cnic_lock);
+#endif
+		bnx2_netif_start(bp, true);
+	}
+
+	return 0;
+
+#if defined(__VMKLNX__)
+error:
+	netif_carrier_off(bp->dev);
+
+	return rc;
+#endif /* defined(__VMKLNX__) */
+}
+
+static int
+bnx2_set_ringparam(struct net_device *dev, struct ethtool_ringparam *ering)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+	int rc;
+
+	if ((ering->rx_pending > MAX_TOTAL_RX_DESC_CNT) ||
+		(ering->tx_pending > MAX_TX_DESC_CNT) ||
+		(ering->tx_pending <= MAX_SKB_FRAGS)) {
+
+		return -EINVAL;
+	}
+	rc = bnx2_change_ring_size(bp, ering->rx_pending, ering->tx_pending,
+				   false);
+	return rc;
+}
+
+static void
+bnx2_get_pauseparam(struct net_device *dev, struct ethtool_pauseparam *epause)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+
+	epause->autoneg = ((bp->autoneg & AUTONEG_FLOW_CTRL) != 0);
+	epause->rx_pause = ((bp->flow_ctrl & FLOW_CTRL_RX) != 0);
+	epause->tx_pause = ((bp->flow_ctrl & FLOW_CTRL_TX) != 0);
+}
+
+static int
+bnx2_set_pauseparam(struct net_device *dev, struct ethtool_pauseparam *epause)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+
+	bp->req_flow_ctrl = 0;
+	if (epause->rx_pause)
+		bp->req_flow_ctrl |= FLOW_CTRL_RX;
+	if (epause->tx_pause)
+		bp->req_flow_ctrl |= FLOW_CTRL_TX;
+
+	if (epause->autoneg) {
+		bp->autoneg |= AUTONEG_FLOW_CTRL;
+	}
+	else {
+		bp->autoneg &= ~AUTONEG_FLOW_CTRL;
+	}
+
+	if (netif_running(dev)) {
+		spin_lock_bh(&bp->phy_lock);
+		bnx2_setup_phy(bp, bp->phy_port);
+		spin_unlock_bh(&bp->phy_lock);
+	}
+
+	return 0;
+}
+
+static u32
+bnx2_get_rx_csum(struct net_device *dev)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+
+	return bp->rx_csum;
+}
+
+static int
+bnx2_set_rx_csum(struct net_device *dev, u32 data)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+
+	bp->rx_csum = data;
+	return 0;
+}
+
+#ifdef BCM_TSO
+static int
+bnx2_set_tso(struct net_device *dev, u32 data)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+
+	if (data) {
+		dev->features |= NETIF_F_TSO | NETIF_F_TSO_ECN;
+		if (CHIP_NUM(bp) == CHIP_NUM_5709)
+			dev->features |= NETIF_F_TSO6;
+	} else
+		dev->features &= ~(NETIF_F_TSO | NETIF_F_TSO6 |
+				   NETIF_F_TSO_ECN);
+	return 0;
+}
+#endif
+
+static struct {
+	char string[ETH_GSTRING_LEN];
+} bnx2_stats_str_arr[] = {
+	{ "rx_bytes" },
+	{ "rx_error_bytes" },
+	{ "tx_bytes" },
+	{ "tx_error_bytes" },
+	{ "rx_ucast_packets" },
+	{ "rx_mcast_packets" },
+	{ "rx_bcast_packets" },
+	{ "tx_ucast_packets" },
+	{ "tx_mcast_packets" },
+	{ "tx_bcast_packets" },
+	{ "tx_mac_errors" },
+	{ "tx_carrier_errors" },
+	{ "rx_crc_errors" },
+	{ "rx_align_errors" },
+	{ "tx_single_collisions" },
+	{ "tx_multi_collisions" },
+	{ "tx_deferred" },
+	{ "tx_excess_collisions" },
+	{ "tx_late_collisions" },
+	{ "tx_total_collisions" },
+	{ "rx_fragments" },
+	{ "rx_jabbers" },
+	{ "rx_undersize_packets" },
+	{ "rx_oversize_packets" },
+	{ "rx_64_byte_packets" },
+	{ "rx_65_to_127_byte_packets" },
+	{ "rx_128_to_255_byte_packets" },
+	{ "rx_256_to_511_byte_packets" },
+	{ "rx_512_to_1023_byte_packets" },
+	{ "rx_1024_to_1522_byte_packets" },
+	{ "rx_1523_to_9022_byte_packets" },
+	{ "tx_64_byte_packets" },
+	{ "tx_65_to_127_byte_packets" },
+	{ "tx_128_to_255_byte_packets" },
+	{ "tx_256_to_511_byte_packets" },
+	{ "tx_512_to_1023_byte_packets" },
+	{ "tx_1024_to_1522_byte_packets" },
+	{ "tx_1523_to_9022_byte_packets" },
+	{ "rx_xon_frames" },
+	{ "rx_xoff_frames" },
+	{ "tx_xon_frames" },
+	{ "tx_xoff_frames" },
+	{ "rx_mac_ctrl_frames" },
+	{ "rx_filtered_packets" },
+	{ "rx_ftq_discards" },
+	{ "rx_discards" },
+	{ "rx_fw_discards" },
+#if defined(BNX2_ENABLE_NETQUEUE)
+	{ "[0] rx_packets" },
+	{ "[0] rx_bytes" },
+	{ "[0] rx_errors" },
+	{ "[0] tx_packets" },
+	{ "[0] tx_bytes" },
+	{ "[1] rx_packets" },
+	{ "[1] rx_bytes" },
+	{ "[1] rx_errors" },
+	{ "[1] tx_packets" },
+	{ "[1] tx_bytes" },
+	{ "[2] rx_packets" },
+	{ "[2] rx_bytes" },
+	{ "[2] rx_errors" },
+	{ "[2] tx_packets" },
+	{ "[2] tx_bytes" },
+	{ "[3] rx_packets" },
+	{ "[3] rx_bytes" },
+	{ "[3] rx_errors" },
+	{ "[3] tx_packets" },
+	{ "[3] tx_bytes" },
+	{ "[4] rx_packets" },
+	{ "[4] rx_bytes" },
+	{ "[4] rx_errors" },
+	{ "[4] tx_packets" },
+	{ "[4] tx_bytes" },
+	{ "[5] rx_packets" },
+	{ "[5] rx_bytes" },
+	{ "[5] rx_errors" },
+	{ "[5] tx_packets" },
+	{ "[5] tx_bytes" },
+	{ "[6] rx_packets" },
+	{ "[6] rx_bytes" },
+	{ "[6] rx_errors" },
+	{ "[6] tx_packets" },
+	{ "[6] tx_bytes" },
+	{ "[7] rx_packets" },
+	{ "[7] rx_bytes" },
+	{ "[7] rx_errors" },
+	{ "[7] tx_packets" },
+	{ "[7] tx_bytes" },
+	{ "[8] rx_packets" },
+	{ "[8] rx_bytes" },
+	{ "[8] rx_errors" },
+	{ "[8] tx_packets" },
+	{ "[8] tx_bytes" },
+#endif
+};
+
+#define BNX2_NUM_STATS (sizeof(bnx2_stats_str_arr)/\
+			sizeof(bnx2_stats_str_arr[0]))
+
+#if defined(BNX2_ENABLE_NETQUEUE)
+#define BNX2_NUM_NETQ_STATS 45
+#endif
+
+#define STATS_OFFSET32(offset_name) (offsetof(struct statistics_block, offset_name) / 4)
+
+static const unsigned long bnx2_stats_offset_arr[BNX2_NUM_STATS] = {
+    STATS_OFFSET32(stat_IfHCInOctets_hi),
+    STATS_OFFSET32(stat_IfHCInBadOctets_hi),
+    STATS_OFFSET32(stat_IfHCOutOctets_hi),
+    STATS_OFFSET32(stat_IfHCOutBadOctets_hi),
+    STATS_OFFSET32(stat_IfHCInUcastPkts_hi),
+    STATS_OFFSET32(stat_IfHCInMulticastPkts_hi),
+    STATS_OFFSET32(stat_IfHCInBroadcastPkts_hi),
+    STATS_OFFSET32(stat_IfHCOutUcastPkts_hi),
+    STATS_OFFSET32(stat_IfHCOutMulticastPkts_hi),
+    STATS_OFFSET32(stat_IfHCOutBroadcastPkts_hi),
+    STATS_OFFSET32(stat_emac_tx_stat_dot3statsinternalmactransmiterrors),
+    STATS_OFFSET32(stat_Dot3StatsCarrierSenseErrors),
+    STATS_OFFSET32(stat_Dot3StatsFCSErrors),
+    STATS_OFFSET32(stat_Dot3StatsAlignmentErrors),
+    STATS_OFFSET32(stat_Dot3StatsSingleCollisionFrames),
+    STATS_OFFSET32(stat_Dot3StatsMultipleCollisionFrames),
+    STATS_OFFSET32(stat_Dot3StatsDeferredTransmissions),
+    STATS_OFFSET32(stat_Dot3StatsExcessiveCollisions),
+    STATS_OFFSET32(stat_Dot3StatsLateCollisions),
+    STATS_OFFSET32(stat_EtherStatsCollisions),
+    STATS_OFFSET32(stat_EtherStatsFragments),
+    STATS_OFFSET32(stat_EtherStatsJabbers),
+    STATS_OFFSET32(stat_EtherStatsUndersizePkts),
+    STATS_OFFSET32(stat_EtherStatsOverrsizePkts),
+    STATS_OFFSET32(stat_EtherStatsPktsRx64Octets),
+    STATS_OFFSET32(stat_EtherStatsPktsRx65Octetsto127Octets),
+    STATS_OFFSET32(stat_EtherStatsPktsRx128Octetsto255Octets),
+    STATS_OFFSET32(stat_EtherStatsPktsRx256Octetsto511Octets),
+    STATS_OFFSET32(stat_EtherStatsPktsRx512Octetsto1023Octets),
+    STATS_OFFSET32(stat_EtherStatsPktsRx1024Octetsto1522Octets),
+    STATS_OFFSET32(stat_EtherStatsPktsRx1523Octetsto9022Octets),
+    STATS_OFFSET32(stat_EtherStatsPktsTx64Octets),
+    STATS_OFFSET32(stat_EtherStatsPktsTx65Octetsto127Octets),
+    STATS_OFFSET32(stat_EtherStatsPktsTx128Octetsto255Octets),
+    STATS_OFFSET32(stat_EtherStatsPktsTx256Octetsto511Octets),
+    STATS_OFFSET32(stat_EtherStatsPktsTx512Octetsto1023Octets),
+    STATS_OFFSET32(stat_EtherStatsPktsTx1024Octetsto1522Octets),
+    STATS_OFFSET32(stat_EtherStatsPktsTx1523Octetsto9022Octets),
+    STATS_OFFSET32(stat_XonPauseFramesReceived),
+    STATS_OFFSET32(stat_XoffPauseFramesReceived),
+    STATS_OFFSET32(stat_OutXonSent),
+    STATS_OFFSET32(stat_OutXoffSent),
+    STATS_OFFSET32(stat_MacControlFramesReceived),
+    STATS_OFFSET32(stat_IfInFramesL2FilterDiscards),
+    STATS_OFFSET32(stat_IfInFTQDiscards),
+    STATS_OFFSET32(stat_IfInMBUFDiscards),
+    STATS_OFFSET32(stat_FwRxDrop),
+};
+
+/* stat_IfHCInBadOctets and stat_Dot3StatsCarrierSenseErrors are
+ * skipped because of errata.
+ */
+static u8 bnx2_5706_stats_len_arr[BNX2_NUM_STATS] = {
+	8,0,8,8,8,8,8,8,8,8,
+	4,0,4,4,4,4,4,4,4,4,
+	4,4,4,4,4,4,4,4,4,4,
+	4,4,4,4,4,4,4,4,4,4,
+	4,4,4,4,4,4,4,
+};
+
+static u8 bnx2_5708_stats_len_arr[BNX2_NUM_STATS] = {
+	8,0,8,8,8,8,8,8,8,8,
+	4,4,4,4,4,4,4,4,4,4,
+	4,4,4,4,4,4,4,4,4,4,
+	4,4,4,4,4,4,4,4,4,4,
+	4,4,4,4,4,4,4,
+};
+
+#define BNX2_NUM_TESTS 6
+
+static struct {
+	char string[ETH_GSTRING_LEN];
+} bnx2_tests_str_arr[BNX2_NUM_TESTS] = {
+	{ "register_test (offline)" },
+	{ "memory_test (offline)" },
+	{ "loopback_test (offline)" },
+	{ "nvram_test (online)" },
+	{ "interrupt_test (online)" },
+	{ "link_test (online)" },
+};
+
+#ifdef ETHTOOL_GFLAGS
+static int
+bnx2_get_sset_count(struct net_device *dev, int sset)
+{
+	switch (sset) {
+	case ETH_SS_TEST:
+		return BNX2_NUM_TESTS;
+	case ETH_SS_STATS:
+		return BNX2_NUM_STATS;
+	default:
+		return -EOPNOTSUPP;
+	}
+}
+#else
+static int
+bnx2_self_test_count(struct net_device *dev)
+{
+	return BNX2_NUM_TESTS;
+}
+#endif
+
+static void
+bnx2_self_test(struct net_device *dev, struct ethtool_test *etest, u64 *buf)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+
+	bnx2_set_power_state(bp, PCI_D0);
+
+	memset(buf, 0, sizeof(u64) * BNX2_NUM_TESTS);
+	if (etest->flags & ETH_TEST_FL_OFFLINE) {
+		int i;
+
+		bnx2_netif_stop(bp, true);
+		bnx2_reset_chip(bp, BNX2_DRV_MSG_CODE_DIAG);
+		bnx2_free_skbs(bp);
+
+		if (bnx2_test_registers(bp) != 0) {
+			buf[0] = 1;
+			etest->flags |= ETH_TEST_FL_FAILED;
+		}
+		if (bnx2_test_memory(bp) != 0) {
+			buf[1] = 1;
+			etest->flags |= ETH_TEST_FL_FAILED;
+		}
+		if ((buf[2] = bnx2_test_loopback(bp)) != 0)
+			etest->flags |= ETH_TEST_FL_FAILED;
+
+		if (!netif_running(bp->dev))
+			bnx2_shutdown_chip(bp);
+		else {
+			bnx2_init_nic(bp, 1);
+			bnx2_netif_start(bp, true);
+		}
+
+		/* wait for link up */
+		for (i = 0; i < 7; i++) {
+			if (bp->link_up)
+				break;
+			bnx2_msleep_interruptible(1000);
+		}
+	}
+
+	if (bnx2_test_nvram(bp) != 0) {
+		buf[3] = 1;
+		etest->flags |= ETH_TEST_FL_FAILED;
+	}
+	if (bnx2_test_intr(bp) != 0) {
+		buf[4] = 1;
+		etest->flags |= ETH_TEST_FL_FAILED;
+	}
+
+	if (bnx2_test_link(bp) != 0) {
+		buf[5] = 1;
+		etest->flags |= ETH_TEST_FL_FAILED;
+
+	}
+	if (!netif_running(bp->dev))
+		bnx2_set_power_state(bp, PCI_D3hot);
+}
+
+static void
+bnx2_get_strings(struct net_device *dev, u32 stringset, u8 *buf)
+{
+	switch (stringset) {
+	case ETH_SS_STATS:
+		memcpy(buf, bnx2_stats_str_arr,
+			sizeof(bnx2_stats_str_arr));
+		break;
+	case ETH_SS_TEST:
+		memcpy(buf, bnx2_tests_str_arr,
+			sizeof(bnx2_tests_str_arr));
+		break;
+	}
+}
+
+#ifndef ETHTOOL_GFLAGS
+static int
+bnx2_get_stats_count(struct net_device *dev)
+{
+	return BNX2_NUM_STATS;
+}
+#endif
+
+static void
+bnx2_get_ethtool_stats(struct net_device *dev,
+		struct ethtool_stats *stats, u64 *buf)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+	int i;
+	u32 *hw_stats = (u32 *) bp->stats_blk;
+	u32 *temp_stats = (u32 *) bp->temp_stats_blk;
+	u8 *stats_len_arr = NULL;
+
+	if (hw_stats == NULL) {
+		memset(buf, 0, sizeof(u64) * BNX2_NUM_STATS);
+		return;
+	}
+
+	if ((CHIP_ID(bp) == CHIP_ID_5706_A0) ||
+	    (CHIP_ID(bp) == CHIP_ID_5706_A1) ||
+	    (CHIP_ID(bp) == CHIP_ID_5706_A2) ||
+	    (CHIP_ID(bp) == CHIP_ID_5708_A0))
+		stats_len_arr = bnx2_5706_stats_len_arr;
+	else
+		stats_len_arr = bnx2_5708_stats_len_arr;
+
+#if defined(BNX2_ENABLE_NETQUEUE)
+	for (i = 0; i < BNX2_NUM_STATS - BNX2_NUM_NETQ_STATS; i++) {
+#else
+	for (i = 0; i < BNX2_NUM_STATS; i++) {
+#endif
+		unsigned long offset;
+
+		if (stats_len_arr[i] == 0) {
+			/* skip this counter */
+			buf[i] = 0;
+			continue;
+		}
+
+		offset = bnx2_stats_offset_arr[i];
+		if (stats_len_arr[i] == 4) {
+			/* 4-byte counter */
+			buf[i] = (u64) *(hw_stats + offset) +
+				 *(temp_stats + offset);
+			continue;
+		}
+		/* 8-byte counter */
+		buf[i] = (((u64) *(hw_stats + offset)) << 32) +
+			 *(hw_stats + offset + 1) +
+			 (((u64) *(temp_stats + offset)) << 32) +
+			 *(temp_stats + offset + 1);
+	}
+
+#if defined(BNX2_ENABLE_NETQUEUE)
+	/*  Copy over the NetQ specific statistics */
+	{
+		int j;
+
+		for (j = 0; j < BNX2_MAX_MSIX_VEC; j++) {
+			struct bnx2_napi *bnapi = &bp->bnx2_napi[j];
+
+			buf[i + (j*5) + 0] = (u64) (bnapi->stats.rx_packets);
+			buf[i + (j*5) + 1] = (u64) (bnapi->stats.rx_bytes);
+			buf[i + (j*5) + 2] = (u64) (bnapi->stats.rx_errors);
+			buf[i + (j*5) + 3] = (u64) (bnapi->stats.tx_packets);
+			buf[i + (j*5) + 4] = (u64) (bnapi->stats.tx_bytes);
+		}
+	}
+#endif
+}
+
+#if (LINUX_VERSION_CODE < 0x30000)
+static int
+bnx2_phys_id(struct net_device *dev, u32 data)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+	int i;
+	u32 save;
+
+	bnx2_set_power_state(bp, PCI_D0);
+
+	if (data == 0)
+		data = 2;
+
+	save = REG_RD(bp, BNX2_MISC_CFG);
+	REG_WR(bp, BNX2_MISC_CFG, BNX2_MISC_CFG_LEDMODE_MAC);
+
+	for (i = 0; i < (data * 2); i++) {
+		if ((i % 2) == 0) {
+			REG_WR(bp, BNX2_EMAC_LED, BNX2_EMAC_LED_OVERRIDE);
+		}
+		else {
+			REG_WR(bp, BNX2_EMAC_LED, BNX2_EMAC_LED_OVERRIDE |
+				BNX2_EMAC_LED_1000MB_OVERRIDE |
+				BNX2_EMAC_LED_100MB_OVERRIDE |
+				BNX2_EMAC_LED_10MB_OVERRIDE |
+				BNX2_EMAC_LED_TRAFFIC_OVERRIDE |
+				BNX2_EMAC_LED_TRAFFIC);
+		}
+		bnx2_msleep_interruptible(500);
+		if (signal_pending(current))
+			break;
+	}
+	REG_WR(bp, BNX2_EMAC_LED, 0);
+	REG_WR(bp, BNX2_MISC_CFG, save);
+
+	if (!netif_running(dev))
+		bnx2_set_power_state(bp, PCI_D3hot);
+
+	return 0;
+}
+
+#else
+
+static int
+bnx2_set_phys_id(struct net_device *dev, enum ethtool_phys_id_state state)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+
+	switch (state) {
+	case ETHTOOL_ID_ACTIVE:
+		bnx2_set_power_state(bp, PCI_D0);
+
+		bp->leds_save = REG_RD(bp, BNX2_MISC_CFG);
+		REG_WR(bp, BNX2_MISC_CFG, BNX2_MISC_CFG_LEDMODE_MAC);
+		return 1;	/* cycle on/off once per second */
+
+	case ETHTOOL_ID_ON:
+		REG_WR(bp, BNX2_EMAC_LED, BNX2_EMAC_LED_OVERRIDE |
+		       BNX2_EMAC_LED_1000MB_OVERRIDE |
+		       BNX2_EMAC_LED_100MB_OVERRIDE |
+		       BNX2_EMAC_LED_10MB_OVERRIDE |
+		       BNX2_EMAC_LED_TRAFFIC_OVERRIDE |
+		       BNX2_EMAC_LED_TRAFFIC);
+		break;
+
+	case ETHTOOL_ID_OFF:
+		REG_WR(bp, BNX2_EMAC_LED, BNX2_EMAC_LED_OVERRIDE);
+		break;
+
+	case ETHTOOL_ID_INACTIVE:
+		REG_WR(bp, BNX2_EMAC_LED, 0);
+		REG_WR(bp, BNX2_MISC_CFG, bp->leds_save);
+
+		if (!netif_running(dev))
+			bnx2_set_power_state(bp, PCI_D3hot);
+		break;
+	}
+
+	return 0;
+}
+
+#endif
+
+#if (LINUX_VERSION_CODE >= 0x20418)
+static int
+bnx2_set_tx_csum(struct net_device *dev, u32 data)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+
+	if (CHIP_NUM(bp) == CHIP_NUM_5709)
+#if (LINUX_VERSION_CODE < 0x2060c)
+		return bnx2_set_tx_hw_csum(dev, data);
+#elif (LINUX_VERSION_CODE >= 0x20617)
+		return ethtool_op_set_tx_ipv6_csum(dev, data);
+#else
+		return ethtool_op_set_tx_hw_csum(dev, data);
+#endif
+	else
+		return ethtool_op_set_tx_csum(dev, data);
+}
+#endif
+
+#ifdef NETIF_F_RXHASH
+#if (LINUX_VERSION_CODE >= 0x20624)
+static int
+bnx2_set_flags(struct net_device *dev, u32 data)
+{
+	return ethtool_op_set_flags(dev, data, ETH_FLAG_RXHASH);
+}
+
+#else
+static int
+bnx2_set_flags(struct net_device *dev, u32 data)
+{
+	if (data & (ETH_FLAG_LRO | ETH_FLAG_NTUPLE))
+		return -EOPNOTSUPP;
+
+	if (data & ETH_FLAG_RXHASH)
+		dev->features |= NETIF_F_RXHASH;
+	else
+		dev->features &= ~NETIF_F_RXHASH;
+	return 0;
+}
+#endif
+#endif
+
+#ifdef ETHTOOL_GCHANNELS
+static void bnx2_get_channels(struct net_device *dev,
+			      struct ethtool_channels *channels)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+	u32 max_rx_rings = 1;
+	u32 max_tx_rings = 1;
+
+	if ((bp->flags & BNX2_FLAG_MSIX_CAP) && !disable_msi) {
+		max_rx_rings = RX_MAX_RINGS;
+		max_tx_rings = TX_MAX_RINGS;
+	}
+
+	channels->max_rx = max_rx_rings;
+	channels->max_tx = max_tx_rings;
+	channels->max_other = 0;
+	channels->max_combined = 0;
+	channels->rx_count = bp->num_rx_rings;
+	channels->tx_count = bp->num_tx_rings;
+	channels->other_count = 0;
+	channels->combined_count = 0;
+}
+
+static int bnx2_set_channels(struct net_device *dev,
+			      struct ethtool_channels *channels)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+	u32 max_rx_rings = 1;
+	u32 max_tx_rings = 1;
+	int rc = 0;
+
+	if ((bp->flags & BNX2_FLAG_MSIX_CAP) && !disable_msi) {
+		max_rx_rings = RX_MAX_RINGS;
+		max_tx_rings = TX_MAX_RINGS;
+	}
+	if (channels->rx_count > max_rx_rings ||
+	    channels->tx_count > max_tx_rings)
+		return -EINVAL;
+
+	bp->num_req_rx_rings = channels->rx_count;
+	bp->num_req_tx_rings = channels->tx_count;
+
+	if (netif_running(dev))
+		rc = bnx2_change_ring_size(bp, bp->rx_ring_size,
+					   bp->tx_ring_size, true);
+
+	return rc;
+}
+
+#endif
+
+static struct ethtool_ops bnx2_ethtool_ops = {
+	.get_settings		= bnx2_get_settings,
+	.set_settings		= bnx2_set_settings,
+	.get_drvinfo		= bnx2_get_drvinfo,
+	.get_regs_len		= bnx2_get_regs_len,
+	.get_regs		= bnx2_get_regs,
+	.get_wol		= bnx2_get_wol,
+	.set_wol		= bnx2_set_wol,
+	.nway_reset		= bnx2_nway_reset,
+	.get_link		= bnx2_get_link,
+#if (LINUX_VERSION_CODE >= 0x20418)
+	.get_eeprom_len		= bnx2_get_eeprom_len,
+#endif
+#ifdef ETHTOOL_GEEPROM
+	.get_eeprom		= bnx2_get_eeprom,
+#endif
+#ifdef ETHTOOL_SEEPROM
+	.set_eeprom		= bnx2_set_eeprom,
+#endif
+	.get_coalesce		= bnx2_get_coalesce,
+	.set_coalesce		= bnx2_set_coalesce,
+	.get_ringparam		= bnx2_get_ringparam,
+	.set_ringparam		= bnx2_set_ringparam,
+	.get_pauseparam		= bnx2_get_pauseparam,
+	.set_pauseparam		= bnx2_set_pauseparam,
+	.get_rx_csum		= bnx2_get_rx_csum,
+	.set_rx_csum		= bnx2_set_rx_csum,
+	.get_tx_csum		= ethtool_op_get_tx_csum,
+#if (LINUX_VERSION_CODE >= 0x20418)
+	.set_tx_csum		= bnx2_set_tx_csum,
+#endif
+	.get_sg			= ethtool_op_get_sg,
+	.set_sg			= ethtool_op_set_sg,
+#ifdef BCM_TSO
+	.get_tso		= ethtool_op_get_tso,
+	.set_tso		= bnx2_set_tso,
+#endif
+#ifndef ETHTOOL_GFLAGS
+	.self_test_count	= bnx2_self_test_count,
+#endif
+	.self_test		= bnx2_self_test,
+	.get_strings		= bnx2_get_strings,
+#if (LINUX_VERSION_CODE < 0x30000)
+	.phys_id		= bnx2_phys_id,
+#else
+	.set_phys_id		= bnx2_set_phys_id,
+#endif
+#ifndef ETHTOOL_GFLAGS
+	.get_stats_count	= bnx2_get_stats_count,
+#endif
+	.get_ethtool_stats	= bnx2_get_ethtool_stats,
+#ifdef ETHTOOL_GPERMADDR
+#if (LINUX_VERSION_CODE < 0x020617)
+	.get_perm_addr		= ethtool_op_get_perm_addr,
+#endif
+#endif
+#ifdef ETHTOOL_GFLAGS
+	.get_sset_count		= bnx2_get_sset_count,
+#endif
+#ifdef NETIF_F_RXHASH
+	.set_flags		= bnx2_set_flags,
+	.get_flags		= ethtool_op_get_flags,
+#endif
+#ifdef ETHTOOL_GCHANNELS
+	.get_channels		= bnx2_get_channels,
+	.set_channels		= bnx2_set_channels,
+#endif
+};
+
+#if defined(BNX2_VMWARE_BMAPILNX)
+static int
+bnx2_ioctl_cim(struct net_device *dev, struct ifreq *ifr)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+	void __user *useraddr = ifr->ifr_data;
+	struct bnx2_ioctl_req req;
+	int rc = 0;
+	u32 val;
+
+	if (copy_from_user(&req, useraddr, sizeof(req))) {
+		netdev_err(bp->dev, "bnx2_ioctl() could not copy from user");
+		return -EFAULT;
+	}
+
+	switch(req.cmd) {
+	case BNX2_VMWARE_CIM_CMD_ENABLE_NIC:
+		netdev_info(bp->dev, "bnx2_ioctl() enable NIC\n");
+
+		rc = bnx2_open(bp->dev);
+		break;
+	case BNX2_VMWARE_CIM_CMD_DISABLE_NIC:
+		netdev_info(bp->dev, " bnx2_ioctl() disable NIC\n");
+
+		rc = bnx2_close(bp->dev);
+		break;
+	case BNX2_VMWARE_CIM_CMD_REG_READ: {
+		u32 mem_len;
+
+#if defined(__VMKLNX__) && defined(__VMKNETDDI_QUEUEOPS__)
+		mem_len = MB_GET_CID_ADDR(NETQUEUE_KCQ_CID + 2);
+#else
+		mem_len = MB_GET_CID_ADDR(TX_TSS_CID + TX_MAX_TSS_RINGS + 1);
+#endif
+		if(mem_len < req.cmd_req.reg_read.reg_offset) {
+			netdev_info(bp->dev, "bnx2_ioctl() reg read: "
+					     "out of range: max reg: 0x%x "
+					     "req reg: 0x%x\n",
+				mem_len, req.cmd_req.reg_read.reg_offset);
+			rc = -EINVAL;
+			break;
+		}
+
+		val = REG_RD(bp, req.cmd_req.reg_read.reg_offset);
+
+		netdev_err(bp->dev, "bnx2_ioctl() reg read: "
+				     "reg: 0x%x value:0x%x",
+				     req.cmd_req.reg_read.reg_offset,
+				     req.cmd_req.reg_read.reg_value);
+		req.cmd_req.reg_read.reg_value = val;
+
+		break;
+	} case BNX2_VMWARE_CIM_CMD_REG_WRITE: {
+		u32 mem_len;
+
+#if defined(__VMKLNX__) && defined(__VMKNETDDI_QUEUEOPS__)
+		mem_len = MB_GET_CID_ADDR(NETQUEUE_KCQ_CID + 2);
+#else
+		mem_len = MB_GET_CID_ADDR(TX_TSS_CID + TX_MAX_TSS_RINGS + 1);
+#endif
+		if(mem_len < req.cmd_req.reg_write.reg_offset) {
+			netdev_err(bp->dev, "bnx2_ioctl() reg write: "
+					    "out of range: max reg: 0x%x "
+					    "req reg: 0x%x\n",
+				mem_len, req.cmd_req.reg_write.reg_offset);
+			rc = -EINVAL;
+			break;
+		}
+
+		netdev_info(bp->dev, "bnx2_ioctl() reg write: "
+				     "reg: 0x%x value:0x%x",
+				     req.cmd_req.reg_write.reg_offset,
+				     req.cmd_req.reg_write.reg_value);
+
+		REG_WR(bp, req.cmd_req.reg_write.reg_offset,
+			   req.cmd_req.reg_write.reg_value);
+
+		break;
+	} case BNX2_VMWARE_CIM_CMD_GET_NIC_PARAM:
+		netdev_info(bp->dev, "bnx2_ioctl() get NIC param\n");
+
+		req.cmd_req.get_nic_param.mtu = dev->mtu;
+		memcpy(req.cmd_req.get_nic_param.current_mac_addr,
+		       dev->dev_addr,
+		       sizeof(req.cmd_req.get_nic_param.current_mac_addr));
+		break;
+	case BNX2_VMWARE_CIM_CMD_GET_NIC_STATUS:
+		netdev_info(bp->dev, "bnx2_ioctl() get NIC status\n");
+
+		req.cmd_req.get_nic_status.nic_status = netif_running(dev);
+		break;
+	default:
+		netdev_warn(bp->dev, "bnx2_ioctl() unknown req.cmd: 0x%x\n",
+				     req.cmd);
+		rc = -EINVAL;
+	}
+
+        if (rc == 0 &&
+	    copy_to_user(useraddr, &req, sizeof(req))) {
+		netdev_err(bp->dev, "bnx2_ioctl() couldn't copy to user "
+				    "bnx2_ioctl_req\n");
+                return -EFAULT;
+	}
+
+	return rc;
+}
+#endif  /* BNX2_VMWARE_BMAPILNX */
+
+/* Called with rtnl_lock */
+static int
+bnx2_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd)
+{
+#if (LINUX_VERSION_CODE >= 0x020607)
+	struct mii_ioctl_data *data = if_mii(ifr);
+#else
+	struct mii_ioctl_data *data = (struct mii_ioctl_data *) &ifr->ifr_ifru;
+#endif
+	struct bnx2 *bp = netdev_priv(dev);
+	int err;
+
+	switch(cmd) {
+	case SIOCGMIIPHY:
+		data->phy_id = bp->phy_addr;
+
+		/* fallthru */
+	case SIOCGMIIREG: {
+		u32 mii_regval;
+
+		if (bp->phy_flags & BNX2_PHY_FLAG_REMOTE_PHY_CAP)
+			return -EOPNOTSUPP;
+
+		if (!netif_running(dev))
+			return -EAGAIN;
+
+		spin_lock_bh(&bp->phy_lock);
+		err = bnx2_read_phy(bp, data->reg_num & 0x1f, &mii_regval);
+		spin_unlock_bh(&bp->phy_lock);
+
+		data->val_out = mii_regval;
+
+		return err;
+	}
+
+	case SIOCSMIIREG:
+#if defined(__VMKLNX__)
+		if (!capable(CAP_NET_ADMIN))
+			return -EPERM;
+#endif
+
+		if (bp->phy_flags & BNX2_PHY_FLAG_REMOTE_PHY_CAP)
+			return -EOPNOTSUPP;
+
+		if (!netif_running(dev))
+			return -EAGAIN;
+
+		spin_lock_bh(&bp->phy_lock);
+		err = bnx2_write_phy(bp, data->reg_num & 0x1f, data->val_in);
+		spin_unlock_bh(&bp->phy_lock);
+
+		return err;
+
+#if defined(BNX2_VMWARE_BMAPILNX)
+#define SIOBNX2CIM	0x89F0
+	case SIOBNX2CIM:
+		return bnx2_ioctl_cim(dev, ifr);
+#endif  /* BNX2_VMWARE_BMAPILNX */
+	default:
+		/* do nothing */
+		break;
+	}
+	return -EOPNOTSUPP;
+}
+
+#if defined(__VMKLNX__)
+static int
+bnx2_vmk_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd)
+{
+	int rc;
+
+#if (VMWARE_ESX_DDK_VERSION < 50000)
+	/* rtnl_lock() needed for ESX 4.0 and 4.1 only */
+	rtnl_lock();
+#endif
+	rc = bnx2_ioctl(dev, ifr, cmd);
+#if (VMWARE_ESX_DDK_VERSION < 50000)
+	rtnl_unlock();
+#endif
+	return rc;
+}
+#endif
+
+/* Called with rtnl_lock */
+static int
+bnx2_change_mac_addr(struct net_device *dev, void *p)
+{
+	struct sockaddr *addr = p;
+	struct bnx2 *bp = netdev_priv(dev);
+
+	if (!is_valid_ether_addr(addr->sa_data))
+		return -EINVAL;
+
+	memcpy(dev->dev_addr, addr->sa_data, dev->addr_len);
+	if (netif_running(dev))
+		bnx2_set_mac_addr(bp, bp->dev->dev_addr, 0);
+
+	return 0;
+}
+
+/* Called with rtnl_lock */
+static int
+bnx2_change_mtu(struct net_device *dev, int new_mtu)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+
+	if (((new_mtu + ETH_HLEN) > MAX_ETHERNET_JUMBO_PACKET_SIZE) ||
+		((new_mtu + ETH_HLEN) < MIN_ETHERNET_PACKET_SIZE))
+		return -EINVAL;
+
+	dev->mtu = new_mtu;
+	return (bnx2_change_ring_size(bp, bp->rx_ring_size, bp->tx_ring_size,
+				      false));
+}
+
+#if defined(__VMKLNX__)
+static int
+bnx2_vmk_change_mtu(struct net_device *dev, int new_mtu)
+{
+	int rc;
+
+#if (VMWARE_ESX_DDK_VERSION < 50000)
+	/* rtnl_lock() needed for ESX 4.0 and 4.1 only */
+	rtnl_lock();
+#endif
+	rc = bnx2_change_mtu(dev, new_mtu);
+#if (VMWARE_ESX_DDK_VERSION < 50000)
+	rtnl_unlock();
+#endif
+
+	return rc;
+}
+#endif
+
+#if defined(HAVE_POLL_CONTROLLER) || defined(CONFIG_NET_POLL_CONTROLLER)
+static void
+poll_bnx2(struct net_device *dev)
+{
+	struct bnx2 *bp = netdev_priv(dev);
+
+#if defined(RED_HAT_LINUX_KERNEL) && (LINUX_VERSION_CODE < 0x020600)
+	if (netdump_mode) {
+		struct bnx2_irq *irq = &bp->irq_tbl[0];
+
+		irq_handler(irq->vector, &bp->bnx2_napi[0], NULL);
+		if (dev->poll_list.prev) {
+			int budget = 64;
+
+			bnx2_poll(dev, &budget);
+		}
+	}
+	else
+#endif
+	{
+		int i;
+
+		for (i = 0; i < bp->irq_nvecs; i++) {
+			struct bnx2_irq *irq = &bp->irq_tbl[i];
+
+			disable_irq(irq->vector);
+#if (LINUX_VERSION_CODE >= 0x20613) || (defined(__VMKLNX__) && (VMWARE_ESX_DDK_VERSION >= 40000))
+			irq->handler(irq->vector, &bp->bnx2_napi[i]);
+#else
+			irq->handler(irq->vector, &bp->bnx2_napi[i], NULL);
+#endif
+			enable_irq(irq->vector);
+		}
+	}
+}
+#endif
+
+static void __devinit
+bnx2_get_5709_media(struct bnx2 *bp)
+{
+	u32 val = REG_RD(bp, BNX2_MISC_DUAL_MEDIA_CTRL);
+	u32 bond_id = val & BNX2_MISC_DUAL_MEDIA_CTRL_BOND_ID;
+	u32 strap;
+
+	if (bond_id == BNX2_MISC_DUAL_MEDIA_CTRL_BOND_ID_C)
+		return;
+	else if (bond_id == BNX2_MISC_DUAL_MEDIA_CTRL_BOND_ID_S) {
+		bp->phy_flags |= BNX2_PHY_FLAG_SERDES;
+		return;
+	}
+
+	if (val & BNX2_MISC_DUAL_MEDIA_CTRL_STRAP_OVERRIDE)
+		strap = (val & BNX2_MISC_DUAL_MEDIA_CTRL_PHY_CTRL) >> 21;
+	else
+		strap = (val & BNX2_MISC_DUAL_MEDIA_CTRL_PHY_CTRL_STRAP) >> 8;
+
+	if (bp->func == 0) {
+		switch (strap) {
+		case 0x4:
+		case 0x5:
+		case 0x6:
+			bp->phy_flags |= BNX2_PHY_FLAG_SERDES;
+			return;
+		}
+	} else {
+		switch (strap) {
+		case 0x1:
+		case 0x2:
+		case 0x4:
+			bp->phy_flags |= BNX2_PHY_FLAG_SERDES;
+			return;
+		}
+	}
+}
+
+static void __devinit
+bnx2_get_pci_speed(struct bnx2 *bp)
+{
+	u32 reg;
+
+	reg = REG_RD(bp, BNX2_PCICFG_MISC_STATUS);
+	if (reg & BNX2_PCICFG_MISC_STATUS_PCIX_DET) {
+		u32 clkreg;
+
+		bp->flags |= BNX2_FLAG_PCIX;
+
+		clkreg = REG_RD(bp, BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS);
+
+		clkreg &= BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET;
+		switch (clkreg) {
+		case BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_133MHZ:
+			bp->bus_speed_mhz = 133;
+			break;
+
+		case BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_95MHZ:
+			bp->bus_speed_mhz = 100;
+			break;
+
+		case BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_66MHZ:
+		case BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_80MHZ:
+			bp->bus_speed_mhz = 66;
+			break;
+
+		case BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_48MHZ:
+		case BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_55MHZ:
+			bp->bus_speed_mhz = 50;
+			break;
+
+		case BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_LOW:
+		case BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_32MHZ:
+		case BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_38MHZ:
+			bp->bus_speed_mhz = 33;
+			break;
+		}
+	}
+	else {
+		if (reg & BNX2_PCICFG_MISC_STATUS_M66EN)
+			bp->bus_speed_mhz = 66;
+		else
+			bp->bus_speed_mhz = 33;
+	}
+
+	if (reg & BNX2_PCICFG_MISC_STATUS_32BIT_DET)
+		bp->flags |= BNX2_FLAG_PCI_32BIT;
+
+}
+
+static void __devinit
+bnx2_read_vpd_fw_ver(struct bnx2 *bp)
+{
+	int rc, i, v0_len = 0;
+	u8 *data;
+	u8 *v0_str = NULL;
+	bool mn_match = false;
+
+#define BNX2_VPD_NVRAM_OFFSET	0x300
+#define BNX2_VPD_LEN		128
+#define BNX2_MAX_VER_SLEN	30
+
+	data = kmalloc(256, GFP_KERNEL);
+	if (!data)
+		return;
+
+	rc = bnx2_nvram_read(bp, BNX2_VPD_NVRAM_OFFSET, data + BNX2_VPD_LEN,
+			     BNX2_VPD_LEN);
+	if (rc)
+		goto vpd_done;
+
+	for (i = 0; i < BNX2_VPD_LEN; i += 4) {
+		data[i] = data[i + BNX2_VPD_LEN + 3];
+		data[i + 1] = data[i + BNX2_VPD_LEN + 2];
+		data[i + 2] = data[i + BNX2_VPD_LEN + 1];
+		data[i + 3] = data[i + BNX2_VPD_LEN];
+	}
+
+	for (i = 0; i <= BNX2_VPD_LEN - 3; ) {
+		unsigned char val = data[i];
+		unsigned int block_end;
+
+		if (val == 0x82 || val == 0x91) {
+			i = (i + 3 + (data[i + 1] + (data[i + 2] << 8)));
+			continue;
+		}
+
+		if (val != 0x90)
+			goto vpd_done;
+
+		block_end = (i + 3 + (data[i + 1] + (data[i + 2] << 8)));
+		i += 3;
+
+		if (block_end > BNX2_VPD_LEN)
+			goto vpd_done;
+
+		while (i < (block_end - 2)) {
+			int len = data[i + 2];
+
+			if (i + 3 + len > block_end)
+				goto vpd_done;
+
+			if (data[i] == 'M' && data[i + 1] == 'N') {
+				if (len != 4 ||
+				    memcmp(&data[i + 3], "1028", 4))
+					goto vpd_done;
+				mn_match = true;
+
+			} else if (data[i] == 'V' && data[i + 1] == '0') {
+				if (len > BNX2_MAX_VER_SLEN)
+					goto vpd_done;
+
+				v0_len = len;
+				v0_str = &data[i + 3];
+			}
+			i += 3 + len;
+
+			if (mn_match && v0_str) {
+				memcpy(bp->fw_version, v0_str, v0_len);
+				bp->fw_version[v0_len] = ' ';
+				goto vpd_done;
+			}
+		}
+		goto vpd_done;
+	}
+
+vpd_done:
+	kfree(data);
+}
+
+static int __devinit
+bnx2_init_board(struct pci_dev *pdev, struct net_device *dev)
+{
+	struct bnx2 *bp;
+	unsigned long mem_len;
+	int rc, i, j;
+	u32 reg;
+	u64 dma_mask, persist_dma_mask;
+	int err;
+
+#if (LINUX_VERSION_CODE < 0x20610)
+	SET_MODULE_OWNER(dev);
+#endif
+#if (LINUX_VERSION_CODE >= 0x20419)
+	SET_NETDEV_DEV(dev, &pdev->dev);
+#endif
+	bp = netdev_priv(dev);
+
+	bp->flags = 0;
+	bp->phy_flags = 0;
+
+	bp->temp_stats_blk =
+		kmalloc(sizeof(struct statistics_block), GFP_KERNEL);
+
+	if (bp->temp_stats_blk == NULL) {
+		rc = -ENOMEM;
+		goto err_out;
+	}
+	memset(bp->temp_stats_blk, 0, sizeof(struct statistics_block));
+
+	/* enable device (incl. PCI PM wakeup), and bus-mastering */
+	rc = pci_enable_device(pdev);
+	if (rc) {
+		dev_err(&pdev->dev, "Cannot enable PCI device, aborting\n");
+		goto err_out;
+	}
+
+	if (!(pci_resource_flags(pdev, 0) & IORESOURCE_MEM)) {
+		dev_err(&pdev->dev,
+			"Cannot find PCI device base address, aborting\n");
+		rc = -ENODEV;
+		goto err_out_disable;
+	}
+
+	rc = pci_request_regions(pdev, DRV_MODULE_NAME);
+	if (rc) {
+		dev_err(&pdev->dev, "Cannot obtain PCI resources, aborting\n");
+		goto err_out_disable;
+	}
+
+	pci_set_master(pdev);
+
+	bp->pm_cap = pci_find_capability(pdev, PCI_CAP_ID_PM);
+	if (bp->pm_cap == 0) {
+		dev_err(&pdev->dev,
+			"Cannot find power management capability, aborting\n");
+		rc = -EIO;
+		goto err_out_release;
+	}
+
+	bp->dev = dev;
+	bp->pdev = pdev;
+
+	spin_lock_init(&bp->phy_lock);
+	spin_lock_init(&bp->indirect_lock);
+#if defined(BNX2_ENABLE_NETQUEUE)
+	mutex_init(&bp->netq_lock);
+#endif
+#ifdef BCM_CNIC
+	mutex_init(&bp->cnic_lock);
+#endif
+#if (LINUX_VERSION_CODE >= 0x20600)
+#if defined(INIT_DELAYED_WORK_DEFERRABLE) || defined(INIT_WORK_NAR)  || (defined(__VMKLNX__) && (VMWARE_ESX_DDK_VERSION >= 40000))
+	INIT_WORK(&bp->reset_task, bnx2_reset_task);
+#else
+	INIT_WORK(&bp->reset_task, bnx2_reset_task, bp);
+#endif
+#else
+	INIT_TQUEUE(&bp->reset_task, bnx2_reset_task, bp);
+#endif
+
+	dev->base_addr = dev->mem_start = pci_resource_start(pdev, 0);
+#if defined(BNX2_ENABLE_NETQUEUE)
+	mem_len = MB_GET_CID_ADDR(NETQUEUE_KCQ_CID + 2);
+#else
+	mem_len = MB_GET_CID_ADDR(TX_TSS_CID + TX_MAX_TSS_RINGS + 1);
+#endif
+	dev->mem_end = dev->mem_start + mem_len;
+	dev->irq = pdev->irq;
+
+	bp->regview = ioremap_nocache(dev->base_addr, mem_len);
+
+	if (!bp->regview) {
+		dev_err(&pdev->dev, "Cannot map register space, aborting\n");
+		rc = -ENOMEM;
+		goto err_out_release;
+	}
+
+	bnx2_set_power_state(bp, PCI_D0);
+
+	/* Configure byte swap and enable write to the reg_window registers.
+	 * Rely on CPU to do target byte swapping on big endian systems
+	 * The chip's target access swapping will not swap all accesses
+	 */
+	REG_WR(bp, BNX2_PCICFG_MISC_CONFIG,
+		   BNX2_PCICFG_MISC_CONFIG_REG_WINDOW_ENA |
+		   BNX2_PCICFG_MISC_CONFIG_TARGET_MB_WORD_SWAP);
+
+	bp->chip_id = REG_RD(bp, BNX2_MISC_ID);
+
+	if (CHIP_NUM(bp) == CHIP_NUM_5709) {
+		if (!pci_is_pcie(pdev)) {
+			dev_err(&pdev->dev, "Not PCIE, aborting\n");
+			rc = -EIO;
+			goto err_out_unmap;
+		}
+		bp->flags |= BNX2_FLAG_PCIE;
+		if (CHIP_REV(bp) == CHIP_REV_Ax)
+			bp->flags |= BNX2_FLAG_JUMBO_BROKEN;
+
+#if !defined(CONFIG_PPC64) && !defined(CONFIG_PPC32)
+		/* AER (Advanced Error Reporting) hooks */
+		err = pci_enable_pcie_error_reporting(pdev);
+		if (!err)
+			bp->flags |= BNX2_FLAG_AER_ENABLED;
+#endif
+
+	} else {
+		bp->pcix_cap = pci_find_capability(pdev, PCI_CAP_ID_PCIX);
+		if (bp->pcix_cap == 0) {
+			dev_err(&pdev->dev,
+				"Cannot find PCIX capability, aborting\n");
+			rc = -EIO;
+			goto err_out_unmap;
+		}
+		bp->flags |= BNX2_FLAG_BROKEN_STATS;
+	}
+
+#ifdef CONFIG_PCI_MSI
+	if (CHIP_NUM(bp) == CHIP_NUM_5709 && CHIP_REV(bp) != CHIP_REV_Ax) {
+		if (pci_find_capability(pdev, PCI_CAP_ID_MSIX))
+			bp->flags |= BNX2_FLAG_MSIX_CAP;
+	}
+#endif
+
+	if (CHIP_ID(bp) != CHIP_ID_5706_A0 && CHIP_ID(bp) != CHIP_ID_5706_A1) {
+		if (pci_find_capability(pdev, PCI_CAP_ID_MSI))
+			bp->flags |= BNX2_FLAG_MSI_CAP;
+	}
+
+	/* 5708 cannot support DMA addresses > 40-bit.  */
+	if (CHIP_NUM(bp) == CHIP_NUM_5708)
+		persist_dma_mask = dma_mask = DMA_BIT_MASK(40);
+	else
+		persist_dma_mask = dma_mask = DMA_BIT_MASK(64);
+
+	/* Configure DMA attributes. */
+	if (pci_set_dma_mask(pdev, dma_mask) == 0) {
+#if defined(__VMKLNX__) && (VMWARE_ESX_DDK_VERSION >= 50000)
+                if (CHIP_NUM(bp) == CHIP_NUM_5708)
+                        dev->features |= NETIF_F_DMA40;
+                else
+                        dev->features |= NETIF_F_HIGHDMA;
+#else
+		dev->features |= NETIF_F_HIGHDMA;
+#endif
+		rc = pci_set_consistent_dma_mask(pdev, persist_dma_mask);
+		if (rc) {
+			dev_err(&pdev->dev,
+				"pci_set_consistent_dma_mask failed, aborting\n");
+			goto err_out_unmap;
+		}
+	} else if ((rc = pci_set_dma_mask(pdev, DMA_BIT_MASK(32))) != 0) {
+		dev_err(&pdev->dev, "System does not support DMA, aborting\n");
+		goto err_out_unmap;
+	}
+
+	if (!(bp->flags & BNX2_FLAG_PCIE))
+		bnx2_get_pci_speed(bp);
+
+	/* 5706A0 may falsely detect SERR and PERR. */
+	if (CHIP_ID(bp) == CHIP_ID_5706_A0) {
+		reg = REG_RD(bp, PCI_COMMAND);
+		reg &= ~(PCI_COMMAND_SERR | PCI_COMMAND_PARITY);
+		REG_WR(bp, PCI_COMMAND, reg);
+	}
+	else if ((CHIP_ID(bp) == CHIP_ID_5706_A1) &&
+		!(bp->flags & BNX2_FLAG_PCIX)) {
+
+		dev_err(&pdev->dev,
+			"5706 A1 can only be used in a PCIX bus, aborting\n");
+		goto err_out_unmap;
+	}
+
+	bnx2_init_nvram(bp);
+
+	reg = bnx2_reg_rd_ind(bp, BNX2_SHM_HDR_SIGNATURE);
+
+	if (bnx2_reg_rd_ind(bp, BNX2_MCP_TOE_ID) & BNX2_MCP_TOE_ID_FUNCTION_ID)
+		bp->func = 1;
+
+	if ((reg & BNX2_SHM_HDR_SIGNATURE_SIG_MASK) ==
+	    BNX2_SHM_HDR_SIGNATURE_SIG) {
+		u32 off = bp->func << 2;
+
+		bp->shmem_base = bnx2_reg_rd_ind(bp, BNX2_SHM_HDR_ADDR_0 + off);
+	} else
+		bp->shmem_base = HOST_VIEW_SHMEM_BASE;
+
+	/* Get the permanent MAC address.  First we need to make sure the
+	 * firmware is actually running.
+	 */
+	reg = bnx2_shmem_rd(bp, BNX2_DEV_INFO_SIGNATURE);
+
+	if ((reg & BNX2_DEV_INFO_SIGNATURE_MAGIC_MASK) !=
+	    BNX2_DEV_INFO_SIGNATURE_MAGIC) {
+		dev_err(&pdev->dev, "Firmware not running, aborting\n");
+		rc = -ENODEV;
+		goto err_out_unmap;
+	}
+
+	bnx2_read_vpd_fw_ver(bp);
+
+	j = strlen(bp->fw_version);
+	reg = bnx2_shmem_rd(bp, BNX2_DEV_INFO_BC_REV);
+	for (i = 0; i < 3 && j < 24; i++) {
+		u8 num, k, skip0;
+
+		if (i == 0) {
+			bp->fw_version[j++] = 'b';
+			bp->fw_version[j++] = 'c';
+			bp->fw_version[j++] = ' ';
+		}
+		num = (u8) (reg >> (24 - (i * 8)));
+		for (k = 100, skip0 = 1; k >= 1; num %= k, k /= 10) {
+			if (num >= k || !skip0 || k == 1) {
+				bp->fw_version[j++] = (num / k) + '0';
+				skip0 = 0;
+			}
+		}
+		if (i != 2)
+			bp->fw_version[j++] = '.';
+	}
+	reg = bnx2_shmem_rd(bp, BNX2_PORT_FEATURE);
+	if (reg & BNX2_PORT_FEATURE_WOL_ENABLED)
+		bp->wol = 1;
+
+	if (reg & BNX2_PORT_FEATURE_ASF_ENABLED) {
+		bp->flags |= BNX2_FLAG_ASF_ENABLE;
+
+		for (i = 0; i < 30; i++) {
+			reg = bnx2_shmem_rd(bp, BNX2_BC_STATE_CONDITION);
+			if (reg & BNX2_CONDITION_MFW_RUN_MASK)
+				break;
+			bnx2_msleep(10);
+		}
+	}
+	reg = bnx2_shmem_rd(bp, BNX2_BC_STATE_CONDITION);
+	reg &= BNX2_CONDITION_MFW_RUN_MASK;
+	if (reg != BNX2_CONDITION_MFW_RUN_UNKNOWN &&
+	    reg != BNX2_CONDITION_MFW_RUN_NONE) {
+		u32 addr = bnx2_shmem_rd(bp, BNX2_MFW_VER_PTR);
+
+		if (j < 32)
+			bp->fw_version[j++] = ' ';
+		for (i = 0; i < 3 && j < 28; i++) {
+			reg = bnx2_reg_rd_ind(bp, addr + i * 4);
+			reg = be32_to_cpu(reg);
+			memcpy(&bp->fw_version[j], &reg, 4);
+			j += 4;
+		}
+	}
+
+	reg = bnx2_shmem_rd(bp, BNX2_PORT_HW_CFG_MAC_UPPER);
+	bp->mac_addr[0] = (u8) (reg >> 8);
+	bp->mac_addr[1] = (u8) reg;
+
+	reg = bnx2_shmem_rd(bp, BNX2_PORT_HW_CFG_MAC_LOWER);
+	bp->mac_addr[2] = (u8) (reg >> 24);
+	bp->mac_addr[3] = (u8) (reg >> 16);
+	bp->mac_addr[4] = (u8) (reg >> 8);
+	bp->mac_addr[5] = (u8) reg;
+
+	bp->tx_ring_size = MAX_TX_DESC_CNT;
+	bnx2_set_rx_ring_size(bp, 255);
+
+	bp->rx_csum = 1;
+
+	bp->tx_quick_cons_trip_int = 2;
+	bp->tx_quick_cons_trip = 20;
+	bp->tx_ticks_int = 18;
+	bp->tx_ticks = 80;
+
+	bp->rx_quick_cons_trip_int = 2;
+	bp->rx_quick_cons_trip = 12;
+	bp->rx_ticks_int = 18;
+	bp->rx_ticks = 18;
+
+	bp->stats_ticks = USEC_PER_SEC & BNX2_HC_STATS_TICKS_HC_STAT_TICKS;
+
+	bp->current_interval = BNX2_TIMER_INTERVAL;
+
+	bp->phy_addr = 1;
+
+	/* Disable WOL support if we are running on a SERDES chip. */
+	if (CHIP_NUM(bp) == CHIP_NUM_5709)
+		bnx2_get_5709_media(bp);
+	else if (CHIP_BOND_ID(bp) & CHIP_BOND_ID_SERDES_BIT)
+		bp->phy_flags |= BNX2_PHY_FLAG_SERDES;
+
+	bp->phy_port = PORT_TP;
+	if (bp->phy_flags & BNX2_PHY_FLAG_SERDES) {
+		bp->phy_port = PORT_FIBRE;
+		reg = bnx2_shmem_rd(bp, BNX2_SHARED_HW_CFG_CONFIG);
+		if (!(reg & BNX2_SHARED_HW_CFG_GIG_LINK_ON_VAUX)) {
+			bp->flags |= BNX2_FLAG_NO_WOL;
+			bp->wol = 0;
+		}
+		if (CHIP_NUM(bp) == CHIP_NUM_5706) {
+			/* Don't do parallel detect on this board because of
+			 * some board problems.  The link will not go down
+			 * if we do parallel detect.
+			 */
+			if (pdev->subsystem_vendor == PCI_VENDOR_ID_HP &&
+			    pdev->subsystem_device == 0x310c)
+				bp->phy_flags |= BNX2_PHY_FLAG_NO_PARALLEL;
+		} else {
+			bp->phy_addr = 2;
+			if (reg & BNX2_SHARED_HW_CFG_PHY_2_5G)
+				bp->phy_flags |= BNX2_PHY_FLAG_2_5G_CAPABLE;
+		}
+	} else if (CHIP_NUM(bp) == CHIP_NUM_5706 ||
+		   CHIP_NUM(bp) == CHIP_NUM_5708)
+		bp->phy_flags |= BNX2_PHY_FLAG_CRC_FIX;
+	else if (CHIP_NUM(bp) == CHIP_NUM_5709 &&
+		 (CHIP_REV(bp) == CHIP_REV_Ax ||
+		  CHIP_REV(bp) == CHIP_REV_Bx))
+		bp->phy_flags |= BNX2_PHY_FLAG_DIS_EARLY_DAC;
+
+	bnx2_init_fw_cap(bp);
+
+	if ((CHIP_ID(bp) == CHIP_ID_5708_A0) ||
+	    (CHIP_ID(bp) == CHIP_ID_5708_B0) ||
+	    (CHIP_ID(bp) == CHIP_ID_5708_B1) ||
+	    !(REG_RD(bp, BNX2_PCI_CONFIG_3) & BNX2_PCI_CONFIG_3_VAUX_PRESET)) {
+		bp->flags |= BNX2_FLAG_NO_WOL;
+		bp->wol = 0;
+	}
+
+	if (CHIP_ID(bp) == CHIP_ID_5706_A0) {
+		bp->tx_quick_cons_trip_int =
+			bp->tx_quick_cons_trip;
+		bp->tx_ticks_int = bp->tx_ticks;
+		bp->rx_quick_cons_trip_int =
+			bp->rx_quick_cons_trip;
+		bp->rx_ticks_int = bp->rx_ticks;
+		bp->comp_prod_trip_int = bp->comp_prod_trip;
+		bp->com_ticks_int = bp->com_ticks;
+		bp->cmd_ticks_int = bp->cmd_ticks;
+	}
+
+#ifdef CONFIG_PCI_MSI
+#if defined(__VMKLNX__)
+	/* PR496996: There is some additional setup needed for the P2P
+	 *           ServerWorks bridge with VID/DID of 0x1666/0x0036 when
+         *           5706 is plugged into an IBM system x3655 server and MSI
+         *           is used.  Since that workaround cannot be done using
+         *           vmklinux api, we are disabling MSI on 5706 to avoid PSOD.
+         */
+        if (CHIP_NUM(bp) == CHIP_NUM_5706)
+                disable_msi = 1;
+#else /* !defined(__VMKLNX__) */
+	/* Disable MSI on 5706 if AMD 8132 bridge is found.
+	 *
+	 * MSI is defined to be 32-bit write.  The 5706 does 64-bit MSI writes
+	 * with byte enables disabled on the unused 32-bit word.  This is legal
+	 * but causes problems on the AMD 8132 which will eventually stop
+	 * responding after a while.
+	 *
+	 * AMD believes this incompatibility is unique to the 5706, and
+	 * prefers to locally disable MSI rather than globally disabling it.
+	 */
+	if (CHIP_NUM(bp) == CHIP_NUM_5706 && disable_msi == 0) {
+		struct pci_dev *amd_8132 = NULL;
+
+		while ((amd_8132 = pci_get_device(PCI_VENDOR_ID_AMD,
+						  PCI_DEVICE_ID_AMD_8132_BRIDGE,
+						  amd_8132))) {
+			u8 rev;
+
+			pci_read_config_byte(amd_8132, PCI_REVISION_ID, &rev);
+			if (rev >= 0x10 && rev <= 0x13) {
+				disable_msi = 1;
+				pci_dev_put(amd_8132);
+				break;
+			}
+		}
+	}
+#endif /* defined(__VMKLNX__) */
+#endif
+	bnx2_set_default_link(bp);
+	bp->req_flow_ctrl = FLOW_CTRL_RX | FLOW_CTRL_TX;
+
+	init_timer(&bp->timer);
+	bp->timer.expires = RUN_AT(BNX2_TIMER_INTERVAL);
+	bp->timer.data = (unsigned long) bp;
+	bp->timer.function = bnx2_timer;
+
+#ifdef BCM_CNIC
+	if (bnx2_shmem_rd(bp, BNX2_ISCSI_INITIATOR) & BNX2_ISCSI_INITIATOR_EN)
+		bp->cnic_eth_dev.max_iscsi_conn =
+			(bnx2_shmem_rd(bp, BNX2_ISCSI_MAX_CONN) &
+			 BNX2_ISCSI_MAX_CONN_MASK) >> BNX2_ISCSI_MAX_CONN_SHIFT;
+#endif
+
+#if (LINUX_VERSION_CODE >= 0x020611)
+	pci_save_state(pdev);
+#endif
+
+	return 0;
+
+err_out_unmap:
+	if (bp->flags & BNX2_FLAG_AER_ENABLED) {
+		pci_disable_pcie_error_reporting(pdev);
+		bp->flags &= ~BNX2_FLAG_AER_ENABLED;
+	}
+
+	if (bp->regview) {
+		iounmap(bp->regview);
+		bp->regview = NULL;
+	}
+
+err_out_release:
+	pci_release_regions(pdev);
+
+err_out_disable:
+	pci_disable_device(pdev);
+	pci_set_drvdata(pdev, NULL);
+
+err_out:
+	return rc;
+}
+
+static char * __devinit
+bnx2_bus_string(struct bnx2 *bp, char *str)
+{
+	char *s = str;
+
+	if (bp->flags & BNX2_FLAG_PCIE) {
+		s += sprintf(s, "PCI Express");
+	} else {
+		s += sprintf(s, "PCI");
+		if (bp->flags & BNX2_FLAG_PCIX)
+			s += sprintf(s, "-X");
+		if (bp->flags & BNX2_FLAG_PCI_32BIT)
+			s += sprintf(s, " 32-bit");
+		else
+			s += sprintf(s, " 64-bit");
+		s += sprintf(s, " %dMHz", bp->bus_speed_mhz);
+	}
+	return str;
+}
+
+#if !defined(__VMKLNX__)
+static void
+bnx2_del_napi(struct bnx2 *bp)
+#else
+static void __devinit
+bnx2_del_napi(struct bnx2 *bp)
+#endif
+{
+#ifdef BNX2_NEW_NAPI
+	int i;
+
+	for (i = 0; i < bp->irq_nvecs; i++)
+		netif_napi_del(&bp->bnx2_napi[i].napi);
+#endif
+}
+
+#if !defined(__VMKLNX__)
+static void
+bnx2_init_napi(struct bnx2 *bp)
+#else
+static void __devinit
+bnx2_init_napi(struct bnx2 *bp)
+#endif
+{
+	int i;
+
+	for (i = 0; i < bp->irq_nvecs; i++) {
+		struct bnx2_napi *bnapi = &bp->bnx2_napi[i];
+#ifdef BNX2_NEW_NAPI
+		int (*poll)(struct napi_struct *, int);
+
+		if (i == 0)
+			poll = bnx2_poll;
+		else
+			poll = bnx2_poll_msix;
+
+		netif_napi_add(bp->dev, &bp->bnx2_napi[i].napi, poll, 64);
+#endif
+
+		bnapi->bp = bp;
+	}
+#ifndef BNX2_NEW_NAPI
+	bp->dev->poll = bnx2_poll;
+	bp->dev->weight = 64;
+#endif
+}
+
+#if defined(HAVE_NET_DEVICE_OPS) || (LINUX_VERSION_CODE >= 0x30000)
+static const struct net_device_ops bnx2_netdev_ops = {
+	.ndo_open		= bnx2_open,
+	.ndo_start_xmit		= bnx2_start_xmit,
+	.ndo_stop		= bnx2_close,
+	.ndo_get_stats		= bnx2_get_stats,
+	.ndo_set_rx_mode	= bnx2_set_rx_mode,
+#if defined(__VMKLNX__)
+	.ndo_do_ioctl		= bnx2_vmk_ioctl,
+#else
+	.ndo_do_ioctl		= bnx2_ioctl,
+#endif
+	.ndo_validate_addr	= eth_validate_addr,
+	.ndo_set_mac_address	= bnx2_change_mac_addr,
+#if defined(__VMKLNX__)
+	.ndo_change_mtu		= bnx2_vmk_change_mtu,
+#else
+	.ndo_change_mtu		= bnx2_change_mtu,
+#endif
+	.ndo_tx_timeout		= bnx2_tx_timeout,
+#ifdef BCM_VLAN
+	.ndo_vlan_rx_register	= bnx2_vlan_rx_register,
+#endif
+#if defined(HAVE_POLL_CONTROLLER) || defined(CONFIG_NET_POLL_CONTROLLER)
+	.ndo_poll_controller	= poll_bnx2,
+#endif
+};
+#endif
+
+static inline void vlan_features_add(struct net_device *dev, unsigned long flags)
+{
+#if (LINUX_VERSION_CODE >= 0x2061a)
+#ifdef BCM_VLAN
+	dev->vlan_features |= flags;
+#endif
+#endif
+}
+
+static int __devinit
+bnx2_init_one(struct pci_dev *pdev, const struct pci_device_id *ent)
+{
+	static int version_printed = 0;
+	struct net_device *dev = NULL;
+	struct bnx2 *bp;
+	int rc;
+	char str[40];
+	DECLARE_MAC_BUF(mac);
+#if defined(BNX2_ENABLE_NETQUEUE)
+	static int index = 0;
+#endif
+
+	if (version_printed++ == 0)
+		pr_info("%s", version);
+
+	/* dev zeroed in init_etherdev */
+#if (LINUX_VERSION_CODE >= 0x20418)
+#ifndef BCM_HAVE_MULTI_QUEUE
+	dev = alloc_etherdev(sizeof(*bp));
+#else
+	dev = alloc_etherdev_mq(sizeof(*bp), TX_MAX_RINGS);
+#endif
+#else
+	dev = init_etherdev(NULL, sizeof(*bp));
+#endif
+
+	if (!dev)
+		return -ENOMEM;
+
+	rc = bnx2_init_board(pdev, dev);
+	if (rc < 0) {
+#if (LINUX_VERSION_CODE >= 0x20418)
+		free_netdev(dev);
+#else
+		unregister_netdev(dev);
+		kfree(dev);
+#endif
+		return rc;
+	}
+
+#ifndef HAVE_NET_DEVICE_OPS
+	dev->open = bnx2_open;
+	dev->hard_start_xmit = bnx2_start_xmit;
+	dev->stop = bnx2_close;
+	dev->get_stats = bnx2_get_stats;
+#ifdef BCM_HAVE_SET_RX_MODE
+	dev->set_rx_mode = bnx2_set_rx_mode;
+#else
+	dev->set_multicast_list = bnx2_set_rx_mode;
+#endif
+#if defined(__VMKLNX__)
+	dev->do_ioctl = bnx2_vmk_ioctl;
+#else
+	dev->do_ioctl = bnx2_ioctl;
+#endif
+	dev->set_mac_address = bnx2_change_mac_addr;
+#if defined(__VMKLNX__)
+	dev->change_mtu = bnx2_vmk_change_mtu;
+#else
+	dev->change_mtu = bnx2_change_mtu;
+#endif
+	dev->tx_timeout = bnx2_tx_timeout;
+#ifdef BCM_VLAN
+	dev->vlan_rx_register = bnx2_vlan_rx_register;
+#if (LINUX_VERSION_CODE < 0x20616)
+	dev->vlan_rx_kill_vid = bnx2_vlan_rx_kill_vid;
+#endif
+#endif
+#if defined(HAVE_POLL_CONTROLLER) || defined(CONFIG_NET_POLL_CONTROLLER)
+	dev->poll_controller = poll_bnx2;
+#endif
+#else
+	dev->netdev_ops = &bnx2_netdev_ops;
+#endif
+	dev->watchdog_timeo = TX_TIMEOUT;
+	dev->ethtool_ops = &bnx2_ethtool_ops;
+
+	bp = netdev_priv(dev);
+	/*  NAPI add must be called in bnx2_init_one() on ESX so that the
+	 *  proper affinity will be assigned */
+#if defined(__VMKLNX__)
+	bnx2_setup_int_mode(bp, disable_msi);
+	bnx2_init_napi(bp);
+#endif /* (__VMKLNX__)*/
+
+	pci_set_drvdata(pdev, dev);
+
+	memcpy(dev->dev_addr, bp->mac_addr, 6);
+#ifdef ETHTOOL_GPERMADDR
+	memcpy(dev->perm_addr, bp->mac_addr, 6);
+#endif
+
+#ifdef NETIF_F_IPV6_CSUM
+	dev->features |= NETIF_F_IP_CSUM | NETIF_F_SG;
+#if defined(NETIF_F_GRO) && defined(BNX2_NEW_NAPI)
+	dev->features |= NETIF_F_GRO;
+#endif
+#ifdef NETIF_F_RXHASH
+	dev->features |= NETIF_F_RXHASH;
+#endif
+	vlan_features_add(dev, NETIF_F_IP_CSUM | NETIF_F_SG);
+	if (CHIP_NUM(bp) == CHIP_NUM_5709) {
+		dev->features |= NETIF_F_IPV6_CSUM;
+		vlan_features_add(dev, NETIF_F_IPV6_CSUM);
+	}
+#else
+	dev->features |= NETIF_F_SG;
+	if (CHIP_NUM(bp) == CHIP_NUM_5709)
+		dev->features |= NETIF_F_HW_CSUM;
+	else
+		dev->features |= NETIF_F_IP_CSUM;
+#endif
+#ifdef BCM_VLAN
+	dev->features |= NETIF_F_HW_VLAN_TX | NETIF_F_HW_VLAN_RX;
+#endif
+#ifdef BCM_TSO
+	dev->features |= NETIF_F_TSO | NETIF_F_TSO_ECN;
+	vlan_features_add(dev, NETIF_F_TSO | NETIF_F_TSO_ECN);
+	if (CHIP_NUM(bp) == CHIP_NUM_5709) {
+		dev->features |= NETIF_F_TSO6;
+		vlan_features_add(dev, NETIF_F_TSO6);
+	}
+#endif
+
+#if defined(__VMKLNX__) && (VMWARE_ESX_DDK_VERSION >= 50000)
+        if (CHIP_NUM(bp) == CHIP_NUM_5706 ||
+            CHIP_NUM(bp) == CHIP_NUM_5708) {
+                dev->features |= NETIF_F_NO_SCHED;
+        }
+#endif
+
+#if defined(BNX2_ENABLE_NETQUEUE)
+	/*  If enabled register the NetQueue callbacks */
+	if (CHIP_NUM(bp) == CHIP_NUM_5709) {
+		bp->index = index;
+		index++;
+		if (BNX2_NETQUEUE_ENABLED(bp))
+			VMKNETDDI_REGISTER_QUEUEOPS(dev, bnx2_netqueue_ops);
+	}
+#endif
+
+#if (LINUX_VERSION_CODE >= 0x20418)
+	if ((rc = register_netdev(dev))) {
+		dev_err(&pdev->dev, "Cannot register net device\n");
+		goto error;
+	}
+#endif
+	netdev_info(dev, "%s (%c%d) %s found at mem %lx, IRQ %d, node addr %s\n",
+		    board_info[ent->driver_data].name,
+		    ((CHIP_ID(bp) & 0xf000) >> 12) + 'A',
+		    ((CHIP_ID(bp) & 0x0ff0) >> 4),
+		    bnx2_bus_string(bp, str),
+		    dev->base_addr,
+		    bp->pdev->irq, print_mac(mac, dev->dev_addr));
+
+#if defined(BNX2_ENABLE_NETQUEUE)
+	if (CHIP_NUM(bp) == CHIP_NUM_5709) {
+		if (BNX2_NETQUEUE_ENABLED(bp)) {
+			netdev_info(bp->dev, "NetQueue Ops registered [%d]\n",
+					     bp->index);
+		} else
+			netdev_info(bp->dev, "NetQueue Ops not registered "
+					     "[%d]\n",
+					     bp->index);
+	}
+#endif
+
+	return 0;
+
+error:
+	if (bp->regview)
+		iounmap(bp->regview);
+	pci_release_regions(pdev);
+	pci_disable_device(pdev);
+	pci_set_drvdata(pdev, NULL);
+	free_netdev(dev);
+	return rc;
+}
+
+static void __devexit
+bnx2_remove_one(struct pci_dev *pdev)
+{
+	struct net_device *dev = pci_get_drvdata(pdev);
+	struct bnx2 *bp = netdev_priv(dev);
+
+#if defined(__VMKLNX__)
+	bnx2_del_napi(bp);
+	bnx2_disable_msi(bp);
+#endif /* !(defined __VMKLNX__) */
+
+	unregister_netdev(dev);
+
+	del_timer_sync(&bp->timer);
+#if (LINUX_VERSION_CODE >= 0x20616) || defined(__VMKLNX__)
+	cancel_work_sync(&bp->reset_task);
+#elif (LINUX_VERSION_CODE >= 0x20600)
+	flush_scheduled_work();
+#endif
+
+	if (bp->regview)
+		iounmap(bp->regview);
+
+	kfree(bp->temp_stats_blk);
+
+	if (bp->flags & BNX2_FLAG_AER_ENABLED) {
+		pci_disable_pcie_error_reporting(pdev);
+		bp->flags &= ~BNX2_FLAG_AER_ENABLED;
+	}
+
+#if (LINUX_VERSION_CODE >= 0x20418)
+	free_netdev(dev);
+#else
+	kfree(dev);
+#endif
+
+	pci_disable_pcie_error_reporting(pdev);
+
+	pci_release_regions(pdev);
+	pci_disable_device(pdev);
+	pci_set_drvdata(pdev, NULL);
+}
+
+static int
+bnx2_suspend(struct pci_dev *pdev, pm_message_t state)
+{
+	struct net_device *dev = pci_get_drvdata(pdev);
+	struct bnx2 *bp = netdev_priv(dev);
+
+#if (LINUX_VERSION_CODE >= 0x2060b)
+	/* PCI register 4 needs to be saved whether netif_running() or not.
+	 * MSI address and data need to be saved if using MSI and
+	 * netif_running().
+	 */
+	pci_save_state(pdev);
+#endif
+	if (!netif_running(dev))
+		return 0;
+
+#if (LINUX_VERSION_CODE >= 0x20616) || defined(__VMKLNX__)
+	cancel_work_sync(&bp->reset_task);
+#endif
+	bnx2_netif_stop(bp, true);
+	netif_device_detach(dev);
+	del_timer_sync(&bp->timer);
+	bnx2_shutdown_chip(bp);
+	bnx2_free_skbs(bp);
+#if (LINUX_VERSION_CODE < 0x2060b)
+	bnx2_set_power_state(bp, state);
+#else
+	bnx2_set_power_state(bp, pci_choose_state(pdev, state));
+#endif
+	return 0;
+}
+
+static int
+bnx2_resume(struct pci_dev *pdev)
+{
+	struct net_device *dev = pci_get_drvdata(pdev);
+	struct bnx2 *bp = netdev_priv(dev);
+
+#if (LINUX_VERSION_CODE >= 0x2060b)
+	pci_restore_state(pdev);
+#endif
+	if (!netif_running(dev))
+		return 0;
+
+	bnx2_set_power_state(bp, PCI_D0);
+	netif_device_attach(dev);
+	bnx2_init_nic(bp, 1);
+	bnx2_netif_start(bp, true);
+	return 0;
+}
+
+#if !defined(__VMKLNX__)
+#if (LINUX_VERSION_CODE >= 0x020611)
+/**
+ * bnx2_io_error_detected - called when PCI error is detected
+ * @pdev: Pointer to PCI device
+ * @state: The current pci connection state
+ *
+ * This function is called after a PCI bus error affecting
+ * this device has been detected.
+ */
+static pci_ers_result_t bnx2_io_error_detected(struct pci_dev *pdev,
+					       pci_channel_state_t state)
+{
+	struct net_device *dev = pci_get_drvdata(pdev);
+	struct bnx2 *bp = netdev_priv(dev);
+
+	rtnl_lock();
+	netif_device_detach(dev);
+
+	if (state == pci_channel_io_perm_failure) {
+		rtnl_unlock();
+		return PCI_ERS_RESULT_DISCONNECT;
+	}
+
+	if (netif_running(dev)) {
+		bnx2_netif_stop(bp, true);
+		del_timer_sync(&bp->timer);
+		bnx2_reset_nic(bp, BNX2_DRV_MSG_CODE_RESET);
+	}
+
+	pci_disable_device(pdev);
+	rtnl_unlock();
+
+	/* Request a slot slot reset. */
+	return PCI_ERS_RESULT_NEED_RESET;
+}
+
+/**
+ * bnx2_io_slot_reset - called after the pci bus has been reset.
+ * @pdev: Pointer to PCI device
+ *
+ * Restart the card from scratch, as if from a cold-boot.
+ */
+static pci_ers_result_t bnx2_io_slot_reset(struct pci_dev *pdev)
+{
+	struct net_device *dev = pci_get_drvdata(pdev);
+	struct bnx2 *bp = netdev_priv(dev);
+	pci_ers_result_t result;
+	int err;
+
+	rtnl_lock();
+	if (pci_enable_device(pdev)) {
+		dev_err(&pdev->dev,
+			"Cannot re-enable PCI device after reset\n");
+		result = PCI_ERS_RESULT_DISCONNECT;
+	} else {
+		pci_set_master(pdev);
+		pci_restore_state(pdev);
+		pci_save_state(pdev);
+
+		if (netif_running(dev)) {
+			bnx2_set_power_state(bp, PCI_D0);
+			bnx2_init_nic(bp, 1);
+		}
+		result = PCI_ERS_RESULT_RECOVERED;
+	}
+	rtnl_unlock();
+
+	if (!(bp->flags & BNX2_FLAG_AER_ENABLED))
+		return result;
+
+	err = pci_cleanup_aer_uncorrect_error_status(pdev);
+	if (err) {
+		dev_err(&pdev->dev,
+			"pci_cleanup_aer_uncorrect_error_status failed 0x%0x\n",
+			 err); /* non-fatal, continue */
+	}
+
+	return result;
+}
+
+/**
+ * bnx2_io_resume - called when traffic can start flowing again.
+ * @pdev: Pointer to PCI device
+ *
+ * This callback is called when the error recovery driver tells us that
+ * its OK to resume normal operation.
+ */
+static void bnx2_io_resume(struct pci_dev *pdev)
+{
+	struct net_device *dev = pci_get_drvdata(pdev);
+	struct bnx2 *bp = netdev_priv(dev);
+
+	rtnl_lock();
+	if (netif_running(dev))
+		bnx2_netif_start(bp, true);
+
+	netif_device_attach(dev);
+	rtnl_unlock();
+}
+
+static struct pci_error_handlers bnx2_err_handler = {
+	.error_detected	= bnx2_io_error_detected,
+	.slot_reset	= bnx2_io_slot_reset,
+	.resume		= bnx2_io_resume,
+};
+
+#endif
+#endif
+
+static struct pci_driver bnx2_pci_driver = {
+	.name		= DRV_MODULE_NAME,
+	.id_table	= bnx2_pci_tbl,
+	.probe		= bnx2_init_one,
+	.remove		= __devexit_p(bnx2_remove_one),
+	.suspend	= bnx2_suspend,
+	.resume		= bnx2_resume,
+#if !defined(__VMKLNX__)
+#if (LINUX_VERSION_CODE >= 0x020611)
+	.err_handler	= &bnx2_err_handler,
+#endif
+#endif
+};
+
+static int __init bnx2_init(void)
+{
+	int rc = 0;
+#if defined(BNX2_ENABLE_NETQUEUE)
+	int i;
+
+	/*  sanity check the force_netq parameter */
+	for (i = 0; i < BNX2_MAX_NIC; i++) {
+		if((force_netq_param[i] < BNX2_OPTION_UNSET) ||
+		   (force_netq_param[i] > 7)) {
+			pr_err("bnx2: please use a 'force_netq' "
+			       "value between (-1 to 7), "
+			       "0 to disable NetQueue, "
+			       "-1 to use the default value "
+			       "failure at index %d val: %d\n",
+			       i, force_netq_param[i]);
+			rc = -EINVAL;
+		}
+	}
+
+	if(rc != 0)
+		return rc;
+#endif
+
+#if (LINUX_VERSION_CODE < 0x020613)
+	rc = pci_module_init(&bnx2_pci_driver);
+#else
+	rc = pci_register_driver(&bnx2_pci_driver);
+#endif
+
+#if defined(__VMKLNX__) && (VMWARE_ESX_DDK_VERSION >= 50000)
+#if defined(BNX2_INBOX)
+	if (cnic_register_adapter("bnx2", bnx2_cnic_probe) < 0) {
+#else /* !defined(BNX2_INBOX) */
+	if (cnic_register_adapter("bnx2", bnx2_cnic_probe2) < 0) {
+#endif /* defined(BNX2_INBOX) */
+		pr_warn("bnx2: Unable to register with CNIC adapter\n");
+		/*
+		 *  We won't call pci_unregister_driver(&bnx2_pci_driver) here,
+		 *  because we still want to retain L2 funtion
+		 *  even if cnic_register_adapter failed
+		 */
+	} else {
+		bnx2_registered_cnic_adapter = 1;
+	}
+#endif /* defined(__VMKLNX__) && (VMWARE_ESX_DDK_VERSION >= 50000) */
+
+	return rc;
+}
+
+static void __exit bnx2_cleanup(void)
+{
+#if defined(__VMKLNX__) && (VMWARE_ESX_DDK_VERSION >= 50000)
+	if (bnx2_registered_cnic_adapter) {
+	        cnic_register_cancel("bnx2");
+		bnx2_registered_cnic_adapter = 0;
+	}
+#endif /* defined(__VMKLNX__) && (VMWARE_ESX_DDK_VERSION >= 50000) */
+	pci_unregister_driver(&bnx2_pci_driver);
+}
+
+module_init(bnx2_init);
+module_exit(bnx2_cleanup);
+
+
+#if defined(BNX2_ENABLE_NETQUEUE)
+
+#ifdef BNX2_DEBUG
+static u32 bnx2_read_ctx(struct bnx2 *bp, u32 offset)
+{
+	int i;
+
+	if (CHIP_NUM(bp) != CHIP_NUM_5709) {
+		REG_WR(bp, BNX2_CTX_DATA_ADR, offset);
+		return REG_RD(bp, BNX2_CTX_DATA);
+	}
+
+	REG_WR(bp, BNX2_CTX_CTX_CTRL, offset | BNX2_CTX_CTX_CTRL_READ_REQ);
+	for (i = 0; i < 5; i++) {
+		udelay(5);
+		if (REG_RD(bp, BNX2_CTX_CTX_CTRL) & BNX2_CTX_CTX_CTRL_READ_REQ)
+			continue;
+		break;
+	}
+
+	return REG_RD(bp, BNX2_CTX_CTX_DATA);
+}
+
+static void dump_ctx(struct bnx2 *bp, u32 cid)
+{
+	u32 addr = cid * 128;
+	int i;
+
+	for (i = 0; i < 8; i++) {
+		u32 val, val1, val2, val3;
+
+		val  = bnx2_read_ctx(bp, addr);
+		val1 = bnx2_read_ctx(bp, addr+4);
+		val2 = bnx2_read_ctx(bp, addr+8);
+		val3 = bnx2_read_ctx(bp, addr+0xc);
+		netdev_err(bp->dev, "ctx  %08x: %08x %08x %08x %08x\n",
+			addr, val, val1, val2, val3);
+		addr += 0x10;
+	}
+}
+#endif
+
+#define BNX2_NETQ_WAIT_EVENT_TIMEOUT	msecs_to_jiffies(1000)
+
+#define L2_KWQ_PAGE_CNT    1
+#define L2_KCQ_PAGE_CNT    1
+
+#define L2_KWQE_CNT (BCM_PAGE_SIZE / sizeof(struct l2_kwqe))
+#define L2_KCQE_CNT (BCM_PAGE_SIZE / sizeof(struct l2_kcqe))
+#define MAX_L2_KWQE_CNT (L2_KWQE_CNT - 1)
+#define MAX_L2_KCQE_CNT (L2_KCQE_CNT - 1)
+
+#define MAX_L2_KWQ_IDX     ((L2_KWQ_PAGE_CNT * L2_KWQE_CNT) - 1)
+#define MAX_L2_KCQ_IDX     ((L2_KCQ_PAGE_CNT * L2_KCQE_CNT) - 1)
+
+#define L2_KWQ_PG(x) (((x) & ~MAX_L2_KWQE_CNT) >> (BCM_PAGE_BITS - 5))
+#define L2_KWQ_IDX(x) ((x) & MAX_L2_KWQE_CNT)
+
+#define L2_KCQ_PG(x) (((x) & ~MAX_L2_KCQE_CNT) >> (BCM_PAGE_BITS - 5))
+#define L2_KCQ_IDX(x) ((x) & MAX_L2_KCQE_CNT)
+
+/*
+ *      krnlq_context definition
+ */
+#define L2_KRNLQ_FLAGS  		0x00000000
+#define L2_KRNLQ_SIZE   		0x00000000
+#define L2_KRNLQ_TYPE   		0x00000000
+#define KRNLQ_FLAGS_PG_SZ		(0xf<<0)
+#define KRNLQ_FLAGS_PG_SZ_256		(0<<0)
+#define KRNLQ_FLAGS_PG_SZ_512		(1<<0)
+#define KRNLQ_FLAGS_PG_SZ_1K		(2<<0)
+#define KRNLQ_FLAGS_PG_SZ_2K		(3<<0)
+#define KRNLQ_FLAGS_PG_SZ_4K		(4<<0)
+#define KRNLQ_FLAGS_PG_SZ_8K		(5<<0)
+#define KRNLQ_FLAGS_PG_SZ_16K		(6<<0)
+#define KRNLQ_FLAGS_PG_SZ_32K		(7<<0)
+#define KRNLQ_FLAGS_PG_SZ_64K		(8<<0)
+#define KRNLQ_FLAGS_PG_SZ_128K		(9<<0)
+#define KRNLQ_FLAGS_PG_SZ_256K		(10<<0)
+#define KRNLQ_FLAGS_PG_SZ_512K		(11<<0)
+#define KRNLQ_FLAGS_PG_SZ_1M		(12<<0)
+#define KRNLQ_FLAGS_PG_SZ_2M		(13<<0)
+#define KRNLQ_FLAGS_QE_SELF_SEQ		(1<<15)
+#define KRNLQ_SIZE_TYPE_SIZE    ((((0x28 + 0x1f) & ~0x1f) / 0x20) << 16)
+#define KRNLQ_TYPE_TYPE			(0xf<<28)
+#define KRNLQ_TYPE_TYPE_EMPTY		(0<<28)
+#define KRNLQ_TYPE_TYPE_KRNLQ		(6<<28)
+
+#define L2_KRNLQ_HOST_QIDX              0x00000004
+#define L2_KRNLQ_HOST_FW_QIDX           0x00000008
+#define L2_KRNLQ_NX_QE_SELF_SEQ         0x0000000c
+#define L2_KRNLQ_QE_SELF_SEQ_MAX        0x0000000c
+#define L2_KRNLQ_NX_QE_HADDR_HI         0x00000010
+#define L2_KRNLQ_NX_QE_HADDR_LO         0x00000014
+#define L2_KRNLQ_PGTBL_PGIDX            0x00000018
+#define L2_KRNLQ_NX_PG_QIDX             0x00000018
+#define L2_KRNLQ_PGTBL_NPAGES           0x0000001c
+#define L2_KRNLQ_QIDX_INCR              0x0000001c
+#define L2_KRNLQ_PGTBL_HADDR_HI         0x00000020
+#define L2_KRNLQ_PGTBL_HADDR_LO         0x00000024
+
+#define BNX2_PG_CTX_MAP                 0x1a0034
+
+static int
+bnx2_netq_free_rx_queue_update(struct net_device *netdev,
+			       int index,
+			       int update);
+
+static int
+bnx2_netqueue_is_avail(struct bnx2 *bp)
+{
+	rmb();
+
+	return ((BNX2_NETQUEUE_ENABLED(bp)) &&
+		(bp->flags & BNX2_FLAG_USING_MSIX) &&
+		(CHIP_NUM(bp) == CHIP_NUM_5709));
+}
+
+static inline u32
+bnx2_netqueue_kwq_avail(struct bnx2 *bp)
+{
+	return MAX_L2_KWQ_IDX -
+		((bp->netq_kwq_prod_idx - bp->netq_kwq_con_idx) &
+		  MAX_L2_KWQ_IDX);
+}
+
+static int
+bnx2_netqueue_submit_kwqes(struct bnx2 *bp, struct l2_kwqe *wqes)
+{
+	struct l2_kwqe *prod_qe;
+	u16 prod, sw_prod;
+
+	if (1 > bnx2_netqueue_kwq_avail(bp)) {
+		netdev_warn(bp->dev, "No kwq's available\n");
+		return -EAGAIN;
+	}
+
+	prod = bp->netq_kwq_prod_idx;
+	sw_prod = prod & MAX_L2_KWQ_IDX;
+
+	prod_qe = &bp->netq_kwq[L2_KWQ_PG(sw_prod)][L2_KWQ_IDX(sw_prod)];
+	memcpy(prod_qe, wqes, sizeof(struct l2_kwqe));
+	prod++;
+	sw_prod = prod & MAX_L2_KWQ_IDX;
+
+	bp->netq_kwq_prod_idx = prod;
+
+	barrier();
+	REG_WR16(bp, bp->netq_kwq_io_addr, bp->netq_kwq_prod_idx);
+	wmb();
+	mmiowb();
+
+	return 0;
+}
+
+static void
+bnx2_netqueue_free_dma(struct bnx2 *bp, struct netq_dma *dma)
+{
+	int i;
+
+	if (dma->pg_arr) {
+		for (i = 0; i < dma->num_pages; i++) {
+			if (dma->pg_arr[i]) {
+				pci_free_consistent(bp->pdev, BCM_PAGE_SIZE,
+						    dma->pg_arr[i],
+						    dma->pg_map_arr[i]);
+				dma->pg_arr[i] = NULL;
+			}
+		}
+	}
+	if (dma->pgtbl) {
+		pci_free_consistent(bp->pdev, dma->pgtbl_size,
+				    dma->pgtbl, dma->pgtbl_map);
+		dma->pgtbl = NULL;
+	}
+	kfree(dma->pg_arr);
+	dma->pg_arr = NULL;
+	dma->num_pages = 0;
+}
+
+static void
+bnx2_netqueue_free_resc(struct bnx2 *bp)
+{
+	bnx2_netqueue_free_dma(bp, &bp->netq_kwq_info);
+	bnx2_netqueue_free_dma(bp, &bp->netq_kcq_info);
+}
+
+static void
+bnx2_netqueue_setup_page_tbl(struct bnx2 *bp,
+			     struct netq_dma *dma)
+{
+	int i;
+	u32 *page_table = dma->pgtbl;
+
+	for (i = 0; i < dma->num_pages; i++) {
+		/* Each entry needs to be in big endian format. */
+		*page_table = (u32) ((u64) dma->pg_map_arr[i] >> 32);
+		page_table++;
+		*page_table = (u32) dma->pg_map_arr[i];
+		page_table++;
+	}
+}
+
+static int
+bnx2_netqueue_alloc_dma(struct bnx2 *bp, struct netq_dma *dma,
+			int pages)
+{
+	int i, size;
+
+	size = pages * (sizeof(void *) + sizeof(dma_addr_t));
+	dma->pg_arr = kzalloc(size, GFP_ATOMIC);
+	if (dma->pg_arr == NULL) {
+		netdev_err(bp->dev, "Couldn't alloc dma page array\n");
+		return -ENOMEM;
+	}
+
+	dma->pg_map_arr = (dma_addr_t *) (dma->pg_arr + pages);
+	dma->num_pages = pages;
+
+	for (i = 0; i < pages; i++) {
+		dma->pg_arr[i] = pci_alloc_consistent(bp->pdev,
+						      BCM_PAGE_SIZE,
+						      &dma->pg_map_arr[i]);
+		if (dma->pg_arr[i] == NULL) {
+			netdev_err(bp->dev, "Couldn't alloc dma page\n");
+
+			goto error;
+		}
+	}
+
+	dma->pgtbl_size = ((pages * 8) + BCM_PAGE_SIZE - 1) &
+			  ~(BCM_PAGE_SIZE - 1);
+	dma->pgtbl = pci_alloc_consistent(bp->pdev, dma->pgtbl_size,
+					  &dma->pgtbl_map);
+	if (dma->pgtbl == NULL)
+		goto error;
+
+	bnx2_netqueue_setup_page_tbl(bp, dma);
+
+	return 0;
+
+error:
+	bnx2_netqueue_free_dma(bp, dma);
+	return -ENOMEM;
+}
+
+static int
+bnx2_netqueue_alloc_resc(struct bnx2 *bp)
+{
+	int ret;
+
+	ret = bnx2_netqueue_alloc_dma(bp, &bp->netq_kwq_info,
+				      L2_KWQ_PAGE_CNT);
+	if (ret) {
+		netdev_err(bp->dev, "Couldn't alloc space for kwq\n");
+		goto error;
+	}
+	bp->netq_kwq = (struct l2_kwqe **) bp->netq_kwq_info.pg_arr;
+
+	ret = bnx2_netqueue_alloc_dma(bp, &bp->netq_kcq_info,
+				      L2_KCQ_PAGE_CNT);
+	if (ret) {
+		netdev_err(bp->dev, "Couldn't alloc space for kwq\n");
+		goto error;
+	}
+	bp->netq_kcq = (struct l2_kcqe **) bp->netq_kcq_info.pg_arr;
+
+	return 0;
+
+error:
+	bnx2_netqueue_free_resc(bp);
+	bp->netq_kwq = NULL;
+	bp->netq_kcq = NULL;
+
+	return ret;
+}
+
+static void
+bnx2_init_netqueue_context(struct bnx2 *bp, u32 cid)
+{
+	u32 cid_addr;
+	int i;
+
+	cid_addr = GET_CID_ADDR(cid);
+
+	for (i = 0; i < CTX_SIZE; i += 4)
+		bnx2_ctx_wr(bp, cid_addr, i, 0);
+}
+
+static int
+bnx2_netqueue_get_kcqes(struct bnx2 *bp, u16 hw_prod, u16 *sw_prod)
+{
+	u16 i, ri, last;
+	struct l2_kcqe *kcqe;
+	int kcqe_cnt = 0, last_cnt = 0;
+
+	i = ri = last = *sw_prod;
+	ri &= MAX_L2_KCQ_IDX;
+
+	while ((i != hw_prod) && (kcqe_cnt < BNX2_NETQ_MAX_COMPLETED_KCQE)) {
+		kcqe = &bp->netq_kcq[L2_KCQ_PG(ri)][L2_KCQ_IDX(ri)];
+		bp->netq_completed_kcq[kcqe_cnt++] = kcqe;
+		i = (i + 1);
+		ri = i & MAX_L2_KCQ_IDX;
+		if (likely(!(kcqe->flags & L2_KCQE_FLAGS_NEXT))) {
+			last_cnt = kcqe_cnt;
+			last = i;
+		}
+	}
+
+	*sw_prod = last;
+	return last_cnt;
+}
+
+
+static void
+bnx2_service_netq_kcqes(struct bnx2_napi *bnapi, int num_cqes)
+{
+	struct bnx2 *bp = bnapi->bp;
+	int i, j;
+
+	i = 0;
+	j = 1;
+	while (num_cqes) {
+		u32 kcqe_op_flag = bp->netq_completed_kcq[i]->opcode;
+		u32 kcqe_layer = bp->netq_completed_kcq[i]->flags &
+				 L2_KCQE_FLAGS_LAYER_MASK;
+
+		while (j < num_cqes) {
+			u32 next_op = bp->netq_completed_kcq[i + j]->opcode;
+
+			if ((next_op & L2_KCQE_FLAGS_LAYER_MASK) != kcqe_layer)
+				break;
+			j++;
+		}
+
+		if (kcqe_layer != L2_KCQE_FLAGS_LAYER_MASK_L2) {
+			netdev_err(bp->dev, "Unknown type of KCQE(0x%x)\n",
+					    kcqe_op_flag);
+			goto end;
+		}
+
+		bp->netq_flags = kcqe_op_flag;
+		wake_up(&bp->netq_wait);
+		wmb();
+
+end:
+		num_cqes -= j;
+		i += j;
+		j = 1;
+	}
+
+
+	return;
+}
+
+static void
+bnx2_netqueue_service_bnx2_msix(struct bnx2_napi *bnapi)
+{
+	struct bnx2 *bp = bnapi->bp;
+	struct status_block *status_blk = bp->bnx2_napi[0].status_blk.msi;
+	u32 status_idx = status_blk->status_idx;
+	u16 hw_prod, sw_prod;
+	int kcqe_cnt;
+
+	bp->netq_kwq_con_idx = status_blk->status_cmd_consumer_index;
+
+	hw_prod = status_blk->status_completion_producer_index;
+	sw_prod = bp->netq_kcq_prod_idx;
+
+	/*  Ensure that there is a NetQ kcq avaliable */
+	if (sw_prod == hw_prod)
+		return;
+
+	while (sw_prod != hw_prod) {
+		kcqe_cnt = bnx2_netqueue_get_kcqes(bp, hw_prod, &sw_prod);
+		if (kcqe_cnt == 0)
+			goto done;
+
+		bnx2_service_netq_kcqes(bnapi, kcqe_cnt);
+
+		/* Tell compiler that status_blk fields can change. */
+		barrier();
+		if (status_idx != status_blk->status_idx) {
+			status_idx = status_blk->status_idx;
+			bp->netq_kwq_con_idx = status_blk->status_cmd_consumer_index;
+			hw_prod = status_blk->status_completion_producer_index;
+		} else
+			break;
+	}
+
+	barrier();
+done:
+	REG_WR16(bp, bp->netq_kcq_io_addr, sw_prod);
+
+	bp->netq_kcq_prod_idx = sw_prod;
+	bp->netq_last_status_idx = status_idx;
+}
+
+static int
+bnx2_netqueue_open_started(struct bnx2 *bp)
+{
+	return (((bp->netq_state & BNX2_NETQ_HW_STARTED) ==
+			 BNX2_NETQ_HW_STARTED)  &&
+		((bp->netq_state & BNX2_NETQ_HW_OPENED) ==
+			 BNX2_NETQ_HW_OPENED));
+}
+
+static void
+bnx2_stop_netqueue_hw(struct bnx2 *bp)
+{
+	u32 val;
+
+	/* Disable the CP and COM doorbells.  These two processors polls the
+	 * doorbell for a non zero value before running.  This must be done
+	 * after setting up the kernel queue contexts. This is for
+	 * KQW/KCQ #1. */
+
+	val = bnx2_reg_rd_ind(bp, BNX2_CP_SCRATCH + 0x20);
+	val &= ~KWQ1_READY;
+	bnx2_reg_wr_ind(bp, BNX2_CP_SCRATCH + 0x20, val);
+
+	val = bnx2_reg_rd_ind(bp, BNX2_COM_SCRATCH + 0x20);
+	val &= ~KCQ1_READY;
+	bnx2_reg_wr_ind(bp, BNX2_COM_SCRATCH + 0x20, val);
+
+	barrier();
+
+	bp->netq_state &= ~BNX2_NETQ_HW_STARTED;
+	wmb();
+}
+
+static void
+bnx2_close_netqueue_hw(struct bnx2 *bp)
+{
+	bnx2_stop_netqueue_hw(bp);
+	bnx2_netqueue_free_resc(bp);
+
+	bp->netq_state &= ~BNX2_NETQ_HW_OPENED;
+	wmb();
+}
+
+static void
+bnx2_start_netqueue_hw(struct bnx2 *bp)
+{
+
+	/* Set the CP and COM doorbells.  These two processors polls the
+	 * doorbell for a non zero value before running.  This must be done
+	 * after setting up the kernel queue contexts. This is for
+	 * KQW/KCQ 1. */
+	bnx2_reg_wr_ind(bp, BNX2_CP_SCRATCH + 0x20, KWQ1_READY);
+	bnx2_reg_wr_ind(bp, BNX2_COM_SCRATCH + 0x20, KCQ1_READY);
+
+	bp->netq_state |= BNX2_NETQ_HW_STARTED;
+	wmb();
+}
+
+static void
+bnx2_init_netqueue_hw(struct bnx2 *bp)
+{
+	u32 val;
+
+	/*  Initialize the bnx2 netqueue structures */
+	init_waitqueue_head(&bp->netq_wait);
+
+	val = REG_RD(bp, BNX2_MQ_CONFIG);
+	val &= ~BNX2_MQ_CONFIG_KNL_BYP_BLK_SIZE;
+	if (BCM_PAGE_BITS > 12)
+		val |= (12 - 8)  << 4;
+	else
+		val |= (BCM_PAGE_BITS - 8)  << 4;
+
+	REG_WR(bp, BNX2_MQ_CONFIG, val);
+
+	REG_WR(bp, BNX2_HC_COMP_PROD_TRIP, (2 << 16) | 8);
+	REG_WR(bp, BNX2_HC_COM_TICKS, (64 << 16) | 220);
+	REG_WR(bp, BNX2_HC_CMD_TICKS, (64 << 16) | 220);
+
+	bnx2_init_netqueue_context(bp, NETQUEUE_KWQ_CID);
+	bnx2_init_netqueue_context(bp, NETQUEUE_KCQ_CID);
+
+	bp->netq_kwq_cid_addr = GET_CID_ADDR(NETQUEUE_KWQ_CID);
+	bp->netq_kwq_io_addr  = MB_GET_CID_ADDR(NETQUEUE_KWQ_CID) +
+				L2_KRNLQ_HOST_QIDX;
+
+	bp->netq_kwq_prod_idx = 0;
+	bp->netq_kwq_con_idx = 0;
+
+	/* Initialize the kernel work queue context. */
+	val = KRNLQ_TYPE_TYPE_KRNLQ | KRNLQ_SIZE_TYPE_SIZE |
+	      (BCM_PAGE_BITS - 8) | KRNLQ_FLAGS_QE_SELF_SEQ;
+	bnx2_ctx_wr(bp, bp->netq_kwq_cid_addr, L2_KRNLQ_TYPE, val);
+
+	val = (BCM_PAGE_SIZE / sizeof(struct l2_kwqe) - 1) << 16;
+	bnx2_ctx_wr(bp, bp->netq_kwq_cid_addr, L2_KRNLQ_QE_SELF_SEQ_MAX, val);
+
+	val = ((BCM_PAGE_SIZE / sizeof(struct l2_kwqe)) << 16) | L2_KWQ_PAGE_CNT;
+	bnx2_ctx_wr(bp, bp->netq_kwq_cid_addr, L2_KRNLQ_PGTBL_NPAGES, val);
+
+	val = (u32) ((u64) bp->netq_kwq_info.pgtbl_map >> 32);
+	bnx2_ctx_wr(bp, bp->netq_kwq_cid_addr, L2_KRNLQ_PGTBL_HADDR_HI, val);
+
+	val = (u32) bp->netq_kwq_info.pgtbl_map;
+	bnx2_ctx_wr(bp, bp->netq_kwq_cid_addr, L2_KRNLQ_PGTBL_HADDR_LO, val);
+
+	bp->netq_kcq_cid_addr = GET_CID_ADDR(NETQUEUE_KCQ_CID);
+	bp->netq_kcq_io_addr = MB_GET_CID_ADDR(NETQUEUE_KCQ_CID) +
+			       L2_KRNLQ_HOST_QIDX;
+	bp->netq_kcq_prod_idx = 0;
+
+	/* Initialize the kernel complete queue context. */
+	val = KRNLQ_TYPE_TYPE_KRNLQ | KRNLQ_SIZE_TYPE_SIZE |
+	      (BCM_PAGE_BITS - 8) | KRNLQ_FLAGS_QE_SELF_SEQ;
+	bnx2_ctx_wr(bp, bp->netq_kcq_cid_addr, L2_KRNLQ_TYPE, val);
+
+	val = (BCM_PAGE_SIZE / sizeof(struct l2_kcqe) - 1) << 16;
+	bnx2_ctx_wr(bp, bp->netq_kcq_cid_addr, L2_KRNLQ_QE_SELF_SEQ_MAX, val);
+
+	val = ((BCM_PAGE_SIZE / sizeof(struct l2_kcqe)) << 16)|L2_KCQ_PAGE_CNT;
+	bnx2_ctx_wr(bp, bp->netq_kcq_cid_addr, L2_KRNLQ_PGTBL_NPAGES, val);
+
+	val = (u32) ((u64) bp->netq_kcq_info.pgtbl_map >> 32);
+	bnx2_ctx_wr(bp, bp->netq_kcq_cid_addr, L2_KRNLQ_PGTBL_HADDR_HI, val);
+
+	val = (u32) bp->netq_kcq_info.pgtbl_map;
+	bnx2_ctx_wr(bp, bp->netq_kcq_cid_addr, L2_KRNLQ_PGTBL_HADDR_LO, val);
+
+	/* Enable Commnad Scheduler notification when we write to the
+	 * host producer index of the kernel contexts. */
+	REG_WR(bp, BNX2_MQ_KNL_CMD_MASK1, 2);
+
+	/* Enable Command Scheduler notification when we write to either
+	 * the Send Queue or Receive Queue producer indexes of the kernel
+	 * bypass contexts. */
+	REG_WR(bp, BNX2_MQ_KNL_BYP_CMD_MASK1, 7);
+	REG_WR(bp, BNX2_MQ_KNL_BYP_WRITE_MASK1, 7);
+
+	/* Notify COM when the driver post an application buffer. */
+	REG_WR(bp, BNX2_MQ_KNL_RX_V2P_MASK2, 0x2000);
+
+	barrier();
+}
+
+static int
+bnx2_open_netqueue_hw(struct bnx2 *bp)
+{
+	int err;
+
+	err = bnx2_netqueue_alloc_resc(bp);
+	if (err != 0) {
+		netdev_err(bp->dev, "Couldn't allocate netq resources\n");
+		return err;
+	}
+
+	bnx2_init_netqueue_hw(bp);
+	bnx2_start_netqueue_hw(bp);
+
+	bp->netq_state |= BNX2_NETQ_HW_OPENED;
+	wmb();
+
+	netdev_info(bp->dev, "NetQueue hardware support is enabled\n");
+
+	return 0;
+}
+
+
+
+static int
+bnx2_netq_get_netqueue_features(vmknetddi_queueop_get_features_args_t *args)
+{
+	args->features = VMKNETDDI_QUEUEOPS_FEATURE_NONE;
+	args->features |= VMKNETDDI_QUEUEOPS_FEATURE_RXQUEUES;
+	args->features |= VMKNETDDI_QUEUEOPS_FEATURE_TXQUEUES;
+	return VMKNETDDI_QUEUEOPS_OK;
+}
+
+static int
+bnx2_netq_get_queue_count(vmknetddi_queueop_get_queue_count_args_t *args)
+{
+	struct bnx2 *bp = netdev_priv(args->netdev);
+
+	/* workaround for packets duplicated */
+	if (bp->num_tx_rings + bp->num_rx_rings > 1)
+		bp->netq_enabled = 1;
+
+	if (args->type == VMKNETDDI_QUEUEOPS_QUEUE_TYPE_RX) {
+		args->count = max_t(u16, bp->num_rx_rings - 1, 0);
+
+		netdev_info(args->netdev, "Using %d RX NetQ rings\n",
+					  args->count);
+
+		return VMKNETDDI_QUEUEOPS_OK;
+	} else if (args->type == VMKNETDDI_QUEUEOPS_QUEUE_TYPE_TX) {
+		args->count = max_t(u16, bp->num_tx_rings - 1, 0);
+
+		netdev_info(args->netdev, "Using %d TX NetQ rings\n",
+					  args->count);
+
+		return VMKNETDDI_QUEUEOPS_OK;
+	} else {
+		netdev_err(args->netdev, "queue count: invalid queue type "
+					 "0x%x\n", args->type);
+		return VMKNETDDI_QUEUEOPS_ERR;
+	}
+}
+
+static int
+bnx2_netq_get_filter_count(vmknetddi_queueop_get_filter_count_args_t *args)
+{
+	/* Only support 1 Mac filter per queue */
+	args->count = 1;
+	return VMKNETDDI_QUEUEOPS_OK;
+}
+
+static int
+bnx2_netq_alloc_rx_queue(struct bnx2 *bp,
+			 struct bnx2_napi *bnapi,
+			 int queue_id)
+{
+	/* We need to count the default ring as part of the number of RX rings
+	   avaliable */
+	if (bp->n_rx_queues_allocated >= (bp->num_rx_rings - 1))
+		return VMKNETDDI_QUEUEOPS_ERR;
+
+	if((bp->netq_state & BNX2_NETQ_HW_STARTED) != BNX2_NETQ_HW_STARTED) {
+		netdev_warn(bp->dev, "NetQueue hardware not running\n");
+		return VMKNETDDI_QUEUEOPS_ERR;
+	}
+
+	if (!bnapi->rx_queue_allocated) {
+		int rc;
+		struct l2_kwqe_vm_alloc_rx_queue kwqe_alloc_rx;
+
+		/*  Ensure that the NetQueue is freed */
+		rc = bnx2_netq_free_rx_queue_update(bp->dev, queue_id, 1);
+		if(rc == VMKNETDDI_QUEUEOPS_ERR) {
+			netdev_err(bp->dev, "Couldn't clean/free RX "
+					    "queue during RX alloc\n");
+
+			return VMKNETDDI_QUEUEOPS_ERR;
+		}
+
+		/*  Prepare the kwqe to be passed to the firmware */
+		memset(&kwqe_alloc_rx, 0, sizeof(kwqe_alloc_rx));
+
+		kwqe_alloc_rx.kwqe_flags  = L2_KWQE_FLAGS_LAYER_MASK_L2;
+		kwqe_alloc_rx.kwqe_opcode = L2_KWQE_OPCODE_VALUE_VM_ALLOC_RX_QUEUE;
+		kwqe_alloc_rx.queue_type  = L2_NET_QUEUE;
+		kwqe_alloc_rx.qid         = queue_id;
+
+		rc = bnx2_netqueue_submit_kwqes(bp,
+					(struct l2_kwqe *)&kwqe_alloc_rx);
+		if (rc != 0) {
+			netdev_err(bp->dev, "Couldn't submit alloc rx kwqe\n");
+			return VMKNETDDI_QUEUEOPS_ERR;
+		}
+
+		bp->netq_flags = 0;
+		wmb();
+		rc = wait_event_timeout(bp->netq_wait,
+					(bp->netq_flags &
+					 L2_KCQE_OPCODE_VALUE_VM_ALLOC_RX_QUEUE),
+					BNX2_NETQ_WAIT_EVENT_TIMEOUT);
+
+		if (rc != 0) {
+			bnapi->rx_queue_allocated = TRUE;
+
+			netdev_info(bp->dev, "RX NetQ allocated on %d\n",
+					     kwqe_alloc_rx.qid);
+			return VMKNETDDI_QUEUEOPS_OK;
+		} else {
+			netdev_info(bp->dev, "Timeout RX NetQ allocate on %d\n",
+					     kwqe_alloc_rx.qid);
+
+			return VMKNETDDI_QUEUEOPS_ERR;
+		}
+	}
+
+	netdev_info(bp->dev, "No RX NetQueues already allocated!\n");
+	return VMKNETDDI_QUEUEOPS_ERR;
+}
+
+static int
+bnx2_netq_alloc_rx_queue_vmk(struct net_device *netdev,
+			     vmknetddi_queueops_queueid_t *p_qid,
+			     struct napi_struct **napi_p)
+{
+	int i;
+	struct bnx2 *bp = netdev_priv(netdev);
+
+	/* We need to count the default ring as part of the number of RX rings
+	   avaliable */
+	if (bp->n_rx_queues_allocated >= (bp->num_rx_rings - 1))
+		return VMKNETDDI_QUEUEOPS_ERR;
+
+	for_each_nondefault_rx_queue(bp, i) {
+		struct bnx2_napi *bnapi = &bp->bnx2_napi[i];
+		if (!bnapi->rx_queue_allocated) {
+			int queue_id = i - 1;
+			int rc;
+
+			rc = bnx2_netq_alloc_rx_queue(bp, bnapi, queue_id);
+
+			if (rc == VMKNETDDI_QUEUEOPS_OK) {
+				bp->n_rx_queues_allocated++;
+				*p_qid = VMKNETDDI_QUEUEOPS_MK_RX_QUEUEID(queue_id);
+				*napi_p = &bnapi->napi;
+
+				return VMKNETDDI_QUEUEOPS_OK;
+			} else 
+				return VMKNETDDI_QUEUEOPS_ERR;
+		}
+	}
+
+	netdev_err(bp->dev, "No free RX NetQueues found!\n");
+	return VMKNETDDI_QUEUEOPS_ERR;
+}
+
+
+static int
+bnx2_netq_alloc_tx_queue(struct bnx2 *bp,
+			 struct bnx2_napi *bnapi,
+			 int queue_id)
+{
+	if (bp->n_tx_queues_allocated >= (bp->num_tx_rings - 1))
+		return VMKNETDDI_QUEUEOPS_ERR;
+
+	if (!bnapi->tx_queue_allocated) {
+		bnapi->tx_queue_allocated = TRUE;
+		bp->n_tx_queues_allocated++;
+
+		netdev_info(bp->dev, "TX NetQ allocated on %d\n", queue_id);
+		return VMKNETDDI_QUEUEOPS_OK;
+	}
+	netdev_err(bp->dev, "tx queue already allocated!\n");
+	return VMKNETDDI_QUEUEOPS_ERR;
+}
+
+static int
+bnx2_netq_alloc_tx_queue_vmk(struct net_device *netdev,
+			     vmknetddi_queueops_queueid_t *p_qid,
+			     u16 *queue_mapping)
+{
+	int i;
+	struct bnx2 *bp = netdev_priv(netdev);
+
+	if (bp->n_tx_queues_allocated >= (bp->num_tx_rings - 1))
+		return VMKNETDDI_QUEUEOPS_ERR;
+
+	for_each_nondefault_tx_queue(bp, i) {
+		struct bnx2_napi *bnapi = &bp->bnx2_napi[i];
+		if (!bnapi->tx_queue_allocated) {
+			int rc = bnx2_netq_alloc_tx_queue(bp, bnapi, i);
+
+			*p_qid = VMKNETDDI_QUEUEOPS_MK_TX_QUEUEID(i);
+			*queue_mapping = i;
+
+			return rc;
+		}
+	}
+
+	netdev_err(bp->dev, "no free tx queues found!\n");
+	return VMKNETDDI_QUEUEOPS_ERR;
+}
+
+static int
+bnx2_netq_alloc_queue(vmknetddi_queueop_alloc_queue_args_t *args)
+{
+	struct net_device *netdev = args->netdev;
+	struct bnx2 *bp = netdev_priv(netdev);
+
+	if(bp->reset_failed == 1) {
+		netdev_err(bp->dev, "Trying to alloc NetQueue on failed reset "
+				    "device\n");
+		return VMKNETDDI_QUEUEOPS_ERR;
+	}
+
+	if (!bnx2_netqueue_open_started(bp)) {
+		netdev_warn(bp->dev, "NetQueue hardware not running yet\n");
+		return VMKNETDDI_QUEUEOPS_ERR;
+	}
+
+	if (args->type == VMKNETDDI_QUEUEOPS_QUEUE_TYPE_TX) {
+		return bnx2_netq_alloc_tx_queue_vmk(args->netdev,
+						    &args->queueid,
+						    &args->queue_mapping);
+	} else if (args->type == VMKNETDDI_QUEUEOPS_QUEUE_TYPE_RX) {
+		return bnx2_netq_alloc_rx_queue_vmk(args->netdev,
+						    &args->queueid,
+						    &args->napi);
+	} else {
+		netdev_err(bp->dev, "Trying to alloc invalid queue type: %x\n",
+			   args->type);
+		return VMKNETDDI_QUEUEOPS_ERR;
+	}
+}
+
+static int
+bnx2_netq_free_tx_queue(struct net_device *netdev,
+		        vmknetddi_queueops_queueid_t qid)
+{
+	struct bnx2 *bp = netdev_priv(netdev);
+	struct bnx2_napi *bnapi;
+
+	u16 index = VMKNETDDI_QUEUEOPS_QUEUEID_VAL(qid);
+	if (index > bp->num_tx_rings)
+		return VMKNETDDI_QUEUEOPS_ERR;
+
+	bnapi = &bp->bnx2_napi[index];
+	if (bnapi->tx_queue_allocated != TRUE)
+		return VMKNETDDI_QUEUEOPS_ERR;
+
+	bnapi->tx_queue_allocated = FALSE;
+	bp->n_tx_queues_allocated--;
+
+	netdev_info(bp->dev, "Free NetQ TX Queue: 0x%x\n", index);
+
+	return VMKNETDDI_QUEUEOPS_OK;
+}
+
+static int
+bnx2_netq_free_rx_queue_update(struct net_device *netdev,
+			       int index,
+			       int force)
+{
+	int rc;
+	struct bnx2 *bp = netdev_priv(netdev);
+	struct bnx2_napi *bnapi;
+	struct l2_kwqe_vm_free_rx_queue kwqe_free_rx;
+
+	if (index > bp->num_rx_rings) {
+		netdev_err(bp->dev, "Error Free NetQ RX Queue: "
+				    "index(%d) > bp->num_rx_rings(%d)\n",
+			   index, bp->num_rx_rings);
+
+		return VMKNETDDI_QUEUEOPS_ERR;
+	}
+
+	if (!bnx2_netqueue_open_started(bp)) {
+		netdev_warn(bp->dev, "NetQueue hardware not running yet\n");
+		return VMKNETDDI_QUEUEOPS_ERR;
+	}
+
+	bnapi = &bp->bnx2_napi[index];
+	if ((bnapi->rx_queue_allocated != TRUE) && (force == 0)) {
+		netdev_err(bp->dev, "Error Free NetQ RX Queue %d "
+			   "already freed\n", index);
+
+		return VMKNETDDI_QUEUEOPS_OK;
+	}
+
+	memset(&kwqe_free_rx, 0, sizeof(kwqe_free_rx));
+
+	kwqe_free_rx.flags	= L2_KWQE_FLAGS_LAYER_MASK_L2;
+	kwqe_free_rx.opcode	= L2_KWQE_OPCODE_VALUE_VM_FREE_RX_QUEUE;
+	kwqe_free_rx.qid	= index;
+	kwqe_free_rx.queue_type = L2_NET_QUEUE;
+
+	rc = bnx2_netqueue_submit_kwqes(bp,
+					(struct l2_kwqe *) &kwqe_free_rx);
+	if (rc != 0) {
+		netdev_err(bp->dev, "Couldn't submit free rx kwqe\n");
+
+		return VMKNETDDI_QUEUEOPS_ERR;
+	}
+
+	bp->netq_flags = 0;
+	wmb();
+	rc = wait_event_timeout(bp->netq_wait,
+				(bp->netq_flags &
+				L2_KCQE_OPCODE_VALUE_VM_FREE_RX_QUEUE),
+				BNX2_NETQ_WAIT_EVENT_TIMEOUT);
+	if (rc != 0) {
+		bnapi->rx_queue_allocated = FALSE;
+
+		if(force != 1)
+			bp->n_rx_queues_allocated--;
+
+		netdev_err(bp->dev, "Free NetQ RX Queue (forced: %d): %x\n",
+			   force, index);
+
+		return VMKNETDDI_QUEUEOPS_OK;
+	} else {
+		netdev_err(bp->dev, "Timeout free NetQ RX Queue "
+				    "(force: %d): %x\n", force, index);
+
+		return VMKNETDDI_QUEUEOPS_ERR;
+	}
+}
+
+static int
+bnx2_netq_free_rx_queue(struct net_device *netdev,
+			vmknetddi_queueops_queueid_t qid)
+{
+	return bnx2_netq_free_rx_queue_update(netdev,
+				VMKNETDDI_QUEUEOPS_QUEUEID_VAL(qid) + 1, 0);
+}
+
+static int
+bnx2_netq_free_queue(vmknetddi_queueop_free_queue_args_t *args)
+{
+	struct bnx2 *bp = netdev_priv(args->netdev);
+
+	if(bp->reset_failed == 1) {
+		netdev_err(bp->dev, "Trying to free NetQueue on failed reset "
+				    "device\n");
+		return VMKNETDDI_QUEUEOPS_ERR;
+	}
+
+	if (!bnx2_netqueue_open_started(bp)) {
+		netdev_warn(bp->dev, "NetQueue hardware not running yet\n");
+		return VMKNETDDI_QUEUEOPS_ERR;
+	}
+
+	if (VMKNETDDI_QUEUEOPS_IS_TX_QUEUEID(args->queueid)) {
+		return bnx2_netq_free_tx_queue(args->netdev, args->queueid);
+	} else if (VMKNETDDI_QUEUEOPS_IS_RX_QUEUEID(args->queueid)) {
+		return bnx2_netq_free_rx_queue(args->netdev, args->queueid);
+	} else {
+		netdev_err(bp->dev, "free netq: invalid queue type: 0x%x\n",
+			   args->queueid);
+		return VMKNETDDI_QUEUEOPS_ERR;
+	}
+}
+
+static int
+bnx2_netq_get_queue_vector(vmknetddi_queueop_get_queue_vector_args_t *args)
+{
+	int qid;
+	struct bnx2 *bp = netdev_priv(args->netdev);
+	qid = VMKNETDDI_QUEUEOPS_QUEUEID_VAL(args->queueid);
+	if (qid > bp->num_rx_rings)
+		return VMKNETDDI_QUEUEOPS_ERR;
+
+#ifdef CONFIG_PCI_MSI
+	args->vector = bp->bnx2_napi[qid].int_num;
+#endif
+	return VMKNETDDI_QUEUEOPS_OK;
+}
+
+static int
+bnx2_netq_get_default_queue(vmknetddi_queueop_get_default_queue_args_t *args)
+{
+	struct bnx2 *bp = netdev_priv(args->netdev);
+
+	if (args->type == VMKNETDDI_QUEUEOPS_QUEUE_TYPE_RX) {
+		args->queueid = VMKNETDDI_QUEUEOPS_MK_RX_QUEUEID(0);
+		args->napi = &bp->bnx2_napi[0].napi;
+		return VMKNETDDI_QUEUEOPS_OK;
+	} else if (args->type == VMKNETDDI_QUEUEOPS_QUEUE_TYPE_TX) {
+		args->queueid = VMKNETDDI_QUEUEOPS_MK_TX_QUEUEID(0);
+		args->queue_mapping = 0;
+		return VMKNETDDI_QUEUEOPS_OK;
+	} else
+		return VMKNETDDI_QUEUEOPS_ERR;
+}
+
+static int
+bnx2_netq_remove_rx_filter(struct bnx2 *bp, int qid)
+{
+	u16 fw_qid = qid;
+	struct bnx2_napi *bnapi;
+	struct l2_kwqe_vm_remove_rx_filter kwqe_remove_rx_filter;
+	int rc;
+
+	if(bp->reset_failed == 1) {
+		netdev_err(bp->dev, "Trying to remove RX filter NetQueue on "
+				    "failed reset device\n");
+		return VMKNETDDI_QUEUEOPS_ERR;
+	}
+
+	if (!bnx2_netqueue_open_started(bp)) {
+		netdev_err(bp->dev, "NetQueue hardware not running yet\n");
+		return VMKNETDDI_QUEUEOPS_ERR;
+	}
+
+	bnapi = &bp->bnx2_napi[qid + 1];
+
+	if (qid > bp->num_rx_rings) {
+		netdev_info(bp->dev, "Free RX Filter NetQ: failed "
+				     "qid(%d) > bp->num_rx_rings(%d)\n",
+			    qid, bp->num_rx_rings);
+		return VMKNETDDI_QUEUEOPS_ERR;
+	}
+
+	memset(&kwqe_remove_rx_filter, 0, sizeof(kwqe_remove_rx_filter));
+
+	kwqe_remove_rx_filter.flags		= L2_KWQE_FLAGS_LAYER_MASK_L2;
+	kwqe_remove_rx_filter.opcode		= L2_KWQE_OPCODE_VALUE_VM_REMOVE_RX_FILTER;
+	kwqe_remove_rx_filter.filter_type	= L2_VM_FILTER_MAC;
+	kwqe_remove_rx_filter.qid		= fw_qid;
+	kwqe_remove_rx_filter.filter_id		= fw_qid + BNX2_START_FILTER_ID;
+
+	rc = bnx2_netqueue_submit_kwqes(bp,
+					(struct l2_kwqe *) &kwqe_remove_rx_filter);
+	if (rc != 0) {
+		netdev_err(bp->dev, "Couldn't submit rx filter kwqe\n");
+		return VMKNETDDI_QUEUEOPS_ERR;
+	}
+
+	bp->netq_flags = 0;
+	wmb();
+	rc = wait_event_timeout(bp->netq_wait,
+				(bp->netq_flags &
+				 L2_KCQE_OPCODE_VALUE_VM_REMOVE_RX_FILTER),
+				BNX2_NETQ_WAIT_EVENT_TIMEOUT);
+	if (rc != 0) {
+		bnapi->rx_queue_active = FALSE;
+		bnapi->netq_state &= ~BNX2_NETQ_RX_FILTER_APPLIED;
+
+		netdev_info(bp->dev, "NetQ remove RX filter: %d\n", qid);
+
+		return VMKNETDDI_QUEUEOPS_OK;
+	} else {
+		netdev_warn(bp->dev, "Timeout NetQ remove RX filter: %d\n",
+			    qid);
+
+		return VMKNETDDI_QUEUEOPS_ERR;
+	}
+}
+
+static int
+bnx2_netq_remove_rx_filter_vmk(vmknetddi_queueop_remove_rx_filter_args_t *args)
+{
+	struct bnx2 *bp = netdev_priv(args->netdev);
+	u16 qid = VMKNETDDI_QUEUEOPS_QUEUEID_VAL(args->queueid);
+	struct bnx2_napi *bnapi;
+
+	if (bp->reset_failed == 1) {
+		netdev_err(bp->dev, "Trying to remove RX filter NetQueue on "
+				    "failed reset device\n");
+		return VMKNETDDI_QUEUEOPS_ERR;
+	}
+
+	if (!bnx2_netqueue_open_started(bp)) {
+		netdev_warn(bp->dev, "NetQueue hardware not running yet\n");
+		return VMKNETDDI_QUEUEOPS_ERR;
+	}
+
+	bnapi = &bp->bnx2_napi[qid + 1];
+
+	if (!VMKNETDDI_QUEUEOPS_IS_RX_QUEUEID(args->queueid)) {
+		netdev_err(bp->dev, "!VMKNETDDI_QUEUEOPS_IS_RX_QUEUEID: "
+				    "qid: %d)\n", qid);
+		return VMKNETDDI_QUEUEOPS_ERR;
+	}
+
+	if (qid > bp->num_rx_rings) {
+		netdev_err(bp->dev, "qid(%d) > bp->num_rx_rings(%d)\n",
+			   qid, bp->num_rx_rings);
+		return VMKNETDDI_QUEUEOPS_ERR;
+	}
+
+	/* Only support one Mac filter per queue */
+	if (bnapi->rx_queue_active == 0) {
+		netdev_info(bp->dev, "bnapi->rx_queue_active(%d) == 0\n",
+			    bnapi->rx_queue_active);
+		return VMKNETDDI_QUEUEOPS_ERR;
+	}
+
+	return bnx2_netq_remove_rx_filter(bp, qid);
+}
+
+
+static int
+bnx2_netq_apply_rx_filter(struct bnx2 *bp, struct bnx2_napi *bnapi,
+			  int queueid)
+{
+	u16 fw_queueid = queueid;
+	struct l2_kwqe_vm_set_rx_filter kwqe_set_rx_filter;
+	int rc;
+	DECLARE_MAC_BUF(mac);
+
+	if (bp->reset_failed == 1) {
+		netdev_err(bp->dev, "Trying to apply RX filter NetQueue on "
+				    "failed reset device\n");
+		return VMKNETDDI_QUEUEOPS_ERR;
+	}
+
+	if (!bnx2_netqueue_open_started(bp)) {
+		netdev_warn(bp->dev, "NetQueue hardware not running yet\n");
+		return VMKNETDDI_QUEUEOPS_ERR;
+	}
+
+	if (bnapi->rx_queue_active == TRUE || !bnapi->rx_queue_allocated) {
+		netdev_err(bp->dev, "apply filter: RX NetQ %d already active"
+				"bnapi->rx_queue_active(%d) || "
+				"!bnapi->rx_queue_allocated(%d)\n",
+			   queueid, bnapi->rx_queue_active,
+			   bnapi->rx_queue_allocated);
+		return VMKNETDDI_QUEUEOPS_ERR;
+	}
+
+	bnx2_set_mac_addr(bp, bnapi->mac_filter_addr,
+			  fw_queueid + QID_TO_PM_OFFSET);
+
+
+	memset(&kwqe_set_rx_filter, 0, sizeof(kwqe_set_rx_filter));
+
+	kwqe_set_rx_filter.flags	= L2_KWQE_FLAGS_LAYER_MASK_L2;
+	kwqe_set_rx_filter.opcode	= L2_KWQE_OPCODE_VALUE_VM_SET_RX_FILTER;
+	kwqe_set_rx_filter.filter_id	= fw_queueid + BNX2_START_FILTER_ID;
+
+#if defined(__LITTLE_ENDIAN)
+	memcpy(&kwqe_set_rx_filter.mac_addr_hi, bnapi->mac_filter_addr, 2);
+	memcpy(&kwqe_set_rx_filter.mac_addr_lo, bnapi->mac_filter_addr + 2, 4);
+#else
+	memcpy(&kwqe_set_rx_filter.mac_addr, bnapi->mac_filter_addr, 6);
+#endif
+
+	if (bnapi->class == VMKNETDDI_QUEUEOPS_FILTER_MACADDR) {
+		kwqe_set_rx_filter.filter_type	= L2_VM_FILTER_MAC;
+	} else {
+		kwqe_set_rx_filter.filter_type	= L2_VM_FILTER_MAC_VLAN;
+		kwqe_set_rx_filter.vlan		= bnapi->vlan_id;
+	}
+	kwqe_set_rx_filter.qid		= fw_queueid;
+
+	rc = bnx2_netqueue_submit_kwqes(bp,
+					(struct l2_kwqe *) &kwqe_set_rx_filter);
+	if (rc != 0) {
+		netdev_err(bp->dev, "Couldn't submit rx filter kwqe\n");
+		return VMKNETDDI_QUEUEOPS_ERR;
+	}
+
+	bp->netq_flags = 0;
+	wmb();
+	rc = wait_event_timeout(bp->netq_wait,
+				(bp->netq_flags &
+				 L2_KCQE_OPCODE_VALUE_VM_SET_RX_FILTER),
+				BNX2_NETQ_WAIT_EVENT_TIMEOUT);
+
+	if (rc != 0) {
+		bnapi->rx_queue_active = TRUE;
+		bnapi->netq_state |= BNX2_NETQ_RX_FILTER_APPLIED;
+
+		netdev_info(bp->dev,  "NetQ set RX Filter: %d [%s %d]\n",
+			    queueid, print_mac(mac, bnapi->mac_filter_addr),
+			    bnapi->vlan_id);
+
+		return VMKNETDDI_QUEUEOPS_OK;
+	} else {
+		netdev_info(bp->dev, "Timeout submitting NetQ set RX Filter: "
+				     "%d [%s]\n",
+			    queueid, print_mac(mac, bnapi->mac_filter_addr));
+
+		return VMKNETDDI_QUEUEOPS_ERR;
+	}
+}
+
+static int
+bnx2_netq_apply_rx_filter_vmk(vmknetddi_queueop_apply_rx_filter_args_t *args)
+{
+	u8 *macaddr;
+	struct bnx2_napi *bnapi;
+	struct bnx2 *bp = netdev_priv(args->netdev);
+	u16 queueid = VMKNETDDI_QUEUEOPS_QUEUEID_VAL(args->queueid);
+	vmknetddi_queueops_filter_class_t class;
+	DECLARE_MAC_BUF(mac);
+
+	if (bp->reset_failed == 1) {
+		netdev_err(bp->dev, "Trying to apply RX filter NetQueue on "
+				    "failed reset device\n");
+		return VMKNETDDI_QUEUEOPS_ERR;
+	}
+
+	if (!bnx2_netqueue_open_started(bp)) {
+		netdev_warn(bp->dev, "NetQueue hardware not running yet\n");
+		return VMKNETDDI_QUEUEOPS_ERR;
+	}
+
+	if (!VMKNETDDI_QUEUEOPS_IS_RX_QUEUEID(args->queueid)) {
+		netdev_err(bp->dev, "invalid NetQ RX ID: %x\n", args->queueid);
+		return VMKNETDDI_QUEUEOPS_ERR;
+	}
+
+	class = vmknetddi_queueops_get_filter_class(&args->filter);
+	if ((class != VMKNETDDI_QUEUEOPS_FILTER_MACADDR) &&
+	    (class != VMKNETDDI_QUEUEOPS_FILTER_VLANMACADDR)) {
+		netdev_err(bp->dev, "recieved invalid RX NetQ filter: %x\n",
+			   class);
+		return VMKNETDDI_QUEUEOPS_ERR;
+	}
+	if (queueid > bp->num_rx_rings) {
+		netdev_err(bp->dev, "applying filter with invalid "
+				    "RX NetQ %d ID\n", queueid);
+		return VMKNETDDI_QUEUEOPS_ERR;
+	}
+
+	bnapi = &bp->bnx2_napi[queueid + 1];
+
+	if (bnapi->rx_queue_active || !bnapi->rx_queue_allocated) {
+		netdev_err(bp->dev, "RX NetQ %d already active\n", queueid);
+		return VMKNETDDI_QUEUEOPS_ERR;
+	}
+
+	macaddr = (void *)vmknetddi_queueops_get_filter_macaddr(&args->filter);
+	memcpy(bnapi->mac_filter_addr, macaddr, ETH_ALEN);
+	bnapi->vlan_id = vmknetddi_queueops_get_filter_vlanid(&args->filter);
+	bnapi->class = class;
+
+	/*  Apply RX filter code here */
+	args->filterid = VMKNETDDI_QUEUEOPS_MK_FILTERID(queueid);
+
+	return bnx2_netq_apply_rx_filter(bp, bnapi, queueid);
+}
+
+static int
+bnx2_netq_get_queue_stats(vmknetddi_queueop_get_stats_args_t *args)
+{
+	u16 queueid = VMKNETDDI_QUEUEOPS_QUEUEID_VAL(args->queueid);
+	struct bnx2_napi *bnapi;
+	struct bnx2 *bp = netdev_priv(args->netdev);
+
+	bnapi = &bp->bnx2_napi[queueid];
+
+	args->stats = &bnapi->stats;
+
+	return VMKNETDDI_QUEUEOPS_OK;
+}
+
+static int
+bnx2_netq_get_netqueue_version(vmknetddi_queueop_get_version_args_t *args)
+{
+	return vmknetddi_queueops_version(args);
+}
+
+static void
+bnx2_netqueue_flush_all(struct bnx2 *bp)
+{
+	int i;
+	u16 num_tx = 0, num_rx = 0;
+
+	netdev_info(bp->dev, "Flushing NetQueues\n");
+
+	mutex_lock(&bp->netq_lock);
+
+	for_each_nondefault_rx_queue(bp, i) {
+		struct bnx2_napi *bnapi = &bp->bnx2_napi[i];
+
+		if(bnapi->netq_state & BNX2_NETQ_RX_FILTER_APPLIED) {
+			int rc = bnx2_netq_remove_rx_filter(bp, i);
+			if (rc == VMKNETDDI_QUEUEOPS_ERR) {
+				netdev_err(bp->dev, "could not remove RX "
+						    "filter during flush\n");
+			}
+
+			if(bnapi->rx_queue_allocated == TRUE) {
+				rc = bnx2_netq_free_rx_queue_update(bp->dev,
+								    i, 1);
+				if (rc == VMKNETDDI_QUEUEOPS_OK) {
+					num_rx++;
+				} else {
+					netdev_err(bp->dev, "couldn't free RX "
+							"queue during flush\n");
+				}
+			}
+		}
+	}
+
+	for_each_nondefault_tx_queue(bp, i) {
+		struct bnx2_napi *bnapi = &bp->bnx2_napi[i];
+
+		if(bnapi->tx_queue_allocated == TRUE) {
+			bnx2_netq_free_tx_queue(bp->dev, i);
+		}
+
+		num_tx++;
+	}
+
+	mutex_unlock(&bp->netq_lock);
+
+	netdev_info(bp->dev, " finished saving NetQueues: rx: %d tx: %d\n",
+		    num_rx, num_tx);
+}
+
+
+static int
+bnx2_netqueue_ops(vmknetddi_queueops_op_t op, void *args)
+{
+	int rc;
+	struct bnx2 *bp;
+
+	if (op == VMKNETDDI_QUEUEOPS_OP_GET_VERSION)
+		 return bnx2_netq_get_netqueue_version(
+			(vmknetddi_queueop_get_version_args_t *)args);
+
+	bp = netdev_priv(((vmknetddi_queueop_get_features_args_t *)args)->netdev);
+
+	if (!bnx2_netqueue_is_avail(bp))
+		return VMKNETDDI_QUEUEOPS_ERR;
+
+	mutex_lock(&bp->netq_lock);
+
+	switch (op) {
+	case VMKNETDDI_QUEUEOPS_OP_GET_FEATURES:
+		rc = bnx2_netq_get_netqueue_features(
+			(vmknetddi_queueop_get_features_args_t *)args);
+		break;
+
+	case VMKNETDDI_QUEUEOPS_OP_GET_QUEUE_COUNT:
+		rc = bnx2_netq_get_queue_count(
+			(vmknetddi_queueop_get_queue_count_args_t *)args);
+		break;
+
+	case VMKNETDDI_QUEUEOPS_OP_GET_FILTER_COUNT:
+		rc = bnx2_netq_get_filter_count(
+			(vmknetddi_queueop_get_filter_count_args_t *)args);
+		break;
+
+	case VMKNETDDI_QUEUEOPS_OP_ALLOC_QUEUE:
+		rc = bnx2_netq_alloc_queue(
+			(vmknetddi_queueop_alloc_queue_args_t *)args);
+		break;
+
+	case VMKNETDDI_QUEUEOPS_OP_FREE_QUEUE:
+		rc = bnx2_netq_free_queue(
+			(vmknetddi_queueop_free_queue_args_t *)args);
+		break;
+
+	case VMKNETDDI_QUEUEOPS_OP_GET_QUEUE_VECTOR:
+		rc = bnx2_netq_get_queue_vector(
+			(vmknetddi_queueop_get_queue_vector_args_t *)args);
+		break;
+
+	case VMKNETDDI_QUEUEOPS_OP_GET_DEFAULT_QUEUE:
+		rc = bnx2_netq_get_default_queue(
+			(vmknetddi_queueop_get_default_queue_args_t *)args);
+		break;
+
+	case VMKNETDDI_QUEUEOPS_OP_APPLY_RX_FILTER:
+		rc = bnx2_netq_apply_rx_filter_vmk(
+			(vmknetddi_queueop_apply_rx_filter_args_t *)args);
+		break;
+
+	case VMKNETDDI_QUEUEOPS_OP_REMOVE_RX_FILTER:
+		rc = bnx2_netq_remove_rx_filter_vmk(
+			(vmknetddi_queueop_remove_rx_filter_args_t *)args);
+		break;
+
+	case VMKNETDDI_QUEUEOPS_OP_GET_STATS:
+		rc = bnx2_netq_get_queue_stats(
+			(vmknetddi_queueop_get_stats_args_t *)args);
+		break;
+
+	/*  Unsupported for now */
+	case VMKNETDDI_QUEUEOPS_OP_SET_TX_PRIORITY:
+		rc = VMKNETDDI_QUEUEOPS_ERR;
+		break;
+
+	default:
+		netdev_warn(bp->dev, "Unhandled NETQUEUE OP %d\n", op);
+		rc = VMKNETDDI_QUEUEOPS_ERR;
+	}
+
+	mutex_unlock(&bp->netq_lock);
+
+	return rc;
+}
+#endif /* defined(BNX2_ENABLE_NETQUEUE) */
+
+#if defined(__VMKLNX__)
+/* The following debug buffers and exported routines are used by GDB to access
+   teton/xinan hardware registers when doing live debug over serial port. */
+
+#define DBG_BUF_SZ  128
+
+static u32 bnx2_dbg_buf[DBG_BUF_SZ];
+
+static u32 bnx2_dbg_read32_ind_single(void __iomem *reg_view, u32 off)
+{
+	u32 val;
+	writel(off, reg_view + BNX2_PCICFG_REG_WINDOW_ADDRESS);
+	val = readl(reg_view + BNX2_PCICFG_REG_WINDOW);
+	return val;
+}
+
+void bnx2_dbg_read32_ind(void __iomem *reg_view, u32 off, u32 len)
+{
+	u32 *buf = bnx2_dbg_buf;
+
+	if (len & 0x3)
+		len = (len + 3) & ~3;
+	if (len > DBG_BUF_SZ)
+		len = DBG_BUF_SZ;
+
+	while (len > 0) {
+		*buf = bnx2_dbg_read32_ind_single(reg_view, off);
+		buf++;
+		off += 4;
+		len -= 4;
+	}
+}
+EXPORT_SYMBOL(bnx2_dbg_read32_ind);
+
+static u32 bnx2_dbg_read32_single(void __iomem *reg_view, u32 off)
+{
+	return readl(reg_view + off);
+}
+
+void bnx2_dbg_read32(void __iomem *reg_view, u32 off, u32 len)
+{
+	u32 *buf = bnx2_dbg_buf;
+
+	if (len & 0x3)
+		len = (len + 3) & ~3;
+	if (len > DBG_BUF_SZ)
+		len = DBG_BUF_SZ;
+
+	while (len > 0) {
+		*buf = bnx2_dbg_read32_single(reg_view, off);
+		buf++;
+		off += 4;
+		len -= 4;
+	}
+}
+EXPORT_SYMBOL(bnx2_dbg_read32);
+
+void bnx2_dbg_write32(void __iomem *reg_view, u32 off, u32 val)
+{
+	writel(val, reg_view + off);
+}
+EXPORT_SYMBOL(bnx2_dbg_write32);
+
+void bnx2_dbg_write32_ind(void __iomem *reg_view, u32 off, u32 val)
+{
+	writel(off, reg_view + BNX2_PCICFG_REG_WINDOW_ADDRESS);
+	writel(val, reg_view + BNX2_PCICFG_REG_WINDOW);
+}
+EXPORT_SYMBOL(bnx2_dbg_write32_ind);
+
+#endif /*__VMKLNX__ */
diff -r 2e9e6572f41c drivers/net/bnx2/bnx2.h
--- /dev/null
+++ b/drivers/net/bnx2/bnx2.h
@@ -0,0 +1,8743 @@
+/* bnx2.h: Broadcom NX2 network driver.
+ *
+ * Copyright (c) 2004-2012 Broadcom Corporation
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation.
+ *
+ * Written by: Michael Chan  (mchan@broadcom.com)
+ */
+
+
+#ifndef BNX2_H
+#define BNX2_H
+
+#if defined(__VMKLNX__) && (VMWARE_ESX_DDK_VERSION >= 41000)
+#define VMWARE_ISCSI
+#endif
+
+#if defined(__VMKLNX__) && \
+    (VMWARE_ESX_DDK_VERSION >= 40000)
+#define BNX2_VMWARE_BMAPILNX
+#endif
+
+#if defined(__VMKLNX__)
+#define HAVE_LE32	1
+#define HAVE_IP_HDR	1
+#define NEW_SKB		1
+#define BNX2_NEW_NAPI	1
+#endif
+
+#ifndef ADVERTISE_1000XFULL
+#define ADVERTISE_1000XFULL	0x0020
+#define ADVERTISE_1000XHALF	0x0040
+#define ADVERTISE_1000XPAUSE	0x0080
+#define ADVERTISE_1000XPSE_ASYM	0x0100
+#endif
+
+#ifndef ADVERTISE_PAUSE_CAP
+#define ADVERTISE_PAUSE_CAP	0x0400
+#define ADVERTISE_PAUSE_ASYM	0x0800
+#endif
+
+#ifndef MII_CTRL1000
+#define MII_CTRL1000		0x9
+#define MII_STAT1000		0xa
+#endif
+
+#ifndef BMCR_SPEED1000
+#define BMCR_SPEED1000		0x0040
+#endif
+
+#ifndef ADVERTISE_1000FULL
+#define ADVERTISE_1000FULL	0x0200
+#define ADVERTISE_1000HALF	0x0100
+#endif
+
+#ifndef SPEED_2500
+#define SPEED_2500		2500
+#endif
+
+#ifndef SUPPORTED_2500baseX_Full
+#define SUPPORTED_2500baseX_Full	(1 << 15)
+#define ADVERTISED_2500baseX_Full	(1 << 15)
+#endif
+
+#if (LINUX_VERSION_CODE < 0x02061b)
+static inline void ethtool_cmd_speed_set(struct ethtool_cmd *ep,
+					 __u32 speed)
+{
+	ep->speed = (__u16)speed;
+}
+
+static inline __u32 ethtool_cmd_speed(struct ethtool_cmd *ep)
+{
+	return ep->speed;
+}
+#endif
+
+#ifndef ETH_FCS_LEN
+#define ETH_FCS_LEN	4
+#endif
+
+#ifndef PCI_DEVICE_ID_NX2_5706
+#define PCI_DEVICE_ID_NX2_5706	0x164a
+#define PCI_DEVICE_ID_NX2_5706S	0x16aa
+#endif
+
+#ifndef PCI_DEVICE_ID_NX2_5708
+#define PCI_DEVICE_ID_NX2_5708	0x164c
+#define PCI_DEVICE_ID_NX2_5708S	0x16ac
+#endif
+
+#ifndef PCI_DEVICE_ID_NX2_5709
+#define PCI_DEVICE_ID_NX2_5709	0x1639
+#endif
+
+#ifndef PCI_DEVICE_ID_NX2_5709S
+#define PCI_DEVICE_ID_NX2_5709S	0x163a
+#endif
+
+#ifndef PCI_DEVICE_ID_AMD_8132_BRIDGE
+#define PCI_DEVICE_ID_AMD_8132_BRIDGE	0x7458
+#endif
+
+#ifndef IRQ_RETVAL
+typedef void irqreturn_t;
+#define IRQ_RETVAL(x)
+#define IRQ_HANDLED
+#define IRQ_NONE
+#endif
+
+#ifndef IRQF_SHARED
+#define IRQF_SHARED SA_SHIRQ
+#endif
+
+#ifndef NETDEV_TX_OK
+#define NETDEV_TX_OK 0
+#endif
+
+#ifndef NETDEV_TX_BUSY
+#define NETDEV_TX_BUSY 1
+#endif
+
+#if (LINUX_VERSION_CODE < 0x020620)
+typedef int netdev_tx_t;
+#endif
+
+#if (LINUX_VERSION_CODE < 0x020547)
+#define pci_set_consistent_dma_mask(pdev, mask) (0)
+#endif
+
+#ifndef PCI_CAP_ID_EXP
+#define PCI_CAP_ID_EXP 0x10
+#endif
+
+#ifndef PCI_MSIX_FLAGS
+#define PCI_MSIX_FLAGS		2
+#endif
+
+#ifndef PCI_MSIX_FLAGS_ENABLE
+#define PCI_MSIX_FLAGS_ENABLE	(1 << 15)
+#endif
+
+#ifndef DEFINE_PCI_DEVICE_TABLE
+#define DEFINE_PCI_DEVICE_TABLE(_table) \
+	struct pci_device_id _table[]
+#endif
+
+#ifndef HAVE_AER
+static inline int pci_disable_pcie_error_reporting(struct pci_dev *pdev)
+{
+	return 0;
+}
+static inline int pci_enable_pcie_error_reporting(struct pci_dev *pdev)
+{
+	return 0;
+}
+
+static inline int pci_cleanup_aer_uncorrect_error_status(struct pci_dev *pdev)
+{
+	return 0;
+}
+#endif
+
+#ifndef HAVE_BOOL
+typedef int bool;
+#define false 0
+#define true  1
+#endif
+
+#ifndef HAVE_IS_PCIE
+static inline bool pci_is_pcie(struct pci_dev *dev)
+{
+	if (pci_find_capability(dev, PCI_CAP_ID_EXP) == 0)
+		return false;
+
+	return true;
+}
+#endif
+
+#ifndef DEFINE_DMA_UNMAP_ADDR
+#define DEFINE_DMA_UNMAP_ADDR(mapping) DECLARE_PCI_UNMAP_ADDR(mapping)
+#endif
+
+#ifndef dma_unmap_addr_set
+#define dma_unmap_addr_set pci_unmap_addr_set
+#endif
+
+#ifndef dma_unmap_addr
+#define dma_unmap_addr pci_unmap_addr
+#endif
+
+#if (LINUX_VERSION_CODE < 0x020604)
+#define MODULE_VERSION(version)
+#endif
+
+#ifndef SET_MODULE_OWNER
+#define SET_MODULE_OWNER(dev) do { } while (0)
+#endif
+
+#ifndef CHECKSUM_PARTIAL
+#define CHECKSUM_PARTIAL CHECKSUM_HW
+#endif
+
+#ifndef DMA_BIT_MASK
+#define DMA_BIT_MASK(n)	(((n) == 64) ? ~0ULL : ((1ULL<<(n))-1))
+#endif
+
+#ifndef mmiowb
+#define mmiowb()
+#endif
+
+#if !defined(__iomem)
+#define __iomem
+#endif
+
+/*
+ *  On ESX the wmb() instruction is defined to only a compiler barrier
+ *  The macro wmb() need to be overrode to properly synchronize memory
+ */
+#if defined(__VMKLNX__)
+#undef wmb
+#define wmb()   asm volatile("sfence" ::: "memory")
+#endif
+
+#if !defined(__rcquires)
+#define __acquires(x)
+#define __releases(x)
+#endif
+
+#ifndef HAVE_LE32
+typedef u32 __le32;
+typedef u32 __be32;
+#endif
+
+#ifndef USEC_PER_SEC
+#define USEC_PER_SEC	1000000L
+#endif
+
+#ifndef __maybe_unused
+#define __maybe_unused
+#endif
+
+#ifndef uninitialized_var
+#define uninitialized_var(x) x
+#endif
+
+#if (LINUX_VERSION_CODE < 0x2060b)
+typedef u32 pm_message_t;
+typedef u32 pci_power_t;
+#define PCI_D0		0
+#define PCI_D3hot	3
+#endif
+
+#if (LINUX_VERSION_CODE < 0x020605)
+#define pci_dma_sync_single_for_cpu(pdev, map, len, dir)	\
+	pci_dma_sync_single(pdev, map, len, dir)
+
+#define pci_dma_sync_single_for_device(pdev, map, len, dir)
+#endif
+
+#if (LINUX_VERSION_CODE < 0x020612)
+#ifndef HAVE_GFP
+typedef unsigned gfp_t;
+#endif
+
+static inline struct sk_buff *__netdev_alloc_skb(struct net_device *dev,
+		unsigned int length, gfp_t gfp_mask)
+{
+	struct sk_buff *skb = __dev_alloc_skb(length, gfp_mask);
+	if (skb)
+		skb->dev = dev;
+	return skb;
+}
+
+static inline struct sk_buff *netdev_alloc_skb(struct net_device *dev,
+		unsigned int length)
+{
+	return __netdev_alloc_skb(dev, length, GFP_ATOMIC);
+}
+
+#endif
+
+static inline void bnx2_skb_fill_page_desc(struct sk_buff *skb, int i,
+					   struct page *page, int off, int size)
+{
+#if (LINUX_VERSION_CODE < 0x020600)
+	skb_frag_t *frag = &skb_shinfo(skb)->frags[i];
+
+	frag->page		  = page;
+	frag->page_offset	  = off;
+	frag->size		  = size;
+	skb_shinfo(skb)->nr_frags = i + 1;
+#else
+	skb_fill_page_desc(skb, i, page, off, size);
+#endif
+}
+
+#ifndef NETIF_F_GSO
+static inline void netif_tx_lock(struct net_device *dev)
+{
+	spin_lock(&dev->xmit_lock);
+	dev->xmit_lock_owner = smp_processor_id();
+}
+
+static inline void netif_tx_unlock(struct net_device *dev)
+{
+	dev->xmit_lock_owner = -1;
+	spin_unlock(&dev->xmit_lock);
+}
+#endif
+
+#if !defined(HAVE_NETDEV_PRIV) && (LINUX_VERSION_CODE != 0x020603) && (LINUX_VERSION_CODE != 0x020604) && (LINUX_VERSION_CODE != 0x20605) && (LINUX_VERSION_CODE < 0x30000)
+static inline void *netdev_priv(struct net_device *dev)
+{
+	return dev->priv;
+}
+#endif
+
+#ifdef OLD_NETIF
+static inline void netif_poll_disable(struct net_device *dev)
+{
+	while (test_and_set_bit(__LINK_STATE_RX_SCHED, &dev->state)) {
+		/* No hurry. */
+		current->state = TASK_INTERRUPTIBLE;
+		schedule_timeout(1);
+	}
+}
+
+static inline void netif_poll_enable(struct net_device *dev)
+{
+	clear_bit(__LINK_STATE_RX_SCHED, &dev->state);
+}
+
+static inline void netif_tx_disable(struct net_device *dev)
+{
+	spin_lock_bh(&dev->xmit_lock);
+	netif_stop_queue(dev);
+	spin_unlock_bh(&dev->xmit_lock);
+}
+
+#endif
+
+#if (LINUX_VERSION_CODE >= 0x20418) && (LINUX_VERSION_CODE < 0x2060c)
+static inline int bnx2_set_tx_hw_csum(struct net_device *dev, u32 data)
+{
+	if (data)
+		dev->features |= NETIF_F_HW_CSUM;
+	else
+		dev->features &= ~NETIF_F_HW_CSUM;
+
+	return 0;
+}
+#endif
+
+#if !defined(VLAN_GROUP_ARRAY_SPLIT_PARTS) && !defined(VLAN_CFI_MASK)
+static inline void vlan_group_set_device(struct vlan_group *vg, int vlan_id,
+					 struct net_device *dev)
+{
+	if (vg)
+		vg->vlan_devices[vlan_id] = dev;
+}
+#endif
+
+#ifdef NETIF_F_TSO
+#ifndef NETIF_F_GSO
+static inline int skb_is_gso(const struct sk_buff *skb)
+{
+	return skb_shinfo(skb)->tso_size;
+}
+#define gso_size tso_size
+#define gso_segs tso_segs
+#endif
+#ifndef NETIF_F_TSO6
+#define NETIF_F_TSO6	0
+#define BCM_NO_TSO6	1
+#endif
+#ifndef NETIF_F_TSO_ECN
+#define NETIF_F_TSO_ECN	0
+#endif
+
+#ifndef HAVE_IP_HDR
+static inline struct iphdr *ip_hdr(const struct sk_buff *skb)
+{
+	return skb->nh.iph;
+}
+#endif
+
+#ifndef NEW_SKB
+static inline int skb_transport_offset(const struct sk_buff *skb)
+{
+	return (int) (skb->h.raw - skb->data);
+}
+
+static inline unsigned int ip_hdrlen(const struct sk_buff *skb)
+{
+	return ip_hdr(skb)->ihl * 4;
+}
+
+static inline struct tcphdr *tcp_hdr(const struct sk_buff *skb)
+{
+	return skb->h.th;
+}
+
+static inline unsigned int tcp_optlen(const struct sk_buff *skb)
+{
+	return (tcp_hdr(skb)->doff - 5) * 4;
+}
+
+#endif
+#endif /* #ifdef NETIF_F_TSO */
+
+#ifndef VMWARE_ESX_40_DDK
+#if ((LINUX_VERSION_CODE >= 0x20617) && !defined(NETIF_F_MULTI_QUEUE)) || defined(__VMKLNX__)
+
+#define BCM_HAVE_MULTI_QUEUE
+
+#else
+
+static inline void netif_tx_wake_all_queues(struct net_device *dev)
+{
+	netif_wake_queue(dev);
+}
+
+static inline void netif_tx_start_all_queues(struct net_device *dev)
+{
+	netif_start_queue(dev);
+}
+
+#endif
+#else
+#define BCM_HAVE_MULTI_QUEUE
+#endif
+
+ 
+#ifndef NET_SKB_PAD
+#define NET_SKB_PAD	16
+#endif
+
+#if (LINUX_VERSION_CODE < 0x02061e)
+static inline void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
+{
+}
+#endif
+
+#if defined(HAVE_SET_RX_MODE) || (LINUX_VERSION_CODE > 0x20621)
+#define BCM_HAVE_SET_RX_MODE	1
+#endif
+
+#ifdef NETDEV_HW_ADDR_T_MULTICAST
+#define BCM_NEW_NETDEV_HW_ADDR
+#endif
+
+#ifndef netdev_uc_count
+#if (LINUX_VERSION_CODE < 0x2061f)
+#define netdev_uc_count(dev)	((dev)->uc_count)
+#else
+#define netdev_uc_count(dev)	((dev)->uc.count)
+#endif
+#endif
+
+#ifndef netdev_for_each_uc_addr
+#define netdev_for_each_uc_addr(ha, dev) \
+	list_for_each_entry(ha, &dev->uc.list, list)
+#endif
+
+#ifndef netdev_for_each_mc_addr
+#define netdev_for_each_mc_addr(mclist, dev) \
+	for (mclist = dev->mc_list; mclist; mclist = mclist->next)
+#endif
+
+#if (LINUX_VERSION_CODE < 0x020600)
+#define dev_err(unused, format, arg...)		\
+	printk(KERN_ERR "bnx2: " format , ## arg)
+#else
+#ifndef HAVE_DEV_ERR
+#ifndef HAVE_DEV_PRINTK
+#define dev_printk(level, dev, format, arg...)	\
+	printk(level "bnx2 %s: " format , (dev)->bus_id , ## arg)
+#endif
+#define dev_err(dev, format, arg...)		\
+	dev_printk(KERN_ERR , dev , format , ## arg)
+#endif
+#endif
+
+#if (LINUX_VERSION_CODE < 0x020606)
+#undef netdev_printk
+#undef netdev_err
+#undef netdev_info
+#endif
+
+#if !defined(netdev_printk) && (LINUX_VERSION_CODE < 0x020624)
+
+#if (LINUX_VERSION_CODE < 0x020615)
+#define NET_PARENT_DEV(netdev)  ((netdev)->class_dev.dev)
+#else
+#define NET_PARENT_DEV(netdev)  ((netdev)->dev.parent)
+#endif
+
+#if !defined(__VMKLNX__)
+#define netdev_printk(level, netdev, format, args...)		\
+	dev_printk(level, NET_PARENT_DEV(netdev),	\
+		   "%s: " format,				\
+		   netdev_name(netdev), ##args)
+#else /*(__VMKLNX__)*/
+#define netdev_printk(level, netdev, format, args...)           \
+	printk("%s" \
+	       "%s %s: %s: " format, level,                     \
+               DRV_MODULE_NAME, pci_name(netdev->pdev),         \
+               netdev_name(netdev), ##args)
+#endif
+
+static inline const char *netdev_name(const struct net_device *dev)
+{
+	if (dev->reg_state != NETREG_REGISTERED)
+		return "(unregistered net_device)";
+	return dev->name;
+}
+
+#endif
+
+#ifndef KERN_CONT
+#define KERN_CONT     "<c>"
+#endif
+
+#ifndef netdev_err
+#define netdev_err(dev, format, args...)			\
+	netdev_printk(KERN_ERR, dev, format, ##args)
+#endif
+
+#ifndef netdev_info
+#define netdev_info(dev, format, args...)			\
+	netdev_printk(KERN_INFO, dev, format, ##args)
+#endif
+
+#ifndef netdev_warn
+#define netdev_warn(dev, format, args...)			\
+	netdev_printk(KERN_WARNING, dev, format, ##args)
+#endif
+
+#ifndef pr_fmt
+#define pr_fmt(fmt) fmt
+#endif
+
+#ifndef pr_cont
+#define pr_cont(fmt, ...) \
+	printk(KERN_CONT fmt, ##__VA_ARGS__)
+#endif
+
+#ifndef pr_alert
+#define pr_alert(fmt, ...) \
+        printk(KERN_ALERT pr_fmt(fmt), ##__VA_ARGS__)
+#endif
+
+#ifndef pr_warning
+#define pr_warning(fmt, ...) \
+	printk(KERN_WARNING pr_fmt(fmt), ##__VA_ARGS__)
+#endif
+
+#ifndef pr_warn
+#define pr_warn pr_warning
+#endif
+
+#ifndef pr_err
+#define pr_err(fmt, ...) \
+        printk(KERN_ERR pr_fmt(fmt), ##__VA_ARGS__)
+#endif
+
+#ifndef pr_info
+#define pr_info(fmt, ...) \
+        printk(KERN_INFO pr_fmt(fmt), ##__VA_ARGS__)
+#endif
+
+#if !defined(DECLARE_MAC_BUF) || (LINUX_VERSION_CODE >= 0x020621)
+#ifndef MAC_FMT
+#define MAC_FMT "%02x:%02x:%02x:%02x:%02x:%02x"
+#endif
+
+static inline char *print_mac(char *buf, const u8 *addr)
+{
+	sprintf(buf, MAC_FMT,
+		addr[0], addr[1], addr[2], addr[3], addr[4], addr[5]);
+	return buf;
+}
+#endif
+
+#ifndef DECLARE_MAC_BUF
+#define DECLARE_MAC_BUF(var) char var[18]
+#endif
+
+
+#ifndef ARRAY_SIZE
+#define ARRAY_SIZE(arr) (sizeof(arr) / sizeof((arr)[0]))
+#endif
+
+#if (LINUX_VERSION_CODE >= 0x020618)
+#define BNX2_NEW_NAPI	1
+
+#if (LINUX_VERSION_CODE < 0x02061b)
+
+static inline void netif_napi_del(struct napi_struct *napi)
+{
+#ifdef CONFIG_NETPOLL
+	list_del(&napi->dev_list);
+#endif
+}
+
+#endif
+#endif
+
+#if (LINUX_VERSION_CODE < 0x020625)
+static inline int netif_set_real_num_rx_queues(struct net_device *dev,
+						unsigned int rxq)
+{
+	return 0;
+}
+#endif
+
+#ifdef BCM_HAVE_MULTI_QUEUE
+#ifndef HAVE_REAL_TX
+static inline void netif_set_real_num_tx_queues(struct net_device *dev,
+						unsigned int txq)
+{
+	dev->real_num_tx_queues = txq;
+}
+#endif
+#endif
+
+static inline void bnx2_msleep(unsigned int msecs)
+{
+#if (LINUX_VERSION_CODE < 0x20607)
+	current->state = TASK_UNINTERRUPTIBLE;
+	schedule_timeout((msecs * HZ / 1000) + 1);
+#else
+	msleep(msecs);
+#endif
+}
+
+static inline unsigned long bnx2_msleep_interruptible(unsigned int msecs)
+{
+#if (LINUX_VERSION_CODE < 0x20609)
+	current->state = TASK_INTERRUPTIBLE;
+	return schedule_timeout((msecs * HZ / 1000) + 1);
+#else
+	return msleep_interruptible(msecs);
+#endif
+}
+
+#ifndef rcu_dereference_protected
+
+#define rcu_dereference_protected(p, c) \
+	rcu_dereference((p))
+
+#endif
+
+#ifndef __rcu
+#define __rcu
+#endif
+
+#ifndef RCU_INIT_POINTER
+#define RCU_INIT_POINTER(p, v) \
+		p = (typeof(*v) __force __rcu *)(v)
+#endif
+
+#if defined (__VMKLNX__)
+/**
+ * THIS FUNCTION SHOULD BE REMOVED ONCE PR 379263 IS RESOLVED
+ */
+static inline void *bcm_memmove(void *dest, const void *src, size_t count)
+{
+	char *tmp;
+	const char *s;
+
+	if (dest <= src) {
+		tmp = dest;
+		s = src;
+		while (count--)
+			*tmp++ = *s++;
+	} else {
+		tmp = dest;
+		tmp += count;
+		s = src;
+		s += count;
+		while (count--)
+			*--tmp = *--s;
+	}
+	return dest;
+}
+#else /* !defined (__VMKLNX__) */
+#define bcm_memmove	memmove
+#endif /* defined (__VMKLNX__) */
+
+#if defined(__VMKLNX__) && defined(__VMKNETDDI_QUEUEOPS__)
+
+#define QID_TO_PM_OFFSET	4
+
+/* u32 fw_doorbell_ready */
+#define KWQ_READY  (1<<0)
+#define KWQ1_READY (1<<1)
+#define KWQ2_READY (1<<2)
+#define KWQ3_READY (1<<3)
+
+#define KCQ_READY  (1<<0)
+#define KCQ1_READY (1<<1)
+#define KCQ2_READY (1<<2)
+#define KCQ3_READY (1<<3)
+
+typedef u16 l2_kcqe_errors_t;
+	#define L2_KCQE_ERRORS_BAD_CRC                      (1<<1)
+	#define L2_KCQE_ERRORS_PHY_DECODE                   (1<<2)
+	#define L2_KCQE_ERRORS_ALIGNMENT                    (1<<3)
+	#define L2_KCQE_ERRORS_TOO_SHORT                    (1<<4)
+	#define L2_KCQE_ERRORS_GIANT_FRAME                  (1<<5)
+
+typedef u16 l2_kcqe_status_t;
+	#define L2_KCQE_STATUS_RULE_CLASS                   (0x7<<0)
+	#define L2_KCQE_STATUS_RULE_P2                      (1<<3)
+	#define L2_KCQE_STATUS_RULE_P3                      (1<<4)
+	#define L2_KCQE_STATUS_RULE_P4                      (1<<5)
+	#define L2_KCQE_STATUS_L2_VLAN_TAG                  (1<<6)
+	#define L2_KCQE_STATUS_L2_LLC_SNAP                  (1<<7)
+	#define L2_KCQE_STATUS_L2_HASH                      (0x1f<<8)
+	#define L2_KCQE_STATUS_IP_DATAGRAM                  (1<<13)
+	#define L2_KCQE_STATUS_TCP_SEGMENT                  (1<<14)
+	#define L2_KCQE_STATUS_UDP_DATAGRAM                 (1<<15)
+
+typedef u8 l2_kcqe_opcode_t;
+	#define L2_KCQE_OPCODE_VALUE                        (0xff<<0)
+	#define L2_KCQE_OPCODE_VALUE_RX_PACKET              (0<<0)
+	#define L2_KCQE_OPCODE_VALUE_ENABLE_RSS             (1<<0)
+	#define L2_KCQE_OPCODE_VALUE_DISABLE_RSS            (2<<0)
+	#define L2_KCQE_OPCODE_VALUE_UPDATE_RSS             (3<<0)
+	#define L2_KCQE_OPCODE_VALUE_FLUSH_BD_CHAIN         (4<<0)
+	#define L2_KCQE_OPCODE_VALUE_DEBUG                  (5<<0)
+	#define L2_KCQE_OPCODE_VALUE_VM_ALLOC_TX_QUEUE      (6<<0)
+	#define L2_KCQE_OPCODE_VALUE_VM_FREE_TX_QUEUE       (7<<0)
+	#define L2_KCQE_OPCODE_VALUE_VM_ALLOC_RX_QUEUE      (8<<0)
+	#define L2_KCQE_OPCODE_VALUE_VM_FREE_RX_QUEUE       (9<<0)
+	#define L2_KCQE_OPCODE_VALUE_VM_SET_RX_FILTER       (10<<0)
+	#define L2_KCQE_OPCODE_VALUE_VM_REMOVE_RX_FILTER    (11<<0)
+
+typedef u8 l2_kcqe_flags_t;
+	#define L2_KCQE_FLAGS_LAYER_MASK                    (0x7<<4)
+	#define L2_KCQE_FLAGS_LAYER_MASK_MISC               (0<<4)
+	#define L2_KCQE_FLAGS_LAYER_MASK_L2                 (2<<4)
+	#define L2_KCQE_FLAGS_LAYER_MASK_L3                 (3<<4)
+	#define L2_KCQE_FLAGS_LAYER_MASK_L4                 (4<<4)
+	#define L2_KCQE_FLAGS_LAYER_MASK_L5                 (5<<4)
+	#define L2_KCQE_FLAGS_NEXT                          (1<<7)
+
+/*
+ *  l2_kcqe_l definition
+ */
+#if defined(__BIG_ENDIAN)
+struct l2_kcqe {
+    u8			qid;
+    u8			status;
+    u16			reserved;
+    u32			reserved1[6];
+
+    l2_kcqe_flags_t	flags;
+    l2_kcqe_opcode_t	opcode;
+    u16			qe_self_seq;
+};
+#elif defined(__LITTLE_ENDIAN)
+struct l2_kcqe {
+    u8			qid;
+    u8			status;
+    u16			reserved;
+    u32			reserved1[6];
+
+    u16			qe_self_seq;
+    l2_kcqe_opcode_t	opcode;
+    l2_kcqe_flags_t	flags;
+};
+#endif
+
+/*
+ *  l2_kcqe_vm_alloc_tx_queue definition
+ */
+#if defined(BIG_ENDIAN)
+struct l2_kcqe_vm_alloc_tx_queue {
+	u16			reserved;
+	u8			reserved1;
+	u8			qid;
+	u32			status;
+	u32			reserved2[5];
+
+	u16			qe_self_seq;
+	l2_kcqe_opcode_t	opcode;
+	l2_kcqe_flags_t		flags;
+};
+#elif defined(LITTLE_ENDIAN)
+struct l2_kcqe_vm_alloc_tx_queue {
+	u8			qid;
+	u8			reserved1;
+	u16			reserved;
+	u32			status;
+	u32			reserved2[5];
+
+	l2_kcqe_flags_t		flags;
+	l2_kcqe_opcode_t	opcode;
+	u16			qe_self_seq;
+};
+#endif
+
+/*
+ *  l2_kcqe_vm_free_tx_queue definition
+ */
+#if defined(BIG_ENDIAN)
+struct l2_kcqe_vm_free_tx_queue {
+	u8			qid;
+	u8			reserved;
+	u16			nx_bidx;
+	u32			status;
+	u32			reserved1[5];
+
+	l2_kcqe_flags_t		flags;
+	l2_kcqe_opcode_t	opcode;
+	u16			qe_self_seq;
+};
+#elif defined(LITTLE_ENDIAN)
+struct l2_kcqe_vm_free_tx_queue {
+	u16			nx_bidx;
+	u8			reserved;
+	u8			qid;
+	u32			status;
+	u32			reserved1[5];
+
+	u16			qe_self_seq;
+	l2_kcqe_opcode_t	opcode;
+	l2_kcqe_flags_t		flags;
+};
+#endif
+
+/*
+ *  l2_kcqe_vm_alloc_rx_queue definition
+ */
+#if defined(BIG_ENDIAN)
+struct l2_kcqe_vm_alloc_rx_queue_b {
+	u16			reserved;
+	u8			reserved1;
+	u8			qid;
+	u8			status;
+	u32			reserved2[5];
+
+	u16			qe_self_seq;
+	l2_kcqe_opcode_t	opcode;
+	l2_kcqe_flags_t		flags;
+};
+#elif defined(LITTLE_ENDIAN)
+struct l2_kcqe_vm_alloc_rx_queue_l {
+	u8			qid;
+	u8			reserved1;
+	u16			reserved;
+	u32			reserved2[5];
+
+	l2_kcqe_flags_t		flags;
+	l2_kcqe_opcode_t	opcode;
+	u16			qe_self_seq;
+};
+#endif
+
+/*
+ *  l2_kcqe_vm_free_rx_queue definition
+ */
+#if defined(BIG_ENDIAN)
+struct l2_kcqe_vm_free_rx_queue {
+	u8			qid;
+	u8			reserved;
+	u16			nx_bidx;
+	u32			status;
+	u32			reserved1[5];
+
+	l2_kcqe_flags_t		flags;
+	l2_kcqe_opcode_t	opcode;
+	u16			qe_self_seq;
+};
+#elif defined(LITTLE_ENDIAN)
+struct l2_kcqe_vm_free_rx_queue {
+	u16			nx_bidx;
+	u8			reserved;
+	u8			qid;
+	u32			status;
+	u32			reserved1[5];
+
+	u16			qe_self_seq;
+	l2_kcqe_opcode_t	opcode;
+	l2_kcqe_flags_t		flags;
+};
+#endif
+
+/*
+ *  l2_kcqe_vm_set_rx_filter definition
+ */
+#if defined(BIG_ENDIAN)
+struct l2_kcqe_vm_set_rx_filter {
+    u8			qid;
+    u8			reserved;
+    u16			reserved1;
+    u32			status;
+    u32			reserved2[5];
+
+    l2_kcqe_flags_t	flags;
+    l2_kcqe_opcode_t	opcode;
+    u16			qe_self_seq;
+};
+#elif defined(LITTLE_ENDIAN)
+struct l2_kcqe_vm_set_rx_filter {
+    u16			reserved1;
+    u8			reserved;;
+    u8			qid;
+    u32			status;
+    u32			reserved2[5];
+
+    u16			qe_self_seq;
+    l2_kcqe_opcode_t	opcode;
+    l2_kcqe_flags_t	flags;
+};
+#endif
+
+/*
+ *  l2_kcqe_vm_remove_rx_filter definition
+ */
+#if defined(BIG_ENDIAN)
+struct l2_kcqe_vm_remove_rx_filter {
+	u8			qid;
+	u8			reserved;
+	u16			reserved1;
+	u32			status;
+	u32			reserved2[5];
+
+	l2_kcqe_flags_t		flags;
+	l2_kcqe_opcode_t	opcode;
+	u16			qe_self_seq;
+};
+#elif defined(LITTLE_ENDIAN)
+struct l2_kcqe_vm_remove_rx_filter {
+	u16			reserved1;
+	u8			reserved;
+	u8			qid;
+	u32			status
+	u32			reserved2[5];
+
+	u16			qe_self_seq;
+	l2_kcqe_opcode_t	opcode;
+	l2_kcqe_flags_t		flags;
+};
+#endif
+
+/*
+ *  kwqe definition
+ */
+#if defined(__BIG_ENDIAN)
+struct l2_kwqe {
+	u8 kwqe_flags;
+	u8 kwqe_opcode;
+	u16 kwqe_info;
+	u32 kwqe_info0;
+	u32 kwqe_info1;
+	u32 kwqe_info2;
+	u32 kwqe_info3;
+	u32 kwqe_info4;
+	u32 kwqe_info5;
+	u32 kwqe_info6;
+};
+#elif defined(__LITTLE_ENDIAN)
+struct l2_kwqe {
+	u16 kwqe_info;
+	u8 kwqe_opcode;
+	u8 kwqe_flags;
+	u32 kwqe_info0;
+	u32 kwqe_info1;
+	u32 kwqe_info2;
+	u32 kwqe_info3;
+	u32 kwqe_info4;
+	u32 kwqe_info5;
+	u32 kwqe_info6;
+};
+#endif
+
+typedef u8 l2_kwqe_flags_t;
+	#define L2_KWQE_FLAGS_LAYER_MASK                    (0x7<<4)
+	#define L2_KWQE_FLAGS_LAYER_MASK_MISC               (0<<4)
+	#define L2_KWQE_FLAGS_LAYER_MASK_L2                 (2<<4)
+	#define L2_KWQE_FLAGS_LAYER_MASK_L3                 (3<<4)
+	#define L2_KWQE_FLAGS_LAYER_MASK_L4                 (4<<4)
+	#define L2_KWQE_FLAGS_LAYER_MASK_L5                 (5<<4)
+	#define KWQE_FLAGS_GET_DEBUG_TRACE                  (7<<4)
+	#define L2_KWQE_FLAGS_NEXT                          (1<<7)
+
+typedef u8 l2_kwqe_opcode_t;
+	#define L2_KWQE_OPCODE_VALUE                        (0xff<<0)
+	#define L2_KWQE_OPCODE_VALUE_NOP                    (0<<0)
+	#define L2_KWQE_OPCODE_VALUE_ENABLE_RSS             (1<<0)
+	#define L2_KWQE_OPCODE_VALUE_DISABLE_RSS            (2<<0)
+	#define L2_KWQE_OPCODE_VALUE_UPDATE_RSS             (3<<0)
+	#define L2_KWQE_OPCODE_VALUE_FLUSH_BD_CHAIN         (4<<0)
+	#define L2_KWQE_OPCODE_VALUE_VM_ALLOC_TX_QUEUE      (5<<0)
+	#define L2_KWQE_OPCODE_VALUE_VM_FREE_TX_QUEUE       (6<<0)
+	#define L2_KWQE_OPCODE_VALUE_VM_ALLOC_RX_QUEUE      (7<<0)
+	#define L2_KWQE_OPCODE_VALUE_VM_FREE_RX_QUEUE       (8<<0)
+	#define L2_KWQE_OPCODE_VALUE_VM_SET_RX_FILTER       (9<<0)
+	#define L2_KWQE_OPCODE_VALUE_VM_REMOVE_RX_FILTER    (10<<0)
+
+typedef u8 l2_kwqe_vm_filter_t;
+	#define L2_VM_FILTER_UNDEFINED			0
+	#define L2_VM_FILTER_MAC			1
+	#define L2_VM_FILTER_MAC_VLAN			2
+	#define L2_VM_FILTER_VLAN			3
+
+typedef u8 l2_kwqe_queue_t;
+	#define L2_NORMAL_QUEUE				0
+	#define L2_NET_QUEUE				1
+	#define L2_VM_QUEUE				2
+	#define L2_VM_DROP_QUEUE			3
+
+#define BNX2_START_FILTER_ID	0x04
+
+/*
+ *  l2_kwqe_vm_alloc_tx_queue definition
+ */
+#if defined(__BIG_ENDIAN)
+struct l2_kwqe_vm_alloc_tx_queue {
+	l2_kwqe_flags_t		flags;
+	l2_kwqe_opcode_t	opcode;
+	u8			queue_type;
+	u8			qid;
+	u32			reserved1[6];
+};
+#elif defined(__LITTLE_ENDIAN)
+struct l2_kwqe_vm_alloc_tx_queue {
+	u8			qid;
+	u8			queue_type;
+	l2_kwqe_opcode_t	opcode;
+	l2_kwqe_flags_t		flags;
+	u32			reserved1[6];
+};
+#endif
+
+/*
+ *  l2_kwqe_vm_free_tx_queue definition
+ */
+#if defined(__BIG_ENDIAN)
+struct l2_kwqe_vm_free_tx_queue {
+	l2_kwqe_flags_t		flags;
+	l2_kwqe_opcode_t	opcode;
+	u8			qid;
+	u8			reserved;
+	u32			reserved1[6];
+};
+#elif defined(__LITTLE_ENDIAN)
+struct l2_kwqe_vm_free_tx_queue {
+	u8			reserved;
+	u8			qid;
+	l2_kwqe_opcode_t	opcode;
+	l2_kwqe_flags_t		flags;
+	u32			reserved1[6];
+};
+#endif
+
+/*
+ *  l2_kwqe_vm_alloc_rx_queue definition
+ */
+#if defined(__BIG_ENDIAN)
+struct l2_kwqe_vm_alloc_rx_queue {
+	l2_kwqe_flags_t		flags;
+	l2_kwqe_opcode_t	opcode;
+	u8			queue_type;
+	u8			qid;
+	u32			reserved1[6];
+};
+#elif defined(__LITTLE_ENDIAN)
+struct l2_kwqe_vm_alloc_rx_queue {
+	u8			qid;
+	u8			queue_type;
+	l2_kwqe_opcode_t	kwqe_opcode;
+	l2_kwqe_flags_t		kwqe_flags;
+	u32			reserved1[6];
+};
+#endif
+
+/*
+ *  l2_kwqe_vm_free_rx_queue definition
+ */
+#if defined(__BIG_ENDIAN)
+struct l2_kwqe_vm_free_rx_queue {
+	l2_kwqe_flags_t		flags;
+	l2_kwqe_opcode_t	opcode;
+	u8			qid;
+	u8			queue_type;
+	u32			reserved1[7];
+};
+#elif defined(__LITTLE_ENDIAN)
+struct l2_kwqe_vm_free_rx_queue {
+	u8			queue_type;
+	u8			qid;
+	l2_kwqe_opcode_t	opcode;
+	l2_kwqe_flags_t		flags;
+	u32			reserved1[7];
+};
+#endif
+
+/*
+ *  l2_kwqe_vm_set_rx_filter definition
+ */
+#if defined(__BIG_ENDIAN)
+struct l2_kwqe_vm_set_rx_filter {
+	l2_kwqe_flags_t		flags;
+	l2_kwqe_opcode_t	opcode;
+	u8			qid;
+	l2_kwqe_vm_filter_t	filter_type;
+	u16			vlan;
+	u8			mac_addr[6];
+	u8			filter_id; /* hw filter idx */
+	u8			reserved;
+	u16			reserved1;
+	u32			reserved2[4];
+} l2_kwqe_vm_set_rx_filter_b_t;
+#elif defined(__LITTLE_ENDIAN)
+struct l2_kwqe_vm_set_rx_filter {
+	l2_kwqe_vm_filter_t	filter_type;
+	u8			qid;
+	l2_kwqe_opcode_t	opcode;
+	l2_kwqe_flags_t		flags;
+
+	u16			mac_addr_hi;
+	u16			vlan;
+	u32			mac_addr_lo;
+	u16			reserved1;
+	u8			reserved;
+	u8			filter_id; /* hw filter idx */
+	u32			reserved2[4];
+};
+#endif
+
+/*
+ * l2_kwqe_vm_remove_rx_filter
+ */
+#if defined(BIG_ENDIAN)
+struct l2_kwqe_vm_remove_rx_filter {
+	l2_kwqe_flags_t		flags;
+	l2_kwqe_opcode_t	opcode;
+	u8			qid;
+	l2_kwqe_vm_filter_t	filter_type;
+	u8			filter_id; /* hw filter idx */
+	u8			reserved;
+	u16			reserved1;
+	u32			reserved2[6];
+};
+#elif defined(__LITTLE_ENDIAN)
+struct l2_kwqe_vm_remove_rx_filter {
+	l2_kwqe_vm_filter_t	filter_type;
+	u8			qid;
+	l2_kwqe_opcode_t	opcode;
+	l2_kwqe_flags_t		flags;
+	u16			reserved1;
+	u8			reserved;
+	u8			filter_id; /* hw filter idx */
+	u32			reserved2[6];
+};
+#endif
+#endif
+
+/* Hardware data structures and register definitions automatically
+ * generated from RTL code. Do not modify.
+ */
+
+/*
+ *  tx_bd definition
+ */
+struct tx_bd {
+	u32 tx_bd_haddr_hi;
+	u32 tx_bd_haddr_lo;
+	u32 tx_bd_mss_nbytes;
+		#define TX_BD_TCP6_OFF2_SHL		(14)
+	u32 tx_bd_vlan_tag_flags;
+		#define TX_BD_FLAGS_CONN_FAULT		(1<<0)
+		#define TX_BD_FLAGS_TCP6_OFF0_MSK	(3<<1)
+		#define TX_BD_FLAGS_TCP6_OFF0_SHL	(1)
+		#define TX_BD_FLAGS_TCP_UDP_CKSUM	(1<<1)
+		#define TX_BD_FLAGS_IP_CKSUM		(1<<2)
+		#define TX_BD_FLAGS_VLAN_TAG		(1<<3)
+		#define TX_BD_FLAGS_COAL_NOW		(1<<4)
+		#define TX_BD_FLAGS_DONT_GEN_CRC	(1<<5)
+		#define TX_BD_FLAGS_END			(1<<6)
+		#define TX_BD_FLAGS_START		(1<<7)
+		#define TX_BD_FLAGS_SW_OPTION_WORD	(0x1f<<8)
+		#define TX_BD_FLAGS_TCP6_OFF4_SHL	(12)
+		#define TX_BD_FLAGS_SW_FLAGS		(1<<13)
+		#define TX_BD_FLAGS_SW_SNAP		(1<<14)
+		#define TX_BD_FLAGS_SW_LSO		(1<<15)
+
+};
+
+
+/*
+ *  rx_bd definition
+ */
+struct rx_bd {
+	u32 rx_bd_haddr_hi;
+	u32 rx_bd_haddr_lo;
+	u32 rx_bd_len;
+	u32 rx_bd_flags;
+		#define RX_BD_FLAGS_NOPUSH		(1<<0)
+		#define RX_BD_FLAGS_DUMMY		(1<<1)
+		#define RX_BD_FLAGS_END			(1<<2)
+		#define RX_BD_FLAGS_START		(1<<3)
+
+};
+
+#define BNX2_RX_ALIGN			16
+
+/*
+ *  status_block definition
+ */
+struct status_block {
+	volatile u32 status_attn_bits;
+		#define STATUS_ATTN_BITS_LINK_STATE		(1L<<0)
+		#define STATUS_ATTN_BITS_TX_SCHEDULER_ABORT	(1L<<1)
+		#define STATUS_ATTN_BITS_TX_BD_READ_ABORT	(1L<<2)
+		#define STATUS_ATTN_BITS_TX_BD_CACHE_ABORT	(1L<<3)
+		#define STATUS_ATTN_BITS_TX_PROCESSOR_ABORT	(1L<<4)
+		#define STATUS_ATTN_BITS_TX_DMA_ABORT		(1L<<5)
+		#define STATUS_ATTN_BITS_TX_PATCHUP_ABORT	(1L<<6)
+		#define STATUS_ATTN_BITS_TX_ASSEMBLER_ABORT	(1L<<7)
+		#define STATUS_ATTN_BITS_RX_PARSER_MAC_ABORT	(1L<<8)
+		#define STATUS_ATTN_BITS_RX_PARSER_CATCHUP_ABORT	(1L<<9)
+		#define STATUS_ATTN_BITS_RX_MBUF_ABORT		(1L<<10)
+		#define STATUS_ATTN_BITS_RX_LOOKUP_ABORT	(1L<<11)
+		#define STATUS_ATTN_BITS_RX_PROCESSOR_ABORT	(1L<<12)
+		#define STATUS_ATTN_BITS_RX_V2P_ABORT		(1L<<13)
+		#define STATUS_ATTN_BITS_RX_BD_CACHE_ABORT	(1L<<14)
+		#define STATUS_ATTN_BITS_RX_DMA_ABORT		(1L<<15)
+		#define STATUS_ATTN_BITS_COMPLETION_ABORT	(1L<<16)
+		#define STATUS_ATTN_BITS_HOST_COALESCE_ABORT	(1L<<17)
+		#define STATUS_ATTN_BITS_MAILBOX_QUEUE_ABORT	(1L<<18)
+		#define STATUS_ATTN_BITS_CONTEXT_ABORT		(1L<<19)
+		#define STATUS_ATTN_BITS_CMD_SCHEDULER_ABORT	(1L<<20)
+		#define STATUS_ATTN_BITS_CMD_PROCESSOR_ABORT	(1L<<21)
+		#define STATUS_ATTN_BITS_MGMT_PROCESSOR_ABORT	(1L<<22)
+		#define STATUS_ATTN_BITS_MAC_ABORT		(1L<<23)
+		#define STATUS_ATTN_BITS_TIMER_ABORT		(1L<<24)
+		#define STATUS_ATTN_BITS_DMAE_ABORT		(1L<<25)
+		#define STATUS_ATTN_BITS_FLSH_ABORT		(1L<<26)
+		#define STATUS_ATTN_BITS_GRC_ABORT		(1L<<27)
+		#define STATUS_ATTN_BITS_EPB_ERROR		(1L<<30)
+		#define STATUS_ATTN_BITS_PARITY_ERROR		(1L<<31)
+
+	volatile u32 status_attn_bits_ack;
+#if defined(__BIG_ENDIAN)
+	volatile u16 status_tx_quick_consumer_index0;
+	volatile u16 status_tx_quick_consumer_index1;
+	volatile u16 status_tx_quick_consumer_index2;
+	volatile u16 status_tx_quick_consumer_index3;
+	volatile u16 status_rx_quick_consumer_index0;
+	volatile u16 status_rx_quick_consumer_index1;
+	volatile u16 status_rx_quick_consumer_index2;
+	volatile u16 status_rx_quick_consumer_index3;
+	volatile u16 status_rx_quick_consumer_index4;
+	volatile u16 status_rx_quick_consumer_index5;
+	volatile u16 status_rx_quick_consumer_index6;
+	volatile u16 status_rx_quick_consumer_index7;
+	volatile u16 status_rx_quick_consumer_index8;
+	volatile u16 status_rx_quick_consumer_index9;
+	volatile u16 status_rx_quick_consumer_index10;
+	volatile u16 status_rx_quick_consumer_index11;
+	volatile u16 status_rx_quick_consumer_index12;
+	volatile u16 status_rx_quick_consumer_index13;
+	volatile u16 status_rx_quick_consumer_index14;
+	volatile u16 status_rx_quick_consumer_index15;
+	volatile u16 status_completion_producer_index;
+	volatile u16 status_cmd_consumer_index;
+	volatile u16 status_idx;
+	volatile u8 status_unused;
+	volatile u8 status_blk_num;
+#elif defined(__LITTLE_ENDIAN)
+	volatile u16 status_tx_quick_consumer_index1;
+	volatile u16 status_tx_quick_consumer_index0;
+	volatile u16 status_tx_quick_consumer_index3;
+	volatile u16 status_tx_quick_consumer_index2;
+	volatile u16 status_rx_quick_consumer_index1;
+	volatile u16 status_rx_quick_consumer_index0;
+	volatile u16 status_rx_quick_consumer_index3;
+	volatile u16 status_rx_quick_consumer_index2;
+	volatile u16 status_rx_quick_consumer_index5;
+	volatile u16 status_rx_quick_consumer_index4;
+	volatile u16 status_rx_quick_consumer_index7;
+	volatile u16 status_rx_quick_consumer_index6;
+	volatile u16 status_rx_quick_consumer_index9;
+	volatile u16 status_rx_quick_consumer_index8;
+	volatile u16 status_rx_quick_consumer_index11;
+	volatile u16 status_rx_quick_consumer_index10;
+	volatile u16 status_rx_quick_consumer_index13;
+	volatile u16 status_rx_quick_consumer_index12;
+	volatile u16 status_rx_quick_consumer_index15;
+	volatile u16 status_rx_quick_consumer_index14;
+	volatile u16 status_cmd_consumer_index;
+	volatile u16 status_completion_producer_index;
+	volatile u8 status_blk_num;
+	volatile u8 status_unused;
+	volatile u16 status_idx;
+#endif
+};
+
+
+/*
+ *  status_block definition
+ */
+struct status_block_msix {
+#if defined(__BIG_ENDIAN)
+	volatile u16 status_tx_quick_consumer_index;
+	volatile u16 status_rx_quick_consumer_index;
+	volatile u16 status_completion_producer_index;
+	volatile u16 status_cmd_consumer_index;
+	volatile u32 status_unused;
+	volatile u16 status_idx;
+	volatile u8 status_unused2;
+	volatile u8 status_blk_num;
+#elif defined(__LITTLE_ENDIAN)
+	volatile u16 status_rx_quick_consumer_index;
+	volatile u16 status_tx_quick_consumer_index;
+	volatile u16 status_cmd_consumer_index;
+	volatile u16 status_completion_producer_index;
+	volatile u32 status_unused;
+	volatile u8 status_blk_num;
+	volatile u8 status_unused2;
+	volatile u16 status_idx;
+#endif
+};
+
+#define BNX2_SBLK_MSIX_ALIGN_SIZE	128
+
+
+/*
+ *  statistics_block definition
+ */
+struct statistics_block {
+	u32 stat_IfHCInOctets_hi;
+	u32 stat_IfHCInOctets_lo;
+	u32 stat_IfHCInBadOctets_hi;
+	u32 stat_IfHCInBadOctets_lo;
+	u32 stat_IfHCOutOctets_hi;
+	u32 stat_IfHCOutOctets_lo;
+	u32 stat_IfHCOutBadOctets_hi;
+	u32 stat_IfHCOutBadOctets_lo;
+	u32 stat_IfHCInUcastPkts_hi;
+	u32 stat_IfHCInUcastPkts_lo;
+	u32 stat_IfHCInMulticastPkts_hi;
+	u32 stat_IfHCInMulticastPkts_lo;
+	u32 stat_IfHCInBroadcastPkts_hi;
+	u32 stat_IfHCInBroadcastPkts_lo;
+	u32 stat_IfHCOutUcastPkts_hi;
+	u32 stat_IfHCOutUcastPkts_lo;
+	u32 stat_IfHCOutMulticastPkts_hi;
+	u32 stat_IfHCOutMulticastPkts_lo;
+	u32 stat_IfHCOutBroadcastPkts_hi;
+	u32 stat_IfHCOutBroadcastPkts_lo;
+	u32 stat_emac_tx_stat_dot3statsinternalmactransmiterrors;
+	u32 stat_Dot3StatsCarrierSenseErrors;
+	u32 stat_Dot3StatsFCSErrors;
+	u32 stat_Dot3StatsAlignmentErrors;
+	u32 stat_Dot3StatsSingleCollisionFrames;
+	u32 stat_Dot3StatsMultipleCollisionFrames;
+	u32 stat_Dot3StatsDeferredTransmissions;
+	u32 stat_Dot3StatsExcessiveCollisions;
+	u32 stat_Dot3StatsLateCollisions;
+	u32 stat_EtherStatsCollisions;
+	u32 stat_EtherStatsFragments;
+	u32 stat_EtherStatsJabbers;
+	u32 stat_EtherStatsUndersizePkts;
+	u32 stat_EtherStatsOverrsizePkts;
+	u32 stat_EtherStatsPktsRx64Octets;
+	u32 stat_EtherStatsPktsRx65Octetsto127Octets;
+	u32 stat_EtherStatsPktsRx128Octetsto255Octets;
+	u32 stat_EtherStatsPktsRx256Octetsto511Octets;
+	u32 stat_EtherStatsPktsRx512Octetsto1023Octets;
+	u32 stat_EtherStatsPktsRx1024Octetsto1522Octets;
+	u32 stat_EtherStatsPktsRx1523Octetsto9022Octets;
+	u32 stat_EtherStatsPktsTx64Octets;
+	u32 stat_EtherStatsPktsTx65Octetsto127Octets;
+	u32 stat_EtherStatsPktsTx128Octetsto255Octets;
+	u32 stat_EtherStatsPktsTx256Octetsto511Octets;
+	u32 stat_EtherStatsPktsTx512Octetsto1023Octets;
+	u32 stat_EtherStatsPktsTx1024Octetsto1522Octets;
+	u32 stat_EtherStatsPktsTx1523Octetsto9022Octets;
+	u32 stat_XonPauseFramesReceived;
+	u32 stat_XoffPauseFramesReceived;
+	u32 stat_OutXonSent;
+	u32 stat_OutXoffSent;
+	u32 stat_FlowControlDone;
+	u32 stat_MacControlFramesReceived;
+	u32 stat_XoffStateEntered;
+	u32 stat_IfInFramesL2FilterDiscards;
+	u32 stat_IfInRuleCheckerDiscards;
+	u32 stat_IfInFTQDiscards;
+	u32 stat_IfInMBUFDiscards;
+	u32 stat_IfInRuleCheckerP4Hit;
+	u32 stat_CatchupInRuleCheckerDiscards;
+	u32 stat_CatchupInFTQDiscards;
+	u32 stat_CatchupInMBUFDiscards;
+	u32 stat_CatchupInRuleCheckerP4Hit;
+	u32 stat_GenStat00;
+	u32 stat_GenStat01;
+	u32 stat_GenStat02;
+	u32 stat_GenStat03;
+	u32 stat_GenStat04;
+	u32 stat_GenStat05;
+	u32 stat_GenStat06;
+	u32 stat_GenStat07;
+	u32 stat_GenStat08;
+	u32 stat_GenStat09;
+	u32 stat_GenStat10;
+	u32 stat_GenStat11;
+	u32 stat_GenStat12;
+	u32 stat_GenStat13;
+	u32 stat_GenStat14;
+	u32 stat_GenStat15;
+	u32 stat_FwRxDrop;
+};
+
+
+/*
+ *  l2_fhdr definition
+ */
+struct l2_fhdr {
+	u32 l2_fhdr_status;
+		#define L2_FHDR_STATUS_RULE_CLASS	(0x7<<0)
+		#define L2_FHDR_STATUS_RULE_P2		(1<<3)
+		#define L2_FHDR_STATUS_RULE_P3		(1<<4)
+		#define L2_FHDR_STATUS_RULE_P4		(1<<5)
+		#define L2_FHDR_STATUS_L2_VLAN_TAG	(1<<6)
+		#define L2_FHDR_STATUS_L2_LLC_SNAP	(1<<7)
+		#define L2_FHDR_STATUS_RSS_HASH		(1<<8)
+		#define L2_FHDR_STATUS_IP_DATAGRAM	(1<<13)
+		#define L2_FHDR_STATUS_TCP_SEGMENT	(1<<14)
+		#define L2_FHDR_STATUS_UDP_DATAGRAM	(1<<15)
+
+		#define L2_FHDR_STATUS_SPLIT		(1<<16)
+		#define L2_FHDR_ERRORS_BAD_CRC		(1<<17)
+		#define L2_FHDR_ERRORS_PHY_DECODE	(1<<18)
+		#define L2_FHDR_ERRORS_ALIGNMENT	(1<<19)
+		#define L2_FHDR_ERRORS_TOO_SHORT	(1<<20)
+		#define L2_FHDR_ERRORS_GIANT_FRAME	(1<<21)
+		#define L2_FHDR_ERRORS_TCP_XSUM		(1<<28)
+		#define L2_FHDR_ERRORS_UDP_XSUM		(1<<31)
+
+		#define L2_FHDR_STATUS_USE_RXHASH	\
+			(L2_FHDR_STATUS_TCP_SEGMENT | L2_FHDR_STATUS_RSS_HASH)
+
+	u32 l2_fhdr_hash;
+#if defined(__BIG_ENDIAN)
+	u16 l2_fhdr_pkt_len;
+	u16 l2_fhdr_vlan_tag;
+	u16 l2_fhdr_ip_xsum;
+	u16 l2_fhdr_tcp_udp_xsum;
+#elif defined(__LITTLE_ENDIAN)
+	u16 l2_fhdr_vlan_tag;
+	u16 l2_fhdr_pkt_len;
+	u16 l2_fhdr_tcp_udp_xsum;
+	u16 l2_fhdr_ip_xsum;
+#endif
+};
+
+#define BNX2_RX_OFFSET		(sizeof(struct l2_fhdr) + 2)
+
+/*
+ *  l2_context definition
+ */
+#define BNX2_L2CTX_TYPE					0x00000000
+#define BNX2_L2CTX_TYPE_SIZE_L2				 ((0xc0/0x20)<<16)
+#define BNX2_L2CTX_TYPE_TYPE				 (0xf<<28)
+#define BNX2_L2CTX_TYPE_TYPE_EMPTY			 (0<<28)
+#define BNX2_L2CTX_TYPE_TYPE_L2				 (1<<28)
+
+#define BNX2_L2CTX_TX_HOST_BIDX				0x00000088
+#define BNX2_L2CTX_EST_NBD				0x00000088
+#define BNX2_L2CTX_CMD_TYPE				0x00000088
+#define BNX2_L2CTX_CMD_TYPE_TYPE			 (0xf<<24)
+#define BNX2_L2CTX_CMD_TYPE_TYPE_L2			 (0<<24)
+#define BNX2_L2CTX_CMD_TYPE_TYPE_TCP			 (1<<24)
+
+#define BNX2_L2CTX_TX_HOST_BSEQ				0x00000090
+#define BNX2_L2CTX_TSCH_BSEQ				0x00000094
+#define BNX2_L2CTX_TBDR_BSEQ				0x00000098
+#define BNX2_L2CTX_TBDR_BOFF				0x0000009c
+#define BNX2_L2CTX_TBDR_BIDX				0x0000009c
+#define BNX2_L2CTX_TBDR_BHADDR_HI			0x000000a0
+#define BNX2_L2CTX_TBDR_BHADDR_LO			0x000000a4
+#define BNX2_L2CTX_TXP_BOFF				0x000000a8
+#define BNX2_L2CTX_TXP_BIDX				0x000000a8
+#define BNX2_L2CTX_TXP_BSEQ				0x000000ac
+
+#define BNX2_L2CTX_TYPE_XI				0x00000080
+#define BNX2_L2CTX_CMD_TYPE_XI				0x00000240
+#define BNX2_L2CTX_TBDR_BHADDR_HI_XI			0x00000258
+#define BNX2_L2CTX_TBDR_BHADDR_LO_XI			0x0000025c
+
+/*
+ *  l2_bd_chain_context definition
+ */
+#define BNX2_L2CTX_BD_PRE_READ				0x00000000
+#define BNX2_L2CTX_CTX_SIZE				0x00000000
+#define BNX2_L2CTX_CTX_TYPE				0x00000000
+#define BNX2_L2CTX_FLOW_CTRL_ENABLE			 0x000000ff
+#define BNX2_L2CTX_CTX_TYPE_SIZE_L2			 ((0x20/20)<<16)
+#define BNX2_L2CTX_CTX_TYPE_CTX_BD_CHN_TYPE		 (0xf<<28)
+#define BNX2_L2CTX_CTX_TYPE_CTX_BD_CHN_TYPE_UNDEFINED	 (0<<28)
+#define BNX2_L2CTX_CTX_TYPE_CTX_BD_CHN_TYPE_VALUE	 (1<<28)
+
+#define BNX2_L2CTX_HOST_BDIDX				0x00000004
+#define BNX2_L2CTX_L5_STATUSB_NUM_SHIFT			 16
+#define BNX2_L2CTX_L2_STATUSB_NUM_SHIFT			 24
+#define BNX2_L2CTX_L5_STATUSB_NUM(sb_id)		\
+	(((sb_id) > 0) ? (((sb_id) + 7) << BNX2_L2CTX_L5_STATUSB_NUM_SHIFT) : 0)
+#define BNX2_L2CTX_L2_STATUSB_NUM(sb_id)		\
+	(((sb_id) > 0) ? (((sb_id) + 7) << BNX2_L2CTX_L2_STATUSB_NUM_SHIFT) : 0)
+#define BNX2_L2CTX_HOST_BSEQ				0x00000008
+#define BNX2_L2CTX_NX_BSEQ				0x0000000c
+#define BNX2_L2CTX_NX_BDHADDR_HI			0x00000010
+#define BNX2_L2CTX_NX_BDHADDR_LO			0x00000014
+#define BNX2_L2CTX_NX_BDIDX				0x00000018
+
+#define BNX2_L2CTX_HOST_PG_BDIDX			0x00000044
+#define BNX2_L2CTX_PG_BUF_SIZE				0x00000048
+#define BNX2_L2CTX_RBDC_KEY				0x0000004c
+#define BNX2_L2CTX_RBDC_JUMBO_KEY			 0x3ffe
+#define BNX2_L2CTX_NX_PG_BDHADDR_HI			0x00000050
+#define BNX2_L2CTX_NX_PG_BDHADDR_LO			0x00000054
+
+/*
+ *  pci_config_l definition
+ *  offset: 0000
+ */
+#define BNX2_PCICFG_MSI_CONTROL				0x00000058
+#define BNX2_PCICFG_MSI_CONTROL_ENABLE			 (1L<<16)
+
+#define BNX2_PCICFG_MISC_CONFIG				0x00000068
+#define BNX2_PCICFG_MISC_CONFIG_TARGET_BYTE_SWAP	 (1L<<2)
+#define BNX2_PCICFG_MISC_CONFIG_TARGET_MB_WORD_SWAP	 (1L<<3)
+#define BNX2_PCICFG_MISC_CONFIG_RESERVED1		 (1L<<4)
+#define BNX2_PCICFG_MISC_CONFIG_CLOCK_CTL_ENA		 (1L<<5)
+#define BNX2_PCICFG_MISC_CONFIG_TARGET_GRC_WORD_SWAP	 (1L<<6)
+#define BNX2_PCICFG_MISC_CONFIG_REG_WINDOW_ENA		 (1L<<7)
+#define BNX2_PCICFG_MISC_CONFIG_CORE_RST_REQ		 (1L<<8)
+#define BNX2_PCICFG_MISC_CONFIG_CORE_RST_BSY		 (1L<<9)
+#define BNX2_PCICFG_MISC_CONFIG_GRC_WIN1_SWAP_EN	 (1L<<10)
+#define BNX2_PCICFG_MISC_CONFIG_GRC_WIN2_SWAP_EN	 (1L<<11)
+#define BNX2_PCICFG_MISC_CONFIG_GRC_WIN3_SWAP_EN	 (1L<<12)
+#define BNX2_PCICFG_MISC_CONFIG_ASIC_METAL_REV		 (0xffL<<16)
+#define BNX2_PCICFG_MISC_CONFIG_ASIC_BASE_REV		 (0xfL<<24)
+#define BNX2_PCICFG_MISC_CONFIG_ASIC_ID			 (0xfL<<28)
+
+#define BNX2_PCICFG_MISC_STATUS				0x0000006c
+#define BNX2_PCICFG_MISC_STATUS_INTA_VALUE		 (1L<<0)
+#define BNX2_PCICFG_MISC_STATUS_32BIT_DET		 (1L<<1)
+#define BNX2_PCICFG_MISC_STATUS_M66EN			 (1L<<2)
+#define BNX2_PCICFG_MISC_STATUS_PCIX_DET		 (1L<<3)
+#define BNX2_PCICFG_MISC_STATUS_PCIX_SPEED		 (0x3L<<4)
+#define BNX2_PCICFG_MISC_STATUS_PCIX_SPEED_66		 (0L<<4)
+#define BNX2_PCICFG_MISC_STATUS_PCIX_SPEED_100		 (1L<<4)
+#define BNX2_PCICFG_MISC_STATUS_PCIX_SPEED_133		 (2L<<4)
+#define BNX2_PCICFG_MISC_STATUS_PCIX_SPEED_PCI_MODE	 (3L<<4)
+#define BNX2_PCICFG_MISC_STATUS_BAD_MEM_WRITE_BE	 (1L<<8)
+
+#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS		0x00000070
+#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET	 (0xfL<<0)
+#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_32MHZ	 (0L<<0)
+#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_38MHZ	 (1L<<0)
+#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_48MHZ	 (2L<<0)
+#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_55MHZ	 (3L<<0)
+#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_66MHZ	 (4L<<0)
+#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_80MHZ	 (5L<<0)
+#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_95MHZ	 (6L<<0)
+#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_133MHZ	 (7L<<0)
+#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_LOW	 (0xfL<<0)
+#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_CORE_CLK_DISABLE	 (1L<<6)
+#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_CORE_CLK_ALT	 (1L<<7)
+#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_CORE_CLK_ALT_SRC	 (0x7L<<8)
+#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_CORE_CLK_ALT_SRC_UNDEF	 (0L<<8)
+#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_CORE_CLK_ALT_SRC_12	 (1L<<8)
+#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_CORE_CLK_ALT_SRC_6	 (2L<<8)
+#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_CORE_CLK_ALT_SRC_62	 (4L<<8)
+#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_MIN_POWER	 (1L<<11)
+#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_CORE_CLK_PLL_SPEED	 (0xfL<<12)
+#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_CORE_CLK_PLL_SPEED_100	 (0L<<12)
+#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_CORE_CLK_PLL_SPEED_80	 (1L<<12)
+#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_CORE_CLK_PLL_SPEED_50	 (2L<<12)
+#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_CORE_CLK_PLL_SPEED_40	 (4L<<12)
+#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_CORE_CLK_PLL_SPEED_25	 (8L<<12)
+#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_CORE_CLK_PLL_STOP	 (1L<<16)
+#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_RESERVED_17	 (1L<<17)
+#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_RESERVED_18	 (1L<<18)
+#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_RESERVED_19	 (1L<<19)
+#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_RESERVED	 (0xfffL<<20)
+
+#define BNX2_PCICFG_REG_WINDOW_ADDRESS			0x00000078
+#define BNX2_PCICFG_REG_WINDOW_ADDRESS_VAL		 (0xfffffL<<2)
+
+#define BNX2_PCICFG_REG_WINDOW				0x00000080
+#define BNX2_PCICFG_INT_ACK_CMD				0x00000084
+#define BNX2_PCICFG_INT_ACK_CMD_INDEX			 (0xffffL<<0)
+#define BNX2_PCICFG_INT_ACK_CMD_INDEX_VALID		 (1L<<16)
+#define BNX2_PCICFG_INT_ACK_CMD_USE_INT_HC_PARAM	 (1L<<17)
+#define BNX2_PCICFG_INT_ACK_CMD_MASK_INT		 (1L<<18)
+#define BNX2_PCICFG_INT_ACK_CMD_INTERRUPT_NUM		 (0xfL<<24)
+#define BNX2_PCICFG_INT_ACK_CMD_INT_NUM_SHIFT		 24
+
+#define BNX2_PCICFG_STATUS_BIT_SET_CMD			0x00000088
+#define BNX2_PCICFG_STATUS_BIT_CLEAR_CMD		0x0000008c
+#define BNX2_PCICFG_MAILBOX_QUEUE_ADDR			0x00000090
+#define BNX2_PCICFG_MAILBOX_QUEUE_DATA			0x00000094
+
+#define BNX2_PCICFG_DEVICE_CONTROL			0x000000b4
+#define BNX2_PCICFG_DEVICE_STATUS_NO_PEND		 ((1L<<5)<<16)
+
+/*
+ *  pci_reg definition
+ *  offset: 0x400
+ */
+#define BNX2_PCI_GRC_WINDOW_ADDR			0x00000400
+#define BNX2_PCI_GRC_WINDOW_ADDR_VALUE			 (0x1ffL<<13)
+#define BNX2_PCI_GRC_WINDOW_ADDR_SEP_WIN		 (1L<<31)
+
+#define BNX2_PCI_GRC_WINDOW2_BASE		 	 0xc000
+#define BNX2_PCI_GRC_WINDOW3_BASE		 	 0xe000
+
+#define BNX2_PCI_CONFIG_1				0x00000404
+#define BNX2_PCI_CONFIG_1_RESERVED0			 (0xffL<<0)
+#define BNX2_PCI_CONFIG_1_READ_BOUNDARY			 (0x7L<<8)
+#define BNX2_PCI_CONFIG_1_READ_BOUNDARY_OFF		 (0L<<8)
+#define BNX2_PCI_CONFIG_1_READ_BOUNDARY_16		 (1L<<8)
+#define BNX2_PCI_CONFIG_1_READ_BOUNDARY_32		 (2L<<8)
+#define BNX2_PCI_CONFIG_1_READ_BOUNDARY_64		 (3L<<8)
+#define BNX2_PCI_CONFIG_1_READ_BOUNDARY_128		 (4L<<8)
+#define BNX2_PCI_CONFIG_1_READ_BOUNDARY_256		 (5L<<8)
+#define BNX2_PCI_CONFIG_1_READ_BOUNDARY_512		 (6L<<8)
+#define BNX2_PCI_CONFIG_1_READ_BOUNDARY_1024		 (7L<<8)
+#define BNX2_PCI_CONFIG_1_WRITE_BOUNDARY		 (0x7L<<11)
+#define BNX2_PCI_CONFIG_1_WRITE_BOUNDARY_OFF		 (0L<<11)
+#define BNX2_PCI_CONFIG_1_WRITE_BOUNDARY_16		 (1L<<11)
+#define BNX2_PCI_CONFIG_1_WRITE_BOUNDARY_32		 (2L<<11)
+#define BNX2_PCI_CONFIG_1_WRITE_BOUNDARY_64		 (3L<<11)
+#define BNX2_PCI_CONFIG_1_WRITE_BOUNDARY_128		 (4L<<11)
+#define BNX2_PCI_CONFIG_1_WRITE_BOUNDARY_256		 (5L<<11)
+#define BNX2_PCI_CONFIG_1_WRITE_BOUNDARY_512		 (6L<<11)
+#define BNX2_PCI_CONFIG_1_WRITE_BOUNDARY_1024		 (7L<<11)
+#define BNX2_PCI_CONFIG_1_RESERVED1			 (0x3ffffL<<14)
+
+#define BNX2_PCI_CONFIG_2				0x00000408
+#define BNX2_PCI_CONFIG_2_BAR1_SIZE			 (0xfL<<0)
+#define BNX2_PCI_CONFIG_2_BAR1_SIZE_DISABLED		 (0L<<0)
+#define BNX2_PCI_CONFIG_2_BAR1_SIZE_64K			 (1L<<0)
+#define BNX2_PCI_CONFIG_2_BAR1_SIZE_128K		 (2L<<0)
+#define BNX2_PCI_CONFIG_2_BAR1_SIZE_256K		 (3L<<0)
+#define BNX2_PCI_CONFIG_2_BAR1_SIZE_512K		 (4L<<0)
+#define BNX2_PCI_CONFIG_2_BAR1_SIZE_1M			 (5L<<0)
+#define BNX2_PCI_CONFIG_2_BAR1_SIZE_2M			 (6L<<0)
+#define BNX2_PCI_CONFIG_2_BAR1_SIZE_4M			 (7L<<0)
+#define BNX2_PCI_CONFIG_2_BAR1_SIZE_8M			 (8L<<0)
+#define BNX2_PCI_CONFIG_2_BAR1_SIZE_16M			 (9L<<0)
+#define BNX2_PCI_CONFIG_2_BAR1_SIZE_32M			 (10L<<0)
+#define BNX2_PCI_CONFIG_2_BAR1_SIZE_64M			 (11L<<0)
+#define BNX2_PCI_CONFIG_2_BAR1_SIZE_128M		 (12L<<0)
+#define BNX2_PCI_CONFIG_2_BAR1_SIZE_256M		 (13L<<0)
+#define BNX2_PCI_CONFIG_2_BAR1_SIZE_512M		 (14L<<0)
+#define BNX2_PCI_CONFIG_2_BAR1_SIZE_1G			 (15L<<0)
+#define BNX2_PCI_CONFIG_2_BAR1_64ENA			 (1L<<4)
+#define BNX2_PCI_CONFIG_2_EXP_ROM_RETRY			 (1L<<5)
+#define BNX2_PCI_CONFIG_2_CFG_CYCLE_RETRY		 (1L<<6)
+#define BNX2_PCI_CONFIG_2_FIRST_CFG_DONE		 (1L<<7)
+#define BNX2_PCI_CONFIG_2_EXP_ROM_SIZE			 (0xffL<<8)
+#define BNX2_PCI_CONFIG_2_EXP_ROM_SIZE_DISABLED		 (0L<<8)
+#define BNX2_PCI_CONFIG_2_EXP_ROM_SIZE_1K		 (1L<<8)
+#define BNX2_PCI_CONFIG_2_EXP_ROM_SIZE_2K		 (2L<<8)
+#define BNX2_PCI_CONFIG_2_EXP_ROM_SIZE_4K		 (3L<<8)
+#define BNX2_PCI_CONFIG_2_EXP_ROM_SIZE_8K		 (4L<<8)
+#define BNX2_PCI_CONFIG_2_EXP_ROM_SIZE_16K		 (5L<<8)
+#define BNX2_PCI_CONFIG_2_EXP_ROM_SIZE_32K		 (6L<<8)
+#define BNX2_PCI_CONFIG_2_EXP_ROM_SIZE_64K		 (7L<<8)
+#define BNX2_PCI_CONFIG_2_EXP_ROM_SIZE_128K		 (8L<<8)
+#define BNX2_PCI_CONFIG_2_EXP_ROM_SIZE_256K		 (9L<<8)
+#define BNX2_PCI_CONFIG_2_EXP_ROM_SIZE_512K		 (10L<<8)
+#define BNX2_PCI_CONFIG_2_EXP_ROM_SIZE_1M		 (11L<<8)
+#define BNX2_PCI_CONFIG_2_EXP_ROM_SIZE_2M		 (12L<<8)
+#define BNX2_PCI_CONFIG_2_EXP_ROM_SIZE_4M		 (13L<<8)
+#define BNX2_PCI_CONFIG_2_EXP_ROM_SIZE_8M		 (14L<<8)
+#define BNX2_PCI_CONFIG_2_EXP_ROM_SIZE_16M		 (15L<<8)
+#define BNX2_PCI_CONFIG_2_MAX_SPLIT_LIMIT		 (0x1fL<<16)
+#define BNX2_PCI_CONFIG_2_MAX_READ_LIMIT		 (0x3L<<21)
+#define BNX2_PCI_CONFIG_2_MAX_READ_LIMIT_512		 (0L<<21)
+#define BNX2_PCI_CONFIG_2_MAX_READ_LIMIT_1K		 (1L<<21)
+#define BNX2_PCI_CONFIG_2_MAX_READ_LIMIT_2K		 (2L<<21)
+#define BNX2_PCI_CONFIG_2_MAX_READ_LIMIT_4K		 (3L<<21)
+#define BNX2_PCI_CONFIG_2_FORCE_32_BIT_MSTR		 (1L<<23)
+#define BNX2_PCI_CONFIG_2_FORCE_32_BIT_TGT		 (1L<<24)
+#define BNX2_PCI_CONFIG_2_KEEP_REQ_ASSERT		 (1L<<25)
+#define BNX2_PCI_CONFIG_2_RESERVED0			 (0x3fL<<26)
+#define BNX2_PCI_CONFIG_2_BAR_PREFETCH_XI		 (1L<<16)
+#define BNX2_PCI_CONFIG_2_RESERVED0_XI			 (0x7fffL<<17)
+
+#define BNX2_PCI_CONFIG_3				0x0000040c
+#define BNX2_PCI_CONFIG_3_STICKY_BYTE			 (0xffL<<0)
+#define BNX2_PCI_CONFIG_3_REG_STICKY_BYTE		 (0xffL<<8)
+#define BNX2_PCI_CONFIG_3_FORCE_PME			 (1L<<24)
+#define BNX2_PCI_CONFIG_3_PME_STATUS			 (1L<<25)
+#define BNX2_PCI_CONFIG_3_PME_ENABLE			 (1L<<26)
+#define BNX2_PCI_CONFIG_3_PM_STATE			 (0x3L<<27)
+#define BNX2_PCI_CONFIG_3_VAUX_PRESET			 (1L<<30)
+#define BNX2_PCI_CONFIG_3_PCI_POWER			 (1L<<31)
+
+#define BNX2_PCI_PM_DATA_A				0x00000410
+#define BNX2_PCI_PM_DATA_A_PM_DATA_0_PRG		 (0xffL<<0)
+#define BNX2_PCI_PM_DATA_A_PM_DATA_1_PRG		 (0xffL<<8)
+#define BNX2_PCI_PM_DATA_A_PM_DATA_2_PRG		 (0xffL<<16)
+#define BNX2_PCI_PM_DATA_A_PM_DATA_3_PRG		 (0xffL<<24)
+
+#define BNX2_PCI_PM_DATA_B				0x00000414
+#define BNX2_PCI_PM_DATA_B_PM_DATA_4_PRG		 (0xffL<<0)
+#define BNX2_PCI_PM_DATA_B_PM_DATA_5_PRG		 (0xffL<<8)
+#define BNX2_PCI_PM_DATA_B_PM_DATA_6_PRG		 (0xffL<<16)
+#define BNX2_PCI_PM_DATA_B_PM_DATA_7_PRG		 (0xffL<<24)
+
+#define BNX2_PCI_SWAP_DIAG0				0x00000418
+#define BNX2_PCI_SWAP_DIAG1				0x0000041c
+#define BNX2_PCI_EXP_ROM_ADDR				0x00000420
+#define BNX2_PCI_EXP_ROM_ADDR_ADDRESS			 (0x3fffffL<<2)
+#define BNX2_PCI_EXP_ROM_ADDR_REQ			 (1L<<31)
+
+#define BNX2_PCI_EXP_ROM_DATA				0x00000424
+#define BNX2_PCI_VPD_INTF				0x00000428
+#define BNX2_PCI_VPD_INTF_INTF_REQ			 (1L<<0)
+
+#define BNX2_PCI_VPD_ADDR_FLAG				0x0000042c
+#define BNX2_PCI_VPD_ADDR_FLAG_MSK			0x0000ffff
+#define BNX2_PCI_VPD_ADDR_FLAG_SL			0L
+#define BNX2_PCI_VPD_ADDR_FLAG_ADDRESS			 (0x1fffL<<2)
+#define BNX2_PCI_VPD_ADDR_FLAG_WR			 (1L<<15)
+
+#define BNX2_PCI_VPD_DATA				0x00000430
+#define BNX2_PCI_ID_VAL1				0x00000434
+#define BNX2_PCI_ID_VAL1_DEVICE_ID			 (0xffffL<<0)
+#define BNX2_PCI_ID_VAL1_VENDOR_ID			 (0xffffL<<16)
+
+#define BNX2_PCI_ID_VAL2				0x00000438
+#define BNX2_PCI_ID_VAL2_SUBSYSTEM_VENDOR_ID		 (0xffffL<<0)
+#define BNX2_PCI_ID_VAL2_SUBSYSTEM_ID			 (0xffffL<<16)
+
+#define BNX2_PCI_ID_VAL3				0x0000043c
+#define BNX2_PCI_ID_VAL3_CLASS_CODE			 (0xffffffL<<0)
+#define BNX2_PCI_ID_VAL3_REVISION_ID			 (0xffL<<24)
+
+#define BNX2_PCI_ID_VAL4				0x00000440
+#define BNX2_PCI_ID_VAL4_CAP_ENA			 (0xfL<<0)
+#define BNX2_PCI_ID_VAL4_CAP_ENA_0			 (0L<<0)
+#define BNX2_PCI_ID_VAL4_CAP_ENA_1			 (1L<<0)
+#define BNX2_PCI_ID_VAL4_CAP_ENA_2			 (2L<<0)
+#define BNX2_PCI_ID_VAL4_CAP_ENA_3			 (3L<<0)
+#define BNX2_PCI_ID_VAL4_CAP_ENA_4			 (4L<<0)
+#define BNX2_PCI_ID_VAL4_CAP_ENA_5			 (5L<<0)
+#define BNX2_PCI_ID_VAL4_CAP_ENA_6			 (6L<<0)
+#define BNX2_PCI_ID_VAL4_CAP_ENA_7			 (7L<<0)
+#define BNX2_PCI_ID_VAL4_CAP_ENA_8			 (8L<<0)
+#define BNX2_PCI_ID_VAL4_CAP_ENA_9			 (9L<<0)
+#define BNX2_PCI_ID_VAL4_CAP_ENA_10			 (10L<<0)
+#define BNX2_PCI_ID_VAL4_CAP_ENA_11			 (11L<<0)
+#define BNX2_PCI_ID_VAL4_CAP_ENA_12			 (12L<<0)
+#define BNX2_PCI_ID_VAL4_CAP_ENA_13			 (13L<<0)
+#define BNX2_PCI_ID_VAL4_CAP_ENA_14			 (14L<<0)
+#define BNX2_PCI_ID_VAL4_CAP_ENA_15			 (15L<<0)
+#define BNX2_PCI_ID_VAL4_RESERVED0			 (0x3L<<4)
+#define BNX2_PCI_ID_VAL4_PM_SCALE_PRG			 (0x3L<<6)
+#define BNX2_PCI_ID_VAL4_PM_SCALE_PRG_0			 (0L<<6)
+#define BNX2_PCI_ID_VAL4_PM_SCALE_PRG_1			 (1L<<6)
+#define BNX2_PCI_ID_VAL4_PM_SCALE_PRG_2			 (2L<<6)
+#define BNX2_PCI_ID_VAL4_PM_SCALE_PRG_3			 (3L<<6)
+#define BNX2_PCI_ID_VAL4_MSI_PV_MASK_CAP		 (1L<<8)
+#define BNX2_PCI_ID_VAL4_MSI_LIMIT			 (0x7L<<9)
+#define BNX2_PCI_ID_VAL4_MULTI_MSG_CAP			 (0x7L<<12)
+#define BNX2_PCI_ID_VAL4_MSI_ENABLE			 (1L<<15)
+#define BNX2_PCI_ID_VAL4_MAX_64_ADVERTIZE		 (1L<<16)
+#define BNX2_PCI_ID_VAL4_MAX_133_ADVERTIZE		 (1L<<17)
+#define BNX2_PCI_ID_VAL4_RESERVED2			 (0x7L<<18)
+#define BNX2_PCI_ID_VAL4_MAX_CUMULATIVE_SIZE_B21	 (0x3L<<21)
+#define BNX2_PCI_ID_VAL4_MAX_SPLIT_SIZE_B21		 (0x3L<<23)
+#define BNX2_PCI_ID_VAL4_MAX_CUMULATIVE_SIZE_B0		 (1L<<25)
+#define BNX2_PCI_ID_VAL4_MAX_MEM_READ_SIZE_B10		 (0x3L<<26)
+#define BNX2_PCI_ID_VAL4_MAX_SPLIT_SIZE_B0		 (1L<<28)
+#define BNX2_PCI_ID_VAL4_RESERVED3			 (0x7L<<29)
+#define BNX2_PCI_ID_VAL4_RESERVED3_XI			 (0xffffL<<16)
+
+#define BNX2_PCI_ID_VAL5				0x00000444
+#define BNX2_PCI_ID_VAL5_D1_SUPPORT			 (1L<<0)
+#define BNX2_PCI_ID_VAL5_D2_SUPPORT			 (1L<<1)
+#define BNX2_PCI_ID_VAL5_PME_IN_D0			 (1L<<2)
+#define BNX2_PCI_ID_VAL5_PME_IN_D1			 (1L<<3)
+#define BNX2_PCI_ID_VAL5_PME_IN_D2			 (1L<<4)
+#define BNX2_PCI_ID_VAL5_PME_IN_D3_HOT			 (1L<<5)
+#define BNX2_PCI_ID_VAL5_RESERVED0_TE			 (0x3ffffffL<<6)
+#define BNX2_PCI_ID_VAL5_PM_VERSION_XI			 (0x7L<<6)
+#define BNX2_PCI_ID_VAL5_NO_SOFT_RESET_XI		 (1L<<9)
+#define BNX2_PCI_ID_VAL5_RESERVED0_XI			 (0x3fffffL<<10)
+
+#define BNX2_PCI_PCIX_EXTENDED_STATUS			0x00000448
+#define BNX2_PCI_PCIX_EXTENDED_STATUS_NO_SNOOP		 (1L<<8)
+#define BNX2_PCI_PCIX_EXTENDED_STATUS_LONG_BURST	 (1L<<9)
+#define BNX2_PCI_PCIX_EXTENDED_STATUS_SPLIT_COMP_MSG_CLASS	 (0xfL<<16)
+#define BNX2_PCI_PCIX_EXTENDED_STATUS_SPLIT_COMP_MSG_IDX	 (0xffL<<24)
+
+#define BNX2_PCI_ID_VAL6				0x0000044c
+#define BNX2_PCI_ID_VAL6_MAX_LAT			 (0xffL<<0)
+#define BNX2_PCI_ID_VAL6_MIN_GNT			 (0xffL<<8)
+#define BNX2_PCI_ID_VAL6_BIST				 (0xffL<<16)
+#define BNX2_PCI_ID_VAL6_RESERVED0			 (0xffL<<24)
+
+#define BNX2_PCI_MSI_DATA				0x00000450
+#define BNX2_PCI_MSI_DATA_MSI_DATA			 (0xffffL<<0)
+
+#define BNX2_PCI_MSI_ADDR_H				0x00000454
+#define BNX2_PCI_MSI_ADDR_L				0x00000458
+#define BNX2_PCI_MSI_ADDR_L_VAL				 (0x3fffffffL<<2)
+
+#define BNX2_PCI_CFG_ACCESS_CMD				0x0000045c
+#define BNX2_PCI_CFG_ACCESS_CMD_ADR			 (0x3fL<<2)
+#define BNX2_PCI_CFG_ACCESS_CMD_RD_REQ			 (1L<<27)
+#define BNX2_PCI_CFG_ACCESS_CMD_WR_REQ			 (0xfL<<28)
+
+#define BNX2_PCI_CFG_ACCESS_DATA			0x00000460
+#define BNX2_PCI_MSI_MASK				0x00000464
+#define BNX2_PCI_MSI_MASK_MSI_MASK			 (0xffffffffL<<0)
+
+#define BNX2_PCI_MSI_PEND				0x00000468
+#define BNX2_PCI_MSI_PEND_MSI_PEND			 (0xffffffffL<<0)
+
+#define BNX2_PCI_PM_DATA_C				0x0000046c
+#define BNX2_PCI_PM_DATA_C_PM_DATA_8_PRG		 (0xffL<<0)
+#define BNX2_PCI_PM_DATA_C_RESERVED0			 (0xffffffL<<8)
+
+#define BNX2_PCI_MSIX_CONTROL				0x000004c0
+#define BNX2_PCI_MSIX_CONTROL_MSIX_TBL_SIZ		 (0x7ffL<<0)
+#define BNX2_PCI_MSIX_CONTROL_RESERVED0			 (0x1fffffL<<11)
+
+#define BNX2_PCI_MSIX_TBL_OFF_BIR			0x000004c4
+#define BNX2_PCI_MSIX_TBL_OFF_BIR_MSIX_TBL_BIR		 (0x7L<<0)
+#define BNX2_PCI_MSIX_TBL_OFF_BIR_MSIX_TBL_OFF		 (0x1fffffffL<<3)
+
+#define BNX2_PCI_MSIX_PBA_OFF_BIT			0x000004c8
+#define BNX2_PCI_MSIX_PBA_OFF_BIT_MSIX_PBA_BIR		 (0x7L<<0)
+#define BNX2_PCI_MSIX_PBA_OFF_BIT_MSIX_PBA_OFF		 (0x1fffffffL<<3)
+
+#define BNX2_PCI_PCIE_CAPABILITY			0x000004d0
+#define BNX2_PCI_PCIE_CAPABILITY_INTERRUPT_MSG_NUM	 (0x1fL<<0)
+#define BNX2_PCI_PCIE_CAPABILITY_COMPLY_PCIE_1_1	 (1L<<5)
+
+#define BNX2_PCI_DEVICE_CAPABILITY			0x000004d4
+#define BNX2_PCI_DEVICE_CAPABILITY_MAX_PL_SIZ_SUPPORTED	 (0x7L<<0)
+#define BNX2_PCI_DEVICE_CAPABILITY_EXTENDED_TAG_SUPPORT	 (1L<<5)
+#define BNX2_PCI_DEVICE_CAPABILITY_L0S_ACCEPTABLE_LATENCY	 (0x7L<<6)
+#define BNX2_PCI_DEVICE_CAPABILITY_L1_ACCEPTABLE_LATENCY	 (0x7L<<9)
+#define BNX2_PCI_DEVICE_CAPABILITY_ROLE_BASED_ERR_RPT	 (1L<<15)
+
+#define BNX2_PCI_LINK_CAPABILITY			0x000004dc
+#define BNX2_PCI_LINK_CAPABILITY_MAX_LINK_SPEED		 (0xfL<<0)
+#define BNX2_PCI_LINK_CAPABILITY_MAX_LINK_SPEED_0001	 (1L<<0)
+#define BNX2_PCI_LINK_CAPABILITY_MAX_LINK_SPEED_0010	 (1L<<0)
+#define BNX2_PCI_LINK_CAPABILITY_MAX_LINK_WIDTH		 (0x1fL<<4)
+#define BNX2_PCI_LINK_CAPABILITY_CLK_POWER_MGMT		 (1L<<9)
+#define BNX2_PCI_LINK_CAPABILITY_ASPM_SUPPORT		 (0x3L<<10)
+#define BNX2_PCI_LINK_CAPABILITY_L0S_EXIT_LAT		 (0x7L<<12)
+#define BNX2_PCI_LINK_CAPABILITY_L0S_EXIT_LAT_101	 (5L<<12)
+#define BNX2_PCI_LINK_CAPABILITY_L0S_EXIT_LAT_110	 (6L<<12)
+#define BNX2_PCI_LINK_CAPABILITY_L1_EXIT_LAT		 (0x7L<<15)
+#define BNX2_PCI_LINK_CAPABILITY_L1_EXIT_LAT_001	 (1L<<15)
+#define BNX2_PCI_LINK_CAPABILITY_L1_EXIT_LAT_010	 (2L<<15)
+#define BNX2_PCI_LINK_CAPABILITY_L0S_EXIT_COMM_LAT	 (0x7L<<18)
+#define BNX2_PCI_LINK_CAPABILITY_L0S_EXIT_COMM_LAT_101	 (5L<<18)
+#define BNX2_PCI_LINK_CAPABILITY_L0S_EXIT_COMM_LAT_110	 (6L<<18)
+#define BNX2_PCI_LINK_CAPABILITY_L1_EXIT_COMM_LAT	 (0x7L<<21)
+#define BNX2_PCI_LINK_CAPABILITY_L1_EXIT_COMM_LAT_001	 (1L<<21)
+#define BNX2_PCI_LINK_CAPABILITY_L1_EXIT_COMM_LAT_010	 (2L<<21)
+#define BNX2_PCI_LINK_CAPABILITY_PORT_NUM		 (0xffL<<24)
+
+#define BNX2_PCI_PCIE_DEVICE_CAPABILITY_2		0x000004e4
+#define BNX2_PCI_PCIE_DEVICE_CAPABILITY_2_CMPL_TO_RANGE_SUPP	 (0xfL<<0)
+#define BNX2_PCI_PCIE_DEVICE_CAPABILITY_2_CMPL_TO_DISABL_SUPP	 (1L<<4)
+#define BNX2_PCI_PCIE_DEVICE_CAPABILITY_2_RESERVED	 (0x7ffffffL<<5)
+
+#define BNX2_PCI_PCIE_LINK_CAPABILITY_2			0x000004e8
+#define BNX2_PCI_PCIE_LINK_CAPABILITY_2_RESERVED	 (0xffffffffL<<0)
+
+#define BNX2_PCI_GRC_WINDOW1_ADDR			0x00000610
+#define BNX2_PCI_GRC_WINDOW1_ADDR_VALUE			 (0x1ffL<<13)
+
+#define BNX2_PCI_GRC_WINDOW2_ADDR			0x00000614
+#define BNX2_PCI_GRC_WINDOW2_ADDR_VALUE			 (0x1ffL<<13)
+
+#define BNX2_PCI_GRC_WINDOW3_ADDR			0x00000618
+#define BNX2_PCI_GRC_WINDOW3_ADDR_VALUE			 (0x1ffL<<13)
+
+#define BNX2_MSIX_TABLE_ADDR				 0x318000
+#define BNX2_MSIX_PBA_ADDR				 0x31c000
+
+/*
+ *  misc_reg definition
+ *  offset: 0x800
+ */
+#define BNX2_MISC_COMMAND				0x00000800
+#define BNX2_MISC_COMMAND_ENABLE_ALL			 (1L<<0)
+#define BNX2_MISC_COMMAND_DISABLE_ALL			 (1L<<1)
+#define BNX2_MISC_COMMAND_SW_RESET			 (1L<<4)
+#define BNX2_MISC_COMMAND_POR_RESET			 (1L<<5)
+#define BNX2_MISC_COMMAND_HD_RESET			 (1L<<6)
+#define BNX2_MISC_COMMAND_CMN_SW_RESET			 (1L<<7)
+#define BNX2_MISC_COMMAND_PAR_ERROR			 (1L<<8)
+#define BNX2_MISC_COMMAND_CS16_ERR			 (1L<<9)
+#define BNX2_MISC_COMMAND_CS16_ERR_LOC			 (0xfL<<12)
+#define BNX2_MISC_COMMAND_PAR_ERR_RAM			 (0x7fL<<16)
+#define BNX2_MISC_COMMAND_POWERDOWN_EVENT		 (1L<<23)
+#define BNX2_MISC_COMMAND_SW_SHUTDOWN			 (1L<<24)
+#define BNX2_MISC_COMMAND_SHUTDOWN_EN			 (1L<<25)
+#define BNX2_MISC_COMMAND_DINTEG_ATTN_EN		 (1L<<26)
+#define BNX2_MISC_COMMAND_PCIE_LINK_IN_L23		 (1L<<27)
+#define BNX2_MISC_COMMAND_PCIE_DIS			 (1L<<28)
+
+#define BNX2_MISC_CFG					0x00000804
+#define BNX2_MISC_CFG_GRC_TMOUT				 (1L<<0)
+#define BNX2_MISC_CFG_NVM_WR_EN				 (0x3L<<1)
+#define BNX2_MISC_CFG_NVM_WR_EN_PROTECT			 (0L<<1)
+#define BNX2_MISC_CFG_NVM_WR_EN_PCI			 (1L<<1)
+#define BNX2_MISC_CFG_NVM_WR_EN_ALLOW			 (2L<<1)
+#define BNX2_MISC_CFG_NVM_WR_EN_ALLOW2			 (3L<<1)
+#define BNX2_MISC_CFG_BIST_EN				 (1L<<3)
+#define BNX2_MISC_CFG_CK25_OUT_ALT_SRC			 (1L<<4)
+#define BNX2_MISC_CFG_RESERVED5_TE			 (1L<<5)
+#define BNX2_MISC_CFG_RESERVED6_TE			 (1L<<6)
+#define BNX2_MISC_CFG_CLK_CTL_OVERRIDE			 (1L<<7)
+#define BNX2_MISC_CFG_LEDMODE				 (0x7L<<8)
+#define BNX2_MISC_CFG_LEDMODE_MAC			 (0L<<8)
+#define BNX2_MISC_CFG_LEDMODE_PHY1_TE			 (1L<<8)
+#define BNX2_MISC_CFG_LEDMODE_PHY2_TE			 (2L<<8)
+#define BNX2_MISC_CFG_LEDMODE_PHY3_TE			 (3L<<8)
+#define BNX2_MISC_CFG_LEDMODE_PHY4_TE			 (4L<<8)
+#define BNX2_MISC_CFG_LEDMODE_PHY5_TE			 (5L<<8)
+#define BNX2_MISC_CFG_LEDMODE_PHY6_TE			 (6L<<8)
+#define BNX2_MISC_CFG_LEDMODE_PHY7_TE			 (7L<<8)
+#define BNX2_MISC_CFG_MCP_GRC_TMOUT_TE			 (1L<<11)
+#define BNX2_MISC_CFG_DBU_GRC_TMOUT_TE			 (1L<<12)
+#define BNX2_MISC_CFG_LEDMODE_XI			 (0xfL<<8)
+#define BNX2_MISC_CFG_LEDMODE_MAC_XI			 (0L<<8)
+#define BNX2_MISC_CFG_LEDMODE_PHY1_XI			 (1L<<8)
+#define BNX2_MISC_CFG_LEDMODE_PHY2_XI			 (2L<<8)
+#define BNX2_MISC_CFG_LEDMODE_PHY3_XI			 (3L<<8)
+#define BNX2_MISC_CFG_LEDMODE_MAC2_XI			 (4L<<8)
+#define BNX2_MISC_CFG_LEDMODE_PHY4_XI			 (5L<<8)
+#define BNX2_MISC_CFG_LEDMODE_PHY5_XI			 (6L<<8)
+#define BNX2_MISC_CFG_LEDMODE_PHY6_XI			 (7L<<8)
+#define BNX2_MISC_CFG_LEDMODE_MAC3_XI			 (8L<<8)
+#define BNX2_MISC_CFG_LEDMODE_PHY7_XI			 (9L<<8)
+#define BNX2_MISC_CFG_LEDMODE_PHY8_XI			 (10L<<8)
+#define BNX2_MISC_CFG_LEDMODE_PHY9_XI			 (11L<<8)
+#define BNX2_MISC_CFG_LEDMODE_MAC4_XI			 (12L<<8)
+#define BNX2_MISC_CFG_LEDMODE_PHY10_XI			 (13L<<8)
+#define BNX2_MISC_CFG_LEDMODE_PHY11_XI			 (14L<<8)
+#define BNX2_MISC_CFG_LEDMODE_UNUSED_XI			 (15L<<8)
+#define BNX2_MISC_CFG_PORT_SELECT_XI			 (1L<<13)
+#define BNX2_MISC_CFG_PARITY_MODE_XI			 (1L<<14)
+
+#define BNX2_MISC_ID					0x00000808
+#define BNX2_MISC_ID_BOND_ID				 (0xfL<<0)
+#define BNX2_MISC_ID_BOND_ID_X				 (0L<<0)
+#define BNX2_MISC_ID_BOND_ID_C				 (3L<<0)
+#define BNX2_MISC_ID_BOND_ID_S				 (12L<<0)
+#define BNX2_MISC_ID_CHIP_METAL				 (0xffL<<4)
+#define BNX2_MISC_ID_CHIP_REV				 (0xfL<<12)
+#define BNX2_MISC_ID_CHIP_NUM				 (0xffffL<<16)
+
+#define BNX2_MISC_ENABLE_STATUS_BITS			0x0000080c
+#define BNX2_MISC_ENABLE_STATUS_BITS_TX_SCHEDULER_ENABLE	 (1L<<0)
+#define BNX2_MISC_ENABLE_STATUS_BITS_TX_BD_READ_ENABLE	 (1L<<1)
+#define BNX2_MISC_ENABLE_STATUS_BITS_TX_BD_CACHE_ENABLE	 (1L<<2)
+#define BNX2_MISC_ENABLE_STATUS_BITS_TX_PROCESSOR_ENABLE	 (1L<<3)
+#define BNX2_MISC_ENABLE_STATUS_BITS_TX_DMA_ENABLE	 (1L<<4)
+#define BNX2_MISC_ENABLE_STATUS_BITS_TX_PATCHUP_ENABLE	 (1L<<5)
+#define BNX2_MISC_ENABLE_STATUS_BITS_TX_PAYLOAD_Q_ENABLE	 (1L<<6)
+#define BNX2_MISC_ENABLE_STATUS_BITS_TX_HEADER_Q_ENABLE	 (1L<<7)
+#define BNX2_MISC_ENABLE_STATUS_BITS_TX_ASSEMBLER_ENABLE	 (1L<<8)
+#define BNX2_MISC_ENABLE_STATUS_BITS_EMAC_ENABLE	 (1L<<9)
+#define BNX2_MISC_ENABLE_STATUS_BITS_RX_PARSER_MAC_ENABLE	 (1L<<10)
+#define BNX2_MISC_ENABLE_STATUS_BITS_RX_PARSER_CATCHUP_ENABLE	 (1L<<11)
+#define BNX2_MISC_ENABLE_STATUS_BITS_RX_MBUF_ENABLE	 (1L<<12)
+#define BNX2_MISC_ENABLE_STATUS_BITS_RX_LOOKUP_ENABLE	 (1L<<13)
+#define BNX2_MISC_ENABLE_STATUS_BITS_RX_PROCESSOR_ENABLE	 (1L<<14)
+#define BNX2_MISC_ENABLE_STATUS_BITS_RX_V2P_ENABLE	 (1L<<15)
+#define BNX2_MISC_ENABLE_STATUS_BITS_RX_BD_CACHE_ENABLE	 (1L<<16)
+#define BNX2_MISC_ENABLE_STATUS_BITS_RX_DMA_ENABLE	 (1L<<17)
+#define BNX2_MISC_ENABLE_STATUS_BITS_COMPLETION_ENABLE	 (1L<<18)
+#define BNX2_MISC_ENABLE_STATUS_BITS_HOST_COALESCE_ENABLE	 (1L<<19)
+#define BNX2_MISC_ENABLE_STATUS_BITS_MAILBOX_QUEUE_ENABLE	 (1L<<20)
+#define BNX2_MISC_ENABLE_STATUS_BITS_CONTEXT_ENABLE	 (1L<<21)
+#define BNX2_MISC_ENABLE_STATUS_BITS_CMD_SCHEDULER_ENABLE	 (1L<<22)
+#define BNX2_MISC_ENABLE_STATUS_BITS_CMD_PROCESSOR_ENABLE	 (1L<<23)
+#define BNX2_MISC_ENABLE_STATUS_BITS_MGMT_PROCESSOR_ENABLE	 (1L<<24)
+#define BNX2_MISC_ENABLE_STATUS_BITS_TIMER_ENABLE	 (1L<<25)
+#define BNX2_MISC_ENABLE_STATUS_BITS_DMA_ENGINE_ENABLE	 (1L<<26)
+#define BNX2_MISC_ENABLE_STATUS_BITS_UMP_ENABLE		 (1L<<27)
+#define BNX2_MISC_ENABLE_STATUS_BITS_RV2P_CMD_SCHEDULER_ENABLE	 (1L<<28)
+#define BNX2_MISC_ENABLE_STATUS_BITS_RSVD_FUTURE_ENABLE	 (0x7L<<29)
+
+#define BNX2_MISC_ENABLE_SET_BITS			0x00000810
+#define BNX2_MISC_ENABLE_SET_BITS_TX_SCHEDULER_ENABLE	 (1L<<0)
+#define BNX2_MISC_ENABLE_SET_BITS_TX_BD_READ_ENABLE	 (1L<<1)
+#define BNX2_MISC_ENABLE_SET_BITS_TX_BD_CACHE_ENABLE	 (1L<<2)
+#define BNX2_MISC_ENABLE_SET_BITS_TX_PROCESSOR_ENABLE	 (1L<<3)
+#define BNX2_MISC_ENABLE_SET_BITS_TX_DMA_ENABLE		 (1L<<4)
+#define BNX2_MISC_ENABLE_SET_BITS_TX_PATCHUP_ENABLE	 (1L<<5)
+#define BNX2_MISC_ENABLE_SET_BITS_TX_PAYLOAD_Q_ENABLE	 (1L<<6)
+#define BNX2_MISC_ENABLE_SET_BITS_TX_HEADER_Q_ENABLE	 (1L<<7)
+#define BNX2_MISC_ENABLE_SET_BITS_TX_ASSEMBLER_ENABLE	 (1L<<8)
+#define BNX2_MISC_ENABLE_SET_BITS_EMAC_ENABLE		 (1L<<9)
+#define BNX2_MISC_ENABLE_SET_BITS_RX_PARSER_MAC_ENABLE	 (1L<<10)
+#define BNX2_MISC_ENABLE_SET_BITS_RX_PARSER_CATCHUP_ENABLE	 (1L<<11)
+#define BNX2_MISC_ENABLE_SET_BITS_RX_MBUF_ENABLE	 (1L<<12)
+#define BNX2_MISC_ENABLE_SET_BITS_RX_LOOKUP_ENABLE	 (1L<<13)
+#define BNX2_MISC_ENABLE_SET_BITS_RX_PROCESSOR_ENABLE	 (1L<<14)
+#define BNX2_MISC_ENABLE_SET_BITS_RX_V2P_ENABLE		 (1L<<15)
+#define BNX2_MISC_ENABLE_SET_BITS_RX_BD_CACHE_ENABLE	 (1L<<16)
+#define BNX2_MISC_ENABLE_SET_BITS_RX_DMA_ENABLE		 (1L<<17)
+#define BNX2_MISC_ENABLE_SET_BITS_COMPLETION_ENABLE	 (1L<<18)
+#define BNX2_MISC_ENABLE_SET_BITS_HOST_COALESCE_ENABLE	 (1L<<19)
+#define BNX2_MISC_ENABLE_SET_BITS_MAILBOX_QUEUE_ENABLE	 (1L<<20)
+#define BNX2_MISC_ENABLE_SET_BITS_CONTEXT_ENABLE	 (1L<<21)
+#define BNX2_MISC_ENABLE_SET_BITS_CMD_SCHEDULER_ENABLE	 (1L<<22)
+#define BNX2_MISC_ENABLE_SET_BITS_CMD_PROCESSOR_ENABLE	 (1L<<23)
+#define BNX2_MISC_ENABLE_SET_BITS_MGMT_PROCESSOR_ENABLE	 (1L<<24)
+#define BNX2_MISC_ENABLE_SET_BITS_TIMER_ENABLE		 (1L<<25)
+#define BNX2_MISC_ENABLE_SET_BITS_DMA_ENGINE_ENABLE	 (1L<<26)
+#define BNX2_MISC_ENABLE_SET_BITS_UMP_ENABLE		 (1L<<27)
+#define BNX2_MISC_ENABLE_SET_BITS_RV2P_CMD_SCHEDULER_ENABLE	 (1L<<28)
+#define BNX2_MISC_ENABLE_SET_BITS_RSVD_FUTURE_ENABLE	 (0x7L<<29)
+
+#define BNX2_MISC_ENABLE_CLR_BITS			0x00000814
+#define BNX2_MISC_ENABLE_CLR_BITS_TX_SCHEDULER_ENABLE	 (1L<<0)
+#define BNX2_MISC_ENABLE_CLR_BITS_TX_BD_READ_ENABLE	 (1L<<1)
+#define BNX2_MISC_ENABLE_CLR_BITS_TX_BD_CACHE_ENABLE	 (1L<<2)
+#define BNX2_MISC_ENABLE_CLR_BITS_TX_PROCESSOR_ENABLE	 (1L<<3)
+#define BNX2_MISC_ENABLE_CLR_BITS_TX_DMA_ENABLE		 (1L<<4)
+#define BNX2_MISC_ENABLE_CLR_BITS_TX_PATCHUP_ENABLE	 (1L<<5)
+#define BNX2_MISC_ENABLE_CLR_BITS_TX_PAYLOAD_Q_ENABLE	 (1L<<6)
+#define BNX2_MISC_ENABLE_CLR_BITS_TX_HEADER_Q_ENABLE	 (1L<<7)
+#define BNX2_MISC_ENABLE_CLR_BITS_TX_ASSEMBLER_ENABLE	 (1L<<8)
+#define BNX2_MISC_ENABLE_CLR_BITS_EMAC_ENABLE		 (1L<<9)
+#define BNX2_MISC_ENABLE_CLR_BITS_RX_PARSER_MAC_ENABLE	 (1L<<10)
+#define BNX2_MISC_ENABLE_CLR_BITS_RX_PARSER_CATCHUP_ENABLE	 (1L<<11)
+#define BNX2_MISC_ENABLE_CLR_BITS_RX_MBUF_ENABLE	 (1L<<12)
+#define BNX2_MISC_ENABLE_CLR_BITS_RX_LOOKUP_ENABLE	 (1L<<13)
+#define BNX2_MISC_ENABLE_CLR_BITS_RX_PROCESSOR_ENABLE	 (1L<<14)
+#define BNX2_MISC_ENABLE_CLR_BITS_RX_V2P_ENABLE		 (1L<<15)
+#define BNX2_MISC_ENABLE_CLR_BITS_RX_BD_CACHE_ENABLE	 (1L<<16)
+#define BNX2_MISC_ENABLE_CLR_BITS_RX_DMA_ENABLE		 (1L<<17)
+#define BNX2_MISC_ENABLE_CLR_BITS_COMPLETION_ENABLE	 (1L<<18)
+#define BNX2_MISC_ENABLE_CLR_BITS_HOST_COALESCE_ENABLE	 (1L<<19)
+#define BNX2_MISC_ENABLE_CLR_BITS_MAILBOX_QUEUE_ENABLE	 (1L<<20)
+#define BNX2_MISC_ENABLE_CLR_BITS_CONTEXT_ENABLE	 (1L<<21)
+#define BNX2_MISC_ENABLE_CLR_BITS_CMD_SCHEDULER_ENABLE	 (1L<<22)
+#define BNX2_MISC_ENABLE_CLR_BITS_CMD_PROCESSOR_ENABLE	 (1L<<23)
+#define BNX2_MISC_ENABLE_CLR_BITS_MGMT_PROCESSOR_ENABLE	 (1L<<24)
+#define BNX2_MISC_ENABLE_CLR_BITS_TIMER_ENABLE		 (1L<<25)
+#define BNX2_MISC_ENABLE_CLR_BITS_DMA_ENGINE_ENABLE	 (1L<<26)
+#define BNX2_MISC_ENABLE_CLR_BITS_UMP_ENABLE		 (1L<<27)
+#define BNX2_MISC_ENABLE_CLR_BITS_RV2P_CMD_SCHEDULER_ENABLE	 (1L<<28)
+#define BNX2_MISC_ENABLE_CLR_BITS_RSVD_FUTURE_ENABLE	 (0x7L<<29)
+
+#define BNX2_MISC_CLOCK_CONTROL_BITS			0x00000818
+#define BNX2_MISC_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET	 (0xfL<<0)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_32MHZ	 (0L<<0)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_38MHZ	 (1L<<0)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_48MHZ	 (2L<<0)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_55MHZ	 (3L<<0)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_66MHZ	 (4L<<0)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_80MHZ	 (5L<<0)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_95MHZ	 (6L<<0)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_133MHZ	 (7L<<0)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_LOW	 (0xfL<<0)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_CORE_CLK_DISABLE	 (1L<<6)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_CORE_CLK_ALT	 (1L<<7)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_CORE_CLK_ALT_SRC	 (0x7L<<8)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_CORE_CLK_ALT_SRC_UNDEF	 (0L<<8)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_CORE_CLK_ALT_SRC_12	 (1L<<8)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_CORE_CLK_ALT_SRC_6	 (2L<<8)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_CORE_CLK_ALT_SRC_62	 (4L<<8)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_RESERVED0_XI	 (0x7L<<8)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_MIN_POWER		 (1L<<11)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_CORE_CLK_PLL_SPEED	 (0xfL<<12)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_CORE_CLK_PLL_SPEED_100	 (0L<<12)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_CORE_CLK_PLL_SPEED_80	 (1L<<12)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_CORE_CLK_PLL_SPEED_50	 (2L<<12)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_CORE_CLK_PLL_SPEED_40	 (4L<<12)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_CORE_CLK_PLL_SPEED_25	 (8L<<12)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_RESERVED1_XI	 (0xfL<<12)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_CORE_CLK_PLL_STOP	 (1L<<16)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_RESERVED_17_TE	 (1L<<17)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_RESERVED_18_TE	 (1L<<18)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_RESERVED_19_TE	 (1L<<19)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_RESERVED_TE	 (0xfffL<<20)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_CORE_CLK_ALT_MGMT_XI	 (1L<<17)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_RESERVED2_XI	 (0x3fL<<18)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_CORE_CLK_PLL_VCO_XI	 (0x7L<<24)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_RESERVED3_XI	 (1L<<27)
+#define BNX2_MISC_CLOCK_CONTROL_BITS_CORE_CLK_PLL_SPEED_XI	 (0xfL<<28)
+
+#define BNX2_MISC_SPIO					0x0000081c
+#define BNX2_MISC_SPIO_VALUE				 (0xffL<<0)
+#define BNX2_MISC_SPIO_SET				 (0xffL<<8)
+#define BNX2_MISC_SPIO_CLR				 (0xffL<<16)
+#define BNX2_MISC_SPIO_FLOAT				 (0xffL<<24)
+
+#define BNX2_MISC_SPIO_INT				0x00000820
+#define BNX2_MISC_SPIO_INT_INT_STATE_TE			 (0xfL<<0)
+#define BNX2_MISC_SPIO_INT_OLD_VALUE_TE			 (0xfL<<8)
+#define BNX2_MISC_SPIO_INT_OLD_SET_TE			 (0xfL<<16)
+#define BNX2_MISC_SPIO_INT_OLD_CLR_TE			 (0xfL<<24)
+#define BNX2_MISC_SPIO_INT_INT_STATE_XI			 (0xffL<<0)
+#define BNX2_MISC_SPIO_INT_OLD_VALUE_XI			 (0xffL<<8)
+#define BNX2_MISC_SPIO_INT_OLD_SET_XI			 (0xffL<<16)
+#define BNX2_MISC_SPIO_INT_OLD_CLR_XI			 (0xffL<<24)
+
+#define BNX2_MISC_CONFIG_LFSR				0x00000824
+#define BNX2_MISC_CONFIG_LFSR_DIV			 (0xffffL<<0)
+
+#define BNX2_MISC_LFSR_MASK_BITS			0x00000828
+#define BNX2_MISC_LFSR_MASK_BITS_TX_SCHEDULER_ENABLE	 (1L<<0)
+#define BNX2_MISC_LFSR_MASK_BITS_TX_BD_READ_ENABLE	 (1L<<1)
+#define BNX2_MISC_LFSR_MASK_BITS_TX_BD_CACHE_ENABLE	 (1L<<2)
+#define BNX2_MISC_LFSR_MASK_BITS_TX_PROCESSOR_ENABLE	 (1L<<3)
+#define BNX2_MISC_LFSR_MASK_BITS_TX_DMA_ENABLE		 (1L<<4)
+#define BNX2_MISC_LFSR_MASK_BITS_TX_PATCHUP_ENABLE	 (1L<<5)
+#define BNX2_MISC_LFSR_MASK_BITS_TX_PAYLOAD_Q_ENABLE	 (1L<<6)
+#define BNX2_MISC_LFSR_MASK_BITS_TX_HEADER_Q_ENABLE	 (1L<<7)
+#define BNX2_MISC_LFSR_MASK_BITS_TX_ASSEMBLER_ENABLE	 (1L<<8)
+#define BNX2_MISC_LFSR_MASK_BITS_EMAC_ENABLE		 (1L<<9)
+#define BNX2_MISC_LFSR_MASK_BITS_RX_PARSER_MAC_ENABLE	 (1L<<10)
+#define BNX2_MISC_LFSR_MASK_BITS_RX_PARSER_CATCHUP_ENABLE	 (1L<<11)
+#define BNX2_MISC_LFSR_MASK_BITS_RX_MBUF_ENABLE		 (1L<<12)
+#define BNX2_MISC_LFSR_MASK_BITS_RX_LOOKUP_ENABLE	 (1L<<13)
+#define BNX2_MISC_LFSR_MASK_BITS_RX_PROCESSOR_ENABLE	 (1L<<14)
+#define BNX2_MISC_LFSR_MASK_BITS_RX_V2P_ENABLE		 (1L<<15)
+#define BNX2_MISC_LFSR_MASK_BITS_RX_BD_CACHE_ENABLE	 (1L<<16)
+#define BNX2_MISC_LFSR_MASK_BITS_RX_DMA_ENABLE		 (1L<<17)
+#define BNX2_MISC_LFSR_MASK_BITS_COMPLETION_ENABLE	 (1L<<18)
+#define BNX2_MISC_LFSR_MASK_BITS_HOST_COALESCE_ENABLE	 (1L<<19)
+#define BNX2_MISC_LFSR_MASK_BITS_MAILBOX_QUEUE_ENABLE	 (1L<<20)
+#define BNX2_MISC_LFSR_MASK_BITS_CONTEXT_ENABLE		 (1L<<21)
+#define BNX2_MISC_LFSR_MASK_BITS_CMD_SCHEDULER_ENABLE	 (1L<<22)
+#define BNX2_MISC_LFSR_MASK_BITS_CMD_PROCESSOR_ENABLE	 (1L<<23)
+#define BNX2_MISC_LFSR_MASK_BITS_MGMT_PROCESSOR_ENABLE	 (1L<<24)
+#define BNX2_MISC_LFSR_MASK_BITS_TIMER_ENABLE		 (1L<<25)
+#define BNX2_MISC_LFSR_MASK_BITS_DMA_ENGINE_ENABLE	 (1L<<26)
+#define BNX2_MISC_LFSR_MASK_BITS_UMP_ENABLE		 (1L<<27)
+#define BNX2_MISC_LFSR_MASK_BITS_RV2P_CMD_SCHEDULER_ENABLE	 (1L<<28)
+#define BNX2_MISC_LFSR_MASK_BITS_RSVD_FUTURE_ENABLE	 (0x7L<<29)
+
+#define BNX2_MISC_ARB_REQ0				0x0000082c
+#define BNX2_MISC_ARB_REQ1				0x00000830
+#define BNX2_MISC_ARB_REQ2				0x00000834
+#define BNX2_MISC_ARB_REQ3				0x00000838
+#define BNX2_MISC_ARB_REQ4				0x0000083c
+#define BNX2_MISC_ARB_FREE0				0x00000840
+#define BNX2_MISC_ARB_FREE1				0x00000844
+#define BNX2_MISC_ARB_FREE2				0x00000848
+#define BNX2_MISC_ARB_FREE3				0x0000084c
+#define BNX2_MISC_ARB_FREE4				0x00000850
+#define BNX2_MISC_ARB_REQ_STATUS0			0x00000854
+#define BNX2_MISC_ARB_REQ_STATUS1			0x00000858
+#define BNX2_MISC_ARB_REQ_STATUS2			0x0000085c
+#define BNX2_MISC_ARB_REQ_STATUS3			0x00000860
+#define BNX2_MISC_ARB_REQ_STATUS4			0x00000864
+#define BNX2_MISC_ARB_GNT0				0x00000868
+#define BNX2_MISC_ARB_GNT0_0				 (0x7L<<0)
+#define BNX2_MISC_ARB_GNT0_1				 (0x7L<<4)
+#define BNX2_MISC_ARB_GNT0_2				 (0x7L<<8)
+#define BNX2_MISC_ARB_GNT0_3				 (0x7L<<12)
+#define BNX2_MISC_ARB_GNT0_4				 (0x7L<<16)
+#define BNX2_MISC_ARB_GNT0_5				 (0x7L<<20)
+#define BNX2_MISC_ARB_GNT0_6				 (0x7L<<24)
+#define BNX2_MISC_ARB_GNT0_7				 (0x7L<<28)
+
+#define BNX2_MISC_ARB_GNT1				0x0000086c
+#define BNX2_MISC_ARB_GNT1_8				 (0x7L<<0)
+#define BNX2_MISC_ARB_GNT1_9				 (0x7L<<4)
+#define BNX2_MISC_ARB_GNT1_10				 (0x7L<<8)
+#define BNX2_MISC_ARB_GNT1_11				 (0x7L<<12)
+#define BNX2_MISC_ARB_GNT1_12				 (0x7L<<16)
+#define BNX2_MISC_ARB_GNT1_13				 (0x7L<<20)
+#define BNX2_MISC_ARB_GNT1_14				 (0x7L<<24)
+#define BNX2_MISC_ARB_GNT1_15				 (0x7L<<28)
+
+#define BNX2_MISC_ARB_GNT2				0x00000870
+#define BNX2_MISC_ARB_GNT2_16				 (0x7L<<0)
+#define BNX2_MISC_ARB_GNT2_17				 (0x7L<<4)
+#define BNX2_MISC_ARB_GNT2_18				 (0x7L<<8)
+#define BNX2_MISC_ARB_GNT2_19				 (0x7L<<12)
+#define BNX2_MISC_ARB_GNT2_20				 (0x7L<<16)
+#define BNX2_MISC_ARB_GNT2_21				 (0x7L<<20)
+#define BNX2_MISC_ARB_GNT2_22				 (0x7L<<24)
+#define BNX2_MISC_ARB_GNT2_23				 (0x7L<<28)
+
+#define BNX2_MISC_ARB_GNT3				0x00000874
+#define BNX2_MISC_ARB_GNT3_24				 (0x7L<<0)
+#define BNX2_MISC_ARB_GNT3_25				 (0x7L<<4)
+#define BNX2_MISC_ARB_GNT3_26				 (0x7L<<8)
+#define BNX2_MISC_ARB_GNT3_27				 (0x7L<<12)
+#define BNX2_MISC_ARB_GNT3_28				 (0x7L<<16)
+#define BNX2_MISC_ARB_GNT3_29				 (0x7L<<20)
+#define BNX2_MISC_ARB_GNT3_30				 (0x7L<<24)
+#define BNX2_MISC_ARB_GNT3_31				 (0x7L<<28)
+
+#define BNX2_MISC_RESERVED1				0x00000878
+#define BNX2_MISC_RESERVED1_MISC_RESERVED1_VALUE	 (0x3fL<<0)
+
+#define BNX2_MISC_RESERVED2				0x0000087c
+#define BNX2_MISC_RESERVED2_PCIE_DIS			 (1L<<0)
+#define BNX2_MISC_RESERVED2_LINK_IN_L23			 (1L<<1)
+
+#define BNX2_MISC_SM_ASF_CONTROL			0x00000880
+#define BNX2_MISC_SM_ASF_CONTROL_ASF_RST		 (1L<<0)
+#define BNX2_MISC_SM_ASF_CONTROL_TSC_EN			 (1L<<1)
+#define BNX2_MISC_SM_ASF_CONTROL_WG_TO			 (1L<<2)
+#define BNX2_MISC_SM_ASF_CONTROL_HB_TO			 (1L<<3)
+#define BNX2_MISC_SM_ASF_CONTROL_PA_TO			 (1L<<4)
+#define BNX2_MISC_SM_ASF_CONTROL_PL_TO			 (1L<<5)
+#define BNX2_MISC_SM_ASF_CONTROL_RT_TO			 (1L<<6)
+#define BNX2_MISC_SM_ASF_CONTROL_SMB_EVENT		 (1L<<7)
+#define BNX2_MISC_SM_ASF_CONTROL_STRETCH_EN		 (1L<<8)
+#define BNX2_MISC_SM_ASF_CONTROL_STRETCH_PULSE		 (1L<<9)
+#define BNX2_MISC_SM_ASF_CONTROL_RES			 (0x3L<<10)
+#define BNX2_MISC_SM_ASF_CONTROL_SMB_EN			 (1L<<12)
+#define BNX2_MISC_SM_ASF_CONTROL_SMB_BB_EN		 (1L<<13)
+#define BNX2_MISC_SM_ASF_CONTROL_SMB_NO_ADDR_FILT	 (1L<<14)
+#define BNX2_MISC_SM_ASF_CONTROL_SMB_AUTOREAD		 (1L<<15)
+#define BNX2_MISC_SM_ASF_CONTROL_NIC_SMB_ADDR1		 (0x7fL<<16)
+#define BNX2_MISC_SM_ASF_CONTROL_NIC_SMB_ADDR2		 (0x7fL<<23)
+#define BNX2_MISC_SM_ASF_CONTROL_EN_NIC_SMB_ADDR_0	 (1L<<30)
+#define BNX2_MISC_SM_ASF_CONTROL_SMB_EARLY_ATTN		 (1L<<31)
+
+#define BNX2_MISC_SMB_IN				0x00000884
+#define BNX2_MISC_SMB_IN_DAT_IN				 (0xffL<<0)
+#define BNX2_MISC_SMB_IN_RDY				 (1L<<8)
+#define BNX2_MISC_SMB_IN_DONE				 (1L<<9)
+#define BNX2_MISC_SMB_IN_FIRSTBYTE			 (1L<<10)
+#define BNX2_MISC_SMB_IN_STATUS				 (0x7L<<11)
+#define BNX2_MISC_SMB_IN_STATUS_OK			 (0x0L<<11)
+#define BNX2_MISC_SMB_IN_STATUS_PEC			 (0x1L<<11)
+#define BNX2_MISC_SMB_IN_STATUS_OFLOW			 (0x2L<<11)
+#define BNX2_MISC_SMB_IN_STATUS_STOP			 (0x3L<<11)
+#define BNX2_MISC_SMB_IN_STATUS_TIMEOUT			 (0x4L<<11)
+
+#define BNX2_MISC_SMB_OUT				0x00000888
+#define BNX2_MISC_SMB_OUT_DAT_OUT			 (0xffL<<0)
+#define BNX2_MISC_SMB_OUT_RDY				 (1L<<8)
+#define BNX2_MISC_SMB_OUT_START				 (1L<<9)
+#define BNX2_MISC_SMB_OUT_LAST				 (1L<<10)
+#define BNX2_MISC_SMB_OUT_ACC_TYPE			 (1L<<11)
+#define BNX2_MISC_SMB_OUT_ENB_PEC			 (1L<<12)
+#define BNX2_MISC_SMB_OUT_GET_RX_LEN			 (1L<<13)
+#define BNX2_MISC_SMB_OUT_SMB_READ_LEN			 (0x3fL<<14)
+#define BNX2_MISC_SMB_OUT_SMB_OUT_STATUS		 (0xfL<<20)
+#define BNX2_MISC_SMB_OUT_SMB_OUT_STATUS_OK		 (0L<<20)
+#define BNX2_MISC_SMB_OUT_SMB_OUT_STATUS_FIRST_NACK	 (1L<<20)
+#define BNX2_MISC_SMB_OUT_SMB_OUT_STATUS_UFLOW		 (2L<<20)
+#define BNX2_MISC_SMB_OUT_SMB_OUT_STATUS_STOP		 (3L<<20)
+#define BNX2_MISC_SMB_OUT_SMB_OUT_STATUS_TIMEOUT	 (4L<<20)
+#define BNX2_MISC_SMB_OUT_SMB_OUT_STATUS_FIRST_LOST	 (5L<<20)
+#define BNX2_MISC_SMB_OUT_SMB_OUT_STATUS_BADACK		 (6L<<20)
+#define BNX2_MISC_SMB_OUT_SMB_OUT_STATUS_SUB_NACK	 (9L<<20)
+#define BNX2_MISC_SMB_OUT_SMB_OUT_STATUS_SUB_LOST	 (0xdL<<20)
+#define BNX2_MISC_SMB_OUT_SMB_OUT_SLAVEMODE		 (1L<<24)
+#define BNX2_MISC_SMB_OUT_SMB_OUT_DAT_EN		 (1L<<25)
+#define BNX2_MISC_SMB_OUT_SMB_OUT_DAT_IN		 (1L<<26)
+#define BNX2_MISC_SMB_OUT_SMB_OUT_CLK_EN		 (1L<<27)
+#define BNX2_MISC_SMB_OUT_SMB_OUT_CLK_IN		 (1L<<28)
+
+#define BNX2_MISC_SMB_WATCHDOG				0x0000088c
+#define BNX2_MISC_SMB_WATCHDOG_WATCHDOG			 (0xffffL<<0)
+
+#define BNX2_MISC_SMB_HEARTBEAT				0x00000890
+#define BNX2_MISC_SMB_HEARTBEAT_HEARTBEAT		 (0xffffL<<0)
+
+#define BNX2_MISC_SMB_POLL_ASF				0x00000894
+#define BNX2_MISC_SMB_POLL_ASF_POLL_ASF			 (0xffffL<<0)
+
+#define BNX2_MISC_SMB_POLL_LEGACY			0x00000898
+#define BNX2_MISC_SMB_POLL_LEGACY_POLL_LEGACY		 (0xffffL<<0)
+
+#define BNX2_MISC_SMB_RETRAN				0x0000089c
+#define BNX2_MISC_SMB_RETRAN_RETRAN			 (0xffL<<0)
+
+#define BNX2_MISC_SMB_TIMESTAMP				0x000008a0
+#define BNX2_MISC_SMB_TIMESTAMP_TIMESTAMP		 (0xffffffffL<<0)
+
+#define BNX2_MISC_PERR_ENA0				0x000008a4
+#define BNX2_MISC_PERR_ENA0_COM_MISC_CTXC		 (1L<<0)
+#define BNX2_MISC_PERR_ENA0_COM_MISC_REGF		 (1L<<1)
+#define BNX2_MISC_PERR_ENA0_COM_MISC_SCPAD		 (1L<<2)
+#define BNX2_MISC_PERR_ENA0_CP_MISC_CTXC		 (1L<<3)
+#define BNX2_MISC_PERR_ENA0_CP_MISC_REGF		 (1L<<4)
+#define BNX2_MISC_PERR_ENA0_CP_MISC_SCPAD		 (1L<<5)
+#define BNX2_MISC_PERR_ENA0_CS_MISC_TMEM		 (1L<<6)
+#define BNX2_MISC_PERR_ENA0_CTX_MISC_ACCM0		 (1L<<7)
+#define BNX2_MISC_PERR_ENA0_CTX_MISC_ACCM1		 (1L<<8)
+#define BNX2_MISC_PERR_ENA0_CTX_MISC_ACCM2		 (1L<<9)
+#define BNX2_MISC_PERR_ENA0_CTX_MISC_ACCM3		 (1L<<10)
+#define BNX2_MISC_PERR_ENA0_CTX_MISC_ACCM4		 (1L<<11)
+#define BNX2_MISC_PERR_ENA0_CTX_MISC_ACCM5		 (1L<<12)
+#define BNX2_MISC_PERR_ENA0_CTX_MISC_PGTBL		 (1L<<13)
+#define BNX2_MISC_PERR_ENA0_DMAE_MISC_DR0		 (1L<<14)
+#define BNX2_MISC_PERR_ENA0_DMAE_MISC_DR1		 (1L<<15)
+#define BNX2_MISC_PERR_ENA0_DMAE_MISC_DR2		 (1L<<16)
+#define BNX2_MISC_PERR_ENA0_DMAE_MISC_DR3		 (1L<<17)
+#define BNX2_MISC_PERR_ENA0_DMAE_MISC_DR4		 (1L<<18)
+#define BNX2_MISC_PERR_ENA0_DMAE_MISC_DW0		 (1L<<19)
+#define BNX2_MISC_PERR_ENA0_DMAE_MISC_DW1		 (1L<<20)
+#define BNX2_MISC_PERR_ENA0_DMAE_MISC_DW2		 (1L<<21)
+#define BNX2_MISC_PERR_ENA0_HC_MISC_DMA			 (1L<<22)
+#define BNX2_MISC_PERR_ENA0_MCP_MISC_REGF		 (1L<<23)
+#define BNX2_MISC_PERR_ENA0_MCP_MISC_SCPAD		 (1L<<24)
+#define BNX2_MISC_PERR_ENA0_MQ_MISC_CTX			 (1L<<25)
+#define BNX2_MISC_PERR_ENA0_RBDC_MISC			 (1L<<26)
+#define BNX2_MISC_PERR_ENA0_RBUF_MISC_MB		 (1L<<27)
+#define BNX2_MISC_PERR_ENA0_RBUF_MISC_PTR		 (1L<<28)
+#define BNX2_MISC_PERR_ENA0_RDE_MISC_RPC		 (1L<<29)
+#define BNX2_MISC_PERR_ENA0_RDE_MISC_RPM		 (1L<<30)
+#define BNX2_MISC_PERR_ENA0_RV2P_MISC_CB0REGS		 (1L<<31)
+#define BNX2_MISC_PERR_ENA0_COM_DMAE_PERR_EN_XI		 (1L<<0)
+#define BNX2_MISC_PERR_ENA0_CP_DMAE_PERR_EN_XI		 (1L<<1)
+#define BNX2_MISC_PERR_ENA0_RPM_ACPIBEMEM_PERR_EN_XI	 (1L<<2)
+#define BNX2_MISC_PERR_ENA0_CTX_USAGE_CNT_PERR_EN_XI	 (1L<<3)
+#define BNX2_MISC_PERR_ENA0_CTX_PGTBL_PERR_EN_XI	 (1L<<4)
+#define BNX2_MISC_PERR_ENA0_CTX_CACHE_PERR_EN_XI	 (1L<<5)
+#define BNX2_MISC_PERR_ENA0_CTX_MIRROR_PERR_EN_XI	 (1L<<6)
+#define BNX2_MISC_PERR_ENA0_COM_CTXC_PERR_EN_XI		 (1L<<7)
+#define BNX2_MISC_PERR_ENA0_COM_SCPAD_PERR_EN_XI	 (1L<<8)
+#define BNX2_MISC_PERR_ENA0_CP_CTXC_PERR_EN_XI		 (1L<<9)
+#define BNX2_MISC_PERR_ENA0_CP_SCPAD_PERR_EN_XI		 (1L<<10)
+#define BNX2_MISC_PERR_ENA0_RXP_RBUFC_PERR_EN_XI	 (1L<<11)
+#define BNX2_MISC_PERR_ENA0_RXP_CTXC_PERR_EN_XI		 (1L<<12)
+#define BNX2_MISC_PERR_ENA0_RXP_SCPAD_PERR_EN_XI	 (1L<<13)
+#define BNX2_MISC_PERR_ENA0_TPAT_SCPAD_PERR_EN_XI	 (1L<<14)
+#define BNX2_MISC_PERR_ENA0_TXP_CTXC_PERR_EN_XI		 (1L<<15)
+#define BNX2_MISC_PERR_ENA0_TXP_SCPAD_PERR_EN_XI	 (1L<<16)
+#define BNX2_MISC_PERR_ENA0_CS_TMEM_PERR_EN_XI		 (1L<<17)
+#define BNX2_MISC_PERR_ENA0_MQ_CTX_PERR_EN_XI		 (1L<<18)
+#define BNX2_MISC_PERR_ENA0_RPM_DFIFOMEM_PERR_EN_XI	 (1L<<19)
+#define BNX2_MISC_PERR_ENA0_RPC_DFIFOMEM_PERR_EN_XI	 (1L<<20)
+#define BNX2_MISC_PERR_ENA0_RBUF_PTRMEM_PERR_EN_XI	 (1L<<21)
+#define BNX2_MISC_PERR_ENA0_RBUF_DATAMEM_PERR_EN_XI	 (1L<<22)
+#define BNX2_MISC_PERR_ENA0_RV2P_P2IRAM_PERR_EN_XI	 (1L<<23)
+#define BNX2_MISC_PERR_ENA0_RV2P_P1IRAM_PERR_EN_XI	 (1L<<24)
+#define BNX2_MISC_PERR_ENA0_RV2P_CB1REGS_PERR_EN_XI	 (1L<<25)
+#define BNX2_MISC_PERR_ENA0_RV2P_CB0REGS_PERR_EN_XI	 (1L<<26)
+#define BNX2_MISC_PERR_ENA0_TPBUF_PERR_EN_XI		 (1L<<27)
+#define BNX2_MISC_PERR_ENA0_THBUF_PERR_EN_XI		 (1L<<28)
+#define BNX2_MISC_PERR_ENA0_TDMA_PERR_EN_XI		 (1L<<29)
+#define BNX2_MISC_PERR_ENA0_TBDC_PERR_EN_XI		 (1L<<30)
+#define BNX2_MISC_PERR_ENA0_TSCH_LR_PERR_EN_XI		 (1L<<31)
+
+#define BNX2_MISC_PERR_ENA1				0x000008a8
+#define BNX2_MISC_PERR_ENA1_RV2P_MISC_CB1REGS		 (1L<<0)
+#define BNX2_MISC_PERR_ENA1_RV2P_MISC_P1IRAM		 (1L<<1)
+#define BNX2_MISC_PERR_ENA1_RV2P_MISC_P2IRAM		 (1L<<2)
+#define BNX2_MISC_PERR_ENA1_RXP_MISC_CTXC		 (1L<<3)
+#define BNX2_MISC_PERR_ENA1_RXP_MISC_REGF		 (1L<<4)
+#define BNX2_MISC_PERR_ENA1_RXP_MISC_SCPAD		 (1L<<5)
+#define BNX2_MISC_PERR_ENA1_RXP_MISC_RBUFC		 (1L<<6)
+#define BNX2_MISC_PERR_ENA1_TBDC_MISC			 (1L<<7)
+#define BNX2_MISC_PERR_ENA1_TDMA_MISC			 (1L<<8)
+#define BNX2_MISC_PERR_ENA1_THBUF_MISC_MB0		 (1L<<9)
+#define BNX2_MISC_PERR_ENA1_THBUF_MISC_MB1		 (1L<<10)
+#define BNX2_MISC_PERR_ENA1_TPAT_MISC_REGF		 (1L<<11)
+#define BNX2_MISC_PERR_ENA1_TPAT_MISC_SCPAD		 (1L<<12)
+#define BNX2_MISC_PERR_ENA1_TPBUF_MISC_MB		 (1L<<13)
+#define BNX2_MISC_PERR_ENA1_TSCH_MISC_LR		 (1L<<14)
+#define BNX2_MISC_PERR_ENA1_TXP_MISC_CTXC		 (1L<<15)
+#define BNX2_MISC_PERR_ENA1_TXP_MISC_REGF		 (1L<<16)
+#define BNX2_MISC_PERR_ENA1_TXP_MISC_SCPAD		 (1L<<17)
+#define BNX2_MISC_PERR_ENA1_UMP_MISC_FIORX		 (1L<<18)
+#define BNX2_MISC_PERR_ENA1_UMP_MISC_FIOTX		 (1L<<19)
+#define BNX2_MISC_PERR_ENA1_UMP_MISC_RX			 (1L<<20)
+#define BNX2_MISC_PERR_ENA1_UMP_MISC_TX			 (1L<<21)
+#define BNX2_MISC_PERR_ENA1_RDMAQ_MISC			 (1L<<22)
+#define BNX2_MISC_PERR_ENA1_CSQ_MISC			 (1L<<23)
+#define BNX2_MISC_PERR_ENA1_CPQ_MISC			 (1L<<24)
+#define BNX2_MISC_PERR_ENA1_MCPQ_MISC			 (1L<<25)
+#define BNX2_MISC_PERR_ENA1_RV2PMQ_MISC			 (1L<<26)
+#define BNX2_MISC_PERR_ENA1_RV2PPQ_MISC			 (1L<<27)
+#define BNX2_MISC_PERR_ENA1_RV2PTQ_MISC			 (1L<<28)
+#define BNX2_MISC_PERR_ENA1_RXPQ_MISC			 (1L<<29)
+#define BNX2_MISC_PERR_ENA1_RXPCQ_MISC			 (1L<<30)
+#define BNX2_MISC_PERR_ENA1_RLUPQ_MISC			 (1L<<31)
+#define BNX2_MISC_PERR_ENA1_RBDC_PERR_EN_XI		 (1L<<0)
+#define BNX2_MISC_PERR_ENA1_RDMA_DFIFO_PERR_EN_XI	 (1L<<2)
+#define BNX2_MISC_PERR_ENA1_HC_STATS_PERR_EN_XI		 (1L<<3)
+#define BNX2_MISC_PERR_ENA1_HC_MSIX_PERR_EN_XI		 (1L<<4)
+#define BNX2_MISC_PERR_ENA1_HC_PRODUCSTB_PERR_EN_XI	 (1L<<5)
+#define BNX2_MISC_PERR_ENA1_HC_CONSUMSTB_PERR_EN_XI	 (1L<<6)
+#define BNX2_MISC_PERR_ENA1_TPATQ_PERR_EN_XI		 (1L<<7)
+#define BNX2_MISC_PERR_ENA1_MCPQ_PERR_EN_XI		 (1L<<8)
+#define BNX2_MISC_PERR_ENA1_TDMAQ_PERR_EN_XI		 (1L<<9)
+#define BNX2_MISC_PERR_ENA1_TXPQ_PERR_EN_XI		 (1L<<10)
+#define BNX2_MISC_PERR_ENA1_COMTQ_PERR_EN_XI		 (1L<<11)
+#define BNX2_MISC_PERR_ENA1_COMQ_PERR_EN_XI		 (1L<<12)
+#define BNX2_MISC_PERR_ENA1_RLUPQ_PERR_EN_XI		 (1L<<13)
+#define BNX2_MISC_PERR_ENA1_RXPQ_PERR_EN_XI		 (1L<<14)
+#define BNX2_MISC_PERR_ENA1_RV2PPQ_PERR_EN_XI		 (1L<<15)
+#define BNX2_MISC_PERR_ENA1_RDMAQ_PERR_EN_XI		 (1L<<16)
+#define BNX2_MISC_PERR_ENA1_TASQ_PERR_EN_XI		 (1L<<17)
+#define BNX2_MISC_PERR_ENA1_TBDRQ_PERR_EN_XI		 (1L<<18)
+#define BNX2_MISC_PERR_ENA1_TSCHQ_PERR_EN_XI		 (1L<<19)
+#define BNX2_MISC_PERR_ENA1_COMXQ_PERR_EN_XI		 (1L<<20)
+#define BNX2_MISC_PERR_ENA1_RXPCQ_PERR_EN_XI		 (1L<<21)
+#define BNX2_MISC_PERR_ENA1_RV2PTQ_PERR_EN_XI		 (1L<<22)
+#define BNX2_MISC_PERR_ENA1_RV2PMQ_PERR_EN_XI		 (1L<<23)
+#define BNX2_MISC_PERR_ENA1_CPQ_PERR_EN_XI		 (1L<<24)
+#define BNX2_MISC_PERR_ENA1_CSQ_PERR_EN_XI		 (1L<<25)
+#define BNX2_MISC_PERR_ENA1_RLUP_CID_PERR_EN_XI		 (1L<<26)
+#define BNX2_MISC_PERR_ENA1_RV2PCS_TMEM_PERR_EN_XI	 (1L<<27)
+#define BNX2_MISC_PERR_ENA1_RV2PCSQ_PERR_EN_XI		 (1L<<28)
+#define BNX2_MISC_PERR_ENA1_MQ_IDX_PERR_EN_XI		 (1L<<29)
+
+#define BNX2_MISC_PERR_ENA2				0x000008ac
+#define BNX2_MISC_PERR_ENA2_COMQ_MISC			 (1L<<0)
+#define BNX2_MISC_PERR_ENA2_COMXQ_MISC			 (1L<<1)
+#define BNX2_MISC_PERR_ENA2_COMTQ_MISC			 (1L<<2)
+#define BNX2_MISC_PERR_ENA2_TSCHQ_MISC			 (1L<<3)
+#define BNX2_MISC_PERR_ENA2_TBDRQ_MISC			 (1L<<4)
+#define BNX2_MISC_PERR_ENA2_TXPQ_MISC			 (1L<<5)
+#define BNX2_MISC_PERR_ENA2_TDMAQ_MISC			 (1L<<6)
+#define BNX2_MISC_PERR_ENA2_TPATQ_MISC			 (1L<<7)
+#define BNX2_MISC_PERR_ENA2_TASQ_MISC			 (1L<<8)
+#define BNX2_MISC_PERR_ENA2_TGT_FIFO_PERR_EN_XI		 (1L<<0)
+#define BNX2_MISC_PERR_ENA2_UMP_TX_PERR_EN_XI		 (1L<<1)
+#define BNX2_MISC_PERR_ENA2_UMP_RX_PERR_EN_XI		 (1L<<2)
+#define BNX2_MISC_PERR_ENA2_MCP_ROM_PERR_EN_XI		 (1L<<3)
+#define BNX2_MISC_PERR_ENA2_MCP_SCPAD_PERR_EN_XI	 (1L<<4)
+#define BNX2_MISC_PERR_ENA2_HB_MEM_PERR_EN_XI		 (1L<<5)
+#define BNX2_MISC_PERR_ENA2_PCIE_REPLAY_PERR_EN_XI	 (1L<<6)
+
+#define BNX2_MISC_DEBUG_VECTOR_SEL			0x000008b0
+#define BNX2_MISC_DEBUG_VECTOR_SEL_0			 (0xfffL<<0)
+#define BNX2_MISC_DEBUG_VECTOR_SEL_1			 (0xfffL<<12)
+#define BNX2_MISC_DEBUG_VECTOR_SEL_1_XI			 (0xfffL<<15)
+
+#define BNX2_MISC_VREG_CONTROL				0x000008b4
+#define BNX2_MISC_VREG_CONTROL_1_2			 (0xfL<<0)
+#define BNX2_MISC_VREG_CONTROL_1_0_MAIN_XI		 (0xfL<<0)
+#define BNX2_MISC_VREG_CONTROL_1_0_MAIN_PLUS14_XI	 (0L<<0)
+#define BNX2_MISC_VREG_CONTROL_1_0_MAIN_PLUS12_XI	 (1L<<0)
+#define BNX2_MISC_VREG_CONTROL_1_0_MAIN_PLUS10_XI	 (2L<<0)
+#define BNX2_MISC_VREG_CONTROL_1_0_MAIN_PLUS8_XI	 (3L<<0)
+#define BNX2_MISC_VREG_CONTROL_1_0_MAIN_PLUS6_XI	 (4L<<0)
+#define BNX2_MISC_VREG_CONTROL_1_0_MAIN_PLUS4_XI	 (5L<<0)
+#define BNX2_MISC_VREG_CONTROL_1_0_MAIN_PLUS2_XI	 (6L<<0)
+#define BNX2_MISC_VREG_CONTROL_1_0_MAIN_NOM_XI		 (7L<<0)
+#define BNX2_MISC_VREG_CONTROL_1_0_MAIN_MINUS2_XI	 (8L<<0)
+#define BNX2_MISC_VREG_CONTROL_1_0_MAIN_MINUS4_XI	 (9L<<0)
+#define BNX2_MISC_VREG_CONTROL_1_0_MAIN_MINUS6_XI	 (10L<<0)
+#define BNX2_MISC_VREG_CONTROL_1_0_MAIN_MINUS8_XI	 (11L<<0)
+#define BNX2_MISC_VREG_CONTROL_1_0_MAIN_MINUS10_XI	 (12L<<0)
+#define BNX2_MISC_VREG_CONTROL_1_0_MAIN_MINUS12_XI	 (13L<<0)
+#define BNX2_MISC_VREG_CONTROL_1_0_MAIN_MINUS14_XI	 (14L<<0)
+#define BNX2_MISC_VREG_CONTROL_1_0_MAIN_MINUS16_XI	 (15L<<0)
+#define BNX2_MISC_VREG_CONTROL_2_5			 (0xfL<<4)
+#define BNX2_MISC_VREG_CONTROL_2_5_PLUS14		 (0L<<4)
+#define BNX2_MISC_VREG_CONTROL_2_5_PLUS12		 (1L<<4)
+#define BNX2_MISC_VREG_CONTROL_2_5_PLUS10		 (2L<<4)
+#define BNX2_MISC_VREG_CONTROL_2_5_PLUS8		 (3L<<4)
+#define BNX2_MISC_VREG_CONTROL_2_5_PLUS6		 (4L<<4)
+#define BNX2_MISC_VREG_CONTROL_2_5_PLUS4		 (5L<<4)
+#define BNX2_MISC_VREG_CONTROL_2_5_PLUS2		 (6L<<4)
+#define BNX2_MISC_VREG_CONTROL_2_5_NOM			 (7L<<4)
+#define BNX2_MISC_VREG_CONTROL_2_5_MINUS2		 (8L<<4)
+#define BNX2_MISC_VREG_CONTROL_2_5_MINUS4		 (9L<<4)
+#define BNX2_MISC_VREG_CONTROL_2_5_MINUS6		 (10L<<4)
+#define BNX2_MISC_VREG_CONTROL_2_5_MINUS8		 (11L<<4)
+#define BNX2_MISC_VREG_CONTROL_2_5_MINUS10		 (12L<<4)
+#define BNX2_MISC_VREG_CONTROL_2_5_MINUS12		 (13L<<4)
+#define BNX2_MISC_VREG_CONTROL_2_5_MINUS14		 (14L<<4)
+#define BNX2_MISC_VREG_CONTROL_2_5_MINUS16		 (15L<<4)
+#define BNX2_MISC_VREG_CONTROL_1_0_MGMT			 (0xfL<<8)
+#define BNX2_MISC_VREG_CONTROL_1_0_MGMT_PLUS14		 (0L<<8)
+#define BNX2_MISC_VREG_CONTROL_1_0_MGMT_PLUS12		 (1L<<8)
+#define BNX2_MISC_VREG_CONTROL_1_0_MGMT_PLUS10		 (2L<<8)
+#define BNX2_MISC_VREG_CONTROL_1_0_MGMT_PLUS8		 (3L<<8)
+#define BNX2_MISC_VREG_CONTROL_1_0_MGMT_PLUS6		 (4L<<8)
+#define BNX2_MISC_VREG_CONTROL_1_0_MGMT_PLUS4		 (5L<<8)
+#define BNX2_MISC_VREG_CONTROL_1_0_MGMT_PLUS2		 (6L<<8)
+#define BNX2_MISC_VREG_CONTROL_1_0_MGMT_NOM		 (7L<<8)
+#define BNX2_MISC_VREG_CONTROL_1_0_MGMT_MINUS2		 (8L<<8)
+#define BNX2_MISC_VREG_CONTROL_1_0_MGMT_MINUS4		 (9L<<8)
+#define BNX2_MISC_VREG_CONTROL_1_0_MGMT_MINUS6		 (10L<<8)
+#define BNX2_MISC_VREG_CONTROL_1_0_MGMT_MINUS8		 (11L<<8)
+#define BNX2_MISC_VREG_CONTROL_1_0_MGMT_MINUS10		 (12L<<8)
+#define BNX2_MISC_VREG_CONTROL_1_0_MGMT_MINUS12		 (13L<<8)
+#define BNX2_MISC_VREG_CONTROL_1_0_MGMT_MINUS14		 (14L<<8)
+#define BNX2_MISC_VREG_CONTROL_1_0_MGMT_MINUS16		 (15L<<8)
+
+#define BNX2_MISC_FINAL_CLK_CTL_VAL			0x000008b8
+#define BNX2_MISC_FINAL_CLK_CTL_VAL_MISC_FINAL_CLK_CTL_VAL	 (0x3ffffffL<<6)
+
+#define BNX2_MISC_GP_HW_CTL0				0x000008bc
+#define BNX2_MISC_GP_HW_CTL0_TX_DRIVE			 (1L<<0)
+#define BNX2_MISC_GP_HW_CTL0_RMII_MODE			 (1L<<1)
+#define BNX2_MISC_GP_HW_CTL0_RMII_CRSDV_SEL		 (1L<<2)
+#define BNX2_MISC_GP_HW_CTL0_RVMII_MODE			 (1L<<3)
+#define BNX2_MISC_GP_HW_CTL0_FLASH_SAMP_SCLK_NEGEDGE_TE	 (1L<<4)
+#define BNX2_MISC_GP_HW_CTL0_HIDDEN_REVISION_ID_TE	 (1L<<5)
+#define BNX2_MISC_GP_HW_CTL0_HC_CNTL_TMOUT_CTR_RST_TE	 (1L<<6)
+#define BNX2_MISC_GP_HW_CTL0_RESERVED1_XI		 (0x7L<<4)
+#define BNX2_MISC_GP_HW_CTL0_ENA_CORE_RST_ON_MAIN_PWR_GOING_AWAY	 (1L<<7)
+#define BNX2_MISC_GP_HW_CTL0_ENA_SEL_VAUX_B_IN_L2_TE	 (1L<<8)
+#define BNX2_MISC_GP_HW_CTL0_GRC_BNK_FREE_FIX_TE	 (1L<<9)
+#define BNX2_MISC_GP_HW_CTL0_LED_ACT_SEL_TE		 (1L<<10)
+#define BNX2_MISC_GP_HW_CTL0_RESERVED2_XI		 (0x7L<<8)
+#define BNX2_MISC_GP_HW_CTL0_UP1_DEF0			 (1L<<11)
+#define BNX2_MISC_GP_HW_CTL0_FIBER_MODE_DIS_DEF		 (1L<<12)
+#define BNX2_MISC_GP_HW_CTL0_FORCE2500_DEF		 (1L<<13)
+#define BNX2_MISC_GP_HW_CTL0_AUTODETECT_DIS_DEF		 (1L<<14)
+#define BNX2_MISC_GP_HW_CTL0_PARALLEL_DETECT_DEF	 (1L<<15)
+#define BNX2_MISC_GP_HW_CTL0_OSCCTRL_DAI		 (0xfL<<16)
+#define BNX2_MISC_GP_HW_CTL0_OSCCTRL_DAI_3MA		 (0L<<16)
+#define BNX2_MISC_GP_HW_CTL0_OSCCTRL_DAI_2P5MA		 (1L<<16)
+#define BNX2_MISC_GP_HW_CTL0_OSCCTRL_DAI_2P0MA		 (3L<<16)
+#define BNX2_MISC_GP_HW_CTL0_OSCCTRL_DAI_1P5MA		 (5L<<16)
+#define BNX2_MISC_GP_HW_CTL0_OSCCTRL_DAI_1P0MA		 (7L<<16)
+#define BNX2_MISC_GP_HW_CTL0_OSCCTRL_DAI_PWRDN		 (15L<<16)
+#define BNX2_MISC_GP_HW_CTL0_OSCCTRL_PRE2DIS		 (1L<<20)
+#define BNX2_MISC_GP_HW_CTL0_OSCCTRL_PRE1DIS		 (1L<<21)
+#define BNX2_MISC_GP_HW_CTL0_OSCCTRL_CTAT		 (0x3L<<22)
+#define BNX2_MISC_GP_HW_CTL0_OSCCTRL_CTAT_M6P		 (0L<<22)
+#define BNX2_MISC_GP_HW_CTL0_OSCCTRL_CTAT_M0P		 (1L<<22)
+#define BNX2_MISC_GP_HW_CTL0_OSCCTRL_CTAT_P0P		 (2L<<22)
+#define BNX2_MISC_GP_HW_CTL0_OSCCTRL_CTAT_P6P		 (3L<<22)
+#define BNX2_MISC_GP_HW_CTL0_OSCCTRL_PTAT		 (0x3L<<24)
+#define BNX2_MISC_GP_HW_CTL0_OSCCTRL_PTAT_M6P		 (0L<<24)
+#define BNX2_MISC_GP_HW_CTL0_OSCCTRL_PTAT_M0P		 (1L<<24)
+#define BNX2_MISC_GP_HW_CTL0_OSCCTRL_PTAT_P0P		 (2L<<24)
+#define BNX2_MISC_GP_HW_CTL0_OSCCTRL_PTAT_P6P		 (3L<<24)
+#define BNX2_MISC_GP_HW_CTL0_OSCCTRL_IAMP_ADJ		 (0x3L<<26)
+#define BNX2_MISC_GP_HW_CTL0_OSCCTRL_IAMP_ADJ_240UA	 (0L<<26)
+#define BNX2_MISC_GP_HW_CTL0_OSCCTRL_IAMP_ADJ_160UA	 (1L<<26)
+#define BNX2_MISC_GP_HW_CTL0_OSCCTRL_IAMP_ADJ_400UA	 (2L<<26)
+#define BNX2_MISC_GP_HW_CTL0_OSCCTRL_IAMP_ADJ_320UA	 (3L<<26)
+#define BNX2_MISC_GP_HW_CTL0_OSCCTRL_ICBUF_ADJ		 (0x3L<<28)
+#define BNX2_MISC_GP_HW_CTL0_OSCCTRL_ICBUF_ADJ_240UA	 (0L<<28)
+#define BNX2_MISC_GP_HW_CTL0_OSCCTRL_ICBUF_ADJ_160UA	 (1L<<28)
+#define BNX2_MISC_GP_HW_CTL0_OSCCTRL_ICBUF_ADJ_400UA	 (2L<<28)
+#define BNX2_MISC_GP_HW_CTL0_OSCCTRL_ICBUF_ADJ_320UA	 (3L<<28)
+#define BNX2_MISC_GP_HW_CTL0_OSCCTRL_XTAL_ADJ		 (0x3L<<30)
+#define BNX2_MISC_GP_HW_CTL0_OSCCTRL_XTAL_ADJ_1P57	 (0L<<30)
+#define BNX2_MISC_GP_HW_CTL0_OSCCTRL_XTAL_ADJ_1P45	 (1L<<30)
+#define BNX2_MISC_GP_HW_CTL0_OSCCTRL_XTAL_ADJ_1P62	 (2L<<30)
+#define BNX2_MISC_GP_HW_CTL0_OSCCTRL_XTAL_ADJ_1P66	 (3L<<30)
+
+#define BNX2_MISC_GP_HW_CTL1				0x000008c0
+#define BNX2_MISC_GP_HW_CTL1_1_ATTN_BTN_PRSNT_TE	 (1L<<0)
+#define BNX2_MISC_GP_HW_CTL1_1_ATTN_IND_PRSNT_TE	 (1L<<1)
+#define BNX2_MISC_GP_HW_CTL1_1_PWR_IND_PRSNT_TE		 (1L<<2)
+#define BNX2_MISC_GP_HW_CTL1_0_PCIE_LOOPBACK_TE		 (1L<<3)
+#define BNX2_MISC_GP_HW_CTL1_RESERVED_SOFT_XI		 (0xffffL<<0)
+#define BNX2_MISC_GP_HW_CTL1_RESERVED_HARD_XI		 (0xffffL<<16)
+
+#define BNX2_MISC_NEW_HW_CTL				0x000008c4
+#define BNX2_MISC_NEW_HW_CTL_MAIN_POR_BYPASS		 (1L<<0)
+#define BNX2_MISC_NEW_HW_CTL_RINGOSC_ENABLE		 (1L<<1)
+#define BNX2_MISC_NEW_HW_CTL_RINGOSC_SEL0		 (1L<<2)
+#define BNX2_MISC_NEW_HW_CTL_RINGOSC_SEL1		 (1L<<3)
+#define BNX2_MISC_NEW_HW_CTL_RESERVED_SHARED		 (0xfffL<<4)
+#define BNX2_MISC_NEW_HW_CTL_RESERVED_SPLIT		 (0xffffL<<16)
+
+#define BNX2_MISC_NEW_CORE_CTL				0x000008c8
+#define BNX2_MISC_NEW_CORE_CTL_LINK_HOLDOFF_SUCCESS	 (1L<<0)
+#define BNX2_MISC_NEW_CORE_CTL_LINK_HOLDOFF_REQ		 (1L<<1)
+#define BNX2_MISC_NEW_CORE_CTL_DMA_ENABLE		 (1L<<16)
+#define BNX2_MISC_NEW_CORE_CTL_RESERVED_CMN		 (0x3fffL<<2)
+#define BNX2_MISC_NEW_CORE_CTL_RESERVED_TC		 (0xffffL<<16)
+
+#define BNX2_MISC_ECO_HW_CTL				0x000008cc
+#define BNX2_MISC_ECO_HW_CTL_LARGE_GRC_TMOUT_EN		 (1L<<0)
+#define BNX2_MISC_ECO_HW_CTL_RESERVED_SOFT		 (0x7fffL<<1)
+#define BNX2_MISC_ECO_HW_CTL_RESERVED_HARD		 (0xffffL<<16)
+
+#define BNX2_MISC_ECO_CORE_CTL				0x000008d0
+#define BNX2_MISC_ECO_CORE_CTL_RESERVED_SOFT		 (0xffffL<<0)
+#define BNX2_MISC_ECO_CORE_CTL_RESERVED_HARD		 (0xffffL<<16)
+
+#define BNX2_MISC_PPIO					0x000008d4
+#define BNX2_MISC_PPIO_VALUE				 (0xfL<<0)
+#define BNX2_MISC_PPIO_SET				 (0xfL<<8)
+#define BNX2_MISC_PPIO_CLR				 (0xfL<<16)
+#define BNX2_MISC_PPIO_FLOAT				 (0xfL<<24)
+
+#define BNX2_MISC_PPIO_INT				0x000008d8
+#define BNX2_MISC_PPIO_INT_INT_STATE			 (0xfL<<0)
+#define BNX2_MISC_PPIO_INT_OLD_VALUE			 (0xfL<<8)
+#define BNX2_MISC_PPIO_INT_OLD_SET			 (0xfL<<16)
+#define BNX2_MISC_PPIO_INT_OLD_CLR			 (0xfL<<24)
+
+#define BNX2_MISC_RESET_NUMS				0x000008dc
+#define BNX2_MISC_RESET_NUMS_NUM_HARD_RESETS		 (0x7L<<0)
+#define BNX2_MISC_RESET_NUMS_NUM_PCIE_RESETS		 (0x7L<<4)
+#define BNX2_MISC_RESET_NUMS_NUM_PERSTB_RESETS		 (0x7L<<8)
+#define BNX2_MISC_RESET_NUMS_NUM_CMN_RESETS		 (0x7L<<12)
+#define BNX2_MISC_RESET_NUMS_NUM_PORT_RESETS		 (0x7L<<16)
+
+#define BNX2_MISC_CS16_ERR				0x000008e0
+#define BNX2_MISC_CS16_ERR_ENA_PCI			 (1L<<0)
+#define BNX2_MISC_CS16_ERR_ENA_RDMA			 (1L<<1)
+#define BNX2_MISC_CS16_ERR_ENA_TDMA			 (1L<<2)
+#define BNX2_MISC_CS16_ERR_ENA_EMAC			 (1L<<3)
+#define BNX2_MISC_CS16_ERR_ENA_CTX			 (1L<<4)
+#define BNX2_MISC_CS16_ERR_ENA_TBDR			 (1L<<5)
+#define BNX2_MISC_CS16_ERR_ENA_RBDC			 (1L<<6)
+#define BNX2_MISC_CS16_ERR_ENA_COM			 (1L<<7)
+#define BNX2_MISC_CS16_ERR_ENA_CP			 (1L<<8)
+#define BNX2_MISC_CS16_ERR_STA_PCI			 (1L<<16)
+#define BNX2_MISC_CS16_ERR_STA_RDMA			 (1L<<17)
+#define BNX2_MISC_CS16_ERR_STA_TDMA			 (1L<<18)
+#define BNX2_MISC_CS16_ERR_STA_EMAC			 (1L<<19)
+#define BNX2_MISC_CS16_ERR_STA_CTX			 (1L<<20)
+#define BNX2_MISC_CS16_ERR_STA_TBDR			 (1L<<21)
+#define BNX2_MISC_CS16_ERR_STA_RBDC			 (1L<<22)
+#define BNX2_MISC_CS16_ERR_STA_COM			 (1L<<23)
+#define BNX2_MISC_CS16_ERR_STA_CP			 (1L<<24)
+
+#define BNX2_MISC_SPIO_EVENT				0x000008e4
+#define BNX2_MISC_SPIO_EVENT_ENABLE			 (0xffL<<0)
+
+#define BNX2_MISC_PPIO_EVENT				0x000008e8
+#define BNX2_MISC_PPIO_EVENT_ENABLE			 (0xfL<<0)
+
+#define BNX2_MISC_DUAL_MEDIA_CTRL			0x000008ec
+#define BNX2_MISC_DUAL_MEDIA_CTRL_BOND_ID		 (0xffL<<0)
+#define BNX2_MISC_DUAL_MEDIA_CTRL_BOND_ID_X		 (0L<<0)
+#define BNX2_MISC_DUAL_MEDIA_CTRL_BOND_ID_C		 (3L<<0)
+#define BNX2_MISC_DUAL_MEDIA_CTRL_BOND_ID_S		 (12L<<0)
+#define BNX2_MISC_DUAL_MEDIA_CTRL_PHY_CTRL_STRAP	 (0x7L<<8)
+#define BNX2_MISC_DUAL_MEDIA_CTRL_PORT_SWAP_PIN		 (1L<<11)
+#define BNX2_MISC_DUAL_MEDIA_CTRL_SERDES1_SIGDET	 (1L<<12)
+#define BNX2_MISC_DUAL_MEDIA_CTRL_SERDES0_SIGDET	 (1L<<13)
+#define BNX2_MISC_DUAL_MEDIA_CTRL_PHY1_SIGDET		 (1L<<14)
+#define BNX2_MISC_DUAL_MEDIA_CTRL_PHY0_SIGDET		 (1L<<15)
+#define BNX2_MISC_DUAL_MEDIA_CTRL_LCPLL_RST		 (1L<<16)
+#define BNX2_MISC_DUAL_MEDIA_CTRL_SERDES1_RST		 (1L<<17)
+#define BNX2_MISC_DUAL_MEDIA_CTRL_SERDES0_RST		 (1L<<18)
+#define BNX2_MISC_DUAL_MEDIA_CTRL_PHY1_RST		 (1L<<19)
+#define BNX2_MISC_DUAL_MEDIA_CTRL_PHY0_RST		 (1L<<20)
+#define BNX2_MISC_DUAL_MEDIA_CTRL_PHY_CTRL		 (0x7L<<21)
+#define BNX2_MISC_DUAL_MEDIA_CTRL_PORT_SWAP		 (1L<<24)
+#define BNX2_MISC_DUAL_MEDIA_CTRL_STRAP_OVERRIDE	 (1L<<25)
+#define BNX2_MISC_DUAL_MEDIA_CTRL_PHY_SERDES_IDDQ	 (0xfL<<26)
+#define BNX2_MISC_DUAL_MEDIA_CTRL_PHY_SERDES_IDDQ_SER1_IDDQ	 (1L<<26)
+#define BNX2_MISC_DUAL_MEDIA_CTRL_PHY_SERDES_IDDQ_SER0_IDDQ	 (2L<<26)
+#define BNX2_MISC_DUAL_MEDIA_CTRL_PHY_SERDES_IDDQ_PHY1_IDDQ	 (4L<<26)
+#define BNX2_MISC_DUAL_MEDIA_CTRL_PHY_SERDES_IDDQ_PHY0_IDDQ	 (8L<<26)
+
+#define BNX2_MISC_OTP_CMD1				0x000008f0
+#define BNX2_MISC_OTP_CMD1_FMODE			 (0x7L<<0)
+#define BNX2_MISC_OTP_CMD1_FMODE_IDLE			 (0L<<0)
+#define BNX2_MISC_OTP_CMD1_FMODE_WRITE			 (1L<<0)
+#define BNX2_MISC_OTP_CMD1_FMODE_INIT			 (2L<<0)
+#define BNX2_MISC_OTP_CMD1_FMODE_SET			 (3L<<0)
+#define BNX2_MISC_OTP_CMD1_FMODE_RST			 (4L<<0)
+#define BNX2_MISC_OTP_CMD1_FMODE_VERIFY			 (5L<<0)
+#define BNX2_MISC_OTP_CMD1_FMODE_RESERVED0		 (6L<<0)
+#define BNX2_MISC_OTP_CMD1_FMODE_RESERVED1		 (7L<<0)
+#define BNX2_MISC_OTP_CMD1_USEPINS			 (1L<<8)
+#define BNX2_MISC_OTP_CMD1_PROGSEL			 (1L<<9)
+#define BNX2_MISC_OTP_CMD1_PROGSTART			 (1L<<10)
+#define BNX2_MISC_OTP_CMD1_PCOUNT			 (0x7L<<16)
+#define BNX2_MISC_OTP_CMD1_PBYP				 (1L<<19)
+#define BNX2_MISC_OTP_CMD1_VSEL				 (0xfL<<20)
+#define BNX2_MISC_OTP_CMD1_TM				 (0x7L<<27)
+#define BNX2_MISC_OTP_CMD1_SADBYP			 (1L<<30)
+#define BNX2_MISC_OTP_CMD1_DEBUG			 (1L<<31)
+
+#define BNX2_MISC_OTP_CMD2				0x000008f4
+#define BNX2_MISC_OTP_CMD2_OTP_ROM_ADDR			 (0x3ffL<<0)
+#define BNX2_MISC_OTP_CMD2_DOSEL			 (0x7fL<<16)
+#define BNX2_MISC_OTP_CMD2_DOSEL_0			 (0L<<16)
+#define BNX2_MISC_OTP_CMD2_DOSEL_1			 (1L<<16)
+#define BNX2_MISC_OTP_CMD2_DOSEL_127			 (127L<<16)
+
+#define BNX2_MISC_OTP_STATUS				0x000008f8
+#define BNX2_MISC_OTP_STATUS_DATA			 (0xffL<<0)
+#define BNX2_MISC_OTP_STATUS_VALID			 (1L<<8)
+#define BNX2_MISC_OTP_STATUS_BUSY			 (1L<<9)
+#define BNX2_MISC_OTP_STATUS_BUSYSM			 (1L<<10)
+#define BNX2_MISC_OTP_STATUS_DONE			 (1L<<11)
+
+#define BNX2_MISC_OTP_SHIFT1_CMD			0x000008fc
+#define BNX2_MISC_OTP_SHIFT1_CMD_RESET_MODE_N		 (1L<<0)
+#define BNX2_MISC_OTP_SHIFT1_CMD_SHIFT_DONE		 (1L<<1)
+#define BNX2_MISC_OTP_SHIFT1_CMD_SHIFT_START		 (1L<<2)
+#define BNX2_MISC_OTP_SHIFT1_CMD_LOAD_DATA		 (1L<<3)
+#define BNX2_MISC_OTP_SHIFT1_CMD_SHIFT_SELECT		 (0x1fL<<8)
+
+#define BNX2_MISC_OTP_SHIFT1_DATA			0x00000900
+#define BNX2_MISC_OTP_SHIFT2_CMD			0x00000904
+#define BNX2_MISC_OTP_SHIFT2_CMD_RESET_MODE_N		 (1L<<0)
+#define BNX2_MISC_OTP_SHIFT2_CMD_SHIFT_DONE		 (1L<<1)
+#define BNX2_MISC_OTP_SHIFT2_CMD_SHIFT_START		 (1L<<2)
+#define BNX2_MISC_OTP_SHIFT2_CMD_LOAD_DATA		 (1L<<3)
+#define BNX2_MISC_OTP_SHIFT2_CMD_SHIFT_SELECT		 (0x1fL<<8)
+
+#define BNX2_MISC_OTP_SHIFT2_DATA			0x00000908
+#define BNX2_MISC_BIST_CS0				0x0000090c
+#define BNX2_MISC_BIST_CS0_MBIST_EN			 (1L<<0)
+#define BNX2_MISC_BIST_CS0_BIST_SETUP			 (0x3L<<1)
+#define BNX2_MISC_BIST_CS0_MBIST_ASYNC_RESET		 (1L<<3)
+#define BNX2_MISC_BIST_CS0_MBIST_DONE			 (1L<<8)
+#define BNX2_MISC_BIST_CS0_MBIST_GO			 (1L<<9)
+#define BNX2_MISC_BIST_CS0_BIST_OVERRIDE		 (1L<<31)
+
+#define BNX2_MISC_BIST_MEMSTATUS0			0x00000910
+#define BNX2_MISC_BIST_CS1				0x00000914
+#define BNX2_MISC_BIST_CS1_MBIST_EN			 (1L<<0)
+#define BNX2_MISC_BIST_CS1_BIST_SETUP			 (0x3L<<1)
+#define BNX2_MISC_BIST_CS1_MBIST_ASYNC_RESET		 (1L<<3)
+#define BNX2_MISC_BIST_CS1_MBIST_DONE			 (1L<<8)
+#define BNX2_MISC_BIST_CS1_MBIST_GO			 (1L<<9)
+
+#define BNX2_MISC_BIST_MEMSTATUS1			0x00000918
+#define BNX2_MISC_BIST_CS2				0x0000091c
+#define BNX2_MISC_BIST_CS2_MBIST_EN			 (1L<<0)
+#define BNX2_MISC_BIST_CS2_BIST_SETUP			 (0x3L<<1)
+#define BNX2_MISC_BIST_CS2_MBIST_ASYNC_RESET		 (1L<<3)
+#define BNX2_MISC_BIST_CS2_MBIST_DONE			 (1L<<8)
+#define BNX2_MISC_BIST_CS2_MBIST_GO			 (1L<<9)
+
+#define BNX2_MISC_BIST_MEMSTATUS2			0x00000920
+#define BNX2_MISC_BIST_CS3				0x00000924
+#define BNX2_MISC_BIST_CS3_MBIST_EN			 (1L<<0)
+#define BNX2_MISC_BIST_CS3_BIST_SETUP			 (0x3L<<1)
+#define BNX2_MISC_BIST_CS3_MBIST_ASYNC_RESET		 (1L<<3)
+#define BNX2_MISC_BIST_CS3_MBIST_DONE			 (1L<<8)
+#define BNX2_MISC_BIST_CS3_MBIST_GO			 (1L<<9)
+
+#define BNX2_MISC_BIST_MEMSTATUS3			0x00000928
+#define BNX2_MISC_BIST_CS4				0x0000092c
+#define BNX2_MISC_BIST_CS4_MBIST_EN			 (1L<<0)
+#define BNX2_MISC_BIST_CS4_BIST_SETUP			 (0x3L<<1)
+#define BNX2_MISC_BIST_CS4_MBIST_ASYNC_RESET		 (1L<<3)
+#define BNX2_MISC_BIST_CS4_MBIST_DONE			 (1L<<8)
+#define BNX2_MISC_BIST_CS4_MBIST_GO			 (1L<<9)
+
+#define BNX2_MISC_BIST_MEMSTATUS4			0x00000930
+#define BNX2_MISC_BIST_CS5				0x00000934
+#define BNX2_MISC_BIST_CS5_MBIST_EN			 (1L<<0)
+#define BNX2_MISC_BIST_CS5_BIST_SETUP			 (0x3L<<1)
+#define BNX2_MISC_BIST_CS5_MBIST_ASYNC_RESET		 (1L<<3)
+#define BNX2_MISC_BIST_CS5_MBIST_DONE			 (1L<<8)
+#define BNX2_MISC_BIST_CS5_MBIST_GO			 (1L<<9)
+
+#define BNX2_MISC_BIST_MEMSTATUS5			0x00000938
+#define BNX2_MISC_MEM_TM0				0x0000093c
+#define BNX2_MISC_MEM_TM0_PCIE_REPLAY_TM		 (0xfL<<0)
+#define BNX2_MISC_MEM_TM0_MCP_SCPAD			 (0xfL<<8)
+#define BNX2_MISC_MEM_TM0_UMP_TM			 (0xffL<<16)
+#define BNX2_MISC_MEM_TM0_HB_MEM_TM			 (0xfL<<24)
+
+#define BNX2_MISC_USPLL_CTRL				0x00000940
+#define BNX2_MISC_USPLL_CTRL_PH_DET_DIS			 (1L<<0)
+#define BNX2_MISC_USPLL_CTRL_FREQ_DET_DIS		 (1L<<1)
+#define BNX2_MISC_USPLL_CTRL_LCPX			 (0x3fL<<2)
+#define BNX2_MISC_USPLL_CTRL_RX				 (0x3L<<8)
+#define BNX2_MISC_USPLL_CTRL_VC_EN			 (1L<<10)
+#define BNX2_MISC_USPLL_CTRL_VCO_MG			 (0x3L<<11)
+#define BNX2_MISC_USPLL_CTRL_KVCO_XF			 (0x7L<<13)
+#define BNX2_MISC_USPLL_CTRL_KVCO_XS			 (0x7L<<16)
+#define BNX2_MISC_USPLL_CTRL_TESTD_EN			 (1L<<19)
+#define BNX2_MISC_USPLL_CTRL_TESTD_SEL			 (0x7L<<20)
+#define BNX2_MISC_USPLL_CTRL_TESTA_EN			 (1L<<23)
+#define BNX2_MISC_USPLL_CTRL_TESTA_SEL			 (0x3L<<24)
+#define BNX2_MISC_USPLL_CTRL_ATTEN_FREF			 (1L<<26)
+#define BNX2_MISC_USPLL_CTRL_DIGITAL_RST		 (1L<<27)
+#define BNX2_MISC_USPLL_CTRL_ANALOG_RST			 (1L<<28)
+#define BNX2_MISC_USPLL_CTRL_LOCK			 (1L<<29)
+
+#define BNX2_MISC_PERR_STATUS0				0x00000944
+#define BNX2_MISC_PERR_STATUS0_COM_DMAE_PERR		 (1L<<0)
+#define BNX2_MISC_PERR_STATUS0_CP_DMAE_PERR		 (1L<<1)
+#define BNX2_MISC_PERR_STATUS0_RPM_ACPIBEMEM_PERR	 (1L<<2)
+#define BNX2_MISC_PERR_STATUS0_CTX_USAGE_CNT_PERR	 (1L<<3)
+#define BNX2_MISC_PERR_STATUS0_CTX_PGTBL_PERR		 (1L<<4)
+#define BNX2_MISC_PERR_STATUS0_CTX_CACHE_PERR		 (1L<<5)
+#define BNX2_MISC_PERR_STATUS0_CTX_MIRROR_PERR		 (1L<<6)
+#define BNX2_MISC_PERR_STATUS0_COM_CTXC_PERR		 (1L<<7)
+#define BNX2_MISC_PERR_STATUS0_COM_SCPAD_PERR		 (1L<<8)
+#define BNX2_MISC_PERR_STATUS0_CP_CTXC_PERR		 (1L<<9)
+#define BNX2_MISC_PERR_STATUS0_CP_SCPAD_PERR		 (1L<<10)
+#define BNX2_MISC_PERR_STATUS0_RXP_RBUFC_PERR		 (1L<<11)
+#define BNX2_MISC_PERR_STATUS0_RXP_CTXC_PERR		 (1L<<12)
+#define BNX2_MISC_PERR_STATUS0_RXP_SCPAD_PERR		 (1L<<13)
+#define BNX2_MISC_PERR_STATUS0_TPAT_SCPAD_PERR		 (1L<<14)
+#define BNX2_MISC_PERR_STATUS0_TXP_CTXC_PERR		 (1L<<15)
+#define BNX2_MISC_PERR_STATUS0_TXP_SCPAD_PERR		 (1L<<16)
+#define BNX2_MISC_PERR_STATUS0_CS_TMEM_PERR		 (1L<<17)
+#define BNX2_MISC_PERR_STATUS0_MQ_CTX_PERR		 (1L<<18)
+#define BNX2_MISC_PERR_STATUS0_RPM_DFIFOMEM_PERR	 (1L<<19)
+#define BNX2_MISC_PERR_STATUS0_RPC_DFIFOMEM_PERR	 (1L<<20)
+#define BNX2_MISC_PERR_STATUS0_RBUF_PTRMEM_PERR		 (1L<<21)
+#define BNX2_MISC_PERR_STATUS0_RBUF_DATAMEM_PERR	 (1L<<22)
+#define BNX2_MISC_PERR_STATUS0_RV2P_P2IRAM_PERR		 (1L<<23)
+#define BNX2_MISC_PERR_STATUS0_RV2P_P1IRAM_PERR		 (1L<<24)
+#define BNX2_MISC_PERR_STATUS0_RV2P_CB1REGS_PERR	 (1L<<25)
+#define BNX2_MISC_PERR_STATUS0_RV2P_CB0REGS_PERR	 (1L<<26)
+#define BNX2_MISC_PERR_STATUS0_TPBUF_PERR		 (1L<<27)
+#define BNX2_MISC_PERR_STATUS0_THBUF_PERR		 (1L<<28)
+#define BNX2_MISC_PERR_STATUS0_TDMA_PERR		 (1L<<29)
+#define BNX2_MISC_PERR_STATUS0_TBDC_PERR		 (1L<<30)
+#define BNX2_MISC_PERR_STATUS0_TSCH_LR_PERR		 (1L<<31)
+
+#define BNX2_MISC_PERR_STATUS1				0x00000948
+#define BNX2_MISC_PERR_STATUS1_RBDC_PERR		 (1L<<0)
+#define BNX2_MISC_PERR_STATUS1_RDMA_DFIFO_PERR		 (1L<<2)
+#define BNX2_MISC_PERR_STATUS1_HC_STATS_PERR		 (1L<<3)
+#define BNX2_MISC_PERR_STATUS1_HC_MSIX_PERR		 (1L<<4)
+#define BNX2_MISC_PERR_STATUS1_HC_PRODUCSTB_PERR	 (1L<<5)
+#define BNX2_MISC_PERR_STATUS1_HC_CONSUMSTB_PERR	 (1L<<6)
+#define BNX2_MISC_PERR_STATUS1_TPATQ_PERR		 (1L<<7)
+#define BNX2_MISC_PERR_STATUS1_MCPQ_PERR		 (1L<<8)
+#define BNX2_MISC_PERR_STATUS1_TDMAQ_PERR		 (1L<<9)
+#define BNX2_MISC_PERR_STATUS1_TXPQ_PERR		 (1L<<10)
+#define BNX2_MISC_PERR_STATUS1_COMTQ_PERR		 (1L<<11)
+#define BNX2_MISC_PERR_STATUS1_COMQ_PERR		 (1L<<12)
+#define BNX2_MISC_PERR_STATUS1_RLUPQ_PERR		 (1L<<13)
+#define BNX2_MISC_PERR_STATUS1_RXPQ_PERR		 (1L<<14)
+#define BNX2_MISC_PERR_STATUS1_RV2PPQ_PERR		 (1L<<15)
+#define BNX2_MISC_PERR_STATUS1_RDMAQ_PERR		 (1L<<16)
+#define BNX2_MISC_PERR_STATUS1_TASQ_PERR		 (1L<<17)
+#define BNX2_MISC_PERR_STATUS1_TBDRQ_PERR		 (1L<<18)
+#define BNX2_MISC_PERR_STATUS1_TSCHQ_PERR		 (1L<<19)
+#define BNX2_MISC_PERR_STATUS1_COMXQ_PERR		 (1L<<20)
+#define BNX2_MISC_PERR_STATUS1_RXPCQ_PERR		 (1L<<21)
+#define BNX2_MISC_PERR_STATUS1_RV2PTQ_PERR		 (1L<<22)
+#define BNX2_MISC_PERR_STATUS1_RV2PMQ_PERR		 (1L<<23)
+#define BNX2_MISC_PERR_STATUS1_CPQ_PERR			 (1L<<24)
+#define BNX2_MISC_PERR_STATUS1_CSQ_PERR			 (1L<<25)
+#define BNX2_MISC_PERR_STATUS1_RLUP_CID_PERR		 (1L<<26)
+#define BNX2_MISC_PERR_STATUS1_RV2PCS_TMEM_PERR		 (1L<<27)
+#define BNX2_MISC_PERR_STATUS1_RV2PCSQ_PERR		 (1L<<28)
+#define BNX2_MISC_PERR_STATUS1_MQ_IDX_PERR		 (1L<<29)
+
+#define BNX2_MISC_PERR_STATUS2				0x0000094c
+#define BNX2_MISC_PERR_STATUS2_TGT_FIFO_PERR		 (1L<<0)
+#define BNX2_MISC_PERR_STATUS2_UMP_TX_PERR		 (1L<<1)
+#define BNX2_MISC_PERR_STATUS2_UMP_RX_PERR		 (1L<<2)
+#define BNX2_MISC_PERR_STATUS2_MCP_ROM_PERR		 (1L<<3)
+#define BNX2_MISC_PERR_STATUS2_MCP_SCPAD_PERR		 (1L<<4)
+#define BNX2_MISC_PERR_STATUS2_HB_MEM_PERR		 (1L<<5)
+#define BNX2_MISC_PERR_STATUS2_PCIE_REPLAY_PERR		 (1L<<6)
+
+#define BNX2_MISC_LCPLL_CTRL0				0x00000950
+#define BNX2_MISC_LCPLL_CTRL0_OAC			 (0x7L<<0)
+#define BNX2_MISC_LCPLL_CTRL0_OAC_NEGTWENTY		 (0L<<0)
+#define BNX2_MISC_LCPLL_CTRL0_OAC_ZERO			 (1L<<0)
+#define BNX2_MISC_LCPLL_CTRL0_OAC_TWENTY		 (3L<<0)
+#define BNX2_MISC_LCPLL_CTRL0_OAC_FORTY			 (7L<<0)
+#define BNX2_MISC_LCPLL_CTRL0_ICP_CTRL			 (0x7L<<3)
+#define BNX2_MISC_LCPLL_CTRL0_ICP_CTRL_360		 (0L<<3)
+#define BNX2_MISC_LCPLL_CTRL0_ICP_CTRL_480		 (1L<<3)
+#define BNX2_MISC_LCPLL_CTRL0_ICP_CTRL_600		 (3L<<3)
+#define BNX2_MISC_LCPLL_CTRL0_ICP_CTRL_720		 (7L<<3)
+#define BNX2_MISC_LCPLL_CTRL0_BIAS_CTRL			 (0x3L<<6)
+#define BNX2_MISC_LCPLL_CTRL0_PLL_OBSERVE		 (0x7L<<8)
+#define BNX2_MISC_LCPLL_CTRL0_VTH_CTRL			 (0x3L<<11)
+#define BNX2_MISC_LCPLL_CTRL0_VTH_CTRL_0		 (0L<<11)
+#define BNX2_MISC_LCPLL_CTRL0_VTH_CTRL_1		 (1L<<11)
+#define BNX2_MISC_LCPLL_CTRL0_VTH_CTRL_2		 (2L<<11)
+#define BNX2_MISC_LCPLL_CTRL0_PLLSEQSTART		 (1L<<13)
+#define BNX2_MISC_LCPLL_CTRL0_RESERVED			 (1L<<14)
+#define BNX2_MISC_LCPLL_CTRL0_CAPRETRY_EN		 (1L<<15)
+#define BNX2_MISC_LCPLL_CTRL0_FREQMONITOR_EN		 (1L<<16)
+#define BNX2_MISC_LCPLL_CTRL0_FREQDETRESTART_EN		 (1L<<17)
+#define BNX2_MISC_LCPLL_CTRL0_FREQDETRETRY_EN		 (1L<<18)
+#define BNX2_MISC_LCPLL_CTRL0_PLLFORCEFDONE_EN		 (1L<<19)
+#define BNX2_MISC_LCPLL_CTRL0_PLLFORCEFDONE		 (1L<<20)
+#define BNX2_MISC_LCPLL_CTRL0_PLLFORCEFPASS		 (1L<<21)
+#define BNX2_MISC_LCPLL_CTRL0_PLLFORCECAPDONE_EN	 (1L<<22)
+#define BNX2_MISC_LCPLL_CTRL0_PLLFORCECAPDONE		 (1L<<23)
+#define BNX2_MISC_LCPLL_CTRL0_PLLFORCECAPPASS_EN	 (1L<<24)
+#define BNX2_MISC_LCPLL_CTRL0_PLLFORCECAPPASS		 (1L<<25)
+#define BNX2_MISC_LCPLL_CTRL0_CAPRESTART		 (1L<<26)
+#define BNX2_MISC_LCPLL_CTRL0_CAPSELECTM_EN		 (1L<<27)
+
+#define BNX2_MISC_LCPLL_CTRL1				0x00000954
+#define BNX2_MISC_LCPLL_CTRL1_CAPSELECTM		 (0x1fL<<0)
+#define BNX2_MISC_LCPLL_CTRL1_CAPFORCESLOWDOWN_EN	 (1L<<5)
+#define BNX2_MISC_LCPLL_CTRL1_CAPFORCESLOWDOWN		 (1L<<6)
+#define BNX2_MISC_LCPLL_CTRL1_SLOWDN_XOR		 (1L<<7)
+
+#define BNX2_MISC_LCPLL_STATUS				0x00000958
+#define BNX2_MISC_LCPLL_STATUS_FREQDONE_SM		 (1L<<0)
+#define BNX2_MISC_LCPLL_STATUS_FREQPASS_SM		 (1L<<1)
+#define BNX2_MISC_LCPLL_STATUS_PLLSEQDONE		 (1L<<2)
+#define BNX2_MISC_LCPLL_STATUS_PLLSEQPASS		 (1L<<3)
+#define BNX2_MISC_LCPLL_STATUS_PLLSTATE			 (0x7L<<4)
+#define BNX2_MISC_LCPLL_STATUS_CAPSTATE			 (0x7L<<7)
+#define BNX2_MISC_LCPLL_STATUS_CAPSELECT		 (0x1fL<<10)
+#define BNX2_MISC_LCPLL_STATUS_SLOWDN_INDICATOR		 (1L<<15)
+#define BNX2_MISC_LCPLL_STATUS_SLOWDN_INDICATOR_0	 (0L<<15)
+#define BNX2_MISC_LCPLL_STATUS_SLOWDN_INDICATOR_1	 (1L<<15)
+
+#define BNX2_MISC_OSCFUNDS_CTRL				0x0000095c
+#define BNX2_MISC_OSCFUNDS_CTRL_FREQ_MON		 (1L<<5)
+#define BNX2_MISC_OSCFUNDS_CTRL_FREQ_MON_OFF		 (0L<<5)
+#define BNX2_MISC_OSCFUNDS_CTRL_FREQ_MON_ON		 (1L<<5)
+#define BNX2_MISC_OSCFUNDS_CTRL_XTAL_ADJCM		 (0x3L<<6)
+#define BNX2_MISC_OSCFUNDS_CTRL_XTAL_ADJCM_0		 (0L<<6)
+#define BNX2_MISC_OSCFUNDS_CTRL_XTAL_ADJCM_1		 (1L<<6)
+#define BNX2_MISC_OSCFUNDS_CTRL_XTAL_ADJCM_2		 (2L<<6)
+#define BNX2_MISC_OSCFUNDS_CTRL_XTAL_ADJCM_3		 (3L<<6)
+#define BNX2_MISC_OSCFUNDS_CTRL_ICBUF_ADJ		 (0x3L<<8)
+#define BNX2_MISC_OSCFUNDS_CTRL_ICBUF_ADJ_0		 (0L<<8)
+#define BNX2_MISC_OSCFUNDS_CTRL_ICBUF_ADJ_1		 (1L<<8)
+#define BNX2_MISC_OSCFUNDS_CTRL_ICBUF_ADJ_2		 (2L<<8)
+#define BNX2_MISC_OSCFUNDS_CTRL_ICBUF_ADJ_3		 (3L<<8)
+#define BNX2_MISC_OSCFUNDS_CTRL_IAMP_ADJ		 (0x3L<<10)
+#define BNX2_MISC_OSCFUNDS_CTRL_IAMP_ADJ_0		 (0L<<10)
+#define BNX2_MISC_OSCFUNDS_CTRL_IAMP_ADJ_1		 (1L<<10)
+#define BNX2_MISC_OSCFUNDS_CTRL_IAMP_ADJ_2		 (2L<<10)
+#define BNX2_MISC_OSCFUNDS_CTRL_IAMP_ADJ_3		 (3L<<10)
+
+/*
+ *  tbdc definition
+ *  offset: 0x5400
+ */
+#define BNX2_TBDC_COMMAND                               0x5400
+#define BNX2_TBDC_COMMAND_CMD_ENABLED                    (1UL<<0)
+#define BNX2_TBDC_COMMAND_CMD_FLUSH                      (1UL<<1)
+#define BNX2_TBDC_COMMAND_CMD_SOFT_RST                   (1UL<<2)
+#define BNX2_TBDC_COMMAND_CMD_REG_ARB                    (1UL<<3)
+#define BNX2_TBDC_COMMAND_WRCHK_RANGE_ERROR              (1UL<<4)
+#define BNX2_TBDC_COMMAND_WRCHK_ALL_ONES_ERROR           (1UL<<5)
+#define BNX2_TBDC_COMMAND_WRCHK_ALL_ZEROS_ERROR          (1UL<<6)
+#define BNX2_TBDC_COMMAND_WRCHK_ANY_ONES_ERROR           (1UL<<7)
+#define BNX2_TBDC_COMMAND_WRCHK_ANY_ZEROS_ERROR          (1UL<<8)
+
+#define BNX2_TBDC_STATUS				0x5404
+#define BNX2_TBDC_STATUS_FREE_CNT                        (0x3fUL<<0)
+
+#define BNX2_TBDC_BD_ADDR                               0x5424
+
+#define BNX2_TBDC_BIDX                                  0x542c
+#define BNX2_TBDC_BDIDX_BDIDX                            (0xffffUL<<0)
+#define BNX2_TBDC_BDIDX_CMD                              (0xffUL<<24)
+
+#define BNX2_TBDC_CID                                   0x5430
+
+#define BNX2_TBDC_CAM_OPCODE                            0x5434
+#define BNX2_TBDC_CAM_OPCODE_OPCODE                      (0x7UL<<0)
+#define BNX2_TBDC_CAM_OPCODE_OPCODE_SEARCH               (0UL<<0)
+#define BNX2_TBDC_CAM_OPCODE_OPCODE_CACHE_WRITE          (1UL<<0)
+#define BNX2_TBDC_CAM_OPCODE_OPCODE_INVALIDATE           (2UL<<0)
+#define BNX2_TBDC_CAM_OPCODE_OPCODE_CAM_WRITE            (4UL<<0)
+#define BNX2_TBDC_CAM_OPCODE_OPCODE_CAM_READ             (5UL<<0)
+#define BNX2_TBDC_CAM_OPCODE_OPCODE_RAM_WRITE            (6UL<<0)
+#define BNX2_TBDC_CAM_OPCODE_OPCODE_RAM_READ             (7UL<<0)
+#define BNX2_TBDC_CAM_OPCODE_SMASK_BDIDX                 (1UL<<4)
+#define BNX2_TBDC_CAM_OPCODE_SMASK_CID                   (1UL<<5)
+#define BNX2_TBDC_CAM_OPCODE_SMASK_CMD                   (1UL<<6)
+#define BNX2_TBDC_CAM_OPCODE_WMT_FAILED                  (1UL<<7)
+#define BNX2_TBDC_CAM_OPCODE_CAM_VALIDS                  (0xffUL<<8)
+
+/*
+ *  nvm_reg definition
+ *  offset: 0x6400
+ */
+#define BNX2_NVM_COMMAND				0x00006400
+#define BNX2_NVM_COMMAND_RST				 (1L<<0)
+#define BNX2_NVM_COMMAND_DONE				 (1L<<3)
+#define BNX2_NVM_COMMAND_DOIT				 (1L<<4)
+#define BNX2_NVM_COMMAND_WR				 (1L<<5)
+#define BNX2_NVM_COMMAND_ERASE				 (1L<<6)
+#define BNX2_NVM_COMMAND_FIRST				 (1L<<7)
+#define BNX2_NVM_COMMAND_LAST				 (1L<<8)
+#define BNX2_NVM_COMMAND_WREN				 (1L<<16)
+#define BNX2_NVM_COMMAND_WRDI				 (1L<<17)
+#define BNX2_NVM_COMMAND_EWSR				 (1L<<18)
+#define BNX2_NVM_COMMAND_WRSR				 (1L<<19)
+#define BNX2_NVM_COMMAND_RD_ID				 (1L<<20)
+#define BNX2_NVM_COMMAND_RD_STATUS			 (1L<<21)
+#define BNX2_NVM_COMMAND_MODE_256			 (1L<<22)
+
+#define BNX2_NVM_STATUS					0x00006404
+#define BNX2_NVM_STATUS_PI_FSM_STATE			 (0xfL<<0)
+#define BNX2_NVM_STATUS_EE_FSM_STATE			 (0xfL<<4)
+#define BNX2_NVM_STATUS_EQ_FSM_STATE			 (0xfL<<8)
+#define BNX2_NVM_STATUS_SPI_FSM_STATE_XI		 (0x1fL<<0)
+#define BNX2_NVM_STATUS_SPI_FSM_STATE_SPI_IDLE_XI	 (0L<<0)
+#define BNX2_NVM_STATUS_SPI_FSM_STATE_SPI_CMD0_XI	 (1L<<0)
+#define BNX2_NVM_STATUS_SPI_FSM_STATE_SPI_CMD1_XI	 (2L<<0)
+#define BNX2_NVM_STATUS_SPI_FSM_STATE_SPI_CMD_FINISH0_XI	 (3L<<0)
+#define BNX2_NVM_STATUS_SPI_FSM_STATE_SPI_CMD_FINISH1_XI	 (4L<<0)
+#define BNX2_NVM_STATUS_SPI_FSM_STATE_SPI_ADDR0_XI	 (5L<<0)
+#define BNX2_NVM_STATUS_SPI_FSM_STATE_SPI_WRITE_DATA0_XI	 (6L<<0)
+#define BNX2_NVM_STATUS_SPI_FSM_STATE_SPI_WRITE_DATA1_XI	 (7L<<0)
+#define BNX2_NVM_STATUS_SPI_FSM_STATE_SPI_WRITE_DATA2_XI	 (8L<<0)
+#define BNX2_NVM_STATUS_SPI_FSM_STATE_SPI_READ_DATA0_XI	 (9L<<0)
+#define BNX2_NVM_STATUS_SPI_FSM_STATE_SPI_READ_DATA1_XI	 (10L<<0)
+#define BNX2_NVM_STATUS_SPI_FSM_STATE_SPI_READ_DATA2_XI	 (11L<<0)
+#define BNX2_NVM_STATUS_SPI_FSM_STATE_SPI_READ_STATUS_RDID0_XI	 (12L<<0)
+#define BNX2_NVM_STATUS_SPI_FSM_STATE_SPI_READ_STATUS_RDID1_XI	 (13L<<0)
+#define BNX2_NVM_STATUS_SPI_FSM_STATE_SPI_READ_STATUS_RDID2_XI	 (14L<<0)
+#define BNX2_NVM_STATUS_SPI_FSM_STATE_SPI_READ_STATUS_RDID3_XI	 (15L<<0)
+#define BNX2_NVM_STATUS_SPI_FSM_STATE_SPI_READ_STATUS_RDID4_XI	 (16L<<0)
+#define BNX2_NVM_STATUS_SPI_FSM_STATE_SPI_CHECK_BUSY0_XI	 (17L<<0)
+#define BNX2_NVM_STATUS_SPI_FSM_STATE_SPI_ST_WREN_XI	 (18L<<0)
+#define BNX2_NVM_STATUS_SPI_FSM_STATE_SPI_WAIT_XI	 (19L<<0)
+
+#define BNX2_NVM_WRITE					0x00006408
+#define BNX2_NVM_WRITE_NVM_WRITE_VALUE			 (0xffffffffL<<0)
+#define BNX2_NVM_WRITE_NVM_WRITE_VALUE_BIT_BANG		 (0L<<0)
+#define BNX2_NVM_WRITE_NVM_WRITE_VALUE_EECLK		 (1L<<0)
+#define BNX2_NVM_WRITE_NVM_WRITE_VALUE_EEDATA		 (2L<<0)
+#define BNX2_NVM_WRITE_NVM_WRITE_VALUE_SCLK		 (4L<<0)
+#define BNX2_NVM_WRITE_NVM_WRITE_VALUE_CS_B		 (8L<<0)
+#define BNX2_NVM_WRITE_NVM_WRITE_VALUE_SO		 (16L<<0)
+#define BNX2_NVM_WRITE_NVM_WRITE_VALUE_SI		 (32L<<0)
+#define BNX2_NVM_WRITE_NVM_WRITE_VALUE_SI_XI		 (1L<<0)
+#define BNX2_NVM_WRITE_NVM_WRITE_VALUE_SO_XI		 (2L<<0)
+#define BNX2_NVM_WRITE_NVM_WRITE_VALUE_CS_B_XI		 (4L<<0)
+#define BNX2_NVM_WRITE_NVM_WRITE_VALUE_SCLK_XI		 (8L<<0)
+
+#define BNX2_NVM_ADDR					0x0000640c
+#define BNX2_NVM_ADDR_NVM_ADDR_VALUE			 (0xffffffL<<0)
+#define BNX2_NVM_ADDR_NVM_ADDR_VALUE_BIT_BANG		 (0L<<0)
+#define BNX2_NVM_ADDR_NVM_ADDR_VALUE_EECLK		 (1L<<0)
+#define BNX2_NVM_ADDR_NVM_ADDR_VALUE_EEDATA		 (2L<<0)
+#define BNX2_NVM_ADDR_NVM_ADDR_VALUE_SCLK		 (4L<<0)
+#define BNX2_NVM_ADDR_NVM_ADDR_VALUE_CS_B		 (8L<<0)
+#define BNX2_NVM_ADDR_NVM_ADDR_VALUE_SO			 (16L<<0)
+#define BNX2_NVM_ADDR_NVM_ADDR_VALUE_SI			 (32L<<0)
+#define BNX2_NVM_ADDR_NVM_ADDR_VALUE_SI_XI		 (1L<<0)
+#define BNX2_NVM_ADDR_NVM_ADDR_VALUE_SO_XI		 (2L<<0)
+#define BNX2_NVM_ADDR_NVM_ADDR_VALUE_CS_B_XI		 (4L<<0)
+#define BNX2_NVM_ADDR_NVM_ADDR_VALUE_SCLK_XI		 (8L<<0)
+
+#define BNX2_NVM_READ					0x00006410
+#define BNX2_NVM_READ_NVM_READ_VALUE			 (0xffffffffL<<0)
+#define BNX2_NVM_READ_NVM_READ_VALUE_BIT_BANG		 (0L<<0)
+#define BNX2_NVM_READ_NVM_READ_VALUE_EECLK		 (1L<<0)
+#define BNX2_NVM_READ_NVM_READ_VALUE_EEDATA		 (2L<<0)
+#define BNX2_NVM_READ_NVM_READ_VALUE_SCLK		 (4L<<0)
+#define BNX2_NVM_READ_NVM_READ_VALUE_CS_B		 (8L<<0)
+#define BNX2_NVM_READ_NVM_READ_VALUE_SO			 (16L<<0)
+#define BNX2_NVM_READ_NVM_READ_VALUE_SI			 (32L<<0)
+#define BNX2_NVM_READ_NVM_READ_VALUE_SI_XI		 (1L<<0)
+#define BNX2_NVM_READ_NVM_READ_VALUE_SO_XI		 (2L<<0)
+#define BNX2_NVM_READ_NVM_READ_VALUE_CS_B_XI		 (4L<<0)
+#define BNX2_NVM_READ_NVM_READ_VALUE_SCLK_XI		 (8L<<0)
+
+#define BNX2_NVM_CFG1					0x00006414
+#define BNX2_NVM_CFG1_FLASH_MODE			 (1L<<0)
+#define BNX2_NVM_CFG1_BUFFER_MODE			 (1L<<1)
+#define BNX2_NVM_CFG1_PASS_MODE				 (1L<<2)
+#define BNX2_NVM_CFG1_BITBANG_MODE			 (1L<<3)
+#define BNX2_NVM_CFG1_STATUS_BIT			 (0x7L<<4)
+#define BNX2_NVM_CFG1_STATUS_BIT_FLASH_RDY		 (0L<<4)
+#define BNX2_NVM_CFG1_STATUS_BIT_BUFFER_RDY		 (7L<<4)
+#define BNX2_NVM_CFG1_SPI_CLK_DIV			 (0xfL<<7)
+#define BNX2_NVM_CFG1_SEE_CLK_DIV			 (0x7ffL<<11)
+#define BNX2_NVM_CFG1_STRAP_CONTROL_0			 (1L<<23)
+#define BNX2_NVM_CFG1_PROTECT_MODE			 (1L<<24)
+#define BNX2_NVM_CFG1_FLASH_SIZE			 (1L<<25)
+#define BNX2_NVM_CFG1_FW_USTRAP_1			 (1L<<26)
+#define BNX2_NVM_CFG1_FW_USTRAP_0			 (1L<<27)
+#define BNX2_NVM_CFG1_FW_USTRAP_2			 (1L<<28)
+#define BNX2_NVM_CFG1_FW_USTRAP_3			 (1L<<29)
+#define BNX2_NVM_CFG1_FW_FLASH_TYPE_EN			 (1L<<30)
+#define BNX2_NVM_CFG1_COMPAT_BYPASSS			 (1L<<31)
+
+#define BNX2_NVM_CFG2					0x00006418
+#define BNX2_NVM_CFG2_ERASE_CMD				 (0xffL<<0)
+#define BNX2_NVM_CFG2_DUMMY				 (0xffL<<8)
+#define BNX2_NVM_CFG2_STATUS_CMD			 (0xffL<<16)
+#define BNX2_NVM_CFG2_READ_ID				 (0xffL<<24)
+
+#define BNX2_NVM_CFG3					0x0000641c
+#define BNX2_NVM_CFG3_BUFFER_RD_CMD			 (0xffL<<0)
+#define BNX2_NVM_CFG3_WRITE_CMD				 (0xffL<<8)
+#define BNX2_NVM_CFG3_BUFFER_WRITE_CMD			 (0xffL<<16)
+#define BNX2_NVM_CFG3_READ_CMD				 (0xffL<<24)
+
+#define BNX2_NVM_SW_ARB					0x00006420
+#define BNX2_NVM_SW_ARB_ARB_REQ_SET0			 (1L<<0)
+#define BNX2_NVM_SW_ARB_ARB_REQ_SET1			 (1L<<1)
+#define BNX2_NVM_SW_ARB_ARB_REQ_SET2			 (1L<<2)
+#define BNX2_NVM_SW_ARB_ARB_REQ_SET3			 (1L<<3)
+#define BNX2_NVM_SW_ARB_ARB_REQ_CLR0			 (1L<<4)
+#define BNX2_NVM_SW_ARB_ARB_REQ_CLR1			 (1L<<5)
+#define BNX2_NVM_SW_ARB_ARB_REQ_CLR2			 (1L<<6)
+#define BNX2_NVM_SW_ARB_ARB_REQ_CLR3			 (1L<<7)
+#define BNX2_NVM_SW_ARB_ARB_ARB0			 (1L<<8)
+#define BNX2_NVM_SW_ARB_ARB_ARB1			 (1L<<9)
+#define BNX2_NVM_SW_ARB_ARB_ARB2			 (1L<<10)
+#define BNX2_NVM_SW_ARB_ARB_ARB3			 (1L<<11)
+#define BNX2_NVM_SW_ARB_REQ0				 (1L<<12)
+#define BNX2_NVM_SW_ARB_REQ1				 (1L<<13)
+#define BNX2_NVM_SW_ARB_REQ2				 (1L<<14)
+#define BNX2_NVM_SW_ARB_REQ3				 (1L<<15)
+
+#define BNX2_NVM_ACCESS_ENABLE				0x00006424
+#define BNX2_NVM_ACCESS_ENABLE_EN			 (1L<<0)
+#define BNX2_NVM_ACCESS_ENABLE_WR_EN			 (1L<<1)
+
+#define BNX2_NVM_WRITE1					0x00006428
+#define BNX2_NVM_WRITE1_WREN_CMD			 (0xffL<<0)
+#define BNX2_NVM_WRITE1_WRDI_CMD			 (0xffL<<8)
+#define BNX2_NVM_WRITE1_SR_DATA				 (0xffL<<16)
+
+#define BNX2_NVM_CFG4					0x0000642c
+#define BNX2_NVM_CFG4_FLASH_SIZE			 (0x7L<<0)
+#define BNX2_NVM_CFG4_FLASH_SIZE_1MBIT			 (0L<<0)
+#define BNX2_NVM_CFG4_FLASH_SIZE_2MBIT			 (1L<<0)
+#define BNX2_NVM_CFG4_FLASH_SIZE_4MBIT			 (2L<<0)
+#define BNX2_NVM_CFG4_FLASH_SIZE_8MBIT			 (3L<<0)
+#define BNX2_NVM_CFG4_FLASH_SIZE_16MBIT			 (4L<<0)
+#define BNX2_NVM_CFG4_FLASH_SIZE_32MBIT			 (5L<<0)
+#define BNX2_NVM_CFG4_FLASH_SIZE_64MBIT			 (6L<<0)
+#define BNX2_NVM_CFG4_FLASH_SIZE_128MBIT		 (7L<<0)
+#define BNX2_NVM_CFG4_FLASH_VENDOR			 (1L<<3)
+#define BNX2_NVM_CFG4_FLASH_VENDOR_ST			 (0L<<3)
+#define BNX2_NVM_CFG4_FLASH_VENDOR_ATMEL		 (1L<<3)
+#define BNX2_NVM_CFG4_MODE_256_EMPTY_BIT_LOC		 (0x3L<<4)
+#define BNX2_NVM_CFG4_MODE_256_EMPTY_BIT_LOC_BIT8	 (0L<<4)
+#define BNX2_NVM_CFG4_MODE_256_EMPTY_BIT_LOC_BIT9	 (1L<<4)
+#define BNX2_NVM_CFG4_MODE_256_EMPTY_BIT_LOC_BIT10	 (2L<<4)
+#define BNX2_NVM_CFG4_MODE_256_EMPTY_BIT_LOC_BIT11	 (3L<<4)
+#define BNX2_NVM_CFG4_STATUS_BIT_POLARITY		 (1L<<6)
+#define BNX2_NVM_CFG4_RESERVED				 (0x1ffffffL<<7)
+
+#define BNX2_NVM_RECONFIG				0x00006430
+#define BNX2_NVM_RECONFIG_ORIG_STRAP_VALUE		 (0xfL<<0)
+#define BNX2_NVM_RECONFIG_ORIG_STRAP_VALUE_ST		 (0L<<0)
+#define BNX2_NVM_RECONFIG_ORIG_STRAP_VALUE_ATMEL	 (1L<<0)
+#define BNX2_NVM_RECONFIG_RECONFIG_STRAP_VALUE		 (0xfL<<4)
+#define BNX2_NVM_RECONFIG_RESERVED			 (0x7fffffL<<8)
+#define BNX2_NVM_RECONFIG_RECONFIG_DONE			 (1L<<31)
+
+
+
+/*
+ *  dma_reg definition
+ *  offset: 0xc00
+ */
+#define BNX2_DMA_COMMAND				0x00000c00
+#define BNX2_DMA_COMMAND_ENABLE				 (1L<<0)
+
+#define BNX2_DMA_STATUS					0x00000c04
+#define BNX2_DMA_STATUS_PAR_ERROR_STATE			 (1L<<0)
+#define BNX2_DMA_STATUS_READ_TRANSFERS_STAT		 (1L<<16)
+#define BNX2_DMA_STATUS_READ_DELAY_PCI_CLKS_STAT	 (1L<<17)
+#define BNX2_DMA_STATUS_BIG_READ_TRANSFERS_STAT		 (1L<<18)
+#define BNX2_DMA_STATUS_BIG_READ_DELAY_PCI_CLKS_STAT	 (1L<<19)
+#define BNX2_DMA_STATUS_BIG_READ_RETRY_AFTER_DATA_STAT	 (1L<<20)
+#define BNX2_DMA_STATUS_WRITE_TRANSFERS_STAT		 (1L<<21)
+#define BNX2_DMA_STATUS_WRITE_DELAY_PCI_CLKS_STAT	 (1L<<22)
+#define BNX2_DMA_STATUS_BIG_WRITE_TRANSFERS_STAT	 (1L<<23)
+#define BNX2_DMA_STATUS_BIG_WRITE_DELAY_PCI_CLKS_STAT	 (1L<<24)
+#define BNX2_DMA_STATUS_BIG_WRITE_RETRY_AFTER_DATA_STAT	 (1L<<25)
+#define BNX2_DMA_STATUS_GLOBAL_ERR_XI			 (1L<<0)
+#define BNX2_DMA_STATUS_BME_XI				 (1L<<4)
+
+#define BNX2_DMA_CONFIG					0x00000c08
+#define BNX2_DMA_CONFIG_DATA_BYTE_SWAP			 (1L<<0)
+#define BNX2_DMA_CONFIG_DATA_WORD_SWAP			 (1L<<1)
+#define BNX2_DMA_CONFIG_CNTL_BYTE_SWAP			 (1L<<4)
+#define BNX2_DMA_CONFIG_CNTL_WORD_SWAP			 (1L<<5)
+#define BNX2_DMA_CONFIG_ONE_DMA				 (1L<<6)
+#define BNX2_DMA_CONFIG_CNTL_TWO_DMA			 (1L<<7)
+#define BNX2_DMA_CONFIG_CNTL_FPGA_MODE			 (1L<<8)
+#define BNX2_DMA_CONFIG_CNTL_PING_PONG_DMA		 (1L<<10)
+#define BNX2_DMA_CONFIG_CNTL_PCI_COMP_DLY		 (1L<<11)
+#define BNX2_DMA_CONFIG_NO_RCHANS_IN_USE		 (0xfL<<12)
+#define BNX2_DMA_CONFIG_NO_WCHANS_IN_USE		 (0xfL<<16)
+#define BNX2_DMA_CONFIG_PCI_CLK_CMP_BITS		 (0x7L<<20)
+#define BNX2_DMA_CONFIG_PCI_FAST_CLK_CMP		 (1L<<23)
+#define BNX2_DMA_CONFIG_BIG_SIZE			 (0xfL<<24)
+#define BNX2_DMA_CONFIG_BIG_SIZE_NONE			 (0x0L<<24)
+#define BNX2_DMA_CONFIG_BIG_SIZE_64			 (0x1L<<24)
+#define BNX2_DMA_CONFIG_BIG_SIZE_128			 (0x2L<<24)
+#define BNX2_DMA_CONFIG_BIG_SIZE_256			 (0x4L<<24)
+#define BNX2_DMA_CONFIG_BIG_SIZE_512			 (0x8L<<24)
+#define BNX2_DMA_CONFIG_DAT_WBSWAP_MODE_XI		 (0x3L<<0)
+#define BNX2_DMA_CONFIG_CTL_WBSWAP_MODE_XI		 (0x3L<<4)
+#define BNX2_DMA_CONFIG_MAX_PL_XI			 (0x7L<<12)
+#define BNX2_DMA_CONFIG_MAX_PL_128B_XI			 (0L<<12)
+#define BNX2_DMA_CONFIG_MAX_PL_256B_XI			 (1L<<12)
+#define BNX2_DMA_CONFIG_MAX_PL_512B_XI			 (2L<<12)
+#define BNX2_DMA_CONFIG_MAX_PL_EN_XI			 (1L<<15)
+#define BNX2_DMA_CONFIG_MAX_RRS_XI			 (0x7L<<16)
+#define BNX2_DMA_CONFIG_MAX_RRS_128B_XI			 (0L<<16)
+#define BNX2_DMA_CONFIG_MAX_RRS_256B_XI			 (1L<<16)
+#define BNX2_DMA_CONFIG_MAX_RRS_512B_XI			 (2L<<16)
+#define BNX2_DMA_CONFIG_MAX_RRS_1024B_XI		 (3L<<16)
+#define BNX2_DMA_CONFIG_MAX_RRS_2048B_XI		 (4L<<16)
+#define BNX2_DMA_CONFIG_MAX_RRS_4096B_XI		 (5L<<16)
+#define BNX2_DMA_CONFIG_MAX_RRS_EN_XI			 (1L<<19)
+#define BNX2_DMA_CONFIG_NO_64SWAP_EN_XI			 (1L<<31)
+
+#define BNX2_DMA_BLACKOUT				0x00000c0c
+#define BNX2_DMA_BLACKOUT_RD_RETRY_BLACKOUT		 (0xffL<<0)
+#define BNX2_DMA_BLACKOUT_2ND_RD_RETRY_BLACKOUT		 (0xffL<<8)
+#define BNX2_DMA_BLACKOUT_WR_RETRY_BLACKOUT		 (0xffL<<16)
+
+#define BNX2_DMA_READ_MASTER_SETTING_0			0x00000c10
+#define BNX2_DMA_READ_MASTER_SETTING_0_TBDC_NO_SNOOP	 (1L<<0)
+#define BNX2_DMA_READ_MASTER_SETTING_0_TBDC_RELAX_ORDER	 (1L<<1)
+#define BNX2_DMA_READ_MASTER_SETTING_0_TBDC_PRIORITY	 (1L<<2)
+#define BNX2_DMA_READ_MASTER_SETTING_0_TBDC_TRAFFIC_CLASS	 (0x7L<<4)
+#define BNX2_DMA_READ_MASTER_SETTING_0_TBDC_PARAM_EN	 (1L<<7)
+#define BNX2_DMA_READ_MASTER_SETTING_0_RBDC_NO_SNOOP	 (1L<<8)
+#define BNX2_DMA_READ_MASTER_SETTING_0_RBDC_RELAX_ORDER	 (1L<<9)
+#define BNX2_DMA_READ_MASTER_SETTING_0_RBDC_PRIORITY	 (1L<<10)
+#define BNX2_DMA_READ_MASTER_SETTING_0_RBDC_TRAFFIC_CLASS	 (0x7L<<12)
+#define BNX2_DMA_READ_MASTER_SETTING_0_RBDC_PARAM_EN	 (1L<<15)
+#define BNX2_DMA_READ_MASTER_SETTING_0_TDMA_NO_SNOOP	 (1L<<16)
+#define BNX2_DMA_READ_MASTER_SETTING_0_TDMA_RELAX_ORDER	 (1L<<17)
+#define BNX2_DMA_READ_MASTER_SETTING_0_TDMA_PRIORITY	 (1L<<18)
+#define BNX2_DMA_READ_MASTER_SETTING_0_TDMA_TRAFFIC_CLASS	 (0x7L<<20)
+#define BNX2_DMA_READ_MASTER_SETTING_0_TDMA_PARAM_EN	 (1L<<23)
+#define BNX2_DMA_READ_MASTER_SETTING_0_CTX_NO_SNOOP	 (1L<<24)
+#define BNX2_DMA_READ_MASTER_SETTING_0_CTX_RELAX_ORDER	 (1L<<25)
+#define BNX2_DMA_READ_MASTER_SETTING_0_CTX_PRIORITY	 (1L<<26)
+#define BNX2_DMA_READ_MASTER_SETTING_0_CTX_TRAFFIC_CLASS	 (0x7L<<28)
+#define BNX2_DMA_READ_MASTER_SETTING_0_CTX_PARAM_EN	 (1L<<31)
+
+#define BNX2_DMA_READ_MASTER_SETTING_1			0x00000c14
+#define BNX2_DMA_READ_MASTER_SETTING_1_COM_NO_SNOOP	 (1L<<0)
+#define BNX2_DMA_READ_MASTER_SETTING_1_COM_RELAX_ORDER	 (1L<<1)
+#define BNX2_DMA_READ_MASTER_SETTING_1_COM_PRIORITY	 (1L<<2)
+#define BNX2_DMA_READ_MASTER_SETTING_1_COM_TRAFFIC_CLASS	 (0x7L<<4)
+#define BNX2_DMA_READ_MASTER_SETTING_1_COM_PARAM_EN	 (1L<<7)
+#define BNX2_DMA_READ_MASTER_SETTING_1_CP_NO_SNOOP	 (1L<<8)
+#define BNX2_DMA_READ_MASTER_SETTING_1_CP_RELAX_ORDER	 (1L<<9)
+#define BNX2_DMA_READ_MASTER_SETTING_1_CP_PRIORITY	 (1L<<10)
+#define BNX2_DMA_READ_MASTER_SETTING_1_CP_TRAFFIC_CLASS	 (0x7L<<12)
+#define BNX2_DMA_READ_MASTER_SETTING_1_CP_PARAM_EN	 (1L<<15)
+
+#define BNX2_DMA_WRITE_MASTER_SETTING_0			0x00000c18
+#define BNX2_DMA_WRITE_MASTER_SETTING_0_HC_NO_SNOOP	 (1L<<0)
+#define BNX2_DMA_WRITE_MASTER_SETTING_0_HC_RELAX_ORDER	 (1L<<1)
+#define BNX2_DMA_WRITE_MASTER_SETTING_0_HC_PRIORITY	 (1L<<2)
+#define BNX2_DMA_WRITE_MASTER_SETTING_0_HC_CS_VLD	 (1L<<3)
+#define BNX2_DMA_WRITE_MASTER_SETTING_0_HC_TRAFFIC_CLASS	 (0x7L<<4)
+#define BNX2_DMA_WRITE_MASTER_SETTING_0_HC_PARAM_EN	 (1L<<7)
+#define BNX2_DMA_WRITE_MASTER_SETTING_0_RDMA_NO_SNOOP	 (1L<<8)
+#define BNX2_DMA_WRITE_MASTER_SETTING_0_RDMA_RELAX_ORDER	 (1L<<9)
+#define BNX2_DMA_WRITE_MASTER_SETTING_0_RDMA_PRIORITY	 (1L<<10)
+#define BNX2_DMA_WRITE_MASTER_SETTING_0_RDMA_CS_VLD	 (1L<<11)
+#define BNX2_DMA_WRITE_MASTER_SETTING_0_RDMA_TRAFFIC_CLASS	 (0x7L<<12)
+#define BNX2_DMA_WRITE_MASTER_SETTING_0_RDMA_PARAM_EN	 (1L<<15)
+#define BNX2_DMA_WRITE_MASTER_SETTING_0_CTX_NO_SNOOP	 (1L<<24)
+#define BNX2_DMA_WRITE_MASTER_SETTING_0_CTX_RELAX_ORDER	 (1L<<25)
+#define BNX2_DMA_WRITE_MASTER_SETTING_0_CTX_PRIORITY	 (1L<<26)
+#define BNX2_DMA_WRITE_MASTER_SETTING_0_CTX_CS_VLD	 (1L<<27)
+#define BNX2_DMA_WRITE_MASTER_SETTING_0_CTX_TRAFFIC_CLASS	 (0x7L<<28)
+#define BNX2_DMA_WRITE_MASTER_SETTING_0_CTX_PARAM_EN	 (1L<<31)
+
+#define BNX2_DMA_WRITE_MASTER_SETTING_1			0x00000c1c
+#define BNX2_DMA_WRITE_MASTER_SETTING_1_COM_NO_SNOOP	 (1L<<0)
+#define BNX2_DMA_WRITE_MASTER_SETTING_1_COM_RELAX_ORDER	 (1L<<1)
+#define BNX2_DMA_WRITE_MASTER_SETTING_1_COM_PRIORITY	 (1L<<2)
+#define BNX2_DMA_WRITE_MASTER_SETTING_1_COM_CS_VLD	 (1L<<3)
+#define BNX2_DMA_WRITE_MASTER_SETTING_1_COM_TRAFFIC_CLASS	 (0x7L<<4)
+#define BNX2_DMA_WRITE_MASTER_SETTING_1_COM_PARAM_EN	 (1L<<7)
+#define BNX2_DMA_WRITE_MASTER_SETTING_1_CP_NO_SNOOP	 (1L<<8)
+#define BNX2_DMA_WRITE_MASTER_SETTING_1_CP_RELAX_ORDER	 (1L<<9)
+#define BNX2_DMA_WRITE_MASTER_SETTING_1_CP_PRIORITY	 (1L<<10)
+#define BNX2_DMA_WRITE_MASTER_SETTING_1_CP_CS_VLD	 (1L<<11)
+#define BNX2_DMA_WRITE_MASTER_SETTING_1_CP_TRAFFIC_CLASS	 (0x7L<<12)
+#define BNX2_DMA_WRITE_MASTER_SETTING_1_CP_PARAM_EN	 (1L<<15)
+
+#define BNX2_DMA_ARBITER				0x00000c20
+#define BNX2_DMA_ARBITER_NUM_READS			 (0x7L<<0)
+#define BNX2_DMA_ARBITER_WR_ARB_MODE			 (1L<<4)
+#define BNX2_DMA_ARBITER_WR_ARB_MODE_STRICT		 (0L<<4)
+#define BNX2_DMA_ARBITER_WR_ARB_MODE_RND_RBN		 (1L<<4)
+#define BNX2_DMA_ARBITER_RD_ARB_MODE			 (0x3L<<5)
+#define BNX2_DMA_ARBITER_RD_ARB_MODE_STRICT		 (0L<<5)
+#define BNX2_DMA_ARBITER_RD_ARB_MODE_RND_RBN		 (1L<<5)
+#define BNX2_DMA_ARBITER_RD_ARB_MODE_WGT_RND_RBN	 (2L<<5)
+#define BNX2_DMA_ARBITER_ALT_MODE_EN			 (1L<<8)
+#define BNX2_DMA_ARBITER_RR_MODE			 (1L<<9)
+#define BNX2_DMA_ARBITER_TIMER_MODE			 (1L<<10)
+#define BNX2_DMA_ARBITER_OUSTD_READ_REQ			 (0xfL<<12)
+
+#define BNX2_DMA_ARB_TIMERS				0x00000c24
+#define BNX2_DMA_ARB_TIMERS_RD_DRR_WAIT_TIME		 (0xffL<<0)
+#define BNX2_DMA_ARB_TIMERS_TM_MIN_TIMEOUT		 (0xffL<<12)
+#define BNX2_DMA_ARB_TIMERS_TM_MAX_TIMEOUT		 (0xfffL<<20)
+
+#define BNX2_DMA_DEBUG_VECT_PEEK			0x00000c2c
+#define BNX2_DMA_DEBUG_VECT_PEEK_1_VALUE		 (0x7ffL<<0)
+#define BNX2_DMA_DEBUG_VECT_PEEK_1_PEEK_EN		 (1L<<11)
+#define BNX2_DMA_DEBUG_VECT_PEEK_1_SEL			 (0xfL<<12)
+#define BNX2_DMA_DEBUG_VECT_PEEK_2_VALUE		 (0x7ffL<<16)
+#define BNX2_DMA_DEBUG_VECT_PEEK_2_PEEK_EN		 (1L<<27)
+#define BNX2_DMA_DEBUG_VECT_PEEK_2_SEL			 (0xfL<<28)
+
+#define BNX2_DMA_TAG_RAM_00				0x00000c30
+#define BNX2_DMA_TAG_RAM_00_CHANNEL			 (0xfL<<0)
+#define BNX2_DMA_TAG_RAM_00_MASTER			 (0x7L<<4)
+#define BNX2_DMA_TAG_RAM_00_MASTER_CTX			 (0L<<4)
+#define BNX2_DMA_TAG_RAM_00_MASTER_RBDC			 (1L<<4)
+#define BNX2_DMA_TAG_RAM_00_MASTER_TBDC			 (2L<<4)
+#define BNX2_DMA_TAG_RAM_00_MASTER_COM			 (3L<<4)
+#define BNX2_DMA_TAG_RAM_00_MASTER_CP			 (4L<<4)
+#define BNX2_DMA_TAG_RAM_00_MASTER_TDMA			 (5L<<4)
+#define BNX2_DMA_TAG_RAM_00_SWAP			 (0x3L<<7)
+#define BNX2_DMA_TAG_RAM_00_SWAP_CONFIG			 (0L<<7)
+#define BNX2_DMA_TAG_RAM_00_SWAP_DATA			 (1L<<7)
+#define BNX2_DMA_TAG_RAM_00_SWAP_CONTROL		 (2L<<7)
+#define BNX2_DMA_TAG_RAM_00_FUNCTION			 (1L<<9)
+#define BNX2_DMA_TAG_RAM_00_VALID			 (1L<<10)
+
+#define BNX2_DMA_TAG_RAM_01				0x00000c34
+#define BNX2_DMA_TAG_RAM_01_CHANNEL			 (0xfL<<0)
+#define BNX2_DMA_TAG_RAM_01_MASTER			 (0x7L<<4)
+#define BNX2_DMA_TAG_RAM_01_MASTER_CTX			 (0L<<4)
+#define BNX2_DMA_TAG_RAM_01_MASTER_RBDC			 (1L<<4)
+#define BNX2_DMA_TAG_RAM_01_MASTER_TBDC			 (2L<<4)
+#define BNX2_DMA_TAG_RAM_01_MASTER_COM			 (3L<<4)
+#define BNX2_DMA_TAG_RAM_01_MASTER_CP			 (4L<<4)
+#define BNX2_DMA_TAG_RAM_01_MASTER_TDMA			 (5L<<4)
+#define BNX2_DMA_TAG_RAM_01_SWAP			 (0x3L<<7)
+#define BNX2_DMA_TAG_RAM_01_SWAP_CONFIG			 (0L<<7)
+#define BNX2_DMA_TAG_RAM_01_SWAP_DATA			 (1L<<7)
+#define BNX2_DMA_TAG_RAM_01_SWAP_CONTROL		 (2L<<7)
+#define BNX2_DMA_TAG_RAM_01_FUNCTION			 (1L<<9)
+#define BNX2_DMA_TAG_RAM_01_VALID			 (1L<<10)
+
+#define BNX2_DMA_TAG_RAM_02				0x00000c38
+#define BNX2_DMA_TAG_RAM_02_CHANNEL			 (0xfL<<0)
+#define BNX2_DMA_TAG_RAM_02_MASTER			 (0x7L<<4)
+#define BNX2_DMA_TAG_RAM_02_MASTER_CTX			 (0L<<4)
+#define BNX2_DMA_TAG_RAM_02_MASTER_RBDC			 (1L<<4)
+#define BNX2_DMA_TAG_RAM_02_MASTER_TBDC			 (2L<<4)
+#define BNX2_DMA_TAG_RAM_02_MASTER_COM			 (3L<<4)
+#define BNX2_DMA_TAG_RAM_02_MASTER_CP			 (4L<<4)
+#define BNX2_DMA_TAG_RAM_02_MASTER_TDMA			 (5L<<4)
+#define BNX2_DMA_TAG_RAM_02_SWAP			 (0x3L<<7)
+#define BNX2_DMA_TAG_RAM_02_SWAP_CONFIG			 (0L<<7)
+#define BNX2_DMA_TAG_RAM_02_SWAP_DATA			 (1L<<7)
+#define BNX2_DMA_TAG_RAM_02_SWAP_CONTROL		 (2L<<7)
+#define BNX2_DMA_TAG_RAM_02_FUNCTION			 (1L<<9)
+#define BNX2_DMA_TAG_RAM_02_VALID			 (1L<<10)
+
+#define BNX2_DMA_TAG_RAM_03				0x00000c3c
+#define BNX2_DMA_TAG_RAM_03_CHANNEL			 (0xfL<<0)
+#define BNX2_DMA_TAG_RAM_03_MASTER			 (0x7L<<4)
+#define BNX2_DMA_TAG_RAM_03_MASTER_CTX			 (0L<<4)
+#define BNX2_DMA_TAG_RAM_03_MASTER_RBDC			 (1L<<4)
+#define BNX2_DMA_TAG_RAM_03_MASTER_TBDC			 (2L<<4)
+#define BNX2_DMA_TAG_RAM_03_MASTER_COM			 (3L<<4)
+#define BNX2_DMA_TAG_RAM_03_MASTER_CP			 (4L<<4)
+#define BNX2_DMA_TAG_RAM_03_MASTER_TDMA			 (5L<<4)
+#define BNX2_DMA_TAG_RAM_03_SWAP			 (0x3L<<7)
+#define BNX2_DMA_TAG_RAM_03_SWAP_CONFIG			 (0L<<7)
+#define BNX2_DMA_TAG_RAM_03_SWAP_DATA			 (1L<<7)
+#define BNX2_DMA_TAG_RAM_03_SWAP_CONTROL		 (2L<<7)
+#define BNX2_DMA_TAG_RAM_03_FUNCTION			 (1L<<9)
+#define BNX2_DMA_TAG_RAM_03_VALID			 (1L<<10)
+
+#define BNX2_DMA_TAG_RAM_04				0x00000c40
+#define BNX2_DMA_TAG_RAM_04_CHANNEL			 (0xfL<<0)
+#define BNX2_DMA_TAG_RAM_04_MASTER			 (0x7L<<4)
+#define BNX2_DMA_TAG_RAM_04_MASTER_CTX			 (0L<<4)
+#define BNX2_DMA_TAG_RAM_04_MASTER_RBDC			 (1L<<4)
+#define BNX2_DMA_TAG_RAM_04_MASTER_TBDC			 (2L<<4)
+#define BNX2_DMA_TAG_RAM_04_MASTER_COM			 (3L<<4)
+#define BNX2_DMA_TAG_RAM_04_MASTER_CP			 (4L<<4)
+#define BNX2_DMA_TAG_RAM_04_MASTER_TDMA			 (5L<<4)
+#define BNX2_DMA_TAG_RAM_04_SWAP			 (0x3L<<7)
+#define BNX2_DMA_TAG_RAM_04_SWAP_CONFIG			 (0L<<7)
+#define BNX2_DMA_TAG_RAM_04_SWAP_DATA			 (1L<<7)
+#define BNX2_DMA_TAG_RAM_04_SWAP_CONTROL		 (2L<<7)
+#define BNX2_DMA_TAG_RAM_04_FUNCTION			 (1L<<9)
+#define BNX2_DMA_TAG_RAM_04_VALID			 (1L<<10)
+
+#define BNX2_DMA_TAG_RAM_05				0x00000c44
+#define BNX2_DMA_TAG_RAM_05_CHANNEL			 (0xfL<<0)
+#define BNX2_DMA_TAG_RAM_05_MASTER			 (0x7L<<4)
+#define BNX2_DMA_TAG_RAM_05_MASTER_CTX			 (0L<<4)
+#define BNX2_DMA_TAG_RAM_05_MASTER_RBDC			 (1L<<4)
+#define BNX2_DMA_TAG_RAM_05_MASTER_TBDC			 (2L<<4)
+#define BNX2_DMA_TAG_RAM_05_MASTER_COM			 (3L<<4)
+#define BNX2_DMA_TAG_RAM_05_MASTER_CP			 (4L<<4)
+#define BNX2_DMA_TAG_RAM_05_MASTER_TDMA			 (5L<<4)
+#define BNX2_DMA_TAG_RAM_05_SWAP			 (0x3L<<7)
+#define BNX2_DMA_TAG_RAM_05_SWAP_CONFIG			 (0L<<7)
+#define BNX2_DMA_TAG_RAM_05_SWAP_DATA			 (1L<<7)
+#define BNX2_DMA_TAG_RAM_05_SWAP_CONTROL		 (2L<<7)
+#define BNX2_DMA_TAG_RAM_05_FUNCTION			 (1L<<9)
+#define BNX2_DMA_TAG_RAM_05_VALID			 (1L<<10)
+
+#define BNX2_DMA_TAG_RAM_06				0x00000c48
+#define BNX2_DMA_TAG_RAM_06_CHANNEL			 (0xfL<<0)
+#define BNX2_DMA_TAG_RAM_06_MASTER			 (0x7L<<4)
+#define BNX2_DMA_TAG_RAM_06_MASTER_CTX			 (0L<<4)
+#define BNX2_DMA_TAG_RAM_06_MASTER_RBDC			 (1L<<4)
+#define BNX2_DMA_TAG_RAM_06_MASTER_TBDC			 (2L<<4)
+#define BNX2_DMA_TAG_RAM_06_MASTER_COM			 (3L<<4)
+#define BNX2_DMA_TAG_RAM_06_MASTER_CP			 (4L<<4)
+#define BNX2_DMA_TAG_RAM_06_MASTER_TDMA			 (5L<<4)
+#define BNX2_DMA_TAG_RAM_06_SWAP			 (0x3L<<7)
+#define BNX2_DMA_TAG_RAM_06_SWAP_CONFIG			 (0L<<7)
+#define BNX2_DMA_TAG_RAM_06_SWAP_DATA			 (1L<<7)
+#define BNX2_DMA_TAG_RAM_06_SWAP_CONTROL		 (2L<<7)
+#define BNX2_DMA_TAG_RAM_06_FUNCTION			 (1L<<9)
+#define BNX2_DMA_TAG_RAM_06_VALID			 (1L<<10)
+
+#define BNX2_DMA_TAG_RAM_07				0x00000c4c
+#define BNX2_DMA_TAG_RAM_07_CHANNEL			 (0xfL<<0)
+#define BNX2_DMA_TAG_RAM_07_MASTER			 (0x7L<<4)
+#define BNX2_DMA_TAG_RAM_07_MASTER_CTX			 (0L<<4)
+#define BNX2_DMA_TAG_RAM_07_MASTER_RBDC			 (1L<<4)
+#define BNX2_DMA_TAG_RAM_07_MASTER_TBDC			 (2L<<4)
+#define BNX2_DMA_TAG_RAM_07_MASTER_COM			 (3L<<4)
+#define BNX2_DMA_TAG_RAM_07_MASTER_CP			 (4L<<4)
+#define BNX2_DMA_TAG_RAM_07_MASTER_TDMA			 (5L<<4)
+#define BNX2_DMA_TAG_RAM_07_SWAP			 (0x3L<<7)
+#define BNX2_DMA_TAG_RAM_07_SWAP_CONFIG			 (0L<<7)
+#define BNX2_DMA_TAG_RAM_07_SWAP_DATA			 (1L<<7)
+#define BNX2_DMA_TAG_RAM_07_SWAP_CONTROL		 (2L<<7)
+#define BNX2_DMA_TAG_RAM_07_FUNCTION			 (1L<<9)
+#define BNX2_DMA_TAG_RAM_07_VALID			 (1L<<10)
+
+#define BNX2_DMA_TAG_RAM_08				0x00000c50
+#define BNX2_DMA_TAG_RAM_08_CHANNEL			 (0xfL<<0)
+#define BNX2_DMA_TAG_RAM_08_MASTER			 (0x7L<<4)
+#define BNX2_DMA_TAG_RAM_08_MASTER_CTX			 (0L<<4)
+#define BNX2_DMA_TAG_RAM_08_MASTER_RBDC			 (1L<<4)
+#define BNX2_DMA_TAG_RAM_08_MASTER_TBDC			 (2L<<4)
+#define BNX2_DMA_TAG_RAM_08_MASTER_COM			 (3L<<4)
+#define BNX2_DMA_TAG_RAM_08_MASTER_CP			 (4L<<4)
+#define BNX2_DMA_TAG_RAM_08_MASTER_TDMA			 (5L<<4)
+#define BNX2_DMA_TAG_RAM_08_SWAP			 (0x3L<<7)
+#define BNX2_DMA_TAG_RAM_08_SWAP_CONFIG			 (0L<<7)
+#define BNX2_DMA_TAG_RAM_08_SWAP_DATA			 (1L<<7)
+#define BNX2_DMA_TAG_RAM_08_SWAP_CONTROL		 (2L<<7)
+#define BNX2_DMA_TAG_RAM_08_FUNCTION			 (1L<<9)
+#define BNX2_DMA_TAG_RAM_08_VALID			 (1L<<10)
+
+#define BNX2_DMA_TAG_RAM_09				0x00000c54
+#define BNX2_DMA_TAG_RAM_09_CHANNEL			 (0xfL<<0)
+#define BNX2_DMA_TAG_RAM_09_MASTER			 (0x7L<<4)
+#define BNX2_DMA_TAG_RAM_09_MASTER_CTX			 (0L<<4)
+#define BNX2_DMA_TAG_RAM_09_MASTER_RBDC			 (1L<<4)
+#define BNX2_DMA_TAG_RAM_09_MASTER_TBDC			 (2L<<4)
+#define BNX2_DMA_TAG_RAM_09_MASTER_COM			 (3L<<4)
+#define BNX2_DMA_TAG_RAM_09_MASTER_CP			 (4L<<4)
+#define BNX2_DMA_TAG_RAM_09_MASTER_TDMA			 (5L<<4)
+#define BNX2_DMA_TAG_RAM_09_SWAP			 (0x3L<<7)
+#define BNX2_DMA_TAG_RAM_09_SWAP_CONFIG			 (0L<<7)
+#define BNX2_DMA_TAG_RAM_09_SWAP_DATA			 (1L<<7)
+#define BNX2_DMA_TAG_RAM_09_SWAP_CONTROL		 (2L<<7)
+#define BNX2_DMA_TAG_RAM_09_FUNCTION			 (1L<<9)
+#define BNX2_DMA_TAG_RAM_09_VALID			 (1L<<10)
+
+#define BNX2_DMA_TAG_RAM_10				0x00000c58
+#define BNX2_DMA_TAG_RAM_10_CHANNEL			 (0xfL<<0)
+#define BNX2_DMA_TAG_RAM_10_MASTER			 (0x7L<<4)
+#define BNX2_DMA_TAG_RAM_10_MASTER_CTX			 (0L<<4)
+#define BNX2_DMA_TAG_RAM_10_MASTER_RBDC			 (1L<<4)
+#define BNX2_DMA_TAG_RAM_10_MASTER_TBDC			 (2L<<4)
+#define BNX2_DMA_TAG_RAM_10_MASTER_COM			 (3L<<4)
+#define BNX2_DMA_TAG_RAM_10_MASTER_CP			 (4L<<4)
+#define BNX2_DMA_TAG_RAM_10_MASTER_TDMA			 (5L<<4)
+#define BNX2_DMA_TAG_RAM_10_SWAP			 (0x3L<<7)
+#define BNX2_DMA_TAG_RAM_10_SWAP_CONFIG			 (0L<<7)
+#define BNX2_DMA_TAG_RAM_10_SWAP_DATA			 (1L<<7)
+#define BNX2_DMA_TAG_RAM_10_SWAP_CONTROL		 (2L<<7)
+#define BNX2_DMA_TAG_RAM_10_FUNCTION			 (1L<<9)
+#define BNX2_DMA_TAG_RAM_10_VALID			 (1L<<10)
+
+#define BNX2_DMA_TAG_RAM_11				0x00000c5c
+#define BNX2_DMA_TAG_RAM_11_CHANNEL			 (0xfL<<0)
+#define BNX2_DMA_TAG_RAM_11_MASTER			 (0x7L<<4)
+#define BNX2_DMA_TAG_RAM_11_MASTER_CTX			 (0L<<4)
+#define BNX2_DMA_TAG_RAM_11_MASTER_RBDC			 (1L<<4)
+#define BNX2_DMA_TAG_RAM_11_MASTER_TBDC			 (2L<<4)
+#define BNX2_DMA_TAG_RAM_11_MASTER_COM			 (3L<<4)
+#define BNX2_DMA_TAG_RAM_11_MASTER_CP			 (4L<<4)
+#define BNX2_DMA_TAG_RAM_11_MASTER_TDMA			 (5L<<4)
+#define BNX2_DMA_TAG_RAM_11_SWAP			 (0x3L<<7)
+#define BNX2_DMA_TAG_RAM_11_SWAP_CONFIG			 (0L<<7)
+#define BNX2_DMA_TAG_RAM_11_SWAP_DATA			 (1L<<7)
+#define BNX2_DMA_TAG_RAM_11_SWAP_CONTROL		 (2L<<7)
+#define BNX2_DMA_TAG_RAM_11_FUNCTION			 (1L<<9)
+#define BNX2_DMA_TAG_RAM_11_VALID			 (1L<<10)
+
+#define BNX2_DMA_RCHAN_STAT_22				0x00000c60
+#define BNX2_DMA_RCHAN_STAT_30				0x00000c64
+#define BNX2_DMA_RCHAN_STAT_31				0x00000c68
+#define BNX2_DMA_RCHAN_STAT_32				0x00000c6c
+#define BNX2_DMA_RCHAN_STAT_40				0x00000c70
+#define BNX2_DMA_RCHAN_STAT_41				0x00000c74
+#define BNX2_DMA_RCHAN_STAT_42				0x00000c78
+#define BNX2_DMA_RCHAN_STAT_50				0x00000c7c
+#define BNX2_DMA_RCHAN_STAT_51				0x00000c80
+#define BNX2_DMA_RCHAN_STAT_52				0x00000c84
+#define BNX2_DMA_RCHAN_STAT_60				0x00000c88
+#define BNX2_DMA_RCHAN_STAT_61				0x00000c8c
+#define BNX2_DMA_RCHAN_STAT_62				0x00000c90
+#define BNX2_DMA_RCHAN_STAT_70				0x00000c94
+#define BNX2_DMA_RCHAN_STAT_71				0x00000c98
+#define BNX2_DMA_RCHAN_STAT_72				0x00000c9c
+#define BNX2_DMA_WCHAN_STAT_00				0x00000ca0
+#define BNX2_DMA_WCHAN_STAT_00_WCHAN_STA_HOST_ADDR_LOW	 (0xffffffffL<<0)
+
+#define BNX2_DMA_WCHAN_STAT_01				0x00000ca4
+#define BNX2_DMA_WCHAN_STAT_01_WCHAN_STA_HOST_ADDR_HIGH	 (0xffffffffL<<0)
+
+#define BNX2_DMA_WCHAN_STAT_02				0x00000ca8
+#define BNX2_DMA_WCHAN_STAT_02_LENGTH			 (0xffffL<<0)
+#define BNX2_DMA_WCHAN_STAT_02_WORD_SWAP		 (1L<<16)
+#define BNX2_DMA_WCHAN_STAT_02_BYTE_SWAP		 (1L<<17)
+#define BNX2_DMA_WCHAN_STAT_02_PRIORITY_LVL		 (1L<<18)
+
+#define BNX2_DMA_WCHAN_STAT_10				0x00000cac
+#define BNX2_DMA_WCHAN_STAT_11				0x00000cb0
+#define BNX2_DMA_WCHAN_STAT_12				0x00000cb4
+#define BNX2_DMA_WCHAN_STAT_20				0x00000cb8
+#define BNX2_DMA_WCHAN_STAT_21				0x00000cbc
+#define BNX2_DMA_WCHAN_STAT_22				0x00000cc0
+#define BNX2_DMA_WCHAN_STAT_30				0x00000cc4
+#define BNX2_DMA_WCHAN_STAT_31				0x00000cc8
+#define BNX2_DMA_WCHAN_STAT_32				0x00000ccc
+#define BNX2_DMA_WCHAN_STAT_40				0x00000cd0
+#define BNX2_DMA_WCHAN_STAT_41				0x00000cd4
+#define BNX2_DMA_WCHAN_STAT_42				0x00000cd8
+#define BNX2_DMA_WCHAN_STAT_50				0x00000cdc
+#define BNX2_DMA_WCHAN_STAT_51				0x00000ce0
+#define BNX2_DMA_WCHAN_STAT_52				0x00000ce4
+#define BNX2_DMA_WCHAN_STAT_60				0x00000ce8
+#define BNX2_DMA_WCHAN_STAT_61				0x00000cec
+#define BNX2_DMA_WCHAN_STAT_62				0x00000cf0
+#define BNX2_DMA_WCHAN_STAT_70				0x00000cf4
+#define BNX2_DMA_WCHAN_STAT_71				0x00000cf8
+#define BNX2_DMA_WCHAN_STAT_72				0x00000cfc
+#define BNX2_DMA_ARB_STAT_00				0x00000d00
+#define BNX2_DMA_ARB_STAT_00_MASTER			 (0xffffL<<0)
+#define BNX2_DMA_ARB_STAT_00_MASTER_ENC			 (0xffL<<16)
+#define BNX2_DMA_ARB_STAT_00_CUR_BINMSTR		 (0xffL<<24)
+
+#define BNX2_DMA_ARB_STAT_01				0x00000d04
+#define BNX2_DMA_ARB_STAT_01_LPR_RPTR			 (0xfL<<0)
+#define BNX2_DMA_ARB_STAT_01_LPR_WPTR			 (0xfL<<4)
+#define BNX2_DMA_ARB_STAT_01_LPB_RPTR			 (0xfL<<8)
+#define BNX2_DMA_ARB_STAT_01_LPB_WPTR			 (0xfL<<12)
+#define BNX2_DMA_ARB_STAT_01_HPR_RPTR			 (0xfL<<16)
+#define BNX2_DMA_ARB_STAT_01_HPR_WPTR			 (0xfL<<20)
+#define BNX2_DMA_ARB_STAT_01_HPB_RPTR			 (0xfL<<24)
+#define BNX2_DMA_ARB_STAT_01_HPB_WPTR			 (0xfL<<28)
+
+#define BNX2_DMA_FUSE_CTRL0_CMD				0x00000f00
+#define BNX2_DMA_FUSE_CTRL0_CMD_PWRUP_DONE		 (1L<<0)
+#define BNX2_DMA_FUSE_CTRL0_CMD_SHIFT_DONE		 (1L<<1)
+#define BNX2_DMA_FUSE_CTRL0_CMD_SHIFT			 (1L<<2)
+#define BNX2_DMA_FUSE_CTRL0_CMD_LOAD			 (1L<<3)
+#define BNX2_DMA_FUSE_CTRL0_CMD_SEL			 (0xfL<<8)
+
+#define BNX2_DMA_FUSE_CTRL0_DATA			0x00000f04
+#define BNX2_DMA_FUSE_CTRL1_CMD				0x00000f08
+#define BNX2_DMA_FUSE_CTRL1_CMD_PWRUP_DONE		 (1L<<0)
+#define BNX2_DMA_FUSE_CTRL1_CMD_SHIFT_DONE		 (1L<<1)
+#define BNX2_DMA_FUSE_CTRL1_CMD_SHIFT			 (1L<<2)
+#define BNX2_DMA_FUSE_CTRL1_CMD_LOAD			 (1L<<3)
+#define BNX2_DMA_FUSE_CTRL1_CMD_SEL			 (0xfL<<8)
+
+#define BNX2_DMA_FUSE_CTRL1_DATA			0x00000f0c
+#define BNX2_DMA_FUSE_CTRL2_CMD				0x00000f10
+#define BNX2_DMA_FUSE_CTRL2_CMD_PWRUP_DONE		 (1L<<0)
+#define BNX2_DMA_FUSE_CTRL2_CMD_SHIFT_DONE		 (1L<<1)
+#define BNX2_DMA_FUSE_CTRL2_CMD_SHIFT			 (1L<<2)
+#define BNX2_DMA_FUSE_CTRL2_CMD_LOAD			 (1L<<3)
+#define BNX2_DMA_FUSE_CTRL2_CMD_SEL			 (0xfL<<8)
+
+#define BNX2_DMA_FUSE_CTRL2_DATA			0x00000f14
+
+
+/*
+ *  context_reg definition
+ *  offset: 0x1000
+ */
+#define BNX2_CTX_COMMAND				0x00001000
+#define BNX2_CTX_COMMAND_ENABLED			 (1L<<0)
+#define BNX2_CTX_COMMAND_DISABLE_USAGE_CNT		 (1L<<1)
+#define BNX2_CTX_COMMAND_DISABLE_PLRU			 (1L<<2)
+#define BNX2_CTX_COMMAND_DISABLE_COMBINE_READ		 (1L<<3)
+#define BNX2_CTX_COMMAND_FLUSH_AHEAD			 (0x1fL<<8)
+#define BNX2_CTX_COMMAND_MEM_INIT			 (1L<<13)
+#define BNX2_CTX_COMMAND_PAGE_SIZE			 (0xfL<<16)
+#define BNX2_CTX_COMMAND_PAGE_SIZE_256			 (0L<<16)
+#define BNX2_CTX_COMMAND_PAGE_SIZE_512			 (1L<<16)
+#define BNX2_CTX_COMMAND_PAGE_SIZE_1K			 (2L<<16)
+#define BNX2_CTX_COMMAND_PAGE_SIZE_2K			 (3L<<16)
+#define BNX2_CTX_COMMAND_PAGE_SIZE_4K			 (4L<<16)
+#define BNX2_CTX_COMMAND_PAGE_SIZE_8K			 (5L<<16)
+#define BNX2_CTX_COMMAND_PAGE_SIZE_16K			 (6L<<16)
+#define BNX2_CTX_COMMAND_PAGE_SIZE_32K			 (7L<<16)
+#define BNX2_CTX_COMMAND_PAGE_SIZE_64K			 (8L<<16)
+#define BNX2_CTX_COMMAND_PAGE_SIZE_128K			 (9L<<16)
+#define BNX2_CTX_COMMAND_PAGE_SIZE_256K			 (10L<<16)
+#define BNX2_CTX_COMMAND_PAGE_SIZE_512K			 (11L<<16)
+#define BNX2_CTX_COMMAND_PAGE_SIZE_1M			 (12L<<16)
+
+#define BNX2_CTX_STATUS					0x00001004
+#define BNX2_CTX_STATUS_LOCK_WAIT			 (1L<<0)
+#define BNX2_CTX_STATUS_READ_STAT			 (1L<<16)
+#define BNX2_CTX_STATUS_WRITE_STAT			 (1L<<17)
+#define BNX2_CTX_STATUS_ACC_STALL_STAT			 (1L<<18)
+#define BNX2_CTX_STATUS_LOCK_STALL_STAT			 (1L<<19)
+#define BNX2_CTX_STATUS_EXT_READ_STAT			 (1L<<20)
+#define BNX2_CTX_STATUS_EXT_WRITE_STAT			 (1L<<21)
+#define BNX2_CTX_STATUS_MISS_STAT			 (1L<<22)
+#define BNX2_CTX_STATUS_HIT_STAT			 (1L<<23)
+#define BNX2_CTX_STATUS_DEAD_LOCK			 (1L<<24)
+#define BNX2_CTX_STATUS_USAGE_CNT_ERR			 (1L<<25)
+#define BNX2_CTX_STATUS_INVALID_PAGE			 (1L<<26)
+
+#define BNX2_CTX_VIRT_ADDR				0x00001008
+#define BNX2_CTX_VIRT_ADDR_VIRT_ADDR			 (0x7fffL<<6)
+
+#define BNX2_CTX_PAGE_TBL				0x0000100c
+#define BNX2_CTX_PAGE_TBL_PAGE_TBL			 (0x3fffL<<6)
+
+#define BNX2_CTX_DATA_ADR				0x00001010
+#define BNX2_CTX_DATA_ADR_DATA_ADR			 (0x7ffffL<<2)
+
+#define BNX2_CTX_DATA					0x00001014
+#define BNX2_CTX_LOCK					0x00001018
+#define BNX2_CTX_LOCK_TYPE				 (0x7L<<0)
+#define BNX2_CTX_LOCK_TYPE_LOCK_TYPE_VOID		 (0x0L<<0)
+#define BNX2_CTX_LOCK_TYPE_LOCK_TYPE_PROTOCOL		 (0x1L<<0)
+#define BNX2_CTX_LOCK_TYPE_LOCK_TYPE_TX			 (0x2L<<0)
+#define BNX2_CTX_LOCK_TYPE_LOCK_TYPE_TIMER		 (0x4L<<0)
+#define BNX2_CTX_LOCK_TYPE_LOCK_TYPE_COMPLETE		 (0x7L<<0)
+#define BNX2_CTX_LOCK_TYPE_VOID_XI			 (0L<<0)
+#define BNX2_CTX_LOCK_TYPE_PROTOCOL_XI			 (1L<<0)
+#define BNX2_CTX_LOCK_TYPE_TX_XI			 (2L<<0)
+#define BNX2_CTX_LOCK_TYPE_TIMER_XI			 (4L<<0)
+#define BNX2_CTX_LOCK_TYPE_COMPLETE_XI			 (7L<<0)
+#define BNX2_CTX_LOCK_CID_VALUE				 (0x3fffL<<7)
+#define BNX2_CTX_LOCK_GRANTED				 (1L<<26)
+#define BNX2_CTX_LOCK_MODE				 (0x7L<<27)
+#define BNX2_CTX_LOCK_MODE_UNLOCK			 (0x0L<<27)
+#define BNX2_CTX_LOCK_MODE_IMMEDIATE			 (0x1L<<27)
+#define BNX2_CTX_LOCK_MODE_SURE				 (0x2L<<27)
+#define BNX2_CTX_LOCK_STATUS				 (1L<<30)
+#define BNX2_CTX_LOCK_REQ				 (1L<<31)
+
+#define BNX2_CTX_CTX_CTRL				0x0000101c
+#define BNX2_CTX_CTX_CTRL_CTX_ADDR			 (0x7ffffL<<2)
+#define BNX2_CTX_CTX_CTRL_MOD_USAGE_CNT			 (0x3L<<21)
+#define BNX2_CTX_CTX_CTRL_NO_RAM_ACC			 (1L<<23)
+#define BNX2_CTX_CTX_CTRL_PREFETCH_SIZE			 (0x3L<<24)
+#define BNX2_CTX_CTX_CTRL_ATTR				 (1L<<26)
+#define BNX2_CTX_CTX_CTRL_WRITE_REQ			 (1L<<30)
+#define BNX2_CTX_CTX_CTRL_READ_REQ			 (1L<<31)
+
+#define BNX2_CTX_CTX_DATA				0x00001020
+#define BNX2_CTX_ACCESS_STATUS				0x00001040
+#define BNX2_CTX_ACCESS_STATUS_MASTERENCODED		 (0xfL<<0)
+#define BNX2_CTX_ACCESS_STATUS_ACCESSMEMORYSM		 (0x3L<<10)
+#define BNX2_CTX_ACCESS_STATUS_PAGETABLEINITSM		 (0x3L<<12)
+#define BNX2_CTX_ACCESS_STATUS_ACCESSMEMORYINITSM	 (0x3L<<14)
+#define BNX2_CTX_ACCESS_STATUS_QUALIFIED_REQUEST	 (0x7ffL<<17)
+#define BNX2_CTX_ACCESS_STATUS_CAMMASTERENCODED_XI	 (0x1fL<<0)
+#define BNX2_CTX_ACCESS_STATUS_CACHEMASTERENCODED_XI	 (0x1fL<<5)
+#define BNX2_CTX_ACCESS_STATUS_REQUEST_XI		 (0x3fffffL<<10)
+
+#define BNX2_CTX_DBG_LOCK_STATUS			0x00001044
+#define BNX2_CTX_DBG_LOCK_STATUS_SM			 (0x3ffL<<0)
+#define BNX2_CTX_DBG_LOCK_STATUS_MATCH			 (0x3ffL<<22)
+
+#define BNX2_CTX_CACHE_CTRL_STATUS			0x00001048
+#define BNX2_CTX_CACHE_CTRL_STATUS_RFIFO_OVERFLOW	 (1L<<0)
+#define BNX2_CTX_CACHE_CTRL_STATUS_INVALID_READ_COMP	 (1L<<1)
+#define BNX2_CTX_CACHE_CTRL_STATUS_FLUSH_START		 (1L<<6)
+#define BNX2_CTX_CACHE_CTRL_STATUS_FREE_ENTRY_CNT	 (0x3fL<<7)
+#define BNX2_CTX_CACHE_CTRL_STATUS_CACHE_ENTRY_NEEDED	 (0x3fL<<13)
+#define BNX2_CTX_CACHE_CTRL_STATUS_RD_CHAN0_ACTIVE	 (1L<<19)
+#define BNX2_CTX_CACHE_CTRL_STATUS_RD_CHAN1_ACTIVE	 (1L<<20)
+#define BNX2_CTX_CACHE_CTRL_STATUS_RD_CHAN2_ACTIVE	 (1L<<21)
+#define BNX2_CTX_CACHE_CTRL_STATUS_RD_CHAN3_ACTIVE	 (1L<<22)
+#define BNX2_CTX_CACHE_CTRL_STATUS_RD_CHAN4_ACTIVE	 (1L<<23)
+#define BNX2_CTX_CACHE_CTRL_STATUS_RD_CHAN5_ACTIVE	 (1L<<24)
+#define BNX2_CTX_CACHE_CTRL_STATUS_RD_CHAN6_ACTIVE	 (1L<<25)
+#define BNX2_CTX_CACHE_CTRL_STATUS_RD_CHAN7_ACTIVE	 (1L<<26)
+#define BNX2_CTX_CACHE_CTRL_STATUS_RD_CHAN8_ACTIVE	 (1L<<27)
+#define BNX2_CTX_CACHE_CTRL_STATUS_RD_CHAN9_ACTIVE	 (1L<<28)
+#define BNX2_CTX_CACHE_CTRL_STATUS_RD_CHAN10_ACTIVE	 (1L<<29)
+
+#define BNX2_CTX_CACHE_CTRL_SM_STATUS			0x0000104c
+#define BNX2_CTX_CACHE_CTRL_SM_STATUS_CS_DWC		 (0x7L<<0)
+#define BNX2_CTX_CACHE_CTRL_SM_STATUS_CS_WFIFOC		 (0x7L<<3)
+#define BNX2_CTX_CACHE_CTRL_SM_STATUS_CS_RTAGC		 (0x7L<<6)
+#define BNX2_CTX_CACHE_CTRL_SM_STATUS_CS_RFIFOC		 (0x7L<<9)
+#define BNX2_CTX_CACHE_CTRL_SM_STATUS_INVALID_BLK_ADDR	 (0x7fffL<<16)
+
+#define BNX2_CTX_CACHE_STATUS				0x00001050
+#define BNX2_CTX_CACHE_STATUS_HELD_ENTRIES		 (0x3ffL<<0)
+#define BNX2_CTX_CACHE_STATUS_MAX_HELD_ENTRIES		 (0x3ffL<<16)
+
+#define BNX2_CTX_DMA_STATUS				0x00001054
+#define BNX2_CTX_DMA_STATUS_RD_CHAN0_STATUS		 (0x3L<<0)
+#define BNX2_CTX_DMA_STATUS_RD_CHAN1_STATUS		 (0x3L<<2)
+#define BNX2_CTX_DMA_STATUS_RD_CHAN2_STATUS		 (0x3L<<4)
+#define BNX2_CTX_DMA_STATUS_RD_CHAN3_STATUS		 (0x3L<<6)
+#define BNX2_CTX_DMA_STATUS_RD_CHAN4_STATUS		 (0x3L<<8)
+#define BNX2_CTX_DMA_STATUS_RD_CHAN5_STATUS		 (0x3L<<10)
+#define BNX2_CTX_DMA_STATUS_RD_CHAN6_STATUS		 (0x3L<<12)
+#define BNX2_CTX_DMA_STATUS_RD_CHAN7_STATUS		 (0x3L<<14)
+#define BNX2_CTX_DMA_STATUS_RD_CHAN8_STATUS		 (0x3L<<16)
+#define BNX2_CTX_DMA_STATUS_RD_CHAN9_STATUS		 (0x3L<<18)
+#define BNX2_CTX_DMA_STATUS_RD_CHAN10_STATUS		 (0x3L<<20)
+
+#define BNX2_CTX_REP_STATUS				0x00001058
+#define BNX2_CTX_REP_STATUS_ERROR_ENTRY			 (0x3ffL<<0)
+#define BNX2_CTX_REP_STATUS_ERROR_CLIENT_ID		 (0x1fL<<10)
+#define BNX2_CTX_REP_STATUS_USAGE_CNT_MAX_ERR		 (1L<<16)
+#define BNX2_CTX_REP_STATUS_USAGE_CNT_MIN_ERR		 (1L<<17)
+#define BNX2_CTX_REP_STATUS_USAGE_CNT_MISS_ERR		 (1L<<18)
+
+#define BNX2_CTX_CKSUM_ERROR_STATUS			0x0000105c
+#define BNX2_CTX_CKSUM_ERROR_STATUS_CALCULATED		 (0xffffL<<0)
+#define BNX2_CTX_CKSUM_ERROR_STATUS_EXPECTED		 (0xffffL<<16)
+
+#define BNX2_CTX_CHNL_LOCK_STATUS_0			0x00001080
+#define BNX2_CTX_CHNL_LOCK_STATUS_0_CID			 (0x3fffL<<0)
+#define BNX2_CTX_CHNL_LOCK_STATUS_0_TYPE		 (0x3L<<14)
+#define BNX2_CTX_CHNL_LOCK_STATUS_0_MODE		 (1L<<16)
+#define BNX2_CTX_CHNL_LOCK_STATUS_0_MODE_XI		 (1L<<14)
+#define BNX2_CTX_CHNL_LOCK_STATUS_0_TYPE_XI		 (0x7L<<15)
+
+#define BNX2_CTX_CHNL_LOCK_STATUS_1			0x00001084
+#define BNX2_CTX_CHNL_LOCK_STATUS_2			0x00001088
+#define BNX2_CTX_CHNL_LOCK_STATUS_3			0x0000108c
+#define BNX2_CTX_CHNL_LOCK_STATUS_4			0x00001090
+#define BNX2_CTX_CHNL_LOCK_STATUS_5			0x00001094
+#define BNX2_CTX_CHNL_LOCK_STATUS_6			0x00001098
+#define BNX2_CTX_CHNL_LOCK_STATUS_7			0x0000109c
+#define BNX2_CTX_CHNL_LOCK_STATUS_8			0x000010a0
+#define BNX2_CTX_CHNL_LOCK_STATUS_9			0x000010a4
+
+#define BNX2_CTX_CACHE_DATA				0x000010c4
+#define BNX2_CTX_HOST_PAGE_TBL_CTRL			0x000010c8
+#define BNX2_CTX_HOST_PAGE_TBL_CTRL_PAGE_TBL_ADDR	 (0x1ffL<<0)
+#define BNX2_CTX_HOST_PAGE_TBL_CTRL_WRITE_REQ		 (1L<<30)
+#define BNX2_CTX_HOST_PAGE_TBL_CTRL_READ_REQ		 (1L<<31)
+
+#define BNX2_CTX_HOST_PAGE_TBL_DATA0			0x000010cc
+#define BNX2_CTX_HOST_PAGE_TBL_DATA0_VALID		 (1L<<0)
+#define BNX2_CTX_HOST_PAGE_TBL_DATA0_VALUE		 (0xffffffL<<8)
+
+#define BNX2_CTX_HOST_PAGE_TBL_DATA1			0x000010d0
+#define BNX2_CTX_CAM_CTRL				0x000010d4
+#define BNX2_CTX_CAM_CTRL_CAM_ADDR			 (0x3ffL<<0)
+#define BNX2_CTX_CAM_CTRL_RESET				 (1L<<27)
+#define BNX2_CTX_CAM_CTRL_INVALIDATE			 (1L<<28)
+#define BNX2_CTX_CAM_CTRL_SEARCH			 (1L<<29)
+#define BNX2_CTX_CAM_CTRL_WRITE_REQ			 (1L<<30)
+#define BNX2_CTX_CAM_CTRL_READ_REQ			 (1L<<31)
+
+
+/*
+ *  emac_reg definition
+ *  offset: 0x1400
+ */
+#define BNX2_EMAC_MODE					0x00001400
+#define BNX2_EMAC_MODE_RESET				 (1L<<0)
+#define BNX2_EMAC_MODE_HALF_DUPLEX			 (1L<<1)
+#define BNX2_EMAC_MODE_PORT				 (0x3L<<2)
+#define BNX2_EMAC_MODE_PORT_NONE			 (0L<<2)
+#define BNX2_EMAC_MODE_PORT_MII				 (1L<<2)
+#define BNX2_EMAC_MODE_PORT_GMII			 (2L<<2)
+#define BNX2_EMAC_MODE_PORT_MII_10M			 (3L<<2)
+#define BNX2_EMAC_MODE_MAC_LOOP				 (1L<<4)
+#define BNX2_EMAC_MODE_25G_MODE				 (1L<<5)
+#define BNX2_EMAC_MODE_TAGGED_MAC_CTL			 (1L<<7)
+#define BNX2_EMAC_MODE_TX_BURST				 (1L<<8)
+#define BNX2_EMAC_MODE_MAX_DEFER_DROP_ENA		 (1L<<9)
+#define BNX2_EMAC_MODE_EXT_LINK_POL			 (1L<<10)
+#define BNX2_EMAC_MODE_FORCE_LINK			 (1L<<11)
+#define BNX2_EMAC_MODE_SERDES_MODE			 (1L<<12)
+#define BNX2_EMAC_MODE_BOND_OVRD			 (1L<<13)
+#define BNX2_EMAC_MODE_MPKT				 (1L<<18)
+#define BNX2_EMAC_MODE_MPKT_RCVD			 (1L<<19)
+#define BNX2_EMAC_MODE_ACPI_RCVD			 (1L<<20)
+
+#define BNX2_EMAC_STATUS				0x00001404
+#define BNX2_EMAC_STATUS_LINK				 (1L<<11)
+#define BNX2_EMAC_STATUS_LINK_CHANGE			 (1L<<12)
+#define BNX2_EMAC_STATUS_SERDES_AUTONEG_COMPLETE	 (1L<<13)
+#define BNX2_EMAC_STATUS_SERDES_AUTONEG_CHANGE		 (1L<<14)
+#define BNX2_EMAC_STATUS_SERDES_NXT_PG_CHANGE		 (1L<<16)
+#define BNX2_EMAC_STATUS_SERDES_RX_CONFIG_IS_0		 (1L<<17)
+#define BNX2_EMAC_STATUS_SERDES_RX_CONFIG_IS_0_CHANGE	 (1L<<18)
+#define BNX2_EMAC_STATUS_MI_COMPLETE			 (1L<<22)
+#define BNX2_EMAC_STATUS_MI_INT				 (1L<<23)
+#define BNX2_EMAC_STATUS_AP_ERROR			 (1L<<24)
+#define BNX2_EMAC_STATUS_PARITY_ERROR_STATE		 (1L<<31)
+
+#define BNX2_EMAC_ATTENTION_ENA				0x00001408
+#define BNX2_EMAC_ATTENTION_ENA_LINK			 (1L<<11)
+#define BNX2_EMAC_ATTENTION_ENA_AUTONEG_CHANGE		 (1L<<14)
+#define BNX2_EMAC_ATTENTION_ENA_NXT_PG_CHANGE		 (1L<<16)
+#define BNX2_EMAC_ATTENTION_ENA_SERDES_RX_CONFIG_IS_0_CHANGE	 (1L<<18)
+#define BNX2_EMAC_ATTENTION_ENA_MI_COMPLETE		 (1L<<22)
+#define BNX2_EMAC_ATTENTION_ENA_MI_INT			 (1L<<23)
+#define BNX2_EMAC_ATTENTION_ENA_AP_ERROR		 (1L<<24)
+
+#define BNX2_EMAC_LED					0x0000140c
+#define BNX2_EMAC_LED_OVERRIDE				 (1L<<0)
+#define BNX2_EMAC_LED_1000MB_OVERRIDE			 (1L<<1)
+#define BNX2_EMAC_LED_100MB_OVERRIDE			 (1L<<2)
+#define BNX2_EMAC_LED_10MB_OVERRIDE			 (1L<<3)
+#define BNX2_EMAC_LED_TRAFFIC_OVERRIDE			 (1L<<4)
+#define BNX2_EMAC_LED_BLNK_TRAFFIC			 (1L<<5)
+#define BNX2_EMAC_LED_TRAFFIC				 (1L<<6)
+#define BNX2_EMAC_LED_1000MB				 (1L<<7)
+#define BNX2_EMAC_LED_100MB				 (1L<<8)
+#define BNX2_EMAC_LED_10MB				 (1L<<9)
+#define BNX2_EMAC_LED_TRAFFIC_STAT			 (1L<<10)
+#define BNX2_EMAC_LED_2500MB				 (1L<<11)
+#define BNX2_EMAC_LED_2500MB_OVERRIDE			 (1L<<12)
+#define BNX2_EMAC_LED_ACTIVITY_SEL			 (0x3L<<17)
+#define BNX2_EMAC_LED_ACTIVITY_SEL_0			 (0L<<17)
+#define BNX2_EMAC_LED_ACTIVITY_SEL_1			 (1L<<17)
+#define BNX2_EMAC_LED_ACTIVITY_SEL_2			 (2L<<17)
+#define BNX2_EMAC_LED_ACTIVITY_SEL_3			 (3L<<17)
+#define BNX2_EMAC_LED_BLNK_RATE				 (0xfffL<<19)
+#define BNX2_EMAC_LED_BLNK_RATE_ENA			 (1L<<31)
+
+#define BNX2_EMAC_MAC_MATCH0				0x00001410
+#define BNX2_EMAC_MAC_MATCH1				0x00001414
+#define BNX2_EMAC_MAC_MATCH2				0x00001418
+#define BNX2_EMAC_MAC_MATCH3				0x0000141c
+#define BNX2_EMAC_MAC_MATCH4				0x00001420
+#define BNX2_EMAC_MAC_MATCH5				0x00001424
+#define BNX2_EMAC_MAC_MATCH6				0x00001428
+#define BNX2_EMAC_MAC_MATCH7				0x0000142c
+#define BNX2_EMAC_MAC_MATCH8				0x00001430
+#define BNX2_EMAC_MAC_MATCH9				0x00001434
+#define BNX2_EMAC_MAC_MATCH10				0x00001438
+#define BNX2_EMAC_MAC_MATCH11				0x0000143c
+#define BNX2_EMAC_MAC_MATCH12				0x00001440
+#define BNX2_EMAC_MAC_MATCH13				0x00001444
+#define BNX2_EMAC_MAC_MATCH14				0x00001448
+#define BNX2_EMAC_MAC_MATCH15				0x0000144c
+#define BNX2_EMAC_MAC_MATCH16				0x00001450
+#define BNX2_EMAC_MAC_MATCH17				0x00001454
+#define BNX2_EMAC_MAC_MATCH18				0x00001458
+#define BNX2_EMAC_MAC_MATCH19				0x0000145c
+#define BNX2_EMAC_MAC_MATCH20				0x00001460
+#define BNX2_EMAC_MAC_MATCH21				0x00001464
+#define BNX2_EMAC_MAC_MATCH22				0x00001468
+#define BNX2_EMAC_MAC_MATCH23				0x0000146c
+#define BNX2_EMAC_MAC_MATCH24				0x00001470
+#define BNX2_EMAC_MAC_MATCH25				0x00001474
+#define BNX2_EMAC_MAC_MATCH26				0x00001478
+#define BNX2_EMAC_MAC_MATCH27				0x0000147c
+#define BNX2_EMAC_MAC_MATCH28				0x00001480
+#define BNX2_EMAC_MAC_MATCH29				0x00001484
+#define BNX2_EMAC_MAC_MATCH30				0x00001488
+#define BNX2_EMAC_MAC_MATCH31				0x0000148c
+#define BNX2_EMAC_BACKOFF_SEED				0x00001498
+#define BNX2_EMAC_BACKOFF_SEED_EMAC_BACKOFF_SEED	 (0x3ffL<<0)
+
+#define BNX2_EMAC_RX_MTU_SIZE				0x0000149c
+#define BNX2_EMAC_RX_MTU_SIZE_MTU_SIZE			 (0xffffL<<0)
+#define BNX2_EMAC_RX_MTU_SIZE_JUMBO_ENA			 (1L<<31)
+
+#define BNX2_EMAC_SERDES_CNTL				0x000014a4
+#define BNX2_EMAC_SERDES_CNTL_RXR			 (0x7L<<0)
+#define BNX2_EMAC_SERDES_CNTL_RXG			 (0x3L<<3)
+#define BNX2_EMAC_SERDES_CNTL_RXCKSEL			 (1L<<6)
+#define BNX2_EMAC_SERDES_CNTL_TXBIAS			 (0x7L<<7)
+#define BNX2_EMAC_SERDES_CNTL_BGMAX			 (1L<<10)
+#define BNX2_EMAC_SERDES_CNTL_BGMIN			 (1L<<11)
+#define BNX2_EMAC_SERDES_CNTL_TXMODE			 (1L<<12)
+#define BNX2_EMAC_SERDES_CNTL_TXEDGE			 (1L<<13)
+#define BNX2_EMAC_SERDES_CNTL_SERDES_MODE		 (1L<<14)
+#define BNX2_EMAC_SERDES_CNTL_PLLTEST			 (1L<<15)
+#define BNX2_EMAC_SERDES_CNTL_CDET_EN			 (1L<<16)
+#define BNX2_EMAC_SERDES_CNTL_TBI_LBK			 (1L<<17)
+#define BNX2_EMAC_SERDES_CNTL_REMOTE_LBK		 (1L<<18)
+#define BNX2_EMAC_SERDES_CNTL_REV_PHASE			 (1L<<19)
+#define BNX2_EMAC_SERDES_CNTL_REGCTL12			 (0x3L<<20)
+#define BNX2_EMAC_SERDES_CNTL_REGCTL25			 (0x3L<<22)
+
+#define BNX2_EMAC_SERDES_STATUS				0x000014a8
+#define BNX2_EMAC_SERDES_STATUS_RX_STAT			 (0xffL<<0)
+#define BNX2_EMAC_SERDES_STATUS_COMMA_DET		 (1L<<8)
+
+#define BNX2_EMAC_MDIO_COMM				0x000014ac
+#define BNX2_EMAC_MDIO_COMM_DATA			 (0xffffL<<0)
+#define BNX2_EMAC_MDIO_COMM_REG_ADDR			 (0x1fL<<16)
+#define BNX2_EMAC_MDIO_COMM_PHY_ADDR			 (0x1fL<<21)
+#define BNX2_EMAC_MDIO_COMM_COMMAND			 (0x3L<<26)
+#define BNX2_EMAC_MDIO_COMM_COMMAND_UNDEFINED_0		 (0L<<26)
+#define BNX2_EMAC_MDIO_COMM_COMMAND_ADDRESS		 (0L<<26)
+#define BNX2_EMAC_MDIO_COMM_COMMAND_WRITE		 (1L<<26)
+#define BNX2_EMAC_MDIO_COMM_COMMAND_READ		 (2L<<26)
+#define BNX2_EMAC_MDIO_COMM_COMMAND_WRITE_22_XI		 (1L<<26)
+#define BNX2_EMAC_MDIO_COMM_COMMAND_WRITE_45_XI		 (1L<<26)
+#define BNX2_EMAC_MDIO_COMM_COMMAND_READ_22_XI		 (2L<<26)
+#define BNX2_EMAC_MDIO_COMM_COMMAND_READ_INC_45_XI	 (2L<<26)
+#define BNX2_EMAC_MDIO_COMM_COMMAND_UNDEFINED_3		 (3L<<26)
+#define BNX2_EMAC_MDIO_COMM_COMMAND_READ_45		 (3L<<26)
+#define BNX2_EMAC_MDIO_COMM_FAIL			 (1L<<28)
+#define BNX2_EMAC_MDIO_COMM_START_BUSY			 (1L<<29)
+#define BNX2_EMAC_MDIO_COMM_DISEXT			 (1L<<30)
+
+#define BNX2_EMAC_MDIO_STATUS				0x000014b0
+#define BNX2_EMAC_MDIO_STATUS_LINK			 (1L<<0)
+#define BNX2_EMAC_MDIO_STATUS_10MB			 (1L<<1)
+
+#define BNX2_EMAC_MDIO_MODE				0x000014b4
+#define BNX2_EMAC_MDIO_MODE_SHORT_PREAMBLE		 (1L<<1)
+#define BNX2_EMAC_MDIO_MODE_AUTO_POLL			 (1L<<4)
+#define BNX2_EMAC_MDIO_MODE_BIT_BANG			 (1L<<8)
+#define BNX2_EMAC_MDIO_MODE_MDIO			 (1L<<9)
+#define BNX2_EMAC_MDIO_MODE_MDIO_OE			 (1L<<10)
+#define BNX2_EMAC_MDIO_MODE_MDC				 (1L<<11)
+#define BNX2_EMAC_MDIO_MODE_MDINT			 (1L<<12)
+#define BNX2_EMAC_MDIO_MODE_EXT_MDINT			 (1L<<13)
+#define BNX2_EMAC_MDIO_MODE_CLOCK_CNT			 (0x1fL<<16)
+#define BNX2_EMAC_MDIO_MODE_CLOCK_CNT_XI		 (0x3fL<<16)
+#define BNX2_EMAC_MDIO_MODE_CLAUSE_45_XI		 (1L<<31)
+
+#define BNX2_EMAC_MDIO_AUTO_STATUS			0x000014b8
+#define BNX2_EMAC_MDIO_AUTO_STATUS_AUTO_ERR		 (1L<<0)
+
+#define BNX2_EMAC_TX_MODE				0x000014bc
+#define BNX2_EMAC_TX_MODE_RESET				 (1L<<0)
+#define BNX2_EMAC_TX_MODE_CS16_TEST			 (1L<<2)
+#define BNX2_EMAC_TX_MODE_EXT_PAUSE_EN			 (1L<<3)
+#define BNX2_EMAC_TX_MODE_FLOW_EN			 (1L<<4)
+#define BNX2_EMAC_TX_MODE_BIG_BACKOFF			 (1L<<5)
+#define BNX2_EMAC_TX_MODE_LONG_PAUSE			 (1L<<6)
+#define BNX2_EMAC_TX_MODE_LINK_AWARE			 (1L<<7)
+
+#define BNX2_EMAC_TX_STATUS				0x000014c0
+#define BNX2_EMAC_TX_STATUS_XOFFED			 (1L<<0)
+#define BNX2_EMAC_TX_STATUS_XOFF_SENT			 (1L<<1)
+#define BNX2_EMAC_TX_STATUS_XON_SENT			 (1L<<2)
+#define BNX2_EMAC_TX_STATUS_LINK_UP			 (1L<<3)
+#define BNX2_EMAC_TX_STATUS_UNDERRUN			 (1L<<4)
+#define BNX2_EMAC_TX_STATUS_CS16_ERROR			 (1L<<5)
+
+#define BNX2_EMAC_TX_LENGTHS				0x000014c4
+#define BNX2_EMAC_TX_LENGTHS_SLOT			 (0xffL<<0)
+#define BNX2_EMAC_TX_LENGTHS_IPG			 (0xfL<<8)
+#define BNX2_EMAC_TX_LENGTHS_IPG_CRS			 (0x3L<<12)
+
+#define BNX2_EMAC_RX_MODE				0x000014c8
+#define BNX2_EMAC_RX_MODE_RESET				 (1L<<0)
+#define BNX2_EMAC_RX_MODE_FLOW_EN			 (1L<<2)
+#define BNX2_EMAC_RX_MODE_KEEP_MAC_CONTROL		 (1L<<3)
+#define BNX2_EMAC_RX_MODE_KEEP_PAUSE			 (1L<<4)
+#define BNX2_EMAC_RX_MODE_ACCEPT_OVERSIZE		 (1L<<5)
+#define BNX2_EMAC_RX_MODE_ACCEPT_RUNTS			 (1L<<6)
+#define BNX2_EMAC_RX_MODE_LLC_CHK			 (1L<<7)
+#define BNX2_EMAC_RX_MODE_PROMISCUOUS			 (1L<<8)
+#define BNX2_EMAC_RX_MODE_NO_CRC_CHK			 (1L<<9)
+#define BNX2_EMAC_RX_MODE_KEEP_VLAN_TAG			 (1L<<10)
+#define BNX2_EMAC_RX_MODE_FILT_BROADCAST		 (1L<<11)
+#define BNX2_EMAC_RX_MODE_SORT_MODE			 (1L<<12)
+
+#define BNX2_EMAC_RX_STATUS				0x000014cc
+#define BNX2_EMAC_RX_STATUS_FFED			 (1L<<0)
+#define BNX2_EMAC_RX_STATUS_FF_RECEIVED			 (1L<<1)
+#define BNX2_EMAC_RX_STATUS_N_RECEIVED			 (1L<<2)
+
+#define BNX2_EMAC_MULTICAST_HASH0			0x000014d0
+#define BNX2_EMAC_MULTICAST_HASH1			0x000014d4
+#define BNX2_EMAC_MULTICAST_HASH2			0x000014d8
+#define BNX2_EMAC_MULTICAST_HASH3			0x000014dc
+#define BNX2_EMAC_MULTICAST_HASH4			0x000014e0
+#define BNX2_EMAC_MULTICAST_HASH5			0x000014e4
+#define BNX2_EMAC_MULTICAST_HASH6			0x000014e8
+#define BNX2_EMAC_MULTICAST_HASH7			0x000014ec
+#define BNX2_EMAC_CKSUM_ERROR_STATUS			0x000014f0
+#define BNX2_EMAC_CKSUM_ERROR_STATUS_CALCULATED		 (0xffffL<<0)
+#define BNX2_EMAC_CKSUM_ERROR_STATUS_EXPECTED		 (0xffffL<<16)
+
+#define BNX2_EMAC_RX_STAT_IFHCINOCTETS			0x00001500
+#define BNX2_EMAC_RX_STAT_IFHCINBADOCTETS		0x00001504
+#define BNX2_EMAC_RX_STAT_ETHERSTATSFRAGMENTS		0x00001508
+#define BNX2_EMAC_RX_STAT_IFHCINUCASTPKTS		0x0000150c
+#define BNX2_EMAC_RX_STAT_IFHCINMULTICASTPKTS		0x00001510
+#define BNX2_EMAC_RX_STAT_IFHCINBROADCASTPKTS		0x00001514
+#define BNX2_EMAC_RX_STAT_DOT3STATSFCSERRORS		0x00001518
+#define BNX2_EMAC_RX_STAT_DOT3STATSALIGNMENTERRORS	0x0000151c
+#define BNX2_EMAC_RX_STAT_DOT3STATSCARRIERSENSEERRORS	0x00001520
+#define BNX2_EMAC_RX_STAT_XONPAUSEFRAMESRECEIVED	0x00001524
+#define BNX2_EMAC_RX_STAT_XOFFPAUSEFRAMESRECEIVED	0x00001528
+#define BNX2_EMAC_RX_STAT_MACCONTROLFRAMESRECEIVED	0x0000152c
+#define BNX2_EMAC_RX_STAT_XOFFSTATEENTERED		0x00001530
+#define BNX2_EMAC_RX_STAT_DOT3STATSFRAMESTOOLONG	0x00001534
+#define BNX2_EMAC_RX_STAT_ETHERSTATSJABBERS		0x00001538
+#define BNX2_EMAC_RX_STAT_ETHERSTATSUNDERSIZEPKTS	0x0000153c
+#define BNX2_EMAC_RX_STAT_ETHERSTATSPKTS64OCTETS	0x00001540
+#define BNX2_EMAC_RX_STAT_ETHERSTATSPKTS65OCTETSTO127OCTETS	0x00001544
+#define BNX2_EMAC_RX_STAT_ETHERSTATSPKTS128OCTETSTO255OCTETS	0x00001548
+#define BNX2_EMAC_RX_STAT_ETHERSTATSPKTS256OCTETSTO511OCTETS	0x0000154c
+#define BNX2_EMAC_RX_STAT_ETHERSTATSPKTS512OCTETSTO1023OCTETS	0x00001550
+#define BNX2_EMAC_RX_STAT_ETHERSTATSPKTS1024OCTETSTO1522OCTETS	0x00001554
+#define BNX2_EMAC_RX_STAT_ETHERSTATSPKTSOVER1522OCTETS	0x00001558
+#define BNX2_EMAC_RXMAC_DEBUG0				0x0000155c
+#define BNX2_EMAC_RXMAC_DEBUG1				0x00001560
+#define BNX2_EMAC_RXMAC_DEBUG1_LENGTH_NE_BYTE_COUNT	 (1L<<0)
+#define BNX2_EMAC_RXMAC_DEBUG1_LENGTH_OUT_RANGE		 (1L<<1)
+#define BNX2_EMAC_RXMAC_DEBUG1_BAD_CRC			 (1L<<2)
+#define BNX2_EMAC_RXMAC_DEBUG1_RX_ERROR			 (1L<<3)
+#define BNX2_EMAC_RXMAC_DEBUG1_ALIGN_ERROR		 (1L<<4)
+#define BNX2_EMAC_RXMAC_DEBUG1_LAST_DATA		 (1L<<5)
+#define BNX2_EMAC_RXMAC_DEBUG1_ODD_BYTE_START		 (1L<<6)
+#define BNX2_EMAC_RXMAC_DEBUG1_BYTE_COUNT		 (0xffffL<<7)
+#define BNX2_EMAC_RXMAC_DEBUG1_SLOT_TIME		 (0xffL<<23)
+
+#define BNX2_EMAC_RXMAC_DEBUG2				0x00001564
+#define BNX2_EMAC_RXMAC_DEBUG2_SM_STATE			 (0x7L<<0)
+#define BNX2_EMAC_RXMAC_DEBUG2_SM_STATE_IDLE		 (0x0L<<0)
+#define BNX2_EMAC_RXMAC_DEBUG2_SM_STATE_SFD		 (0x1L<<0)
+#define BNX2_EMAC_RXMAC_DEBUG2_SM_STATE_DATA		 (0x2L<<0)
+#define BNX2_EMAC_RXMAC_DEBUG2_SM_STATE_SKEEP		 (0x3L<<0)
+#define BNX2_EMAC_RXMAC_DEBUG2_SM_STATE_EXT		 (0x4L<<0)
+#define BNX2_EMAC_RXMAC_DEBUG2_SM_STATE_DROP		 (0x5L<<0)
+#define BNX2_EMAC_RXMAC_DEBUG2_SM_STATE_SDROP		 (0x6L<<0)
+#define BNX2_EMAC_RXMAC_DEBUG2_SM_STATE_FC		 (0x7L<<0)
+#define BNX2_EMAC_RXMAC_DEBUG2_IDI_STATE		 (0xfL<<3)
+#define BNX2_EMAC_RXMAC_DEBUG2_IDI_STATE_IDLE		 (0x0L<<3)
+#define BNX2_EMAC_RXMAC_DEBUG2_IDI_STATE_DATA0		 (0x1L<<3)
+#define BNX2_EMAC_RXMAC_DEBUG2_IDI_STATE_DATA1		 (0x2L<<3)
+#define BNX2_EMAC_RXMAC_DEBUG2_IDI_STATE_DATA2		 (0x3L<<3)
+#define BNX2_EMAC_RXMAC_DEBUG2_IDI_STATE_DATA3		 (0x4L<<3)
+#define BNX2_EMAC_RXMAC_DEBUG2_IDI_STATE_ABORT		 (0x5L<<3)
+#define BNX2_EMAC_RXMAC_DEBUG2_IDI_STATE_WAIT		 (0x6L<<3)
+#define BNX2_EMAC_RXMAC_DEBUG2_IDI_STATE_STATUS		 (0x7L<<3)
+#define BNX2_EMAC_RXMAC_DEBUG2_IDI_STATE_LAST		 (0x8L<<3)
+#define BNX2_EMAC_RXMAC_DEBUG2_BYTE_IN			 (0xffL<<7)
+#define BNX2_EMAC_RXMAC_DEBUG2_FALSEC			 (1L<<15)
+#define BNX2_EMAC_RXMAC_DEBUG2_TAGGED			 (1L<<16)
+#define BNX2_EMAC_RXMAC_DEBUG2_PAUSE_STATE		 (1L<<18)
+#define BNX2_EMAC_RXMAC_DEBUG2_PAUSE_STATE_IDLE		 (0L<<18)
+#define BNX2_EMAC_RXMAC_DEBUG2_PAUSE_STATE_PAUSED	 (1L<<18)
+#define BNX2_EMAC_RXMAC_DEBUG2_SE_COUNTER		 (0xfL<<19)
+#define BNX2_EMAC_RXMAC_DEBUG2_QUANTA			 (0x1fL<<23)
+
+#define BNX2_EMAC_RXMAC_DEBUG3				0x00001568
+#define BNX2_EMAC_RXMAC_DEBUG3_PAUSE_CTR		 (0xffffL<<0)
+#define BNX2_EMAC_RXMAC_DEBUG3_TMP_PAUSE_CTR		 (0xffffL<<16)
+
+#define BNX2_EMAC_RXMAC_DEBUG4				0x0000156c
+#define BNX2_EMAC_RXMAC_DEBUG4_TYPE_FIELD		 (0xffffL<<0)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE		 (0x3fL<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_IDLE		 (0x0L<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_UMAC2		 (0x1L<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_UMAC3		 (0x2L<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_UNI		 (0x3L<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_MMAC3		 (0x5L<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_PSA1		 (0x6L<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_MMAC2		 (0x7L<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_PSA2		 (0x7L<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_PSA3		 (0x8L<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_MC2		 (0x9L<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_MC3		 (0xaL<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_MWAIT1	 (0xeL<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_MWAIT2	 (0xfL<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_MCHECK	 (0x10L<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_MC		 (0x11L<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_BC2		 (0x12L<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_BC3		 (0x13L<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_BSA1		 (0x14L<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_BSA2		 (0x15L<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_BSA3		 (0x16L<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_BTYPE		 (0x17L<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_BC		 (0x18L<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_PTYPE		 (0x19L<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_CMD		 (0x1aL<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_MAC		 (0x1bL<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_LATCH		 (0x1cL<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_XOFF		 (0x1dL<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_XON		 (0x1eL<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_PAUSED	 (0x1fL<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_NPAUSED	 (0x20L<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_TTYPE		 (0x21L<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_TVAL		 (0x22L<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_USA1		 (0x23L<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_USA2		 (0x24L<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_USA3		 (0x25L<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_UTYPE		 (0x26L<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_UTTYPE	 (0x27L<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_UTVAL		 (0x28L<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_MTYPE		 (0x29L<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_FILT_STATE_DROP		 (0x2aL<<16)
+#define BNX2_EMAC_RXMAC_DEBUG4_DROP_PKT			 (1L<<22)
+#define BNX2_EMAC_RXMAC_DEBUG4_SLOT_FILLED		 (1L<<23)
+#define BNX2_EMAC_RXMAC_DEBUG4_FALSE_CARRIER		 (1L<<24)
+#define BNX2_EMAC_RXMAC_DEBUG4_LAST_DATA		 (1L<<25)
+#define BNX2_EMAC_RXMAC_DEBUG4_SFD_FOUND		 (1L<<26)
+#define BNX2_EMAC_RXMAC_DEBUG4_ADVANCE			 (1L<<27)
+#define BNX2_EMAC_RXMAC_DEBUG4_START			 (1L<<28)
+
+#define BNX2_EMAC_RXMAC_DEBUG5				0x00001570
+#define BNX2_EMAC_RXMAC_DEBUG5_PS_IDISM			 (0x7L<<0)
+#define BNX2_EMAC_RXMAC_DEBUG5_PS_IDISM_IDLE		 (0L<<0)
+#define BNX2_EMAC_RXMAC_DEBUG5_PS_IDISM_WAIT_EOF	 (1L<<0)
+#define BNX2_EMAC_RXMAC_DEBUG5_PS_IDISM_WAIT_STAT	 (2L<<0)
+#define BNX2_EMAC_RXMAC_DEBUG5_PS_IDISM_SET_EOF4FCRC	 (3L<<0)
+#define BNX2_EMAC_RXMAC_DEBUG5_PS_IDISM_SET_EOF4RDE	 (4L<<0)
+#define BNX2_EMAC_RXMAC_DEBUG5_PS_IDISM_SET_EOF4ALL	 (5L<<0)
+#define BNX2_EMAC_RXMAC_DEBUG5_PS_IDISM_1WD_WAIT_STAT	 (6L<<0)
+#define BNX2_EMAC_RXMAC_DEBUG5_CCODE_BUF1		 (0x7L<<4)
+#define BNX2_EMAC_RXMAC_DEBUG5_CCODE_BUF1_VDW		 (0x0L<<4)
+#define BNX2_EMAC_RXMAC_DEBUG5_CCODE_BUF1_STAT		 (0x1L<<4)
+#define BNX2_EMAC_RXMAC_DEBUG5_CCODE_BUF1_AEOF		 (0x2L<<4)
+#define BNX2_EMAC_RXMAC_DEBUG5_CCODE_BUF1_NEOF		 (0x3L<<4)
+#define BNX2_EMAC_RXMAC_DEBUG5_CCODE_BUF1_SOF		 (0x4L<<4)
+#define BNX2_EMAC_RXMAC_DEBUG5_CCODE_BUF1_SAEOF		 (0x6L<<4)
+#define BNX2_EMAC_RXMAC_DEBUG5_CCODE_BUF1_SNEOF		 (0x7L<<4)
+#define BNX2_EMAC_RXMAC_DEBUG5_EOF_DETECTED		 (1L<<7)
+#define BNX2_EMAC_RXMAC_DEBUG5_CCODE_BUF0		 (0x7L<<8)
+#define BNX2_EMAC_RXMAC_DEBUG5_RPM_IDI_FIFO_FULL	 (1L<<11)
+#define BNX2_EMAC_RXMAC_DEBUG5_LOAD_CCODE		 (1L<<12)
+#define BNX2_EMAC_RXMAC_DEBUG5_LOAD_DATA		 (1L<<13)
+#define BNX2_EMAC_RXMAC_DEBUG5_LOAD_STAT		 (1L<<14)
+#define BNX2_EMAC_RXMAC_DEBUG5_CLR_STAT			 (1L<<15)
+#define BNX2_EMAC_RXMAC_DEBUG5_IDI_RPM_CCODE		 (0x3L<<16)
+#define BNX2_EMAC_RXMAC_DEBUG5_IDI_RPM_ACCEPT		 (1L<<19)
+#define BNX2_EMAC_RXMAC_DEBUG5_FMLEN			 (0xfffL<<20)
+
+#define BNX2_EMAC_RX_STAT_FALSECARRIERERRORS		0x00001574
+#define BNX2_EMAC_RX_STAT_AC0				0x00001580
+#define BNX2_EMAC_RX_STAT_AC1				0x00001584
+#define BNX2_EMAC_RX_STAT_AC2				0x00001588
+#define BNX2_EMAC_RX_STAT_AC3				0x0000158c
+#define BNX2_EMAC_RX_STAT_AC4				0x00001590
+#define BNX2_EMAC_RX_STAT_AC5				0x00001594
+#define BNX2_EMAC_RX_STAT_AC6				0x00001598
+#define BNX2_EMAC_RX_STAT_AC7				0x0000159c
+#define BNX2_EMAC_RX_STAT_AC8				0x000015a0
+#define BNX2_EMAC_RX_STAT_AC9				0x000015a4
+#define BNX2_EMAC_RX_STAT_AC10				0x000015a8
+#define BNX2_EMAC_RX_STAT_AC11				0x000015ac
+#define BNX2_EMAC_RX_STAT_AC12				0x000015b0
+#define BNX2_EMAC_RX_STAT_AC13				0x000015b4
+#define BNX2_EMAC_RX_STAT_AC14				0x000015b8
+#define BNX2_EMAC_RX_STAT_AC15				0x000015bc
+#define BNX2_EMAC_RX_STAT_AC16				0x000015c0
+#define BNX2_EMAC_RX_STAT_AC17				0x000015c4
+#define BNX2_EMAC_RX_STAT_AC18				0x000015c8
+#define BNX2_EMAC_RX_STAT_AC19				0x000015cc
+#define BNX2_EMAC_RX_STAT_AC20				0x000015d0
+#define BNX2_EMAC_RX_STAT_AC21				0x000015d4
+#define BNX2_EMAC_RX_STAT_AC22				0x000015d8
+#define BNX2_EMAC_RXMAC_SUC_DBG_OVERRUNVEC		0x000015dc
+#define BNX2_EMAC_RX_STAT_AC_28				0x000015f4
+#define BNX2_EMAC_TX_STAT_IFHCOUTOCTETS			0x00001600
+#define BNX2_EMAC_TX_STAT_IFHCOUTBADOCTETS		0x00001604
+#define BNX2_EMAC_TX_STAT_ETHERSTATSCOLLISIONS		0x00001608
+#define BNX2_EMAC_TX_STAT_OUTXONSENT			0x0000160c
+#define BNX2_EMAC_TX_STAT_OUTXOFFSENT			0x00001610
+#define BNX2_EMAC_TX_STAT_FLOWCONTROLDONE		0x00001614
+#define BNX2_EMAC_TX_STAT_DOT3STATSSINGLECOLLISIONFRAMES	0x00001618
+#define BNX2_EMAC_TX_STAT_DOT3STATSMULTIPLECOLLISIONFRAMES	0x0000161c
+#define BNX2_EMAC_TX_STAT_DOT3STATSDEFERREDTRANSMISSIONS	0x00001620
+#define BNX2_EMAC_TX_STAT_DOT3STATSEXCESSIVECOLLISIONS	0x00001624
+#define BNX2_EMAC_TX_STAT_DOT3STATSLATECOLLISIONS	0x00001628
+#define BNX2_EMAC_TX_STAT_IFHCOUTUCASTPKTS		0x0000162c
+#define BNX2_EMAC_TX_STAT_IFHCOUTMULTICASTPKTS		0x00001630
+#define BNX2_EMAC_TX_STAT_IFHCOUTBROADCASTPKTS		0x00001634
+#define BNX2_EMAC_TX_STAT_ETHERSTATSPKTS64OCTETS	0x00001638
+#define BNX2_EMAC_TX_STAT_ETHERSTATSPKTS65OCTETSTO127OCTETS	0x0000163c
+#define BNX2_EMAC_TX_STAT_ETHERSTATSPKTS128OCTETSTO255OCTETS	0x00001640
+#define BNX2_EMAC_TX_STAT_ETHERSTATSPKTS256OCTETSTO511OCTETS	0x00001644
+#define BNX2_EMAC_TX_STAT_ETHERSTATSPKTS512OCTETSTO1023OCTETS	0x00001648
+#define BNX2_EMAC_TX_STAT_ETHERSTATSPKTS1024OCTETSTO1522OCTETS	0x0000164c
+#define BNX2_EMAC_TX_STAT_ETHERSTATSPKTSOVER1522OCTETS	0x00001650
+#define BNX2_EMAC_TX_STAT_DOT3STATSINTERNALMACTRANSMITERRORS	0x00001654
+#define BNX2_EMAC_TXMAC_DEBUG0				0x00001658
+#define BNX2_EMAC_TXMAC_DEBUG1				0x0000165c
+#define BNX2_EMAC_TXMAC_DEBUG1_ODI_STATE		 (0xfL<<0)
+#define BNX2_EMAC_TXMAC_DEBUG1_ODI_STATE_IDLE		 (0x0L<<0)
+#define BNX2_EMAC_TXMAC_DEBUG1_ODI_STATE_START0		 (0x1L<<0)
+#define BNX2_EMAC_TXMAC_DEBUG1_ODI_STATE_DATA0		 (0x4L<<0)
+#define BNX2_EMAC_TXMAC_DEBUG1_ODI_STATE_DATA1		 (0x5L<<0)
+#define BNX2_EMAC_TXMAC_DEBUG1_ODI_STATE_DATA2		 (0x6L<<0)
+#define BNX2_EMAC_TXMAC_DEBUG1_ODI_STATE_DATA3		 (0x7L<<0)
+#define BNX2_EMAC_TXMAC_DEBUG1_ODI_STATE_WAIT0		 (0x8L<<0)
+#define BNX2_EMAC_TXMAC_DEBUG1_ODI_STATE_WAIT1		 (0x9L<<0)
+#define BNX2_EMAC_TXMAC_DEBUG1_CRS_ENABLE		 (1L<<4)
+#define BNX2_EMAC_TXMAC_DEBUG1_BAD_CRC			 (1L<<5)
+#define BNX2_EMAC_TXMAC_DEBUG1_SE_COUNTER		 (0xfL<<6)
+#define BNX2_EMAC_TXMAC_DEBUG1_SEND_PAUSE		 (1L<<10)
+#define BNX2_EMAC_TXMAC_DEBUG1_LATE_COLLISION		 (1L<<11)
+#define BNX2_EMAC_TXMAC_DEBUG1_MAX_DEFER		 (1L<<12)
+#define BNX2_EMAC_TXMAC_DEBUG1_DEFERRED			 (1L<<13)
+#define BNX2_EMAC_TXMAC_DEBUG1_ONE_BYTE			 (1L<<14)
+#define BNX2_EMAC_TXMAC_DEBUG1_IPG_TIME			 (0xfL<<15)
+#define BNX2_EMAC_TXMAC_DEBUG1_SLOT_TIME		 (0xffL<<19)
+
+#define BNX2_EMAC_TXMAC_DEBUG2				0x00001660
+#define BNX2_EMAC_TXMAC_DEBUG2_BACK_OFF			 (0x3ffL<<0)
+#define BNX2_EMAC_TXMAC_DEBUG2_BYTE_COUNT		 (0xffffL<<10)
+#define BNX2_EMAC_TXMAC_DEBUG2_COL_COUNT		 (0x1fL<<26)
+#define BNX2_EMAC_TXMAC_DEBUG2_COL_BIT			 (1L<<31)
+
+#define BNX2_EMAC_TXMAC_DEBUG3				0x00001664
+#define BNX2_EMAC_TXMAC_DEBUG3_SM_STATE			 (0xfL<<0)
+#define BNX2_EMAC_TXMAC_DEBUG3_SM_STATE_IDLE		 (0x0L<<0)
+#define BNX2_EMAC_TXMAC_DEBUG3_SM_STATE_PRE1		 (0x1L<<0)
+#define BNX2_EMAC_TXMAC_DEBUG3_SM_STATE_PRE2		 (0x2L<<0)
+#define BNX2_EMAC_TXMAC_DEBUG3_SM_STATE_SFD		 (0x3L<<0)
+#define BNX2_EMAC_TXMAC_DEBUG3_SM_STATE_DATA		 (0x4L<<0)
+#define BNX2_EMAC_TXMAC_DEBUG3_SM_STATE_CRC1		 (0x5L<<0)
+#define BNX2_EMAC_TXMAC_DEBUG3_SM_STATE_CRC2		 (0x6L<<0)
+#define BNX2_EMAC_TXMAC_DEBUG3_SM_STATE_EXT		 (0x7L<<0)
+#define BNX2_EMAC_TXMAC_DEBUG3_SM_STATE_STATB		 (0x8L<<0)
+#define BNX2_EMAC_TXMAC_DEBUG3_SM_STATE_STATG		 (0x9L<<0)
+#define BNX2_EMAC_TXMAC_DEBUG3_SM_STATE_JAM		 (0xaL<<0)
+#define BNX2_EMAC_TXMAC_DEBUG3_SM_STATE_EJAM		 (0xbL<<0)
+#define BNX2_EMAC_TXMAC_DEBUG3_SM_STATE_BJAM		 (0xcL<<0)
+#define BNX2_EMAC_TXMAC_DEBUG3_SM_STATE_SWAIT		 (0xdL<<0)
+#define BNX2_EMAC_TXMAC_DEBUG3_SM_STATE_BACKOFF		 (0xeL<<0)
+#define BNX2_EMAC_TXMAC_DEBUG3_FILT_STATE		 (0x7L<<4)
+#define BNX2_EMAC_TXMAC_DEBUG3_FILT_STATE_IDLE		 (0x0L<<4)
+#define BNX2_EMAC_TXMAC_DEBUG3_FILT_STATE_WAIT		 (0x1L<<4)
+#define BNX2_EMAC_TXMAC_DEBUG3_FILT_STATE_UNI		 (0x2L<<4)
+#define BNX2_EMAC_TXMAC_DEBUG3_FILT_STATE_MC		 (0x3L<<4)
+#define BNX2_EMAC_TXMAC_DEBUG3_FILT_STATE_BC2		 (0x4L<<4)
+#define BNX2_EMAC_TXMAC_DEBUG3_FILT_STATE_BC3		 (0x5L<<4)
+#define BNX2_EMAC_TXMAC_DEBUG3_FILT_STATE_BC		 (0x6L<<4)
+#define BNX2_EMAC_TXMAC_DEBUG3_CRS_DONE			 (1L<<7)
+#define BNX2_EMAC_TXMAC_DEBUG3_XOFF			 (1L<<8)
+#define BNX2_EMAC_TXMAC_DEBUG3_SE_COUNTER		 (0xfL<<9)
+#define BNX2_EMAC_TXMAC_DEBUG3_QUANTA_COUNTER		 (0x1fL<<13)
+
+#define BNX2_EMAC_TXMAC_DEBUG4				0x00001668
+#define BNX2_EMAC_TXMAC_DEBUG4_PAUSE_COUNTER		 (0xffffL<<0)
+#define BNX2_EMAC_TXMAC_DEBUG4_PAUSE_STATE		 (0xfL<<16)
+#define BNX2_EMAC_TXMAC_DEBUG4_PAUSE_STATE_IDLE		 (0x0L<<16)
+#define BNX2_EMAC_TXMAC_DEBUG4_PAUSE_STATE_MCA1		 (0x2L<<16)
+#define BNX2_EMAC_TXMAC_DEBUG4_PAUSE_STATE_MCA2		 (0x3L<<16)
+#define BNX2_EMAC_TXMAC_DEBUG4_PAUSE_STATE_SRC3		 (0x4L<<16)
+#define BNX2_EMAC_TXMAC_DEBUG4_PAUSE_STATE_SRC2		 (0x5L<<16)
+#define BNX2_EMAC_TXMAC_DEBUG4_PAUSE_STATE_MCA3		 (0x6L<<16)
+#define BNX2_EMAC_TXMAC_DEBUG4_PAUSE_STATE_SRC1		 (0x7L<<16)
+#define BNX2_EMAC_TXMAC_DEBUG4_PAUSE_STATE_CRC1		 (0x8L<<16)
+#define BNX2_EMAC_TXMAC_DEBUG4_PAUSE_STATE_CRC2		 (0x9L<<16)
+#define BNX2_EMAC_TXMAC_DEBUG4_PAUSE_STATE_TIME		 (0xaL<<16)
+#define BNX2_EMAC_TXMAC_DEBUG4_PAUSE_STATE_TYPE		 (0xcL<<16)
+#define BNX2_EMAC_TXMAC_DEBUG4_PAUSE_STATE_WAIT		 (0xdL<<16)
+#define BNX2_EMAC_TXMAC_DEBUG4_PAUSE_STATE_CMD		 (0xeL<<16)
+#define BNX2_EMAC_TXMAC_DEBUG4_STATS0_VALID		 (1L<<20)
+#define BNX2_EMAC_TXMAC_DEBUG4_APPEND_CRC		 (1L<<21)
+#define BNX2_EMAC_TXMAC_DEBUG4_SLOT_FILLED		 (1L<<22)
+#define BNX2_EMAC_TXMAC_DEBUG4_MAX_DEFER		 (1L<<23)
+#define BNX2_EMAC_TXMAC_DEBUG4_SEND_EXTEND		 (1L<<24)
+#define BNX2_EMAC_TXMAC_DEBUG4_SEND_PADDING		 (1L<<25)
+#define BNX2_EMAC_TXMAC_DEBUG4_EOF_LOC			 (1L<<26)
+#define BNX2_EMAC_TXMAC_DEBUG4_COLLIDING		 (1L<<27)
+#define BNX2_EMAC_TXMAC_DEBUG4_COL_IN			 (1L<<28)
+#define BNX2_EMAC_TXMAC_DEBUG4_BURSTING			 (1L<<29)
+#define BNX2_EMAC_TXMAC_DEBUG4_ADVANCE			 (1L<<30)
+#define BNX2_EMAC_TXMAC_DEBUG4_GO			 (1L<<31)
+
+#define BNX2_EMAC_TX_STAT_AC0				0x00001680
+#define BNX2_EMAC_TX_STAT_AC1				0x00001684
+#define BNX2_EMAC_TX_STAT_AC2				0x00001688
+#define BNX2_EMAC_TX_STAT_AC3				0x0000168c
+#define BNX2_EMAC_TX_STAT_AC4				0x00001690
+#define BNX2_EMAC_TX_STAT_AC5				0x00001694
+#define BNX2_EMAC_TX_STAT_AC6				0x00001698
+#define BNX2_EMAC_TX_STAT_AC7				0x0000169c
+#define BNX2_EMAC_TX_STAT_AC8				0x000016a0
+#define BNX2_EMAC_TX_STAT_AC9				0x000016a4
+#define BNX2_EMAC_TX_STAT_AC10				0x000016a8
+#define BNX2_EMAC_TX_STAT_AC11				0x000016ac
+#define BNX2_EMAC_TX_STAT_AC12				0x000016b0
+#define BNX2_EMAC_TX_STAT_AC13				0x000016b4
+#define BNX2_EMAC_TX_STAT_AC14				0x000016b8
+#define BNX2_EMAC_TX_STAT_AC15				0x000016bc
+#define BNX2_EMAC_TX_STAT_AC16				0x000016c0
+#define BNX2_EMAC_TX_STAT_AC17				0x000016c4
+#define BNX2_EMAC_TX_STAT_AC18				0x000016c8
+#define BNX2_EMAC_TX_STAT_AC19				0x000016cc
+#define BNX2_EMAC_TX_STAT_AC20				0x000016d0
+#define BNX2_EMAC_TXMAC_SUC_DBG_OVERRUNVEC		0x000016d8
+#define BNX2_EMAC_TX_RATE_LIMIT_CTRL			0x000016fc
+#define BNX2_EMAC_TX_RATE_LIMIT_CTRL_TX_THROTTLE_INC	 (0x7fL<<0)
+#define BNX2_EMAC_TX_RATE_LIMIT_CTRL_TX_THROTTLE_NUM	 (0x7fL<<16)
+#define BNX2_EMAC_TX_RATE_LIMIT_CTRL_RATE_LIMITER_EN	 (1L<<31)
+
+
+/*
+ *  rpm_reg definition
+ *  offset: 0x1800
+ */
+#define BNX2_RPM_COMMAND				0x00001800
+#define BNX2_RPM_COMMAND_ENABLED			 (1L<<0)
+#define BNX2_RPM_COMMAND_OVERRUN_ABORT			 (1L<<4)
+
+#define BNX2_RPM_STATUS					0x00001804
+#define BNX2_RPM_STATUS_MBUF_WAIT			 (1L<<0)
+#define BNX2_RPM_STATUS_FREE_WAIT			 (1L<<1)
+
+#define BNX2_RPM_CONFIG					0x00001808
+#define BNX2_RPM_CONFIG_NO_PSD_HDR_CKSUM		 (1L<<0)
+#define BNX2_RPM_CONFIG_ACPI_ENA			 (1L<<1)
+#define BNX2_RPM_CONFIG_ACPI_KEEP			 (1L<<2)
+#define BNX2_RPM_CONFIG_MP_KEEP				 (1L<<3)
+#define BNX2_RPM_CONFIG_SORT_VECT_VAL			 (0xfL<<4)
+#define BNX2_RPM_CONFIG_DISABLE_WOL_ASSERT		 (1L<<30)
+#define BNX2_RPM_CONFIG_IGNORE_VLAN			 (1L<<31)
+
+#define BNX2_RPM_MGMT_PKT_CTRL				0x0000180c
+#define BNX2_RPM_MGMT_PKT_CTRL_MGMT_SORT		 (0xfL<<0)
+#define BNX2_RPM_MGMT_PKT_CTRL_MGMT_RULE		 (0xfL<<4)
+#define BNX2_RPM_MGMT_PKT_CTRL_MGMT_DISCARD_EN		 (1L<<30)
+#define BNX2_RPM_MGMT_PKT_CTRL_MGMT_EN			 (1L<<31)
+
+#define BNX2_RPM_VLAN_MATCH0				0x00001810
+#define BNX2_RPM_VLAN_MATCH0_RPM_VLAN_MTCH0_VALUE	 (0xfffL<<0)
+
+#define BNX2_RPM_VLAN_MATCH1				0x00001814
+#define BNX2_RPM_VLAN_MATCH1_RPM_VLAN_MTCH1_VALUE	 (0xfffL<<0)
+
+#define BNX2_RPM_VLAN_MATCH2				0x00001818
+#define BNX2_RPM_VLAN_MATCH2_RPM_VLAN_MTCH2_VALUE	 (0xfffL<<0)
+
+#define BNX2_RPM_VLAN_MATCH3				0x0000181c
+#define BNX2_RPM_VLAN_MATCH3_RPM_VLAN_MTCH3_VALUE	 (0xfffL<<0)
+
+#define BNX2_RPM_SORT_USER0				0x00001820
+#define BNX2_RPM_SORT_USER0_PM_EN			 (0xffffL<<0)
+#define BNX2_RPM_SORT_USER0_BC_EN			 (1L<<16)
+#define BNX2_RPM_SORT_USER0_MC_EN			 (1L<<17)
+#define BNX2_RPM_SORT_USER0_MC_HSH_EN			 (1L<<18)
+#define BNX2_RPM_SORT_USER0_PROM_EN			 (1L<<19)
+#define BNX2_RPM_SORT_USER0_VLAN_EN			 (0xfL<<20)
+#define BNX2_RPM_SORT_USER0_PROM_VLAN			 (1L<<24)
+#define BNX2_RPM_SORT_USER0_VLAN_NOTMATCH		 (1L<<25)
+#define BNX2_RPM_SORT_USER0_ENA				 (1L<<31)
+
+#define BNX2_RPM_SORT_USER1				0x00001824
+#define BNX2_RPM_SORT_USER1_PM_EN			 (0xffffL<<0)
+#define BNX2_RPM_SORT_USER1_BC_EN			 (1L<<16)
+#define BNX2_RPM_SORT_USER1_MC_EN			 (1L<<17)
+#define BNX2_RPM_SORT_USER1_MC_HSH_EN			 (1L<<18)
+#define BNX2_RPM_SORT_USER1_PROM_EN			 (1L<<19)
+#define BNX2_RPM_SORT_USER1_VLAN_EN			 (0xfL<<20)
+#define BNX2_RPM_SORT_USER1_PROM_VLAN			 (1L<<24)
+#define BNX2_RPM_SORT_USER1_ENA				 (1L<<31)
+
+#define BNX2_RPM_SORT_USER2				0x00001828
+#define BNX2_RPM_SORT_USER2_PM_EN			 (0xffffL<<0)
+#define BNX2_RPM_SORT_USER2_BC_EN			 (1L<<16)
+#define BNX2_RPM_SORT_USER2_MC_EN			 (1L<<17)
+#define BNX2_RPM_SORT_USER2_MC_HSH_EN			 (1L<<18)
+#define BNX2_RPM_SORT_USER2_PROM_EN			 (1L<<19)
+#define BNX2_RPM_SORT_USER2_VLAN_EN			 (0xfL<<20)
+#define BNX2_RPM_SORT_USER2_PROM_VLAN			 (1L<<24)
+#define BNX2_RPM_SORT_USER2_ENA				 (1L<<31)
+
+#define BNX2_RPM_SORT_USER3				0x0000182c
+#define BNX2_RPM_SORT_USER3_PM_EN			 (0xffffL<<0)
+#define BNX2_RPM_SORT_USER3_BC_EN			 (1L<<16)
+#define BNX2_RPM_SORT_USER3_MC_EN			 (1L<<17)
+#define BNX2_RPM_SORT_USER3_MC_HSH_EN			 (1L<<18)
+#define BNX2_RPM_SORT_USER3_PROM_EN			 (1L<<19)
+#define BNX2_RPM_SORT_USER3_VLAN_EN			 (0xfL<<20)
+#define BNX2_RPM_SORT_USER3_PROM_VLAN			 (1L<<24)
+#define BNX2_RPM_SORT_USER3_ENA				 (1L<<31)
+
+#define BNX2_RPM_STAT_L2_FILTER_DISCARDS		0x00001840
+#define BNX2_RPM_STAT_RULE_CHECKER_DISCARDS		0x00001844
+#define BNX2_RPM_STAT_IFINFTQDISCARDS			0x00001848
+#define BNX2_RPM_STAT_IFINMBUFDISCARD			0x0000184c
+#define BNX2_RPM_STAT_RULE_CHECKER_P4_HIT		0x00001850
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION0		0x00001854
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION0_NEXT_HEADER_LEN	 (0xffL<<0)
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION0_NEXT_HEADER	 (0xffL<<16)
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION0_NEXT_HEADER_LEN_TYPE	 (1L<<30)
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION0_NEXT_HEADER_EN	 (1L<<31)
+
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION1		0x00001858
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION1_NEXT_HEADER_LEN	 (0xffL<<0)
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION1_NEXT_HEADER	 (0xffL<<16)
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION1_NEXT_HEADER_LEN_TYPE	 (1L<<30)
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION1_NEXT_HEADER_EN	 (1L<<31)
+
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION2		0x0000185c
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION2_NEXT_HEADER_LEN	 (0xffL<<0)
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION2_NEXT_HEADER	 (0xffL<<16)
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION2_NEXT_HEADER_LEN_TYPE	 (1L<<30)
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION2_NEXT_HEADER_EN	 (1L<<31)
+
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION3		0x00001860
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION3_NEXT_HEADER_LEN	 (0xffL<<0)
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION3_NEXT_HEADER	 (0xffL<<16)
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION3_NEXT_HEADER_LEN_TYPE	 (1L<<30)
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION3_NEXT_HEADER_EN	 (1L<<31)
+
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION4		0x00001864
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION4_NEXT_HEADER_LEN	 (0xffL<<0)
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION4_NEXT_HEADER	 (0xffL<<16)
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION4_NEXT_HEADER_LEN_TYPE	 (1L<<30)
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION4_NEXT_HEADER_EN	 (1L<<31)
+
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION5		0x00001868
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION5_NEXT_HEADER_LEN	 (0xffL<<0)
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION5_NEXT_HEADER	 (0xffL<<16)
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION5_NEXT_HEADER_LEN_TYPE	 (1L<<30)
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION5_NEXT_HEADER_EN	 (1L<<31)
+
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION6		0x0000186c
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION6_NEXT_HEADER_LEN	 (0xffL<<0)
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION6_NEXT_HEADER	 (0xffL<<16)
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION6_NEXT_HEADER_LEN_TYPE	 (1L<<30)
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION6_NEXT_HEADER_EN	 (1L<<31)
+
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION7		0x00001870
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION7_NEXT_HEADER_LEN	 (0xffL<<0)
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION7_NEXT_HEADER	 (0xffL<<16)
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION7_NEXT_HEADER_LEN_TYPE	 (1L<<30)
+#define BNX2_RPM_IPV6_PROGRAMMABLE_EXTENSION7_NEXT_HEADER_EN	 (1L<<31)
+
+#define BNX2_RPM_STAT_AC0				0x00001880
+#define BNX2_RPM_STAT_AC1				0x00001884
+#define BNX2_RPM_STAT_AC2				0x00001888
+#define BNX2_RPM_STAT_AC3				0x0000188c
+#define BNX2_RPM_STAT_AC4				0x00001890
+#define BNX2_RPM_RC_CNTL_16				0x000018e0
+#define BNX2_RPM_RC_CNTL_16_OFFSET			 (0xffL<<0)
+#define BNX2_RPM_RC_CNTL_16_CLASS			 (0x7L<<8)
+#define BNX2_RPM_RC_CNTL_16_PRIORITY			 (1L<<11)
+#define BNX2_RPM_RC_CNTL_16_P4				 (1L<<12)
+#define BNX2_RPM_RC_CNTL_16_HDR_TYPE			 (0x7L<<13)
+#define BNX2_RPM_RC_CNTL_16_HDR_TYPE_START		 (0L<<13)
+#define BNX2_RPM_RC_CNTL_16_HDR_TYPE_IP			 (1L<<13)
+#define BNX2_RPM_RC_CNTL_16_HDR_TYPE_TCP		 (2L<<13)
+#define BNX2_RPM_RC_CNTL_16_HDR_TYPE_UDP		 (3L<<13)
+#define BNX2_RPM_RC_CNTL_16_HDR_TYPE_DATA		 (4L<<13)
+#define BNX2_RPM_RC_CNTL_16_HDR_TYPE_TCP_UDP		 (5L<<13)
+#define BNX2_RPM_RC_CNTL_16_HDR_TYPE_ICMPV6		 (6L<<13)
+#define BNX2_RPM_RC_CNTL_16_COMP			 (0x3L<<16)
+#define BNX2_RPM_RC_CNTL_16_COMP_EQUAL			 (0L<<16)
+#define BNX2_RPM_RC_CNTL_16_COMP_NEQUAL			 (1L<<16)
+#define BNX2_RPM_RC_CNTL_16_COMP_GREATER		 (2L<<16)
+#define BNX2_RPM_RC_CNTL_16_COMP_LESS			 (3L<<16)
+#define BNX2_RPM_RC_CNTL_16_MAP				 (1L<<18)
+#define BNX2_RPM_RC_CNTL_16_SBIT			 (1L<<19)
+#define BNX2_RPM_RC_CNTL_16_CMDSEL			 (0x1fL<<20)
+#define BNX2_RPM_RC_CNTL_16_DISCARD			 (1L<<25)
+#define BNX2_RPM_RC_CNTL_16_MASK			 (1L<<26)
+#define BNX2_RPM_RC_CNTL_16_P1				 (1L<<27)
+#define BNX2_RPM_RC_CNTL_16_P2				 (1L<<28)
+#define BNX2_RPM_RC_CNTL_16_P3				 (1L<<29)
+#define BNX2_RPM_RC_CNTL_16_NBIT			 (1L<<30)
+
+#define BNX2_RPM_RC_VALUE_MASK_16			0x000018e4
+#define BNX2_RPM_RC_VALUE_MASK_16_VALUE			 (0xffffL<<0)
+#define BNX2_RPM_RC_VALUE_MASK_16_MASK			 (0xffffL<<16)
+
+#define BNX2_RPM_RC_CNTL_17				0x000018e8
+#define BNX2_RPM_RC_CNTL_17_OFFSET			 (0xffL<<0)
+#define BNX2_RPM_RC_CNTL_17_CLASS			 (0x7L<<8)
+#define BNX2_RPM_RC_CNTL_17_PRIORITY			 (1L<<11)
+#define BNX2_RPM_RC_CNTL_17_P4				 (1L<<12)
+#define BNX2_RPM_RC_CNTL_17_HDR_TYPE			 (0x7L<<13)
+#define BNX2_RPM_RC_CNTL_17_HDR_TYPE_START		 (0L<<13)
+#define BNX2_RPM_RC_CNTL_17_HDR_TYPE_IP			 (1L<<13)
+#define BNX2_RPM_RC_CNTL_17_HDR_TYPE_TCP		 (2L<<13)
+#define BNX2_RPM_RC_CNTL_17_HDR_TYPE_UDP		 (3L<<13)
+#define BNX2_RPM_RC_CNTL_17_HDR_TYPE_DATA		 (4L<<13)
+#define BNX2_RPM_RC_CNTL_17_HDR_TYPE_TCP_UDP		 (5L<<13)
+#define BNX2_RPM_RC_CNTL_17_HDR_TYPE_ICMPV6		 (6L<<13)
+#define BNX2_RPM_RC_CNTL_17_COMP			 (0x3L<<16)
+#define BNX2_RPM_RC_CNTL_17_COMP_EQUAL			 (0L<<16)
+#define BNX2_RPM_RC_CNTL_17_COMP_NEQUAL			 (1L<<16)
+#define BNX2_RPM_RC_CNTL_17_COMP_GREATER		 (2L<<16)
+#define BNX2_RPM_RC_CNTL_17_COMP_LESS			 (3L<<16)
+#define BNX2_RPM_RC_CNTL_17_MAP				 (1L<<18)
+#define BNX2_RPM_RC_CNTL_17_SBIT			 (1L<<19)
+#define BNX2_RPM_RC_CNTL_17_CMDSEL			 (0x1fL<<20)
+#define BNX2_RPM_RC_CNTL_17_DISCARD			 (1L<<25)
+#define BNX2_RPM_RC_CNTL_17_MASK			 (1L<<26)
+#define BNX2_RPM_RC_CNTL_17_P1				 (1L<<27)
+#define BNX2_RPM_RC_CNTL_17_P2				 (1L<<28)
+#define BNX2_RPM_RC_CNTL_17_P3				 (1L<<29)
+#define BNX2_RPM_RC_CNTL_17_NBIT			 (1L<<30)
+
+#define BNX2_RPM_RC_VALUE_MASK_17			0x000018ec
+#define BNX2_RPM_RC_VALUE_MASK_17_VALUE			 (0xffffL<<0)
+#define BNX2_RPM_RC_VALUE_MASK_17_MASK			 (0xffffL<<16)
+
+#define BNX2_RPM_RC_CNTL_18				0x000018f0
+#define BNX2_RPM_RC_CNTL_18_OFFSET			 (0xffL<<0)
+#define BNX2_RPM_RC_CNTL_18_CLASS			 (0x7L<<8)
+#define BNX2_RPM_RC_CNTL_18_PRIORITY			 (1L<<11)
+#define BNX2_RPM_RC_CNTL_18_P4				 (1L<<12)
+#define BNX2_RPM_RC_CNTL_18_HDR_TYPE			 (0x7L<<13)
+#define BNX2_RPM_RC_CNTL_18_HDR_TYPE_START		 (0L<<13)
+#define BNX2_RPM_RC_CNTL_18_HDR_TYPE_IP			 (1L<<13)
+#define BNX2_RPM_RC_CNTL_18_HDR_TYPE_TCP		 (2L<<13)
+#define BNX2_RPM_RC_CNTL_18_HDR_TYPE_UDP		 (3L<<13)
+#define BNX2_RPM_RC_CNTL_18_HDR_TYPE_DATA		 (4L<<13)
+#define BNX2_RPM_RC_CNTL_18_HDR_TYPE_TCP_UDP		 (5L<<13)
+#define BNX2_RPM_RC_CNTL_18_HDR_TYPE_ICMPV6		 (6L<<13)
+#define BNX2_RPM_RC_CNTL_18_COMP			 (0x3L<<16)
+#define BNX2_RPM_RC_CNTL_18_COMP_EQUAL			 (0L<<16)
+#define BNX2_RPM_RC_CNTL_18_COMP_NEQUAL			 (1L<<16)
+#define BNX2_RPM_RC_CNTL_18_COMP_GREATER		 (2L<<16)
+#define BNX2_RPM_RC_CNTL_18_COMP_LESS			 (3L<<16)
+#define BNX2_RPM_RC_CNTL_18_MAP				 (1L<<18)
+#define BNX2_RPM_RC_CNTL_18_SBIT			 (1L<<19)
+#define BNX2_RPM_RC_CNTL_18_CMDSEL			 (0x1fL<<20)
+#define BNX2_RPM_RC_CNTL_18_DISCARD			 (1L<<25)
+#define BNX2_RPM_RC_CNTL_18_MASK			 (1L<<26)
+#define BNX2_RPM_RC_CNTL_18_P1				 (1L<<27)
+#define BNX2_RPM_RC_CNTL_18_P2				 (1L<<28)
+#define BNX2_RPM_RC_CNTL_18_P3				 (1L<<29)
+#define BNX2_RPM_RC_CNTL_18_NBIT			 (1L<<30)
+
+#define BNX2_RPM_RC_VALUE_MASK_18			0x000018f4
+#define BNX2_RPM_RC_VALUE_MASK_18_VALUE			 (0xffffL<<0)
+#define BNX2_RPM_RC_VALUE_MASK_18_MASK			 (0xffffL<<16)
+
+#define BNX2_RPM_RC_CNTL_19				0x000018f8
+#define BNX2_RPM_RC_CNTL_19_OFFSET			 (0xffL<<0)
+#define BNX2_RPM_RC_CNTL_19_CLASS			 (0x7L<<8)
+#define BNX2_RPM_RC_CNTL_19_PRIORITY			 (1L<<11)
+#define BNX2_RPM_RC_CNTL_19_P4				 (1L<<12)
+#define BNX2_RPM_RC_CNTL_19_HDR_TYPE			 (0x7L<<13)
+#define BNX2_RPM_RC_CNTL_19_HDR_TYPE_START		 (0L<<13)
+#define BNX2_RPM_RC_CNTL_19_HDR_TYPE_IP			 (1L<<13)
+#define BNX2_RPM_RC_CNTL_19_HDR_TYPE_TCP		 (2L<<13)
+#define BNX2_RPM_RC_CNTL_19_HDR_TYPE_UDP		 (3L<<13)
+#define BNX2_RPM_RC_CNTL_19_HDR_TYPE_DATA		 (4L<<13)
+#define BNX2_RPM_RC_CNTL_19_HDR_TYPE_TCP_UDP		 (5L<<13)
+#define BNX2_RPM_RC_CNTL_19_HDR_TYPE_ICMPV6		 (6L<<13)
+#define BNX2_RPM_RC_CNTL_19_COMP			 (0x3L<<16)
+#define BNX2_RPM_RC_CNTL_19_COMP_EQUAL			 (0L<<16)
+#define BNX2_RPM_RC_CNTL_19_COMP_NEQUAL			 (1L<<16)
+#define BNX2_RPM_RC_CNTL_19_COMP_GREATER		 (2L<<16)
+#define BNX2_RPM_RC_CNTL_19_COMP_LESS			 (3L<<16)
+#define BNX2_RPM_RC_CNTL_19_MAP				 (1L<<18)
+#define BNX2_RPM_RC_CNTL_19_SBIT			 (1L<<19)
+#define BNX2_RPM_RC_CNTL_19_CMDSEL			 (0x1fL<<20)
+#define BNX2_RPM_RC_CNTL_19_DISCARD			 (1L<<25)
+#define BNX2_RPM_RC_CNTL_19_MASK			 (1L<<26)
+#define BNX2_RPM_RC_CNTL_19_P1				 (1L<<27)
+#define BNX2_RPM_RC_CNTL_19_P2				 (1L<<28)
+#define BNX2_RPM_RC_CNTL_19_P3				 (1L<<29)
+#define BNX2_RPM_RC_CNTL_19_NBIT			 (1L<<30)
+
+#define BNX2_RPM_RC_VALUE_MASK_19			0x000018fc
+#define BNX2_RPM_RC_VALUE_MASK_19_VALUE			 (0xffffL<<0)
+#define BNX2_RPM_RC_VALUE_MASK_19_MASK			 (0xffffL<<16)
+
+#define BNX2_RPM_RC_CNTL_0				0x00001900
+#define BNX2_RPM_RC_CNTL_0_OFFSET			 (0xffL<<0)
+#define BNX2_RPM_RC_CNTL_0_CLASS			 (0x7L<<8)
+#define BNX2_RPM_RC_CNTL_0_PRIORITY			 (1L<<11)
+#define BNX2_RPM_RC_CNTL_0_P4				 (1L<<12)
+#define BNX2_RPM_RC_CNTL_0_HDR_TYPE			 (0x7L<<13)
+#define BNX2_RPM_RC_CNTL_0_HDR_TYPE_START		 (0L<<13)
+#define BNX2_RPM_RC_CNTL_0_HDR_TYPE_IP			 (1L<<13)
+#define BNX2_RPM_RC_CNTL_0_HDR_TYPE_TCP			 (2L<<13)
+#define BNX2_RPM_RC_CNTL_0_HDR_TYPE_UDP			 (3L<<13)
+#define BNX2_RPM_RC_CNTL_0_HDR_TYPE_DATA		 (4L<<13)
+#define BNX2_RPM_RC_CNTL_0_HDR_TYPE_TCP_UDP		 (5L<<13)
+#define BNX2_RPM_RC_CNTL_0_HDR_TYPE_ICMPV6		 (6L<<13)
+#define BNX2_RPM_RC_CNTL_0_COMP				 (0x3L<<16)
+#define BNX2_RPM_RC_CNTL_0_COMP_EQUAL			 (0L<<16)
+#define BNX2_RPM_RC_CNTL_0_COMP_NEQUAL			 (1L<<16)
+#define BNX2_RPM_RC_CNTL_0_COMP_GREATER			 (2L<<16)
+#define BNX2_RPM_RC_CNTL_0_COMP_LESS			 (3L<<16)
+#define BNX2_RPM_RC_CNTL_0_MAP_XI			 (1L<<18)
+#define BNX2_RPM_RC_CNTL_0_SBIT				 (1L<<19)
+#define BNX2_RPM_RC_CNTL_0_CMDSEL			 (0xfL<<20)
+#define BNX2_RPM_RC_CNTL_0_MAP				 (1L<<24)
+#define BNX2_RPM_RC_CNTL_0_CMDSEL_XI			 (0x1fL<<20)
+#define BNX2_RPM_RC_CNTL_0_DISCARD			 (1L<<25)
+#define BNX2_RPM_RC_CNTL_0_MASK				 (1L<<26)
+#define BNX2_RPM_RC_CNTL_0_P1				 (1L<<27)
+#define BNX2_RPM_RC_CNTL_0_P2				 (1L<<28)
+#define BNX2_RPM_RC_CNTL_0_P3				 (1L<<29)
+#define BNX2_RPM_RC_CNTL_0_NBIT				 (1L<<30)
+
+#define BNX2_RPM_RC_VALUE_MASK_0			0x00001904
+#define BNX2_RPM_RC_VALUE_MASK_0_VALUE			 (0xffffL<<0)
+#define BNX2_RPM_RC_VALUE_MASK_0_MASK			 (0xffffL<<16)
+
+#define BNX2_RPM_RC_CNTL_1				0x00001908
+#define BNX2_RPM_RC_CNTL_1_A				 (0x3ffffL<<0)
+#define BNX2_RPM_RC_CNTL_1_B				 (0xfffL<<19)
+#define BNX2_RPM_RC_CNTL_1_OFFSET_XI			 (0xffL<<0)
+#define BNX2_RPM_RC_CNTL_1_CLASS_XI			 (0x7L<<8)
+#define BNX2_RPM_RC_CNTL_1_PRIORITY_XI			 (1L<<11)
+#define BNX2_RPM_RC_CNTL_1_P4_XI			 (1L<<12)
+#define BNX2_RPM_RC_CNTL_1_HDR_TYPE_XI			 (0x7L<<13)
+#define BNX2_RPM_RC_CNTL_1_HDR_TYPE_START_XI		 (0L<<13)
+#define BNX2_RPM_RC_CNTL_1_HDR_TYPE_IP_XI		 (1L<<13)
+#define BNX2_RPM_RC_CNTL_1_HDR_TYPE_TCP_XI		 (2L<<13)
+#define BNX2_RPM_RC_CNTL_1_HDR_TYPE_UDP_XI		 (3L<<13)
+#define BNX2_RPM_RC_CNTL_1_HDR_TYPE_DATA_XI		 (4L<<13)
+#define BNX2_RPM_RC_CNTL_1_HDR_TYPE_TCP_UDP_XI		 (5L<<13)
+#define BNX2_RPM_RC_CNTL_1_HDR_TYPE_ICMPV6_XI		 (6L<<13)
+#define BNX2_RPM_RC_CNTL_1_COMP_XI			 (0x3L<<16)
+#define BNX2_RPM_RC_CNTL_1_COMP_EQUAL_XI		 (0L<<16)
+#define BNX2_RPM_RC_CNTL_1_COMP_NEQUAL_XI		 (1L<<16)
+#define BNX2_RPM_RC_CNTL_1_COMP_GREATER_XI		 (2L<<16)
+#define BNX2_RPM_RC_CNTL_1_COMP_LESS_XI			 (3L<<16)
+#define BNX2_RPM_RC_CNTL_1_MAP_XI			 (1L<<18)
+#define BNX2_RPM_RC_CNTL_1_SBIT_XI			 (1L<<19)
+#define BNX2_RPM_RC_CNTL_1_CMDSEL_XI			 (0x1fL<<20)
+#define BNX2_RPM_RC_CNTL_1_DISCARD_XI			 (1L<<25)
+#define BNX2_RPM_RC_CNTL_1_MASK_XI			 (1L<<26)
+#define BNX2_RPM_RC_CNTL_1_P1_XI			 (1L<<27)
+#define BNX2_RPM_RC_CNTL_1_P2_XI			 (1L<<28)
+#define BNX2_RPM_RC_CNTL_1_P3_XI			 (1L<<29)
+#define BNX2_RPM_RC_CNTL_1_NBIT_XI			 (1L<<30)
+
+#define BNX2_RPM_RC_VALUE_MASK_1			0x0000190c
+#define BNX2_RPM_RC_VALUE_MASK_1_VALUE			 (0xffffL<<0)
+#define BNX2_RPM_RC_VALUE_MASK_1_MASK			 (0xffffL<<16)
+
+#define BNX2_RPM_RC_CNTL_2				0x00001910
+#define BNX2_RPM_RC_CNTL_2_A				 (0x3ffffL<<0)
+#define BNX2_RPM_RC_CNTL_2_B				 (0xfffL<<19)
+#define BNX2_RPM_RC_CNTL_2_OFFSET_XI			 (0xffL<<0)
+#define BNX2_RPM_RC_CNTL_2_CLASS_XI			 (0x7L<<8)
+#define BNX2_RPM_RC_CNTL_2_PRIORITY_XI			 (1L<<11)
+#define BNX2_RPM_RC_CNTL_2_P4_XI			 (1L<<12)
+#define BNX2_RPM_RC_CNTL_2_HDR_TYPE_XI			 (0x7L<<13)
+#define BNX2_RPM_RC_CNTL_2_HDR_TYPE_START_XI		 (0L<<13)
+#define BNX2_RPM_RC_CNTL_2_HDR_TYPE_IP_XI		 (1L<<13)
+#define BNX2_RPM_RC_CNTL_2_HDR_TYPE_TCP_XI		 (2L<<13)
+#define BNX2_RPM_RC_CNTL_2_HDR_TYPE_UDP_XI		 (3L<<13)
+#define BNX2_RPM_RC_CNTL_2_HDR_TYPE_DATA_XI		 (4L<<13)
+#define BNX2_RPM_RC_CNTL_2_HDR_TYPE_TCP_UDP_XI		 (5L<<13)
+#define BNX2_RPM_RC_CNTL_2_HDR_TYPE_ICMPV6_XI		 (6L<<13)
+#define BNX2_RPM_RC_CNTL_2_COMP_XI			 (0x3L<<16)
+#define BNX2_RPM_RC_CNTL_2_COMP_EQUAL_XI		 (0L<<16)
+#define BNX2_RPM_RC_CNTL_2_COMP_NEQUAL_XI		 (1L<<16)
+#define BNX2_RPM_RC_CNTL_2_COMP_GREATER_XI		 (2L<<16)
+#define BNX2_RPM_RC_CNTL_2_COMP_LESS_XI			 (3L<<16)
+#define BNX2_RPM_RC_CNTL_2_MAP_XI			 (1L<<18)
+#define BNX2_RPM_RC_CNTL_2_SBIT_XI			 (1L<<19)
+#define BNX2_RPM_RC_CNTL_2_CMDSEL_XI			 (0x1fL<<20)
+#define BNX2_RPM_RC_CNTL_2_DISCARD_XI			 (1L<<25)
+#define BNX2_RPM_RC_CNTL_2_MASK_XI			 (1L<<26)
+#define BNX2_RPM_RC_CNTL_2_P1_XI			 (1L<<27)
+#define BNX2_RPM_RC_CNTL_2_P2_XI			 (1L<<28)
+#define BNX2_RPM_RC_CNTL_2_P3_XI			 (1L<<29)
+#define BNX2_RPM_RC_CNTL_2_NBIT_XI			 (1L<<30)
+
+#define BNX2_RPM_RC_VALUE_MASK_2			0x00001914
+#define BNX2_RPM_RC_VALUE_MASK_2_VALUE			 (0xffffL<<0)
+#define BNX2_RPM_RC_VALUE_MASK_2_MASK			 (0xffffL<<16)
+
+#define BNX2_RPM_RC_CNTL_3				0x00001918
+#define BNX2_RPM_RC_CNTL_3_A				 (0x3ffffL<<0)
+#define BNX2_RPM_RC_CNTL_3_B				 (0xfffL<<19)
+#define BNX2_RPM_RC_CNTL_3_OFFSET_XI			 (0xffL<<0)
+#define BNX2_RPM_RC_CNTL_3_CLASS_XI			 (0x7L<<8)
+#define BNX2_RPM_RC_CNTL_3_PRIORITY_XI			 (1L<<11)
+#define BNX2_RPM_RC_CNTL_3_P4_XI			 (1L<<12)
+#define BNX2_RPM_RC_CNTL_3_HDR_TYPE_XI			 (0x7L<<13)
+#define BNX2_RPM_RC_CNTL_3_HDR_TYPE_START_XI		 (0L<<13)
+#define BNX2_RPM_RC_CNTL_3_HDR_TYPE_IP_XI		 (1L<<13)
+#define BNX2_RPM_RC_CNTL_3_HDR_TYPE_TCP_XI		 (2L<<13)
+#define BNX2_RPM_RC_CNTL_3_HDR_TYPE_UDP_XI		 (3L<<13)
+#define BNX2_RPM_RC_CNTL_3_HDR_TYPE_DATA_XI		 (4L<<13)
+#define BNX2_RPM_RC_CNTL_3_HDR_TYPE_TCP_UDP_XI		 (5L<<13)
+#define BNX2_RPM_RC_CNTL_3_HDR_TYPE_ICMPV6_XI		 (6L<<13)
+#define BNX2_RPM_RC_CNTL_3_COMP_XI			 (0x3L<<16)
+#define BNX2_RPM_RC_CNTL_3_COMP_EQUAL_XI		 (0L<<16)
+#define BNX2_RPM_RC_CNTL_3_COMP_NEQUAL_XI		 (1L<<16)
+#define BNX2_RPM_RC_CNTL_3_COMP_GREATER_XI		 (2L<<16)
+#define BNX2_RPM_RC_CNTL_3_COMP_LESS_XI			 (3L<<16)
+#define BNX2_RPM_RC_CNTL_3_MAP_XI			 (1L<<18)
+#define BNX2_RPM_RC_CNTL_3_SBIT_XI			 (1L<<19)
+#define BNX2_RPM_RC_CNTL_3_CMDSEL_XI			 (0x1fL<<20)
+#define BNX2_RPM_RC_CNTL_3_DISCARD_XI			 (1L<<25)
+#define BNX2_RPM_RC_CNTL_3_MASK_XI			 (1L<<26)
+#define BNX2_RPM_RC_CNTL_3_P1_XI			 (1L<<27)
+#define BNX2_RPM_RC_CNTL_3_P2_XI			 (1L<<28)
+#define BNX2_RPM_RC_CNTL_3_P3_XI			 (1L<<29)
+#define BNX2_RPM_RC_CNTL_3_NBIT_XI			 (1L<<30)
+
+#define BNX2_RPM_RC_VALUE_MASK_3			0x0000191c
+#define BNX2_RPM_RC_VALUE_MASK_3_VALUE			 (0xffffL<<0)
+#define BNX2_RPM_RC_VALUE_MASK_3_MASK			 (0xffffL<<16)
+
+#define BNX2_RPM_RC_CNTL_4				0x00001920
+#define BNX2_RPM_RC_CNTL_4_A				 (0x3ffffL<<0)
+#define BNX2_RPM_RC_CNTL_4_B				 (0xfffL<<19)
+#define BNX2_RPM_RC_CNTL_4_OFFSET_XI			 (0xffL<<0)
+#define BNX2_RPM_RC_CNTL_4_CLASS_XI			 (0x7L<<8)
+#define BNX2_RPM_RC_CNTL_4_PRIORITY_XI			 (1L<<11)
+#define BNX2_RPM_RC_CNTL_4_P4_XI			 (1L<<12)
+#define BNX2_RPM_RC_CNTL_4_HDR_TYPE_XI			 (0x7L<<13)
+#define BNX2_RPM_RC_CNTL_4_HDR_TYPE_START_XI		 (0L<<13)
+#define BNX2_RPM_RC_CNTL_4_HDR_TYPE_IP_XI		 (1L<<13)
+#define BNX2_RPM_RC_CNTL_4_HDR_TYPE_TCP_XI		 (2L<<13)
+#define BNX2_RPM_RC_CNTL_4_HDR_TYPE_UDP_XI		 (3L<<13)
+#define BNX2_RPM_RC_CNTL_4_HDR_TYPE_DATA_XI		 (4L<<13)
+#define BNX2_RPM_RC_CNTL_4_HDR_TYPE_TCP_UDP_XI		 (5L<<13)
+#define BNX2_RPM_RC_CNTL_4_HDR_TYPE_ICMPV6_XI		 (6L<<13)
+#define BNX2_RPM_RC_CNTL_4_COMP_XI			 (0x3L<<16)
+#define BNX2_RPM_RC_CNTL_4_COMP_EQUAL_XI		 (0L<<16)
+#define BNX2_RPM_RC_CNTL_4_COMP_NEQUAL_XI		 (1L<<16)
+#define BNX2_RPM_RC_CNTL_4_COMP_GREATER_XI		 (2L<<16)
+#define BNX2_RPM_RC_CNTL_4_COMP_LESS_XI			 (3L<<16)
+#define BNX2_RPM_RC_CNTL_4_MAP_XI			 (1L<<18)
+#define BNX2_RPM_RC_CNTL_4_SBIT_XI			 (1L<<19)
+#define BNX2_RPM_RC_CNTL_4_CMDSEL_XI			 (0x1fL<<20)
+#define BNX2_RPM_RC_CNTL_4_DISCARD_XI			 (1L<<25)
+#define BNX2_RPM_RC_CNTL_4_MASK_XI			 (1L<<26)
+#define BNX2_RPM_RC_CNTL_4_P1_XI			 (1L<<27)
+#define BNX2_RPM_RC_CNTL_4_P2_XI			 (1L<<28)
+#define BNX2_RPM_RC_CNTL_4_P3_XI			 (1L<<29)
+#define BNX2_RPM_RC_CNTL_4_NBIT_XI			 (1L<<30)
+
+#define BNX2_RPM_RC_VALUE_MASK_4			0x00001924
+#define BNX2_RPM_RC_VALUE_MASK_4_VALUE			 (0xffffL<<0)
+#define BNX2_RPM_RC_VALUE_MASK_4_MASK			 (0xffffL<<16)
+
+#define BNX2_RPM_RC_CNTL_5				0x00001928
+#define BNX2_RPM_RC_CNTL_5_A				 (0x3ffffL<<0)
+#define BNX2_RPM_RC_CNTL_5_B				 (0xfffL<<19)
+#define BNX2_RPM_RC_CNTL_5_OFFSET_XI			 (0xffL<<0)
+#define BNX2_RPM_RC_CNTL_5_CLASS_XI			 (0x7L<<8)
+#define BNX2_RPM_RC_CNTL_5_PRIORITY_XI			 (1L<<11)
+#define BNX2_RPM_RC_CNTL_5_P4_XI			 (1L<<12)
+#define BNX2_RPM_RC_CNTL_5_HDR_TYPE_XI			 (0x7L<<13)
+#define BNX2_RPM_RC_CNTL_5_HDR_TYPE_START_XI		 (0L<<13)
+#define BNX2_RPM_RC_CNTL_5_HDR_TYPE_IP_XI		 (1L<<13)
+#define BNX2_RPM_RC_CNTL_5_HDR_TYPE_TCP_XI		 (2L<<13)
+#define BNX2_RPM_RC_CNTL_5_HDR_TYPE_UDP_XI		 (3L<<13)
+#define BNX2_RPM_RC_CNTL_5_HDR_TYPE_DATA_XI		 (4L<<13)
+#define BNX2_RPM_RC_CNTL_5_HDR_TYPE_TCP_UDP_XI		 (5L<<13)
+#define BNX2_RPM_RC_CNTL_5_HDR_TYPE_ICMPV6_XI		 (6L<<13)
+#define BNX2_RPM_RC_CNTL_5_COMP_XI			 (0x3L<<16)
+#define BNX2_RPM_RC_CNTL_5_COMP_EQUAL_XI		 (0L<<16)
+#define BNX2_RPM_RC_CNTL_5_COMP_NEQUAL_XI		 (1L<<16)
+#define BNX2_RPM_RC_CNTL_5_COMP_GREATER_XI		 (2L<<16)
+#define BNX2_RPM_RC_CNTL_5_COMP_LESS_XI			 (3L<<16)
+#define BNX2_RPM_RC_CNTL_5_MAP_XI			 (1L<<18)
+#define BNX2_RPM_RC_CNTL_5_SBIT_XI			 (1L<<19)
+#define BNX2_RPM_RC_CNTL_5_CMDSEL_XI			 (0x1fL<<20)
+#define BNX2_RPM_RC_CNTL_5_DISCARD_XI			 (1L<<25)
+#define BNX2_RPM_RC_CNTL_5_MASK_XI			 (1L<<26)
+#define BNX2_RPM_RC_CNTL_5_P1_XI			 (1L<<27)
+#define BNX2_RPM_RC_CNTL_5_P2_XI			 (1L<<28)
+#define BNX2_RPM_RC_CNTL_5_P3_XI			 (1L<<29)
+#define BNX2_RPM_RC_CNTL_5_NBIT_XI			 (1L<<30)
+
+#define BNX2_RPM_RC_VALUE_MASK_5			0x0000192c
+#define BNX2_RPM_RC_VALUE_MASK_5_VALUE			 (0xffffL<<0)
+#define BNX2_RPM_RC_VALUE_MASK_5_MASK			 (0xffffL<<16)
+
+#define BNX2_RPM_RC_CNTL_6				0x00001930
+#define BNX2_RPM_RC_CNTL_6_A				 (0x3ffffL<<0)
+#define BNX2_RPM_RC_CNTL_6_B				 (0xfffL<<19)
+#define BNX2_RPM_RC_CNTL_6_OFFSET_XI			 (0xffL<<0)
+#define BNX2_RPM_RC_CNTL_6_CLASS_XI			 (0x7L<<8)
+#define BNX2_RPM_RC_CNTL_6_PRIORITY_XI			 (1L<<11)
+#define BNX2_RPM_RC_CNTL_6_P4_XI			 (1L<<12)
+#define BNX2_RPM_RC_CNTL_6_HDR_TYPE_XI			 (0x7L<<13)
+#define BNX2_RPM_RC_CNTL_6_HDR_TYPE_START_XI		 (0L<<13)
+#define BNX2_RPM_RC_CNTL_6_HDR_TYPE_IP_XI		 (1L<<13)
+#define BNX2_RPM_RC_CNTL_6_HDR_TYPE_TCP_XI		 (2L<<13)
+#define BNX2_RPM_RC_CNTL_6_HDR_TYPE_UDP_XI		 (3L<<13)
+#define BNX2_RPM_RC_CNTL_6_HDR_TYPE_DATA_XI		 (4L<<13)
+#define BNX2_RPM_RC_CNTL_6_HDR_TYPE_TCP_UDP_XI		 (5L<<13)
+#define BNX2_RPM_RC_CNTL_6_HDR_TYPE_ICMPV6_XI		 (6L<<13)
+#define BNX2_RPM_RC_CNTL_6_COMP_XI			 (0x3L<<16)
+#define BNX2_RPM_RC_CNTL_6_COMP_EQUAL_XI		 (0L<<16)
+#define BNX2_RPM_RC_CNTL_6_COMP_NEQUAL_XI		 (1L<<16)
+#define BNX2_RPM_RC_CNTL_6_COMP_GREATER_XI		 (2L<<16)
+#define BNX2_RPM_RC_CNTL_6_COMP_LESS_XI			 (3L<<16)
+#define BNX2_RPM_RC_CNTL_6_MAP_XI			 (1L<<18)
+#define BNX2_RPM_RC_CNTL_6_SBIT_XI			 (1L<<19)
+#define BNX2_RPM_RC_CNTL_6_CMDSEL_XI			 (0x1fL<<20)
+#define BNX2_RPM_RC_CNTL_6_DISCARD_XI			 (1L<<25)
+#define BNX2_RPM_RC_CNTL_6_MASK_XI			 (1L<<26)
+#define BNX2_RPM_RC_CNTL_6_P1_XI			 (1L<<27)
+#define BNX2_RPM_RC_CNTL_6_P2_XI			 (1L<<28)
+#define BNX2_RPM_RC_CNTL_6_P3_XI			 (1L<<29)
+#define BNX2_RPM_RC_CNTL_6_NBIT_XI			 (1L<<30)
+
+#define BNX2_RPM_RC_VALUE_MASK_6			0x00001934
+#define BNX2_RPM_RC_VALUE_MASK_6_VALUE			 (0xffffL<<0)
+#define BNX2_RPM_RC_VALUE_MASK_6_MASK			 (0xffffL<<16)
+
+#define BNX2_RPM_RC_CNTL_7				0x00001938
+#define BNX2_RPM_RC_CNTL_7_A				 (0x3ffffL<<0)
+#define BNX2_RPM_RC_CNTL_7_B				 (0xfffL<<19)
+#define BNX2_RPM_RC_CNTL_7_OFFSET_XI			 (0xffL<<0)
+#define BNX2_RPM_RC_CNTL_7_CLASS_XI			 (0x7L<<8)
+#define BNX2_RPM_RC_CNTL_7_PRIORITY_XI			 (1L<<11)
+#define BNX2_RPM_RC_CNTL_7_P4_XI			 (1L<<12)
+#define BNX2_RPM_RC_CNTL_7_HDR_TYPE_XI			 (0x7L<<13)
+#define BNX2_RPM_RC_CNTL_7_HDR_TYPE_START_XI		 (0L<<13)
+#define BNX2_RPM_RC_CNTL_7_HDR_TYPE_IP_XI		 (1L<<13)
+#define BNX2_RPM_RC_CNTL_7_HDR_TYPE_TCP_XI		 (2L<<13)
+#define BNX2_RPM_RC_CNTL_7_HDR_TYPE_UDP_XI		 (3L<<13)
+#define BNX2_RPM_RC_CNTL_7_HDR_TYPE_DATA_XI		 (4L<<13)
+#define BNX2_RPM_RC_CNTL_7_HDR_TYPE_TCP_UDP_XI		 (5L<<13)
+#define BNX2_RPM_RC_CNTL_7_HDR_TYPE_ICMPV6_XI		 (6L<<13)
+#define BNX2_RPM_RC_CNTL_7_COMP_XI			 (0x3L<<16)
+#define BNX2_RPM_RC_CNTL_7_COMP_EQUAL_XI		 (0L<<16)
+#define BNX2_RPM_RC_CNTL_7_COMP_NEQUAL_XI		 (1L<<16)
+#define BNX2_RPM_RC_CNTL_7_COMP_GREATER_XI		 (2L<<16)
+#define BNX2_RPM_RC_CNTL_7_COMP_LESS_XI			 (3L<<16)
+#define BNX2_RPM_RC_CNTL_7_MAP_XI			 (1L<<18)
+#define BNX2_RPM_RC_CNTL_7_SBIT_XI			 (1L<<19)
+#define BNX2_RPM_RC_CNTL_7_CMDSEL_XI			 (0x1fL<<20)
+#define BNX2_RPM_RC_CNTL_7_DISCARD_XI			 (1L<<25)
+#define BNX2_RPM_RC_CNTL_7_MASK_XI			 (1L<<26)
+#define BNX2_RPM_RC_CNTL_7_P1_XI			 (1L<<27)
+#define BNX2_RPM_RC_CNTL_7_P2_XI			 (1L<<28)
+#define BNX2_RPM_RC_CNTL_7_P3_XI			 (1L<<29)
+#define BNX2_RPM_RC_CNTL_7_NBIT_XI			 (1L<<30)
+
+#define BNX2_RPM_RC_VALUE_MASK_7			0x0000193c
+#define BNX2_RPM_RC_VALUE_MASK_7_VALUE			 (0xffffL<<0)
+#define BNX2_RPM_RC_VALUE_MASK_7_MASK			 (0xffffL<<16)
+
+#define BNX2_RPM_RC_CNTL_8				0x00001940
+#define BNX2_RPM_RC_CNTL_8_A				 (0x3ffffL<<0)
+#define BNX2_RPM_RC_CNTL_8_B				 (0xfffL<<19)
+#define BNX2_RPM_RC_CNTL_8_OFFSET_XI			 (0xffL<<0)
+#define BNX2_RPM_RC_CNTL_8_CLASS_XI			 (0x7L<<8)
+#define BNX2_RPM_RC_CNTL_8_PRIORITY_XI			 (1L<<11)
+#define BNX2_RPM_RC_CNTL_8_P4_XI			 (1L<<12)
+#define BNX2_RPM_RC_CNTL_8_HDR_TYPE_XI			 (0x7L<<13)
+#define BNX2_RPM_RC_CNTL_8_HDR_TYPE_START_XI		 (0L<<13)
+#define BNX2_RPM_RC_CNTL_8_HDR_TYPE_IP_XI		 (1L<<13)
+#define BNX2_RPM_RC_CNTL_8_HDR_TYPE_TCP_XI		 (2L<<13)
+#define BNX2_RPM_RC_CNTL_8_HDR_TYPE_UDP_XI		 (3L<<13)
+#define BNX2_RPM_RC_CNTL_8_HDR_TYPE_DATA_XI		 (4L<<13)
+#define BNX2_RPM_RC_CNTL_8_HDR_TYPE_TCP_UDP_XI		 (5L<<13)
+#define BNX2_RPM_RC_CNTL_8_HDR_TYPE_ICMPV6_XI		 (6L<<13)
+#define BNX2_RPM_RC_CNTL_8_COMP_XI			 (0x3L<<16)
+#define BNX2_RPM_RC_CNTL_8_COMP_EQUAL_XI		 (0L<<16)
+#define BNX2_RPM_RC_CNTL_8_COMP_NEQUAL_XI		 (1L<<16)
+#define BNX2_RPM_RC_CNTL_8_COMP_GREATER_XI		 (2L<<16)
+#define BNX2_RPM_RC_CNTL_8_COMP_LESS_XI			 (3L<<16)
+#define BNX2_RPM_RC_CNTL_8_MAP_XI			 (1L<<18)
+#define BNX2_RPM_RC_CNTL_8_SBIT_XI			 (1L<<19)
+#define BNX2_RPM_RC_CNTL_8_CMDSEL_XI			 (0x1fL<<20)
+#define BNX2_RPM_RC_CNTL_8_DISCARD_XI			 (1L<<25)
+#define BNX2_RPM_RC_CNTL_8_MASK_XI			 (1L<<26)
+#define BNX2_RPM_RC_CNTL_8_P1_XI			 (1L<<27)
+#define BNX2_RPM_RC_CNTL_8_P2_XI			 (1L<<28)
+#define BNX2_RPM_RC_CNTL_8_P3_XI			 (1L<<29)
+#define BNX2_RPM_RC_CNTL_8_NBIT_XI			 (1L<<30)
+
+#define BNX2_RPM_RC_VALUE_MASK_8			0x00001944
+#define BNX2_RPM_RC_VALUE_MASK_8_VALUE			 (0xffffL<<0)
+#define BNX2_RPM_RC_VALUE_MASK_8_MASK			 (0xffffL<<16)
+
+#define BNX2_RPM_RC_CNTL_9				0x00001948
+#define BNX2_RPM_RC_CNTL_9_A				 (0x3ffffL<<0)
+#define BNX2_RPM_RC_CNTL_9_B				 (0xfffL<<19)
+#define BNX2_RPM_RC_CNTL_9_OFFSET_XI			 (0xffL<<0)
+#define BNX2_RPM_RC_CNTL_9_CLASS_XI			 (0x7L<<8)
+#define BNX2_RPM_RC_CNTL_9_PRIORITY_XI			 (1L<<11)
+#define BNX2_RPM_RC_CNTL_9_P4_XI			 (1L<<12)
+#define BNX2_RPM_RC_CNTL_9_HDR_TYPE_XI			 (0x7L<<13)
+#define BNX2_RPM_RC_CNTL_9_HDR_TYPE_START_XI		 (0L<<13)
+#define BNX2_RPM_RC_CNTL_9_HDR_TYPE_IP_XI		 (1L<<13)
+#define BNX2_RPM_RC_CNTL_9_HDR_TYPE_TCP_XI		 (2L<<13)
+#define BNX2_RPM_RC_CNTL_9_HDR_TYPE_UDP_XI		 (3L<<13)
+#define BNX2_RPM_RC_CNTL_9_HDR_TYPE_DATA_XI		 (4L<<13)
+#define BNX2_RPM_RC_CNTL_9_HDR_TYPE_TCP_UDP_XI		 (5L<<13)
+#define BNX2_RPM_RC_CNTL_9_HDR_TYPE_ICMPV6_XI		 (6L<<13)
+#define BNX2_RPM_RC_CNTL_9_COMP_XI			 (0x3L<<16)
+#define BNX2_RPM_RC_CNTL_9_COMP_EQUAL_XI		 (0L<<16)
+#define BNX2_RPM_RC_CNTL_9_COMP_NEQUAL_XI		 (1L<<16)
+#define BNX2_RPM_RC_CNTL_9_COMP_GREATER_XI		 (2L<<16)
+#define BNX2_RPM_RC_CNTL_9_COMP_LESS_XI			 (3L<<16)
+#define BNX2_RPM_RC_CNTL_9_MAP_XI			 (1L<<18)
+#define BNX2_RPM_RC_CNTL_9_SBIT_XI			 (1L<<19)
+#define BNX2_RPM_RC_CNTL_9_CMDSEL_XI			 (0x1fL<<20)
+#define BNX2_RPM_RC_CNTL_9_DISCARD_XI			 (1L<<25)
+#define BNX2_RPM_RC_CNTL_9_MASK_XI			 (1L<<26)
+#define BNX2_RPM_RC_CNTL_9_P1_XI			 (1L<<27)
+#define BNX2_RPM_RC_CNTL_9_P2_XI			 (1L<<28)
+#define BNX2_RPM_RC_CNTL_9_P3_XI			 (1L<<29)
+#define BNX2_RPM_RC_CNTL_9_NBIT_XI			 (1L<<30)
+
+#define BNX2_RPM_RC_VALUE_MASK_9			0x0000194c
+#define BNX2_RPM_RC_VALUE_MASK_9_VALUE			 (0xffffL<<0)
+#define BNX2_RPM_RC_VALUE_MASK_9_MASK			 (0xffffL<<16)
+
+#define BNX2_RPM_RC_CNTL_10				0x00001950
+#define BNX2_RPM_RC_CNTL_10_A				 (0x3ffffL<<0)
+#define BNX2_RPM_RC_CNTL_10_B				 (0xfffL<<19)
+#define BNX2_RPM_RC_CNTL_10_OFFSET_XI			 (0xffL<<0)
+#define BNX2_RPM_RC_CNTL_10_CLASS_XI			 (0x7L<<8)
+#define BNX2_RPM_RC_CNTL_10_PRIORITY_XI			 (1L<<11)
+#define BNX2_RPM_RC_CNTL_10_P4_XI			 (1L<<12)
+#define BNX2_RPM_RC_CNTL_10_HDR_TYPE_XI			 (0x7L<<13)
+#define BNX2_RPM_RC_CNTL_10_HDR_TYPE_START_XI		 (0L<<13)
+#define BNX2_RPM_RC_CNTL_10_HDR_TYPE_IP_XI		 (1L<<13)
+#define BNX2_RPM_RC_CNTL_10_HDR_TYPE_TCP_XI		 (2L<<13)
+#define BNX2_RPM_RC_CNTL_10_HDR_TYPE_UDP_XI		 (3L<<13)
+#define BNX2_RPM_RC_CNTL_10_HDR_TYPE_DATA_XI		 (4L<<13)
+#define BNX2_RPM_RC_CNTL_10_HDR_TYPE_TCP_UDP_XI		 (5L<<13)
+#define BNX2_RPM_RC_CNTL_10_HDR_TYPE_ICMPV6_XI		 (6L<<13)
+#define BNX2_RPM_RC_CNTL_10_COMP_XI			 (0x3L<<16)
+#define BNX2_RPM_RC_CNTL_10_COMP_EQUAL_XI		 (0L<<16)
+#define BNX2_RPM_RC_CNTL_10_COMP_NEQUAL_XI		 (1L<<16)
+#define BNX2_RPM_RC_CNTL_10_COMP_GREATER_XI		 (2L<<16)
+#define BNX2_RPM_RC_CNTL_10_COMP_LESS_XI		 (3L<<16)
+#define BNX2_RPM_RC_CNTL_10_MAP_XI			 (1L<<18)
+#define BNX2_RPM_RC_CNTL_10_SBIT_XI			 (1L<<19)
+#define BNX2_RPM_RC_CNTL_10_CMDSEL_XI			 (0x1fL<<20)
+#define BNX2_RPM_RC_CNTL_10_DISCARD_XI			 (1L<<25)
+#define BNX2_RPM_RC_CNTL_10_MASK_XI			 (1L<<26)
+#define BNX2_RPM_RC_CNTL_10_P1_XI			 (1L<<27)
+#define BNX2_RPM_RC_CNTL_10_P2_XI			 (1L<<28)
+#define BNX2_RPM_RC_CNTL_10_P3_XI			 (1L<<29)
+#define BNX2_RPM_RC_CNTL_10_NBIT_XI			 (1L<<30)
+
+#define BNX2_RPM_RC_VALUE_MASK_10			0x00001954
+#define BNX2_RPM_RC_VALUE_MASK_10_VALUE			 (0xffffL<<0)
+#define BNX2_RPM_RC_VALUE_MASK_10_MASK			 (0xffffL<<16)
+
+#define BNX2_RPM_RC_CNTL_11				0x00001958
+#define BNX2_RPM_RC_CNTL_11_A				 (0x3ffffL<<0)
+#define BNX2_RPM_RC_CNTL_11_B				 (0xfffL<<19)
+#define BNX2_RPM_RC_CNTL_11_OFFSET_XI			 (0xffL<<0)
+#define BNX2_RPM_RC_CNTL_11_CLASS_XI			 (0x7L<<8)
+#define BNX2_RPM_RC_CNTL_11_PRIORITY_XI			 (1L<<11)
+#define BNX2_RPM_RC_CNTL_11_P4_XI			 (1L<<12)
+#define BNX2_RPM_RC_CNTL_11_HDR_TYPE_XI			 (0x7L<<13)
+#define BNX2_RPM_RC_CNTL_11_HDR_TYPE_START_XI		 (0L<<13)
+#define BNX2_RPM_RC_CNTL_11_HDR_TYPE_IP_XI		 (1L<<13)
+#define BNX2_RPM_RC_CNTL_11_HDR_TYPE_TCP_XI		 (2L<<13)
+#define BNX2_RPM_RC_CNTL_11_HDR_TYPE_UDP_XI		 (3L<<13)
+#define BNX2_RPM_RC_CNTL_11_HDR_TYPE_DATA_XI		 (4L<<13)
+#define BNX2_RPM_RC_CNTL_11_HDR_TYPE_TCP_UDP_XI		 (5L<<13)
+#define BNX2_RPM_RC_CNTL_11_HDR_TYPE_ICMPV6_XI		 (6L<<13)
+#define BNX2_RPM_RC_CNTL_11_COMP_XI			 (0x3L<<16)
+#define BNX2_RPM_RC_CNTL_11_COMP_EQUAL_XI		 (0L<<16)
+#define BNX2_RPM_RC_CNTL_11_COMP_NEQUAL_XI		 (1L<<16)
+#define BNX2_RPM_RC_CNTL_11_COMP_GREATER_XI		 (2L<<16)
+#define BNX2_RPM_RC_CNTL_11_COMP_LESS_XI		 (3L<<16)
+#define BNX2_RPM_RC_CNTL_11_MAP_XI			 (1L<<18)
+#define BNX2_RPM_RC_CNTL_11_SBIT_XI			 (1L<<19)
+#define BNX2_RPM_RC_CNTL_11_CMDSEL_XI			 (0x1fL<<20)
+#define BNX2_RPM_RC_CNTL_11_DISCARD_XI			 (1L<<25)
+#define BNX2_RPM_RC_CNTL_11_MASK_XI			 (1L<<26)
+#define BNX2_RPM_RC_CNTL_11_P1_XI			 (1L<<27)
+#define BNX2_RPM_RC_CNTL_11_P2_XI			 (1L<<28)
+#define BNX2_RPM_RC_CNTL_11_P3_XI			 (1L<<29)
+#define BNX2_RPM_RC_CNTL_11_NBIT_XI			 (1L<<30)
+
+#define BNX2_RPM_RC_VALUE_MASK_11			0x0000195c
+#define BNX2_RPM_RC_VALUE_MASK_11_VALUE			 (0xffffL<<0)
+#define BNX2_RPM_RC_VALUE_MASK_11_MASK			 (0xffffL<<16)
+
+#define BNX2_RPM_RC_CNTL_12				0x00001960
+#define BNX2_RPM_RC_CNTL_12_A				 (0x3ffffL<<0)
+#define BNX2_RPM_RC_CNTL_12_B				 (0xfffL<<19)
+#define BNX2_RPM_RC_CNTL_12_OFFSET_XI			 (0xffL<<0)
+#define BNX2_RPM_RC_CNTL_12_CLASS_XI			 (0x7L<<8)
+#define BNX2_RPM_RC_CNTL_12_PRIORITY_XI			 (1L<<11)
+#define BNX2_RPM_RC_CNTL_12_P4_XI			 (1L<<12)
+#define BNX2_RPM_RC_CNTL_12_HDR_TYPE_XI			 (0x7L<<13)
+#define BNX2_RPM_RC_CNTL_12_HDR_TYPE_START_XI		 (0L<<13)
+#define BNX2_RPM_RC_CNTL_12_HDR_TYPE_IP_XI		 (1L<<13)
+#define BNX2_RPM_RC_CNTL_12_HDR_TYPE_TCP_XI		 (2L<<13)
+#define BNX2_RPM_RC_CNTL_12_HDR_TYPE_UDP_XI		 (3L<<13)
+#define BNX2_RPM_RC_CNTL_12_HDR_TYPE_DATA_XI		 (4L<<13)
+#define BNX2_RPM_RC_CNTL_12_HDR_TYPE_TCP_UDP_XI		 (5L<<13)
+#define BNX2_RPM_RC_CNTL_12_HDR_TYPE_ICMPV6_XI		 (6L<<13)
+#define BNX2_RPM_RC_CNTL_12_COMP_XI			 (0x3L<<16)
+#define BNX2_RPM_RC_CNTL_12_COMP_EQUAL_XI		 (0L<<16)
+#define BNX2_RPM_RC_CNTL_12_COMP_NEQUAL_XI		 (1L<<16)
+#define BNX2_RPM_RC_CNTL_12_COMP_GREATER_XI		 (2L<<16)
+#define BNX2_RPM_RC_CNTL_12_COMP_LESS_XI		 (3L<<16)
+#define BNX2_RPM_RC_CNTL_12_MAP_XI			 (1L<<18)
+#define BNX2_RPM_RC_CNTL_12_SBIT_XI			 (1L<<19)
+#define BNX2_RPM_RC_CNTL_12_CMDSEL_XI			 (0x1fL<<20)
+#define BNX2_RPM_RC_CNTL_12_DISCARD_XI			 (1L<<25)
+#define BNX2_RPM_RC_CNTL_12_MASK_XI			 (1L<<26)
+#define BNX2_RPM_RC_CNTL_12_P1_XI			 (1L<<27)
+#define BNX2_RPM_RC_CNTL_12_P2_XI			 (1L<<28)
+#define BNX2_RPM_RC_CNTL_12_P3_XI			 (1L<<29)
+#define BNX2_RPM_RC_CNTL_12_NBIT_XI			 (1L<<30)
+
+#define BNX2_RPM_RC_VALUE_MASK_12			0x00001964
+#define BNX2_RPM_RC_VALUE_MASK_12_VALUE			 (0xffffL<<0)
+#define BNX2_RPM_RC_VALUE_MASK_12_MASK			 (0xffffL<<16)
+
+#define BNX2_RPM_RC_CNTL_13				0x00001968
+#define BNX2_RPM_RC_CNTL_13_A				 (0x3ffffL<<0)
+#define BNX2_RPM_RC_CNTL_13_B				 (0xfffL<<19)
+#define BNX2_RPM_RC_CNTL_13_OFFSET_XI			 (0xffL<<0)
+#define BNX2_RPM_RC_CNTL_13_CLASS_XI			 (0x7L<<8)
+#define BNX2_RPM_RC_CNTL_13_PRIORITY_XI			 (1L<<11)
+#define BNX2_RPM_RC_CNTL_13_P4_XI			 (1L<<12)
+#define BNX2_RPM_RC_CNTL_13_HDR_TYPE_XI			 (0x7L<<13)
+#define BNX2_RPM_RC_CNTL_13_HDR_TYPE_START_XI		 (0L<<13)
+#define BNX2_RPM_RC_CNTL_13_HDR_TYPE_IP_XI		 (1L<<13)
+#define BNX2_RPM_RC_CNTL_13_HDR_TYPE_TCP_XI		 (2L<<13)
+#define BNX2_RPM_RC_CNTL_13_HDR_TYPE_UDP_XI		 (3L<<13)
+#define BNX2_RPM_RC_CNTL_13_HDR_TYPE_DATA_XI		 (4L<<13)
+#define BNX2_RPM_RC_CNTL_13_HDR_TYPE_TCP_UDP_XI		 (5L<<13)
+#define BNX2_RPM_RC_CNTL_13_HDR_TYPE_ICMPV6_XI		 (6L<<13)
+#define BNX2_RPM_RC_CNTL_13_COMP_XI			 (0x3L<<16)
+#define BNX2_RPM_RC_CNTL_13_COMP_EQUAL_XI		 (0L<<16)
+#define BNX2_RPM_RC_CNTL_13_COMP_NEQUAL_XI		 (1L<<16)
+#define BNX2_RPM_RC_CNTL_13_COMP_GREATER_XI		 (2L<<16)
+#define BNX2_RPM_RC_CNTL_13_COMP_LESS_XI		 (3L<<16)
+#define BNX2_RPM_RC_CNTL_13_MAP_XI			 (1L<<18)
+#define BNX2_RPM_RC_CNTL_13_SBIT_XI			 (1L<<19)
+#define BNX2_RPM_RC_CNTL_13_CMDSEL_XI			 (0x1fL<<20)
+#define BNX2_RPM_RC_CNTL_13_DISCARD_XI			 (1L<<25)
+#define BNX2_RPM_RC_CNTL_13_MASK_XI			 (1L<<26)
+#define BNX2_RPM_RC_CNTL_13_P1_XI			 (1L<<27)
+#define BNX2_RPM_RC_CNTL_13_P2_XI			 (1L<<28)
+#define BNX2_RPM_RC_CNTL_13_P3_XI			 (1L<<29)
+#define BNX2_RPM_RC_CNTL_13_NBIT_XI			 (1L<<30)
+
+#define BNX2_RPM_RC_VALUE_MASK_13			0x0000196c
+#define BNX2_RPM_RC_VALUE_MASK_13_VALUE			 (0xffffL<<0)
+#define BNX2_RPM_RC_VALUE_MASK_13_MASK			 (0xffffL<<16)
+
+#define BNX2_RPM_RC_CNTL_14				0x00001970
+#define BNX2_RPM_RC_CNTL_14_A				 (0x3ffffL<<0)
+#define BNX2_RPM_RC_CNTL_14_B				 (0xfffL<<19)
+#define BNX2_RPM_RC_CNTL_14_OFFSET_XI			 (0xffL<<0)
+#define BNX2_RPM_RC_CNTL_14_CLASS_XI			 (0x7L<<8)
+#define BNX2_RPM_RC_CNTL_14_PRIORITY_XI			 (1L<<11)
+#define BNX2_RPM_RC_CNTL_14_P4_XI			 (1L<<12)
+#define BNX2_RPM_RC_CNTL_14_HDR_TYPE_XI			 (0x7L<<13)
+#define BNX2_RPM_RC_CNTL_14_HDR_TYPE_START_XI		 (0L<<13)
+#define BNX2_RPM_RC_CNTL_14_HDR_TYPE_IP_XI		 (1L<<13)
+#define BNX2_RPM_RC_CNTL_14_HDR_TYPE_TCP_XI		 (2L<<13)
+#define BNX2_RPM_RC_CNTL_14_HDR_TYPE_UDP_XI		 (3L<<13)
+#define BNX2_RPM_RC_CNTL_14_HDR_TYPE_DATA_XI		 (4L<<13)
+#define BNX2_RPM_RC_CNTL_14_HDR_TYPE_TCP_UDP_XI		 (5L<<13)
+#define BNX2_RPM_RC_CNTL_14_HDR_TYPE_ICMPV6_XI		 (6L<<13)
+#define BNX2_RPM_RC_CNTL_14_COMP_XI			 (0x3L<<16)
+#define BNX2_RPM_RC_CNTL_14_COMP_EQUAL_XI		 (0L<<16)
+#define BNX2_RPM_RC_CNTL_14_COMP_NEQUAL_XI		 (1L<<16)
+#define BNX2_RPM_RC_CNTL_14_COMP_GREATER_XI		 (2L<<16)
+#define BNX2_RPM_RC_CNTL_14_COMP_LESS_XI		 (3L<<16)
+#define BNX2_RPM_RC_CNTL_14_MAP_XI			 (1L<<18)
+#define BNX2_RPM_RC_CNTL_14_SBIT_XI			 (1L<<19)
+#define BNX2_RPM_RC_CNTL_14_CMDSEL_XI			 (0x1fL<<20)
+#define BNX2_RPM_RC_CNTL_14_DISCARD_XI			 (1L<<25)
+#define BNX2_RPM_RC_CNTL_14_MASK_XI			 (1L<<26)
+#define BNX2_RPM_RC_CNTL_14_P1_XI			 (1L<<27)
+#define BNX2_RPM_RC_CNTL_14_P2_XI			 (1L<<28)
+#define BNX2_RPM_RC_CNTL_14_P3_XI			 (1L<<29)
+#define BNX2_RPM_RC_CNTL_14_NBIT_XI			 (1L<<30)
+
+#define BNX2_RPM_RC_VALUE_MASK_14			0x00001974
+#define BNX2_RPM_RC_VALUE_MASK_14_VALUE			 (0xffffL<<0)
+#define BNX2_RPM_RC_VALUE_MASK_14_MASK			 (0xffffL<<16)
+
+#define BNX2_RPM_RC_CNTL_15				0x00001978
+#define BNX2_RPM_RC_CNTL_15_A				 (0x3ffffL<<0)
+#define BNX2_RPM_RC_CNTL_15_B				 (0xfffL<<19)
+#define BNX2_RPM_RC_CNTL_15_OFFSET_XI			 (0xffL<<0)
+#define BNX2_RPM_RC_CNTL_15_CLASS_XI			 (0x7L<<8)
+#define BNX2_RPM_RC_CNTL_15_PRIORITY_XI			 (1L<<11)
+#define BNX2_RPM_RC_CNTL_15_P4_XI			 (1L<<12)
+#define BNX2_RPM_RC_CNTL_15_HDR_TYPE_XI			 (0x7L<<13)
+#define BNX2_RPM_RC_CNTL_15_HDR_TYPE_START_XI		 (0L<<13)
+#define BNX2_RPM_RC_CNTL_15_HDR_TYPE_IP_XI		 (1L<<13)
+#define BNX2_RPM_RC_CNTL_15_HDR_TYPE_TCP_XI		 (2L<<13)
+#define BNX2_RPM_RC_CNTL_15_HDR_TYPE_UDP_XI		 (3L<<13)
+#define BNX2_RPM_RC_CNTL_15_HDR_TYPE_DATA_XI		 (4L<<13)
+#define BNX2_RPM_RC_CNTL_15_HDR_TYPE_TCP_UDP_XI		 (5L<<13)
+#define BNX2_RPM_RC_CNTL_15_HDR_TYPE_ICMPV6_XI		 (6L<<13)
+#define BNX2_RPM_RC_CNTL_15_COMP_XI			 (0x3L<<16)
+#define BNX2_RPM_RC_CNTL_15_COMP_EQUAL_XI		 (0L<<16)
+#define BNX2_RPM_RC_CNTL_15_COMP_NEQUAL_XI		 (1L<<16)
+#define BNX2_RPM_RC_CNTL_15_COMP_GREATER_XI		 (2L<<16)
+#define BNX2_RPM_RC_CNTL_15_COMP_LESS_XI		 (3L<<16)
+#define BNX2_RPM_RC_CNTL_15_MAP_XI			 (1L<<18)
+#define BNX2_RPM_RC_CNTL_15_SBIT_XI			 (1L<<19)
+#define BNX2_RPM_RC_CNTL_15_CMDSEL_XI			 (0x1fL<<20)
+#define BNX2_RPM_RC_CNTL_15_DISCARD_XI			 (1L<<25)
+#define BNX2_RPM_RC_CNTL_15_MASK_XI			 (1L<<26)
+#define BNX2_RPM_RC_CNTL_15_P1_XI			 (1L<<27)
+#define BNX2_RPM_RC_CNTL_15_P2_XI			 (1L<<28)
+#define BNX2_RPM_RC_CNTL_15_P3_XI			 (1L<<29)
+#define BNX2_RPM_RC_CNTL_15_NBIT_XI			 (1L<<30)
+
+#define BNX2_RPM_RC_VALUE_MASK_15			0x0000197c
+#define BNX2_RPM_RC_VALUE_MASK_15_VALUE			 (0xffffL<<0)
+#define BNX2_RPM_RC_VALUE_MASK_15_MASK			 (0xffffL<<16)
+
+#define BNX2_RPM_RC_CONFIG				0x00001980
+#define BNX2_RPM_RC_CONFIG_RULE_ENABLE			 (0xffffL<<0)
+#define BNX2_RPM_RC_CONFIG_RULE_ENABLE_XI		 (0xfffffL<<0)
+#define BNX2_RPM_RC_CONFIG_DEF_CLASS			 (0x7L<<24)
+#define BNX2_RPM_RC_CONFIG_KNUM_OVERWRITE		 (1L<<31)
+
+#define BNX2_RPM_DEBUG0					0x00001984
+#define BNX2_RPM_DEBUG0_FM_BCNT				 (0xffffL<<0)
+#define BNX2_RPM_DEBUG0_T_DATA_OFST_VLD			 (1L<<16)
+#define BNX2_RPM_DEBUG0_T_UDP_OFST_VLD			 (1L<<17)
+#define BNX2_RPM_DEBUG0_T_TCP_OFST_VLD			 (1L<<18)
+#define BNX2_RPM_DEBUG0_T_IP_OFST_VLD			 (1L<<19)
+#define BNX2_RPM_DEBUG0_IP_MORE_FRGMT			 (1L<<20)
+#define BNX2_RPM_DEBUG0_T_IP_NO_TCP_UDP_HDR		 (1L<<21)
+#define BNX2_RPM_DEBUG0_LLC_SNAP			 (1L<<22)
+#define BNX2_RPM_DEBUG0_FM_STARTED			 (1L<<23)
+#define BNX2_RPM_DEBUG0_DONE				 (1L<<24)
+#define BNX2_RPM_DEBUG0_WAIT_4_DONE			 (1L<<25)
+#define BNX2_RPM_DEBUG0_USE_TPBUF_CKSUM			 (1L<<26)
+#define BNX2_RPM_DEBUG0_RX_NO_PSD_HDR_CKSUM		 (1L<<27)
+#define BNX2_RPM_DEBUG0_IGNORE_VLAN			 (1L<<28)
+#define BNX2_RPM_DEBUG0_RP_ENA_ACTIVE			 (1L<<31)
+
+#define BNX2_RPM_DEBUG1					0x00001988
+#define BNX2_RPM_DEBUG1_FSM_CUR_ST			 (0xffffL<<0)
+#define BNX2_RPM_DEBUG1_FSM_CUR_ST_IDLE			 (0L<<0)
+#define BNX2_RPM_DEBUG1_FSM_CUR_ST_ETYPE_B6_ALL		 (1L<<0)
+#define BNX2_RPM_DEBUG1_FSM_CUR_ST_ETYPE_B2_IPLLC	 (2L<<0)
+#define BNX2_RPM_DEBUG1_FSM_CUR_ST_ETYPE_B6_IP		 (4L<<0)
+#define BNX2_RPM_DEBUG1_FSM_CUR_ST_ETYPE_B2_IP		 (8L<<0)
+#define BNX2_RPM_DEBUG1_FSM_CUR_ST_IP_START		 (16L<<0)
+#define BNX2_RPM_DEBUG1_FSM_CUR_ST_IP			 (32L<<0)
+#define BNX2_RPM_DEBUG1_FSM_CUR_ST_TCP			 (64L<<0)
+#define BNX2_RPM_DEBUG1_FSM_CUR_ST_UDP			 (128L<<0)
+#define BNX2_RPM_DEBUG1_FSM_CUR_ST_AH			 (256L<<0)
+#define BNX2_RPM_DEBUG1_FSM_CUR_ST_ESP			 (512L<<0)
+#define BNX2_RPM_DEBUG1_FSM_CUR_ST_ESP_PAYLOAD		 (1024L<<0)
+#define BNX2_RPM_DEBUG1_FSM_CUR_ST_DATA			 (2048L<<0)
+#define BNX2_RPM_DEBUG1_FSM_CUR_ST_ADD_CARRY		 (0x2000L<<0)
+#define BNX2_RPM_DEBUG1_FSM_CUR_ST_ADD_CARRYOUT		 (0x4000L<<0)
+#define BNX2_RPM_DEBUG1_FSM_CUR_ST_LATCH_RESULT		 (0x8000L<<0)
+#define BNX2_RPM_DEBUG1_HDR_BCNT			 (0x7ffL<<16)
+#define BNX2_RPM_DEBUG1_UNKNOWN_ETYPE_D			 (1L<<28)
+#define BNX2_RPM_DEBUG1_VLAN_REMOVED_D2			 (1L<<29)
+#define BNX2_RPM_DEBUG1_VLAN_REMOVED_D1			 (1L<<30)
+#define BNX2_RPM_DEBUG1_EOF_0XTRA_WD			 (1L<<31)
+
+#define BNX2_RPM_DEBUG2					0x0000198c
+#define BNX2_RPM_DEBUG2_CMD_HIT_VEC			 (0xffffL<<0)
+#define BNX2_RPM_DEBUG2_IP_BCNT				 (0xffL<<16)
+#define BNX2_RPM_DEBUG2_THIS_CMD_M4			 (1L<<24)
+#define BNX2_RPM_DEBUG2_THIS_CMD_M3			 (1L<<25)
+#define BNX2_RPM_DEBUG2_THIS_CMD_M2			 (1L<<26)
+#define BNX2_RPM_DEBUG2_THIS_CMD_M1			 (1L<<27)
+#define BNX2_RPM_DEBUG2_IPIPE_EMPTY			 (1L<<28)
+#define BNX2_RPM_DEBUG2_FM_DISCARD			 (1L<<29)
+#define BNX2_RPM_DEBUG2_LAST_RULE_IN_FM_D2		 (1L<<30)
+#define BNX2_RPM_DEBUG2_LAST_RULE_IN_FM_D1		 (1L<<31)
+
+#define BNX2_RPM_DEBUG3					0x00001990
+#define BNX2_RPM_DEBUG3_AVAIL_MBUF_PTR			 (0x1ffL<<0)
+#define BNX2_RPM_DEBUG3_RDE_RLUPQ_WR_REQ_INT		 (1L<<9)
+#define BNX2_RPM_DEBUG3_RDE_RBUF_WR_LAST_INT		 (1L<<10)
+#define BNX2_RPM_DEBUG3_RDE_RBUF_WR_REQ_INT		 (1L<<11)
+#define BNX2_RPM_DEBUG3_RDE_RBUF_FREE_REQ		 (1L<<12)
+#define BNX2_RPM_DEBUG3_RDE_RBUF_ALLOC_REQ		 (1L<<13)
+#define BNX2_RPM_DEBUG3_DFSM_MBUF_NOTAVAIL		 (1L<<14)
+#define BNX2_RPM_DEBUG3_RBUF_RDE_SOF_DROP		 (1L<<15)
+#define BNX2_RPM_DEBUG3_DFIFO_VLD_ENTRY_CT		 (0xfL<<16)
+#define BNX2_RPM_DEBUG3_RDE_SRC_FIFO_ALMFULL		 (1L<<21)
+#define BNX2_RPM_DEBUG3_DROP_NXT_VLD			 (1L<<22)
+#define BNX2_RPM_DEBUG3_DROP_NXT			 (1L<<23)
+#define BNX2_RPM_DEBUG3_FTQ_FSM				 (0x3L<<24)
+#define BNX2_RPM_DEBUG3_FTQ_FSM_IDLE			 (0x0L<<24)
+#define BNX2_RPM_DEBUG3_FTQ_FSM_WAIT_ACK		 (0x1L<<24)
+#define BNX2_RPM_DEBUG3_FTQ_FSM_WAIT_FREE		 (0x2L<<24)
+#define BNX2_RPM_DEBUG3_MBWRITE_FSM			 (0x3L<<26)
+#define BNX2_RPM_DEBUG3_MBWRITE_FSM_WAIT_SOF		 (0x0L<<26)
+#define BNX2_RPM_DEBUG3_MBWRITE_FSM_GET_MBUF		 (0x1L<<26)
+#define BNX2_RPM_DEBUG3_MBWRITE_FSM_DMA_DATA		 (0x2L<<26)
+#define BNX2_RPM_DEBUG3_MBWRITE_FSM_WAIT_DATA		 (0x3L<<26)
+#define BNX2_RPM_DEBUG3_MBWRITE_FSM_WAIT_EOF		 (0x4L<<26)
+#define BNX2_RPM_DEBUG3_MBWRITE_FSM_WAIT_MF_ACK		 (0x5L<<26)
+#define BNX2_RPM_DEBUG3_MBWRITE_FSM_WAIT_DROP_NXT_VLD	 (0x6L<<26)
+#define BNX2_RPM_DEBUG3_MBWRITE_FSM_DONE		 (0x7L<<26)
+#define BNX2_RPM_DEBUG3_MBFREE_FSM			 (1L<<29)
+#define BNX2_RPM_DEBUG3_MBFREE_FSM_IDLE			 (0L<<29)
+#define BNX2_RPM_DEBUG3_MBFREE_FSM_WAIT_ACK		 (1L<<29)
+#define BNX2_RPM_DEBUG3_MBALLOC_FSM			 (1L<<30)
+#define BNX2_RPM_DEBUG3_MBALLOC_FSM_ET_MBUF		 (0x0L<<30)
+#define BNX2_RPM_DEBUG3_MBALLOC_FSM_IVE_MBUF		 (0x1L<<30)
+#define BNX2_RPM_DEBUG3_CCODE_EOF_ERROR			 (1L<<31)
+
+#define BNX2_RPM_DEBUG4					0x00001994
+#define BNX2_RPM_DEBUG4_DFSM_MBUF_CLUSTER		 (0x1ffffffL<<0)
+#define BNX2_RPM_DEBUG4_DFIFO_CUR_CCODE			 (0x7L<<25)
+#define BNX2_RPM_DEBUG4_MBWRITE_FSM			 (0x7L<<28)
+#define BNX2_RPM_DEBUG4_DFIFO_EMPTY			 (1L<<31)
+
+#define BNX2_RPM_DEBUG5					0x00001998
+#define BNX2_RPM_DEBUG5_RDROP_WPTR			 (0x1fL<<0)
+#define BNX2_RPM_DEBUG5_RDROP_ACPI_RPTR			 (0x1fL<<5)
+#define BNX2_RPM_DEBUG5_RDROP_MC_RPTR			 (0x1fL<<10)
+#define BNX2_RPM_DEBUG5_RDROP_RC_RPTR			 (0x1fL<<15)
+#define BNX2_RPM_DEBUG5_RDROP_ACPI_EMPTY		 (1L<<20)
+#define BNX2_RPM_DEBUG5_RDROP_MC_EMPTY			 (1L<<21)
+#define BNX2_RPM_DEBUG5_RDROP_AEOF_VEC_AT_RDROP_MC_RPTR	 (1L<<22)
+#define BNX2_RPM_DEBUG5_HOLDREG_WOL_DROP_INT		 (1L<<23)
+#define BNX2_RPM_DEBUG5_HOLDREG_DISCARD			 (1L<<24)
+#define BNX2_RPM_DEBUG5_HOLDREG_MBUF_NOTAVAIL		 (1L<<25)
+#define BNX2_RPM_DEBUG5_HOLDREG_MC_EMPTY		 (1L<<26)
+#define BNX2_RPM_DEBUG5_HOLDREG_RC_EMPTY		 (1L<<27)
+#define BNX2_RPM_DEBUG5_HOLDREG_FC_EMPTY		 (1L<<28)
+#define BNX2_RPM_DEBUG5_HOLDREG_ACPI_EMPTY		 (1L<<29)
+#define BNX2_RPM_DEBUG5_HOLDREG_FULL_T			 (1L<<30)
+#define BNX2_RPM_DEBUG5_HOLDREG_RD			 (1L<<31)
+
+#define BNX2_RPM_DEBUG6					0x0000199c
+#define BNX2_RPM_DEBUG6_ACPI_VEC			 (0xffffL<<0)
+#define BNX2_RPM_DEBUG6_VEC				 (0xffffL<<16)
+
+#define BNX2_RPM_DEBUG7					0x000019a0
+#define BNX2_RPM_DEBUG7_RPM_DBG7_LAST_CRC		 (0xffffffffL<<0)
+
+#define BNX2_RPM_DEBUG8					0x000019a4
+#define BNX2_RPM_DEBUG8_PS_ACPI_FSM			 (0xfL<<0)
+#define BNX2_RPM_DEBUG8_PS_ACPI_FSM_IDLE		 (0L<<0)
+#define BNX2_RPM_DEBUG8_PS_ACPI_FSM_SOF_W1_ADDR		 (1L<<0)
+#define BNX2_RPM_DEBUG8_PS_ACPI_FSM_SOF_W2_ADDR		 (2L<<0)
+#define BNX2_RPM_DEBUG8_PS_ACPI_FSM_SOF_W3_ADDR		 (3L<<0)
+#define BNX2_RPM_DEBUG8_PS_ACPI_FSM_SOF_WAIT_THBUF	 (4L<<0)
+#define BNX2_RPM_DEBUG8_PS_ACPI_FSM_W3_DATA		 (5L<<0)
+#define BNX2_RPM_DEBUG8_PS_ACPI_FSM_W0_ADDR		 (6L<<0)
+#define BNX2_RPM_DEBUG8_PS_ACPI_FSM_W1_ADDR		 (7L<<0)
+#define BNX2_RPM_DEBUG8_PS_ACPI_FSM_W2_ADDR		 (8L<<0)
+#define BNX2_RPM_DEBUG8_PS_ACPI_FSM_W3_ADDR		 (9L<<0)
+#define BNX2_RPM_DEBUG8_PS_ACPI_FSM_WAIT_THBUF		 (10L<<0)
+#define BNX2_RPM_DEBUG8_COMPARE_AT_W0			 (1L<<4)
+#define BNX2_RPM_DEBUG8_COMPARE_AT_W3_DATA		 (1L<<5)
+#define BNX2_RPM_DEBUG8_COMPARE_AT_SOF_WAIT		 (1L<<6)
+#define BNX2_RPM_DEBUG8_COMPARE_AT_SOF_W3		 (1L<<7)
+#define BNX2_RPM_DEBUG8_COMPARE_AT_SOF_W2		 (1L<<8)
+#define BNX2_RPM_DEBUG8_EOF_W_LTEQ6_VLDBYTES		 (1L<<9)
+#define BNX2_RPM_DEBUG8_EOF_W_LTEQ4_VLDBYTES		 (1L<<10)
+#define BNX2_RPM_DEBUG8_NXT_EOF_W_12_VLDBYTES		 (1L<<11)
+#define BNX2_RPM_DEBUG8_EOF_DET				 (1L<<12)
+#define BNX2_RPM_DEBUG8_SOF_DET				 (1L<<13)
+#define BNX2_RPM_DEBUG8_WAIT_4_SOF			 (1L<<14)
+#define BNX2_RPM_DEBUG8_ALL_DONE			 (1L<<15)
+#define BNX2_RPM_DEBUG8_THBUF_ADDR			 (0x7fL<<16)
+#define BNX2_RPM_DEBUG8_BYTE_CTR			 (0xffL<<24)
+
+#define BNX2_RPM_DEBUG9					0x000019a8
+#define BNX2_RPM_DEBUG9_OUTFIFO_COUNT			 (0x7L<<0)
+#define BNX2_RPM_DEBUG9_RDE_ACPI_RDY			 (1L<<3)
+#define BNX2_RPM_DEBUG9_VLD_RD_ENTRY_CT			 (0x7L<<4)
+#define BNX2_RPM_DEBUG9_OUTFIFO_OVERRUN_OCCURRED	 (1L<<28)
+#define BNX2_RPM_DEBUG9_INFIFO_OVERRUN_OCCURRED		 (1L<<29)
+#define BNX2_RPM_DEBUG9_ACPI_MATCH_INT			 (1L<<30)
+#define BNX2_RPM_DEBUG9_ACPI_ENABLE_SYN			 (1L<<31)
+#define BNX2_RPM_DEBUG9_BEMEM_R_XI			 (0x1fL<<0)
+#define BNX2_RPM_DEBUG9_EO_XI				 (1L<<5)
+#define BNX2_RPM_DEBUG9_AEOF_DE_XI			 (1L<<6)
+#define BNX2_RPM_DEBUG9_SO_XI				 (1L<<7)
+#define BNX2_RPM_DEBUG9_WD64_CT_XI			 (0x1fL<<8)
+#define BNX2_RPM_DEBUG9_EOF_VLDBYTE_XI			 (0x7L<<13)
+#define BNX2_RPM_DEBUG9_ACPI_RDE_PAT_ID_XI		 (0xfL<<16)
+#define BNX2_RPM_DEBUG9_CALCRC_RESULT_XI		 (0x3ffL<<20)
+#define BNX2_RPM_DEBUG9_DATA_IN_VL_XI			 (1L<<30)
+#define BNX2_RPM_DEBUG9_CALCRC_BUFFER_VLD_XI		 (1L<<31)
+
+#define BNX2_RPM_ACPI_DBG_BUF_W00			0x000019c0
+#define BNX2_RPM_ACPI_DBG_BUF_W01			0x000019c4
+#define BNX2_RPM_ACPI_DBG_BUF_W02			0x000019c8
+#define BNX2_RPM_ACPI_DBG_BUF_W03			0x000019cc
+#define BNX2_RPM_ACPI_DBG_BUF_W10			0x000019d0
+#define BNX2_RPM_ACPI_DBG_BUF_W11			0x000019d4
+#define BNX2_RPM_ACPI_DBG_BUF_W12			0x000019d8
+#define BNX2_RPM_ACPI_DBG_BUF_W13			0x000019dc
+#define BNX2_RPM_ACPI_DBG_BUF_W20			0x000019e0
+#define BNX2_RPM_ACPI_DBG_BUF_W21			0x000019e4
+#define BNX2_RPM_ACPI_DBG_BUF_W22			0x000019e8
+#define BNX2_RPM_ACPI_DBG_BUF_W23			0x000019ec
+#define BNX2_RPM_ACPI_DBG_BUF_W30			0x000019f0
+#define BNX2_RPM_ACPI_DBG_BUF_W31			0x000019f4
+#define BNX2_RPM_ACPI_DBG_BUF_W32			0x000019f8
+#define BNX2_RPM_ACPI_DBG_BUF_W33			0x000019fc
+#define BNX2_RPM_ACPI_BYTE_ENABLE_CTRL			0x00001a00
+#define BNX2_RPM_ACPI_BYTE_ENABLE_CTRL_BYTE_ADDRESS	 (0xffffL<<0)
+#define BNX2_RPM_ACPI_BYTE_ENABLE_CTRL_DEBUGRD		 (1L<<28)
+#define BNX2_RPM_ACPI_BYTE_ENABLE_CTRL_MODE		 (1L<<29)
+#define BNX2_RPM_ACPI_BYTE_ENABLE_CTRL_INIT		 (1L<<30)
+#define BNX2_RPM_ACPI_BYTE_ENABLE_CTRL_WR		 (1L<<31)
+
+#define BNX2_RPM_ACPI_PATTERN_CTRL			0x00001a04
+#define BNX2_RPM_ACPI_PATTERN_CTRL_PATTERN_ID		 (0xfL<<0)
+#define BNX2_RPM_ACPI_PATTERN_CTRL_CRC_SM_CLR		 (1L<<30)
+#define BNX2_RPM_ACPI_PATTERN_CTRL_WR			 (1L<<31)
+
+#define BNX2_RPM_ACPI_DATA				0x00001a08
+#define BNX2_RPM_ACPI_DATA_PATTERN_BE			 (0xffffffffL<<0)
+
+#define BNX2_RPM_ACPI_PATTERN_LEN0			0x00001a0c
+#define BNX2_RPM_ACPI_PATTERN_LEN0_PATTERN_LEN3		 (0xffL<<0)
+#define BNX2_RPM_ACPI_PATTERN_LEN0_PATTERN_LEN2		 (0xffL<<8)
+#define BNX2_RPM_ACPI_PATTERN_LEN0_PATTERN_LEN1		 (0xffL<<16)
+#define BNX2_RPM_ACPI_PATTERN_LEN0_PATTERN_LEN0		 (0xffL<<24)
+
+#define BNX2_RPM_ACPI_PATTERN_LEN1			0x00001a10
+#define BNX2_RPM_ACPI_PATTERN_LEN1_PATTERN_LEN7		 (0xffL<<0)
+#define BNX2_RPM_ACPI_PATTERN_LEN1_PATTERN_LEN6		 (0xffL<<8)
+#define BNX2_RPM_ACPI_PATTERN_LEN1_PATTERN_LEN5		 (0xffL<<16)
+#define BNX2_RPM_ACPI_PATTERN_LEN1_PATTERN_LEN4		 (0xffL<<24)
+
+#define BNX2_RPM_ACPI_PATTERN_CRC0			0x00001a18
+#define BNX2_RPM_ACPI_PATTERN_CRC0_PATTERN_CRC0		 (0xffffffffL<<0)
+
+#define BNX2_RPM_ACPI_PATTERN_CRC1			0x00001a1c
+#define BNX2_RPM_ACPI_PATTERN_CRC1_PATTERN_CRC1		 (0xffffffffL<<0)
+
+#define BNX2_RPM_ACPI_PATTERN_CRC2			0x00001a20
+#define BNX2_RPM_ACPI_PATTERN_CRC2_PATTERN_CRC2		 (0xffffffffL<<0)
+
+#define BNX2_RPM_ACPI_PATTERN_CRC3			0x00001a24
+#define BNX2_RPM_ACPI_PATTERN_CRC3_PATTERN_CRC3		 (0xffffffffL<<0)
+
+#define BNX2_RPM_ACPI_PATTERN_CRC4			0x00001a28
+#define BNX2_RPM_ACPI_PATTERN_CRC4_PATTERN_CRC4		 (0xffffffffL<<0)
+
+#define BNX2_RPM_ACPI_PATTERN_CRC5			0x00001a2c
+#define BNX2_RPM_ACPI_PATTERN_CRC5_PATTERN_CRC5		 (0xffffffffL<<0)
+
+#define BNX2_RPM_ACPI_PATTERN_CRC6			0x00001a30
+#define BNX2_RPM_ACPI_PATTERN_CRC6_PATTERN_CRC6		 (0xffffffffL<<0)
+
+#define BNX2_RPM_ACPI_PATTERN_CRC7			0x00001a34
+#define BNX2_RPM_ACPI_PATTERN_CRC7_PATTERN_CRC7		 (0xffffffffL<<0)
+
+
+/*
+ *  rlup_reg definition
+ *  offset: 0x2000
+ */
+#define BNX2_RLUP_RSS_CONFIG				0x0000201c
+#define BNX2_RLUP_RSS_CONFIG_IPV4_RSS_TYPE_XI		 (0x3L<<0)
+#define BNX2_RLUP_RSS_CONFIG_IPV4_RSS_TYPE_OFF_XI	 (0L<<0)
+#define BNX2_RLUP_RSS_CONFIG_IPV4_RSS_TYPE_ALL_XI	 (1L<<0)
+#define BNX2_RLUP_RSS_CONFIG_IPV4_RSS_TYPE_IP_ONLY_XI	 (2L<<0)
+#define BNX2_RLUP_RSS_CONFIG_IPV4_RSS_TYPE_RES_XI	 (3L<<0)
+#define BNX2_RLUP_RSS_CONFIG_IPV6_RSS_TYPE_XI		 (0x3L<<2)
+#define BNX2_RLUP_RSS_CONFIG_IPV6_RSS_TYPE_OFF_XI	 (0L<<2)
+#define BNX2_RLUP_RSS_CONFIG_IPV6_RSS_TYPE_ALL_XI	 (1L<<2)
+#define BNX2_RLUP_RSS_CONFIG_IPV6_RSS_TYPE_IP_ONLY_XI	 (2L<<2)
+#define BNX2_RLUP_RSS_CONFIG_IPV6_RSS_TYPE_RES_XI	 (3L<<2)
+
+#define BNX2_RLUP_RSS_COMMAND				0x00002048
+#define BNX2_RLUP_RSS_COMMAND_RSS_IND_TABLE_ADDR	 (0xfUL<<0)
+#define BNX2_RLUP_RSS_COMMAND_RSS_WRITE_MASK		 (0xffUL<<4)
+#define BNX2_RLUP_RSS_COMMAND_WRITE			 (1UL<<12)
+#define BNX2_RLUP_RSS_COMMAND_READ			 (1UL<<13)
+#define BNX2_RLUP_RSS_COMMAND_HASH_MASK			 (0x7UL<<14)
+
+#define BNX2_RLUP_RSS_DATA				0x0000204c
+
+
+/*
+ *  rbuf_reg definition
+ *  offset: 0x200000
+ */
+#define BNX2_RBUF_COMMAND				0x00200000
+#define BNX2_RBUF_COMMAND_ENABLED			 (1L<<0)
+#define BNX2_RBUF_COMMAND_FREE_INIT			 (1L<<1)
+#define BNX2_RBUF_COMMAND_RAM_INIT			 (1L<<2)
+#define BNX2_RBUF_COMMAND_PKT_OFFSET_OVFL		 (1L<<3)
+#define BNX2_RBUF_COMMAND_OVER_FREE			 (1L<<4)
+#define BNX2_RBUF_COMMAND_ALLOC_REQ			 (1L<<5)
+#define BNX2_RBUF_COMMAND_EN_PRI_CHNGE_TE		 (1L<<6)
+#define BNX2_RBUF_COMMAND_CU_ISOLATE_XI			 (1L<<5)
+#define BNX2_RBUF_COMMAND_EN_PRI_CHANGE_XI		 (1L<<6)
+#define BNX2_RBUF_COMMAND_GRC_ENDIAN_CONV_DIS_XI	 (1L<<7)
+
+#define BNX2_RBUF_STATUS1				0x00200004
+#define BNX2_RBUF_STATUS1_FREE_COUNT			 (0x3ffL<<0)
+
+#define BNX2_RBUF_STATUS2				0x00200008
+#define BNX2_RBUF_STATUS2_FREE_TAIL			 (0x1ffL<<0)
+#define BNX2_RBUF_STATUS2_FREE_HEAD			 (0x1ffL<<16)
+
+#define BNX2_RBUF_CONFIG				0x0020000c
+#define BNX2_RBUF_CONFIG_XOFF_TRIP			 (0x3ffL<<0)
+#define BNX2_RBUF_CONFIG_XOFF_TRIP_VAL(mtu)		 \
+	((((mtu) - 1500) * 31 / 1000) + 54)
+#define BNX2_RBUF_CONFIG_XON_TRIP			 (0x3ffL<<16)
+#define BNX2_RBUF_CONFIG_XON_TRIP_VAL(mtu)		 \
+	((((mtu) - 1500) * 39 / 1000) + 66)
+#define BNX2_RBUF_CONFIG_VAL(mtu)			 \
+	(BNX2_RBUF_CONFIG_XOFF_TRIP_VAL(mtu) |		 \
+	(BNX2_RBUF_CONFIG_XON_TRIP_VAL(mtu) << 16))
+
+#define BNX2_RBUF_FW_BUF_ALLOC				0x00200010
+#define BNX2_RBUF_FW_BUF_ALLOC_VALUE			 (0x1ffL<<7)
+#define BNX2_RBUF_FW_BUF_ALLOC_TYPE			 (1L<<16)
+#define BNX2_RBUF_FW_BUF_ALLOC_ALLOC_REQ		 (1L<<31)
+
+#define BNX2_RBUF_FW_BUF_FREE				0x00200014
+#define BNX2_RBUF_FW_BUF_FREE_COUNT			 (0x7fL<<0)
+#define BNX2_RBUF_FW_BUF_FREE_TAIL			 (0x1ffL<<7)
+#define BNX2_RBUF_FW_BUF_FREE_HEAD			 (0x1ffL<<16)
+#define BNX2_RBUF_FW_BUF_FREE_TYPE			 (1L<<25)
+#define BNX2_RBUF_FW_BUF_FREE_FREE_REQ			 (1L<<31)
+
+#define BNX2_RBUF_FW_BUF_SEL				0x00200018
+#define BNX2_RBUF_FW_BUF_SEL_COUNT			 (0x7fL<<0)
+#define BNX2_RBUF_FW_BUF_SEL_TAIL			 (0x1ffL<<7)
+#define BNX2_RBUF_FW_BUF_SEL_HEAD			 (0x1ffL<<16)
+#define BNX2_RBUF_FW_BUF_SEL_SEL_REQ			 (1L<<31)
+
+#define BNX2_RBUF_CONFIG2				0x0020001c
+#define BNX2_RBUF_CONFIG2_MAC_DROP_TRIP			 (0x3ffL<<0)
+#define BNX2_RBUF_CONFIG2_MAC_DROP_TRIP_VAL(mtu)	 \
+	((((mtu) - 1500) * 4 / 1000) + 5)
+#define BNX2_RBUF_CONFIG2_MAC_KEEP_TRIP			 (0x3ffL<<16)
+#define BNX2_RBUF_CONFIG2_MAC_KEEP_TRIP_VAL(mtu)	 \
+	((((mtu) - 1500) * 2 / 100) + 30)
+#define BNX2_RBUF_CONFIG2_VAL(mtu)			 \
+	(BNX2_RBUF_CONFIG2_MAC_DROP_TRIP_VAL(mtu) |	 \
+	(BNX2_RBUF_CONFIG2_MAC_KEEP_TRIP_VAL(mtu) << 16))
+
+#define BNX2_RBUF_CONFIG3				0x00200020
+#define BNX2_RBUF_CONFIG3_CU_DROP_TRIP			 (0x3ffL<<0)
+#define BNX2_RBUF_CONFIG3_CU_DROP_TRIP_VAL(mtu)		 \
+	((((mtu) - 1500) * 12 / 1000) + 18)
+#define BNX2_RBUF_CONFIG3_CU_KEEP_TRIP			 (0x3ffL<<16)
+#define BNX2_RBUF_CONFIG3_CU_KEEP_TRIP_VAL(mtu)		 \
+	((((mtu) - 1500) * 2 / 100) + 30)
+#define BNX2_RBUF_CONFIG3_VAL(mtu)			 \
+	(BNX2_RBUF_CONFIG3_CU_DROP_TRIP_VAL(mtu) |	 \
+	(BNX2_RBUF_CONFIG3_CU_KEEP_TRIP_VAL(mtu) << 16))
+
+#define BNX2_RBUF_PKT_DATA				0x00208000
+#define BNX2_RBUF_CLIST_DATA				0x00210000
+#define BNX2_RBUF_BUF_DATA				0x00220000
+
+
+/*
+ *  rv2p_reg definition
+ *  offset: 0x2800
+ */
+#define BNX2_RV2P_COMMAND				0x00002800
+#define BNX2_RV2P_COMMAND_ENABLED			 (1L<<0)
+#define BNX2_RV2P_COMMAND_PROC1_INTRPT			 (1L<<1)
+#define BNX2_RV2P_COMMAND_PROC2_INTRPT			 (1L<<2)
+#define BNX2_RV2P_COMMAND_ABORT0			 (1L<<4)
+#define BNX2_RV2P_COMMAND_ABORT1			 (1L<<5)
+#define BNX2_RV2P_COMMAND_ABORT2			 (1L<<6)
+#define BNX2_RV2P_COMMAND_ABORT3			 (1L<<7)
+#define BNX2_RV2P_COMMAND_ABORT4			 (1L<<8)
+#define BNX2_RV2P_COMMAND_ABORT5			 (1L<<9)
+#define BNX2_RV2P_COMMAND_PROC1_RESET			 (1L<<16)
+#define BNX2_RV2P_COMMAND_PROC2_RESET			 (1L<<17)
+#define BNX2_RV2P_COMMAND_CTXIF_RESET			 (1L<<18)
+
+#define BNX2_RV2P_STATUS				0x00002804
+#define BNX2_RV2P_STATUS_ALWAYS_0			 (1L<<0)
+#define BNX2_RV2P_STATUS_RV2P_GEN_STAT0_CNT		 (1L<<8)
+#define BNX2_RV2P_STATUS_RV2P_GEN_STAT1_CNT		 (1L<<9)
+#define BNX2_RV2P_STATUS_RV2P_GEN_STAT2_CNT		 (1L<<10)
+#define BNX2_RV2P_STATUS_RV2P_GEN_STAT3_CNT		 (1L<<11)
+#define BNX2_RV2P_STATUS_RV2P_GEN_STAT4_CNT		 (1L<<12)
+#define BNX2_RV2P_STATUS_RV2P_GEN_STAT5_CNT		 (1L<<13)
+
+#define BNX2_RV2P_CONFIG				0x00002808
+#define BNX2_RV2P_CONFIG_STALL_PROC1			 (1L<<0)
+#define BNX2_RV2P_CONFIG_STALL_PROC2			 (1L<<1)
+#define BNX2_RV2P_CONFIG_PROC1_STALL_ON_ABORT0		 (1L<<8)
+#define BNX2_RV2P_CONFIG_PROC1_STALL_ON_ABORT1		 (1L<<9)
+#define BNX2_RV2P_CONFIG_PROC1_STALL_ON_ABORT2		 (1L<<10)
+#define BNX2_RV2P_CONFIG_PROC1_STALL_ON_ABORT3		 (1L<<11)
+#define BNX2_RV2P_CONFIG_PROC1_STALL_ON_ABORT4		 (1L<<12)
+#define BNX2_RV2P_CONFIG_PROC1_STALL_ON_ABORT5		 (1L<<13)
+#define BNX2_RV2P_CONFIG_PROC2_STALL_ON_ABORT0		 (1L<<16)
+#define BNX2_RV2P_CONFIG_PROC2_STALL_ON_ABORT1		 (1L<<17)
+#define BNX2_RV2P_CONFIG_PROC2_STALL_ON_ABORT2		 (1L<<18)
+#define BNX2_RV2P_CONFIG_PROC2_STALL_ON_ABORT3		 (1L<<19)
+#define BNX2_RV2P_CONFIG_PROC2_STALL_ON_ABORT4		 (1L<<20)
+#define BNX2_RV2P_CONFIG_PROC2_STALL_ON_ABORT5		 (1L<<21)
+#define BNX2_RV2P_CONFIG_PAGE_SIZE			 (0xfL<<24)
+#define BNX2_RV2P_CONFIG_PAGE_SIZE_256			 (0L<<24)
+#define BNX2_RV2P_CONFIG_PAGE_SIZE_512			 (1L<<24)
+#define BNX2_RV2P_CONFIG_PAGE_SIZE_1K			 (2L<<24)
+#define BNX2_RV2P_CONFIG_PAGE_SIZE_2K			 (3L<<24)
+#define BNX2_RV2P_CONFIG_PAGE_SIZE_4K			 (4L<<24)
+#define BNX2_RV2P_CONFIG_PAGE_SIZE_8K			 (5L<<24)
+#define BNX2_RV2P_CONFIG_PAGE_SIZE_16K			 (6L<<24)
+#define BNX2_RV2P_CONFIG_PAGE_SIZE_32K			 (7L<<24)
+#define BNX2_RV2P_CONFIG_PAGE_SIZE_64K			 (8L<<24)
+#define BNX2_RV2P_CONFIG_PAGE_SIZE_128K			 (9L<<24)
+#define BNX2_RV2P_CONFIG_PAGE_SIZE_256K			 (10L<<24)
+#define BNX2_RV2P_CONFIG_PAGE_SIZE_512K			 (11L<<24)
+#define BNX2_RV2P_CONFIG_PAGE_SIZE_1M			 (12L<<24)
+
+#define BNX2_RV2P_GEN_BFR_ADDR_0			0x00002810
+#define BNX2_RV2P_GEN_BFR_ADDR_0_VALUE			 (0xffffL<<16)
+
+#define BNX2_RV2P_GEN_BFR_ADDR_1			0x00002814
+#define BNX2_RV2P_GEN_BFR_ADDR_1_VALUE			 (0xffffL<<16)
+
+#define BNX2_RV2P_GEN_BFR_ADDR_2			0x00002818
+#define BNX2_RV2P_GEN_BFR_ADDR_2_VALUE			 (0xffffL<<16)
+
+#define BNX2_RV2P_GEN_BFR_ADDR_3			0x0000281c
+#define BNX2_RV2P_GEN_BFR_ADDR_3_VALUE			 (0xffffL<<16)
+
+#define BNX2_RV2P_INSTR_HIGH				0x00002830
+#define BNX2_RV2P_INSTR_HIGH_HIGH			 (0x1fL<<0)
+
+#define BNX2_RV2P_INSTR_LOW				0x00002834
+#define BNX2_RV2P_INSTR_LOW_LOW				 (0xffffffffL<<0)
+
+#define BNX2_RV2P_PROC1_ADDR_CMD			0x00002838
+#define BNX2_RV2P_PROC1_ADDR_CMD_ADD			 (0x3ffL<<0)
+#define BNX2_RV2P_PROC1_ADDR_CMD_RDWR			 (1L<<31)
+
+#define BNX2_RV2P_PROC2_ADDR_CMD			0x0000283c
+#define BNX2_RV2P_PROC2_ADDR_CMD_ADD			 (0x3ffL<<0)
+#define BNX2_RV2P_PROC2_ADDR_CMD_RDWR			 (1L<<31)
+
+#define BNX2_RV2P_PROC1_GRC_DEBUG			0x00002840
+#define BNX2_RV2P_PROC2_GRC_DEBUG			0x00002844
+#define BNX2_RV2P_GRC_PROC_DEBUG			0x00002848
+#define BNX2_RV2P_DEBUG_VECT_PEEK			0x0000284c
+#define BNX2_RV2P_DEBUG_VECT_PEEK_1_VALUE		 (0x7ffL<<0)
+#define BNX2_RV2P_DEBUG_VECT_PEEK_1_PEEK_EN		 (1L<<11)
+#define BNX2_RV2P_DEBUG_VECT_PEEK_1_SEL			 (0xfL<<12)
+#define BNX2_RV2P_DEBUG_VECT_PEEK_2_VALUE		 (0x7ffL<<16)
+#define BNX2_RV2P_DEBUG_VECT_PEEK_2_PEEK_EN		 (1L<<27)
+#define BNX2_RV2P_DEBUG_VECT_PEEK_2_SEL			 (0xfL<<28)
+
+#define BNX2_RV2P_MPFE_PFE_CTL				0x00002afc
+#define BNX2_RV2P_MPFE_PFE_CTL_INC_USAGE_CNT		 (1L<<0)
+#define BNX2_RV2P_MPFE_PFE_CTL_PFE_SIZE			 (0xfL<<4)
+#define BNX2_RV2P_MPFE_PFE_CTL_PFE_SIZE_0		 (0L<<4)
+#define BNX2_RV2P_MPFE_PFE_CTL_PFE_SIZE_1		 (1L<<4)
+#define BNX2_RV2P_MPFE_PFE_CTL_PFE_SIZE_2		 (2L<<4)
+#define BNX2_RV2P_MPFE_PFE_CTL_PFE_SIZE_3		 (3L<<4)
+#define BNX2_RV2P_MPFE_PFE_CTL_PFE_SIZE_4		 (4L<<4)
+#define BNX2_RV2P_MPFE_PFE_CTL_PFE_SIZE_5		 (5L<<4)
+#define BNX2_RV2P_MPFE_PFE_CTL_PFE_SIZE_6		 (6L<<4)
+#define BNX2_RV2P_MPFE_PFE_CTL_PFE_SIZE_7		 (7L<<4)
+#define BNX2_RV2P_MPFE_PFE_CTL_PFE_SIZE_8		 (8L<<4)
+#define BNX2_RV2P_MPFE_PFE_CTL_PFE_SIZE_9		 (9L<<4)
+#define BNX2_RV2P_MPFE_PFE_CTL_PFE_SIZE_10		 (10L<<4)
+#define BNX2_RV2P_MPFE_PFE_CTL_PFE_SIZE_11		 (11L<<4)
+#define BNX2_RV2P_MPFE_PFE_CTL_PFE_SIZE_12		 (12L<<4)
+#define BNX2_RV2P_MPFE_PFE_CTL_PFE_SIZE_13		 (13L<<4)
+#define BNX2_RV2P_MPFE_PFE_CTL_PFE_SIZE_14		 (14L<<4)
+#define BNX2_RV2P_MPFE_PFE_CTL_PFE_SIZE_15		 (15L<<4)
+#define BNX2_RV2P_MPFE_PFE_CTL_PFE_COUNT		 (0xfL<<12)
+#define BNX2_RV2P_MPFE_PFE_CTL_OFFSET			 (0x1ffL<<16)
+
+#define BNX2_RV2P_RV2PPQ				0x00002b40
+#define BNX2_RV2P_PFTQ_CMD				0x00002b78
+#define BNX2_RV2P_PFTQ_CMD_OFFSET			 (0x3ffL<<0)
+#define BNX2_RV2P_PFTQ_CMD_WR_TOP			 (1L<<10)
+#define BNX2_RV2P_PFTQ_CMD_WR_TOP_0			 (0L<<10)
+#define BNX2_RV2P_PFTQ_CMD_WR_TOP_1			 (1L<<10)
+#define BNX2_RV2P_PFTQ_CMD_SFT_RESET			 (1L<<25)
+#define BNX2_RV2P_PFTQ_CMD_RD_DATA			 (1L<<26)
+#define BNX2_RV2P_PFTQ_CMD_ADD_INTERVEN			 (1L<<27)
+#define BNX2_RV2P_PFTQ_CMD_ADD_DATA			 (1L<<28)
+#define BNX2_RV2P_PFTQ_CMD_INTERVENE_CLR		 (1L<<29)
+#define BNX2_RV2P_PFTQ_CMD_POP				 (1L<<30)
+#define BNX2_RV2P_PFTQ_CMD_BUSY				 (1L<<31)
+
+#define BNX2_RV2P_PFTQ_CTL				0x00002b7c
+#define BNX2_RV2P_PFTQ_CTL_INTERVENE			 (1L<<0)
+#define BNX2_RV2P_PFTQ_CTL_OVERFLOW			 (1L<<1)
+#define BNX2_RV2P_PFTQ_CTL_FORCE_INTERVENE		 (1L<<2)
+#define BNX2_RV2P_PFTQ_CTL_MAX_DEPTH			 (0x3ffL<<12)
+#define BNX2_RV2P_PFTQ_CTL_CUR_DEPTH			 (0x3ffL<<22)
+
+#define BNX2_RV2P_RV2PTQ				0x00002b80
+#define BNX2_RV2P_TFTQ_CMD				0x00002bb8
+#define BNX2_RV2P_TFTQ_CMD_OFFSET			 (0x3ffL<<0)
+#define BNX2_RV2P_TFTQ_CMD_WR_TOP			 (1L<<10)
+#define BNX2_RV2P_TFTQ_CMD_WR_TOP_0			 (0L<<10)
+#define BNX2_RV2P_TFTQ_CMD_WR_TOP_1			 (1L<<10)
+#define BNX2_RV2P_TFTQ_CMD_SFT_RESET			 (1L<<25)
+#define BNX2_RV2P_TFTQ_CMD_RD_DATA			 (1L<<26)
+#define BNX2_RV2P_TFTQ_CMD_ADD_INTERVEN			 (1L<<27)
+#define BNX2_RV2P_TFTQ_CMD_ADD_DATA			 (1L<<28)
+#define BNX2_RV2P_TFTQ_CMD_INTERVENE_CLR		 (1L<<29)
+#define BNX2_RV2P_TFTQ_CMD_POP				 (1L<<30)
+#define BNX2_RV2P_TFTQ_CMD_BUSY				 (1L<<31)
+
+#define BNX2_RV2P_TFTQ_CTL				0x00002bbc
+#define BNX2_RV2P_TFTQ_CTL_INTERVENE			 (1L<<0)
+#define BNX2_RV2P_TFTQ_CTL_OVERFLOW			 (1L<<1)
+#define BNX2_RV2P_TFTQ_CTL_FORCE_INTERVENE		 (1L<<2)
+#define BNX2_RV2P_TFTQ_CTL_MAX_DEPTH			 (0x3ffL<<12)
+#define BNX2_RV2P_TFTQ_CTL_CUR_DEPTH			 (0x3ffL<<22)
+
+#define BNX2_RV2P_RV2PMQ				0x00002bc0
+#define BNX2_RV2P_MFTQ_CMD				0x00002bf8
+#define BNX2_RV2P_MFTQ_CMD_OFFSET			 (0x3ffL<<0)
+#define BNX2_RV2P_MFTQ_CMD_WR_TOP			 (1L<<10)
+#define BNX2_RV2P_MFTQ_CMD_WR_TOP_0			 (0L<<10)
+#define BNX2_RV2P_MFTQ_CMD_WR_TOP_1			 (1L<<10)
+#define BNX2_RV2P_MFTQ_CMD_SFT_RESET			 (1L<<25)
+#define BNX2_RV2P_MFTQ_CMD_RD_DATA			 (1L<<26)
+#define BNX2_RV2P_MFTQ_CMD_ADD_INTERVEN			 (1L<<27)
+#define BNX2_RV2P_MFTQ_CMD_ADD_DATA			 (1L<<28)
+#define BNX2_RV2P_MFTQ_CMD_INTERVENE_CLR		 (1L<<29)
+#define BNX2_RV2P_MFTQ_CMD_POP				 (1L<<30)
+#define BNX2_RV2P_MFTQ_CMD_BUSY				 (1L<<31)
+
+#define BNX2_RV2P_MFTQ_CTL				0x00002bfc
+#define BNX2_RV2P_MFTQ_CTL_INTERVENE			 (1L<<0)
+#define BNX2_RV2P_MFTQ_CTL_OVERFLOW			 (1L<<1)
+#define BNX2_RV2P_MFTQ_CTL_FORCE_INTERVENE		 (1L<<2)
+#define BNX2_RV2P_MFTQ_CTL_MAX_DEPTH			 (0x3ffL<<12)
+#define BNX2_RV2P_MFTQ_CTL_CUR_DEPTH			 (0x3ffL<<22)
+
+
+
+/*
+ *  mq_reg definition
+ *  offset: 0x3c00
+ */
+#define BNX2_MQ_COMMAND					0x00003c00
+#define BNX2_MQ_COMMAND_ENABLED				 (1L<<0)
+#define BNX2_MQ_COMMAND_INIT				 (1L<<1)
+#define BNX2_MQ_COMMAND_OVERFLOW			 (1L<<4)
+#define BNX2_MQ_COMMAND_WR_ERROR			 (1L<<5)
+#define BNX2_MQ_COMMAND_RD_ERROR			 (1L<<6)
+#define BNX2_MQ_COMMAND_IDB_CFG_ERROR			 (1L<<7)
+#define BNX2_MQ_COMMAND_IDB_OVERFLOW			 (1L<<10)
+#define BNX2_MQ_COMMAND_NO_BIN_ERROR			 (1L<<11)
+#define BNX2_MQ_COMMAND_NO_MAP_ERROR			 (1L<<12)
+
+#define BNX2_MQ_STATUS					0x00003c04
+#define BNX2_MQ_STATUS_CTX_ACCESS_STAT			 (1L<<16)
+#define BNX2_MQ_STATUS_CTX_ACCESS64_STAT		 (1L<<17)
+#define BNX2_MQ_STATUS_PCI_STALL_STAT			 (1L<<18)
+#define BNX2_MQ_STATUS_IDB_OFLOW_STAT			 (1L<<19)
+
+#define BNX2_MQ_CONFIG					0x00003c08
+#define BNX2_MQ_CONFIG_TX_HIGH_PRI			 (1L<<0)
+#define BNX2_MQ_CONFIG_HALT_DIS				 (1L<<1)
+#define BNX2_MQ_CONFIG_BIN_MQ_MODE			 (1L<<2)
+#define BNX2_MQ_CONFIG_DIS_IDB_DROP			 (1L<<3)
+#define BNX2_MQ_CONFIG_KNL_BYP_BLK_SIZE			 (0x7L<<4)
+#define BNX2_MQ_CONFIG_KNL_BYP_BLK_SIZE_256		 (0L<<4)
+#define BNX2_MQ_CONFIG_KNL_BYP_BLK_SIZE_512		 (1L<<4)
+#define BNX2_MQ_CONFIG_KNL_BYP_BLK_SIZE_1K		 (2L<<4)
+#define BNX2_MQ_CONFIG_KNL_BYP_BLK_SIZE_2K		 (3L<<4)
+#define BNX2_MQ_CONFIG_KNL_BYP_BLK_SIZE_4K		 (4L<<4)
+#define BNX2_MQ_CONFIG_MAX_DEPTH			 (0x7fL<<8)
+#define BNX2_MQ_CONFIG_CUR_DEPTH			 (0x7fL<<20)
+
+#define BNX2_MQ_ENQUEUE1				0x00003c0c
+#define BNX2_MQ_ENQUEUE1_OFFSET				 (0x3fL<<2)
+#define BNX2_MQ_ENQUEUE1_CID				 (0x3fffL<<8)
+#define BNX2_MQ_ENQUEUE1_BYTE_MASK			 (0xfL<<24)
+#define BNX2_MQ_ENQUEUE1_KNL_MODE			 (1L<<28)
+
+#define BNX2_MQ_ENQUEUE2				0x00003c10
+#define BNX2_MQ_BAD_WR_ADDR				0x00003c14
+#define BNX2_MQ_BAD_RD_ADDR				0x00003c18
+#define BNX2_MQ_KNL_BYP_WIND_START			0x00003c1c
+#define BNX2_MQ_KNL_BYP_WIND_START_VALUE		 (0xfffffL<<12)
+
+#define BNX2_MQ_KNL_WIND_END				0x00003c20
+#define BNX2_MQ_KNL_WIND_END_VALUE			 (0xffffffL<<8)
+
+#define BNX2_MQ_KNL_WRITE_MASK1				0x00003c24
+#define BNX2_MQ_KNL_TX_MASK1				0x00003c28
+#define BNX2_MQ_KNL_CMD_MASK1				0x00003c2c
+#define BNX2_MQ_KNL_COND_ENQUEUE_MASK1			0x00003c30
+#define BNX2_MQ_KNL_RX_V2P_MASK1			0x00003c34
+#define BNX2_MQ_KNL_WRITE_MASK2				0x00003c38
+#define BNX2_MQ_KNL_TX_MASK2				0x00003c3c
+#define BNX2_MQ_KNL_CMD_MASK2				0x00003c40
+#define BNX2_MQ_KNL_COND_ENQUEUE_MASK2			0x00003c44
+#define BNX2_MQ_KNL_RX_V2P_MASK2			0x00003c48
+#define BNX2_MQ_KNL_BYP_WRITE_MASK1			0x00003c4c
+#define BNX2_MQ_KNL_BYP_TX_MASK1			0x00003c50
+#define BNX2_MQ_KNL_BYP_CMD_MASK1			0x00003c54
+#define BNX2_MQ_KNL_BYP_COND_ENQUEUE_MASK1		0x00003c58
+#define BNX2_MQ_KNL_BYP_RX_V2P_MASK1			0x00003c5c
+#define BNX2_MQ_KNL_BYP_WRITE_MASK2			0x00003c60
+#define BNX2_MQ_KNL_BYP_TX_MASK2			0x00003c64
+#define BNX2_MQ_KNL_BYP_CMD_MASK2			0x00003c68
+#define BNX2_MQ_KNL_BYP_COND_ENQUEUE_MASK2		0x00003c6c
+#define BNX2_MQ_KNL_BYP_RX_V2P_MASK2			0x00003c70
+#define BNX2_MQ_MEM_WR_ADDR				0x00003c74
+#define BNX2_MQ_MEM_WR_ADDR_VALUE			 (0x3fL<<0)
+
+#define BNX2_MQ_MEM_WR_DATA0				0x00003c78
+#define BNX2_MQ_MEM_WR_DATA0_VALUE			 (0xffffffffL<<0)
+
+#define BNX2_MQ_MEM_WR_DATA1				0x00003c7c
+#define BNX2_MQ_MEM_WR_DATA1_VALUE			 (0xffffffffL<<0)
+
+#define BNX2_MQ_MEM_WR_DATA2				0x00003c80
+#define BNX2_MQ_MEM_WR_DATA2_VALUE			 (0x3fffffffL<<0)
+#define BNX2_MQ_MEM_WR_DATA2_VALUE_XI			 (0x7fffffffL<<0)
+
+#define BNX2_MQ_MEM_RD_ADDR				0x00003c84
+#define BNX2_MQ_MEM_RD_ADDR_VALUE			 (0x3fL<<0)
+
+#define BNX2_MQ_MEM_RD_DATA0				0x00003c88
+#define BNX2_MQ_MEM_RD_DATA0_VALUE			 (0xffffffffL<<0)
+
+#define BNX2_MQ_MEM_RD_DATA1				0x00003c8c
+#define BNX2_MQ_MEM_RD_DATA1_VALUE			 (0xffffffffL<<0)
+
+#define BNX2_MQ_MEM_RD_DATA2				0x00003c90
+#define BNX2_MQ_MEM_RD_DATA2_VALUE			 (0x3fffffffL<<0)
+#define BNX2_MQ_MEM_RD_DATA2_VALUE_XI			 (0x7fffffffL<<0)
+
+#define BNX2_MQ_CONFIG2					0x00003d00
+#define BNX2_MQ_CONFIG2_CONT_SZ				 (0x7L<<4)
+#define BNX2_MQ_CONFIG2_FIRST_L4L5			 (0x1fL<<8)
+
+#define BNX2_MQ_MAP_L2_3				0x00003d2c
+#define BNX2_MQ_MAP_L2_3_MQ_OFFSET			 (0xffL<<0)
+#define BNX2_MQ_MAP_L2_3_SZ				 (0x3L<<8)
+#define BNX2_MQ_MAP_L2_3_CTX_OFFSET			 (0x2ffL<<10)
+#define BNX2_MQ_MAP_L2_3_BIN_OFFSET			 (0x7L<<23)
+#define BNX2_MQ_MAP_L2_3_ARM				 (0x3L<<26)
+#define BNX2_MQ_MAP_L2_3_ENA				 (0x1L<<31)
+#define BNX2_MQ_MAP_L2_3_DEFAULT			 0x82004646
+
+#define BNX2_MQ_MAP_L2_5				0x00003d34
+#define BNX2_MQ_MAP_L2_5_ARM				 (0x3L<<26)
+
+
+/*
+ *  tsch_reg definition
+ *  offset: 0x4c00
+ */
+#define BNX2_TSCH_TSS_CFG				0x00004c1c
+#define BNX2_TSCH_TSS_CFG_TSS_START_CID			 (0x7ffL<<8)
+#define BNX2_TSCH_TSS_CFG_NUM_OF_TSS_CON		 (0xfL<<24)
+
+
+
+/*
+ *  tbdr_reg definition
+ *  offset: 0x5000
+ */
+#define BNX2_TBDR_COMMAND				0x00005000
+#define BNX2_TBDR_COMMAND_ENABLE			 (1L<<0)
+#define BNX2_TBDR_COMMAND_SOFT_RST			 (1L<<1)
+#define BNX2_TBDR_COMMAND_MSTR_ABORT			 (1L<<4)
+
+#define BNX2_TBDR_STATUS				0x00005004
+#define BNX2_TBDR_STATUS_DMA_WAIT			 (1L<<0)
+#define BNX2_TBDR_STATUS_FTQ_WAIT			 (1L<<1)
+#define BNX2_TBDR_STATUS_FIFO_OVERFLOW			 (1L<<2)
+#define BNX2_TBDR_STATUS_FIFO_UNDERFLOW			 (1L<<3)
+#define BNX2_TBDR_STATUS_SEARCHMISS_ERROR		 (1L<<4)
+#define BNX2_TBDR_STATUS_FTQ_ENTRY_CNT			 (1L<<5)
+#define BNX2_TBDR_STATUS_BURST_CNT			 (1L<<6)
+
+#define BNX2_TBDR_CONFIG				0x00005008
+#define BNX2_TBDR_CONFIG_MAX_BDS			 (0xffL<<0)
+#define BNX2_TBDR_CONFIG_SWAP_MODE			 (1L<<8)
+#define BNX2_TBDR_CONFIG_PRIORITY			 (1L<<9)
+#define BNX2_TBDR_CONFIG_CACHE_NEXT_PAGE_PTRS		 (1L<<10)
+#define BNX2_TBDR_CONFIG_PAGE_SIZE			 (0xfL<<24)
+#define BNX2_TBDR_CONFIG_PAGE_SIZE_256			 (0L<<24)
+#define BNX2_TBDR_CONFIG_PAGE_SIZE_512			 (1L<<24)
+#define BNX2_TBDR_CONFIG_PAGE_SIZE_1K			 (2L<<24)
+#define BNX2_TBDR_CONFIG_PAGE_SIZE_2K			 (3L<<24)
+#define BNX2_TBDR_CONFIG_PAGE_SIZE_4K			 (4L<<24)
+#define BNX2_TBDR_CONFIG_PAGE_SIZE_8K			 (5L<<24)
+#define BNX2_TBDR_CONFIG_PAGE_SIZE_16K			 (6L<<24)
+#define BNX2_TBDR_CONFIG_PAGE_SIZE_32K			 (7L<<24)
+#define BNX2_TBDR_CONFIG_PAGE_SIZE_64K			 (8L<<24)
+#define BNX2_TBDR_CONFIG_PAGE_SIZE_128K			 (9L<<24)
+#define BNX2_TBDR_CONFIG_PAGE_SIZE_256K			 (10L<<24)
+#define BNX2_TBDR_CONFIG_PAGE_SIZE_512K			 (11L<<24)
+#define BNX2_TBDR_CONFIG_PAGE_SIZE_1M			 (12L<<24)
+
+#define BNX2_TBDR_DEBUG_VECT_PEEK			0x0000500c
+#define BNX2_TBDR_DEBUG_VECT_PEEK_1_VALUE		 (0x7ffL<<0)
+#define BNX2_TBDR_DEBUG_VECT_PEEK_1_PEEK_EN		 (1L<<11)
+#define BNX2_TBDR_DEBUG_VECT_PEEK_1_SEL			 (0xfL<<12)
+#define BNX2_TBDR_DEBUG_VECT_PEEK_2_VALUE		 (0x7ffL<<16)
+#define BNX2_TBDR_DEBUG_VECT_PEEK_2_PEEK_EN		 (1L<<27)
+#define BNX2_TBDR_DEBUG_VECT_PEEK_2_SEL			 (0xfL<<28)
+
+#define BNX2_TBDR_CKSUM_ERROR_STATUS			0x00005010
+#define BNX2_TBDR_CKSUM_ERROR_STATUS_CALCULATED		 (0xffffL<<0)
+#define BNX2_TBDR_CKSUM_ERROR_STATUS_EXPECTED		 (0xffffL<<16)
+
+#define BNX2_TBDR_TBDRQ					0x000053c0
+#define BNX2_TBDR_FTQ_CMD				0x000053f8
+#define BNX2_TBDR_FTQ_CMD_OFFSET			 (0x3ffL<<0)
+#define BNX2_TBDR_FTQ_CMD_WR_TOP			 (1L<<10)
+#define BNX2_TBDR_FTQ_CMD_WR_TOP_0			 (0L<<10)
+#define BNX2_TBDR_FTQ_CMD_WR_TOP_1			 (1L<<10)
+#define BNX2_TBDR_FTQ_CMD_SFT_RESET			 (1L<<25)
+#define BNX2_TBDR_FTQ_CMD_RD_DATA			 (1L<<26)
+#define BNX2_TBDR_FTQ_CMD_ADD_INTERVEN			 (1L<<27)
+#define BNX2_TBDR_FTQ_CMD_ADD_DATA			 (1L<<28)
+#define BNX2_TBDR_FTQ_CMD_INTERVENE_CLR			 (1L<<29)
+#define BNX2_TBDR_FTQ_CMD_POP				 (1L<<30)
+#define BNX2_TBDR_FTQ_CMD_BUSY				 (1L<<31)
+
+#define BNX2_TBDR_FTQ_CTL				0x000053fc
+#define BNX2_TBDR_FTQ_CTL_INTERVENE			 (1L<<0)
+#define BNX2_TBDR_FTQ_CTL_OVERFLOW			 (1L<<1)
+#define BNX2_TBDR_FTQ_CTL_FORCE_INTERVENE		 (1L<<2)
+#define BNX2_TBDR_FTQ_CTL_MAX_DEPTH			 (0x3ffL<<12)
+#define BNX2_TBDR_FTQ_CTL_CUR_DEPTH			 (0x3ffL<<22)
+
+
+
+/*
+ *  tdma_reg definition
+ *  offset: 0x5c00
+ */
+#define BNX2_TDMA_COMMAND				0x00005c00
+#define BNX2_TDMA_COMMAND_ENABLED			 (1L<<0)
+#define BNX2_TDMA_COMMAND_MASTER_ABORT			 (1L<<4)
+#define BNX2_TDMA_COMMAND_CS16_ERR			 (1L<<5)
+#define BNX2_TDMA_COMMAND_BAD_L2_LENGTH_ABORT		 (1L<<7)
+#define BNX2_TDMA_COMMAND_MASK_CS1			 (1L<<20)
+#define BNX2_TDMA_COMMAND_MASK_CS2			 (1L<<21)
+#define BNX2_TDMA_COMMAND_MASK_CS3			 (1L<<22)
+#define BNX2_TDMA_COMMAND_MASK_CS4			 (1L<<23)
+#define BNX2_TDMA_COMMAND_FORCE_ILOCK_CKERR		 (1L<<24)
+#define BNX2_TDMA_COMMAND_OFIFO_CLR			 (1L<<30)
+#define BNX2_TDMA_COMMAND_IFIFO_CLR			 (1L<<31)
+
+#define BNX2_TDMA_STATUS				0x00005c04
+#define BNX2_TDMA_STATUS_DMA_WAIT			 (1L<<0)
+#define BNX2_TDMA_STATUS_PAYLOAD_WAIT			 (1L<<1)
+#define BNX2_TDMA_STATUS_PATCH_FTQ_WAIT			 (1L<<2)
+#define BNX2_TDMA_STATUS_LOCK_WAIT			 (1L<<3)
+#define BNX2_TDMA_STATUS_FTQ_ENTRY_CNT			 (1L<<16)
+#define BNX2_TDMA_STATUS_BURST_CNT			 (1L<<17)
+#define BNX2_TDMA_STATUS_MAX_IFIFO_DEPTH		 (0x3fL<<20)
+#define BNX2_TDMA_STATUS_OFIFO_OVERFLOW			 (1L<<30)
+#define BNX2_TDMA_STATUS_IFIFO_OVERFLOW			 (1L<<31)
+
+#define BNX2_TDMA_CONFIG				0x00005c08
+#define BNX2_TDMA_CONFIG_ONE_DMA			 (1L<<0)
+#define BNX2_TDMA_CONFIG_ONE_RECORD			 (1L<<1)
+#define BNX2_TDMA_CONFIG_NUM_DMA_CHAN			 (0x3L<<2)
+#define BNX2_TDMA_CONFIG_NUM_DMA_CHAN_0			 (0L<<2)
+#define BNX2_TDMA_CONFIG_NUM_DMA_CHAN_1			 (1L<<2)
+#define BNX2_TDMA_CONFIG_NUM_DMA_CHAN_2			 (2L<<2)
+#define BNX2_TDMA_CONFIG_NUM_DMA_CHAN_3			 (3L<<2)
+#define BNX2_TDMA_CONFIG_LIMIT_SZ			 (0xfL<<4)
+#define BNX2_TDMA_CONFIG_LIMIT_SZ_64			 (0L<<4)
+#define BNX2_TDMA_CONFIG_LIMIT_SZ_128			 (0x4L<<4)
+#define BNX2_TDMA_CONFIG_LIMIT_SZ_256			 (0x6L<<4)
+#define BNX2_TDMA_CONFIG_LIMIT_SZ_512			 (0x8L<<4)
+#define BNX2_TDMA_CONFIG_LINE_SZ			 (0xfL<<8)
+#define BNX2_TDMA_CONFIG_LINE_SZ_64			 (0L<<8)
+#define BNX2_TDMA_CONFIG_LINE_SZ_128			 (4L<<8)
+#define BNX2_TDMA_CONFIG_LINE_SZ_256			 (6L<<8)
+#define BNX2_TDMA_CONFIG_LINE_SZ_512			 (8L<<8)
+#define BNX2_TDMA_CONFIG_ALIGN_ENA			 (1L<<15)
+#define BNX2_TDMA_CONFIG_CHK_L2_BD			 (1L<<16)
+#define BNX2_TDMA_CONFIG_CMPL_ENTRY			 (1L<<17)
+#define BNX2_TDMA_CONFIG_OFIFO_CMP			 (1L<<19)
+#define BNX2_TDMA_CONFIG_OFIFO_CMP_3			 (0L<<19)
+#define BNX2_TDMA_CONFIG_OFIFO_CMP_2			 (1L<<19)
+#define BNX2_TDMA_CONFIG_FIFO_CMP			 (0xfL<<20)
+#define BNX2_TDMA_CONFIG_IFIFO_DEPTH_XI			 (0x7L<<20)
+#define BNX2_TDMA_CONFIG_IFIFO_DEPTH_0_XI		 (0L<<20)
+#define BNX2_TDMA_CONFIG_IFIFO_DEPTH_4_XI		 (1L<<20)
+#define BNX2_TDMA_CONFIG_IFIFO_DEPTH_8_XI		 (2L<<20)
+#define BNX2_TDMA_CONFIG_IFIFO_DEPTH_16_XI		 (3L<<20)
+#define BNX2_TDMA_CONFIG_IFIFO_DEPTH_32_XI		 (4L<<20)
+#define BNX2_TDMA_CONFIG_IFIFO_DEPTH_64_XI		 (5L<<20)
+#define BNX2_TDMA_CONFIG_FIFO_CMP_EN_XI			 (1L<<23)
+#define BNX2_TDMA_CONFIG_BYTES_OST_XI			 (0x7L<<24)
+#define BNX2_TDMA_CONFIG_BYTES_OST_512_XI		 (0L<<24)
+#define BNX2_TDMA_CONFIG_BYTES_OST_1024_XI		 (1L<<24)
+#define BNX2_TDMA_CONFIG_BYTES_OST_2048_XI		 (2L<<24)
+#define BNX2_TDMA_CONFIG_BYTES_OST_4096_XI		 (3L<<24)
+#define BNX2_TDMA_CONFIG_BYTES_OST_8192_XI		 (4L<<24)
+#define BNX2_TDMA_CONFIG_BYTES_OST_16384_XI		 (5L<<24)
+#define BNX2_TDMA_CONFIG_HC_BYPASS_XI			 (1L<<27)
+#define BNX2_TDMA_CONFIG_LCL_MRRS_XI			 (0x7L<<28)
+#define BNX2_TDMA_CONFIG_LCL_MRRS_128_XI		 (0L<<28)
+#define BNX2_TDMA_CONFIG_LCL_MRRS_256_XI		 (1L<<28)
+#define BNX2_TDMA_CONFIG_LCL_MRRS_512_XI		 (2L<<28)
+#define BNX2_TDMA_CONFIG_LCL_MRRS_1024_XI		 (3L<<28)
+#define BNX2_TDMA_CONFIG_LCL_MRRS_2048_XI		 (4L<<28)
+#define BNX2_TDMA_CONFIG_LCL_MRRS_4096_XI		 (5L<<28)
+#define BNX2_TDMA_CONFIG_LCL_MRRS_EN_XI			 (1L<<31)
+
+#define BNX2_TDMA_PAYLOAD_PROD				0x00005c0c
+#define BNX2_TDMA_PAYLOAD_PROD_VALUE			 (0x1fffL<<3)
+
+#define BNX2_TDMA_DBG_WATCHDOG				0x00005c10
+#define BNX2_TDMA_DBG_TRIGGER				0x00005c14
+#define BNX2_TDMA_DMAD_FSM				0x00005c80
+#define BNX2_TDMA_DMAD_FSM_BD_INVLD			 (1L<<0)
+#define BNX2_TDMA_DMAD_FSM_PUSH				 (0xfL<<4)
+#define BNX2_TDMA_DMAD_FSM_ARB_TBDC			 (0x3L<<8)
+#define BNX2_TDMA_DMAD_FSM_ARB_CTX			 (1L<<12)
+#define BNX2_TDMA_DMAD_FSM_DR_INTF			 (1L<<16)
+#define BNX2_TDMA_DMAD_FSM_DMAD				 (0x7L<<20)
+#define BNX2_TDMA_DMAD_FSM_BD				 (0xfL<<24)
+
+#define BNX2_TDMA_DMAD_STATUS				0x00005c84
+#define BNX2_TDMA_DMAD_STATUS_RHOLD_PUSH_ENTRY		 (0x3L<<0)
+#define BNX2_TDMA_DMAD_STATUS_RHOLD_DMAD_ENTRY		 (0x3L<<4)
+#define BNX2_TDMA_DMAD_STATUS_RHOLD_BD_ENTRY		 (0x3L<<8)
+#define BNX2_TDMA_DMAD_STATUS_IFTQ_ENUM			 (0xfL<<12)
+
+#define BNX2_TDMA_DR_INTF_FSM				0x00005c88
+#define BNX2_TDMA_DR_INTF_FSM_L2_COMP			 (0x3L<<0)
+#define BNX2_TDMA_DR_INTF_FSM_TPATQ			 (0x7L<<4)
+#define BNX2_TDMA_DR_INTF_FSM_TPBUF			 (0x3L<<8)
+#define BNX2_TDMA_DR_INTF_FSM_DR_BUF			 (0x7L<<12)
+#define BNX2_TDMA_DR_INTF_FSM_DMAD			 (0x7L<<16)
+
+#define BNX2_TDMA_DR_INTF_STATUS			0x00005c8c
+#define BNX2_TDMA_DR_INTF_STATUS_HOLE_PHASE		 (0x7L<<0)
+#define BNX2_TDMA_DR_INTF_STATUS_DATA_AVAIL		 (0x3L<<4)
+#define BNX2_TDMA_DR_INTF_STATUS_SHIFT_ADDR		 (0x7L<<8)
+#define BNX2_TDMA_DR_INTF_STATUS_NXT_PNTR		 (0xfL<<12)
+#define BNX2_TDMA_DR_INTF_STATUS_BYTE_COUNT		 (0x7L<<16)
+
+#define BNX2_TDMA_PUSH_FSM				0x00005c90
+#define BNX2_TDMA_BD_IF_DEBUG				0x00005c94
+#define BNX2_TDMA_DMAD_IF_DEBUG				0x00005c98
+#define BNX2_TDMA_CTX_IF_DEBUG				0x00005c9c
+#define BNX2_TDMA_TPBUF_IF_DEBUG			0x00005ca0
+#define BNX2_TDMA_DR_IF_DEBUG				0x00005ca4
+#define BNX2_TDMA_TPATQ_IF_DEBUG			0x00005ca8
+#define BNX2_TDMA_TDMA_ILOCK_CKSUM			0x00005cac
+#define BNX2_TDMA_TDMA_ILOCK_CKSUM_CALCULATED		 (0xffffL<<0)
+#define BNX2_TDMA_TDMA_ILOCK_CKSUM_EXPECTED		 (0xffffL<<16)
+
+#define BNX2_TDMA_TDMA_PCIE_CKSUM			0x00005cb0
+#define BNX2_TDMA_TDMA_PCIE_CKSUM_CALCULATED		 (0xffffL<<0)
+#define BNX2_TDMA_TDMA_PCIE_CKSUM_EXPECTED		 (0xffffL<<16)
+
+#define BNX2_TDMA_TDMAQ					0x00005fc0
+#define BNX2_TDMA_FTQ_CMD				0x00005ff8
+#define BNX2_TDMA_FTQ_CMD_OFFSET			 (0x3ffL<<0)
+#define BNX2_TDMA_FTQ_CMD_WR_TOP			 (1L<<10)
+#define BNX2_TDMA_FTQ_CMD_WR_TOP_0			 (0L<<10)
+#define BNX2_TDMA_FTQ_CMD_WR_TOP_1			 (1L<<10)
+#define BNX2_TDMA_FTQ_CMD_SFT_RESET			 (1L<<25)
+#define BNX2_TDMA_FTQ_CMD_RD_DATA			 (1L<<26)
+#define BNX2_TDMA_FTQ_CMD_ADD_INTERVEN			 (1L<<27)
+#define BNX2_TDMA_FTQ_CMD_ADD_DATA			 (1L<<28)
+#define BNX2_TDMA_FTQ_CMD_INTERVENE_CLR			 (1L<<29)
+#define BNX2_TDMA_FTQ_CMD_POP				 (1L<<30)
+#define BNX2_TDMA_FTQ_CMD_BUSY				 (1L<<31)
+
+#define BNX2_TDMA_FTQ_CTL				0x00005ffc
+#define BNX2_TDMA_FTQ_CTL_INTERVENE			 (1L<<0)
+#define BNX2_TDMA_FTQ_CTL_OVERFLOW			 (1L<<1)
+#define BNX2_TDMA_FTQ_CTL_FORCE_INTERVENE		 (1L<<2)
+#define BNX2_TDMA_FTQ_CTL_MAX_DEPTH			 (0x3ffL<<12)
+#define BNX2_TDMA_FTQ_CTL_CUR_DEPTH			 (0x3ffL<<22)
+
+
+
+/*
+ *  hc_reg definition
+ *  offset: 0x6800
+ */
+#define BNX2_HC_COMMAND					0x00006800
+#define BNX2_HC_COMMAND_ENABLE				 (1L<<0)
+#define BNX2_HC_COMMAND_SKIP_ABORT			 (1L<<4)
+#define BNX2_HC_COMMAND_COAL_NOW			 (1L<<16)
+#define BNX2_HC_COMMAND_COAL_NOW_WO_INT			 (1L<<17)
+#define BNX2_HC_COMMAND_STATS_NOW			 (1L<<18)
+#define BNX2_HC_COMMAND_FORCE_INT			 (0x3L<<19)
+#define BNX2_HC_COMMAND_FORCE_INT_NULL			 (0L<<19)
+#define BNX2_HC_COMMAND_FORCE_INT_HIGH			 (1L<<19)
+#define BNX2_HC_COMMAND_FORCE_INT_LOW			 (2L<<19)
+#define BNX2_HC_COMMAND_FORCE_INT_FREE			 (3L<<19)
+#define BNX2_HC_COMMAND_CLR_STAT_NOW			 (1L<<21)
+#define BNX2_HC_COMMAND_MAIN_PWR_INT			 (1L<<22)
+#define BNX2_HC_COMMAND_COAL_ON_NEXT_EVENT		 (1L<<27)
+
+#define BNX2_HC_STATUS					0x00006804
+#define BNX2_HC_STATUS_MASTER_ABORT			 (1L<<0)
+#define BNX2_HC_STATUS_PARITY_ERROR_STATE		 (1L<<1)
+#define BNX2_HC_STATUS_PCI_CLK_CNT_STAT			 (1L<<16)
+#define BNX2_HC_STATUS_CORE_CLK_CNT_STAT		 (1L<<17)
+#define BNX2_HC_STATUS_NUM_STATUS_BLOCKS_STAT		 (1L<<18)
+#define BNX2_HC_STATUS_NUM_INT_GEN_STAT			 (1L<<19)
+#define BNX2_HC_STATUS_NUM_INT_MBOX_WR_STAT		 (1L<<20)
+#define BNX2_HC_STATUS_CORE_CLKS_TO_HW_INTACK_STAT	 (1L<<23)
+#define BNX2_HC_STATUS_CORE_CLKS_TO_SW_INTACK_STAT	 (1L<<24)
+#define BNX2_HC_STATUS_CORE_CLKS_DURING_SW_INTACK_STAT	 (1L<<25)
+
+#define BNX2_HC_CONFIG					0x00006808
+#define BNX2_HC_CONFIG_COLLECT_STATS			 (1L<<0)
+#define BNX2_HC_CONFIG_RX_TMR_MODE			 (1L<<1)
+#define BNX2_HC_CONFIG_TX_TMR_MODE			 (1L<<2)
+#define BNX2_HC_CONFIG_COM_TMR_MODE			 (1L<<3)
+#define BNX2_HC_CONFIG_CMD_TMR_MODE			 (1L<<4)
+#define BNX2_HC_CONFIG_STATISTIC_PRIORITY		 (1L<<5)
+#define BNX2_HC_CONFIG_STATUS_PRIORITY			 (1L<<6)
+#define BNX2_HC_CONFIG_STAT_MEM_ADDR			 (0xffL<<8)
+#define BNX2_HC_CONFIG_PER_MODE				 (1L<<16)
+#define BNX2_HC_CONFIG_ONE_SHOT				 (1L<<17)
+#define BNX2_HC_CONFIG_USE_INT_PARAM			 (1L<<18)
+#define BNX2_HC_CONFIG_SET_MASK_AT_RD			 (1L<<19)
+#define BNX2_HC_CONFIG_PER_COLLECT_LIMIT		 (0xfL<<20)
+#define BNX2_HC_CONFIG_SB_ADDR_INC			 (0x7L<<24)
+#define BNX2_HC_CONFIG_SB_ADDR_INC_64B			 (0L<<24)
+#define BNX2_HC_CONFIG_SB_ADDR_INC_128B			 (1L<<24)
+#define BNX2_HC_CONFIG_SB_ADDR_INC_256B			 (2L<<24)
+#define BNX2_HC_CONFIG_SB_ADDR_INC_512B			 (3L<<24)
+#define BNX2_HC_CONFIG_SB_ADDR_INC_1024B		 (4L<<24)
+#define BNX2_HC_CONFIG_SB_ADDR_INC_2048B		 (5L<<24)
+#define BNX2_HC_CONFIG_SB_ADDR_INC_4096B		 (6L<<24)
+#define BNX2_HC_CONFIG_SB_ADDR_INC_8192B		 (7L<<24)
+#define BNX2_HC_CONFIG_GEN_STAT_AVG_INTR		 (1L<<29)
+#define BNX2_HC_CONFIG_UNMASK_ALL			 (1L<<30)
+#define BNX2_HC_CONFIG_TX_SEL				 (1L<<31)
+
+#define BNX2_HC_ATTN_BITS_ENABLE			0x0000680c
+#define BNX2_HC_STATUS_ADDR_L				0x00006810
+#define BNX2_HC_STATUS_ADDR_H				0x00006814
+#define BNX2_HC_STATISTICS_ADDR_L			0x00006818
+#define BNX2_HC_STATISTICS_ADDR_H			0x0000681c
+#define BNX2_HC_TX_QUICK_CONS_TRIP			0x00006820
+#define BNX2_HC_TX_QUICK_CONS_TRIP_VALUE		 (0xffL<<0)
+#define BNX2_HC_TX_QUICK_CONS_TRIP_INT			 (0xffL<<16)
+
+#define BNX2_HC_COMP_PROD_TRIP				0x00006824
+#define BNX2_HC_COMP_PROD_TRIP_VALUE			 (0xffL<<0)
+#define BNX2_HC_COMP_PROD_TRIP_INT			 (0xffL<<16)
+
+#define BNX2_HC_RX_QUICK_CONS_TRIP			0x00006828
+#define BNX2_HC_RX_QUICK_CONS_TRIP_VALUE		 (0xffL<<0)
+#define BNX2_HC_RX_QUICK_CONS_TRIP_INT			 (0xffL<<16)
+
+#define BNX2_HC_RX_TICKS				0x0000682c
+#define BNX2_HC_RX_TICKS_VALUE				 (0x3ffL<<0)
+#define BNX2_HC_RX_TICKS_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_TX_TICKS				0x00006830
+#define BNX2_HC_TX_TICKS_VALUE				 (0x3ffL<<0)
+#define BNX2_HC_TX_TICKS_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_COM_TICKS				0x00006834
+#define BNX2_HC_COM_TICKS_VALUE				 (0x3ffL<<0)
+#define BNX2_HC_COM_TICKS_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_CMD_TICKS				0x00006838
+#define BNX2_HC_CMD_TICKS_VALUE				 (0x3ffL<<0)
+#define BNX2_HC_CMD_TICKS_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_PERIODIC_TICKS				0x0000683c
+#define BNX2_HC_PERIODIC_TICKS_HC_PERIODIC_TICKS	 (0xffffL<<0)
+#define BNX2_HC_PERIODIC_TICKS_HC_INT_PERIODIC_TICKS	 (0xffffL<<16)
+
+#define BNX2_HC_STAT_COLLECT_TICKS			0x00006840
+#define BNX2_HC_STAT_COLLECT_TICKS_HC_STAT_COLL_TICKS	 (0xffL<<4)
+
+#define BNX2_HC_STATS_TICKS				0x00006844
+#define BNX2_HC_STATS_TICKS_HC_STAT_TICKS		 (0xffffL<<8)
+
+#define BNX2_HC_STATS_INTERRUPT_STATUS			0x00006848
+#define BNX2_HC_STATS_INTERRUPT_STATUS_SB_STATUS	 (0x1ffL<<0)
+#define BNX2_HC_STATS_INTERRUPT_STATUS_INT_STATUS	 (0x1ffL<<16)
+
+#define BNX2_HC_STAT_MEM_DATA				0x0000684c
+#define BNX2_HC_STAT_GEN_SEL_0				0x00006850
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0		 (0x7fL<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_RXP_STAT0	 (0L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_RXP_STAT1	 (1L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_RXP_STAT2	 (2L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_RXP_STAT3	 (3L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_RXP_STAT4	 (4L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_RXP_STAT5	 (5L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_RXP_STAT6	 (6L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_RXP_STAT7	 (7L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_RXP_STAT8	 (8L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_RXP_STAT9	 (9L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_RXP_STAT10	 (10L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_RXP_STAT11	 (11L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_TXP_STAT0	 (12L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_TXP_STAT1	 (13L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_TXP_STAT2	 (14L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_TXP_STAT3	 (15L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_TXP_STAT4	 (16L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_TXP_STAT5	 (17L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_TXP_STAT6	 (18L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_TXP_STAT7	 (19L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_COM_STAT0	 (20L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_COM_STAT1	 (21L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_COM_STAT2	 (22L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_COM_STAT3	 (23L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_COM_STAT4	 (24L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_COM_STAT5	 (25L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_COM_STAT6	 (26L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_COM_STAT7	 (27L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_COM_STAT8	 (28L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_COM_STAT9	 (29L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_COM_STAT10	 (30L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_COM_STAT11	 (31L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_TPAT_STAT0	 (32L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_TPAT_STAT1	 (33L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_TPAT_STAT2	 (34L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_TPAT_STAT3	 (35L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_CP_STAT0	 (36L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_CP_STAT1	 (37L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_CP_STAT2	 (38L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_CP_STAT3	 (39L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_CP_STAT4	 (40L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_CP_STAT5	 (41L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_CP_STAT6	 (42L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_CP_STAT7	 (43L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_MCP_STAT0	 (44L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_MCP_STAT1	 (45L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_MCP_STAT2	 (46L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_MCP_STAT3	 (47L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_MCP_STAT4	 (48L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_MCP_STAT5	 (49L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_MCP_STAT6	 (50L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_MCP_STAT7	 (51L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_PCI_CLK_CNT	 (52L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_CORE_CLK_CNT	 (53L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_NUM_STATUS_BLOCKS	 (54L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_NUM_INT_GEN	 (55L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_NUM_INT_MBOX_WR	 (56L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_CORE_CLKS_TO_HW_INTACK	 (59L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_CORE_CLKS_TO_SW_INTACK	 (60L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_CORE_CLKS_DURING_SW_INTACK	 (61L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_TSCH_CMD_CNT	 (62L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_TSCH_SLOT_CNT	 (63L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_CSCH_CMD_CNT	 (64L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_CSCH_SLOT_CNT	 (65L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_RLUPQ_VALID_CNT	 (66L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_RXPQ_VALID_CNT	 (67L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_RXPCQ_VALID_CNT	 (68L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_RV2PPQ_VALID_CNT	 (69L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_RV2PMQ_VALID_CNT	 (70L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_RV2PTQ_VALID_CNT	 (71L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_RDMAQ_VALID_CNT	 (72L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_TSCHQ_VALID_CNT	 (73L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_TBDRQ_VALID_CNT	 (74L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_TXPQ_VALID_CNT	 (75L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_TDMAQ_VALID_CNT	 (76L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_TPATQ_VALID_CNT	 (77L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_TASQ_VALID_CNT	 (78L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_CSQ_VALID_CNT	 (79L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_CPQ_VALID_CNT	 (80L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_COMXQ_VALID_CNT	 (81L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_COMTQ_VALID_CNT	 (82L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_COMQ_VALID_CNT	 (83L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_MGMQ_VALID_CNT	 (84L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_DMAE_READ_TRANSFERS_CNT	 (85L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_DMAE_READ_DELAY_PCI_CLKS_CNT	 (86L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_DMAE_BIG_READ_TRANSFERS_CNT	 (87L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_DMAE_BIG_READ_DELAY_PCI_CLKS_CNT	 (88L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_DMAE_BIG_READ_RETRY_AFTER_DATA_CNT	 (89L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_DMAE_WRITE_TRANSFERS_CNT	 (90L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_DMAE_WRITE_DELAY_PCI_CLKS_CNT	 (91L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_DMAE_BIG_WRITE_TRANSFERS_CNT	 (92L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_DMAE_BIG_WRITE_DELAY_PCI_CLKS_CNT	 (93L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_DMAE_BIG_WRITE_RETRY_AFTER_DATA_CNT	 (94L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_CTX_WR_CNT64	 (95L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_CTX_RD_CNT64	 (96L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_CTX_ACC_STALL_CLKS	 (97L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_CTX_LOCK_STALL_CLKS	 (98L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_MBQ_CTX_ACCESS_STAT	 (99L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_MBQ_CTX_ACCESS64_STAT	 (100L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_MBQ_PCI_STALL_STAT	 (101L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_TBDR_FTQ_ENTRY_CNT	 (102L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_TBDR_BURST_CNT	 (103L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_TDMA_FTQ_ENTRY_CNT	 (104L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_TDMA_BURST_CNT	 (105L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_RDMA_FTQ_ENTRY_CNT	 (106L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_RDMA_BURST_CNT	 (107L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_RLUP_MATCH_CNT	 (108L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_TMR_POLL_PASS_CNT	 (109L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_TMR_TMR1_CNT	 (110L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_TMR_TMR2_CNT	 (111L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_TMR_TMR3_CNT	 (112L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_TMR_TMR4_CNT	 (113L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_TMR_TMR5_CNT	 (114L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_RV2P_STAT0	 (115L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_RV2P_STAT1	 (116L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_RV2P_STAT2	 (117L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_RV2P_STAT3	 (118L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_RV2P_STAT4	 (119L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_RV2P_STAT5	 (120L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_RBDC_PROC1_MISS	 (121L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_RBDC_PROC2_MISS	 (122L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_RBDC_BURST_CNT	 (127L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_1		 (0x7fL<<8)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_2		 (0x7fL<<16)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_3		 (0x7fL<<24)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_XI		 (0xffL<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_UMP_RX_FRAME_DROP_XI	 (52L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_UNUSED_S0_XI	 (57L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_UNUSED_S1_XI	 (58L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_UNUSED_S2_XI	 (85L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_UNUSED_S3_XI	 (86L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_UNUSED_S4_XI	 (87L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_UNUSED_S5_XI	 (88L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_UNUSED_S6_XI	 (89L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_UNUSED_S7_XI	 (90L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_UNUSED_S8_XI	 (91L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_UNUSED_S9_XI	 (92L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_UNUSED_S10_XI	 (93L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_MQ_IDB_OFLOW_XI	 (94L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_CTX_BLK_RD_CNT_XI	 (123L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_CTX_BLK_WR_CNT_XI	 (124L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_CTX_HITS_XI	 (125L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_CTX_MISSES_XI	 (126L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_NUM_STATUS_BLOCKS_VEC1_XI	 (128L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_NUM_INT_GEN_VEC1_XI	 (129L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_NUM_INT_MBOX_WR_VEC1_XI	 (130L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_CORE_CLKS_TO_HW_INTACK_VEC1_XI	 (131L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_CORE_CLKS_TO_SW_INTACK_VEC1_XI	 (132L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_CORE_CLKS_DURING_SW_INTACK_VEC1_XI	 (133L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_NUM_STATUS_BLOCKS_VEC2_XI	 (134L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_NUM_INT_GEN_VEC2_XI	 (135L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_NUM_INT_MBOX_WR_VEC2_XI	 (136L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_CORE_CLKS_TO_HW_INTACK_VEC2_XI	 (137L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_CORE_CLKS_TO_SW_INTACK_VEC2_XI	 (138L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_CORE_CLKS_DURING_SW_INTACK_VEC2_XI	 (139L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_NUM_STATUS_BLOCKS_VEC3_XI	 (140L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_NUM_INT_GEN_VEC3_XI	 (141L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_NUM_INT_MBOX_WR_VEC3_XI	 (142L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_CORE_CLKS_TO_HW_INTACK_VEC3_XI	 (143L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_CORE_CLKS_TO_SW_INTACK_VEC3_XI	 (144L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_CORE_CLKS_DURING_SW_INTACK_VEC3_XI	 (145L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_NUM_STATUS_BLOCKS_VEC4_XI	 (146L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_NUM_INT_GEN_VEC4_XI	 (147L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_NUM_INT_MBOX_WR_VEC4_XI	 (148L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_CORE_CLKS_TO_HW_INTACK_VEC4_XI	 (149L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_CORE_CLKS_TO_SW_INTACK_VEC4_XI	 (150L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_CORE_CLKS_DURING_SW_INTACK_VEC4_XI	 (151L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_NUM_STATUS_BLOCKS_VEC5_XI	 (152L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_NUM_INT_GEN_VEC5_XI	 (153L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_NUM_INT_MBOX_WR_VEC5_XI	 (154L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_CORE_CLKS_TO_HW_INTACK_VEC5_XI	 (155L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_CORE_CLKS_TO_SW_INTACK_VEC5_XI	 (156L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_CORE_CLKS_DURING_SW_INTACK_VEC5_XI	 (157L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_NUM_STATUS_BLOCKS_VEC6_XI	 (158L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_NUM_INT_GEN_VEC6_XI	 (159L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_NUM_INT_MBOX_WR_VEC6_XI	 (160L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_CORE_CLKS_TO_HW_INTACK_VEC6_XI	 (161L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_CORE_CLKS_TO_SW_INTACK_VEC6_XI	 (162L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_CORE_CLKS_DURING_SW_INTACK_VEC6_XI	 (163L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_NUM_STATUS_BLOCKS_VEC7_XI	 (164L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_NUM_INT_GEN_VEC7_XI	 (165L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_NUM_INT_MBOX_WR_VEC7_XI	 (166L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_CORE_CLKS_TO_HW_INTACK_VEC7_XI	 (167L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_CORE_CLKS_TO_SW_INTACK_VEC7_XI	 (168L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_CORE_CLKS_DURING_SW_INTACK_VEC7_XI	 (169L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_NUM_STATUS_BLOCKS_VEC8_XI	 (170L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_NUM_INT_GEN_VEC8_XI	 (171L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_NUM_INT_MBOX_WR_VEC8_XI	 (172L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_CORE_CLKS_TO_HW_INTACK_VEC8_XI	 (173L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_CORE_CLKS_TO_SW_INTACK_VEC8_XI	 (174L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_HC_CORE_CLKS_DURING_SW_INTACK_VEC8_XI	 (175L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_RV2PCS_CMD_CNT_XI	 (176L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_RV2PCS_SLOT_CNT_XI	 (177L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_0_RV2PCSQ_VALID_CNT_XI	 (178L<<0)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_1_XI		 (0xffL<<8)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_2_XI		 (0xffL<<16)
+#define BNX2_HC_STAT_GEN_SEL_0_GEN_SEL_3_XI		 (0xffL<<24)
+
+#define BNX2_HC_STAT_GEN_SEL_1				0x00006854
+#define BNX2_HC_STAT_GEN_SEL_1_GEN_SEL_4		 (0x7fL<<0)
+#define BNX2_HC_STAT_GEN_SEL_1_GEN_SEL_5		 (0x7fL<<8)
+#define BNX2_HC_STAT_GEN_SEL_1_GEN_SEL_6		 (0x7fL<<16)
+#define BNX2_HC_STAT_GEN_SEL_1_GEN_SEL_7		 (0x7fL<<24)
+#define BNX2_HC_STAT_GEN_SEL_1_GEN_SEL_4_XI		 (0xffL<<0)
+#define BNX2_HC_STAT_GEN_SEL_1_GEN_SEL_5_XI		 (0xffL<<8)
+#define BNX2_HC_STAT_GEN_SEL_1_GEN_SEL_6_XI		 (0xffL<<16)
+#define BNX2_HC_STAT_GEN_SEL_1_GEN_SEL_7_XI		 (0xffL<<24)
+
+#define BNX2_HC_STAT_GEN_SEL_2				0x00006858
+#define BNX2_HC_STAT_GEN_SEL_2_GEN_SEL_8		 (0x7fL<<0)
+#define BNX2_HC_STAT_GEN_SEL_2_GEN_SEL_9		 (0x7fL<<8)
+#define BNX2_HC_STAT_GEN_SEL_2_GEN_SEL_10		 (0x7fL<<16)
+#define BNX2_HC_STAT_GEN_SEL_2_GEN_SEL_11		 (0x7fL<<24)
+#define BNX2_HC_STAT_GEN_SEL_2_GEN_SEL_8_XI		 (0xffL<<0)
+#define BNX2_HC_STAT_GEN_SEL_2_GEN_SEL_9_XI		 (0xffL<<8)
+#define BNX2_HC_STAT_GEN_SEL_2_GEN_SEL_10_XI		 (0xffL<<16)
+#define BNX2_HC_STAT_GEN_SEL_2_GEN_SEL_11_XI		 (0xffL<<24)
+
+#define BNX2_HC_STAT_GEN_SEL_3				0x0000685c
+#define BNX2_HC_STAT_GEN_SEL_3_GEN_SEL_12		 (0x7fL<<0)
+#define BNX2_HC_STAT_GEN_SEL_3_GEN_SEL_13		 (0x7fL<<8)
+#define BNX2_HC_STAT_GEN_SEL_3_GEN_SEL_14		 (0x7fL<<16)
+#define BNX2_HC_STAT_GEN_SEL_3_GEN_SEL_15		 (0x7fL<<24)
+#define BNX2_HC_STAT_GEN_SEL_3_GEN_SEL_12_XI		 (0xffL<<0)
+#define BNX2_HC_STAT_GEN_SEL_3_GEN_SEL_13_XI		 (0xffL<<8)
+#define BNX2_HC_STAT_GEN_SEL_3_GEN_SEL_14_XI		 (0xffL<<16)
+#define BNX2_HC_STAT_GEN_SEL_3_GEN_SEL_15_XI		 (0xffL<<24)
+
+#define BNX2_HC_STAT_GEN_STAT0				0x00006888
+#define BNX2_HC_STAT_GEN_STAT1				0x0000688c
+#define BNX2_HC_STAT_GEN_STAT2				0x00006890
+#define BNX2_HC_STAT_GEN_STAT3				0x00006894
+#define BNX2_HC_STAT_GEN_STAT4				0x00006898
+#define BNX2_HC_STAT_GEN_STAT5				0x0000689c
+#define BNX2_HC_STAT_GEN_STAT6				0x000068a0
+#define BNX2_HC_STAT_GEN_STAT7				0x000068a4
+#define BNX2_HC_STAT_GEN_STAT8				0x000068a8
+#define BNX2_HC_STAT_GEN_STAT9				0x000068ac
+#define BNX2_HC_STAT_GEN_STAT10				0x000068b0
+#define BNX2_HC_STAT_GEN_STAT11				0x000068b4
+#define BNX2_HC_STAT_GEN_STAT12				0x000068b8
+#define BNX2_HC_STAT_GEN_STAT13				0x000068bc
+#define BNX2_HC_STAT_GEN_STAT14				0x000068c0
+#define BNX2_HC_STAT_GEN_STAT15				0x000068c4
+#define BNX2_HC_STAT_GEN_STAT_AC0			0x000068c8
+#define BNX2_HC_STAT_GEN_STAT_AC1			0x000068cc
+#define BNX2_HC_STAT_GEN_STAT_AC2			0x000068d0
+#define BNX2_HC_STAT_GEN_STAT_AC3			0x000068d4
+#define BNX2_HC_STAT_GEN_STAT_AC4			0x000068d8
+#define BNX2_HC_STAT_GEN_STAT_AC5			0x000068dc
+#define BNX2_HC_STAT_GEN_STAT_AC6			0x000068e0
+#define BNX2_HC_STAT_GEN_STAT_AC7			0x000068e4
+#define BNX2_HC_STAT_GEN_STAT_AC8			0x000068e8
+#define BNX2_HC_STAT_GEN_STAT_AC9			0x000068ec
+#define BNX2_HC_STAT_GEN_STAT_AC10			0x000068f0
+#define BNX2_HC_STAT_GEN_STAT_AC11			0x000068f4
+#define BNX2_HC_STAT_GEN_STAT_AC12			0x000068f8
+#define BNX2_HC_STAT_GEN_STAT_AC13			0x000068fc
+#define BNX2_HC_STAT_GEN_STAT_AC14			0x00006900
+#define BNX2_HC_STAT_GEN_STAT_AC15			0x00006904
+#define BNX2_HC_STAT_GEN_STAT_AC			0x000068c8
+#define BNX2_HC_VIS					0x00006908
+#define BNX2_HC_VIS_STAT_BUILD_STATE			 (0xfL<<0)
+#define BNX2_HC_VIS_STAT_BUILD_STATE_IDLE		 (0L<<0)
+#define BNX2_HC_VIS_STAT_BUILD_STATE_START		 (1L<<0)
+#define BNX2_HC_VIS_STAT_BUILD_STATE_REQUEST		 (2L<<0)
+#define BNX2_HC_VIS_STAT_BUILD_STATE_UPDATE64		 (3L<<0)
+#define BNX2_HC_VIS_STAT_BUILD_STATE_UPDATE32		 (4L<<0)
+#define BNX2_HC_VIS_STAT_BUILD_STATE_UPDATE_DONE	 (5L<<0)
+#define BNX2_HC_VIS_STAT_BUILD_STATE_DMA		 (6L<<0)
+#define BNX2_HC_VIS_STAT_BUILD_STATE_MSI_CONTROL	 (7L<<0)
+#define BNX2_HC_VIS_STAT_BUILD_STATE_MSI_LOW		 (8L<<0)
+#define BNX2_HC_VIS_STAT_BUILD_STATE_MSI_HIGH		 (9L<<0)
+#define BNX2_HC_VIS_STAT_BUILD_STATE_MSI_DATA		 (10L<<0)
+#define BNX2_HC_VIS_DMA_STAT_STATE			 (0xfL<<8)
+#define BNX2_HC_VIS_DMA_STAT_STATE_IDLE			 (0L<<8)
+#define BNX2_HC_VIS_DMA_STAT_STATE_STATUS_PARAM		 (1L<<8)
+#define BNX2_HC_VIS_DMA_STAT_STATE_STATUS_DMA		 (2L<<8)
+#define BNX2_HC_VIS_DMA_STAT_STATE_WRITE_COMP		 (3L<<8)
+#define BNX2_HC_VIS_DMA_STAT_STATE_COMP			 (4L<<8)
+#define BNX2_HC_VIS_DMA_STAT_STATE_STATISTIC_PARAM	 (5L<<8)
+#define BNX2_HC_VIS_DMA_STAT_STATE_STATISTIC_DMA	 (6L<<8)
+#define BNX2_HC_VIS_DMA_STAT_STATE_WRITE_COMP_1		 (7L<<8)
+#define BNX2_HC_VIS_DMA_STAT_STATE_WRITE_COMP_2		 (8L<<8)
+#define BNX2_HC_VIS_DMA_STAT_STATE_WAIT			 (9L<<8)
+#define BNX2_HC_VIS_DMA_STAT_STATE_ABORT		 (15L<<8)
+#define BNX2_HC_VIS_DMA_MSI_STATE			 (0x7L<<12)
+#define BNX2_HC_VIS_STATISTIC_DMA_EN_STATE		 (0x3L<<15)
+#define BNX2_HC_VIS_STATISTIC_DMA_EN_STATE_IDLE		 (0L<<15)
+#define BNX2_HC_VIS_STATISTIC_DMA_EN_STATE_COUNT	 (1L<<15)
+#define BNX2_HC_VIS_STATISTIC_DMA_EN_STATE_START	 (2L<<15)
+
+#define BNX2_HC_VIS_1					0x0000690c
+#define BNX2_HC_VIS_1_HW_INTACK_STATE			 (1L<<4)
+#define BNX2_HC_VIS_1_HW_INTACK_STATE_IDLE		 (0L<<4)
+#define BNX2_HC_VIS_1_HW_INTACK_STATE_COUNT		 (1L<<4)
+#define BNX2_HC_VIS_1_SW_INTACK_STATE			 (1L<<5)
+#define BNX2_HC_VIS_1_SW_INTACK_STATE_IDLE		 (0L<<5)
+#define BNX2_HC_VIS_1_SW_INTACK_STATE_COUNT		 (1L<<5)
+#define BNX2_HC_VIS_1_DURING_SW_INTACK_STATE		 (1L<<6)
+#define BNX2_HC_VIS_1_DURING_SW_INTACK_STATE_IDLE	 (0L<<6)
+#define BNX2_HC_VIS_1_DURING_SW_INTACK_STATE_COUNT	 (1L<<6)
+#define BNX2_HC_VIS_1_MAILBOX_COUNT_STATE		 (1L<<7)
+#define BNX2_HC_VIS_1_MAILBOX_COUNT_STATE_IDLE		 (0L<<7)
+#define BNX2_HC_VIS_1_MAILBOX_COUNT_STATE_COUNT		 (1L<<7)
+#define BNX2_HC_VIS_1_RAM_RD_ARB_STATE			 (0xfL<<17)
+#define BNX2_HC_VIS_1_RAM_RD_ARB_STATE_IDLE		 (0L<<17)
+#define BNX2_HC_VIS_1_RAM_RD_ARB_STATE_DMA		 (1L<<17)
+#define BNX2_HC_VIS_1_RAM_RD_ARB_STATE_UPDATE		 (2L<<17)
+#define BNX2_HC_VIS_1_RAM_RD_ARB_STATE_ASSIGN		 (3L<<17)
+#define BNX2_HC_VIS_1_RAM_RD_ARB_STATE_WAIT		 (4L<<17)
+#define BNX2_HC_VIS_1_RAM_RD_ARB_STATE_REG_UPDATE	 (5L<<17)
+#define BNX2_HC_VIS_1_RAM_RD_ARB_STATE_REG_ASSIGN	 (6L<<17)
+#define BNX2_HC_VIS_1_RAM_RD_ARB_STATE_REG_WAIT		 (7L<<17)
+#define BNX2_HC_VIS_1_RAM_WR_ARB_STATE			 (0x3L<<21)
+#define BNX2_HC_VIS_1_RAM_WR_ARB_STATE_NORMAL		 (0L<<21)
+#define BNX2_HC_VIS_1_RAM_WR_ARB_STATE_CLEAR		 (1L<<21)
+#define BNX2_HC_VIS_1_INT_GEN_STATE			 (1L<<23)
+#define BNX2_HC_VIS_1_INT_GEN_STATE_DLE			 (0L<<23)
+#define BNX2_HC_VIS_1_INT_GEN_STATE_NTERRUPT		 (1L<<23)
+#define BNX2_HC_VIS_1_STAT_CHAN_ID			 (0x7L<<24)
+#define BNX2_HC_VIS_1_INT_B				 (1L<<27)
+
+#define BNX2_HC_DEBUG_VECT_PEEK				0x00006910
+#define BNX2_HC_DEBUG_VECT_PEEK_1_VALUE			 (0x7ffL<<0)
+#define BNX2_HC_DEBUG_VECT_PEEK_1_PEEK_EN		 (1L<<11)
+#define BNX2_HC_DEBUG_VECT_PEEK_1_SEL			 (0xfL<<12)
+#define BNX2_HC_DEBUG_VECT_PEEK_2_VALUE			 (0x7ffL<<16)
+#define BNX2_HC_DEBUG_VECT_PEEK_2_PEEK_EN		 (1L<<27)
+#define BNX2_HC_DEBUG_VECT_PEEK_2_SEL			 (0xfL<<28)
+
+#define BNX2_HC_COALESCE_NOW				0x00006914
+#define BNX2_HC_COALESCE_NOW_COAL_NOW			 (0x1ffL<<1)
+#define BNX2_HC_COALESCE_NOW_COAL_NOW_WO_INT		 (0x1ffL<<11)
+#define BNX2_HC_COALESCE_NOW_COAL_ON_NXT_EVENT		 (0x1ffL<<21)
+
+#define BNX2_HC_MSIX_BIT_VECTOR				0x00006918
+#define BNX2_HC_MSIX_BIT_VECTOR_VAL			 (0x1ffL<<0)
+
+#define BNX2_HC_SB_CONFIG_1				0x00006a00
+#define BNX2_HC_SB_CONFIG_1_RX_TMR_MODE			 (1L<<1)
+#define BNX2_HC_SB_CONFIG_1_TX_TMR_MODE			 (1L<<2)
+#define BNX2_HC_SB_CONFIG_1_COM_TMR_MODE		 (1L<<3)
+#define BNX2_HC_SB_CONFIG_1_CMD_TMR_MODE		 (1L<<4)
+#define BNX2_HC_SB_CONFIG_1_PER_MODE			 (1L<<16)
+#define BNX2_HC_SB_CONFIG_1_ONE_SHOT			 (1L<<17)
+#define BNX2_HC_SB_CONFIG_1_USE_INT_PARAM		 (1L<<18)
+#define BNX2_HC_SB_CONFIG_1_PER_COLLECT_LIMIT		 (0xfL<<20)
+
+#define BNX2_HC_TX_QUICK_CONS_TRIP_1			0x00006a04
+#define BNX2_HC_TX_QUICK_CONS_TRIP_1_VALUE		 (0xffL<<0)
+#define BNX2_HC_TX_QUICK_CONS_TRIP_1_INT		 (0xffL<<16)
+
+#define BNX2_HC_COMP_PROD_TRIP_1			0x00006a08
+#define BNX2_HC_COMP_PROD_TRIP_1_VALUE			 (0xffL<<0)
+#define BNX2_HC_COMP_PROD_TRIP_1_INT			 (0xffL<<16)
+
+#define BNX2_HC_RX_QUICK_CONS_TRIP_1			0x00006a0c
+#define BNX2_HC_RX_QUICK_CONS_TRIP_1_VALUE		 (0xffL<<0)
+#define BNX2_HC_RX_QUICK_CONS_TRIP_1_INT		 (0xffL<<16)
+
+#define BNX2_HC_RX_TICKS_1				0x00006a10
+#define BNX2_HC_RX_TICKS_1_VALUE			 (0x3ffL<<0)
+#define BNX2_HC_RX_TICKS_1_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_TX_TICKS_1				0x00006a14
+#define BNX2_HC_TX_TICKS_1_VALUE			 (0x3ffL<<0)
+#define BNX2_HC_TX_TICKS_1_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_COM_TICKS_1				0x00006a18
+#define BNX2_HC_COM_TICKS_1_VALUE			 (0x3ffL<<0)
+#define BNX2_HC_COM_TICKS_1_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_CMD_TICKS_1				0x00006a1c
+#define BNX2_HC_CMD_TICKS_1_VALUE			 (0x3ffL<<0)
+#define BNX2_HC_CMD_TICKS_1_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_PERIODIC_TICKS_1			0x00006a20
+#define BNX2_HC_PERIODIC_TICKS_1_HC_PERIODIC_TICKS	 (0xffffL<<0)
+#define BNX2_HC_PERIODIC_TICKS_1_HC_INT_PERIODIC_TICKS	 (0xffffL<<16)
+
+#define BNX2_HC_SB_CONFIG_2				0x00006a24
+#define BNX2_HC_SB_CONFIG_2_RX_TMR_MODE			 (1L<<1)
+#define BNX2_HC_SB_CONFIG_2_TX_TMR_MODE			 (1L<<2)
+#define BNX2_HC_SB_CONFIG_2_COM_TMR_MODE		 (1L<<3)
+#define BNX2_HC_SB_CONFIG_2_CMD_TMR_MODE		 (1L<<4)
+#define BNX2_HC_SB_CONFIG_2_PER_MODE			 (1L<<16)
+#define BNX2_HC_SB_CONFIG_2_ONE_SHOT			 (1L<<17)
+#define BNX2_HC_SB_CONFIG_2_USE_INT_PARAM		 (1L<<18)
+#define BNX2_HC_SB_CONFIG_2_PER_COLLECT_LIMIT		 (0xfL<<20)
+
+#define BNX2_HC_TX_QUICK_CONS_TRIP_2			0x00006a28
+#define BNX2_HC_TX_QUICK_CONS_TRIP_2_VALUE		 (0xffL<<0)
+#define BNX2_HC_TX_QUICK_CONS_TRIP_2_INT		 (0xffL<<16)
+
+#define BNX2_HC_COMP_PROD_TRIP_2			0x00006a2c
+#define BNX2_HC_COMP_PROD_TRIP_2_VALUE			 (0xffL<<0)
+#define BNX2_HC_COMP_PROD_TRIP_2_INT			 (0xffL<<16)
+
+#define BNX2_HC_RX_QUICK_CONS_TRIP_2			0x00006a30
+#define BNX2_HC_RX_QUICK_CONS_TRIP_2_VALUE		 (0xffL<<0)
+#define BNX2_HC_RX_QUICK_CONS_TRIP_2_INT		 (0xffL<<16)
+
+#define BNX2_HC_RX_TICKS_2				0x00006a34
+#define BNX2_HC_RX_TICKS_2_VALUE			 (0x3ffL<<0)
+#define BNX2_HC_RX_TICKS_2_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_TX_TICKS_2				0x00006a38
+#define BNX2_HC_TX_TICKS_2_VALUE			 (0x3ffL<<0)
+#define BNX2_HC_TX_TICKS_2_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_COM_TICKS_2				0x00006a3c
+#define BNX2_HC_COM_TICKS_2_VALUE			 (0x3ffL<<0)
+#define BNX2_HC_COM_TICKS_2_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_CMD_TICKS_2				0x00006a40
+#define BNX2_HC_CMD_TICKS_2_VALUE			 (0x3ffL<<0)
+#define BNX2_HC_CMD_TICKS_2_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_PERIODIC_TICKS_2			0x00006a44
+#define BNX2_HC_PERIODIC_TICKS_2_HC_PERIODIC_TICKS	 (0xffffL<<0)
+#define BNX2_HC_PERIODIC_TICKS_2_HC_INT_PERIODIC_TICKS	 (0xffffL<<16)
+
+#define BNX2_HC_SB_CONFIG_3				0x00006a48
+#define BNX2_HC_SB_CONFIG_3_RX_TMR_MODE			 (1L<<1)
+#define BNX2_HC_SB_CONFIG_3_TX_TMR_MODE			 (1L<<2)
+#define BNX2_HC_SB_CONFIG_3_COM_TMR_MODE		 (1L<<3)
+#define BNX2_HC_SB_CONFIG_3_CMD_TMR_MODE		 (1L<<4)
+#define BNX2_HC_SB_CONFIG_3_PER_MODE			 (1L<<16)
+#define BNX2_HC_SB_CONFIG_3_ONE_SHOT			 (1L<<17)
+#define BNX2_HC_SB_CONFIG_3_USE_INT_PARAM		 (1L<<18)
+#define BNX2_HC_SB_CONFIG_3_PER_COLLECT_LIMIT		 (0xfL<<20)
+
+#define BNX2_HC_TX_QUICK_CONS_TRIP_3			0x00006a4c
+#define BNX2_HC_TX_QUICK_CONS_TRIP_3_VALUE		 (0xffL<<0)
+#define BNX2_HC_TX_QUICK_CONS_TRIP_3_INT		 (0xffL<<16)
+
+#define BNX2_HC_COMP_PROD_TRIP_3			0x00006a50
+#define BNX2_HC_COMP_PROD_TRIP_3_VALUE			 (0xffL<<0)
+#define BNX2_HC_COMP_PROD_TRIP_3_INT			 (0xffL<<16)
+
+#define BNX2_HC_RX_QUICK_CONS_TRIP_3			0x00006a54
+#define BNX2_HC_RX_QUICK_CONS_TRIP_3_VALUE		 (0xffL<<0)
+#define BNX2_HC_RX_QUICK_CONS_TRIP_3_INT		 (0xffL<<16)
+
+#define BNX2_HC_RX_TICKS_3				0x00006a58
+#define BNX2_HC_RX_TICKS_3_VALUE			 (0x3ffL<<0)
+#define BNX2_HC_RX_TICKS_3_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_TX_TICKS_3				0x00006a5c
+#define BNX2_HC_TX_TICKS_3_VALUE			 (0x3ffL<<0)
+#define BNX2_HC_TX_TICKS_3_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_COM_TICKS_3				0x00006a60
+#define BNX2_HC_COM_TICKS_3_VALUE			 (0x3ffL<<0)
+#define BNX2_HC_COM_TICKS_3_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_CMD_TICKS_3				0x00006a64
+#define BNX2_HC_CMD_TICKS_3_VALUE			 (0x3ffL<<0)
+#define BNX2_HC_CMD_TICKS_3_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_PERIODIC_TICKS_3			0x00006a68
+#define BNX2_HC_PERIODIC_TICKS_3_HC_PERIODIC_TICKS	 (0xffffL<<0)
+#define BNX2_HC_PERIODIC_TICKS_3_HC_INT_PERIODIC_TICKS	 (0xffffL<<16)
+
+#define BNX2_HC_SB_CONFIG_4				0x00006a6c
+#define BNX2_HC_SB_CONFIG_4_RX_TMR_MODE			 (1L<<1)
+#define BNX2_HC_SB_CONFIG_4_TX_TMR_MODE			 (1L<<2)
+#define BNX2_HC_SB_CONFIG_4_COM_TMR_MODE		 (1L<<3)
+#define BNX2_HC_SB_CONFIG_4_CMD_TMR_MODE		 (1L<<4)
+#define BNX2_HC_SB_CONFIG_4_PER_MODE			 (1L<<16)
+#define BNX2_HC_SB_CONFIG_4_ONE_SHOT			 (1L<<17)
+#define BNX2_HC_SB_CONFIG_4_USE_INT_PARAM		 (1L<<18)
+#define BNX2_HC_SB_CONFIG_4_PER_COLLECT_LIMIT		 (0xfL<<20)
+
+#define BNX2_HC_TX_QUICK_CONS_TRIP_4			0x00006a70
+#define BNX2_HC_TX_QUICK_CONS_TRIP_4_VALUE		 (0xffL<<0)
+#define BNX2_HC_TX_QUICK_CONS_TRIP_4_INT		 (0xffL<<16)
+
+#define BNX2_HC_COMP_PROD_TRIP_4			0x00006a74
+#define BNX2_HC_COMP_PROD_TRIP_4_VALUE			 (0xffL<<0)
+#define BNX2_HC_COMP_PROD_TRIP_4_INT			 (0xffL<<16)
+
+#define BNX2_HC_RX_QUICK_CONS_TRIP_4			0x00006a78
+#define BNX2_HC_RX_QUICK_CONS_TRIP_4_VALUE		 (0xffL<<0)
+#define BNX2_HC_RX_QUICK_CONS_TRIP_4_INT		 (0xffL<<16)
+
+#define BNX2_HC_RX_TICKS_4				0x00006a7c
+#define BNX2_HC_RX_TICKS_4_VALUE			 (0x3ffL<<0)
+#define BNX2_HC_RX_TICKS_4_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_TX_TICKS_4				0x00006a80
+#define BNX2_HC_TX_TICKS_4_VALUE			 (0x3ffL<<0)
+#define BNX2_HC_TX_TICKS_4_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_COM_TICKS_4				0x00006a84
+#define BNX2_HC_COM_TICKS_4_VALUE			 (0x3ffL<<0)
+#define BNX2_HC_COM_TICKS_4_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_CMD_TICKS_4				0x00006a88
+#define BNX2_HC_CMD_TICKS_4_VALUE			 (0x3ffL<<0)
+#define BNX2_HC_CMD_TICKS_4_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_PERIODIC_TICKS_4			0x00006a8c
+#define BNX2_HC_PERIODIC_TICKS_4_HC_PERIODIC_TICKS	 (0xffffL<<0)
+#define BNX2_HC_PERIODIC_TICKS_4_HC_INT_PERIODIC_TICKS	 (0xffffL<<16)
+
+#define BNX2_HC_SB_CONFIG_5				0x00006a90
+#define BNX2_HC_SB_CONFIG_5_RX_TMR_MODE			 (1L<<1)
+#define BNX2_HC_SB_CONFIG_5_TX_TMR_MODE			 (1L<<2)
+#define BNX2_HC_SB_CONFIG_5_COM_TMR_MODE		 (1L<<3)
+#define BNX2_HC_SB_CONFIG_5_CMD_TMR_MODE		 (1L<<4)
+#define BNX2_HC_SB_CONFIG_5_PER_MODE			 (1L<<16)
+#define BNX2_HC_SB_CONFIG_5_ONE_SHOT			 (1L<<17)
+#define BNX2_HC_SB_CONFIG_5_USE_INT_PARAM		 (1L<<18)
+#define BNX2_HC_SB_CONFIG_5_PER_COLLECT_LIMIT		 (0xfL<<20)
+
+#define BNX2_HC_TX_QUICK_CONS_TRIP_5			0x00006a94
+#define BNX2_HC_TX_QUICK_CONS_TRIP_5_VALUE		 (0xffL<<0)
+#define BNX2_HC_TX_QUICK_CONS_TRIP_5_INT		 (0xffL<<16)
+
+#define BNX2_HC_COMP_PROD_TRIP_5			0x00006a98
+#define BNX2_HC_COMP_PROD_TRIP_5_VALUE			 (0xffL<<0)
+#define BNX2_HC_COMP_PROD_TRIP_5_INT			 (0xffL<<16)
+
+#define BNX2_HC_RX_QUICK_CONS_TRIP_5			0x00006a9c
+#define BNX2_HC_RX_QUICK_CONS_TRIP_5_VALUE		 (0xffL<<0)
+#define BNX2_HC_RX_QUICK_CONS_TRIP_5_INT		 (0xffL<<16)
+
+#define BNX2_HC_RX_TICKS_5				0x00006aa0
+#define BNX2_HC_RX_TICKS_5_VALUE			 (0x3ffL<<0)
+#define BNX2_HC_RX_TICKS_5_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_TX_TICKS_5				0x00006aa4
+#define BNX2_HC_TX_TICKS_5_VALUE			 (0x3ffL<<0)
+#define BNX2_HC_TX_TICKS_5_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_COM_TICKS_5				0x00006aa8
+#define BNX2_HC_COM_TICKS_5_VALUE			 (0x3ffL<<0)
+#define BNX2_HC_COM_TICKS_5_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_CMD_TICKS_5				0x00006aac
+#define BNX2_HC_CMD_TICKS_5_VALUE			 (0x3ffL<<0)
+#define BNX2_HC_CMD_TICKS_5_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_PERIODIC_TICKS_5			0x00006ab0
+#define BNX2_HC_PERIODIC_TICKS_5_HC_PERIODIC_TICKS	 (0xffffL<<0)
+#define BNX2_HC_PERIODIC_TICKS_5_HC_INT_PERIODIC_TICKS	 (0xffffL<<16)
+
+#define BNX2_HC_SB_CONFIG_6				0x00006ab4
+#define BNX2_HC_SB_CONFIG_6_RX_TMR_MODE			 (1L<<1)
+#define BNX2_HC_SB_CONFIG_6_TX_TMR_MODE			 (1L<<2)
+#define BNX2_HC_SB_CONFIG_6_COM_TMR_MODE		 (1L<<3)
+#define BNX2_HC_SB_CONFIG_6_CMD_TMR_MODE		 (1L<<4)
+#define BNX2_HC_SB_CONFIG_6_PER_MODE			 (1L<<16)
+#define BNX2_HC_SB_CONFIG_6_ONE_SHOT			 (1L<<17)
+#define BNX2_HC_SB_CONFIG_6_USE_INT_PARAM		 (1L<<18)
+#define BNX2_HC_SB_CONFIG_6_PER_COLLECT_LIMIT		 (0xfL<<20)
+
+#define BNX2_HC_TX_QUICK_CONS_TRIP_6			0x00006ab8
+#define BNX2_HC_TX_QUICK_CONS_TRIP_6_VALUE		 (0xffL<<0)
+#define BNX2_HC_TX_QUICK_CONS_TRIP_6_INT		 (0xffL<<16)
+
+#define BNX2_HC_COMP_PROD_TRIP_6			0x00006abc
+#define BNX2_HC_COMP_PROD_TRIP_6_VALUE			 (0xffL<<0)
+#define BNX2_HC_COMP_PROD_TRIP_6_INT			 (0xffL<<16)
+
+#define BNX2_HC_RX_QUICK_CONS_TRIP_6			0x00006ac0
+#define BNX2_HC_RX_QUICK_CONS_TRIP_6_VALUE		 (0xffL<<0)
+#define BNX2_HC_RX_QUICK_CONS_TRIP_6_INT		 (0xffL<<16)
+
+#define BNX2_HC_RX_TICKS_6				0x00006ac4
+#define BNX2_HC_RX_TICKS_6_VALUE			 (0x3ffL<<0)
+#define BNX2_HC_RX_TICKS_6_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_TX_TICKS_6				0x00006ac8
+#define BNX2_HC_TX_TICKS_6_VALUE			 (0x3ffL<<0)
+#define BNX2_HC_TX_TICKS_6_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_COM_TICKS_6				0x00006acc
+#define BNX2_HC_COM_TICKS_6_VALUE			 (0x3ffL<<0)
+#define BNX2_HC_COM_TICKS_6_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_CMD_TICKS_6				0x00006ad0
+#define BNX2_HC_CMD_TICKS_6_VALUE			 (0x3ffL<<0)
+#define BNX2_HC_CMD_TICKS_6_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_PERIODIC_TICKS_6			0x00006ad4
+#define BNX2_HC_PERIODIC_TICKS_6_HC_PERIODIC_TICKS	 (0xffffL<<0)
+#define BNX2_HC_PERIODIC_TICKS_6_HC_INT_PERIODIC_TICKS	 (0xffffL<<16)
+
+#define BNX2_HC_SB_CONFIG_7				0x00006ad8
+#define BNX2_HC_SB_CONFIG_7_RX_TMR_MODE			 (1L<<1)
+#define BNX2_HC_SB_CONFIG_7_TX_TMR_MODE			 (1L<<2)
+#define BNX2_HC_SB_CONFIG_7_COM_TMR_MODE		 (1L<<3)
+#define BNX2_HC_SB_CONFIG_7_CMD_TMR_MODE		 (1L<<4)
+#define BNX2_HC_SB_CONFIG_7_PER_MODE			 (1L<<16)
+#define BNX2_HC_SB_CONFIG_7_ONE_SHOT			 (1L<<17)
+#define BNX2_HC_SB_CONFIG_7_USE_INT_PARAM		 (1L<<18)
+#define BNX2_HC_SB_CONFIG_7_PER_COLLECT_LIMIT		 (0xfL<<20)
+
+#define BNX2_HC_TX_QUICK_CONS_TRIP_7			0x00006adc
+#define BNX2_HC_TX_QUICK_CONS_TRIP_7_VALUE		 (0xffL<<0)
+#define BNX2_HC_TX_QUICK_CONS_TRIP_7_INT		 (0xffL<<16)
+
+#define BNX2_HC_COMP_PROD_TRIP_7			0x00006ae0
+#define BNX2_HC_COMP_PROD_TRIP_7_VALUE			 (0xffL<<0)
+#define BNX2_HC_COMP_PROD_TRIP_7_INT			 (0xffL<<16)
+
+#define BNX2_HC_RX_QUICK_CONS_TRIP_7			0x00006ae4
+#define BNX2_HC_RX_QUICK_CONS_TRIP_7_VALUE		 (0xffL<<0)
+#define BNX2_HC_RX_QUICK_CONS_TRIP_7_INT		 (0xffL<<16)
+
+#define BNX2_HC_RX_TICKS_7				0x00006ae8
+#define BNX2_HC_RX_TICKS_7_VALUE			 (0x3ffL<<0)
+#define BNX2_HC_RX_TICKS_7_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_TX_TICKS_7				0x00006aec
+#define BNX2_HC_TX_TICKS_7_VALUE			 (0x3ffL<<0)
+#define BNX2_HC_TX_TICKS_7_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_COM_TICKS_7				0x00006af0
+#define BNX2_HC_COM_TICKS_7_VALUE			 (0x3ffL<<0)
+#define BNX2_HC_COM_TICKS_7_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_CMD_TICKS_7				0x00006af4
+#define BNX2_HC_CMD_TICKS_7_VALUE			 (0x3ffL<<0)
+#define BNX2_HC_CMD_TICKS_7_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_PERIODIC_TICKS_7			0x00006af8
+#define BNX2_HC_PERIODIC_TICKS_7_HC_PERIODIC_TICKS	 (0xffffL<<0)
+#define BNX2_HC_PERIODIC_TICKS_7_HC_INT_PERIODIC_TICKS	 (0xffffL<<16)
+
+#define BNX2_HC_SB_CONFIG_8				0x00006afc
+#define BNX2_HC_SB_CONFIG_8_RX_TMR_MODE			 (1L<<1)
+#define BNX2_HC_SB_CONFIG_8_TX_TMR_MODE			 (1L<<2)
+#define BNX2_HC_SB_CONFIG_8_COM_TMR_MODE		 (1L<<3)
+#define BNX2_HC_SB_CONFIG_8_CMD_TMR_MODE		 (1L<<4)
+#define BNX2_HC_SB_CONFIG_8_PER_MODE			 (1L<<16)
+#define BNX2_HC_SB_CONFIG_8_ONE_SHOT			 (1L<<17)
+#define BNX2_HC_SB_CONFIG_8_USE_INT_PARAM		 (1L<<18)
+#define BNX2_HC_SB_CONFIG_8_PER_COLLECT_LIMIT		 (0xfL<<20)
+
+#define BNX2_HC_TX_QUICK_CONS_TRIP_8			0x00006b00
+#define BNX2_HC_TX_QUICK_CONS_TRIP_8_VALUE		 (0xffL<<0)
+#define BNX2_HC_TX_QUICK_CONS_TRIP_8_INT		 (0xffL<<16)
+
+#define BNX2_HC_COMP_PROD_TRIP_8			0x00006b04
+#define BNX2_HC_COMP_PROD_TRIP_8_VALUE			 (0xffL<<0)
+#define BNX2_HC_COMP_PROD_TRIP_8_INT			 (0xffL<<16)
+
+#define BNX2_HC_RX_QUICK_CONS_TRIP_8			0x00006b08
+#define BNX2_HC_RX_QUICK_CONS_TRIP_8_VALUE		 (0xffL<<0)
+#define BNX2_HC_RX_QUICK_CONS_TRIP_8_INT		 (0xffL<<16)
+
+#define BNX2_HC_RX_TICKS_8				0x00006b0c
+#define BNX2_HC_RX_TICKS_8_VALUE			 (0x3ffL<<0)
+#define BNX2_HC_RX_TICKS_8_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_TX_TICKS_8				0x00006b10
+#define BNX2_HC_TX_TICKS_8_VALUE			 (0x3ffL<<0)
+#define BNX2_HC_TX_TICKS_8_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_COM_TICKS_8				0x00006b14
+#define BNX2_HC_COM_TICKS_8_VALUE			 (0x3ffL<<0)
+#define BNX2_HC_COM_TICKS_8_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_CMD_TICKS_8				0x00006b18
+#define BNX2_HC_CMD_TICKS_8_VALUE			 (0x3ffL<<0)
+#define BNX2_HC_CMD_TICKS_8_INT				 (0x3ffL<<16)
+
+#define BNX2_HC_PERIODIC_TICKS_8			0x00006b1c
+#define BNX2_HC_PERIODIC_TICKS_8_HC_PERIODIC_TICKS	 (0xffffL<<0)
+#define BNX2_HC_PERIODIC_TICKS_8_HC_INT_PERIODIC_TICKS	 (0xffffL<<16)
+
+#define BNX2_HC_SB_CONFIG_SIZE	(BNX2_HC_SB_CONFIG_2 - BNX2_HC_SB_CONFIG_1)
+#define BNX2_HC_COMP_PROD_TRIP_OFF	(BNX2_HC_COMP_PROD_TRIP_1 -	\
+					 BNX2_HC_SB_CONFIG_1)
+#define BNX2_HC_COM_TICKS_OFF	(BNX2_HC_COM_TICKS_1 - BNX2_HC_SB_CONFIG_1)
+#define BNX2_HC_CMD_TICKS_OFF	(BNX2_HC_CMD_TICKS_1 - BNX2_HC_SB_CONFIG_1)
+#define BNX2_HC_TX_QUICK_CONS_TRIP_OFF	(BNX2_HC_TX_QUICK_CONS_TRIP_1 -	\
+					 BNX2_HC_SB_CONFIG_1)
+#define BNX2_HC_TX_TICKS_OFF	(BNX2_HC_TX_TICKS_1 - BNX2_HC_SB_CONFIG_1)
+#define BNX2_HC_RX_QUICK_CONS_TRIP_OFF	(BNX2_HC_RX_QUICK_CONS_TRIP_1 - \
+					 BNX2_HC_SB_CONFIG_1)
+#define BNX2_HC_RX_TICKS_OFF	(BNX2_HC_RX_TICKS_1 - BNX2_HC_SB_CONFIG_1)
+
+
+/*
+ *  txp_reg definition
+ *  offset: 0x40000
+ */
+#define BNX2_TXP_CPU_MODE				0x00045000
+#define BNX2_TXP_CPU_MODE_LOCAL_RST			 (1L<<0)
+#define BNX2_TXP_CPU_MODE_STEP_ENA			 (1L<<1)
+#define BNX2_TXP_CPU_MODE_PAGE_0_DATA_ENA		 (1L<<2)
+#define BNX2_TXP_CPU_MODE_PAGE_0_INST_ENA		 (1L<<3)
+#define BNX2_TXP_CPU_MODE_MSG_BIT1			 (1L<<6)
+#define BNX2_TXP_CPU_MODE_INTERRUPT_ENA			 (1L<<7)
+#define BNX2_TXP_CPU_MODE_SOFT_HALT			 (1L<<10)
+#define BNX2_TXP_CPU_MODE_BAD_DATA_HALT_ENA		 (1L<<11)
+#define BNX2_TXP_CPU_MODE_BAD_INST_HALT_ENA		 (1L<<12)
+#define BNX2_TXP_CPU_MODE_FIO_ABORT_HALT_ENA		 (1L<<13)
+#define BNX2_TXP_CPU_MODE_SPAD_UNDERFLOW_HALT_ENA	 (1L<<15)
+
+#define BNX2_TXP_CPU_STATE				0x00045004
+#define BNX2_TXP_CPU_STATE_BREAKPOINT			 (1L<<0)
+#define BNX2_TXP_CPU_STATE_BAD_INST_HALTED		 (1L<<2)
+#define BNX2_TXP_CPU_STATE_PAGE_0_DATA_HALTED		 (1L<<3)
+#define BNX2_TXP_CPU_STATE_PAGE_0_INST_HALTED		 (1L<<4)
+#define BNX2_TXP_CPU_STATE_BAD_DATA_ADDR_HALTED		 (1L<<5)
+#define BNX2_TXP_CPU_STATE_BAD_PC_HALTED		 (1L<<6)
+#define BNX2_TXP_CPU_STATE_ALIGN_HALTED			 (1L<<7)
+#define BNX2_TXP_CPU_STATE_FIO_ABORT_HALTED		 (1L<<8)
+#define BNX2_TXP_CPU_STATE_SOFT_HALTED			 (1L<<10)
+#define BNX2_TXP_CPU_STATE_SPAD_UNDERFLOW		 (1L<<11)
+#define BNX2_TXP_CPU_STATE_INTERRRUPT			 (1L<<12)
+#define BNX2_TXP_CPU_STATE_DATA_ACCESS_STALL		 (1L<<14)
+#define BNX2_TXP_CPU_STATE_INST_FETCH_STALL		 (1L<<15)
+#define BNX2_TXP_CPU_STATE_BLOCKED_READ			 (1L<<31)
+
+#define BNX2_TXP_CPU_EVENT_MASK				0x00045008
+#define BNX2_TXP_CPU_EVENT_MASK_BREAKPOINT_MASK		 (1L<<0)
+#define BNX2_TXP_CPU_EVENT_MASK_BAD_INST_HALTED_MASK	 (1L<<2)
+#define BNX2_TXP_CPU_EVENT_MASK_PAGE_0_DATA_HALTED_MASK	 (1L<<3)
+#define BNX2_TXP_CPU_EVENT_MASK_PAGE_0_INST_HALTED_MASK	 (1L<<4)
+#define BNX2_TXP_CPU_EVENT_MASK_BAD_DATA_ADDR_HALTED_MASK	 (1L<<5)
+#define BNX2_TXP_CPU_EVENT_MASK_BAD_PC_HALTED_MASK	 (1L<<6)
+#define BNX2_TXP_CPU_EVENT_MASK_ALIGN_HALTED_MASK	 (1L<<7)
+#define BNX2_TXP_CPU_EVENT_MASK_FIO_ABORT_MASK		 (1L<<8)
+#define BNX2_TXP_CPU_EVENT_MASK_SOFT_HALTED_MASK	 (1L<<10)
+#define BNX2_TXP_CPU_EVENT_MASK_SPAD_UNDERFLOW_MASK	 (1L<<11)
+#define BNX2_TXP_CPU_EVENT_MASK_INTERRUPT_MASK		 (1L<<12)
+
+#define BNX2_TXP_CPU_PROGRAM_COUNTER			0x0004501c
+#define BNX2_TXP_CPU_INSTRUCTION			0x00045020
+#define BNX2_TXP_CPU_DATA_ACCESS			0x00045024
+#define BNX2_TXP_CPU_INTERRUPT_ENABLE			0x00045028
+#define BNX2_TXP_CPU_INTERRUPT_VECTOR			0x0004502c
+#define BNX2_TXP_CPU_INTERRUPT_SAVED_PC			0x00045030
+#define BNX2_TXP_CPU_HW_BREAKPOINT			0x00045034
+#define BNX2_TXP_CPU_HW_BREAKPOINT_DISABLE		 (1L<<0)
+#define BNX2_TXP_CPU_HW_BREAKPOINT_ADDRESS		 (0x3fffffffL<<2)
+
+#define BNX2_TXP_CPU_DEBUG_VECT_PEEK			0x00045038
+#define BNX2_TXP_CPU_DEBUG_VECT_PEEK_1_VALUE		 (0x7ffL<<0)
+#define BNX2_TXP_CPU_DEBUG_VECT_PEEK_1_PEEK_EN		 (1L<<11)
+#define BNX2_TXP_CPU_DEBUG_VECT_PEEK_1_SEL		 (0xfL<<12)
+#define BNX2_TXP_CPU_DEBUG_VECT_PEEK_2_VALUE		 (0x7ffL<<16)
+#define BNX2_TXP_CPU_DEBUG_VECT_PEEK_2_PEEK_EN		 (1L<<27)
+#define BNX2_TXP_CPU_DEBUG_VECT_PEEK_2_SEL		 (0xfL<<28)
+
+#define BNX2_TXP_CPU_LAST_BRANCH_ADDR			0x00045048
+#define BNX2_TXP_CPU_LAST_BRANCH_ADDR_TYPE		 (1L<<1)
+#define BNX2_TXP_CPU_LAST_BRANCH_ADDR_TYPE_JUMP		 (0L<<1)
+#define BNX2_TXP_CPU_LAST_BRANCH_ADDR_TYPE_BRANCH	 (1L<<1)
+#define BNX2_TXP_CPU_LAST_BRANCH_ADDR_LBA		 (0x3fffffffL<<2)
+
+#define BNX2_TXP_CPU_REG_FILE				0x00045200
+#define BNX2_TXP_TXPQ					0x000453c0
+#define BNX2_TXP_FTQ_CMD				0x000453f8
+#define BNX2_TXP_FTQ_CMD_OFFSET				 (0x3ffL<<0)
+#define BNX2_TXP_FTQ_CMD_WR_TOP				 (1L<<10)
+#define BNX2_TXP_FTQ_CMD_WR_TOP_0			 (0L<<10)
+#define BNX2_TXP_FTQ_CMD_WR_TOP_1			 (1L<<10)
+#define BNX2_TXP_FTQ_CMD_SFT_RESET			 (1L<<25)
+#define BNX2_TXP_FTQ_CMD_RD_DATA			 (1L<<26)
+#define BNX2_TXP_FTQ_CMD_ADD_INTERVEN			 (1L<<27)
+#define BNX2_TXP_FTQ_CMD_ADD_DATA			 (1L<<28)
+#define BNX2_TXP_FTQ_CMD_INTERVENE_CLR			 (1L<<29)
+#define BNX2_TXP_FTQ_CMD_POP				 (1L<<30)
+#define BNX2_TXP_FTQ_CMD_BUSY				 (1L<<31)
+
+#define BNX2_TXP_FTQ_CTL				0x000453fc
+#define BNX2_TXP_FTQ_CTL_INTERVENE			 (1L<<0)
+#define BNX2_TXP_FTQ_CTL_OVERFLOW			 (1L<<1)
+#define BNX2_TXP_FTQ_CTL_FORCE_INTERVENE		 (1L<<2)
+#define BNX2_TXP_FTQ_CTL_MAX_DEPTH			 (0x3ffL<<12)
+#define BNX2_TXP_FTQ_CTL_CUR_DEPTH			 (0x3ffL<<22)
+
+#define BNX2_TXP_SCRATCH				0x00060000
+
+
+/*
+ *  tpat_reg definition
+ *  offset: 0x80000
+ */
+#define BNX2_TPAT_CPU_MODE				0x00085000
+#define BNX2_TPAT_CPU_MODE_LOCAL_RST			 (1L<<0)
+#define BNX2_TPAT_CPU_MODE_STEP_ENA			 (1L<<1)
+#define BNX2_TPAT_CPU_MODE_PAGE_0_DATA_ENA		 (1L<<2)
+#define BNX2_TPAT_CPU_MODE_PAGE_0_INST_ENA		 (1L<<3)
+#define BNX2_TPAT_CPU_MODE_MSG_BIT1			 (1L<<6)
+#define BNX2_TPAT_CPU_MODE_INTERRUPT_ENA		 (1L<<7)
+#define BNX2_TPAT_CPU_MODE_SOFT_HALT			 (1L<<10)
+#define BNX2_TPAT_CPU_MODE_BAD_DATA_HALT_ENA		 (1L<<11)
+#define BNX2_TPAT_CPU_MODE_BAD_INST_HALT_ENA		 (1L<<12)
+#define BNX2_TPAT_CPU_MODE_FIO_ABORT_HALT_ENA		 (1L<<13)
+#define BNX2_TPAT_CPU_MODE_SPAD_UNDERFLOW_HALT_ENA	 (1L<<15)
+
+#define BNX2_TPAT_CPU_STATE				0x00085004
+#define BNX2_TPAT_CPU_STATE_BREAKPOINT			 (1L<<0)
+#define BNX2_TPAT_CPU_STATE_BAD_INST_HALTED		 (1L<<2)
+#define BNX2_TPAT_CPU_STATE_PAGE_0_DATA_HALTED		 (1L<<3)
+#define BNX2_TPAT_CPU_STATE_PAGE_0_INST_HALTED		 (1L<<4)
+#define BNX2_TPAT_CPU_STATE_BAD_DATA_ADDR_HALTED	 (1L<<5)
+#define BNX2_TPAT_CPU_STATE_BAD_PC_HALTED		 (1L<<6)
+#define BNX2_TPAT_CPU_STATE_ALIGN_HALTED		 (1L<<7)
+#define BNX2_TPAT_CPU_STATE_FIO_ABORT_HALTED		 (1L<<8)
+#define BNX2_TPAT_CPU_STATE_SOFT_HALTED			 (1L<<10)
+#define BNX2_TPAT_CPU_STATE_SPAD_UNDERFLOW		 (1L<<11)
+#define BNX2_TPAT_CPU_STATE_INTERRRUPT			 (1L<<12)
+#define BNX2_TPAT_CPU_STATE_DATA_ACCESS_STALL		 (1L<<14)
+#define BNX2_TPAT_CPU_STATE_INST_FETCH_STALL		 (1L<<15)
+#define BNX2_TPAT_CPU_STATE_BLOCKED_READ		 (1L<<31)
+
+#define BNX2_TPAT_CPU_EVENT_MASK			0x00085008
+#define BNX2_TPAT_CPU_EVENT_MASK_BREAKPOINT_MASK	 (1L<<0)
+#define BNX2_TPAT_CPU_EVENT_MASK_BAD_INST_HALTED_MASK	 (1L<<2)
+#define BNX2_TPAT_CPU_EVENT_MASK_PAGE_0_DATA_HALTED_MASK	 (1L<<3)
+#define BNX2_TPAT_CPU_EVENT_MASK_PAGE_0_INST_HALTED_MASK	 (1L<<4)
+#define BNX2_TPAT_CPU_EVENT_MASK_BAD_DATA_ADDR_HALTED_MASK	 (1L<<5)
+#define BNX2_TPAT_CPU_EVENT_MASK_BAD_PC_HALTED_MASK	 (1L<<6)
+#define BNX2_TPAT_CPU_EVENT_MASK_ALIGN_HALTED_MASK	 (1L<<7)
+#define BNX2_TPAT_CPU_EVENT_MASK_FIO_ABORT_MASK		 (1L<<8)
+#define BNX2_TPAT_CPU_EVENT_MASK_SOFT_HALTED_MASK	 (1L<<10)
+#define BNX2_TPAT_CPU_EVENT_MASK_SPAD_UNDERFLOW_MASK	 (1L<<11)
+#define BNX2_TPAT_CPU_EVENT_MASK_INTERRUPT_MASK		 (1L<<12)
+
+#define BNX2_TPAT_CPU_PROGRAM_COUNTER			0x0008501c
+#define BNX2_TPAT_CPU_INSTRUCTION			0x00085020
+#define BNX2_TPAT_CPU_DATA_ACCESS			0x00085024
+#define BNX2_TPAT_CPU_INTERRUPT_ENABLE			0x00085028
+#define BNX2_TPAT_CPU_INTERRUPT_VECTOR			0x0008502c
+#define BNX2_TPAT_CPU_INTERRUPT_SAVED_PC		0x00085030
+#define BNX2_TPAT_CPU_HW_BREAKPOINT			0x00085034
+#define BNX2_TPAT_CPU_HW_BREAKPOINT_DISABLE		 (1L<<0)
+#define BNX2_TPAT_CPU_HW_BREAKPOINT_ADDRESS		 (0x3fffffffL<<2)
+
+#define BNX2_TPAT_CPU_DEBUG_VECT_PEEK			0x00085038
+#define BNX2_TPAT_CPU_DEBUG_VECT_PEEK_1_VALUE		 (0x7ffL<<0)
+#define BNX2_TPAT_CPU_DEBUG_VECT_PEEK_1_PEEK_EN		 (1L<<11)
+#define BNX2_TPAT_CPU_DEBUG_VECT_PEEK_1_SEL		 (0xfL<<12)
+#define BNX2_TPAT_CPU_DEBUG_VECT_PEEK_2_VALUE		 (0x7ffL<<16)
+#define BNX2_TPAT_CPU_DEBUG_VECT_PEEK_2_PEEK_EN		 (1L<<27)
+#define BNX2_TPAT_CPU_DEBUG_VECT_PEEK_2_SEL		 (0xfL<<28)
+
+#define BNX2_TPAT_CPU_LAST_BRANCH_ADDR			0x00085048
+#define BNX2_TPAT_CPU_LAST_BRANCH_ADDR_TYPE		 (1L<<1)
+#define BNX2_TPAT_CPU_LAST_BRANCH_ADDR_TYPE_JUMP	 (0L<<1)
+#define BNX2_TPAT_CPU_LAST_BRANCH_ADDR_TYPE_BRANCH	 (1L<<1)
+#define BNX2_TPAT_CPU_LAST_BRANCH_ADDR_LBA		 (0x3fffffffL<<2)
+
+#define BNX2_TPAT_CPU_REG_FILE				0x00085200
+#define BNX2_TPAT_TPATQ					0x000853c0
+#define BNX2_TPAT_FTQ_CMD				0x000853f8
+#define BNX2_TPAT_FTQ_CMD_OFFSET			 (0x3ffL<<0)
+#define BNX2_TPAT_FTQ_CMD_WR_TOP			 (1L<<10)
+#define BNX2_TPAT_FTQ_CMD_WR_TOP_0			 (0L<<10)
+#define BNX2_TPAT_FTQ_CMD_WR_TOP_1			 (1L<<10)
+#define BNX2_TPAT_FTQ_CMD_SFT_RESET			 (1L<<25)
+#define BNX2_TPAT_FTQ_CMD_RD_DATA			 (1L<<26)
+#define BNX2_TPAT_FTQ_CMD_ADD_INTERVEN			 (1L<<27)
+#define BNX2_TPAT_FTQ_CMD_ADD_DATA			 (1L<<28)
+#define BNX2_TPAT_FTQ_CMD_INTERVENE_CLR			 (1L<<29)
+#define BNX2_TPAT_FTQ_CMD_POP				 (1L<<30)
+#define BNX2_TPAT_FTQ_CMD_BUSY				 (1L<<31)
+
+#define BNX2_TPAT_FTQ_CTL				0x000853fc
+#define BNX2_TPAT_FTQ_CTL_INTERVENE			 (1L<<0)
+#define BNX2_TPAT_FTQ_CTL_OVERFLOW			 (1L<<1)
+#define BNX2_TPAT_FTQ_CTL_FORCE_INTERVENE		 (1L<<2)
+#define BNX2_TPAT_FTQ_CTL_MAX_DEPTH			 (0x3ffL<<12)
+#define BNX2_TPAT_FTQ_CTL_CUR_DEPTH			 (0x3ffL<<22)
+
+#define BNX2_TPAT_SCRATCH				0x000a0000
+
+
+/*
+ *  rxp_reg definition
+ *  offset: 0xc0000
+ */
+#define BNX2_RXP_CPU_MODE				0x000c5000
+#define BNX2_RXP_CPU_MODE_LOCAL_RST			 (1L<<0)
+#define BNX2_RXP_CPU_MODE_STEP_ENA			 (1L<<1)
+#define BNX2_RXP_CPU_MODE_PAGE_0_DATA_ENA		 (1L<<2)
+#define BNX2_RXP_CPU_MODE_PAGE_0_INST_ENA		 (1L<<3)
+#define BNX2_RXP_CPU_MODE_MSG_BIT1			 (1L<<6)
+#define BNX2_RXP_CPU_MODE_INTERRUPT_ENA			 (1L<<7)
+#define BNX2_RXP_CPU_MODE_SOFT_HALT			 (1L<<10)
+#define BNX2_RXP_CPU_MODE_BAD_DATA_HALT_ENA		 (1L<<11)
+#define BNX2_RXP_CPU_MODE_BAD_INST_HALT_ENA		 (1L<<12)
+#define BNX2_RXP_CPU_MODE_FIO_ABORT_HALT_ENA		 (1L<<13)
+#define BNX2_RXP_CPU_MODE_SPAD_UNDERFLOW_HALT_ENA	 (1L<<15)
+
+#define BNX2_RXP_CPU_STATE				0x000c5004
+#define BNX2_RXP_CPU_STATE_BREAKPOINT			 (1L<<0)
+#define BNX2_RXP_CPU_STATE_BAD_INST_HALTED		 (1L<<2)
+#define BNX2_RXP_CPU_STATE_PAGE_0_DATA_HALTED		 (1L<<3)
+#define BNX2_RXP_CPU_STATE_PAGE_0_INST_HALTED		 (1L<<4)
+#define BNX2_RXP_CPU_STATE_BAD_DATA_ADDR_HALTED		 (1L<<5)
+#define BNX2_RXP_CPU_STATE_BAD_PC_HALTED		 (1L<<6)
+#define BNX2_RXP_CPU_STATE_ALIGN_HALTED			 (1L<<7)
+#define BNX2_RXP_CPU_STATE_FIO_ABORT_HALTED		 (1L<<8)
+#define BNX2_RXP_CPU_STATE_SOFT_HALTED			 (1L<<10)
+#define BNX2_RXP_CPU_STATE_SPAD_UNDERFLOW		 (1L<<11)
+#define BNX2_RXP_CPU_STATE_INTERRRUPT			 (1L<<12)
+#define BNX2_RXP_CPU_STATE_DATA_ACCESS_STALL		 (1L<<14)
+#define BNX2_RXP_CPU_STATE_INST_FETCH_STALL		 (1L<<15)
+#define BNX2_RXP_CPU_STATE_BLOCKED_READ			 (1L<<31)
+
+#define BNX2_RXP_CPU_EVENT_MASK				0x000c5008
+#define BNX2_RXP_CPU_EVENT_MASK_BREAKPOINT_MASK		 (1L<<0)
+#define BNX2_RXP_CPU_EVENT_MASK_BAD_INST_HALTED_MASK	 (1L<<2)
+#define BNX2_RXP_CPU_EVENT_MASK_PAGE_0_DATA_HALTED_MASK	 (1L<<3)
+#define BNX2_RXP_CPU_EVENT_MASK_PAGE_0_INST_HALTED_MASK	 (1L<<4)
+#define BNX2_RXP_CPU_EVENT_MASK_BAD_DATA_ADDR_HALTED_MASK	 (1L<<5)
+#define BNX2_RXP_CPU_EVENT_MASK_BAD_PC_HALTED_MASK	 (1L<<6)
+#define BNX2_RXP_CPU_EVENT_MASK_ALIGN_HALTED_MASK	 (1L<<7)
+#define BNX2_RXP_CPU_EVENT_MASK_FIO_ABORT_MASK		 (1L<<8)
+#define BNX2_RXP_CPU_EVENT_MASK_SOFT_HALTED_MASK	 (1L<<10)
+#define BNX2_RXP_CPU_EVENT_MASK_SPAD_UNDERFLOW_MASK	 (1L<<11)
+#define BNX2_RXP_CPU_EVENT_MASK_INTERRUPT_MASK		 (1L<<12)
+
+#define BNX2_RXP_CPU_PROGRAM_COUNTER			0x000c501c
+#define BNX2_RXP_CPU_INSTRUCTION			0x000c5020
+#define BNX2_RXP_CPU_DATA_ACCESS			0x000c5024
+#define BNX2_RXP_CPU_INTERRUPT_ENABLE			0x000c5028
+#define BNX2_RXP_CPU_INTERRUPT_VECTOR			0x000c502c
+#define BNX2_RXP_CPU_INTERRUPT_SAVED_PC			0x000c5030
+#define BNX2_RXP_CPU_HW_BREAKPOINT			0x000c5034
+#define BNX2_RXP_CPU_HW_BREAKPOINT_DISABLE		 (1L<<0)
+#define BNX2_RXP_CPU_HW_BREAKPOINT_ADDRESS		 (0x3fffffffL<<2)
+
+#define BNX2_RXP_CPU_DEBUG_VECT_PEEK			0x000c5038
+#define BNX2_RXP_CPU_DEBUG_VECT_PEEK_1_VALUE		 (0x7ffL<<0)
+#define BNX2_RXP_CPU_DEBUG_VECT_PEEK_1_PEEK_EN		 (1L<<11)
+#define BNX2_RXP_CPU_DEBUG_VECT_PEEK_1_SEL		 (0xfL<<12)
+#define BNX2_RXP_CPU_DEBUG_VECT_PEEK_2_VALUE		 (0x7ffL<<16)
+#define BNX2_RXP_CPU_DEBUG_VECT_PEEK_2_PEEK_EN		 (1L<<27)
+#define BNX2_RXP_CPU_DEBUG_VECT_PEEK_2_SEL		 (0xfL<<28)
+
+#define BNX2_RXP_CPU_LAST_BRANCH_ADDR			0x000c5048
+#define BNX2_RXP_CPU_LAST_BRANCH_ADDR_TYPE		 (1L<<1)
+#define BNX2_RXP_CPU_LAST_BRANCH_ADDR_TYPE_JUMP		 (0L<<1)
+#define BNX2_RXP_CPU_LAST_BRANCH_ADDR_TYPE_BRANCH	 (1L<<1)
+#define BNX2_RXP_CPU_LAST_BRANCH_ADDR_LBA		 (0x3fffffffL<<2)
+
+#define BNX2_RXP_CPU_REG_FILE				0x000c5200
+#define BNX2_RXP_PFE_PFE_CTL				0x000c537c
+#define BNX2_RXP_PFE_PFE_CTL_INC_USAGE_CNT		 (1L<<0)
+#define BNX2_RXP_PFE_PFE_CTL_PFE_SIZE			 (0xfL<<4)
+#define BNX2_RXP_PFE_PFE_CTL_PFE_SIZE_0			 (0L<<4)
+#define BNX2_RXP_PFE_PFE_CTL_PFE_SIZE_1			 (1L<<4)
+#define BNX2_RXP_PFE_PFE_CTL_PFE_SIZE_2			 (2L<<4)
+#define BNX2_RXP_PFE_PFE_CTL_PFE_SIZE_3			 (3L<<4)
+#define BNX2_RXP_PFE_PFE_CTL_PFE_SIZE_4			 (4L<<4)
+#define BNX2_RXP_PFE_PFE_CTL_PFE_SIZE_5			 (5L<<4)
+#define BNX2_RXP_PFE_PFE_CTL_PFE_SIZE_6			 (6L<<4)
+#define BNX2_RXP_PFE_PFE_CTL_PFE_SIZE_7			 (7L<<4)
+#define BNX2_RXP_PFE_PFE_CTL_PFE_SIZE_8			 (8L<<4)
+#define BNX2_RXP_PFE_PFE_CTL_PFE_SIZE_9			 (9L<<4)
+#define BNX2_RXP_PFE_PFE_CTL_PFE_SIZE_10		 (10L<<4)
+#define BNX2_RXP_PFE_PFE_CTL_PFE_SIZE_11		 (11L<<4)
+#define BNX2_RXP_PFE_PFE_CTL_PFE_SIZE_12		 (12L<<4)
+#define BNX2_RXP_PFE_PFE_CTL_PFE_SIZE_13		 (13L<<4)
+#define BNX2_RXP_PFE_PFE_CTL_PFE_SIZE_14		 (14L<<4)
+#define BNX2_RXP_PFE_PFE_CTL_PFE_SIZE_15		 (15L<<4)
+#define BNX2_RXP_PFE_PFE_CTL_PFE_COUNT			 (0xfL<<12)
+#define BNX2_RXP_PFE_PFE_CTL_OFFSET			 (0x1ffL<<16)
+
+#define BNX2_RXP_RXPCQ					0x000c5380
+#define BNX2_RXP_CFTQ_CMD				0x000c53b8
+#define BNX2_RXP_CFTQ_CMD_OFFSET			 (0x3ffL<<0)
+#define BNX2_RXP_CFTQ_CMD_WR_TOP			 (1L<<10)
+#define BNX2_RXP_CFTQ_CMD_WR_TOP_0			 (0L<<10)
+#define BNX2_RXP_CFTQ_CMD_WR_TOP_1			 (1L<<10)
+#define BNX2_RXP_CFTQ_CMD_SFT_RESET			 (1L<<25)
+#define BNX2_RXP_CFTQ_CMD_RD_DATA			 (1L<<26)
+#define BNX2_RXP_CFTQ_CMD_ADD_INTERVEN			 (1L<<27)
+#define BNX2_RXP_CFTQ_CMD_ADD_DATA			 (1L<<28)
+#define BNX2_RXP_CFTQ_CMD_INTERVENE_CLR			 (1L<<29)
+#define BNX2_RXP_CFTQ_CMD_POP				 (1L<<30)
+#define BNX2_RXP_CFTQ_CMD_BUSY				 (1L<<31)
+
+#define BNX2_RXP_CFTQ_CTL				0x000c53bc
+#define BNX2_RXP_CFTQ_CTL_INTERVENE			 (1L<<0)
+#define BNX2_RXP_CFTQ_CTL_OVERFLOW			 (1L<<1)
+#define BNX2_RXP_CFTQ_CTL_FORCE_INTERVENE		 (1L<<2)
+#define BNX2_RXP_CFTQ_CTL_MAX_DEPTH			 (0x3ffL<<12)
+#define BNX2_RXP_CFTQ_CTL_CUR_DEPTH			 (0x3ffL<<22)
+
+#define BNX2_RXP_RXPQ					0x000c53c0
+#define BNX2_RXP_FTQ_CMD				0x000c53f8
+#define BNX2_RXP_FTQ_CMD_OFFSET				 (0x3ffL<<0)
+#define BNX2_RXP_FTQ_CMD_WR_TOP				 (1L<<10)
+#define BNX2_RXP_FTQ_CMD_WR_TOP_0			 (0L<<10)
+#define BNX2_RXP_FTQ_CMD_WR_TOP_1			 (1L<<10)
+#define BNX2_RXP_FTQ_CMD_SFT_RESET			 (1L<<25)
+#define BNX2_RXP_FTQ_CMD_RD_DATA			 (1L<<26)
+#define BNX2_RXP_FTQ_CMD_ADD_INTERVEN			 (1L<<27)
+#define BNX2_RXP_FTQ_CMD_ADD_DATA			 (1L<<28)
+#define BNX2_RXP_FTQ_CMD_INTERVENE_CLR			 (1L<<29)
+#define BNX2_RXP_FTQ_CMD_POP				 (1L<<30)
+#define BNX2_RXP_FTQ_CMD_BUSY				 (1L<<31)
+
+#define BNX2_RXP_FTQ_CTL				0x000c53fc
+#define BNX2_RXP_FTQ_CTL_INTERVENE			 (1L<<0)
+#define BNX2_RXP_FTQ_CTL_OVERFLOW			 (1L<<1)
+#define BNX2_RXP_FTQ_CTL_FORCE_INTERVENE		 (1L<<2)
+#define BNX2_RXP_FTQ_CTL_MAX_DEPTH			 (0x3ffL<<12)
+#define BNX2_RXP_FTQ_CTL_CUR_DEPTH			 (0x3ffL<<22)
+
+#define BNX2_RXP_SCRATCH				0x000e0000
+#define BNX2_RXP_SCRATCH_RXP_FLOOD			 0x000e0024
+#define BNX2_RXP_SCRATCH_RSS_TBL_SZ			 0x000e0038
+#define BNX2_RXP_SCRATCH_RSS_TBL			 0x000e003c
+#define BNX2_RXP_SCRATCH_RSS_TBL_MAX_ENTRIES		 128
+
+
+/*
+ *  com_reg definition
+ *  offset: 0x100000
+ */
+#define BNX2_COM_CKSUM_ERROR_STATUS			0x00100000
+#define BNX2_COM_CKSUM_ERROR_STATUS_CALCULATED		 (0xffffL<<0)
+#define BNX2_COM_CKSUM_ERROR_STATUS_EXPECTED		 (0xffffL<<16)
+
+#define BNX2_COM_CPU_MODE				0x00105000
+#define BNX2_COM_CPU_MODE_LOCAL_RST			 (1L<<0)
+#define BNX2_COM_CPU_MODE_STEP_ENA			 (1L<<1)
+#define BNX2_COM_CPU_MODE_PAGE_0_DATA_ENA		 (1L<<2)
+#define BNX2_COM_CPU_MODE_PAGE_0_INST_ENA		 (1L<<3)
+#define BNX2_COM_CPU_MODE_MSG_BIT1			 (1L<<6)
+#define BNX2_COM_CPU_MODE_INTERRUPT_ENA			 (1L<<7)
+#define BNX2_COM_CPU_MODE_SOFT_HALT			 (1L<<10)
+#define BNX2_COM_CPU_MODE_BAD_DATA_HALT_ENA		 (1L<<11)
+#define BNX2_COM_CPU_MODE_BAD_INST_HALT_ENA		 (1L<<12)
+#define BNX2_COM_CPU_MODE_FIO_ABORT_HALT_ENA		 (1L<<13)
+#define BNX2_COM_CPU_MODE_SPAD_UNDERFLOW_HALT_ENA	 (1L<<15)
+
+#define BNX2_COM_CPU_STATE				0x00105004
+#define BNX2_COM_CPU_STATE_BREAKPOINT			 (1L<<0)
+#define BNX2_COM_CPU_STATE_BAD_INST_HALTED		 (1L<<2)
+#define BNX2_COM_CPU_STATE_PAGE_0_DATA_HALTED		 (1L<<3)
+#define BNX2_COM_CPU_STATE_PAGE_0_INST_HALTED		 (1L<<4)
+#define BNX2_COM_CPU_STATE_BAD_DATA_ADDR_HALTED		 (1L<<5)
+#define BNX2_COM_CPU_STATE_BAD_PC_HALTED		 (1L<<6)
+#define BNX2_COM_CPU_STATE_ALIGN_HALTED			 (1L<<7)
+#define BNX2_COM_CPU_STATE_FIO_ABORT_HALTED		 (1L<<8)
+#define BNX2_COM_CPU_STATE_SOFT_HALTED			 (1L<<10)
+#define BNX2_COM_CPU_STATE_SPAD_UNDERFLOW		 (1L<<11)
+#define BNX2_COM_CPU_STATE_INTERRRUPT			 (1L<<12)
+#define BNX2_COM_CPU_STATE_DATA_ACCESS_STALL		 (1L<<14)
+#define BNX2_COM_CPU_STATE_INST_FETCH_STALL		 (1L<<15)
+#define BNX2_COM_CPU_STATE_BLOCKED_READ			 (1L<<31)
+
+#define BNX2_COM_CPU_EVENT_MASK				0x00105008
+#define BNX2_COM_CPU_EVENT_MASK_BREAKPOINT_MASK		 (1L<<0)
+#define BNX2_COM_CPU_EVENT_MASK_BAD_INST_HALTED_MASK	 (1L<<2)
+#define BNX2_COM_CPU_EVENT_MASK_PAGE_0_DATA_HALTED_MASK	 (1L<<3)
+#define BNX2_COM_CPU_EVENT_MASK_PAGE_0_INST_HALTED_MASK	 (1L<<4)
+#define BNX2_COM_CPU_EVENT_MASK_BAD_DATA_ADDR_HALTED_MASK	 (1L<<5)
+#define BNX2_COM_CPU_EVENT_MASK_BAD_PC_HALTED_MASK	 (1L<<6)
+#define BNX2_COM_CPU_EVENT_MASK_ALIGN_HALTED_MASK	 (1L<<7)
+#define BNX2_COM_CPU_EVENT_MASK_FIO_ABORT_MASK		 (1L<<8)
+#define BNX2_COM_CPU_EVENT_MASK_SOFT_HALTED_MASK	 (1L<<10)
+#define BNX2_COM_CPU_EVENT_MASK_SPAD_UNDERFLOW_MASK	 (1L<<11)
+#define BNX2_COM_CPU_EVENT_MASK_INTERRUPT_MASK		 (1L<<12)
+
+#define BNX2_COM_CPU_PROGRAM_COUNTER			0x0010501c
+#define BNX2_COM_CPU_INSTRUCTION			0x00105020
+#define BNX2_COM_CPU_DATA_ACCESS			0x00105024
+#define BNX2_COM_CPU_INTERRUPT_ENABLE			0x00105028
+#define BNX2_COM_CPU_INTERRUPT_VECTOR			0x0010502c
+#define BNX2_COM_CPU_INTERRUPT_SAVED_PC			0x00105030
+#define BNX2_COM_CPU_HW_BREAKPOINT			0x00105034
+#define BNX2_COM_CPU_HW_BREAKPOINT_DISABLE		 (1L<<0)
+#define BNX2_COM_CPU_HW_BREAKPOINT_ADDRESS		 (0x3fffffffL<<2)
+
+#define BNX2_COM_CPU_DEBUG_VECT_PEEK			0x00105038
+#define BNX2_COM_CPU_DEBUG_VECT_PEEK_1_VALUE		 (0x7ffL<<0)
+#define BNX2_COM_CPU_DEBUG_VECT_PEEK_1_PEEK_EN		 (1L<<11)
+#define BNX2_COM_CPU_DEBUG_VECT_PEEK_1_SEL		 (0xfL<<12)
+#define BNX2_COM_CPU_DEBUG_VECT_PEEK_2_VALUE		 (0x7ffL<<16)
+#define BNX2_COM_CPU_DEBUG_VECT_PEEK_2_PEEK_EN		 (1L<<27)
+#define BNX2_COM_CPU_DEBUG_VECT_PEEK_2_SEL		 (0xfL<<28)
+
+#define BNX2_COM_CPU_LAST_BRANCH_ADDR			0x00105048
+#define BNX2_COM_CPU_LAST_BRANCH_ADDR_TYPE		 (1L<<1)
+#define BNX2_COM_CPU_LAST_BRANCH_ADDR_TYPE_JUMP		 (0L<<1)
+#define BNX2_COM_CPU_LAST_BRANCH_ADDR_TYPE_BRANCH	 (1L<<1)
+#define BNX2_COM_CPU_LAST_BRANCH_ADDR_LBA		 (0x3fffffffL<<2)
+
+#define BNX2_COM_CPU_REG_FILE				0x00105200
+#define BNX2_COM_COMTQ_PFE_PFE_CTL			0x001052bc
+#define BNX2_COM_COMTQ_PFE_PFE_CTL_INC_USAGE_CNT	 (1L<<0)
+#define BNX2_COM_COMTQ_PFE_PFE_CTL_PFE_SIZE		 (0xfL<<4)
+#define BNX2_COM_COMTQ_PFE_PFE_CTL_PFE_SIZE_0		 (0L<<4)
+#define BNX2_COM_COMTQ_PFE_PFE_CTL_PFE_SIZE_1		 (1L<<4)
+#define BNX2_COM_COMTQ_PFE_PFE_CTL_PFE_SIZE_2		 (2L<<4)
+#define BNX2_COM_COMTQ_PFE_PFE_CTL_PFE_SIZE_3		 (3L<<4)
+#define BNX2_COM_COMTQ_PFE_PFE_CTL_PFE_SIZE_4		 (4L<<4)
+#define BNX2_COM_COMTQ_PFE_PFE_CTL_PFE_SIZE_5		 (5L<<4)
+#define BNX2_COM_COMTQ_PFE_PFE_CTL_PFE_SIZE_6		 (6L<<4)
+#define BNX2_COM_COMTQ_PFE_PFE_CTL_PFE_SIZE_7		 (7L<<4)
+#define BNX2_COM_COMTQ_PFE_PFE_CTL_PFE_SIZE_8		 (8L<<4)
+#define BNX2_COM_COMTQ_PFE_PFE_CTL_PFE_SIZE_9		 (9L<<4)
+#define BNX2_COM_COMTQ_PFE_PFE_CTL_PFE_SIZE_10		 (10L<<4)
+#define BNX2_COM_COMTQ_PFE_PFE_CTL_PFE_SIZE_11		 (11L<<4)
+#define BNX2_COM_COMTQ_PFE_PFE_CTL_PFE_SIZE_12		 (12L<<4)
+#define BNX2_COM_COMTQ_PFE_PFE_CTL_PFE_SIZE_13		 (13L<<4)
+#define BNX2_COM_COMTQ_PFE_PFE_CTL_PFE_SIZE_14		 (14L<<4)
+#define BNX2_COM_COMTQ_PFE_PFE_CTL_PFE_SIZE_15		 (15L<<4)
+#define BNX2_COM_COMTQ_PFE_PFE_CTL_PFE_COUNT		 (0xfL<<12)
+#define BNX2_COM_COMTQ_PFE_PFE_CTL_OFFSET		 (0x1ffL<<16)
+
+#define BNX2_COM_COMXQ					0x00105340
+#define BNX2_COM_COMXQ_FTQ_CMD				0x00105378
+#define BNX2_COM_COMXQ_FTQ_CMD_OFFSET			 (0x3ffL<<0)
+#define BNX2_COM_COMXQ_FTQ_CMD_WR_TOP			 (1L<<10)
+#define BNX2_COM_COMXQ_FTQ_CMD_WR_TOP_0			 (0L<<10)
+#define BNX2_COM_COMXQ_FTQ_CMD_WR_TOP_1			 (1L<<10)
+#define BNX2_COM_COMXQ_FTQ_CMD_SFT_RESET		 (1L<<25)
+#define BNX2_COM_COMXQ_FTQ_CMD_RD_DATA			 (1L<<26)
+#define BNX2_COM_COMXQ_FTQ_CMD_ADD_INTERVEN		 (1L<<27)
+#define BNX2_COM_COMXQ_FTQ_CMD_ADD_DATA			 (1L<<28)
+#define BNX2_COM_COMXQ_FTQ_CMD_INTERVENE_CLR		 (1L<<29)
+#define BNX2_COM_COMXQ_FTQ_CMD_POP			 (1L<<30)
+#define BNX2_COM_COMXQ_FTQ_CMD_BUSY			 (1L<<31)
+
+#define BNX2_COM_COMXQ_FTQ_CTL				0x0010537c
+#define BNX2_COM_COMXQ_FTQ_CTL_INTERVENE		 (1L<<0)
+#define BNX2_COM_COMXQ_FTQ_CTL_OVERFLOW			 (1L<<1)
+#define BNX2_COM_COMXQ_FTQ_CTL_FORCE_INTERVENE		 (1L<<2)
+#define BNX2_COM_COMXQ_FTQ_CTL_MAX_DEPTH		 (0x3ffL<<12)
+#define BNX2_COM_COMXQ_FTQ_CTL_CUR_DEPTH		 (0x3ffL<<22)
+
+#define BNX2_COM_COMTQ					0x00105380
+#define BNX2_COM_COMTQ_FTQ_CMD				0x001053b8
+#define BNX2_COM_COMTQ_FTQ_CMD_OFFSET			 (0x3ffL<<0)
+#define BNX2_COM_COMTQ_FTQ_CMD_WR_TOP			 (1L<<10)
+#define BNX2_COM_COMTQ_FTQ_CMD_WR_TOP_0			 (0L<<10)
+#define BNX2_COM_COMTQ_FTQ_CMD_WR_TOP_1			 (1L<<10)
+#define BNX2_COM_COMTQ_FTQ_CMD_SFT_RESET		 (1L<<25)
+#define BNX2_COM_COMTQ_FTQ_CMD_RD_DATA			 (1L<<26)
+#define BNX2_COM_COMTQ_FTQ_CMD_ADD_INTERVEN		 (1L<<27)
+#define BNX2_COM_COMTQ_FTQ_CMD_ADD_DATA			 (1L<<28)
+#define BNX2_COM_COMTQ_FTQ_CMD_INTERVENE_CLR		 (1L<<29)
+#define BNX2_COM_COMTQ_FTQ_CMD_POP			 (1L<<30)
+#define BNX2_COM_COMTQ_FTQ_CMD_BUSY			 (1L<<31)
+
+#define BNX2_COM_COMTQ_FTQ_CTL				0x001053bc
+#define BNX2_COM_COMTQ_FTQ_CTL_INTERVENE		 (1L<<0)
+#define BNX2_COM_COMTQ_FTQ_CTL_OVERFLOW			 (1L<<1)
+#define BNX2_COM_COMTQ_FTQ_CTL_FORCE_INTERVENE		 (1L<<2)
+#define BNX2_COM_COMTQ_FTQ_CTL_MAX_DEPTH		 (0x3ffL<<12)
+#define BNX2_COM_COMTQ_FTQ_CTL_CUR_DEPTH		 (0x3ffL<<22)
+
+#define BNX2_COM_COMQ					0x001053c0
+#define BNX2_COM_COMQ_FTQ_CMD				0x001053f8
+#define BNX2_COM_COMQ_FTQ_CMD_OFFSET			 (0x3ffL<<0)
+#define BNX2_COM_COMQ_FTQ_CMD_WR_TOP			 (1L<<10)
+#define BNX2_COM_COMQ_FTQ_CMD_WR_TOP_0			 (0L<<10)
+#define BNX2_COM_COMQ_FTQ_CMD_WR_TOP_1			 (1L<<10)
+#define BNX2_COM_COMQ_FTQ_CMD_SFT_RESET			 (1L<<25)
+#define BNX2_COM_COMQ_FTQ_CMD_RD_DATA			 (1L<<26)
+#define BNX2_COM_COMQ_FTQ_CMD_ADD_INTERVEN		 (1L<<27)
+#define BNX2_COM_COMQ_FTQ_CMD_ADD_DATA			 (1L<<28)
+#define BNX2_COM_COMQ_FTQ_CMD_INTERVENE_CLR		 (1L<<29)
+#define BNX2_COM_COMQ_FTQ_CMD_POP			 (1L<<30)
+#define BNX2_COM_COMQ_FTQ_CMD_BUSY			 (1L<<31)
+
+#define BNX2_COM_COMQ_FTQ_CTL				0x001053fc
+#define BNX2_COM_COMQ_FTQ_CTL_INTERVENE			 (1L<<0)
+#define BNX2_COM_COMQ_FTQ_CTL_OVERFLOW			 (1L<<1)
+#define BNX2_COM_COMQ_FTQ_CTL_FORCE_INTERVENE		 (1L<<2)
+#define BNX2_COM_COMQ_FTQ_CTL_MAX_DEPTH			 (0x3ffL<<12)
+#define BNX2_COM_COMQ_FTQ_CTL_CUR_DEPTH			 (0x3ffL<<22)
+
+#define BNX2_COM_SCRATCH				0x00120000
+
+#define BNX2_FW_RX_LOW_LATENCY				 0x00120058
+#define BNX2_FW_RX_DROP_COUNT				 0x00120084
+
+
+/*
+ *  cp_reg definition
+ *  offset: 0x180000
+ */
+#define BNX2_CP_CKSUM_ERROR_STATUS			0x00180000
+#define BNX2_CP_CKSUM_ERROR_STATUS_CALCULATED		 (0xffffL<<0)
+#define BNX2_CP_CKSUM_ERROR_STATUS_EXPECTED		 (0xffffL<<16)
+
+#define BNX2_CP_CPU_MODE				0x00185000
+#define BNX2_CP_CPU_MODE_LOCAL_RST			 (1L<<0)
+#define BNX2_CP_CPU_MODE_STEP_ENA			 (1L<<1)
+#define BNX2_CP_CPU_MODE_PAGE_0_DATA_ENA		 (1L<<2)
+#define BNX2_CP_CPU_MODE_PAGE_0_INST_ENA		 (1L<<3)
+#define BNX2_CP_CPU_MODE_MSG_BIT1			 (1L<<6)
+#define BNX2_CP_CPU_MODE_INTERRUPT_ENA			 (1L<<7)
+#define BNX2_CP_CPU_MODE_SOFT_HALT			 (1L<<10)
+#define BNX2_CP_CPU_MODE_BAD_DATA_HALT_ENA		 (1L<<11)
+#define BNX2_CP_CPU_MODE_BAD_INST_HALT_ENA		 (1L<<12)
+#define BNX2_CP_CPU_MODE_FIO_ABORT_HALT_ENA		 (1L<<13)
+#define BNX2_CP_CPU_MODE_SPAD_UNDERFLOW_HALT_ENA	 (1L<<15)
+
+#define BNX2_CP_CPU_STATE				0x00185004
+#define BNX2_CP_CPU_STATE_BREAKPOINT			 (1L<<0)
+#define BNX2_CP_CPU_STATE_BAD_INST_HALTED		 (1L<<2)
+#define BNX2_CP_CPU_STATE_PAGE_0_DATA_HALTED		 (1L<<3)
+#define BNX2_CP_CPU_STATE_PAGE_0_INST_HALTED		 (1L<<4)
+#define BNX2_CP_CPU_STATE_BAD_DATA_ADDR_HALTED		 (1L<<5)
+#define BNX2_CP_CPU_STATE_BAD_PC_HALTED			 (1L<<6)
+#define BNX2_CP_CPU_STATE_ALIGN_HALTED			 (1L<<7)
+#define BNX2_CP_CPU_STATE_FIO_ABORT_HALTED		 (1L<<8)
+#define BNX2_CP_CPU_STATE_SOFT_HALTED			 (1L<<10)
+#define BNX2_CP_CPU_STATE_SPAD_UNDERFLOW		 (1L<<11)
+#define BNX2_CP_CPU_STATE_INTERRRUPT			 (1L<<12)
+#define BNX2_CP_CPU_STATE_DATA_ACCESS_STALL		 (1L<<14)
+#define BNX2_CP_CPU_STATE_INST_FETCH_STALL		 (1L<<15)
+#define BNX2_CP_CPU_STATE_BLOCKED_READ			 (1L<<31)
+
+#define BNX2_CP_CPU_EVENT_MASK				0x00185008
+#define BNX2_CP_CPU_EVENT_MASK_BREAKPOINT_MASK		 (1L<<0)
+#define BNX2_CP_CPU_EVENT_MASK_BAD_INST_HALTED_MASK	 (1L<<2)
+#define BNX2_CP_CPU_EVENT_MASK_PAGE_0_DATA_HALTED_MASK	 (1L<<3)
+#define BNX2_CP_CPU_EVENT_MASK_PAGE_0_INST_HALTED_MASK	 (1L<<4)
+#define BNX2_CP_CPU_EVENT_MASK_BAD_DATA_ADDR_HALTED_MASK	 (1L<<5)
+#define BNX2_CP_CPU_EVENT_MASK_BAD_PC_HALTED_MASK	 (1L<<6)
+#define BNX2_CP_CPU_EVENT_MASK_ALIGN_HALTED_MASK	 (1L<<7)
+#define BNX2_CP_CPU_EVENT_MASK_FIO_ABORT_MASK		 (1L<<8)
+#define BNX2_CP_CPU_EVENT_MASK_SOFT_HALTED_MASK		 (1L<<10)
+#define BNX2_CP_CPU_EVENT_MASK_SPAD_UNDERFLOW_MASK	 (1L<<11)
+#define BNX2_CP_CPU_EVENT_MASK_INTERRUPT_MASK		 (1L<<12)
+
+#define BNX2_CP_CPU_PROGRAM_COUNTER			0x0018501c
+#define BNX2_CP_CPU_INSTRUCTION				0x00185020
+#define BNX2_CP_CPU_DATA_ACCESS				0x00185024
+#define BNX2_CP_CPU_INTERRUPT_ENABLE			0x00185028
+#define BNX2_CP_CPU_INTERRUPT_VECTOR			0x0018502c
+#define BNX2_CP_CPU_INTERRUPT_SAVED_PC			0x00185030
+#define BNX2_CP_CPU_HW_BREAKPOINT			0x00185034
+#define BNX2_CP_CPU_HW_BREAKPOINT_DISABLE		 (1L<<0)
+#define BNX2_CP_CPU_HW_BREAKPOINT_ADDRESS		 (0x3fffffffL<<2)
+
+#define BNX2_CP_CPU_DEBUG_VECT_PEEK			0x00185038
+#define BNX2_CP_CPU_DEBUG_VECT_PEEK_1_VALUE		 (0x7ffL<<0)
+#define BNX2_CP_CPU_DEBUG_VECT_PEEK_1_PEEK_EN		 (1L<<11)
+#define BNX2_CP_CPU_DEBUG_VECT_PEEK_1_SEL		 (0xfL<<12)
+#define BNX2_CP_CPU_DEBUG_VECT_PEEK_2_VALUE		 (0x7ffL<<16)
+#define BNX2_CP_CPU_DEBUG_VECT_PEEK_2_PEEK_EN		 (1L<<27)
+#define BNX2_CP_CPU_DEBUG_VECT_PEEK_2_SEL		 (0xfL<<28)
+
+#define BNX2_CP_CPU_LAST_BRANCH_ADDR			0x00185048
+#define BNX2_CP_CPU_LAST_BRANCH_ADDR_TYPE		 (1L<<1)
+#define BNX2_CP_CPU_LAST_BRANCH_ADDR_TYPE_JUMP		 (0L<<1)
+#define BNX2_CP_CPU_LAST_BRANCH_ADDR_TYPE_BRANCH	 (1L<<1)
+#define BNX2_CP_CPU_LAST_BRANCH_ADDR_LBA		 (0x3fffffffL<<2)
+
+#define BNX2_CP_CPU_REG_FILE				0x00185200
+#define BNX2_CP_CPQ_PFE_PFE_CTL				0x001853bc
+#define BNX2_CP_CPQ_PFE_PFE_CTL_INC_USAGE_CNT		 (1L<<0)
+#define BNX2_CP_CPQ_PFE_PFE_CTL_PFE_SIZE		 (0xfL<<4)
+#define BNX2_CP_CPQ_PFE_PFE_CTL_PFE_SIZE_0		 (0L<<4)
+#define BNX2_CP_CPQ_PFE_PFE_CTL_PFE_SIZE_1		 (1L<<4)
+#define BNX2_CP_CPQ_PFE_PFE_CTL_PFE_SIZE_2		 (2L<<4)
+#define BNX2_CP_CPQ_PFE_PFE_CTL_PFE_SIZE_3		 (3L<<4)
+#define BNX2_CP_CPQ_PFE_PFE_CTL_PFE_SIZE_4		 (4L<<4)
+#define BNX2_CP_CPQ_PFE_PFE_CTL_PFE_SIZE_5		 (5L<<4)
+#define BNX2_CP_CPQ_PFE_PFE_CTL_PFE_SIZE_6		 (6L<<4)
+#define BNX2_CP_CPQ_PFE_PFE_CTL_PFE_SIZE_7		 (7L<<4)
+#define BNX2_CP_CPQ_PFE_PFE_CTL_PFE_SIZE_8		 (8L<<4)
+#define BNX2_CP_CPQ_PFE_PFE_CTL_PFE_SIZE_9		 (9L<<4)
+#define BNX2_CP_CPQ_PFE_PFE_CTL_PFE_SIZE_10		 (10L<<4)
+#define BNX2_CP_CPQ_PFE_PFE_CTL_PFE_SIZE_11		 (11L<<4)
+#define BNX2_CP_CPQ_PFE_PFE_CTL_PFE_SIZE_12		 (12L<<4)
+#define BNX2_CP_CPQ_PFE_PFE_CTL_PFE_SIZE_13		 (13L<<4)
+#define BNX2_CP_CPQ_PFE_PFE_CTL_PFE_SIZE_14		 (14L<<4)
+#define BNX2_CP_CPQ_PFE_PFE_CTL_PFE_SIZE_15		 (15L<<4)
+#define BNX2_CP_CPQ_PFE_PFE_CTL_PFE_COUNT		 (0xfL<<12)
+#define BNX2_CP_CPQ_PFE_PFE_CTL_OFFSET			 (0x1ffL<<16)
+
+#define BNX2_CP_CPQ					0x001853c0
+#define BNX2_CP_CPQ_FTQ_CMD				0x001853f8
+#define BNX2_CP_CPQ_FTQ_CMD_OFFSET			 (0x3ffL<<0)
+#define BNX2_CP_CPQ_FTQ_CMD_WR_TOP			 (1L<<10)
+#define BNX2_CP_CPQ_FTQ_CMD_WR_TOP_0			 (0L<<10)
+#define BNX2_CP_CPQ_FTQ_CMD_WR_TOP_1			 (1L<<10)
+#define BNX2_CP_CPQ_FTQ_CMD_SFT_RESET			 (1L<<25)
+#define BNX2_CP_CPQ_FTQ_CMD_RD_DATA			 (1L<<26)
+#define BNX2_CP_CPQ_FTQ_CMD_ADD_INTERVEN		 (1L<<27)
+#define BNX2_CP_CPQ_FTQ_CMD_ADD_DATA			 (1L<<28)
+#define BNX2_CP_CPQ_FTQ_CMD_INTERVENE_CLR		 (1L<<29)
+#define BNX2_CP_CPQ_FTQ_CMD_POP				 (1L<<30)
+#define BNX2_CP_CPQ_FTQ_CMD_BUSY			 (1L<<31)
+
+#define BNX2_CP_CPQ_FTQ_CTL				0x001853fc
+#define BNX2_CP_CPQ_FTQ_CTL_INTERVENE			 (1L<<0)
+#define BNX2_CP_CPQ_FTQ_CTL_OVERFLOW			 (1L<<1)
+#define BNX2_CP_CPQ_FTQ_CTL_FORCE_INTERVENE		 (1L<<2)
+#define BNX2_CP_CPQ_FTQ_CTL_MAX_DEPTH			 (0x3ffL<<12)
+#define BNX2_CP_CPQ_FTQ_CTL_CUR_DEPTH			 (0x3ffL<<22)
+
+#define BNX2_CP_SCRATCH					0x001a0000
+
+#define BNX2_FW_MAX_ISCSI_CONN				 0x001a0080
+
+
+/*
+ *  mcp_reg definition
+ *  offset: 0x140000
+ */
+#define BNX2_MCP_MCP_CONTROL				0x00140080
+#define BNX2_MCP_MCP_CONTROL_SMBUS_SEL			 (1L<<30)
+#define BNX2_MCP_MCP_CONTROL_MCP_ISOLATE		 (1L<<31)
+
+#define BNX2_MCP_MCP_ATTENTION_STATUS			0x00140084
+#define BNX2_MCP_MCP_ATTENTION_STATUS_DRV_DOORBELL	 (1L<<29)
+#define BNX2_MCP_MCP_ATTENTION_STATUS_WATCHDOG_TIMEOUT	 (1L<<30)
+#define BNX2_MCP_MCP_ATTENTION_STATUS_CPU_EVENT		 (1L<<31)
+
+#define BNX2_MCP_MCP_HEARTBEAT_CONTROL			0x00140088
+#define BNX2_MCP_MCP_HEARTBEAT_CONTROL_MCP_HEARTBEAT_ENABLE	 (1L<<31)
+
+#define BNX2_MCP_MCP_HEARTBEAT_STATUS			0x0014008c
+#define BNX2_MCP_MCP_HEARTBEAT_STATUS_MCP_HEARTBEAT_PERIOD	 (0x7ffL<<0)
+#define BNX2_MCP_MCP_HEARTBEAT_STATUS_VALID		 (1L<<31)
+
+#define BNX2_MCP_MCP_HEARTBEAT				0x00140090
+#define BNX2_MCP_MCP_HEARTBEAT_MCP_HEARTBEAT_COUNT	 (0x3fffffffL<<0)
+#define BNX2_MCP_MCP_HEARTBEAT_MCP_HEARTBEAT_INC	 (1L<<30)
+#define BNX2_MCP_MCP_HEARTBEAT_MCP_HEARTBEAT_RESET	 (1L<<31)
+
+#define BNX2_MCP_WATCHDOG_RESET				0x00140094
+#define BNX2_MCP_WATCHDOG_RESET_WATCHDOG_RESET		 (1L<<31)
+
+#define BNX2_MCP_WATCHDOG_CONTROL			0x00140098
+#define BNX2_MCP_WATCHDOG_CONTROL_WATCHDOG_TIMEOUT	 (0xfffffffL<<0)
+#define BNX2_MCP_WATCHDOG_CONTROL_WATCHDOG_ATTN		 (1L<<29)
+#define BNX2_MCP_WATCHDOG_CONTROL_MCP_RST_ENABLE	 (1L<<30)
+#define BNX2_MCP_WATCHDOG_CONTROL_WATCHDOG_ENABLE	 (1L<<31)
+
+#define BNX2_MCP_ACCESS_LOCK				0x0014009c
+#define BNX2_MCP_ACCESS_LOCK_LOCK			 (1L<<31)
+
+#define BNX2_MCP_TOE_ID					0x001400a0
+#define BNX2_MCP_TOE_ID_FUNCTION_ID			 (1L<<31)
+
+#define BNX2_MCP_MAILBOX_CFG				0x001400a4
+#define BNX2_MCP_MAILBOX_CFG_MAILBOX_OFFSET		 (0x3fffL<<0)
+#define BNX2_MCP_MAILBOX_CFG_MAILBOX_SIZE		 (0xfffL<<20)
+
+#define BNX2_MCP_MAILBOX_CFG_OTHER_FUNC			0x001400a8
+#define BNX2_MCP_MAILBOX_CFG_OTHER_FUNC_MAILBOX_OFFSET	 (0x3fffL<<0)
+#define BNX2_MCP_MAILBOX_CFG_OTHER_FUNC_MAILBOX_SIZE	 (0xfffL<<20)
+
+#define BNX2_MCP_MCP_DOORBELL				0x001400ac
+#define BNX2_MCP_MCP_DOORBELL_MCP_DOORBELL		 (1L<<31)
+
+#define BNX2_MCP_DRIVER_DOORBELL			0x001400b0
+#define BNX2_MCP_DRIVER_DOORBELL_DRIVER_DOORBELL	 (1L<<31)
+
+#define BNX2_MCP_DRIVER_DOORBELL_OTHER_FUNC		0x001400b4
+#define BNX2_MCP_DRIVER_DOORBELL_OTHER_FUNC_DRIVER_DOORBELL	 (1L<<31)
+
+#define BNX2_MCP_CPU_MODE				0x00145000
+#define BNX2_MCP_CPU_MODE_LOCAL_RST			 (1L<<0)
+#define BNX2_MCP_CPU_MODE_STEP_ENA			 (1L<<1)
+#define BNX2_MCP_CPU_MODE_PAGE_0_DATA_ENA		 (1L<<2)
+#define BNX2_MCP_CPU_MODE_PAGE_0_INST_ENA		 (1L<<3)
+#define BNX2_MCP_CPU_MODE_MSG_BIT1			 (1L<<6)
+#define BNX2_MCP_CPU_MODE_INTERRUPT_ENA			 (1L<<7)
+#define BNX2_MCP_CPU_MODE_SOFT_HALT			 (1L<<10)
+#define BNX2_MCP_CPU_MODE_BAD_DATA_HALT_ENA		 (1L<<11)
+#define BNX2_MCP_CPU_MODE_BAD_INST_HALT_ENA		 (1L<<12)
+#define BNX2_MCP_CPU_MODE_FIO_ABORT_HALT_ENA		 (1L<<13)
+#define BNX2_MCP_CPU_MODE_SPAD_UNDERFLOW_HALT_ENA	 (1L<<15)
+
+#define BNX2_MCP_CPU_STATE				0x00145004
+#define BNX2_MCP_CPU_STATE_BREAKPOINT			 (1L<<0)
+#define BNX2_MCP_CPU_STATE_BAD_INST_HALTED		 (1L<<2)
+#define BNX2_MCP_CPU_STATE_PAGE_0_DATA_HALTED		 (1L<<3)
+#define BNX2_MCP_CPU_STATE_PAGE_0_INST_HALTED		 (1L<<4)
+#define BNX2_MCP_CPU_STATE_BAD_DATA_ADDR_HALTED		 (1L<<5)
+#define BNX2_MCP_CPU_STATE_BAD_PC_HALTED		 (1L<<6)
+#define BNX2_MCP_CPU_STATE_ALIGN_HALTED			 (1L<<7)
+#define BNX2_MCP_CPU_STATE_FIO_ABORT_HALTED		 (1L<<8)
+#define BNX2_MCP_CPU_STATE_SOFT_HALTED			 (1L<<10)
+#define BNX2_MCP_CPU_STATE_SPAD_UNDERFLOW		 (1L<<11)
+#define BNX2_MCP_CPU_STATE_INTERRRUPT			 (1L<<12)
+#define BNX2_MCP_CPU_STATE_DATA_ACCESS_STALL		 (1L<<14)
+#define BNX2_MCP_CPU_STATE_INST_FETCH_STALL		 (1L<<15)
+#define BNX2_MCP_CPU_STATE_BLOCKED_READ			 (1L<<31)
+
+#define BNX2_MCP_CPU_EVENT_MASK				0x00145008
+#define BNX2_MCP_CPU_EVENT_MASK_BREAKPOINT_MASK		 (1L<<0)
+#define BNX2_MCP_CPU_EVENT_MASK_BAD_INST_HALTED_MASK	 (1L<<2)
+#define BNX2_MCP_CPU_EVENT_MASK_PAGE_0_DATA_HALTED_MASK	 (1L<<3)
+#define BNX2_MCP_CPU_EVENT_MASK_PAGE_0_INST_HALTED_MASK	 (1L<<4)
+#define BNX2_MCP_CPU_EVENT_MASK_BAD_DATA_ADDR_HALTED_MASK	 (1L<<5)
+#define BNX2_MCP_CPU_EVENT_MASK_BAD_PC_HALTED_MASK	 (1L<<6)
+#define BNX2_MCP_CPU_EVENT_MASK_ALIGN_HALTED_MASK	 (1L<<7)
+#define BNX2_MCP_CPU_EVENT_MASK_FIO_ABORT_MASK		 (1L<<8)
+#define BNX2_MCP_CPU_EVENT_MASK_SOFT_HALTED_MASK	 (1L<<10)
+#define BNX2_MCP_CPU_EVENT_MASK_SPAD_UNDERFLOW_MASK	 (1L<<11)
+#define BNX2_MCP_CPU_EVENT_MASK_INTERRUPT_MASK		 (1L<<12)
+
+#define BNX2_MCP_CPU_PROGRAM_COUNTER			0x0014501c
+#define BNX2_MCP_CPU_INSTRUCTION			0x00145020
+#define BNX2_MCP_CPU_DATA_ACCESS			0x00145024
+#define BNX2_MCP_CPU_INTERRUPT_ENABLE			0x00145028
+#define BNX2_MCP_CPU_INTERRUPT_VECTOR			0x0014502c
+#define BNX2_MCP_CPU_INTERRUPT_SAVED_PC			0x00145030
+#define BNX2_MCP_CPU_HW_BREAKPOINT			0x00145034
+#define BNX2_MCP_CPU_HW_BREAKPOINT_DISABLE		 (1L<<0)
+#define BNX2_MCP_CPU_HW_BREAKPOINT_ADDRESS		 (0x3fffffffL<<2)
+
+#define BNX2_MCP_CPU_DEBUG_VECT_PEEK			0x00145038
+#define BNX2_MCP_CPU_DEBUG_VECT_PEEK_1_VALUE		 (0x7ffL<<0)
+#define BNX2_MCP_CPU_DEBUG_VECT_PEEK_1_PEEK_EN		 (1L<<11)
+#define BNX2_MCP_CPU_DEBUG_VECT_PEEK_1_SEL		 (0xfL<<12)
+#define BNX2_MCP_CPU_DEBUG_VECT_PEEK_2_VALUE		 (0x7ffL<<16)
+#define BNX2_MCP_CPU_DEBUG_VECT_PEEK_2_PEEK_EN		 (1L<<27)
+#define BNX2_MCP_CPU_DEBUG_VECT_PEEK_2_SEL		 (0xfL<<28)
+
+#define BNX2_MCP_CPU_LAST_BRANCH_ADDR			0x00145048
+#define BNX2_MCP_CPU_LAST_BRANCH_ADDR_TYPE		 (1L<<1)
+#define BNX2_MCP_CPU_LAST_BRANCH_ADDR_TYPE_JUMP		 (0L<<1)
+#define BNX2_MCP_CPU_LAST_BRANCH_ADDR_TYPE_BRANCH	 (1L<<1)
+#define BNX2_MCP_CPU_LAST_BRANCH_ADDR_LBA		 (0x3fffffffL<<2)
+
+#define BNX2_MCP_CPU_REG_FILE				0x00145200
+#define BNX2_MCP_MCPQ					0x001453c0
+#define BNX2_MCP_MCPQ_FTQ_CMD				0x001453f8
+#define BNX2_MCP_MCPQ_FTQ_CMD_OFFSET			 (0x3ffL<<0)
+#define BNX2_MCP_MCPQ_FTQ_CMD_WR_TOP			 (1L<<10)
+#define BNX2_MCP_MCPQ_FTQ_CMD_WR_TOP_0			 (0L<<10)
+#define BNX2_MCP_MCPQ_FTQ_CMD_WR_TOP_1			 (1L<<10)
+#define BNX2_MCP_MCPQ_FTQ_CMD_SFT_RESET			 (1L<<25)
+#define BNX2_MCP_MCPQ_FTQ_CMD_RD_DATA			 (1L<<26)
+#define BNX2_MCP_MCPQ_FTQ_CMD_ADD_INTERVEN		 (1L<<27)
+#define BNX2_MCP_MCPQ_FTQ_CMD_ADD_DATA			 (1L<<28)
+#define BNX2_MCP_MCPQ_FTQ_CMD_INTERVENE_CLR		 (1L<<29)
+#define BNX2_MCP_MCPQ_FTQ_CMD_POP			 (1L<<30)
+#define BNX2_MCP_MCPQ_FTQ_CMD_BUSY			 (1L<<31)
+
+#define BNX2_MCP_MCPQ_FTQ_CTL				0x001453fc
+#define BNX2_MCP_MCPQ_FTQ_CTL_INTERVENE			 (1L<<0)
+#define BNX2_MCP_MCPQ_FTQ_CTL_OVERFLOW			 (1L<<1)
+#define BNX2_MCP_MCPQ_FTQ_CTL_FORCE_INTERVENE		 (1L<<2)
+#define BNX2_MCP_MCPQ_FTQ_CTL_MAX_DEPTH			 (0x3ffL<<12)
+#define BNX2_MCP_MCPQ_FTQ_CTL_CUR_DEPTH			 (0x3ffL<<22)
+
+#define BNX2_MCP_ROM					0x00150000
+#define BNX2_MCP_SCRATCH				0x00160000
+#define BNX2_MCP_STATE_P1				 0x0016f9c8
+#define BNX2_MCP_STATE_P0				 0x0016fdc8
+#define BNX2_MCP_STATE_P1_5708				 0x001699c8
+#define BNX2_MCP_STATE_P0_5708				 0x00169dc8
+
+#define BNX2_SHM_HDR_SIGNATURE				BNX2_MCP_SCRATCH
+#define BNX2_SHM_HDR_SIGNATURE_SIG_MASK			 0xffff0000
+#define BNX2_SHM_HDR_SIGNATURE_SIG			 0x53530000
+#define BNX2_SHM_HDR_SIGNATURE_VER_MASK			 0x000000ff
+#define BNX2_SHM_HDR_SIGNATURE_VER_ONE			 0x00000001
+
+#define BNX2_SHM_HDR_ADDR_0				BNX2_MCP_SCRATCH + 4
+#define BNX2_SHM_HDR_ADDR_1				BNX2_MCP_SCRATCH + 8
+
+
+#define NUM_MC_HASH_REGISTERS   8
+
+
+/* PHY_ID1: bits 31-16; PHY_ID2: bits 15-0.  */
+#define PHY_BCM5706_PHY_ID                          0x00206160
+
+#define PHY_ID(id)                                  ((id) & 0xfffffff0)
+#define PHY_REV_ID(id)                              ((id) & 0xf)
+
+/* 5708 Serdes PHY registers */
+
+#define BCM5708S_BMCR_FORCE_2500		0x20
+
+#define BCM5708S_UP1				0xb
+
+#define BCM5708S_UP1_2G5			0x1
+
+#define BCM5708S_BLK_ADDR			0x1f
+
+#define BCM5708S_BLK_ADDR_DIG			0x0000
+#define BCM5708S_BLK_ADDR_DIG3			0x0002
+#define BCM5708S_BLK_ADDR_TX_MISC		0x0005
+
+/* Digital Block */
+#define BCM5708S_1000X_CTL1			0x10
+
+#define BCM5708S_1000X_CTL1_FIBER_MODE		0x0001
+#define BCM5708S_1000X_CTL1_AUTODET_EN		0x0010
+
+#define BCM5708S_1000X_CTL2			0x11
+
+#define BCM5708S_1000X_CTL2_PLLEL_DET_EN	0x0001
+
+#define BCM5708S_1000X_STAT1			0x14
+
+#define BCM5708S_1000X_STAT1_SGMII		0x0001
+#define BCM5708S_1000X_STAT1_LINK		0x0002
+#define BCM5708S_1000X_STAT1_FD			0x0004
+#define BCM5708S_1000X_STAT1_SPEED_MASK		0x0018
+#define BCM5708S_1000X_STAT1_SPEED_10		0x0000
+#define BCM5708S_1000X_STAT1_SPEED_100		0x0008
+#define BCM5708S_1000X_STAT1_SPEED_1G		0x0010
+#define BCM5708S_1000X_STAT1_SPEED_2G5		0x0018
+#define BCM5708S_1000X_STAT1_TX_PAUSE		0x0020
+#define BCM5708S_1000X_STAT1_RX_PAUSE		0x0040
+
+/* Digital3 Block */
+#define BCM5708S_DIG_3_0			0x10
+
+#define BCM5708S_DIG_3_0_USE_IEEE		0x0001
+
+/* Tx/Misc Block */
+#define BCM5708S_TX_ACTL1			0x15
+
+#define BCM5708S_TX_ACTL1_DRIVER_VCM		0x30
+
+#define BCM5708S_TX_ACTL3			0x17
+
+#define MII_BNX2_DSP_RW_PORT			0x15
+#define MII_BNX2_DSP_ADDRESS			0x17
+#define MII_BNX2_DSP_EXPAND_REG			 0x0f00
+#define MII_EXPAND_REG1				  (MII_BNX2_DSP_EXPAND_REG | 1)
+#define MII_EXPAND_REG1_RUDI_C			   0x20
+#define MII_EXPAND_SERDES_CTL			  (MII_BNX2_DSP_EXPAND_REG | 3)
+
+#define MII_BNX2_MISC_SHADOW			0x1c
+#define MISC_SHDW_AN_DBG			 0x6800
+#define MISC_SHDW_AN_DBG_NOSYNC			  0x0002
+#define MISC_SHDW_AN_DBG_RUDI_INVALID		  0x0100
+#define MISC_SHDW_MODE_CTL			 0x7c00
+#define MISC_SHDW_MODE_CTL_SIG_DET		  0x0010
+
+#define MII_BNX2_BLK_ADDR			0x1f
+#define MII_BNX2_BLK_ADDR_IEEE0			 0x0000
+#define MII_BNX2_BLK_ADDR_GP_STATUS		 0x8120
+#define MII_BNX2_GP_TOP_AN_STATUS1		  0x1b
+#define MII_BNX2_GP_TOP_AN_SPEED_MSK		   0x3f00
+#define MII_BNX2_GP_TOP_AN_SPEED_10		   0x0000
+#define MII_BNX2_GP_TOP_AN_SPEED_100		   0x0100
+#define MII_BNX2_GP_TOP_AN_SPEED_1G		   0x0200
+#define MII_BNX2_GP_TOP_AN_SPEED_2_5G		   0x0300
+#define MII_BNX2_GP_TOP_AN_SPEED_1GKV		   0x0d00
+#define MII_BNX2_GP_TOP_AN_FD			   0x8
+#define MII_BNX2_BLK_ADDR_SERDES_DIG		 0x8300
+#define MII_BNX2_SERDES_DIG_1000XCTL1		  0x10
+#define MII_BNX2_SD_1000XCTL1_FIBER		   0x01
+#define MII_BNX2_SD_1000XCTL1_AUTODET		   0x10
+#define MII_BNX2_SERDES_DIG_MISC1		  0x18
+#define MII_BNX2_SD_MISC1_FORCE_MSK		   0xf
+#define MII_BNX2_SD_MISC1_FORCE_2_5G		   0x0
+#define MII_BNX2_SD_MISC1_FORCE			   0x10
+#define MII_BNX2_BLK_ADDR_OVER1G		 0x8320
+#define MII_BNX2_OVER1G_UP1			  0x19
+#define MII_BNX2_BLK_ADDR_BAM_NXTPG		 0x8350
+#define MII_BNX2_BAM_NXTPG_CTL			  0x10
+#define MII_BNX2_NXTPG_CTL_BAM			   0x1
+#define MII_BNX2_NXTPG_CTL_T2			   0x2
+#define MII_BNX2_BLK_ADDR_CL73_USERB0		 0x8370
+#define MII_BNX2_CL73_BAM_CTL1			  0x12
+#define MII_BNX2_CL73_BAM_EN			   0x8000
+#define MII_BNX2_CL73_BAM_STA_MGR_EN		   0x4000
+#define MII_BNX2_CL73_BAM_NP_AFT_BP_EN		   0x2000
+#define MII_BNX2_BLK_ADDR_AER			 0xffd0
+#define MII_BNX2_AER_AER			  0x1e
+#define MII_BNX2_AER_AER_AN_MMD			   0x3800
+#define MII_BNX2_BLK_ADDR_COMBO_IEEEB0		 0xffe0
+
+#define MIN_ETHERNET_PACKET_SIZE	60
+#define MAX_ETHERNET_PACKET_SIZE	1514
+#define MAX_ETHERNET_JUMBO_PACKET_SIZE	9014
+
+#define BNX2_RX_COPY_THRESH		128
+
+#define BNX2_MISC_ENABLE_DEFAULT	0x17ffffff
+
+#define BNX2_START_UNICAST_ADDRESS_INDEX	4
+#define BNX2_END_UNICAST_ADDRESS_INDEX		7
+#define BNX2_MAX_UNICAST_ADDRESSES     	(BNX2_END_UNICAST_ADDRESS_INDEX - \
+					 BNX2_START_UNICAST_ADDRESS_INDEX + 1)
+
+#define DMA_READ_CHANS	5
+#define DMA_WRITE_CHANS	3
+
+/* Use CPU native page size up to 16K for the ring sizes.  */
+#if (PAGE_SHIFT > 14)
+#define BCM_PAGE_BITS	14
+#else
+#define BCM_PAGE_BITS	PAGE_SHIFT
+#endif
+#define BCM_PAGE_SIZE	(1 << BCM_PAGE_BITS)
+
+#define TX_DESC_CNT  (BCM_PAGE_SIZE / sizeof(struct tx_bd))
+#define MAX_TX_DESC_CNT (TX_DESC_CNT - 1)
+
+#define MAX_RX_RINGS	16
+#define MAX_RX_PG_RINGS	64
+#define RX_DESC_CNT  (BCM_PAGE_SIZE / sizeof(struct rx_bd))
+#define MAX_RX_DESC_CNT (RX_DESC_CNT - 1)
+#define MAX_TOTAL_RX_DESC_CNT (MAX_RX_DESC_CNT * MAX_RX_RINGS)
+#define MAX_TOTAL_RX_PG_DESC_CNT (MAX_RX_DESC_CNT * MAX_RX_PG_RINGS)
+
+#define NEXT_TX_BD(x) (((x) & (MAX_TX_DESC_CNT - 1)) ==			\
+		(MAX_TX_DESC_CNT - 1)) ?				\
+	(x) + 2 : (x) + 1
+
+#define TX_RING_IDX(x) ((x) & MAX_TX_DESC_CNT)
+
+#define NEXT_RX_BD(x) (((x) & (MAX_RX_DESC_CNT - 1)) ==			\
+		(MAX_RX_DESC_CNT - 1)) ?				\
+	(x) + 2 : (x) + 1
+
+#define RX_RING_IDX(x) ((x) & bp->rx_max_ring_idx)
+#define RX_PG_RING_IDX(x) ((x) & bp->rx_max_pg_ring_idx)
+
+#define RX_RING(x) (((x) & ~MAX_RX_DESC_CNT) >> (BCM_PAGE_BITS - 4))
+#define RX_IDX(x) ((x) & MAX_RX_DESC_CNT)
+
+/* Context size. */
+#define CTX_SHIFT                   7
+#define CTX_SIZE                    (1 << CTX_SHIFT)
+#define CTX_MASK                    (CTX_SIZE - 1)
+#define GET_CID_ADDR(_cid)          ((_cid) << CTX_SHIFT)
+#define GET_CID(_cid_addr)          ((_cid_addr) >> CTX_SHIFT)
+
+#define PHY_CTX_SHIFT               6
+#define PHY_CTX_SIZE                (1 << PHY_CTX_SHIFT)
+#define PHY_CTX_MASK                (PHY_CTX_SIZE - 1)
+#define GET_PCID_ADDR(_pcid)        ((_pcid) << PHY_CTX_SHIFT)
+#define GET_PCID(_pcid_addr)        ((_pcid_addr) >> PHY_CTX_SHIFT)
+
+#define MB_KERNEL_CTX_SHIFT         8
+#define MB_KERNEL_CTX_SIZE          (1 << MB_KERNEL_CTX_SHIFT)
+#define MB_KERNEL_CTX_MASK          (MB_KERNEL_CTX_SIZE - 1)
+#define MB_GET_CID_ADDR(_cid)       (0x10000 + ((_cid) << MB_KERNEL_CTX_SHIFT))
+
+#define MAX_CID_CNT                 0x4000
+#define MAX_CID_ADDR                (GET_CID_ADDR(MAX_CID_CNT))
+#define INVALID_CID_ADDR            0xffffffff
+
+#define TX_CID		16
+#define TX_TSS_CID	32
+#define RX_CID		0
+#define RX_RSS_CID	4
+#define RX_MAX_RSS_RINGS	7
+#define RX_MAX_RINGS		(RX_MAX_RSS_RINGS + 1)
+#define TX_MAX_TSS_RINGS	7
+#define TX_MAX_RINGS		(TX_MAX_TSS_RINGS + 1)
+
+#define MB_TX_CID_ADDR	MB_GET_CID_ADDR(TX_CID)
+#define MB_RX_CID_ADDR	MB_GET_CID_ADDR(RX_CID)
+
+#if defined(__VMKLNX__) && defined(__VMKNETDDI_QUEUEOPS__)
+#define NETQUEUE_KWQ_CID                97
+#define NETQUEUE_KCQ_CID                100
+#endif
+
+struct sw_bd {
+	struct sk_buff		*skb;
+	struct l2_fhdr		*desc;
+	DEFINE_DMA_UNMAP_ADDR(mapping);
+};
+
+struct sw_pg {
+	struct page		*page;
+	DEFINE_DMA_UNMAP_ADDR(mapping);
+};
+
+struct sw_tx_bd {
+	struct sk_buff		*skb;
+	unsigned short		is_gso;
+	unsigned short		nr_frags;
+	DEFINE_DMA_UNMAP_ADDR(mapping);
+};
+
+#define SW_RXBD_RING_SIZE (sizeof(struct sw_bd) * RX_DESC_CNT)
+#define SW_RXPG_RING_SIZE (sizeof(struct sw_pg) * RX_DESC_CNT)
+#define RXBD_RING_SIZE (sizeof(struct rx_bd) * RX_DESC_CNT)
+#define SW_TXBD_RING_SIZE (sizeof(struct sw_tx_bd) * TX_DESC_CNT)
+#define TXBD_RING_SIZE (sizeof(struct tx_bd) * TX_DESC_CNT)
+
+/* Buffered flash (Atmel: AT45DB011B) specific information */
+#define SEEPROM_PAGE_BITS			2
+#define SEEPROM_PHY_PAGE_SIZE			(1 << SEEPROM_PAGE_BITS)
+#define SEEPROM_BYTE_ADDR_MASK			(SEEPROM_PHY_PAGE_SIZE-1)
+#define SEEPROM_PAGE_SIZE			4
+#define SEEPROM_TOTAL_SIZE			65536
+
+#define BUFFERED_FLASH_PAGE_BITS		9
+#define BUFFERED_FLASH_PHY_PAGE_SIZE		(1 << BUFFERED_FLASH_PAGE_BITS)
+#define BUFFERED_FLASH_BYTE_ADDR_MASK		(BUFFERED_FLASH_PHY_PAGE_SIZE-1)
+#define BUFFERED_FLASH_PAGE_SIZE		264
+#define BUFFERED_FLASH_TOTAL_SIZE		0x21000
+
+#define SAIFUN_FLASH_PAGE_BITS			8
+#define SAIFUN_FLASH_PHY_PAGE_SIZE		(1 << SAIFUN_FLASH_PAGE_BITS)
+#define SAIFUN_FLASH_BYTE_ADDR_MASK		(SAIFUN_FLASH_PHY_PAGE_SIZE-1)
+#define SAIFUN_FLASH_PAGE_SIZE			256
+#define SAIFUN_FLASH_BASE_TOTAL_SIZE		65536
+
+#define ST_MICRO_FLASH_PAGE_BITS		8
+#define ST_MICRO_FLASH_PHY_PAGE_SIZE		(1 << ST_MICRO_FLASH_PAGE_BITS)
+#define ST_MICRO_FLASH_BYTE_ADDR_MASK		(ST_MICRO_FLASH_PHY_PAGE_SIZE-1)
+#define ST_MICRO_FLASH_PAGE_SIZE		256
+#define ST_MICRO_FLASH_BASE_TOTAL_SIZE		65536
+
+#define BCM5709_FLASH_PAGE_BITS			8
+#define BCM5709_FLASH_PHY_PAGE_SIZE		(1 << BCM5709_FLASH_PAGE_BITS)
+#define BCM5709_FLASH_BYTE_ADDR_MASK		(BCM5709_FLASH_PHY_PAGE_SIZE-1)
+#define BCM5709_FLASH_PAGE_SIZE			256
+
+#define NVRAM_TIMEOUT_COUNT			30000
+
+
+#define FLASH_STRAP_MASK			(BNX2_NVM_CFG1_FLASH_MODE   | \
+						 BNX2_NVM_CFG1_BUFFER_MODE  | \
+						 BNX2_NVM_CFG1_PROTECT_MODE | \
+						 BNX2_NVM_CFG1_FLASH_SIZE)
+
+#define FLASH_BACKUP_STRAP_MASK			(0xf << 26)
+
+struct flash_spec {
+	u32 strapping;
+	u32 config1;
+	u32 config2;
+	u32 config3;
+	u32 write1;
+	u32 flags;
+#define BNX2_NV_BUFFERED	0x00000001
+#define BNX2_NV_TRANSLATE	0x00000002
+#define BNX2_NV_WREN		0x00000004
+	u32 page_bits;
+	u32 page_size;
+	u32 addr_mask;
+	u32 total_size;
+	u8  *name;
+};
+
+#define BNX2_MAX_MSIX_HW_VEC	9
+#define BNX2_MAX_MSIX_VEC	9
+#ifdef BCM_CNIC
+#define BNX2_MIN_MSIX_VEC	2
+#else
+#define BNX2_MIN_MSIX_VEC	1
+#endif
+
+struct bnx2_irq {
+#if (LINUX_VERSION_CODE >= 0x20613) || (defined(__VMKLNX__) && (VMWARE_ESX_DDK_VERSION >= 40000))
+	irq_handler_t	handler;
+#else
+	irqreturn_t	(*handler)(int, void *, struct pt_regs *);
+#endif
+	unsigned int	vector;
+	u8		requested;
+	char		name[16];
+};
+
+struct bnx2_tx_ring_info {
+	u32			tx_prod_bseq;
+	u16			tx_prod;
+	u32			tx_bidx_addr;
+	u32			tx_bseq_addr;
+
+	struct tx_bd		*tx_desc_ring;
+	struct sw_tx_bd		*tx_buf_ring;
+
+	u16			tx_cons;
+	u16			hw_tx_cons;
+
+	dma_addr_t		tx_desc_mapping;
+};
+
+struct bnx2_rx_ring_info {
+	u32			rx_prod_bseq;
+	u16			rx_prod;
+	u16			rx_cons;
+
+	u32			rx_bidx_addr;
+	u32			rx_bseq_addr;
+	u32			rx_pg_bidx_addr;
+
+	u16			rx_pg_prod;
+	u16			rx_pg_cons;
+
+	struct sw_bd		*rx_buf_ring;
+	struct rx_bd		*rx_desc_ring[MAX_RX_RINGS];
+	struct sw_pg		*rx_pg_ring;
+	struct rx_bd		*rx_pg_desc_ring[MAX_RX_PG_RINGS];
+
+	dma_addr_t		rx_desc_mapping[MAX_RX_RINGS];
+	dma_addr_t		rx_pg_desc_mapping[MAX_RX_PG_RINGS];
+};
+
+struct bnx2_napi {
+#ifdef BNX2_NEW_NAPI
+	struct napi_struct	napi		____cacheline_aligned;
+#endif
+	struct bnx2		*bp;
+	union {
+		struct status_block		*msi;
+		struct status_block_msix	*msix;
+	} status_blk;
+	volatile u16		*hw_tx_cons_ptr;
+	volatile u16		*hw_rx_cons_ptr;
+	u32 			last_status_idx;
+	u32			int_num;
+
+	u32			cnic_tag;
+	int			cnic_present;
+
+	struct bnx2_rx_ring_info	rx_ring;
+	struct bnx2_tx_ring_info	tx_ring;
+
+#if defined(__VMKLNX__) && defined(__VMKNETDDI_QUEUEOPS__)
+	u8			rx_queue_allocated;
+	u8			tx_queue_allocated;
+	u8			rx_queue_active;
+	u8			tx_queue_active;
+
+	vmknetddi_queueops_filter_class_t class;
+	u16			vlan_id;
+	u8			mac_filter_addr[6];
+	u8			netq_flags;
+#define BNX2_NETQ_FREE_TX_QUEUE_STATE	0x0001
+	u8			netq_state;
+#define BNX2_NETQ_SUSPENDED		0x0004
+#define BNX2_NETQ_RX_FILTER_APPLIED	0x0010
+	u32			tx_packets_sent;
+	u32			tx_packets_processed;
+
+	struct net_device_stats	stats;
+#endif
+};
+
+#if defined(__VMKLNX__) && defined(__VMKNETDDI_QUEUEOPS__)
+struct netq_dma {
+	int			num_pages;
+	void			**pg_arr;
+	dma_addr_t		*pg_map_arr;
+	int			pgtbl_size;
+	u32			*pgtbl;
+	dma_addr_t		pgtbl_map;
+};
+
+struct netq_ctx {
+	u32			cid;
+	void			*ctx;
+	dma_addr_t		mapping;
+};
+#endif
+
+struct bnx2 {
+	/* Fields used in the tx and intr/napi performance paths are grouped */
+	/* together in the beginning of the structure. */
+	void __iomem		*regview;
+
+	struct net_device	*dev;
+	struct pci_dev		*pdev;
+
+	atomic_t		intr_sem;
+
+	u32			flags;
+#define BNX2_FLAG_PCIX			0x00000001
+#define BNX2_FLAG_PCI_32BIT		0x00000002
+#define BNX2_FLAG_MSIX_CAP		0x00000004
+#define BNX2_FLAG_NO_WOL		0x00000008
+#define BNX2_FLAG_USING_MSI		0x00000020
+#define BNX2_FLAG_ASF_ENABLE		0x00000040
+#define BNX2_FLAG_MSI_CAP		0x00000080
+#define BNX2_FLAG_ONE_SHOT_MSI		0x00000100
+#define BNX2_FLAG_PCIE			0x00000200
+#define BNX2_FLAG_USING_MSIX		0x00000400
+#define BNX2_FLAG_USING_MSI_OR_MSIX	(BNX2_FLAG_USING_MSI | \
+					 BNX2_FLAG_USING_MSIX)
+#define BNX2_FLAG_JUMBO_BROKEN		0x00000800
+#define BNX2_FLAG_CAN_KEEP_VLAN		0x00001000
+#define BNX2_FLAG_BROKEN_STATS		0x00002000
+#define BNX2_FLAG_AER_ENABLED		0x00004000
+
+	struct bnx2_napi	bnx2_napi[BNX2_MAX_MSIX_VEC];
+
+#ifdef BCM_VLAN
+	struct			vlan_group *vlgrp;
+#endif
+
+	u32			rx_buf_use_size;	/* useable size */
+	u32			rx_buf_size;		/* with alignment */
+	u32			rx_copy_thresh;
+	u32			rx_jumbo_thresh;
+	u32			rx_max_ring_idx;
+	u32			rx_max_pg_ring_idx;
+
+	u32			rx_csum;
+
+	/* TX constants */
+	int		tx_ring_size;
+	u32		tx_wake_thresh;
+
+	struct cnic_ops	__rcu	*cnic_ops;
+	void			*cnic_data;
+
+	/* End of fields used in the performance code paths. */
+
+	unsigned int		current_interval;
+#define BNX2_TIMER_INTERVAL		HZ
+#define BNX2_SERDES_AN_TIMEOUT		(HZ / 3)
+#define BNX2_SERDES_FORCED_TIMEOUT	(HZ / 10)
+
+	struct			timer_list timer;
+#if (LINUX_VERSION_CODE >= 0x020600)
+	struct work_struct	reset_task;
+#else
+	struct tq_struct	reset_task;
+#endif
+
+	/* Used to synchronize phy accesses. */
+	spinlock_t		phy_lock;
+	spinlock_t		indirect_lock;
+
+	u32			phy_flags;
+#define BNX2_PHY_FLAG_SERDES			0x00000001
+#define BNX2_PHY_FLAG_CRC_FIX			0x00000002
+#define BNX2_PHY_FLAG_PARALLEL_DETECT		0x00000004
+#define BNX2_PHY_FLAG_2_5G_CAPABLE		0x00000008
+#define BNX2_PHY_FLAG_INT_MODE_MASK		0x00000300
+#define BNX2_PHY_FLAG_INT_MODE_AUTO_POLLING	0x00000100
+#define BNX2_PHY_FLAG_INT_MODE_LINK_READY	0x00000200
+#define BNX2_PHY_FLAG_DIS_EARLY_DAC		0x00000400
+#define BNX2_PHY_FLAG_REMOTE_PHY_CAP		0x00000800
+#define BNX2_PHY_FLAG_FORCED_DOWN		0x00001000
+#define BNX2_PHY_FLAG_NO_PARALLEL		0x00002000
+
+	u32			mii_bmcr;
+	u32			mii_bmsr;
+	u32			mii_bmsr1;
+	u32			mii_adv;
+	u32			mii_lpa;
+	u32			mii_up1;
+
+	u32			chip_id;
+	/* chip num:16-31, rev:12-15, metal:4-11, bond_id:0-3 */
+#define CHIP_NUM(bp)			(((bp)->chip_id) & 0xffff0000)
+#define CHIP_NUM_5706			0x57060000
+#define CHIP_NUM_5708			0x57080000
+#define CHIP_NUM_5709			0x57090000
+
+#define CHIP_REV(bp)			(((bp)->chip_id) & 0x0000f000)
+#define CHIP_REV_Ax			0x00000000
+#define CHIP_REV_Bx			0x00001000
+#define CHIP_REV_Cx			0x00002000
+
+#define CHIP_METAL(bp)			(((bp)->chip_id) & 0x00000ff0)
+#define CHIP_BONDING(bp)		(((bp)->chip_id) & 0x0000000f)
+
+#define CHIP_ID(bp)			(((bp)->chip_id) & 0xfffffff0)
+#define CHIP_ID_5706_A0			0x57060000
+#define CHIP_ID_5706_A1			0x57060010
+#define CHIP_ID_5706_A2			0x57060020
+#define CHIP_ID_5708_A0			0x57080000
+#define CHIP_ID_5708_B0			0x57081000
+#define CHIP_ID_5708_B1			0x57081010
+#define CHIP_ID_5709_A0			0x57090000
+#define CHIP_ID_5709_A1			0x57090010
+
+#define CHIP_BOND_ID(bp)		(((bp)->chip_id) & 0xf)
+
+/* A serdes chip will have the first bit of the bond id set. */
+#define CHIP_BOND_ID_SERDES_BIT		0x01
+
+	u32			phy_addr;
+	u32			phy_id;
+
+	u16			bus_speed_mhz;
+	u8			wol;
+
+	u8			index;
+
+	u16			fw_wr_seq;
+	u16			fw_drv_pulse_wr_seq;
+
+	int			rx_max_ring;
+	int			rx_ring_size;
+
+	int			rx_max_pg_ring;
+	int			rx_pg_ring_size;
+
+	u16			tx_quick_cons_trip;
+	u16			tx_quick_cons_trip_int;
+	u16			rx_quick_cons_trip;
+	u16			rx_quick_cons_trip_int;
+	u16			comp_prod_trip;
+	u16			comp_prod_trip_int;
+	u16			tx_ticks;
+	u16			tx_ticks_int;
+	u16			com_ticks;
+	u16			com_ticks_int;
+	u16			cmd_ticks;
+	u16			cmd_ticks_int;
+	u16			rx_ticks;
+	u16			rx_ticks_int;
+
+	u32			stats_ticks;
+
+	dma_addr_t		status_blk_mapping;
+
+	struct statistics_block	*stats_blk;
+	struct statistics_block	*temp_stats_blk;
+	dma_addr_t		stats_blk_mapping;
+
+	int			ctx_pages;
+	void			*ctx_blk[4];
+	dma_addr_t		ctx_blk_mapping[4];
+
+	u32			hc_cmd;
+	u32			rx_mode;
+
+	u16			req_line_speed;
+	u8			req_duplex;
+
+	u8			phy_port;
+	u8			link_up;
+
+	u16			line_speed;
+	u8			duplex;
+	u8			flow_ctrl;	/* actual flow ctrl settings */
+						/* may be different from     */
+						/* req_flow_ctrl if autoneg  */
+#ifndef FLOW_CTRL_TX
+#define FLOW_CTRL_TX		1
+#define FLOW_CTRL_RX		2
+#endif
+
+	u32			advertising;
+
+	u8			req_flow_ctrl;	/* flow ctrl advertisement */
+						/* settings or forced      */
+						/* settings                */
+	u8			autoneg;
+#define AUTONEG_SPEED		1
+#define AUTONEG_FLOW_CTRL	2
+
+	u8			loopback;
+#define MAC_LOOPBACK		1
+#define PHY_LOOPBACK		2
+
+	u8			serdes_an_pending;
+
+	u8			mac_addr[8];
+
+	u32			shmem_base;
+
+	char			fw_version[32];
+
+	int			pm_cap;
+	int			pcix_cap;
+
+	struct net_device_stats net_stats;
+
+	const struct flash_spec	*flash_info;
+	u32			flash_size;
+
+	int			status_stats_size;
+
+	struct z_stream_s	*strm;
+	void			*gunzip_buf;
+
+	struct bnx2_irq		irq_tbl[BNX2_MAX_MSIX_VEC];
+	int			irq_nvecs;
+
+	u8			num_tx_rings;
+	u8			num_rx_rings;
+
+	int			num_req_tx_rings;
+	int			num_req_rx_rings;
+
+	u8			func;
+
+	u32 			leds_save;
+	u32 			idle_chk_status_idx;
+
+#ifdef BCM_CNIC
+	struct mutex		cnic_lock;
+	struct cnic_eth_dev	cnic_eth_dev;
+#endif
+
+#if defined(BNX2_ENABLE_NETQUEUE)
+	u16			n_rx_queues_allocated;
+	u16			n_tx_queues_allocated;
+
+	/* KWQ/KCQ for NetQueue */
+	u32			netq_kwq_cid_addr;
+	u32			netq_kcq_cid_addr;
+
+	struct netq_dma		netq_kwq_info;
+	struct l2_kwqe		**netq_kwq;
+
+	u16			netq_kwq_prod_idx;
+	u32			netq_kwq_io_addr;
+
+	u16		 	netq_kwq_con_idx;
+
+	struct netq_dma		netq_kcq_info;
+	struct l2_kcqe		**netq_kcq;
+
+	u16			netq_kcq_prod_idx;
+	u32			netq_kcq_io_addr;
+
+	u32			netq_last_status_idx;
+
+#define BNX2_NETQ_MAX_COMPLETED_KCQE	8
+	struct l2_kcqe		*netq_completed_kcq[BNX2_NETQ_MAX_COMPLETED_KCQE];
+
+	struct mutex		netq_lock;
+
+	u8			netq_flags;
+	u8			netq_enabled;
+	u8			netq_state;
+#define BNX2_NETQ_HW_OPENED		0x0001
+#define BNX2_NETQ_HW_STARTED		0x0002
+	u8			reserved1[1];
+
+	wait_queue_head_t	netq_wait;
+#endif
+	u8			reset_failed;
+};
+
+#define REG_RD(bp, offset)					\
+	readl(bp->regview + offset)
+
+#define REG_WR(bp, offset, val)					\
+	writel(val, bp->regview + offset)
+
+#define REG_WR16(bp, offset, val)				\
+	writew(val, bp->regview + offset)
+
+struct cpu_reg {
+	u32 mode;
+	u32 mode_value_halt;
+	u32 mode_value_sstep;
+
+	u32 state;
+	u32 state_value_clear;
+
+	u32 gpr0;
+	u32 evmask;
+	u32 pc;
+	u32 inst;
+	u32 bp;
+
+	u32 spad_base;
+
+	u32 mips_view_base;
+};
+
+struct fw_info {
+	const u32 ver_major;
+	const u32 ver_minor;
+	const u32 ver_fix;
+
+	const u32 start_addr;
+
+	/* Text section. */
+	const u32 text_addr;
+	const u32 text_len;
+	const u32 text_index;
+	__le32 *text;
+	const u8 *gz_text;
+	const u32 gz_text_len;
+
+	/* Data section. */
+	const u32 data_addr;
+	const u32 data_len;
+	const u32 data_index;
+	const u32 *data;
+
+	/* SBSS section. */
+	const u32 sbss_addr;
+	const u32 sbss_len;
+	const u32 sbss_index;
+
+	/* BSS section. */
+	const u32 bss_addr;
+	const u32 bss_len;
+	const u32 bss_index;
+
+	/* Read-only section. */
+	const u32 rodata_addr;
+	const u32 rodata_len;
+	const u32 rodata_index;
+	const u32 *rodata;
+};
+
+#define RV2P_P1_FIXUP_PAGE_SIZE_IDX		0
+#define RV2P_BD_PAGE_SIZE_MSK			0xffff
+#define RV2P_BD_PAGE_SIZE			((BCM_PAGE_SIZE / 16) - 1)
+
+#define RV2P_PROC1                              0
+#define RV2P_PROC2                              1
+
+
+/* This value (in milliseconds) determines the frequency of the driver
+ * issuing the PULSE message code.  The firmware monitors this periodic
+ * pulse to determine when to switch to an OS-absent mode. */
+#define BNX2_DRV_PULSE_PERIOD_MS                 250
+
+/* This value (in milliseconds) determines how long the driver should
+ * wait for an acknowledgement from the firmware before timing out.  Once
+ * the firmware has timed out, the driver will assume there is no firmware
+ * running and there won't be any firmware-driver synchronization during a
+ * driver reset. */
+#define BNX2_FW_ACK_TIME_OUT_MS			1000
+
+
+#define BNX2_DRV_RESET_SIGNATURE		0x00000000
+#define BNX2_DRV_RESET_SIGNATURE_MAGIC		 0x4841564b /* HAVK */
+//#define DRV_RESET_SIGNATURE_MAGIC		 0x47495352 /* RSIG */
+
+#define BNX2_DRV_MB				0x00000004
+#define BNX2_DRV_MSG_CODE			 0xff000000
+#define BNX2_DRV_MSG_CODE_RESET			 0x01000000
+#define BNX2_DRV_MSG_CODE_UNLOAD		 0x02000000
+#define BNX2_DRV_MSG_CODE_SHUTDOWN		 0x03000000
+#define BNX2_DRV_MSG_CODE_SUSPEND_WOL		 0x04000000
+#define BNX2_DRV_MSG_CODE_FW_TIMEOUT		 0x05000000
+#define BNX2_DRV_MSG_CODE_PULSE			 0x06000000
+#define BNX2_DRV_MSG_CODE_DIAG			 0x07000000
+#define BNX2_DRV_MSG_CODE_SUSPEND_NO_WOL	 0x09000000
+#define BNX2_DRV_MSG_CODE_UNLOAD_LNK_DN		 0x0b000000
+#define BNX2_DRV_MSG_CODE_KEEP_VLAN_UPDATE	 0x0d000000
+#define BNX2_DRV_MSG_CODE_CMD_SET_LINK		 0x10000000
+
+#define BNX2_DRV_MSG_DATA			 0x00ff0000
+#define BNX2_DRV_MSG_DATA_WAIT0			 0x00010000
+#define BNX2_DRV_MSG_DATA_WAIT1			 0x00020000
+#define BNX2_DRV_MSG_DATA_WAIT2			 0x00030000
+#define BNX2_DRV_MSG_DATA_WAIT3			 0x00040000
+
+#define BNX2_DRV_MSG_SEQ			 0x0000ffff
+
+#define BNX2_FW_MB				0x00000008
+#define BNX2_FW_MSG_ACK				 0x0000ffff
+#define BNX2_FW_MSG_STATUS_MASK			 0x00ff0000
+#define BNX2_FW_MSG_STATUS_OK			 0x00000000
+#define BNX2_FW_MSG_STATUS_FAILURE		 0x00ff0000
+
+#define BNX2_LINK_STATUS			0x0000000c
+#define BNX2_LINK_STATUS_INIT_VALUE		 0xffffffff
+#define BNX2_LINK_STATUS_LINK_UP		 0x1
+#define BNX2_LINK_STATUS_LINK_DOWN		 0x0
+#define BNX2_LINK_STATUS_SPEED_MASK		 0x1e
+#define BNX2_LINK_STATUS_AN_INCOMPLETE		 (0<<1)
+#define BNX2_LINK_STATUS_10HALF			 (1<<1)
+#define BNX2_LINK_STATUS_10FULL			 (2<<1)
+#define BNX2_LINK_STATUS_100HALF		 (3<<1)
+#define BNX2_LINK_STATUS_100BASE_T4		 (4<<1)
+#define BNX2_LINK_STATUS_100FULL		 (5<<1)
+#define BNX2_LINK_STATUS_1000HALF		 (6<<1)
+#define BNX2_LINK_STATUS_1000FULL		 (7<<1)
+#define BNX2_LINK_STATUS_2500HALF		 (8<<1)
+#define BNX2_LINK_STATUS_2500FULL		 (9<<1)
+#define BNX2_LINK_STATUS_AN_ENABLED		 (1<<5)
+#define BNX2_LINK_STATUS_AN_COMPLETE		 (1<<6)
+#define BNX2_LINK_STATUS_PARALLEL_DET		 (1<<7)
+#define BNX2_LINK_STATUS_RESERVED		 (1<<8)
+#define BNX2_LINK_STATUS_PARTNER_AD_1000FULL	 (1<<9)
+#define BNX2_LINK_STATUS_PARTNER_AD_1000HALF	 (1<<10)
+#define BNX2_LINK_STATUS_PARTNER_AD_100BT4	 (1<<11)
+#define BNX2_LINK_STATUS_PARTNER_AD_100FULL	 (1<<12)
+#define BNX2_LINK_STATUS_PARTNER_AD_100HALF	 (1<<13)
+#define BNX2_LINK_STATUS_PARTNER_AD_10FULL	 (1<<14)
+#define BNX2_LINK_STATUS_PARTNER_AD_10HALF	 (1<<15)
+#define BNX2_LINK_STATUS_TX_FC_ENABLED		 (1<<16)
+#define BNX2_LINK_STATUS_RX_FC_ENABLED		 (1<<17)
+#define BNX2_LINK_STATUS_PARTNER_SYM_PAUSE_CAP	 (1<<18)
+#define BNX2_LINK_STATUS_PARTNER_ASYM_PAUSE_CAP	 (1<<19)
+#define BNX2_LINK_STATUS_SERDES_LINK		 (1<<20)
+#define BNX2_LINK_STATUS_PARTNER_AD_2500FULL	 (1<<21)
+#define BNX2_LINK_STATUS_PARTNER_AD_2500HALF	 (1<<22)
+#define BNX2_LINK_STATUS_HEART_BEAT_EXPIRED	 (1<<31)
+
+#define BNX2_DRV_PULSE_MB			0x00000010
+#define BNX2_DRV_PULSE_SEQ_MASK			 0x00007fff
+
+/* Indicate to the firmware not to go into the
+ * OS absent when it is not getting driver pulse.
+ * This is used for debugging. */
+#define BNX2_DRV_MSG_DATA_PULSE_CODE_ALWAYS_ALIVE	 0x00080000
+
+#define BNX2_DRV_MB_ARG0			0x00000014
+#define BNX2_NETLINK_SET_LINK_SPEED_10HALF	 (1<<0)
+#define BNX2_NETLINK_SET_LINK_SPEED_10FULL	 (1<<1)
+#define BNX2_NETLINK_SET_LINK_SPEED_10		 \
+	(BNX2_NETLINK_SET_LINK_SPEED_10HALF |	 \
+	 BNX2_NETLINK_SET_LINK_SPEED_10FULL)
+#define BNX2_NETLINK_SET_LINK_SPEED_100HALF	 (1<<2)
+#define BNX2_NETLINK_SET_LINK_SPEED_100FULL	 (1<<3)
+#define BNX2_NETLINK_SET_LINK_SPEED_100		 \
+	(BNX2_NETLINK_SET_LINK_SPEED_100HALF |	 \
+	 BNX2_NETLINK_SET_LINK_SPEED_100FULL)
+#define BNX2_NETLINK_SET_LINK_SPEED_1GHALF	 (1<<4)
+#define BNX2_NETLINK_SET_LINK_SPEED_1GFULL	 (1<<5)
+#define BNX2_NETLINK_SET_LINK_SPEED_2G5HALF	 (1<<6)
+#define BNX2_NETLINK_SET_LINK_SPEED_2G5FULL	 (1<<7)
+#define BNX2_NETLINK_SET_LINK_SPEED_10GHALF	 (1<<8)
+#define BNX2_NETLINK_SET_LINK_SPEED_10GFULL	 (1<<9)
+#define BNX2_NETLINK_SET_LINK_ENABLE_AUTONEG	 (1<<10)
+#define BNX2_NETLINK_SET_LINK_PHY_APP_REMOTE	 (1<<11)
+#define BNX2_NETLINK_SET_LINK_FC_SYM_PAUSE	 (1<<12)
+#define BNX2_NETLINK_SET_LINK_FC_ASYM_PAUSE	 (1<<13)
+#define BNX2_NETLINK_SET_LINK_ETH_AT_WIRESPEED	 (1<<14)
+#define BNX2_NETLINK_SET_LINK_PHY_RESET		 (1<<15)
+
+#define BNX2_DEV_INFO_SIGNATURE			0x00000020
+#define BNX2_DEV_INFO_SIGNATURE_MAGIC		 0x44564900
+#define BNX2_DEV_INFO_SIGNATURE_MAGIC_MASK	 0xffffff00
+#define BNX2_DEV_INFO_FEATURE_CFG_VALID		 0x01
+#define BNX2_DEV_INFO_SECONDARY_PORT		 0x80
+#define BNX2_DEV_INFO_DRV_ALWAYS_ALIVE		 0x40
+
+#define BNX2_SHARED_HW_CFG_PART_NUM		0x00000024
+
+#define BNX2_SHARED_HW_CFG_POWER_DISSIPATED	0x00000034
+#define BNX2_SHARED_HW_CFG_POWER_STATE_D3_MASK	 0xff000000
+#define BNX2_SHARED_HW_CFG_POWER_STATE_D2_MASK	 0xff0000
+#define BNX2_SHARED_HW_CFG_POWER_STATE_D1_MASK	 0xff00
+#define BNX2_SHARED_HW_CFG_POWER_STATE_D0_MASK	 0xff
+
+#define BNX2_SHARED_HW_CFG POWER_CONSUMED	0x00000038
+#define BNX2_SHARED_HW_CFG_CONFIG		0x0000003c
+#define BNX2_SHARED_HW_CFG_DESIGN_NIC		 0
+#define BNX2_SHARED_HW_CFG_DESIGN_LOM		 0x1
+#define BNX2_SHARED_HW_CFG_PHY_COPPER		 0
+#define BNX2_SHARED_HW_CFG_PHY_FIBER		 0x2
+#define BNX2_SHARED_HW_CFG_PHY_2_5G		 0x20
+#define BNX2_SHARED_HW_CFG_PHY_BACKPLANE	 0x40
+#define BNX2_SHARED_HW_CFG_LED_MODE_SHIFT_BITS	 8
+#define BNX2_SHARED_HW_CFG_LED_MODE_MASK	 0x300
+#define BNX2_SHARED_HW_CFG_LED_MODE_MAC		 0
+#define BNX2_SHARED_HW_CFG_LED_MODE_GPHY1	 0x100
+#define BNX2_SHARED_HW_CFG_LED_MODE_GPHY2	 0x200
+#define BNX2_SHARED_HW_CFG_GIG_LINK_ON_VAUX	 0x8000
+
+#define BNX2_SHARED_HW_CFG_CONFIG2		0x00000040
+#define BNX2_SHARED_HW_CFG2_NVM_SIZE_MASK	 0x00fff000
+
+#define BNX2_DEV_INFO_BC_REV			0x0000004c
+
+#define BNX2_PORT_HW_CFG_MAC_UPPER		0x00000050
+#define BNX2_PORT_HW_CFG_UPPERMAC_MASK		 0xffff
+
+#define BNX2_PORT_HW_CFG_MAC_LOWER		0x00000054
+#define BNX2_PORT_HW_CFG_CONFIG			0x00000058
+#define BNX2_PORT_HW_CFG_CFG_TXCTL3_MASK	 0x0000ffff
+#define BNX2_PORT_HW_CFG_CFG_DFLT_LINK_MASK	 0x001f0000
+#define BNX2_PORT_HW_CFG_CFG_DFLT_LINK_AN	 0x00000000
+#define BNX2_PORT_HW_CFG_CFG_DFLT_LINK_1G	 0x00030000
+#define BNX2_PORT_HW_CFG_CFG_DFLT_LINK_2_5G	 0x00040000
+
+#define BNX2_PORT_HW_CFG_IMD_MAC_A_UPPER	0x00000068
+#define BNX2_PORT_HW_CFG_IMD_MAC_A_LOWER	0x0000006c
+#define BNX2_PORT_HW_CFG_IMD_MAC_B_UPPER	0x00000070
+#define BNX2_PORT_HW_CFG_IMD_MAC_B_LOWER	0x00000074
+#define BNX2_PORT_HW_CFG_ISCSI_MAC_UPPER	0x00000078
+#define BNX2_PORT_HW_CFG_ISCSI_MAC_LOWER	0x0000007c
+
+#define BNX2_DEV_INFO_PER_PORT_HW_CONFIG2	0x000000b4
+
+#define BNX2_DEV_INFO_FORMAT_REV		0x000000c4
+#define BNX2_DEV_INFO_FORMAT_REV_MASK		 0xff000000
+#define BNX2_DEV_INFO_FORMAT_REV_ID		 ('A' << 24)
+
+#define BNX2_SHARED_FEATURE			0x000000c8
+#define BNX2_SHARED_FEATURE_MASK		 0xffffffff
+
+#define BNX2_PORT_FEATURE			0x000000d8
+#define BNX2_PORT2_FEATURE			0x00000014c
+#define BNX2_PORT_FEATURE_WOL_ENABLED		 0x01000000
+#define BNX2_PORT_FEATURE_MBA_ENABLED		 0x02000000
+#define BNX2_PORT_FEATURE_ASF_ENABLED		 0x04000000
+#define BNX2_PORT_FEATURE_IMD_ENABLED		 0x08000000
+#define BNX2_PORT_FEATURE_BAR1_SIZE_MASK	 0xf
+#define BNX2_PORT_FEATURE_BAR1_SIZE_DISABLED	 0x0
+#define BNX2_PORT_FEATURE_BAR1_SIZE_64K		 0x1
+#define BNX2_PORT_FEATURE_BAR1_SIZE_128K	 0x2
+#define BNX2_PORT_FEATURE_BAR1_SIZE_256K	 0x3
+#define BNX2_PORT_FEATURE_BAR1_SIZE_512K	 0x4
+#define BNX2_PORT_FEATURE_BAR1_SIZE_1M		 0x5
+#define BNX2_PORT_FEATURE_BAR1_SIZE_2M		 0x6
+#define BNX2_PORT_FEATURE_BAR1_SIZE_4M		 0x7
+#define BNX2_PORT_FEATURE_BAR1_SIZE_8M		 0x8
+#define BNX2_PORT_FEATURE_BAR1_SIZE_16M		 0x9
+#define BNX2_PORT_FEATURE_BAR1_SIZE_32M		 0xa
+#define BNX2_PORT_FEATURE_BAR1_SIZE_64M		 0xb
+#define BNX2_PORT_FEATURE_BAR1_SIZE_128M	 0xc
+#define BNX2_PORT_FEATURE_BAR1_SIZE_256M	 0xd
+#define BNX2_PORT_FEATURE_BAR1_SIZE_512M	 0xe
+#define BNX2_PORT_FEATURE_BAR1_SIZE_1G		 0xf
+
+#define BNX2_PORT_FEATURE_WOL			0xdc
+#define BNX2_PORT2_FEATURE_WOL			0x150
+#define BNX2_PORT_FEATURE_WOL_DEFAULT_SHIFT_BITS	 4
+#define BNX2_PORT_FEATURE_WOL_DEFAULT_MASK	 0x30
+#define BNX2_PORT_FEATURE_WOL_DEFAULT_DISABLE	 0
+#define BNX2_PORT_FEATURE_WOL_DEFAULT_MAGIC	 0x10
+#define BNX2_PORT_FEATURE_WOL_DEFAULT_ACPI	 0x20
+#define BNX2_PORT_FEATURE_WOL_DEFAULT_MAGIC_AND_ACPI	 0x30
+#define BNX2_PORT_FEATURE_WOL_LINK_SPEED_MASK	 0xf
+#define BNX2_PORT_FEATURE_WOL_LINK_SPEED_AUTONEG	 0
+#define BNX2_PORT_FEATURE_WOL_LINK_SPEED_10HALF	 1
+#define BNX2_PORT_FEATURE_WOL_LINK_SPEED_10FULL	 2
+#define BNX2_PORT_FEATURE_WOL_LINK_SPEED_100HALF 3
+#define BNX2_PORT_FEATURE_WOL_LINK_SPEED_100FULL 4
+#define BNX2_PORT_FEATURE_WOL_LINK_SPEED_1000HALF	 5
+#define BNX2_PORT_FEATURE_WOL_LINK_SPEED_1000FULL	 6
+#define BNX2_PORT_FEATURE_WOL_AUTONEG_ADVERTISE_1000	 0x40
+#define BNX2_PORT_FEATURE_WOL_RESERVED_PAUSE_CAP 0x400
+#define BNX2_PORT_FEATURE_WOL_RESERVED_ASYM_PAUSE_CAP	 0x800
+
+#define BNX2_PORT_FEATURE_MBA			0xe0
+#define BNX2_PORT2_FEATURE_MBA			0x154
+#define BNX2_PORT_FEATURE_MBA_BOOT_AGENT_TYPE_SHIFT_BITS	 0
+#define BNX2_PORT_FEATURE_MBA_BOOT_AGENT_TYPE_MASK	 0x3
+#define BNX2_PORT_FEATURE_MBA_BOOT_AGENT_TYPE_PXE	 0
+#define BNX2_PORT_FEATURE_MBA_BOOT_AGENT_TYPE_RPL	 1
+#define BNX2_PORT_FEATURE_MBA_BOOT_AGENT_TYPE_BOOTP	 2
+#define BNX2_PORT_FEATURE_MBA_LINK_SPEED_SHIFT_BITS	 2
+#define BNX2_PORT_FEATURE_MBA_LINK_SPEED_MASK	 0x3c
+#define BNX2_PORT_FEATURE_MBA_LINK_SPEED_AUTONEG	 0
+#define BNX2_PORT_FEATURE_MBA_LINK_SPEED_10HALF	 0x4
+#define BNX2_PORT_FEATURE_MBA_LINK_SPEED_10FULL	 0x8
+#define BNX2_PORT_FEATURE_MBA_LINK_SPEED_100HALF	 0xc
+#define BNX2_PORT_FEATURE_MBA_LINK_SPEED_100FULL	 0x10
+#define BNX2_PORT_FEATURE_MBA_LINK_SPEED_1000HALF	 0x14
+#define BNX2_PORT_FEATURE_MBA_LINK_SPEED_1000FULL	 0x18
+#define BNX2_PORT_FEATURE_MBA_SETUP_PROMPT_ENABLE	 0x40
+#define BNX2_PORT_FEATURE_MBA_HOTKEY_CTRL_S	 0
+#define BNX2_PORT_FEATURE_MBA_HOTKEY_CTRL_B	 0x80
+#define BNX2_PORT_FEATURE_MBA_EXP_ROM_SIZE_SHIFT_BITS	 8
+#define BNX2_PORT_FEATURE_MBA_EXP_ROM_SIZE_MASK	 0xff00
+#define BNX2_PORT_FEATURE_MBA_EXP_ROM_SIZE_DISABLED	 0
+#define BNX2_PORT_FEATURE_MBA_EXP_ROM_SIZE_1K	 0x100
+#define BNX2_PORT_FEATURE_MBA_EXP_ROM_SIZE_2K	 0x200
+#define BNX2_PORT_FEATURE_MBA_EXP_ROM_SIZE_4K	 0x300
+#define BNX2_PORT_FEATURE_MBA_EXP_ROM_SIZE_8K	 0x400
+#define BNX2_PORT_FEATURE_MBA_EXP_ROM_SIZE_16K	 0x500
+#define BNX2_PORT_FEATURE_MBA_EXP_ROM_SIZE_32K	 0x600
+#define BNX2_PORT_FEATURE_MBA_EXP_ROM_SIZE_64K	 0x700
+#define BNX2_PORT_FEATURE_MBA_EXP_ROM_SIZE_128K	 0x800
+#define BNX2_PORT_FEATURE_MBA_EXP_ROM_SIZE_256K	 0x900
+#define BNX2_PORT_FEATURE_MBA_EXP_ROM_SIZE_512K	 0xa00
+#define BNX2_PORT_FEATURE_MBA_EXP_ROM_SIZE_1M	 0xb00
+#define BNX2_PORT_FEATURE_MBA_EXP_ROM_SIZE_2M	 0xc00
+#define BNX2_PORT_FEATURE_MBA_EXP_ROM_SIZE_4M	 0xd00
+#define BNX2_PORT_FEATURE_MBA_EXP_ROM_SIZE_8M	 0xe00
+#define BNX2_PORT_FEATURE_MBA_EXP_ROM_SIZE_16M	 0xf00
+#define BNX2_PORT_FEATURE_MBA_MSG_TIMEOUT_SHIFT_BITS	 16
+#define BNX2_PORT_FEATURE_MBA_MSG_TIMEOUT_MASK	 0xf0000
+#define BNX2_PORT_FEATURE_MBA_BIOS_BOOTSTRAP_SHIFT_BITS	 20
+#define BNX2_PORT_FEATURE_MBA_BIOS_BOOTSTRAP_MASK	 0x300000
+#define BNX2_PORT_FEATURE_MBA_BIOS_BOOTSTRAP_AUTO	 0
+#define BNX2_PORT_FEATURE_MBA_BIOS_BOOTSTRAP_BBS	 0x100000
+#define BNX2_PORT_FEATURE_MBA_BIOS_BOOTSTRAP_INT18H	 0x200000
+#define BNX2_PORT_FEATURE_MBA_BIOS_BOOTSTRAP_INT19H	 0x300000
+
+#define BNX2_PORT_FEATURE_IMD			0xe4
+#define BNX2_PORT2_FEATURE_IMD			0x158
+#define BNX2_PORT_FEATURE_IMD_LINK_OVERRIDE_DEFAULT	 0
+#define BNX2_PORT_FEATURE_IMD_LINK_OVERRIDE_ENABLE	 1
+
+#define BNX2_PORT_FEATURE_VLAN			0xe8
+#define BNX2_PORT2_FEATURE_VLAN			0x15c
+#define BNX2_PORT_FEATURE_MBA_VLAN_TAG_MASK	 0xffff
+#define BNX2_PORT_FEATURE_MBA_VLAN_ENABLE	 0x10000
+
+#define BNX2_MFW_VER_PTR			0x00000014c
+
+#define BNX2_BC_STATE_RESET_TYPE		0x000001c0
+#define BNX2_BC_STATE_RESET_TYPE_SIG		 0x00005254
+#define BNX2_BC_STATE_RESET_TYPE_SIG_MASK	 0x0000ffff
+#define BNX2_BC_STATE_RESET_TYPE_NONE	 (BNX2_BC_STATE_RESET_TYPE_SIG | \
+					  0x00010000)
+#define BNX2_BC_STATE_RESET_TYPE_PCI	 (BNX2_BC_STATE_RESET_TYPE_SIG | \
+					  0x00020000)
+#define BNX2_BC_STATE_RESET_TYPE_VAUX	 (BNX2_BC_STATE_RESET_TYPE_SIG | \
+					  0x00030000)
+#define BNX2_BC_STATE_RESET_TYPE_DRV_MASK	 DRV_MSG_CODE
+#define BNX2_BC_STATE_RESET_TYPE_DRV_RESET (BNX2_BC_STATE_RESET_TYPE_SIG | \
+					    DRV_MSG_CODE_RESET)
+#define BNX2_BC_STATE_RESET_TYPE_DRV_UNLOAD (BNX2_BC_STATE_RESET_TYPE_SIG | \
+					     DRV_MSG_CODE_UNLOAD)
+#define BNX2_BC_STATE_RESET_TYPE_DRV_SHUTDOWN (BNX2_BC_STATE_RESET_TYPE_SIG | \
+					       DRV_MSG_CODE_SHUTDOWN)
+#define BNX2_BC_STATE_RESET_TYPE_DRV_WOL (BNX2_BC_STATE_RESET_TYPE_SIG | \
+					  DRV_MSG_CODE_WOL)
+#define BNX2_BC_STATE_RESET_TYPE_DRV_DIAG (BNX2_BC_STATE_RESET_TYPE_SIG | \
+					   DRV_MSG_CODE_DIAG)
+#define BNX2_BC_STATE_RESET_TYPE_VALUE(msg) (BNX2_BC_STATE_RESET_TYPE_SIG | \
+					     (msg))
+
+#define BNX2_BC_STATE				0x000001c4
+#define BNX2_BC_STATE_ERR_MASK			 0x0000ff00
+#define BNX2_BC_STATE_SIGN			 0x42530000
+#define BNX2_BC_STATE_SIGN_MASK			 0xffff0000
+#define BNX2_BC_STATE_BC1_START			 (BNX2_BC_STATE_SIGN | 0x1)
+#define BNX2_BC_STATE_GET_NVM_CFG1		 (BNX2_BC_STATE_SIGN | 0x2)
+#define BNX2_BC_STATE_PROG_BAR			 (BNX2_BC_STATE_SIGN | 0x3)
+#define BNX2_BC_STATE_INIT_VID			 (BNX2_BC_STATE_SIGN | 0x4)
+#define BNX2_BC_STATE_GET_NVM_CFG2		 (BNX2_BC_STATE_SIGN | 0x5)
+#define BNX2_BC_STATE_APPLY_WKARND		 (BNX2_BC_STATE_SIGN | 0x6)
+#define BNX2_BC_STATE_LOAD_BC2			 (BNX2_BC_STATE_SIGN | 0x7)
+#define BNX2_BC_STATE_GOING_BC2			 (BNX2_BC_STATE_SIGN | 0x8)
+#define BNX2_BC_STATE_GOING_DIAG		 (BNX2_BC_STATE_SIGN | 0x9)
+#define BNX2_BC_STATE_RT_FINAL_INIT		 (BNX2_BC_STATE_SIGN | 0x81)
+#define BNX2_BC_STATE_RT_WKARND			 (BNX2_BC_STATE_SIGN | 0x82)
+#define BNX2_BC_STATE_RT_DRV_PULSE		 (BNX2_BC_STATE_SIGN | 0x83)
+#define BNX2_BC_STATE_RT_FIOEVTS		 (BNX2_BC_STATE_SIGN | 0x84)
+#define BNX2_BC_STATE_RT_DRV_CMD		 (BNX2_BC_STATE_SIGN | 0x85)
+#define BNX2_BC_STATE_RT_LOW_POWER		 (BNX2_BC_STATE_SIGN | 0x86)
+#define BNX2_BC_STATE_RT_SET_WOL		 (BNX2_BC_STATE_SIGN | 0x87)
+#define BNX2_BC_STATE_RT_OTHER_FW		 (BNX2_BC_STATE_SIGN | 0x88)
+#define BNX2_BC_STATE_RT_GOING_D3		 (BNX2_BC_STATE_SIGN | 0x89)
+#define BNX2_BC_STATE_ERR_BAD_VERSION		 (BNX2_BC_STATE_SIGN | 0x0100)
+#define BNX2_BC_STATE_ERR_BAD_BC2_CRC		 (BNX2_BC_STATE_SIGN | 0x0200)
+#define BNX2_BC_STATE_ERR_BC1_LOOP		 (BNX2_BC_STATE_SIGN | 0x0300)
+#define BNX2_BC_STATE_ERR_UNKNOWN_CMD		 (BNX2_BC_STATE_SIGN | 0x0400)
+#define BNX2_BC_STATE_ERR_DRV_DEAD		 (BNX2_BC_STATE_SIGN | 0x0500)
+#define BNX2_BC_STATE_ERR_NO_RXP		 (BNX2_BC_STATE_SIGN | 0x0600)
+#define BNX2_BC_STATE_ERR_TOO_MANY_RBUF		 (BNX2_BC_STATE_SIGN | 0x0700)
+
+#define BNX2_BC_STATE_CONDITION			0x000001c8
+#define BNX2_CONDITION_MFW_RUN_UNKNOWN		 0x00000000
+#define BNX2_CONDITION_MFW_RUN_IPMI		 0x00002000
+#define BNX2_CONDITION_MFW_RUN_UMP		 0x00004000
+#define BNX2_CONDITION_MFW_RUN_NCSI		 0x00006000
+#define BNX2_CONDITION_MFW_RUN_NONE		 0x0000e000
+#define BNX2_CONDITION_MFW_RUN_MASK		 0x0000e000
+
+#define BNX2_BC_STATE_DEBUG_CMD			0x1dc
+#define BNX2_BC_STATE_BC_DBG_CMD_SIGNATURE	 0x42440000
+#define BNX2_BC_STATE_BC_DBG_CMD_SIGNATURE_MASK	 0xffff0000
+#define BNX2_BC_STATE_BC_DBG_CMD_LOOP_CNT_MASK	 0xffff
+#define BNX2_BC_STATE_BC_DBG_CMD_LOOP_INFINITE	 0xffff
+
+#define BNX2_FW_EVT_CODE_MB			0x354
+#define BNX2_FW_EVT_CODE_SW_TIMER_EXPIRATION_EVENT 0x00000000
+#define BNX2_FW_EVT_CODE_LINK_EVENT		 0x00000001
+
+#define BNX2_DRV_ACK_CAP_MB			0x364
+#define BNX2_DRV_ACK_CAP_SIGNATURE		 0x35450000
+#define BNX2_CAPABILITY_SIGNATURE_MASK		 0xFFFF0000
+
+#define BNX2_FW_CAP_MB				0x368
+#define BNX2_FW_CAP_SIGNATURE			 0xaa550000
+#define BNX2_FW_ACK_DRV_SIGNATURE		 0x52500000
+#define BNX2_FW_CAP_SIGNATURE_MASK		 0xffff0000
+#define BNX2_FW_CAP_REMOTE_PHY_CAPABLE		 0x00000001
+#define BNX2_FW_CAP_REMOTE_PHY_PRESENT		 0x00000002
+#define BNX2_FW_CAP_MFW_CAN_KEEP_VLAN		 0x00000008
+#define BNX2_FW_CAP_BC_CAN_KEEP_VLAN		 0x00000010
+#define BNX2_FW_CAP_CAN_KEEP_VLAN	(BNX2_FW_CAP_BC_CAN_KEEP_VLAN | \
+					 BNX2_FW_CAP_MFW_CAN_KEEP_VLAN)
+
+#define BNX2_RPHY_SIGNATURE			0x36c
+#define BNX2_RPHY_LOAD_SIGNATURE		 0x5a5a5a5a
+
+#define BNX2_RPHY_FLAGS				0x370
+#define BNX2_RPHY_SERDES_LINK			0x374
+#define BNX2_RPHY_COPPER_LINK			0x378
+
+#define BNX2_ISCSI_INITIATOR			0x3dc
+#define BNX2_ISCSI_INITIATOR_EN			 0x00080000
+
+#define BNX2_ISCSI_MAX_CONN			0x3e4
+#define BNX2_ISCSI_MAX_CONN_MASK		 0xffff0000
+#define BNX2_ISCSI_MAX_CONN_SHIFT		 16
+
+#define HOST_VIEW_SHMEM_BASE			0x167c00
+
+#define DP_SHMEM_LINE(bp, offset)					\
+	netdev_err(bp->dev, "DEBUG: %08x: %08x %08x %08x %08x\n",	\
+		   offset,						\
+		   bnx2_shmem_rd(bp, offset),				\
+		   bnx2_shmem_rd(bp, offset + 4),			\
+		   bnx2_shmem_rd(bp, offset + 8),			\
+		   bnx2_shmem_rd(bp, offset + 12))
+
+#if defined(BNX2_VMWARE_BMAPILNX)
+
+#define BNX2_VMWARE_CIM_CMD_ENABLE_NIC		0x0001
+#define BNX2_VMWARE_CIM_CMD_DISABLE_NIC		0x0002
+#define BNX2_VMWARE_CIM_CMD_REG_READ		0x0003
+#define BNX2_VMWARE_CIM_CMD_REG_WRITE		0x0004
+#define BNX2_VMWARE_CIM_CMD_GET_NIC_PARAM	0x0005
+#define BNX2_VMWARE_CIM_CMD_GET_NIC_STATUS	0x0006
+
+struct bnx2_ioctl_reg_read_req
+{
+	u32 reg_offset;
+   	u32 reg_value;
+} __attribute__((packed));
+
+struct bnx2_ioctl_reg_write_req
+{
+	u32 reg_offset;
+	u32 reg_value;
+} __attribute__((packed));
+
+struct bnx2_ioctl_get_nic_param_req
+{
+	u32 version;
+	u32 mtu;
+	u8  current_mac_addr[8];
+} __attribute__((packed));
+
+struct bnx2_ioctl_get_nic_status_req
+{
+	u32 nic_status; // 1: Up, 0: Down
+} __attribute__((packed));
+
+struct bnx2_ioctl_req 
+{
+	u32 cmd;
+	union {
+		// no struct for reset_nic command
+		struct bnx2_ioctl_reg_read_req reg_read;
+		struct bnx2_ioctl_reg_write_req reg_write;
+		struct bnx2_ioctl_get_nic_param_req get_nic_param;
+		struct bnx2_ioctl_get_nic_status_req get_nic_status;
+	} cmd_req;
+} __attribute__((packed));
+
+#endif  /* BNX2_VMWARE_BMAPILNX */
+
+#endif
diff -r 2e9e6572f41c drivers/net/bnx2/bnx2_fw.h
--- /dev/null
+++ b/drivers/net/bnx2/bnx2_fw.h
@@ -0,0 +1,4485 @@
+/* bnx2_fw.h: Broadcom NX2 network driver.
+ *
+ * Copyright (c) 2004-2010 Broadcom Corporation
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, except as noted below.
+ *
+ * This file contains firmware data derived from proprietary unpublished
+ * source code, Copyright (c) 2004-2010
+ * Broadcom Corporation.
+ *
+ * Permission is hereby granted for the distribution of this firmware data
+ * in hexadecimal or equivalent format, provided this copyright notice is
+ * accompanying it.
+ */
+
+static u8 bnx2_COM_b06FwText[] = {
+	0xd5, 0x7c, 0x7f, 0x70, 0x5c, 0xd7, 0x75, 0xde, 0x79, 0x6f, 0x77, 0x81,
+	0x25, 0x08, 0x82, 0x0f, 0xd0, 0x0a, 0x5e, 0xc9, 0x90, 0xbd, 0x0f, 0xfb,
+	0x00, 0xac, 0x04, 0xd8, 0x7e, 0xa4, 0x61, 0x1a, 0x72, 0x37, 0xe2, 0x7a,
+	0x17, 0x84, 0x20, 0x82, 0x9d, 0x42, 0x12, 0xa2, 0xc8, 0x0a, 0x47, 0xb3,
+	0x59, 0x80, 0x8a, 0xac, 0x3a, 0x29, 0x5b, 0xc9, 0x2d, 0x9d, 0xc8, 0xe6,
+	0x72, 0x01, 0xc9, 0x94, 0x0a, 0x72, 0x61, 0x12, 0x24, 0xd5, 0xd4, 0x93,
+	0xac, 0x17, 0x20, 0x29, 0xab, 0x4b, 0x2e, 0xf5, 0x23, 0xb1, 0xda, 0xb1,
+	0x23, 0x04, 0xa6, 0x29, 0xd9, 0xe3, 0xcc, 0x48, 0x1e, 0xcf, 0x84, 0x7f,
+	0xb0, 0x53, 0x96, 0x92, 0x6d, 0xc5, 0x4d, 0x5b, 0xb9, 0x71, 0xa7, 0x6a,
+	0x46, 0xf6, 0xeb, 0xf7, 0xdd, 0xfb, 0x1e, 0xb0, 0x80, 0x20, 0x5b, 0x69,
+	0xa6, 0x7f, 0x14, 0x33, 0x3b, 0xf7, 0xbd, 0xfb, 0xfb, 0x9e, 0x73, 0xee,
+	0x39, 0xdf, 0x39, 0xf7, 0x3e, 0x8c, 0x88, 0xb4, 0x88, 0xff, 0xb7, 0x05,
+	0xbf, 0x1d, 0xbf, 0xf7, 0xcf, 0x26, 0x3f, 0xfe, 0xd1, 0xed, 0x1f, 0xe5,
+	0xbb, 0x19, 0x32, 0x9b, 0x98, 0x86, 0xf0, 0x7b, 0x05, 0xbf, 0xed, 0xfe,
+	0xf3, 0x46, 0x7f, 0x16, 0xdb, 0x1a, 0x22, 0xf9, 0x9f, 0x8a, 0x44, 0xd6,
+	0x95, 0x45, 0xdf, 0xa3, 0xcd, 0xaf, 0xfa, 0x33, 0xdf, 0x67, 0x3d, 0xeb,
+	0xff, 0xa2, 0xef, 0xf7, 0xfb, 0x17, 0xf2, 0xbb, 0xdf, 0xe2, 0xff, 0x24,
+	0x6a, 0xa6, 0x2b, 0xbb, 0xb3, 0x8e, 0x44, 0x43, 0xe9, 0xaf, 0x8e, 0x4d,
+	0x3a, 0x22, 0x99, 0x5a, 0x7f, 0x22, 0x27, 0xbf, 0xf0, 0x8a, 0xb1, 0xb0,
+	0x30, 0xff, 0xa6, 0xf4, 0x3b, 0x07, 0xbf, 0xf5, 0x49, 0xfb, 0xad, 0x4a,
+	0x48, 0xa2, 0x56, 0x3a, 0x6e, 0x58, 0xbd, 0x12, 0xed, 0x42, 0x9b, 0xaf,
+	0xf6, 0x3d, 0x68, 0x48, 0x5b, 0xd0, 0x97, 0x18, 0xb7, 0xf7, 0x6d, 0x96,
+	0xd7, 0xe7, 0x6e, 0x14, 0xd3, 0x89, 0xca, 0x8f, 0xe6, 0x53, 0x52, 0x88,
+	0xd9, 0x09, 0x16, 0x5c, 0x9b, 0x65, 0xdf, 0xc3, 0x32, 0x39, 0x1b, 0x93,
+	0x1f, 0xcf, 0x2f, 0xb7, 0x9b, 0x92, 0xb1, 0x4c, 0xd0, 0x62, 0xd1, 0xb5,
+	0xad, 0xfb, 0xc4, 0x90, 0x49, 0x27, 0x2c, 0xa7, 0xdd, 0xa2, 0x8c, 0x2c,
+	0x4a, 0xd4, 0x40, 0xbd, 0x64, 0xed, 0x06, 0xa9, 0x58, 0xfd, 0x89, 0xb0,
+	0xbc, 0x68, 0x66, 0xcb, 0x51, 0xf9, 0x74, 0xd8, 0x90, 0xb0, 0xc3, 0x79,
+	0xe6, 0x25, 0x3b, 0x6b, 0xa8, 0x39, 0x19, 0x78, 0xee, 0xae, 0x45, 0xe5,
+	0x6a, 0xc8, 0xb6, 0x8a, 0x92, 0xc0, 0x18, 0x9d, 0xf2, 0xfa, 0x3c, 0xc7,
+	0x2b, 0x9a, 0xd9, 0x7a, 0x18, 0xef, 0x33, 0x66, 0xee, 0xec, 0x61, 0x3c,
+	0x8b, 0x65, 0xa6, 0x5f, 0x64, 0x8a, 0xf6, 0x7b, 0x1b, 0xda, 0xef, 0x6d,
+	0x68, 0x1f, 0xcc, 0x3d, 0xf4, 0xff, 0xe5, 0xdc, 0x73, 0x65, 0x31, 0x4c,
+	0x27, 0x24, 0x85, 0xf1, 0xe5, 0xf6, 0x90, 0xe2, 0x05, 0x53, 0xce, 0x93,
+	0x73, 0x2c, 0x4a, 0x66, 0x51, 0xd7, 0xe5, 0x7a, 0x0a, 0xc7, 0xf9, 0x8c,
+	0x91, 0xea, 0x41, 0xde, 0x4a, 0x99, 0xc1, 0xb5, 0x97, 0x62, 0xe2, 0xcb,
+	0xc4, 0x3b, 0x0d, 0xe3, 0xbd, 0x83, 0xf1, 0xfe, 0x23, 0xf6, 0x54, 0x42,
+	0xaa, 0x2e, 0xcb, 0x66, 0x1a, 0xca, 0x66, 0x50, 0xc6, 0xfc, 0x28, 0x46,
+	0xb4, 0x64, 0x41, 0x95, 0x47, 0x8d, 0xd5, 0xf2, 0xa8, 0xa1, 0xe7, 0xaa,
+	0xba, 0x95, 0xbc, 0x15, 0xf4, 0x1f, 0x6e, 0xa8, 0x13, 0x6e, 0xa8, 0xc3,
+	0x32, 0x69, 0x28, 0x93, 0x86, 0xb2, 0x37, 0xbd, 0x6f, 0xf5, 0x59, 0xf2,
+	0x52, 0x5d, 0x8c, 0xe1, 0xbe, 0xa8, 0x4c, 0xcf, 0x87, 0xa5, 0xe0, 0x7e,
+	0x50, 0xad, 0xf4, 0x01, 0x77, 0x95, 0xde, 0x91, 0x0d, 0xe9, 0x7d, 0xb3,
+	0x21, 0x2d, 0x68, 0x5b, 0x4e, 0x48, 0x09, 0xf4, 0x9e, 0x9e, 0xb7, 0x53,
+	0x01, 0xbd, 0x4b, 0xef, 0x8b, 0xde, 0x41, 0xfb, 0x26, 0x59, 0xb2, 0xec,
+	0x54, 0x1e, 0xf4, 0x1a, 0x2e, 0xff, 0xa5, 0x68, 0xf9, 0x4f, 0xa1, 0x8c,
+	0xe3, 0x82, 0x7e, 0xe5, 0x30, 0xf8, 0xd1, 0x2c, 0xb9, 0x71, 0xf6, 0xdf,
+	0x58, 0x07, 0xeb, 0xc5, 0xfc, 0x4a, 0x75, 0xe6, 0xb3, 0x1f, 0xdb, 0xaa,
+	0x28, 0xda, 0xc7, 0xe5, 0x5b, 0x7d, 0x5c, 0x57, 0x0c, 0xeb, 0xb2, 0xe4,
+	0x42, 0x1d, 0xb4, 0x3b, 0x25, 0xfb, 0x73, 0xae, 0x24, 0x4c, 0x67, 0xb3,
+	0x14, 0x2c, 0x23, 0x51, 0x48, 0x7d, 0x4c, 0x32, 0x31, 0xc5, 0xa3, 0x8c,
+	0xe9, 0xf4, 0x20, 0x4f, 0xd1, 0x29, 0x6f, 0x3a, 0xbd, 0x78, 0x66, 0xfe,
+	0x3e, 0x8c, 0x8f, 0xf6, 0x90, 0x83, 0xf1, 0xbe, 0x4d, 0x62, 0x1e, 0xbb,
+	0x11, 0x34, 0x31, 0x24, 0xa4, 0xe8, 0x90, 0xc0, 0x3a, 0x3a, 0xf1, 0x6e,
+	0xc7, 0x45, 0x8e, 0x87, 0xf5, 0x5c, 0xa2, 0x12, 0x3a, 0x29, 0xd1, 0xa6,
+	0xf4, 0xfd, 0x63, 0x97, 0xe6, 0xe3, 0x12, 0x3e, 0x0a, 0x9a, 0x94, 0x5b,
+	0x25, 0x72, 0x52, 0xba, 0x42, 0xd2, 0x13, 0x7f, 0x00, 0x35, 0x86, 0x6b,
+	0x61, 0xd9, 0x55, 0xa3, 0xec, 0x82, 0xaf, 0xb5, 0x56, 0xfc, 0x2c, 0xfc,
+	0x62, 0xf8, 0xc5, 0xf1, 0x7b, 0x11, 0xfd, 0x74, 0x49, 0xae, 0xc6, 0x3e,
+	0xa7, 0x30, 0xb6, 0x6d, 0xe5, 0xa5, 0x27, 0xa4, 0xfb, 0xd6, 0xef, 0x22,
+	0x7f, 0xdd, 0xa6, 0xdf, 0xf9, 0xcc, 0xb9, 0x61, 0x6d, 0xe5, 0x60, 0xbd,
+	0x57, 0xb1, 0xde, 0xb8, 0x3c, 0x57, 0xb7, 0xf2, 0xa1, 0x74, 0x17, 0xd6,
+	0x1d, 0x93, 0x67, 0xd5, 0xda, 0x65, 0x7c, 0x6a, 0xf6, 0xa0, 0x67, 0x3a,
+	0x52, 0xbc, 0x31, 0xed, 0x24, 0x4a, 0xd2, 0x3a, 0x34, 0x33, 0xf8, 0x49,
+	0xec, 0x49, 0xe4, 0xd7, 0x24, 0xda, 0x91, 0xbe, 0xbc, 0xfb, 0xae, 0xde,
+	0xa8, 0x64, 0xeb, 0xc5, 0x56, 0xd3, 0x71, 0x90, 0x46, 0x8b, 0x1f, 0x4c,
+	0x73, 0x1d, 0x4e, 0xe8, 0x92, 0x63, 0x5b, 0x19, 0xf3, 0x26, 0xcc, 0xd7,
+	0xf3, 0x66, 0xa0, 0xc3, 0x46, 0x6a, 0xbf, 0xf0, 0x0e, 0x85, 0xb5, 0xfe,
+	0x32, 0xd3, 0x17, 0xc2, 0x9a, 0x8f, 0x57, 0x77, 0x77, 0xd7, 0xf8, 0xee,
+	0x9a, 0xfa, 0xfd, 0x0d, 0xff, 0xfd, 0x11, 0x43, 0xeb, 0xbf, 0x81, 0x10,
+	0xf4, 0x5f, 0x34, 0x9c, 0xbe, 0x1c, 0x42, 0x1f, 0xd1, 0x48, 0xfa, 0xad,
+	0xa1, 0xd3, 0xaa, 0x5e, 0x66, 0x4c, 0xd7, 0xfb, 0x1b, 0xbf, 0x9d, 0x33,
+	0xd6, 0x5b, 0x63, 0x3a, 0x38, 0xd6, 0xa3, 0xd2, 0xf4, 0x58, 0x52, 0xa5,
+	0xc3, 0x63, 0x8e, 0x4a, 0x47, 0x55, 0x7d, 0x23, 0x7d, 0x65, 0xb7, 0xce,
+	0x7f, 0x73, 0x77, 0x42, 0xa5, 0x7f, 0xe3, 0xa7, 0x6f, 0xf9, 0xe9, 0xcf,
+	0xfd, 0xf4, 0x6d, 0x3f, 0x7d, 0xc7, 0x4f, 0x65, 0x4c, 0xa7, 0x61, 0xbf,
+	0xbf, 0xa8, 0xff, 0xde, 0xea, 0xa7, 0x96, 0x9f, 0xc6, 0xfc, 0x34, 0xee,
+	0xa7, 0x5d, 0xfe, 0xbc, 0x12, 0x7e, 0xea, 0xfa, 0xf3, 0x1b, 0xc2, 0xfc,
+	0x92, 0x4d, 0x9a, 0x1f, 0x10, 0xfa, 0xf4, 0x7e, 0xc9, 0x0e, 0x0a, 0xe4,
+	0x22, 0x06, 0x79, 0xe4, 0xba, 0x13, 0xd0, 0x6f, 0x61, 0xca, 0xae, 0xe4,
+	0x2c, 0x96, 0xff, 0x36, 0xf8, 0x1b, 0x96, 0xe9, 0xba, 0xae, 0x3b, 0x32,
+	0xc8, 0x3a, 0x15, 0xd4, 0x21, 0x0d, 0x16, 0xd1, 0x8e, 0xf5, 0x62, 0x32,
+	0x53, 0x66, 0xdf, 0x8b, 0xd0, 0x79, 0x7f, 0x2c, 0xb9, 0xb3, 0x22, 0xdf,
+	0x53, 0xba, 0xf2, 0x9b, 0x7e, 0xbd, 0x17, 0x51, 0x2f, 0x99, 0x18, 0x36,
+	0xec, 0xf8, 0x94, 0xd8, 0x19, 0x91, 0xfe, 0x04, 0x52, 0x6b, 0x14, 0xbf,
+	0x61, 0x61, 0xbb, 0x6f, 0x8a, 0xa6, 0xcd, 0x8b, 0xd8, 0x5b, 0x22, 0x77,
+	0x62, 0xcf, 0x74, 0x6f, 0xbf, 0xe2, 0x65, 0xd0, 0xef, 0x93, 0x75, 0x91,
+	0x4b, 0xb3, 0xa4, 0xff, 0x37, 0xe5, 0xf4, 0x2c, 0xf9, 0xf1, 0xa2, 0xcc,
+	0xcc, 0x26, 0xdd, 0xef, 0x89, 0x9d, 0x3a, 0xa3, 0xe4, 0xa9, 0xdf, 0x45,
+	0x0a, 0xf9, 0xb0, 0x13, 0x8f, 0x43, 0x07, 0xf7, 0x6d, 0xd7, 0xfd, 0xf5,
+	0xf8, 0xfd, 0x39, 0xb5, 0x0f, 0xcb, 0x55, 0xe8, 0x84, 0xee, 0xed, 0xd0,
+	0x23, 0xd8, 0xef, 0xd8, 0xe3, 0x48, 0x9f, 0x46, 0xba, 0xd9, 0xc8, 0x1e,
+	0xbf, 0x84, 0xfd, 0xe8, 0xc9, 0xb8, 0xfb, 0x21, 0x31, 0x3f, 0x1a, 0x96,
+	0xcc, 0x44, 0x11, 0x5a, 0xeb, 0xbb, 0xc8, 0xbb, 0xce, 0xd4, 0x98, 0xc1,
+	0xb6, 0xee, 0x12, 0xd2, 0x66, 0xd3, 0xdb, 0x19, 0x45, 0xae, 0x08, 0xf6,
+	0x0e, 0xf6, 0x5d, 0x9a, 0xfb, 0x3a, 0x91, 0x37, 0xd3, 0x31, 0xc8, 0x3d,
+	0xdf, 0x87, 0x0c, 0xad, 0x27, 0x06, 0x1b, 0xf4, 0xc4, 0x20, 0xd6, 0xc2,
+	0x71, 0xdb, 0xd0, 0x26, 0x8c, 0x34, 0x83, 0x71, 0x39, 0x1e, 0xe7, 0x70,
+	0xc2, 0xf4, 0xe9, 0x8f, 0xb6, 0x07, 0xfc, 0xb6, 0x43, 0x0d, 0x6d, 0x87,
+	0xd0, 0x96, 0x6d, 0x9e, 0x02, 0x0d, 0x48, 0xf7, 0x62, 0x43, 0xdb, 0x22,
+	0x75, 0xfc, 0x56, 0xd3, 0x89, 0xc0, 0x2e, 0xb1, 0x8b, 0xc3, 0x28, 0xfb,
+	0xaa, 0x64, 0xcf, 0x8e, 0x72, 0xce, 0xe8, 0x8f, 0x7a, 0x7d, 0x1c, 0xfb,
+	0xdd, 0x93, 0x2c, 0xf4, 0x70, 0x2e, 0xc6, 0xbc, 0x3f, 0xf4, 0xc7, 0xe3,
+	0x1a, 0xf9, 0xfe, 0xf9, 0x2d, 0xab, 0xe3, 0xbf, 0xe8, 0x8f, 0x9f, 0x6e,
+	0x18, 0x3f, 0x8d, 0xf1, 0x5f, 0xc1, 0xde, 0xe5, 0xd8, 0x32, 0x67, 0xa6,
+	0x91, 0x3f, 0xd8, 0x03, 0x1a, 0x27, 0x64, 0xb8, 0x8e, 0x39, 0x94, 0x7f,
+	0xe9, 0x65, 0xc2, 0x5a, 0x77, 0xf8, 0x7a, 0xba, 0xb8, 0x5a, 0x87, 0x79,
+	0xac, 0x77, 0x55, 0xe9, 0x31, 0xbd, 0x97, 0xed, 0xc3, 0x45, 0x89, 0x63,
+	0x6f, 0x8f, 0x9b, 0xa4, 0xf7, 0x05, 0xf7, 0x8b, 0x98, 0xa3, 0x9d, 0x48,
+	0x98, 0x3d, 0x45, 0xd3, 0xfc, 0xa2, 0xec, 0x5f, 0x78, 0x44, 0xf6, 0x97,
+	0xd9, 0xc7, 0x67, 0x50, 0xee, 0x20, 0x6f, 0x93, 0x48, 0x27, 0xea, 0x97,
+	0xdf, 0x36, 0xf4, 0x58, 0xb0, 0xb2, 0xce, 0x92, 0x71, 0x67, 0xfd, 0xa2,
+	0x91, 0x5d, 0xa0, 0x5e, 0x46, 0x7e, 0x9d, 0xe5, 0xe8, 0x7f, 0x45, 0x97,
+	0x24, 0x7c, 0xdd, 0x49, 0x9b, 0x30, 0x03, 0xbd, 0x79, 0x18, 0xfa, 0x56,
+	0xcc, 0xac, 0x4b, 0x9e, 0x51, 0xcf, 0x3e, 0xb3, 0x55, 0xaf, 0xf9, 0x88,
+	0xa9, 0xf5, 0xb3, 0x78, 0x66, 0x3a, 0x22, 0xc5, 0xb0, 0x13, 0x2f, 0x81,
+	0x30, 0x9c, 0x7f, 0x61, 0xfc, 0x36, 0xcc, 0x8b, 0x65, 0xeb, 0x75, 0x72,
+	0xb7, 0xe4, 0x17, 0x32, 0xe8, 0xef, 0x7e, 0xbf, 0x6d, 0xa3, 0x8e, 0x26,
+	0xbd, 0x3d, 0x19, 0x76, 0x13, 0x32, 0x3d, 0xe4, 0x4a, 0x69, 0xa8, 0x3f,
+	0x1e, 0x92, 0x7e, 0x48, 0x9c, 0x13, 0x2f, 0x00, 0x5f, 0xe5, 0xad, 0x71,
+	0xcc, 0xbd, 0x08, 0x5b, 0x4a, 0xbd, 0x17, 0x51, 0xfd, 0x67, 0xdd, 0x47,
+	0x85, 0xb2, 0xfd, 0x52, 0x79, 0x14, 0x32, 0xe8, 0x79, 0x39, 0xf2, 0x72,
+	0xe0, 0x80, 0xb2, 0x99, 0x17, 0xca, 0x45, 0x0b, 0x24, 0xc5, 0xde, 0x79,
+	0x70, 0xf7, 0x24, 0xf4, 0x58, 0x4e, 0xc9, 0x1f, 0xf4, 0xae, 0x22, 0x33,
+	0xe9, 0xc7, 0x79, 0xb4, 0x82, 0x5e, 0xc3, 0xa0, 0x0d, 0xe8, 0xd2, 0x69,
+	0xa0, 0xff, 0x56, 0x29, 0xd4, 0x3f, 0xe3, 0x97, 0x31, 0x3f, 0x2c, 0xe3,
+	0xb1, 0x40, 0xcf, 0x26, 0xb6, 0x4a, 0x0b, 0xd7, 0x80, 0x3a, 0xe5, 0x70,
+	0x48, 0xcb, 0xb5, 0x25, 0x85, 0x53, 0xc3, 0x90, 0x23, 0xcf, 0xcb, 0xba,
+	0x37, 0xfa, 0x72, 0xc4, 0x7e, 0x90, 0x7f, 0x76, 0x08, 0xb6, 0xd3, 0x92,
+	0x5c, 0x98, 0xf2, 0xba, 0x53, 0xc0, 0xff, 0xb7, 0xb0, 0xe7, 0xf3, 0x91,
+	0xf4, 0x92, 0x17, 0x4e, 0x7f, 0xb3, 0xbf, 0x3a, 0xeb, 0xc4, 0x87, 0xc5,
+	0xb1, 0x46, 0xc4, 0xc4, 0x26, 0x29, 0xdd, 0x14, 0x92, 0x5b, 0x7d, 0x1b,
+	0xc4, 0x76, 0xff, 0xcb, 0x97, 0x0b, 0xb6, 0x15, 0xdf, 0x86, 0x22, 0xbf,
+	0xde, 0x1d, 0xd2, 0x36, 0x89, 0xe3, 0x06, 0x73, 0x08, 0xd6, 0xd2, 0xb1,
+	0x32, 0x97, 0x71, 0xd7, 0x94, 0x90, 0x5a, 0x0f, 0xf2, 0xce, 0xae, 0x5d,
+	0x8f, 0xd9, 0x19, 0xac, 0xe7, 0x2b, 0xa6, 0x5e, 0x4f, 0x47, 0x43, 0x5f,
+	0xb1, 0x86, 0xf5, 0x34, 0x61, 0x3d, 0xec, 0x23, 0xa8, 0x8f, 0xb2, 0xb3,
+	0xbb, 0x3b, 0x74, 0x1b, 0xd6, 0xbb, 0x09, 0xf6, 0x93, 0x65, 0x5d, 0x7e,
+	0xdb, 0xce, 0x86, 0xb6, 0x9b, 0xd7, 0xb5, 0x45, 0xd9, 0xd9, 0x8e, 0xcd,
+	0xba, 0xed, 0x01, 0xc9, 0x9e, 0xa2, 0x0d, 0x21, 0x8d, 0x82, 0xf5, 0xb0,
+	0x2d, 0x6d, 0x2b, 0xdb, 0xc2, 0xce, 0xab, 0x7e, 0xb9, 0x97, 0xf6, 0x37,
+	0xec, 0xa5, 0xfd, 0xd8, 0x4b, 0xeb, 0x6d, 0xde, 0x1a, 0xf9, 0x31, 0xc6,
+	0xcb, 0x94, 0xa1, 0x4d, 0x46, 0x4e, 0xc9, 0xd1, 0x87, 0x31, 0xfe, 0x69,
+	0xd0, 0x34, 0x21, 0x85, 0x14, 0xec, 0xab, 0x35, 0x84, 0xf7, 0x16, 0x3c,
+	0xc3, 0xee, 0x5a, 0x9b, 0x15, 0x26, 0x2d, 0xa4, 0x06, 0xa8, 0x87, 0xf0,
+	0xf7, 0x23, 0xc9, 0x63, 0x6f, 0x14, 0x52, 0x29, 0xac, 0xa9, 0x49, 0x34,
+	0x06, 0xe0, 0x58, 0x1f, 0x0e, 0x13, 0x9f, 0x5c, 0x28, 0xdf, 0x8f, 0x77,
+	0xac, 0x29, 0x75, 0xc5, 0x5f, 0x73, 0x1b, 0xea, 0x3c, 0x8c, 0x3c, 0x96,
+	0xb1, 0x0e, 0xfb, 0x58, 0xc2, 0x3b, 0x78, 0x98, 0x82, 0xf2, 0x00, 0x82,
+	0x34, 0x9d, 0x1d, 0xf8, 0x7d, 0x0f, 0x79, 0x9f, 0x44, 0xde, 0x0b, 0xc8,
+	0xfb, 0x04, 0xde, 0xff, 0x62, 0x5d, 0xbf, 0xfd, 0x78, 0x3f, 0x84, 0xf2,
+	0x26, 0x94, 0xbf, 0x82, 0xf2, 0x5b, 0xf1, 0x7b, 0x61, 0x5d, 0x9d, 0x7f,
+	0xb3, 0xee, 0x3d, 0xc0, 0x1f, 0xff, 0xde, 0x97, 0xfd, 0x00, 0x7f, 0x68,
+	0xbd, 0x3c, 0x5d, 0x6e, 0x35, 0x76, 0x9d, 0x8a, 0x1a, 0x23, 0xa7, 0x40,
+	0x8b, 0x1a, 0x75, 0x34, 0x75, 0xfd, 0xfd, 0x63, 0x33, 0xf3, 0x32, 0x10,
+	0x81, 0xde, 0x2a, 0xd4, 0xe2, 0xcc, 0x1b, 0x6c, 0x92, 0x1e, 0xf7, 0x22,
+	0xf6, 0x65, 0xa1, 0xd6, 0x85, 0x77, 0x62, 0x12, 0xc8, 0x75, 0xad, 0x05,
+	0xfb, 0xa8, 0x27, 0x55, 0x85, 0x5c, 0xef, 0x03, 0xad, 0xf3, 0xc0, 0x25,
+	0xf9, 0x5a, 0x97, 0x3c, 0x50, 0xfb, 0x9f, 0x3e, 0x9f, 0x82, 0xb1, 0xff,
+	0x68, 0xdd, 0xd8, 0x51, 0x63, 0xf8, 0x14, 0xf7, 0xda, 0xfd, 0x63, 0x93,
+	0xf3, 0x1c, 0xdf, 0xec, 0x46, 0x01, 0xe6, 0x40, 0x0c, 0x24, 0xbd, 0x61,
+	0xe9, 0x49, 0x4c, 0x0b, 0xc7, 0x2f, 0x4a, 0x28, 0xdd, 0x03, 0x7b, 0xa3,
+	0xde, 0x81, 0x79, 0xa0, 0x47, 0x6b, 0xab, 0x58, 0x68, 0xd7, 0x0a, 0x16,
+	0xea, 0x02, 0x56, 0xfa, 0x79, 0x88, 0x3a, 0x02, 0xf3, 0x82, 0x0e, 0xba,
+	0x1e, 0x74, 0xd7, 0x76, 0xa3, 0x70, 0xdc, 0xc2, 0xbe, 0x6f, 0xf7, 0xdf,
+	0x29, 0xfb, 0xc0, 0xf8, 0x66, 0x44, 0xe9, 0x41, 0x31, 0x51, 0x36, 0x48,
+	0x79, 0xc7, 0xfb, 0x02, 0x65, 0x21, 0xe1, 0xeb, 0xef, 0xdf, 0x83, 0x6d,
+	0x65, 0x79, 0x20, 0x3f, 0x4b, 0xfe, 0x5e, 0x26, 0xae, 0xff, 0x50, 0x78,
+	0xed, 0xda, 0x26, 0xd7, 0xad, 0x2d, 0xbc, 0x42, 0x57, 0xae, 0x31, 0x82,
+	0x35, 0x9e, 0x9e, 0x27, 0x6d, 0x07, 0x20, 0xb3, 0x02, 0x4f, 0x85, 0x32,
+	0x4b, 0x7d, 0xdd, 0x06, 0x1b, 0x40, 0xda, 0x85, 0x65, 0x0a, 0x6b, 0xca,
+	0x63, 0x4d, 0x79, 0xac, 0x29, 0xdf, 0x40, 0xc7, 0x7d, 0x2b, 0x6b, 0x0a,
+	0xe6, 0x8d, 0x7a, 0x6a, 0x7f, 0xf2, 0x99, 0x3f, 0xe8, 0xc5, 0xb6, 0x00,
+	0x6b, 0x73, 0x2e, 0x99, 0x75, 0x73, 0x21, 0x2d, 0x38, 0x97, 0x95, 0x79,
+	0xc4, 0xe8, 0xfd, 0xee, 0xaf, 0x91, 0xaf, 0x1c, 0x73, 0x8f, 0x4c, 0x95,
+	0x3f, 0xec, 0xcf, 0xa3, 0x15, 0xf3, 0x18, 0x87, 0xae, 0xe2, 0x78, 0xd8,
+	0x6b, 0xb5, 0x09, 0x3c, 0xc7, 0xc8, 0x7f, 0x7f, 0x2e, 0x01, 0x2d, 0x80,
+	0x3b, 0x15, 0x2d, 0x30, 0x3c, 0x70, 0x70, 0x69, 0x9c, 0x79, 0x2d, 0x5b,
+	0xf5, 0x9c, 0x12, 0xfe, 0xf8, 0x9a, 0xb6, 0x17, 0xca, 0xd4, 0xff, 0xf7,
+	0xfb, 0x7a, 0xa3, 0x91, 0x9e, 0xc5, 0x88, 0xaf, 0x1b, 0xc1, 0xfb, 0xc6,
+	0xfc, 0x4a, 0x64, 0xb5, 0x2e, 0xdf, 0xbf, 0xe3, 0xbf, 0x6f, 0x31, 0x76,
+	0x1d, 0x0f, 0xf2, 0xb6, 0x36, 0xbd, 0xbb, 0xbf, 0xff, 0x12, 0x09, 0xf4,
+	0xcc, 0xda, 0xfd, 0x7e, 0xc0, 0x5c, 0xb5, 0x63, 0x45, 0x99, 0x19, 0xcc,
+	0x98, 0xc3, 0xf5, 0x61, 0x53, 0xdb, 0x32, 0xd6, 0x39, 0xa0, 0xfc, 0x8c,
+	0x70, 0xfa, 0x21, 0xca, 0x3b, 0x31, 0xe8, 0x58, 0x76, 0xd6, 0xf3, 0xa6,
+	0xdd, 0x25, 0xd8, 0x12, 0xda, 0x00, 0xd8, 0x66, 0x65, 0xa3, 0xf7, 0x23,
+	0x1f, 0x38, 0xa1, 0x0e, 0x9b, 0x82, 0x76, 0xd9, 0x41, 0x97, 0xf9, 0x6b,
+	0xfe, 0x14, 0xc6, 0x71, 0x7f, 0xe1, 0x69, 0xfd, 0x20, 0xe1, 0xac, 0xc2,
+	0x65, 0x79, 0x60, 0xd0, 0xb0, 0xff, 0x3c, 0x35, 0x46, 0x1f, 0x0d, 0xb8,
+	0x37, 0x68, 0x8b, 0x7e, 0x1f, 0x1c, 0xcb, 0xce, 0x73, 0x1f, 0x7c, 0x0e,
+	0xfb, 0x80, 0x3c, 0xfa, 0x7d, 0xf0, 0xc8, 0x90, 0x19, 0x65, 0x7f, 0x38,
+	0x0f, 0xb6, 0x7b, 0x70, 0xac, 0x5b, 0xf9, 0xb5, 0x0f, 0x8d, 0x39, 0x8b,
+	0x21, 0xd9, 0xe7, 0xfb, 0x86, 0x7c, 0x4f, 0x2c, 0x06, 0x38, 0xa0, 0x45,
+	0x22, 0x69, 0xea, 0x36, 0x3b, 0xb5, 0x2b, 0xc4, 0xf5, 0x8c, 0x8f, 0xcd,
+	0xd0, 0x96, 0xd6, 0x6f, 0x8a, 0x48, 0x5b, 0x8b, 0x34, 0x29, 0xf9, 0xb8,
+	0xcb, 0x1f, 0xeb, 0xf7, 0x31, 0xd6, 0x56, 0xcc, 0x35, 0x04, 0x3d, 0x19,
+	0x8e, 0x63, 0x9c, 0x83, 0xa6, 0xd3, 0x8f, 0xf1, 0xe8, 0x55, 0x77, 0x01,
+	0x6f, 0x52, 0xc6, 0x6f, 0x09, 0x74, 0x04, 0xda, 0xdd, 0x87, 0x76, 0xb4,
+	0xcb, 0xa4, 0x27, 0xc7, 0xab, 0x02, 0xf3, 0xb4, 0x60, 0x1d, 0xb6, 0x95,
+	0x0d, 0x35, 0x49, 0x6e, 0x3e, 0xa8, 0xc3, 0x39, 0xdd, 0x33, 0x96, 0x5c,
+	0x4c, 0xa2, 0xaf, 0x2e, 0xca, 0x1c, 0x64, 0x2d, 0x84, 0x1f, 0xfb, 0x66,
+	0x3b, 0xe8, 0xe5, 0xa1, 0x00, 0x27, 0xac, 0xb6, 0x0f, 0xda, 0x75, 0x2f,
+	0xfe, 0x2b, 0x7f, 0xcc, 0xff, 0xed, 0x65, 0x26, 0x58, 0xce, 0x31, 0x1b,
+	0xf5, 0x36, 0xdb, 0x05, 0x75, 0x42, 0xbe, 0x1e, 0x7e, 0xac, 0x61, 0x9e,
+	0x79, 0xf0, 0x88, 0x6d, 0x24, 0x9c, 0xeb, 0x1b, 0xf2, 0xf9, 0x36, 0x85,
+	0x3c, 0x2d, 0xab, 0xd3, 0x75, 0xf2, 0x32, 0xe2, 0xd3, 0x5f, 0xf7, 0x5b,
+	0x04, 0x96, 0x29, 0xc1, 0x97, 0x0c, 0xa5, 0x33, 0xed, 0xa6, 0xf4, 0x60,
+	0x9e, 0x1b, 0xf1, 0xd5, 0x0a, 0xf8, 0x1a, 0xce, 0xa2, 0x9f, 0xd2, 0x4a,
+	0x5b, 0xfa, 0x3c, 0x53, 0x63, 0x97, 0xd0, 0xff, 0x63, 0x65, 0xbd, 0xc7,
+	0x34, 0x1d, 0x88, 0xbf, 0x0c, 0x39, 0xed, 0x00, 0xcf, 0x3b, 0xb4, 0x45,
+	0x09, 0x79, 0xd9, 0x09, 0xf0, 0x18, 0xb1, 0x18, 0xea, 0xd7, 0x39, 0x1f,
+	0xae, 0xfb, 0x3e, 0xac, 0xdb, 0x93, 0x39, 0x57, 0xcb, 0x47, 0x1f, 0xf6,
+	0xe4, 0x5f, 0x84, 0xed, 0xc3, 0x22, 0x4d, 0x72, 0x35, 0xdc, 0xb8, 0xae,
+	0x15, 0x1f, 0xda, 0xf7, 0x81, 0xee, 0xf3, 0x79, 0xf9, 0x20, 0x78, 0xd9,
+	0x9f, 0xb0, 0xa4, 0x17, 0x73, 0x47, 0x9d, 0x81, 0x1e, 0xe0, 0x7a, 0xe8,
+	0xc8, 0x58, 0x1c, 0xf3, 0xb1, 0x20, 0xf3, 0x5b, 0x7d, 0x8c, 0xf1, 0x75,
+	0xaa, 0x57, 0x69, 0x57, 0xfe, 0xd5, 0x7d, 0x4a, 0xd6, 0xb4, 0xec, 0x85,
+	0xfc, 0xf2, 0x5b, 0x56, 0xe8, 0x0a, 0xb3, 0x2c, 0xab, 0x3e, 0x6a, 0xa0,
+	0xa3, 0x95, 0x2f, 0x8e, 0xfa, 0x8c, 0xb5, 0x78, 0xde, 0x94, 0x9a, 0xef,
+	0xfd, 0xe0, 0x75, 0x68, 0x25, 0x56, 0xc1, 0xf7, 0xc4, 0x62, 0x93, 0x48,
+	0x47, 0xa3, 0xdc, 0x50, 0x56, 0x36, 0x47, 0xe8, 0x8b, 0x26, 0xcc, 0x80,
+	0x77, 0x61, 0xe2, 0x42, 0xbc, 0x07, 0xbc, 0xe3, 0xf3, 0x46, 0x98, 0x12,
+	0x3e, 0xa4, 0xeb, 0x79, 0xa7, 0x5d, 0xfa, 0xb7, 0xcd, 0x52, 0xb4, 0x34,
+	0x56, 0x2a, 0xb9, 0x94, 0xd3, 0x6c, 0x22, 0x2c, 0x76, 0x7c, 0x9f, 0x5c,
+	0x87, 0xbe, 0x33, 0xa9, 0x88, 0x1f, 0x3f, 0xc9, 0x0b, 0xe3, 0x02, 0x9e,
+	0x77, 0x09, 0xbe, 0x67, 0x15, 0xfe, 0x11, 0xfc, 0x46, 0x29, 0xd5, 0xb0,
+	0x07, 0x5a, 0xc2, 0xd8, 0x53, 0xab, 0xf1, 0x8f, 0x0a, 0xea, 0x2c, 0xa0,
+	0xec, 0xf1, 0x5a, 0xc0, 0x65, 0x0f, 0xfe, 0xae, 0xe7, 0x4d, 0x3a, 0x7f,
+	0xe7, 0x15, 0x62, 0x8d, 0x75, 0x03, 0x8c, 0x47, 0xec, 0x41, 0x6c, 0x44,
+	0x4c, 0xc3, 0x32, 0xe2, 0x93, 0x83, 0x98, 0x0b, 0x65, 0xb8, 0x4d, 0xa2,
+	0x69, 0x3b, 0x3e, 0x2a, 0x81, 0x0e, 0xbe, 0x0c, 0xfe, 0x17, 0xbd, 0x66,
+	0xa7, 0x4b, 0x9e, 0xaf, 0xd3, 0xbf, 0x0e, 0x78, 0x9f, 0x00, 0xef, 0xed,
+	0x62, 0x51, 0x3c, 0x79, 0xd6, 0x75, 0x12, 0x5f, 0x46, 0xfa, 0x03, 0xf7,
+	0x63, 0xa4, 0xc5, 0x53, 0x30, 0x75, 0xc0, 0xed, 0xb0, 0x11, 0x73, 0x81,
+	0xff, 0xd0, 0x46, 0xff, 0xc1, 0xa7, 0xe3, 0x55, 0xf4, 0x69, 0x5b, 0x26,
+	0x40, 0xe2, 0xed, 0xa8, 0xa7, 0xe5, 0x3a, 0xc8, 0x3b, 0x88, 0xba, 0x9c,
+	0x03, 0x7d, 0xba, 0x1f, 0x62, 0x2f, 0x79, 0xde, 0xdd, 0xee, 0xf1, 0x86,
+	0x3d, 0x71, 0x3f, 0x78, 0xa0, 0x64, 0x73, 0xb0, 0x1d, 0xf6, 0x7b, 0x19,
+	0x03, 0x75, 0x28, 0xdf, 0x83, 0xcf, 0x90, 0xd1, 0x41, 0xda, 0x02, 0xcc,
+	0x0b, 0x38, 0x8f, 0x36, 0xe7, 0x39, 0xd0, 0xfe, 0xe1, 0x1a, 0xf9, 0xd0,
+	0xaa, 0x74, 0xfe, 0xf3, 0x65, 0xda, 0x75, 0x8d, 0xe5, 0xf2, 0x2a, 0x0e,
+	0x41, 0x5b, 0x90, 0x02, 0x6f, 0x68, 0x03, 0x68, 0xe7, 0xd9, 0x96, 0xf5,
+	0xd8, 0xb6, 0x91, 0x7f, 0xac, 0xb3, 0x15, 0xb8, 0x8a, 0x32, 0xd8, 0x06,
+	0x3c, 0xd2, 0x2e, 0xfb, 0x52, 0xcd, 0xa0, 0x7b, 0x87, 0xc2, 0x51, 0xa6,
+	0xf3, 0x29, 0xd8, 0xac, 0x26, 0xc6, 0x4d, 0xdc, 0x55, 0x5f, 0xe6, 0x13,
+	0xc8, 0x7b, 0x07, 0xf4, 0x67, 0xde, 0x50, 0x44, 0x63, 0xa4, 0x47, 0xb0,
+	0xff, 0x2a, 0x5b, 0xb3, 0x8a, 0x1f, 0xe4, 0x43, 0xa0, 0x07, 0x02, 0xbb,
+	0xc7, 0xfd, 0x1e, 0xe0, 0x56, 0xee, 0x73, 0x43, 0xf5, 0x7f, 0x35, 0x44,
+	0xbf, 0xa1, 0xd1, 0x0f, 0xe2, 0xbe, 0xf3, 0xbc, 0x67, 0x5d, 0x65, 0x47,
+	0xc1, 0x83, 0x9d, 0xb0, 0xf5, 0x61, 0x9f, 0xd6, 0xad, 0xa0, 0xb5, 0xb6,
+	0xad, 0x89, 0x0e, 0xe8, 0x1d, 0x67, 0x5b, 0x44, 0xd3, 0x8f, 0x18, 0xe1,
+	0x97, 0x5e, 0xc8, 0x71, 0xb0, 0xb7, 0x88, 0x0f, 0x38, 0x77, 0xb4, 0x5b,
+	0x60, 0x5d, 0xda, 0xe0, 0x43, 0x18, 0x23, 0x24, 0x89, 0x4e, 0xbe, 0x9f,
+	0xf0, 0xdb, 0xf0, 0xd9, 0x93, 0xde, 0xed, 0x8d, 0xf2, 0x3c, 0x84, 0x79,
+	0x72, 0x3d, 0x09, 0x3f, 0xe6, 0xd2, 0xa5, 0x74, 0xc0, 0xaa, 0x5c, 0x04,
+	0x73, 0x0a, 0xc6, 0xe5, 0xdc, 0xe2, 0xd2, 0x81, 0xb9, 0xdd, 0x09, 0x1d,
+	0xbd, 0xbd, 0x83, 0x7d, 0x06, 0x63, 0x37, 0xce, 0x29, 0xc0, 0x2d, 0xda,
+	0xee, 0x46, 0x9c, 0x66, 0xd9, 0xde, 0x49, 0xda, 0x75, 0x29, 0x5d, 0xbd,
+	0xca, 0x0f, 0xda, 0x5f, 0x8e, 0xbd, 0x3e, 0xff, 0xd6, 0x86, 0x79, 0x69,
+	0xba, 0x5e, 0xa8, 0x13, 0x1b, 0x13, 0x33, 0xec, 0x40, 0x19, 0xe7, 0x04,
+	0xa7, 0x3b, 0xe6, 0xc9, 0x88, 0xa2, 0x1b, 0xe7, 0xd6, 0x38, 0x0f, 0x62,
+	0x27, 0xce, 0x99, 0x73, 0x58, 0x8f, 0x49, 0x38, 0x9f, 0x70, 0x93, 0xe6,
+	0xe1, 0x90, 0xbf, 0xae, 0x00, 0xc3, 0x24, 0xd1, 0xf6, 0x4f, 0xb0, 0x06,
+	0x3e, 0x73, 0x1d, 0x81, 0xcd, 0x4e, 0xea, 0x7e, 0x5a, 0x56, 0x63, 0x53,
+	0xab, 0x31, 0x29, 0xee, 0x99, 0x80, 0x4e, 0x1d, 0x3e, 0x8f, 0x76, 0xae,
+	0x1b, 0xd7, 0x76, 0xd7, 0xea, 0x91, 0x4f, 0x34, 0xac, 0x6f, 0x40, 0x8a,
+	0x0b, 0x94, 0x8b, 0x8f, 0x20, 0x0d, 0x30, 0xc1, 0x20, 0x74, 0x7f, 0x06,
+	0xf6, 0x9f, 0xd8, 0xe0, 0x5d, 0x98, 0x20, 0x1f, 0x4a, 0xcb, 0x44, 0x01,
+	0xfe, 0x9f, 0xd2, 0xfd, 0x6a, 0x2f, 0x46, 0xf1, 0xde, 0x0a, 0xfd, 0x7f,
+	0x17, 0x65, 0x6c, 0x22, 0x5f, 0x73, 0x27, 0xa6, 0x6a, 0x83, 0x13, 0xc4,
+	0x51, 0x5a, 0xe6, 0x50, 0xbf, 0x26, 0x79, 0xf8, 0x6d, 0x13, 0x59, 0xd5,
+	0x4e, 0xc5, 0x2c, 0x36, 0xe8, 0xa7, 0x95, 0xfb, 0x31, 0xaf, 0xc7, 0x8a,
+	0x4e, 0xe4, 0xa0, 0x83, 0x16, 0xe6, 0x60, 0x97, 0x1c, 0x3b, 0x43, 0xb9,
+	0x9c, 0x74, 0xed, 0x51, 0x25, 0x7b, 0x31, 0x7b, 0x9c, 0xbc, 0xac, 0xce,
+	0x7d, 0x48, 0x16, 0xe6, 0x3d, 0xb9, 0x03, 0xba, 0xf0, 0x21, 0xc8, 0xaa,
+	0x9c, 0x83, 0x22, 0x3c, 0x07, 0xe5, 0x75, 0x2e, 0x06, 0xb1, 0xeb, 0x92,
+	0xc8, 0x91, 0xb8, 0x84, 0x8f, 0x10, 0x53, 0x26, 0xad, 0x3b, 0x44, 0x60,
+	0xc7, 0xbe, 0xfd, 0x49, 0x53, 0xec, 0xa1, 0x8c, 0x24, 0x13, 0x8f, 0xc3,
+	0xf6, 0x56, 0x91, 0x96, 0x24, 0x99, 0x3a, 0x8b, 0xbe, 0x22, 0xe7, 0x50,
+	0x17, 0xed, 0x36, 0x9d, 0x4e, 0xe0, 0xd7, 0x29, 0x2d, 0xa7, 0xf5, 0x5e,
+	0x69, 0x39, 0xbd, 0xd6, 0xdf, 0x1f, 0x5e, 0xf1, 0xf7, 0x59, 0xfe, 0xb6,
+	0x1f, 0xa7, 0x78, 0x01, 0x3a, 0x27, 0xf0, 0x9f, 0x0c, 0xe5, 0x8f, 0x5d,
+	0x50, 0x36, 0xec, 0x05, 0xf8, 0x59, 0x8e, 0xe4, 0xca, 0xf0, 0x9f, 0xd2,
+	0x9e, 0x3c, 0xe3, 0x16, 0xbd, 0xec, 0xa0, 0x27, 0x97, 0x5d, 0xa7, 0x58,
+	0x10, 0xfb, 0x6d, 0xea, 0xbb, 0xff, 0xee, 0xfe, 0x23, 0xb9, 0xb7, 0xdd,
+	0xbe, 0x37, 0x63, 0x14, 0xbd, 0x56, 0xf8, 0x54, 0x37, 0xa4, 0x0f, 0xca,
+	0xe4, 0xb6, 0x25, 0xf8, 0xdb, 0x99, 0x1b, 0x80, 0xb3, 0xe0, 0xaf, 0xb3,
+	0xff, 0x2b, 0xca, 0x77, 0x7b, 0xb0, 0xe7, 0xa0, 0x6c, 0xd9, 0x66, 0x5b,
+	0xd7, 0x42, 0xc4, 0x40, 0x07, 0x25, 0x07, 0xfd, 0x9f, 0x0b, 0x39, 0xd6,
+	0x1e, 0xb1, 0x47, 0xbf, 0x20, 0x8c, 0x37, 0x3a, 0xd2, 0x7d, 0xc4, 0x89,
+	0x7f, 0xce, 0xe8, 0xdd, 0xff, 0x39, 0xd0, 0xb2, 0xfb, 0x1c, 0xdf, 0x3d,
+	0x89, 0x6e, 0xb3, 0xf0, 0x1c, 0x93, 0xee, 0x13, 0x09, 0x49, 0x82, 0x2e,
+	0x7d, 0x8a, 0x26, 0xd0, 0xe9, 0x6e, 0x5c, 0x7a, 0x8f, 0x10, 0x93, 0x28,
+	0xda, 0xf4, 0x81, 0x36, 0x29, 0xd0, 0x06, 0xbe, 0x4c, 0xbf, 0x75, 0x0d,
+	0xe9, 0xb2, 0x24, 0x87, 0x7e, 0x04, 0xda, 0xf4, 0x81, 0x36, 0xbd, 0xe7,
+	0x12, 0x68, 0x8f, 0x3e, 0x4e, 0x77, 0x23, 0x6d, 0x91, 0xb1, 0xeb, 0x3b,
+	0xf1, 0xec, 0x48, 0xf2, 0x48, 0x14, 0x63, 0x18, 0x32, 0xd2, 0x53, 0x94,
+	0x5d, 0xdb, 0x80, 0x9d, 0x63, 0x07, 0xe5, 0x22, 0xec, 0x50, 0x19, 0x7e,
+	0xdb, 0x33, 0x43, 0xf6, 0xf8, 0x12, 0x74, 0x69, 0xfd, 0x4e, 0x4f, 0x5e,
+	0xd9, 0xf6, 0x5d, 0x2f, 0x7e, 0xbd, 0x7d, 0xaf, 0x18, 0x83, 0x32, 0x53,
+	0x56, 0xf6, 0x21, 0x9e, 0x0d, 0x29, 0xac, 0x83, 0x35, 0x16, 0x61, 0x63,
+	0x18, 0x4f, 0x75, 0xa0, 0xeb, 0xbf, 0x20, 0x0f, 0x55, 0xa6, 0xf1, 0x03,
+	0xde, 0x9e, 0x65, 0xdd, 0xfd, 0xc0, 0xd9, 0x8f, 0xc8, 0xbe, 0x59, 0x60,
+	0xb1, 0x34, 0xe6, 0x3d, 0xe8, 0x00, 0x8f, 0xff, 0xd3, 0x26, 0x69, 0x43,
+	0x1e, 0x68, 0x3b, 0x5e, 0x5f, 0x8f, 0x6b, 0x97, 0xc0, 0x87, 0x21, 0xf9,
+	0xf3, 0xfa, 0xa0, 0x7c, 0xa3, 0x3e, 0x20, 0x7f, 0x0a, 0xdb, 0xf2, 0x5c,
+	0xbd, 0x0b, 0x7b, 0x25, 0x0e, 0x9e, 0xa4, 0xc1, 0x1f, 0x57, 0xfe, 0xac,
+	0x9e, 0x92, 0x17, 0x40, 0xab, 0xe7, 0xf1, 0xdb, 0x55, 0x4e, 0xc9, 0x48,
+	0x79, 0xc0, 0xe7, 0x11, 0xf9, 0xc3, 0x18, 0x89, 0x83, 0xb5, 0xdb, 0x4f,
+	0x17, 0xb1, 0xff, 0x16, 0xea, 0xce, 0x5b, 0x55, 0xf9, 0x18, 0xc6, 0xb3,
+	0xe4, 0xcc, 0x8a, 0x7d, 0x29, 0x7a, 0x96, 0x63, 0x1f, 0xce, 0x83, 0x0f,
+	0x55, 0xec, 0xd3, 0x71, 0x45, 0xfb, 0x55, 0xdb, 0x53, 0xd5, 0xb6, 0x27,
+	0x58, 0xdf, 0x5c, 0x41, 0x7e, 0x20, 0xd9, 0x63, 0x33, 0x32, 0x09, 0x5f,
+	0xfa, 0xb7, 0x5c, 0x0f, 0x72, 0x4c, 0x5d, 0x3c, 0x48, 0x1d, 0x9f, 0xc8,
+	0x87, 0x4c, 0xe5, 0xdf, 0x6a, 0xac, 0xd1, 0xd9, 0x81, 0x3d, 0x9b, 0xca,
+	0x98, 0xd3, 0x92, 0x3c, 0x36, 0x2d, 0xdd, 0xc7, 0x20, 0x0b, 0x2e, 0xfb,
+	0x5a, 0xb2, 0xcc, 0x77, 0xc9, 0x03, 0xc7, 0xb1, 0x87, 0x72, 0xe2, 0x58,
+	0x6f, 0x49, 0x0a, 0xe3, 0x1f, 0x90, 0x1e, 0xb4, 0x71, 0xd0, 0xe6, 0x9a,
+	0x1a, 0xbb, 0x15, 0x63, 0x37, 0xcb, 0x63, 0x31, 0x1b, 0xb2, 0x46, 0x1b,
+	0xfe, 0x33, 0xc9, 0x56, 0x99, 0xfe, 0x0f, 0xc9, 0x9e, 0xe9, 0x6b, 0x96,
+	0x16, 0x3e, 0x43, 0x35, 0x9c, 0x64, 0x7e, 0x37, 0x52, 0xe6, 0x3b, 0x62,
+	0x1e, 0xfd, 0xb9, 0x64, 0xcf, 0x73, 0xec, 0xb7, 0x90, 0xff, 0x8a, 0x64,
+	0x8f, 0xbe, 0x83, 0xf7, 0x8b, 0x48, 0xdf, 0x46, 0x3a, 0x2e, 0xdd, 0x47,
+	0xe1, 0x1b, 0x9f, 0xff, 0x3e, 0xde, 0xe1, 0xcb, 0x9d, 0x7f, 0x0c, 0xf5,
+	0x76, 0x62, 0x7e, 0x25, 0xf4, 0x97, 0x81, 0xce, 0xbb, 0xd5, 0x9f, 0x3f,
+	0xf3, 0x99, 0xc7, 0xb2, 0xc7, 0xa0, 0xd3, 0xfe, 0x13, 0x74, 0x9a, 0xff,
+	0xbc, 0xc0, 0x77, 0xea, 0x36, 0x3e, 0x4f, 0x83, 0x26, 0x07, 0x54, 0xac,
+	0xea, 0x11, 0x97, 0xf6, 0x66, 0x87, 0x4c, 0x58, 0x45, 0xaf, 0x05, 0xb8,
+	0xa2, 0x15, 0xfb, 0x60, 0x7a, 0xfb, 0xc6, 0xfb, 0xe0, 0x70, 0xef, 0x41,
+	0xd9, 0xb4, 0x2d, 0x58, 0x7f, 0xb0, 0x5e, 0xc7, 0xfa, 0xa9, 0xa2, 0x83,
+	0x5d, 0xfc, 0x9c, 0x70, 0x1d, 0x4e, 0xfc, 0x49, 0xb3, 0xf7, 0xde, 0x87,
+	0xb0, 0x0f, 0xcc, 0xf3, 0x7c, 0xd7, 0xfb, 0xc0, 0x3c, 0x0f, 0xdd, 0x70,
+	0x12, 0xbe, 0xec, 0xc9, 0x2e, 0x69, 0x3e, 0xba, 0xba, 0x0f, 0x9a, 0x8e,
+	0xfe, 0xfa, 0x7d, 0xd0, 0x7c, 0x1e, 0xf5, 0xce, 0x93, 0x66, 0xe8, 0xe3,
+	0x0c, 0x69, 0xd6, 0x89, 0xf4, 0x0b, 0x58, 0x2b, 0xe7, 0xde, 0x8c, 0xb9,
+	0x6b, 0x5c, 0xf4, 0x49, 0xc8, 0xfb, 0x83, 0xdb, 0x0e, 0xf8, 0xf9, 0x7f,
+	0xe9, 0x8d, 0xc6, 0xec, 0x8a, 0x18, 0xa4, 0x29, 0xea, 0x56, 0x49, 0xc3,
+	0x6b, 0xa0, 0xcd, 0x7e, 0xe9, 0x26, 0xfd, 0xaa, 0x7b, 0xf0, 0x5e, 0xf4,
+	0x22, 0xf4, 0xcd, 0x15, 0x3d, 0x81, 0x93, 0x06, 0x99, 0xff, 0x1a, 0x64,
+	0x86, 0x18, 0xf3, 0x8a, 0x4c, 0xce, 0x7a, 0x32, 0xa1, 0xce, 0xad, 0xde,
+	0xa0, 0x1f, 0xbb, 0x2d, 0x26, 0x4b, 0x89, 0x18, 0x68, 0xb2, 0x00, 0xdd,
+	0x7e, 0x51, 0x34, 0x1d, 0x18, 0xbb, 0x1e, 0x11, 0x27, 0xbe, 0x4b, 0x9c,
+	0xd4, 0x8f, 0x40, 0x87, 0x5d, 0x90, 0xfd, 0x5c, 0x9d, 0xb2, 0xf3, 0xaa,
+	0x0c, 0x43, 0x26, 0x5e, 0x77, 0xed, 0x14, 0xb0, 0x10, 0xf4, 0x05, 0xe5,
+	0x82, 0x32, 0xd1, 0xa6, 0x74, 0xd2, 0x49, 0xd7, 0x7e, 0xaa, 0x2a, 0xb7,
+	0xc8, 0xc9, 0x0e, 0xad, 0x7f, 0xcd, 0xa3, 0xca, 0x5e, 0xa4, 0xf2, 0x66,
+	0x0f, 0x74, 0x74, 0x4a, 0xac, 0xde, 0xdd, 0x4d, 0xc1, 0x19, 0x6a, 0xe1,
+	0x98, 0x21, 0xd3, 0xbd, 0xe4, 0x15, 0xfb, 0xc5, 0x7b, 0xb5, 0xe8, 0x85,
+	0x9d, 0xb7, 0xbc, 0x53, 0x9d, 0x09, 0x79, 0xb8, 0x77, 0x45, 0x2e, 0x2b,
+	0x22, 0x7a, 0x5f, 0x0c, 0x2b, 0x7e, 0x04, 0xf3, 0x0e, 0xd6, 0x12, 0x94,
+	0x0d, 0x34, 0x94, 0x71, 0x2d, 0x94, 0xf5, 0x95, 0xbd, 0x93, 0x78, 0xf7,
+	0x5c, 0x17, 0x41, 0x33, 0xfb, 0xa9, 0x92, 0x5c, 0x86, 0xec, 0x81, 0x86,
+	0xe7, 0x99, 0x92, 0x86, 0xd3, 0x90, 0xfb, 0xd7, 0x64, 0xe4, 0x18, 0xf7,
+	0xcc, 0x6b, 0x58, 0xab, 0xd2, 0x25, 0xd0, 0x11, 0xec, 0xcf, 0x93, 0x19,
+	0x97, 0x31, 0x92, 0x5b, 0xe2, 0x53, 0xf0, 0xe1, 0xf2, 0x96, 0xa7, 0xce,
+	0x42, 0x4f, 0x0f, 0xa1, 0x4d, 0xf5, 0x0b, 0xf8, 0xfd, 0x86, 0xbf, 0xb6,
+	0x2f, 0x81, 0xee, 0x76, 0xa2, 0x62, 0xfe, 0x01, 0xe8, 0xfe, 0x88, 0x24,
+	0x8f, 0xae, 0xe8, 0x1a, 0xc8, 0x9d, 0xd6, 0x35, 0xc9, 0xf3, 0x96, 0x54,
+	0xcb, 0x8e, 0xdc, 0x4f, 0x1d, 0x52, 0xe6, 0xba, 0xa0, 0x63, 0x60, 0x4f,
+	0xab, 0x65, 0xe8, 0x99, 0x32, 0x74, 0x0a, 0x74, 0xc8, 0x9f, 0x22, 0xff,
+	0x05, 0xd4, 0x79, 0x1e, 0x3e, 0xcf, 0x73, 0xc0, 0x7e, 0xcf, 0x02, 0x53,
+	0x5c, 0x28, 0x67, 0x7c, 0xdf, 0x50, 0xad, 0x17, 0x36, 0x4b, 0xf9, 0x2b,
+	0x52, 0xad, 0x90, 0x1e, 0x3f, 0x57, 0xbc, 0xcd, 0xba, 0x5b, 0x89, 0xb3,
+	0x30, 0x33, 0x91, 0x4a, 0x25, 0xa0, 0x09, 0x75, 0x1f, 0xcf, 0x10, 0x02,
+	0x5d, 0xd9, 0xba, 0x4e, 0x57, 0x8a, 0x7c, 0xbb, 0xa6, 0xf1, 0x24, 0xf1,
+	0x71, 0x69, 0x16, 0x72, 0xe3, 0x63, 0xf3, 0x12, 0xec, 0xe6, 0x32, 0xfc,
+	0x92, 0x68, 0xfa, 0x7b, 0x12, 0x3d, 0xe1, 0x79, 0x3f, 0x81, 0xdd, 0x2c,
+	0x82, 0x27, 0xa6, 0x81, 0xfc, 0x45, 0x96, 0x51, 0xee, 0x29, 0xdb, 0x06,
+	0x63, 0xef, 0xf2, 0x32, 0xf2, 0xaa, 0xca, 0x67, 0xfa, 0x3e, 0xe6, 0xe3,
+	0xcf, 0x4f, 0xe5, 0xf9, 0x31, 0xc4, 0x89, 0x94, 0x3c, 0x5e, 0xee, 0xb7,
+	0x9a, 0xd1, 0xbe, 0xb2, 0xc8, 0x36, 0xf6, 0x10, 0x9a, 0xa2, 0x1d, 0xf3,
+	0xbb, 0xe4, 0xe2, 0x6c, 0x5a, 0xcd, 0xa1, 0x3a, 0x9f, 0x16, 0x1d, 0xb3,
+	0xa4, 0xbe, 0xe2, 0x5c, 0xf1, 0x4e, 0xdf, 0xb2, 0x4c, 0x3b, 0x1b, 0x96,
+	0x62, 0x9c, 0xb4, 0x8e, 0xcb, 0xf2, 0x6c, 0x2e, 0xca, 0xd8, 0x4d, 0xd6,
+	0xe1, 0x73, 0x10, 0x3b, 0xb0, 0xde, 0x47, 0xec, 0x80, 0xf1, 0x82, 0x30,
+	0x6c, 0x99, 0x8a, 0x21, 0x20, 0x4d, 0x34, 0xf8, 0xac, 0x2c, 0x0f, 0xce,
+	0xed, 0x02, 0x6c, 0x44, 0x3c, 0xc9, 0xf5, 0xda, 0xc5, 0x25, 0xe1, 0xf9,
+	0xdc, 0x25, 0xb9, 0xeb, 0xa4, 0x5e, 0x9f, 0x79, 0x46, 0x78, 0xc6, 0x28,
+	0xd7, 0xe6, 0x6d, 0xf7, 0x2a, 0x30, 0x45, 0x2e, 0xe6, 0x92, 0x5f, 0x51,
+	0xe8, 0xaf, 0xa1, 0x8c, 0xf9, 0xf9, 0xa8, 0xc6, 0x67, 0x61, 0x99, 0xe6,
+	0xb9, 0xd3, 0x2c, 0x74, 0x1b, 0x30, 0xe4, 0xef, 0x84, 0xf1, 0x5c, 0xe3,
+	0x3b, 0xfc, 0x34, 0xed, 0x83, 0xe2, 0x59, 0xf7, 0x47, 0x9a, 0x9b, 0x27,
+	0xb9, 0x76, 0x43, 0xee, 0x02, 0x3a, 0x11, 0xf4, 0xdf, 0xed, 0x8f, 0xd5,
+	0x7d, 0x26, 0xc5, 0xd8, 0x9d, 0x24, 0xa1, 0x2f, 0xb2, 0xf3, 0x61, 0x8c,
+	0xd5, 0xe5, 0x63, 0x73, 0x96, 0xad, 0xc7, 0x9e, 0x81, 0x8f, 0x97, 0x92,
+	0x27, 0xca, 0x01, 0xd6, 0x4b, 0xc1, 0xc6, 0x4a, 0x78, 0xb4, 0xcf, 0x93,
+	0x9f, 0xb8, 0xa4, 0xd7, 0x00, 0xde, 0x5d, 0x39, 0xbc, 0xc6, 0x6f, 0x97,
+	0xf7, 0xf8, 0x03, 0x2e, 0x23, 0x36, 0x9b, 0xc5, 0xfc, 0x80, 0x8f, 0x38,
+	0x77, 0x13, 0xf6, 0xbc, 0x04, 0xdc, 0x65, 0x9e, 0xeb, 0x52, 0x65, 0x26,
+	0xb0, 0x41, 0x75, 0x16, 0xba, 0xf1, 0x1c, 0xcf, 0x9e, 0xa1, 0xdb, 0xce,
+	0x45, 0xa4, 0x34, 0x47, 0xb9, 0x94, 0x0e, 0x13, 0xfc, 0x62, 0xfd, 0xea,
+	0x6c, 0x17, 0xd2, 0x56, 0xa4, 0x09, 0xd5, 0x4f, 0x75, 0xd6, 0x51, 0xed,
+	0xab, 0xb3, 0x29, 0xd5, 0xae, 0x3a, 0x3b, 0x80, 0xd4, 0x95, 0xa6, 0x73,
+	0x70, 0x9c, 0xce, 0xf5, 0xca, 0xf4, 0x29, 0xd8, 0x97, 0x41, 0x53, 0xdd,
+	0x53, 0xc8, 0xc3, 0xfe, 0x84, 0xe1, 0x65, 0x5d, 0xb5, 0x86, 0x80, 0xb1,
+	0x76, 0x00, 0x83, 0xec, 0x10, 0xe7, 0x04, 0xd7, 0x4f, 0xdd, 0xbb, 0xcc,
+	0x78, 0x52, 0xfc, 0xb3, 0x92, 0x91, 0x7d, 0x73, 0xcd, 0xd8, 0xaf, 0x61,
+	0xab, 0x24, 0x3d, 0xd6, 0x2e, 0xbc, 0x17, 0x2a, 0xa4, 0xdb, 0x3d, 0xca,
+	0x77, 0xcb, 0xba, 0x57, 0xc0, 0x93, 0x34, 0xc6, 0x78, 0x3f, 0xed, 0xfb,
+	0x78, 0xd6, 0xe1, 0xf7, 0x91, 0xc6, 0x7c, 0x1a, 0xe9, 0xd1, 0x04, 0x7a,
+	0x65, 0xde, 0x43, 0xd6, 0x82, 0x78, 0x06, 0xe5, 0x9a, 0xf4, 0xbd, 0x47,
+	0x96, 0x9d, 0xb4, 0xbc, 0xec, 0xa4, 0xe4, 0xa2, 0xb3, 0x5d, 0xbe, 0x03,
+	0x3b, 0x7d, 0xc9, 0xb9, 0x27, 0x4a, 0x2c, 0x50, 0x55, 0x67, 0x3d, 0x01,
+	0xaf, 0x1c, 0x15, 0xe3, 0x68, 0x4a, 0xbf, 0x29, 0x97, 0x66, 0x89, 0x9d,
+	0xbd, 0x9d, 0x93, 0x6e, 0x91, 0x76, 0x0b, 0x3a, 0x99, 0x58, 0xad, 0x08,
+	0xfb, 0x77, 0x10, 0xbe, 0x02, 0xed, 0x9e, 0xb2, 0x51, 0xf1, 0x11, 0xbd,
+	0x9f, 0xdd, 0x02, 0xf4, 0xea, 0xf2, 0x1c, 0xf5, 0x12, 0xf6, 0x94, 0x70,
+	0x0f, 0xe0, 0xbd, 0x42, 0xde, 0x3b, 0xf2, 0x64, 0x99, 0x6b, 0x2d, 0x5d,
+	0xd7, 0x22, 0x21, 0x19, 0x55, 0x98, 0xa1, 0x4d, 0xbe, 0xbd, 0xb8, 0x59,
+	0x4c, 0x58, 0x29, 0xf3, 0xe6, 0x88, 0xbe, 0xe9, 0x01, 0x5b, 0x29, 0xed,
+	0x8c, 0xf7, 0x27, 0x36, 0x41, 0x3f, 0xc6, 0xd5, 0xfa, 0xda, 0xb9, 0x9a,
+	0xe0, 0x7d, 0x00, 0x7b, 0x8c, 0xcf, 0x86, 0xe4, 0x9c, 0x18, 0x9e, 0x99,
+	0x72, 0xdf, 0x31, 0xf6, 0xb4, 0x49, 0x32, 0xe3, 0x86, 0x34, 0x3b, 0x7d,
+	0xc2, 0xfb, 0x19, 0x55, 0x85, 0x41, 0x06, 0x54, 0xdd, 0x66, 0xe7, 0x36,
+	0xe0, 0x3c, 0xca, 0x2f, 0xd2, 0xd3, 0x7a, 0x0e, 0x39, 0xe0, 0xba, 0x02,
+	0x8a, 0x79, 0x76, 0x55, 0xc4, 0xde, 0xc8, 0xab, 0xfa, 0x3b, 0xb0, 0xbf,
+	0xd2, 0x9b, 0x88, 0x27, 0x46, 0x20, 0x9b, 0x97, 0x66, 0xf9, 0xcc, 0x72,
+	0xfa, 0x5b, 0x8c, 0xb7, 0x1d, 0x18, 0x9b, 0x71, 0x9e, 0xf0, 0xf7, 0x93,
+	0x18, 0x77, 0xf4, 0x01, 0x97, 0x1e, 0x69, 0xc2, 0xba, 0xec, 0x44, 0xc2,
+	0x30, 0x3b, 0x4d, 0xe0, 0xfa, 0x11, 0x65, 0x83, 0x39, 0x07, 0x3b, 0xb5,
+	0x04, 0xfa, 0xbc, 0x9c, 0x6a, 0x93, 0x65, 0x0b, 0x34, 0xe5, 0xbe, 0xb6,
+	0xb6, 0x31, 0x1f, 0xbf, 0x4d, 0xc8, 0xeb, 0x41, 0xda, 0x8c, 0xf4, 0x23,
+	0x52, 0x3a, 0xfe, 0xdb, 0x9b, 0x74, 0x9f, 0x91, 0x75, 0xef, 0x3f, 0xf7,
+	0xc7, 0xea, 0xf5, 0x7d, 0x2c, 0x8e, 0x15, 0x11, 0xe7, 0x2b, 0xad, 0xd2,
+	0x73, 0xc4, 0x02, 0xde, 0x8d, 0x03, 0xff, 0x76, 0x49, 0xea, 0x48, 0x42,
+	0x6e, 0x3e, 0x12, 0xc4, 0x8e, 0xbe, 0x34, 0x96, 0x54, 0x71, 0xc4, 0x2f,
+	0x8e, 0x39, 0x15, 0x75, 0x67, 0xc4, 0x3f, 0x97, 0x3e, 0xec, 0x9f, 0x53,
+	0xcf, 0x8d, 0xf5, 0xa9, 0x74, 0x7e, 0x2c, 0xa5, 0xd2, 0xa7, 0xc6, 0x6e,
+	0xae, 0x69, 0x9f, 0xa9, 0xb4, 0x90, 0x92, 0x2f, 0x97, 0x89, 0x39, 0x07,
+	0x81, 0x27, 0x5d, 0xe8, 0x9e, 0x01, 0xe8, 0x9e, 0x14, 0x74, 0xcf, 0x10,
+	0x75, 0x0f, 0x74, 0xf9, 0xab, 0xd0, 0xe5, 0xae, 0xbc, 0x0e, 0x19, 0xbe,
+	0xe0, 0x36, 0x03, 0x2b, 0x7a, 0xde, 0x2e, 0xb5, 0x5e, 0xfb, 0xa9, 0x25,
+	0xf0, 0xbb, 0x7a, 0x56, 0xa2, 0xed, 0xd0, 0x4b, 0xdb, 0x4e, 0x36, 0xc9,
+	0x42, 0xcc, 0xf3, 0x8e, 0xb9, 0x8e, 0x5c, 0x43, 0xfd, 0xac, 0xc3, 0xbd,
+	0x3d, 0xbf, 0x89, 0x3e, 0xda, 0xb5, 0xd9, 0xed, 0xd0, 0x53, 0xdc, 0x03,
+	0x51, 0xa9, 0x4e, 0xc4, 0x65, 0x11, 0x3e, 0xdb, 0x6a, 0x9d, 0x14, 0x9e,
+	0xa9, 0x13, 0xaa, 0xa8, 0x9b, 0x82, 0xcd, 0xb0, 0xe4, 0x74, 0x5f, 0x42,
+	0xce, 0xf4, 0xd9, 0x43, 0xf0, 0xf9, 0xa2, 0xf4, 0x37, 0x2b, 0xf0, 0xff,
+	0xab, 0x65, 0xd6, 0x67, 0x3d, 0xec, 0xd9, 0xb2, 0x6e, 0x37, 0x53, 0x0e,
+	0x74, 0x07, 0x64, 0x76, 0x9e, 0xb1, 0x41, 0x6d, 0x17, 0x4c, 0xb3, 0x19,
+	0xbe, 0xad, 0x0b, 0xfa, 0x4f, 0x20, 0x7f, 0x90, 0x77, 0x51, 0x90, 0x47,
+	0x7c, 0xf4, 0x67, 0x8a, 0xcf, 0x39, 0x77, 0x02, 0x79, 0x6c, 0x63, 0xc7,
+	0x93, 0xc8, 0x1f, 0x97, 0x64, 0x9c, 0x18, 0x73, 0xd2, 0xed, 0x44, 0x1e,
+	0xfb, 0x08, 0xf9, 0x31, 0x9a, 0x8b, 0x4a, 0x96, 0x42, 0x4e, 0x90, 0xdf,
+	0xaf, 0xe2, 0x05, 0x19, 0xcb, 0xc5, 0x1e, 0x61, 0x5e, 0xd2, 0x62, 0xbb,
+	0x9c, 0xeb, 0x2a, 0xfd, 0x78, 0xb7, 0x7f, 0x86, 0x71, 0x57, 0xad, 0x55,
+	0x72, 0xb5, 0xa6, 0x5f, 0x61, 0x13, 0x82, 0x7d, 0xba, 0x1c, 0xb7, 0x84,
+	0xe7, 0xf7, 0x7a, 0xef, 0x87, 0xb7, 0x73, 0x8f, 0x80, 0xee, 0xb0, 0xc9,
+	0xcf, 0x63, 0xbd, 0xcf, 0xc1, 0x26, 0x3f, 0x0b, 0x9b, 0x7c, 0xa1, 0xbc,
+	0xaa, 0x53, 0xb4, 0x2d, 0xa6, 0x5e, 0x78, 0x1a, 0x3c, 0x1b, 0x87, 0x2f,
+	0xb0, 0x07, 0x3e, 0xc2, 0x28, 0xfc, 0x81, 0x61, 0xf0, 0x2f, 0x0d, 0xde,
+	0x4d, 0x80, 0x6f, 0x19, 0xf0, 0x71, 0x48, 0x9d, 0xa3, 0xce, 0xa9, 0xbb,
+	0x02, 0x6f, 0x2a, 0x7b, 0xfc, 0x78, 0xd9, 0x84, 0xcd, 0x28, 0x7a, 0xd7,
+	0x39, 0x36, 0x30, 0xe1, 0xca, 0x1e, 0x1f, 0xfa, 0x36, 0x74, 0xcd, 0xdf,
+	0x62, 0x5e, 0xcf, 0xcd, 0xd1, 0xc6, 0xa3, 0x8e, 0xc6, 0xe0, 0x2e, 0xe3,
+	0x5f, 0xd8, 0xe3, 0x87, 0x97, 0x65, 0x09, 0x58, 0x24, 0x43, 0x39, 0x86,
+	0x4f, 0x61, 0x5f, 0xa8, 0x48, 0x2f, 0xf5, 0x22, 0x70, 0xd2, 0x90, 0x0c,
+	0x1e, 0x8d, 0x03, 0xff, 0x01, 0xdd, 0xab, 0x33, 0x3e, 0x3c, 0x9f, 0xdf,
+	0x22, 0x26, 0x31, 0xa0, 0xcb, 0x73, 0x1a, 0xea, 0x92, 0x00, 0x37, 0x2d,
+	0x0d, 0x75, 0x48, 0x66, 0x5b, 0x87, 0xd2, 0x27, 0xb6, 0xfb, 0x32, 0xc6,
+	0x1d, 0x91, 0x66, 0xe0, 0xba, 0x22, 0xc6, 0x38, 0x20, 0x3f, 0x76, 0x19,
+	0xb7, 0xd2, 0xfe, 0x20, 0xe6, 0x12, 0x05, 0xcd, 0x36, 0x4d, 0x3a, 0x56,
+	0x74, 0xa4, 0xce, 0xfe, 0xa3, 0x0a, 0x77, 0xe5, 0x84, 0xfd, 0xc3, 0x76,
+	0x60, 0xcc, 0xe4, 0x51, 0xca, 0x7e, 0x3f, 0xf8, 0xf6, 0x1b, 0xfe, 0x9d,
+	0xa7, 0x03, 0x2d, 0x7a, 0xbf, 0x70, 0xfe, 0x4b, 0xc4, 0x18, 0x8c, 0xb3,
+	0x6b, 0x5f, 0x7d, 0x65, 0x6e, 0x3b, 0x60, 0xd3, 0x7e, 0xa7, 0x85, 0x32,
+	0x30, 0xe1, 0xc2, 0x17, 0x3c, 0xaa, 0x6d, 0x78, 0xf7, 0x79, 0xb4, 0x3a,
+	0x26, 0x9d, 0x3c, 0x29, 0x35, 0xe5, 0x66, 0xf9, 0x74, 0x58, 0xf7, 0x63,
+	0x9e, 0xb4, 0x20, 0xab, 0xd4, 0x05, 0x9d, 0x90, 0x73, 0xbe, 0x53, 0xaf,
+	0x50, 0x2f, 0x50, 0x16, 0x1c, 0x29, 0xd5, 0xa1, 0x17, 0xda, 0xba, 0xa4,
+	0x42, 0x9a, 0x9d, 0xa4, 0xae, 0x78, 0x53, 0x66, 0xd6, 0xe9, 0xcf, 0x61,
+	0x09, 0x7c, 0xdd, 0x56, 0x89, 0xa4, 0x1d, 0xeb, 0x6e, 0xb5, 0x46, 0xad,
+	0x43, 0xf7, 0x11, 0x93, 0xce, 0x65, 0xec, 0x0e, 0xf1, 0xf1, 0xa8, 0xc2,
+	0x54, 0x6f, 0x60, 0xad, 0xec, 0x43, 0xd1, 0x69, 0x68, 0x58, 0xfb, 0x07,
+	0x2a, 0x0e, 0x08, 0x6c, 0x1c, 0xff, 0x5b, 0xe8, 0x97, 0x1c, 0xb1, 0x0a,
+	0xe8, 0xdc, 0x7d, 0x8c, 0x72, 0x74, 0x1d, 0xf5, 0x19, 0xb0, 0x5f, 0x8a,
+	0x3a, 0x5c, 0x16, 0x8f, 0x02, 0x87, 0x99, 0xb7, 0x49, 0x81, 0xf2, 0x0a,
+	0xdd, 0x57, 0x58, 0x34, 0x65, 0x66, 0xbe, 0x4d, 0x7a, 0x4e, 0x32, 0xe6,
+	0xfa, 0xf0, 0x26, 0x69, 0x63, 0xdc, 0x95, 0x76, 0x69, 0x50, 0x72, 0xc8,
+	0xef, 0x3e, 0x19, 0x52, 0x31, 0xb2, 0x8a, 0x49, 0x1a, 0x0d, 0x40, 0x1f,
+	0x40, 0x87, 0x99, 0xbf, 0x6c, 0xd6, 0xb8, 0x12, 0xb2, 0x54, 0x86, 0x8c,
+	0x95, 0x21, 0x63, 0x65, 0xc8, 0x58, 0x19, 0x32, 0x06, 0x3c, 0xf8, 0x1c,
+	0xf6, 0xdf, 0xb3, 0xe5, 0x21, 0xdf, 0xd6, 0xdf, 0xab, 0x6c, 0x7d, 0xa9,
+	0xfc, 0xaa, 0xc7, 0xf4, 0x05, 0xe5, 0xaf, 0x0e, 0x40, 0x06, 0xe9, 0x9f,
+	0x06, 0x7e, 0x2b, 0x30, 0xfc, 0xdc, 0x6b, 0x92, 0x9b, 0xa3, 0xcc, 0x78,
+	0x72, 0xcc, 0xb5, 0x64, 0x61, 0x81, 0x7e, 0xe4, 0x65, 0xb9, 0x73, 0xf6,
+	0x8a, 0xdc, 0x3d, 0xdb, 0x2f, 0xff, 0xc2, 0x52, 0x78, 0xc2, 0x5f, 0x3f,
+	0xe8, 0x7e, 0x9c, 0x34, 0x28, 0x7a, 0x4d, 0x4e, 0xc6, 0x0e, 0x6b, 0x99,
+	0xb1, 0x86, 0x15, 0x1d, 0x79, 0x4e, 0xae, 0xe9, 0x97, 0x5b, 0xc1, 0x94,
+	0xf0, 0xdb, 0x61, 0xf7, 0x17, 0xfb, 0xa8, 0x3b, 0xec, 0x62, 0x37, 0xf6,
+	0xf4, 0x7e, 0x13, 0xf2, 0x17, 0xa6, 0xff, 0x4b, 0x1a, 0x3b, 0xd6, 0xb2,
+	0x68, 0x1f, 0x27, 0x13, 0xb3, 0x0f, 0x8b, 0xa9, 0xe8, 0x8e, 0xbd, 0xc9,
+	0x75, 0x92, 0xee, 0xdf, 0x6a, 0xe1, 0x79, 0x6a, 0xf5, 0xf8, 0x7f, 0xde,
+	0xc4, 0xd8, 0x63, 0xcc, 0x21, 0x2d, 0x2f, 0xcb, 0xfe, 0x1a, 0xf3, 0x5e,
+	0x43, 0x39, 0xd3, 0xcb, 0xde, 0x5d, 0x2b, 0x67, 0xfa, 0xc0, 0x50, 0x9d,
+	0x58, 0x63, 0xb9, 0xd7, 0xc7, 0xdf, 0x03, 0x0a, 0x53, 0xbf, 0x1b, 0x3b,
+	0x93, 0x3e, 0x2e, 0xe8, 0x73, 0x59, 0xc5, 0x06, 0x37, 0x88, 0x19, 0x3f,
+	0x85, 0xfd, 0x54, 0xbc, 0x2a, 0x8c, 0x5f, 0x32, 0xb6, 0xcb, 0xb8, 0x71,
+	0xa3, 0xa6, 0x50, 0x67, 0xa6, 0x72, 0x27, 0xf4, 0xca, 0x5d, 0xd0, 0x2b,
+	0x77, 0xbf, 0xeb, 0x9e, 0x58, 0x10, 0xc3, 0xef, 0x29, 0x86, 0xcc, 0x2e,
+	0x19, 0xaf, 0x35, 0xb6, 0x65, 0x4c, 0x77, 0xa3, 0x18, 0x2e, 0xe3, 0xbb,
+	0xa9, 0x75, 0x71, 0x41, 0xca, 0x84, 0x27, 0x97, 0x5c, 0xc6, 0xe0, 0x82,
+	0xbb, 0x5f, 0x1b, 0x61, 0xb1, 0xef, 0xb7, 0x04, 0xf1, 0xe7, 0x70, 0xfa,
+	0xaa, 0xf0, 0x1e, 0x58, 0x69, 0x96, 0xd8, 0x40, 0x9d, 0x0b, 0xaa, 0x38,
+	0x76, 0x4e, 0xc7, 0x12, 0x90, 0x0f, 0x8b, 0x0b, 0xdf, 0x87, 0x71, 0x6c,
+	0x6b, 0xbb, 0x6d, 0x8d, 0x87, 0xd4, 0x99, 0xa1, 0xda, 0xc3, 0x5a, 0x87,
+	0x41, 0x66, 0x56, 0x62, 0xbe, 0xbc, 0x93, 0xc0, 0xb5, 0x5c, 0x05, 0xef,
+	0xe9, 0x1f, 0xc0, 0x77, 0x00, 0x7f, 0xa7, 0xa1, 0x97, 0x0a, 0xaa, 0xbf,
+	0x28, 0xf9, 0x9c, 0xc9, 0x86, 0x4c, 0x89, 0x9c, 0xa0, 0x5f, 0xa4, 0xe3,
+	0x2e, 0xb9, 0x90, 0xad, 0xf4, 0x36, 0xe6, 0x0e, 0xac, 0xc6, 0x7d, 0x99,
+	0xc8, 0x37, 0xa7, 0x9b, 0xa4, 0x0a, 0xfc, 0x33, 0x5d, 0x67, 0x7c, 0x00,
+	0x7b, 0xf6, 0xf4, 0x0f, 0x65, 0xdf, 0xfc, 0xcf, 0x5a, 0xb4, 0xdc, 0x33,
+	0xa6, 0xcc, 0xf5, 0x05, 0x73, 0x58, 0xdb, 0xb7, 0x79, 0x42, 0xa2, 0x2d,
+	0xb0, 0x65, 0xbb, 0x4f, 0x10, 0x0b, 0x34, 0xcb, 0x52, 0x8c, 0xfd, 0xea,
+	0xbd, 0x32, 0x53, 0x66, 0xdf, 0x3f, 0x94, 0x5d, 0xf3, 0xf7, 0x6d, 0xa6,
+	0xfe, 0x38, 0x8d, 0xfd, 0xbf, 0x6c, 0xd1, 0x76, 0x4e, 0xc0, 0xb6, 0x75,
+	0xca, 0x1b, 0xf3, 0xb4, 0x8b, 0x49, 0xeb, 0x8c, 0xf4, 0xc7, 0xcf, 0x60,
+	0x4e, 0x4f, 0xb8, 0x61, 0xfa, 0x6b, 0xde, 0x30, 0xf2, 0xbe, 0x23, 0x49,
+	0xab, 0xdb, 0xe0, 0x73, 0xbf, 0xf5, 0xa4, 0xf0, 0xce, 0x41, 0xd2, 0xba,
+	0xc5, 0xa0, 0x1c, 0xc1, 0xff, 0x3e, 0xbd, 0x3a, 0xcf, 0x1f, 0xcd, 0x2b,
+	0x9f, 0x49, 0xe9, 0x97, 0xd3, 0x2e, 0xc7, 0xfb, 0x99, 0xaf, 0xd3, 0x6e,
+	0x81, 0xec, 0x47, 0xfd, 0x73, 0x31, 0xb4, 0x21, 0xae, 0x71, 0xc3, 0xfe,
+	0xfb, 0x97, 0x24, 0x7b, 0x2a, 0x06, 0x3d, 0xc6, 0xbe, 0x02, 0x3f, 0x82,
+	0xb6, 0x31, 0xc0, 0xde, 0xb4, 0x73, 0xb7, 0xc1, 0xde, 0xdd, 0xa8, 0xe6,
+	0x33, 0xea, 0x0e, 0xc8, 0xf4, 0x71, 0x8e, 0xdd, 0x07, 0x1d, 0x1e, 0x57,
+	0x72, 0x5b, 0x2a, 0x2f, 0xc3, 0xd0, 0x36, 0x4b, 0x74, 0x1b, 0xe9, 0xf9,
+	0x29, 0xb9, 0xdd, 0x99, 0x90, 0x3b, 0x20, 0x3b, 0xc3, 0x8e, 0x2b, 0xbb,
+	0xc0, 0x8b, 0x11, 0x07, 0xf6, 0x46, 0xe1, 0xe9, 0x66, 0xf8, 0x60, 0x1c,
+	0x9b, 0xf7, 0x1d, 0xd9, 0x56, 0x63, 0xc9, 0xaf, 0xd7, 0x35, 0x8d, 0xb2,
+	0xf3, 0x0f, 0x2b, 0xda, 0x8c, 0xba, 0x3b, 0x7c, 0xfb, 0xda, 0x26, 0x39,
+	0x55, 0x6f, 0x87, 0xb2, 0xc3, 0xa5, 0xc5, 0x7b, 0x90, 0xc2, 0x26, 0x2f,
+	0x42, 0xcf, 0x00, 0x7f, 0x97, 0x6a, 0xdb, 0xf1, 0x0e, 0xdb, 0xb9, 0x98,
+	0x46, 0xfa, 0x29, 0xa4, 0xac, 0xfb, 0xf1, 0xcd, 0x3a, 0xae, 0xbb, 0xfe,
+	0xfe, 0x91, 0x18, 0xbb, 0xd5, 0x59, 0xf7, 0x55, 0x75, 0x67, 0xcd, 0x04,
+	0xc6, 0xc9, 0xce, 0x49, 0xb4, 0x15, 0xd8, 0x67, 0xf6, 0x84, 0x9d, 0xda,
+	0x65, 0xec, 0x94, 0x31, 0xf8, 0xf5, 0x55, 0x97, 0xbc, 0xdc, 0x2e, 0x9f,
+	0xbd, 0x95, 0x32, 0xb2, 0x53, 0x26, 0x6f, 0x35, 0x64, 0x72, 0xc0, 0xce,
+	0x70, 0xde, 0x37, 0x7f, 0x24, 0xf0, 0xad, 0x7b, 0x46, 0x93, 0xc6, 0xa0,
+	0x3c, 0x09, 0x19, 0x2b, 0x42, 0xbe, 0x76, 0xd5, 0x49, 0x73, 0xea, 0x79,
+	0xea, 0xf7, 0x14, 0x70, 0x73, 0x80, 0xfb, 0x1c, 0x99, 0xad, 0x37, 0x4b,
+	0xe2, 0x7a, 0xc6, 0x96, 0x13, 0xfa, 0xcc, 0xed, 0x37, 0xb5, 0x3f, 0x60,
+	0x0e, 0xc2, 0x27, 0x51, 0xcf, 0xcc, 0x8f, 0x48, 0xe1, 0x7a, 0xd2, 0x3d,
+	0x46, 0x7f, 0xd8, 0x23, 0xc6, 0xd3, 0xf7, 0x77, 0x68, 0x1f, 0x98, 0xbe,
+	0xba, 0x79, 0x05, 0xdb, 0xb5, 0xd9, 0xa9, 0xbc, 0xf1, 0xe0, 0x66, 0x9d,
+	0xbf, 0x91, 0x3c, 0x06, 0x71, 0xb8, 0x0a, 0xd6, 0x4d, 0x7b, 0x6e, 0xc3,
+	0xf6, 0x17, 0xbd, 0x76, 0xe7, 0x5e, 0xf9, 0x73, 0xd8, 0xf6, 0x6f, 0xac,
+	0xd8, 0xf6, 0xbd, 0xbc, 0xfb, 0xb5, 0xce, 0xfe, 0x3b, 0xd6, 0x9d, 0x58,
+	0xcf, 0x28, 0x78, 0x7a, 0x07, 0x7e, 0xb7, 0x97, 0xd7, 0xc4, 0xf5, 0xe6,
+	0x8a, 0xc0, 0x92, 0x4d, 0x0e, 0xfb, 0x5b, 0x13, 0xdf, 0x2b, 0x16, 0x64,
+	0x25, 0x76, 0x38, 0x74, 0x4d, 0x68, 0xf3, 0xde, 0x92, 0x48, 0xaf, 0xf3,
+	0x56, 0xb7, 0xe1, 0xbc, 0x68, 0x1a, 0x3c, 0x67, 0x76, 0xe5, 0x6c, 0x9d,
+	0x18, 0xec, 0xa2, 0x98, 0xe7, 0x89, 0xbf, 0x5e, 0x51, 0x31, 0xa9, 0x6a,
+	0xf9, 0xfb, 0x48, 0xa9, 0xab, 0x5f, 0x83, 0xcd, 0x55, 0xb4, 0x55, 0x38,
+	0x85, 0x76, 0xf7, 0x0e, 0xf0, 0x62, 0x1a, 0xbf, 0xee, 0x6d, 0xb7, 0x58,
+	0x05, 0x75, 0x2e, 0xc8, 0x58, 0x58, 0xaf, 0xb5, 0xcd, 0x60, 0xd9, 0x46,
+	0x71, 0xb1, 0x1f, 0x48, 0xf8, 0x18, 0xec, 0x9c, 0x49, 0x1d, 0xc1, 0x75,
+	0x50, 0xc7, 0xc3, 0x4e, 0x1c, 0xe7, 0x7e, 0xdf, 0xa8, 0x7e, 0x50, 0x37,
+	0x58, 0x8b, 0xb2, 0x05, 0x99, 0x02, 0x63, 0x9e, 0x65, 0xf2, 0xc0, 0x05,
+	0x0f, 0x3c, 0x39, 0xe1, 0xb6, 0x43, 0x77, 0xc7, 0x24, 0x74, 0x82, 0xf7,
+	0x80, 0x88, 0xf1, 0xfa, 0x81, 0xb7, 0xb6, 0xf8, 0x98, 0x21, 0x26, 0xe1,
+	0x13, 0x5d, 0xd2, 0x0c, 0x4c, 0xdd, 0x74, 0x84, 0xf6, 0x31, 0x99, 0x18,
+	0x86, 0x20, 0x84, 0xd5, 0x1d, 0x48, 0x7b, 0xe8, 0x0d, 0xe9, 0x4f, 0xbc,
+	0x21, 0xc4, 0x4a, 0xbb, 0x5b, 0xe1, 0x13, 0xb8, 0x17, 0x37, 0xa8, 0x5f,
+	0x5a, 0xad, 0x0f, 0x59, 0x62, 0xac, 0x8d, 0x6d, 0x18, 0x7b, 0x4b, 0x0e,
+	0xbd, 0xce, 0x98, 0x1b, 0x7c, 0xcf, 0xa6, 0x73, 0x7a, 0x0e, 0xe6, 0xe9,
+	0x0e, 0xa9, 0x9e, 0xe2, 0x3e, 0x65, 0xdc, 0xc5, 0xd2, 0x7e, 0x6b, 0x99,
+	0xfe, 0x2b, 0xcb, 0x13, 0x7e, 0x79, 0xb7, 0x5f, 0x4e, 0xff, 0x94, 0xf6,
+	0x0f, 0xf6, 0x0e, 0x3a, 0xf4, 0x9e, 0xed, 0x8e, 0xb2, 0x79, 0xf7, 0xac,
+	0xf0, 0x6c, 0x8f, 0x98, 0x47, 0xe1, 0xb7, 0x96, 0x0f, 0x8a, 0xb3, 0x6d,
+	0x29, 0x15, 0x96, 0x71, 0xf0, 0x82, 0xef, 0xca, 0x5e, 0xa6, 0x1e, 0x93,
+	0xfd, 0x8a, 0x37, 0xd5, 0xe3, 0xf6, 0xe1, 0x84, 0x31, 0x2d, 0x66, 0x95,
+	0xcf, 0x5f, 0x40, 0xfa, 0x18, 0xb0, 0x8e, 0x8e, 0x65, 0x9a, 0xd5, 0xb5,
+	0xb4, 0xdc, 0xa5, 0xee, 0xa0, 0x0d, 0x6c, 0x18, 0xf3, 0x62, 0xb9, 0xbe,
+	0xa3, 0x96, 0x5a, 0x13, 0xf7, 0xca, 0x99, 0xc4, 0x31, 0x41, 0x39, 0x79,
+	0x41, 0x7e, 0xc1, 0x0e, 0x1f, 0x0f, 0x62, 0x60, 0x6d, 0x3e, 0x5f, 0xc8,
+	0x9f, 0x59, 0x79, 0xd6, 0xb2, 0x47, 0x29, 0x7f, 0x1f, 0xdf, 0x7e, 0x83,
+	0xe4, 0x3b, 0x19, 0x7f, 0x6b, 0x9c, 0xc3, 0xfa, 0xb8, 0x5a, 0xe3, 0xf8,
+	0xeb, 0xe3, 0x71, 0x1c, 0x5b, 0xc7, 0xdc, 0xb2, 0x6b, 0x62, 0x6e, 0x8d,
+	0xe3, 0x71, 0xac, 0x2d, 0xf0, 0x9d, 0x8a, 0x5e, 0xcc, 0x21, 0x8f, 0x7a,
+	0x12, 0xf3, 0x7c, 0xff, 0x9a, 0x09, 0x3e, 0xc6, 0x60, 0x4b, 0xc8, 0xcb,
+	0xe0, 0x2c, 0x9a, 0x3c, 0x4d, 0x26, 0x1e, 0xd3, 0xfc, 0x1c, 0xd2, 0x7c,
+	0xd7, 0xfc, 0xbf, 0xb8, 0xc2, 0x47, 0xda, 0x08, 0xf2, 0xb1, 0x53, 0x04,
+	0xba, 0xd6, 0x3c, 0x42, 0x1e, 0x32, 0x25, 0x0f, 0x59, 0x46, 0x1e, 0x76,
+	0xfb, 0x65, 0xe4, 0x1f, 0x30, 0xda, 0x57, 0x80, 0x33, 0xdc, 0xac, 0xba,
+	0x2f, 0xde, 0xdd, 0x1b, 0xec, 0xc5, 0x94, 0x3c, 0xbf, 0xd0, 0x22, 0x56,
+	0x5a, 0xaf, 0x6b, 0x62, 0x4d, 0xfc, 0x9d, 0xe7, 0x59, 0x03, 0xc4, 0x9d,
+	0xc1, 0xba, 0xe2, 0x5c, 0xd7, 0x7e, 0xb9, 0x0c, 0x8c, 0x13, 0x86, 0xff,
+	0x97, 0x02, 0xc6, 0x19, 0x80, 0xce, 0xa5, 0x6f, 0x8e, 0xbc, 0x1a, 0x31,
+	0x0b, 0xed, 0x5d, 0x0a, 0x7b, 0x85, 0x7a, 0x98, 0x98, 0x04, 0x58, 0xab,
+	0x12, 0xe8, 0x18, 0xf4, 0x6f, 0x06, 0xfd, 0x93, 0xce, 0x99, 0x9b, 0xaf,
+	0x93, 0xa5, 0xc4, 0x75, 0x62, 0x27, 0x16, 0x65, 0x95, 0xaf, 0x13, 0x1b,
+	0xd3, 0xdd, 0xbd, 0x27, 0xb4, 0x2a, 0x1b, 0x13, 0x1b, 0xf0, 0x7e, 0x4a,
+	0x82, 0xf2, 0x80, 0xf7, 0x1b, 0xf2, 0xa1, 0xf8, 0xaa, 0x90, 0x17, 0xa4,
+	0x01, 0x31, 0x5c, 0x44, 0x3e, 0x1f, 0xe3, 0x7e, 0x2c, 0xaa, 0xf3, 0xce,
+	0xa4, 0xd9, 0xab, 0x74, 0xc6, 0xb0, 0xab, 0xe5, 0xb5, 0x88, 0x71, 0xa2,
+	0x3d, 0xff, 0xd2, 0x1b, 0x8e, 0xc1, 0xc7, 0xed, 0xa1, 0x7e, 0x09, 0xf6,
+	0x74, 0x8b, 0xda, 0xd3, 0x4f, 0xb8, 0x86, 0x94, 0x1c, 0x43, 0xa6, 0x9d,
+	0x83, 0x0a, 0xdf, 0xff, 0x26, 0xfa, 0xfa, 0xac, 0xdf, 0xd7, 0xb4, 0xf4,
+	0xfa, 0xfa, 0xe7, 0x00, 0xe4, 0xdc, 0x93, 0xbb, 0xdd, 0xed, 0xf2, 0xf1,
+	0x76, 0xee, 0x81, 0x60, 0xfd, 0x07, 0xa5, 0x67, 0xfb, 0x52, 0x02, 0x5e,
+	0xc1, 0xcd, 0x91, 0x15, 0x1a, 0x70, 0x9f, 0x05, 0xf2, 0xad, 0xe9, 0xa0,
+	0xd7, 0xbf, 0x66, 0xad, 0xfe, 0x3a, 0xb9, 0x66, 0xd6, 0xe3, 0x5a, 0x03,
+	0x1c, 0x1a, 0xac, 0x35, 0xa8, 0xdf, 0x0a, 0x59, 0xb2, 0x13, 0x62, 0x34,
+	0xd2, 0x66, 0x45, 0x47, 0x8d, 0x32, 0x66, 0xc2, 0x6f, 0x1c, 0x12, 0x46,
+	0x10, 0x9b, 0x56, 0xba, 0x33, 0xde, 0x0d, 0x0c, 0xee, 0xf4, 0xf6, 0xa6,
+	0x0a, 0x2a, 0x66, 0x6a, 0xaa, 0x75, 0x4d, 0x03, 0x97, 0x2d, 0xb8, 0xaf,
+	0x7a, 0x0f, 0x03, 0xb7, 0xe6, 0xe5, 0x11, 0x09, 0xad, 0x89, 0xed, 0xe2,
+	0xfd, 0x3c, 0xe3, 0xbb, 0x76, 0x22, 0x03, 0x1e, 0xff, 0x16, 0xfc, 0xf7,
+	0x2a, 0xf4, 0xfe, 0xfd, 0xb4, 0x0d, 0x65, 0xd8, 0x0b, 0x60, 0x93, 0x6f,
+	0xfc, 0x4a, 0xfc, 0x9e, 0x6f, 0x88, 0xed, 0x6a, 0x8c, 0xfa, 0xac, 0xc2,
+	0xa5, 0xc4, 0xec, 0x87, 0x8d, 0x3b, 0xfb, 0x42, 0xf0, 0x31, 0x8a, 0x5e,
+	0xd4, 0x21, 0x96, 0x3b, 0x28, 0xb7, 0x83, 0x3f, 0x67, 0x17, 0x8a, 0xc6,
+	0x48, 0x39, 0x90, 0x55, 0xf8, 0x94, 0x75, 0x3b, 0xb5, 0x0c, 0x7a, 0x3c,
+	0xed, 0xe3, 0x3e, 0x9e, 0xdf, 0x54, 0x7d, 0x7f, 0x85, 0xb1, 0xa2, 0x52,
+	0xfd, 0xa0, 0xcc, 0xb8, 0xa6, 0xbe, 0x4f, 0x16, 0xcb, 0xdc, 0xd0, 0xbc,
+	0x42, 0x23, 0x1b, 0x98, 0xdc, 0x4e, 0x51, 0x7f, 0x57, 0xfd, 0xf3, 0x8f,
+	0xa7, 0x95, 0x7c, 0x05, 0x98, 0x9e, 0x18, 0x9d, 0xf8, 0xbd, 0xc7, 0x1a,
+	0xe5, 0x73, 0x85, 0x32, 0xe0, 0xe3, 0x76, 0xf7, 0x21, 0xc9, 0x8c, 0x27,
+	0x14, 0x76, 0x79, 0xbc, 0xcc, 0xfd, 0x42, 0xec, 0x7f, 0x59, 0x96, 0xb1,
+	0x3f, 0xe8, 0x3b, 0xc0, 0x07, 0xc0, 0xd8, 0xdc, 0x17, 0xc8, 0xab, 0x59,
+	0xef, 0xb1, 0x2f, 0x36, 0xb7, 0x11, 0x67, 0xbc, 0x54, 0xfe, 0x98, 0xa2,
+	0xdf, 0x92, 0x04, 0xb1, 0x74, 0x85, 0x07, 0x8b, 0xd9, 0x90, 0x21, 0xc9,
+	0x63, 0x7f, 0x08, 0x19, 0xfa, 0x27, 0xf0, 0x8f, 0x58, 0x4f, 0xd4, 0x79,
+	0xd6, 0x30, 0x70, 0x97, 0xe9, 0x7c, 0x40, 0x4a, 0x56, 0x44, 0x4a, 0xea,
+	0xae, 0x66, 0x44, 0xc5, 0x9e, 0x68, 0xf3, 0x4b, 0x16, 0x71, 0x7f, 0x6b,
+	0x9b, 0xb6, 0xf5, 0x1d, 0x78, 0x67, 0x3b, 0xbe, 0x33, 0x7f, 0x5a, 0x22,
+	0xc7, 0x0e, 0x48, 0xd3, 0xb1, 0x47, 0xa4, 0xf9, 0x28, 0x71, 0x1e, 0x63,
+	0x66, 0xe6, 0x6d, 0xcd, 0x42, 0xdc, 0xfd, 0x30, 0xc6, 0x3e, 0x28, 0x3f,
+	0x71, 0x83, 0x39, 0xfd, 0x15, 0xe6, 0xc8, 0x3a, 0xc1, 0x7b, 0x80, 0xc9,
+	0x6f, 0xc3, 0x7c, 0xb8, 0xfe, 0x84, 0x8f, 0xfd, 0x6e, 0x6b, 0xf0, 0x5b,
+	0x9b, 0x7c, 0xbf, 0x95, 0xed, 0x2a, 0xb0, 0xd9, 0xc7, 0x25, 0xe2, 0x04,
+	0xed, 0x77, 0xa2, 0x5e, 0xbc, 0xe1, 0x4e, 0x04, 0xeb, 0xf8, 0x77, 0x04,
+	0xda, 0x88, 0x7d, 0x78, 0xfe, 0xce, 0x3c, 0x7d, 0x07, 0xc0, 0xac, 0x7e,
+	0xc6, 0x5c, 0x3b, 0xfe, 0x8e, 0x86, 0xba, 0x41, 0x5e, 0xd0, 0x26, 0xa2,
+	0xfd, 0xfd, 0xc1, 0x48, 0x43, 0xbb, 0xa5, 0xad, 0x3a, 0xd5, 0xfe, 0x87,
+	0xf6, 0x85, 0xb8, 0x86, 0x54, 0x03, 0xce, 0x69, 0xf4, 0x3f, 0xc4, 0xc8,
+	0x21, 0xbf, 0x30, 0x1f, 0xdc, 0x2b, 0x33, 0xb1, 0x16, 0xbb, 0x48, 0x1f,
+	0xc6, 0xe2, 0xdd, 0xdc, 0xf9, 0xa2, 0xf0, 0x4e, 0x35, 0xef, 0x16, 0xf1,
+	0x2e, 0x07, 0xea, 0x25, 0x34, 0x06, 0xe5, 0x7b, 0x1c, 0x3c, 0xff, 0x48,
+	0x97, 0x99, 0xfe, 0xaf, 0x37, 0x64, 0x07, 0x89, 0x6f, 0xb6, 0xf2, 0x5c,
+	0x12, 0xd8, 0x99, 0x72, 0xf6, 0x43, 0xc8, 0x59, 0xb3, 0x3a, 0x07, 0x2a,
+	0x95, 0xe9, 0xd3, 0x15, 0x20, 0x3f, 0xbc, 0x1f, 0x47, 0xdf, 0xaf, 0xe0,
+	0xc7, 0x67, 0x39, 0x4f, 0xe2, 0xfa, 0xc0, 0x47, 0x60, 0x9f, 0x1b, 0x7d,
+	0x4f, 0x13, 0xf8, 0x6d, 0x94, 0xb7, 0xb8, 0x9a, 0xf3, 0xae, 0x75, 0x3e,
+	0xcb, 0x63, 0xd0, 0x05, 0x0b, 0x90, 0xe7, 0x29, 0xe8, 0xc0, 0xe1, 0x10,
+	0xf7, 0xa7, 0xb2, 0xd5, 0xea, 0x5c, 0x38, 0xc7, 0x3b, 0xc9, 0xe8, 0xc3,
+	0x3c, 0x7a, 0x45, 0xa6, 0xa1, 0xff, 0x67, 0xea, 0x8c, 0x47, 0x01, 0x17,
+	0xc5, 0x79, 0x27, 0x8c, 0xf9, 0x33, 0x18, 0xff, 0x0a, 0x30, 0xf1, 0x66,
+	0xd0, 0xd3, 0xf4, 0x79, 0xf5, 0x31, 0x3f, 0x0e, 0x15, 0x65, 0x6c, 0x1e,
+	0x7a, 0xb3, 0xa4, 0xb1, 0x66, 0x6c, 0x06, 0xe9, 0x6d, 0x9b, 0xb4, 0xbc,
+	0x9e, 0xf2, 0xe5, 0x6d, 0x13, 0xf2, 0x0f, 0x09, 0x69, 0xac, 0xd7, 0x64,
+	0xfb, 0xfe, 0x4a, 0x04, 0x32, 0xc7, 0x75, 0x3d, 0x8e, 0x7a, 0x94, 0xb5,
+	0x3e, 0xff, 0xac, 0xb6, 0x45, 0xe9, 0xc7, 0x1c, 0x64, 0xa9, 0xa0, 0x7c,
+	0x09, 0x60, 0x7c, 0x97, 0xed, 0x4a, 0x6d, 0x3c, 0x0b, 0x6d, 0x72, 0x94,
+	0x7f, 0xd1, 0x19, 0x92, 0x20, 0xef, 0xd3, 0xc8, 0xa3, 0x9c, 0x7d, 0x00,
+	0xbc, 0x61, 0x5e, 0x16, 0xef, 0x1c, 0xeb, 0x06, 0x7f, 0x1c, 0x8e, 0xf1,
+	0xb3, 0x96, 0xb5, 0x73, 0xe2, 0x5a, 0x3a, 0xfd, 0xb5, 0x34, 0xf1, 0xdb,
+	0x17, 0x3f, 0xef, 0x03, 0x7e, 0x5e, 0xd8, 0x5f, 0x5f, 0x7b, 0xf0, 0x2d,
+	0xd3, 0xe1, 0x8c, 0x04, 0xfb, 0x93, 0xf3, 0x8b, 0xaa, 0x76, 0x19, 0x4b,
+	0xcb, 0xce, 0x63, 0xe0, 0x47, 0x38, 0xfd, 0xdf, 0xda, 0xb9, 0x5f, 0x87,
+	0x43, 0xc1, 0x9e, 0x88, 0x2b, 0xdf, 0x33, 0x61, 0xea, 0xbb, 0x4c, 0xcf,
+	0xae, 0xf9, 0x6e, 0x21, 0xb8, 0x0f, 0xee, 0xc8, 0xf8, 0x0a, 0xaf, 0xc8,
+	0x37, 0xf2, 0xeb, 0xbd, 0x78, 0x45, 0x3e, 0x92, 0x5f, 0x05, 0x29, 0xcd,
+	0x91, 0x4f, 0x94, 0x97, 0x71, 0x25, 0x2f, 0xa5, 0x4a, 0x80, 0x93, 0xa9,
+	0x4b, 0xf8, 0x4d, 0xc5, 0x46, 0xe7, 0xf7, 0xc1, 0x5d, 0xb1, 0x9b, 0x48,
+	0x3f, 0x63, 0x57, 0xdf, 0x26, 0x59, 0x98, 0x53, 0x3a, 0x05, 0x76, 0x31,
+	0xae, 0x74, 0x45, 0x61, 0x82, 0xef, 0x97, 0x41, 0x23, 0xde, 0x2f, 0x61,
+	0x7e, 0xa7, 0xcf, 0xd7, 0x0f, 0xa8, 0xfb, 0x4e, 0xdc, 0x83, 0xa5, 0xca,
+	0x35, 0x55, 0x7e, 0x76, 0xbe, 0x49, 0xd5, 0x3f, 0x3b, 0xbf, 0xfe, 0xce,
+	0x12, 0xf3, 0x3e, 0x28, 0x67, 0xe6, 0x44, 0x16, 0x67, 0x9b, 0xe4, 0xf4,
+	0xfc, 0xf7, 0xe9, 0x2b, 0xa6, 0x9b, 0x57, 0xbf, 0x1f, 0x51, 0xdf, 0xf0,
+	0x95, 0xe6, 0x3d, 0xd9, 0x05, 0xb9, 0x59, 0x18, 0x9a, 0x91, 0xea, 0x10,
+	0x7d, 0x21, 0x75, 0x97, 0x10, 0xeb, 0x6d, 0x02, 0x06, 0x06, 0x2e, 0x74,
+	0x18, 0x7b, 0xde, 0xe2, 0xeb, 0x93, 0x7f, 0xbb, 0x39, 0x88, 0x49, 0x57,
+	0x63, 0x45, 0xaf, 0xea, 0x04, 0xdf, 0xe4, 0xb0, 0x4f, 0x7e, 0x97, 0x43,
+	0x9e, 0x99, 0x68, 0xcf, 0x3b, 0x9a, 0xc0, 0xa9, 0x4e, 0xda, 0xe7, 0x73,
+	0x10, 0x7b, 0xff, 0xba, 0xff, 0xfe, 0xb2, 0x9f, 0x7e, 0x49, 0x26, 0x8f,
+	0xff, 0x01, 0xef, 0xe1, 0xeb, 0x7b, 0x58, 0xd2, 0xf8, 0x1d, 0x0d, 0x79,
+	0xcf, 0x18, 0xc5, 0x97, 0xf4, 0xf7, 0x1b, 0x4c, 0x17, 0x82, 0x6f, 0x2e,
+	0x7f, 0xdd, 0x9d, 0x95, 0xc0, 0x27, 0xe4, 0x7d, 0xaa, 0x16, 0xbf, 0xbf,
+	0x11, 0x5f, 0x96, 0x26, 0x64, 0x12, 0xf6, 0xae, 0x50, 0xfe, 0xa2, 0xba,
+	0x83, 0x96, 0x0f, 0x35, 0x8e, 0x19, 0xec, 0x27, 0x1d, 0x6f, 0x08, 0xee,
+	0x42, 0x84, 0x94, 0x4f, 0xb4, 0x12, 0xbb, 0xf0, 0xf3, 0x27, 0x64, 0x5f,
+	0x59, 0xc5, 0x30, 0xd4, 0x19, 0xe6, 0x0c, 0xf4, 0xc2, 0xb0, 0xb2, 0x69,
+	0x51, 0x63, 0x57, 0x2d, 0x2d, 0x85, 0x53, 0x7b, 0x30, 0x0e, 0xe3, 0x80,
+	0x19, 0xff, 0xac, 0x70, 0xaf, 0x4c, 0xd6, 0xf5, 0xd8, 0x53, 0x65, 0x96,
+	0x27, 0x81, 0x13, 0x58, 0x9e, 0x8b, 0xeb, 0x6f, 0x45, 0x6f, 0x41, 0xdb,
+	0x26, 0x9f, 0xce, 0xbc, 0x7f, 0xcd, 0xf6, 0xd4, 0x01, 0xf7, 0x6e, 0x95,
+	0x96, 0x1c, 0xca, 0xd9, 0x26, 0xe8, 0x6f, 0x0a, 0x76, 0x8b, 0x3e, 0xfa,
+	0xa3, 0xb2, 0x54, 0x99, 0x91, 0xe5, 0x4a, 0x20, 0xeb, 0xbc, 0x8b, 0xcd,
+	0xb9, 0xdf, 0xae, 0xbe, 0x6b, 0x79, 0xa9, 0x9c, 0x01, 0x7f, 0xd6, 0xd2,
+	0x2a, 0xb7, 0xe6, 0x7b, 0x9e, 0xa7, 0xb7, 0xea, 0x6f, 0x2a, 0x77, 0xaa,
+	0x3b, 0x5d, 0x6b, 0xf7, 0x1c, 0xfb, 0x99, 0xdf, 0xca, 0xb3, 0x0e, 0x7d,
+	0x2f, 0xad, 0xb3, 0xa1, 0x3c, 0xe6, 0xdf, 0x05, 0xab, 0x6e, 0xd5, 0x7c,
+	0x24, 0x3d, 0xc7, 0xfd, 0xf9, 0xa6, 0xb0, 0xff, 0xd9, 0xe7, 0x21, 0x9f,
+	0x6f, 0x48, 0x17, 0x0e, 0xa9, 0x3b, 0x77, 0xd9, 0x01, 0xcb, 0xbf, 0x8b,
+	0xdf, 0x78, 0x07, 0xaf, 0xa9, 0x61, 0x3c, 0xb6, 0xa3, 0x5d, 0x0a, 0xee,
+	0x82, 0x33, 0xef, 0xb8, 0x7f, 0xd7, 0x2f, 0xb8, 0xfb, 0xcd, 0xbc, 0xe0,
+	0x4e, 0x1a, 0xe9, 0xc4, 0x38, 0x26, 0xd2, 0xfa, 0xb8, 0xff, 0x3c, 0xde,
+	0xf0, 0x5d, 0x4e, 0xd0, 0x67, 0x18, 0x7d, 0x04, 0x77, 0xd1, 0x1b, 0xef,
+	0x16, 0xf3, 0x3b, 0x2e, 0xca, 0xa0, 0x09, 0x9b, 0xa2, 0xfc, 0x3f, 0x60,
+	0xb6, 0x2d, 0x32, 0xa5, 0xe6, 0x53, 0x54, 0xf7, 0x36, 0xb2, 0xee, 0x26,
+	0x19, 0xb6, 0xf4, 0xfb, 0xd4, 0xc2, 0x7a, 0xf9, 0x64, 0xfe, 0x5f, 0x61,
+	0x5e, 0x45, 0x8c, 0xc3, 0xf2, 0xb5, 0xdf, 0xc9, 0x6a, 0xdb, 0xc5, 0x7d,
+	0xe9, 0xa2, 0x8d, 0x8b, 0x36, 0x4f, 0x50, 0xce, 0x8b, 0xc5, 0x95, 0xfb,
+	0xa2, 0x45, 0x15, 0x9b, 0x15, 0x33, 0xb8, 0xb7, 0x99, 0x80, 0x0e, 0x13,
+	0xb9, 0x50, 0xe3, 0x37, 0x51, 0x3b, 0xd5, 0x7d, 0x1a, 0x7d, 0x46, 0xc9,
+	0x79, 0xf5, 0x28, 0x7b, 0x50, 0xad, 0x95, 0x50, 0x16, 0xd8, 0xf4, 0x88,
+	0x6f, 0xd3, 0xa9, 0xbb, 0x46, 0xa1, 0xbb, 0x7e, 0xec, 0xf3, 0x83, 0xed,
+	0x33, 0xea, 0x9e, 0x77, 0x26, 0xc6, 0x33, 0xb2, 0x43, 0x6a, 0x2d, 0xb4,
+	0x0f, 0x68, 0xfb, 0xa1, 0x90, 0x8a, 0x75, 0xd2, 0x96, 0x72, 0x9f, 0x47,
+	0x65, 0xa1, 0x06, 0xdd, 0x0e, 0x3f, 0xb3, 0x5a, 0x1b, 0x45, 0x0a, 0x8c,
+	0x5d, 0xdb, 0xa3, 0xee, 0xff, 0x57, 0xd5, 0x37, 0x01, 0x81, 0x1c, 0x86,
+	0xfc, 0xb1, 0xfe, 0x0e, 0x63, 0x68, 0x7e, 0x17, 0x60, 0xb7, 0xab, 0xb5,
+	0xe0, 0xae, 0xe9, 0xe6, 0x25, 0xee, 0x05, 0x51, 0xfe, 0xbd, 0xfe, 0x3e,
+	0xb5, 0xaa, 0xbe, 0x23, 0x48, 0xf0, 0x3b, 0x45, 0xd8, 0xad, 0x7b, 0xf9,
+	0x2d, 0x14, 0xd2, 0xbd, 0x48, 0xa1, 0x77, 0x6a, 0x79, 0xa4, 0x8f, 0x48,
+	0x4e, 0xc5, 0xfc, 0x5a, 0xf1, 0x3e, 0xa5, 0xc6, 0x2e, 0xd5, 0x1e, 0x94,
+	0xc9, 0x53, 0x0f, 0xf1, 0x7b, 0x89, 0xae, 0x90, 0xfe, 0x5e, 0x22, 0x4e,
+	0x9f, 0x7d, 0x5a, 0xad, 0xbb, 0xe8, 0xd3, 0x3e, 0x38, 0x7f, 0xf9, 0xa8,
+	0x45, 0x9e, 0x16, 0x6b, 0xad, 0x98, 0xa3, 0xe1, 0xdf, 0x37, 0xa5, 0x1f,
+	0x10, 0xac, 0xbf, 0x85, 0x77, 0x18, 0x3d, 0x9e, 0x21, 0x4e, 0x96, 0x79,
+	0x9f, 0x34, 0xe9, 0xc7, 0x07, 0x18, 0x37, 0xe4, 0x99, 0x04, 0x65, 0x9b,
+	0xdf, 0x12, 0xe7, 0x80, 0xd2, 0xe2, 0x3c, 0xe3, 0xf6, 0xd7, 0xd2, 0xda,
+	0xb0, 0x16, 0xde, 0xa1, 0xd5, 0xeb, 0xe1, 0xf7, 0x10, 0x85, 0x72, 0xe3,
+	0x37, 0x15, 0xea, 0xdb, 0x72, 0x7e, 0x3b, 0x23, 0xf9, 0xda, 0xe7, 0xe4,
+	0x81, 0xf2, 0x16, 0xff, 0x7b, 0x8a, 0xa8, 0x3c, 0x50, 0xbb, 0xa2, 0x68,
+	0x5a, 0x50, 0xdf, 0x75, 0x44, 0x7c, 0x9e, 0x05, 0xdf, 0x54, 0xe8, 0xfe,
+	0xf6, 0xd5, 0xec, 0x86, 0xef, 0x18, 0x22, 0x92, 0x5f, 0xb0, 0xc3, 0x1b,
+	0x7f, 0xcb, 0xf0, 0xa8, 0x64, 0x4f, 0xd1, 0x36, 0xcf, 0xc8, 0xe3, 0x15,
+	0xcf, 0xbb, 0xdd, 0x25, 0xa6, 0xdc, 0x2c, 0xcb, 0xb1, 0xf1, 0x91, 0xd7,
+	0x9d, 0x0e, 0xa3, 0x3a, 0xd7, 0x8c, 0xbd, 0x45, 0x1c, 0x23, 0x2d, 0x7c,
+	0x5f, 0x98, 0xe3, 0xfe, 0x0c, 0x63, 0x8d, 0xb6, 0x75, 0x4d, 0x1e, 0xb0,
+	0x18, 0x73, 0xbb, 0x1d, 0x3e, 0xec, 0xef, 0xba, 0x5a, 0x4f, 0x7f, 0x79,
+	0x71, 0x8f, 0x7c, 0xb9, 0x16, 0x35, 0xaa, 0xb3, 0xbc, 0x77, 0x68, 0x8f,
+	0x56, 0x24, 0x89, 0x7a, 0xec, 0x1f, 0xf2, 0x12, 0xbf, 0x4e, 0x9e, 0x39,
+	0xfe, 0x8e, 0x77, 0xcd, 0x41, 0x39, 0x74, 0xcc, 0xb2, 0x1b, 0xc4, 0x15,
+	0xc7, 0xe1, 0xb3, 0xb2, 0xde, 0x75, 0x90, 0x03, 0x60, 0x06, 0xec, 0x39,
+	0xfa, 0xb7, 0xd7, 0x7c, 0x7d, 0x65, 0x1e, 0xb9, 0x51, 0xae, 0xad, 0xdc,
+	0x5b, 0xbe, 0x0c, 0xd9, 0x4e, 0x68, 0xfa, 0xab, 0xb8, 0xfd, 0x01, 0x09,
+	0x7d, 0x05, 0xb6, 0xe4, 0x2b, 0x4d, 0x4a, 0xa7, 0xd3, 0xa6, 0xc1, 0xf7,
+	0x81, 0x7f, 0x13, 0x66, 0x3f, 0x96, 0x96, 0xd9, 0x19, 0x91, 0xaf, 0x6d,
+	0x92, 0x4c, 0x3b, 0xfd, 0x67, 0xf9, 0x35, 0x7a, 0xab, 0x71, 0x9f, 0xa5,
+	0xe4, 0xeb, 0xdc, 0xe3, 0x75, 0xae, 0x25, 0x19, 0xff, 0x6b, 0x79, 0x58,
+	0xf2, 0x71, 0xae, 0xe5, 0x51, 0x29, 0x56, 0x0e, 0xe1, 0xc7, 0x75, 0x72,
+	0xde, 0xff, 0xd8, 0xbf, 0xd3, 0x30, 0x2e, 0xa5, 0xd9, 0xb4, 0x4c, 0xcf,
+	0x4f, 0xf1, 0x9b, 0xd6, 0xd1, 0xdb, 0xd5, 0xb9, 0x9e, 0x1d, 0x4f, 0x1a,
+	0xfd, 0x89, 0x69, 0xde, 0xe1, 0x50, 0xeb, 0x99, 0xc2, 0x7a, 0xbe, 0x61,
+	0xf1, 0xee, 0xfa, 0x35, 0xe8, 0x5d, 0xf3, 0x04, 0xe5, 0xd0, 0xb6, 0xba,
+	0x0d, 0xbe, 0xef, 0x85, 0xdf, 0xce, 0xbc, 0xbd, 0x12, 0x3a, 0xb2, 0xa2,
+	0xdf, 0x91, 0xdf, 0xaf, 0xf6, 0x88, 0xa6, 0xd5, 0x25, 0xb4, 0x45, 0xbd,
+	0x23, 0x41, 0xdb, 0xa0, 0x0e, 0xdb, 0x72, 0x9d, 0x7b, 0xa4, 0xf9, 0x5c,
+	0x30, 0x2f, 0xc8, 0x61, 0xbc, 0x91, 0xde, 0x2d, 0xeb, 0xe8, 0x1d, 0x26,
+	0xd6, 0x05, 0xbd, 0x48, 0xe3, 0x90, 0x4f, 0xe3, 0x37, 0xd1, 0x7f, 0xc0,
+	0x83, 0xdb, 0x91, 0x67, 0xf9, 0xdf, 0x24, 0xbd, 0x1f, 0xba, 0x93, 0xe6,
+	0xac, 0x3f, 0x61, 0x69, 0x59, 0xe3, 0x7c, 0x36, 0xa2, 0xf9, 0x96, 0x76,
+	0xcd, 0x97, 0xbd, 0xa0, 0x17, 0xef, 0x97, 0xf6, 0xab, 0xef, 0x0c, 0x32,
+	0x13, 0x7b, 0x21, 0x3b, 0xc1, 0xba, 0xfa, 0x21, 0x63, 0x3c, 0x33, 0x61,
+	0xfd, 0x46, 0x9a, 0x68, 0x7b, 0x17, 0x62, 0xcc, 0xc3, 0xe1, 0x5a, 0x81,
+	0x47, 0xbf, 0x46, 0xdb, 0xc4, 0xef, 0xf1, 0x3f, 0xe8, 0xdb, 0xa6, 0x5f,
+	0xc7, 0xe3, 0x64, 0xbb, 0xb6, 0x4d, 0x16, 0x68, 0xd2, 0xe6, 0xb7, 0xd9,
+	0x0b, 0x6c, 0xcc, 0x58, 0x70, 0x32, 0xfe, 0x59, 0x09, 0xc6, 0xf1, 0x76,
+	0xd2, 0xdf, 0x1d, 0x1e, 0xec, 0x07, 0x5a, 0x51, 0x77, 0x77, 0xe2, 0xbc,
+	0x0b, 0x94, 0x34, 0xf6, 0xaa, 0x7b, 0x1c, 0x6b, 0xbf, 0x23, 0x49, 0xc9,
+	0x33, 0xab, 0xb2, 0x32, 0xfa, 0x53, 0xb1, 0x25, 0x71, 0x03, 0x65, 0x85,
+	0xfd, 0x4e, 0x71, 0x9d, 0xf1, 0x87, 0xd4, 0x3a, 0x61, 0xa7, 0xc6, 0x79,
+	0xe7, 0xc2, 0x32, 0xaa, 0xf3, 0xe4, 0x3b, 0xd2, 0x45, 0x3e, 0x07, 0x67,
+	0xbc, 0x4a, 0xaf, 0x60, 0x5c, 0xe6, 0x51, 0x37, 0xb2, 0x3c, 0xed, 0x9f,
+	0x01, 0x67, 0xdb, 0x79, 0x2f, 0xa1, 0x80, 0xbc, 0xca, 0xe2, 0xc6, 0x73,
+	0xfb, 0x5d, 0x25, 0x07, 0x8f, 0x82, 0xee, 0x4f, 0xa2, 0xee, 0x21, 0xa4,
+	0x5c, 0x63, 0x7a, 0x85, 0xef, 0xa4, 0xf7, 0x6e, 0x19, 0x82, 0x5c, 0xf0,
+	0xfd, 0x51, 0xe0, 0x4c, 0xda, 0x51, 0xa4, 0x15, 0x3e, 0x53, 0xd7, 0x3b,
+	0xfe, 0xbd, 0x2a, 0xce, 0x65, 0x2f, 0xe6, 0xa2, 0xd6, 0xe9, 0xcb, 0xd3,
+	0xbd, 0x7e, 0xbb, 0x89, 0x15, 0x5a, 0x3d, 0xf4, 0x2e, 0x9c, 0x11, 0x59,
+	0xc1, 0x19, 0x7a, 0xac, 0x7f, 0xde, 0x1e, 0x60, 0x0c, 0xbd, 0x06, 0x8d,
+	0x31, 0xb4, 0x9c, 0x4f, 0x49, 0x18, 0x72, 0x1c, 0x5a, 0x95, 0x63, 0xe0,
+	0x1d, 0xbd, 0x67, 0xa6, 0x79, 0xee, 0xa6, 0xe8, 0x4c, 0x39, 0xa4, 0xfc,
+	0x92, 0x8f, 0x8d, 0xbc, 0xfe, 0xc4, 0x7b, 0xf0, 0xfa, 0xf9, 0xf6, 0x00,
+	0x37, 0xfc, 0xc3, 0xf6, 0xc1, 0x33, 0xed, 0xab, 0xfb, 0xe0, 0xc6, 0xff,
+	0x47, 0xfb, 0x60, 0xbd, 0x5c, 0x36, 0xca, 0x94, 0x05, 0x79, 0x22, 0xbf,
+	0x28, 0x4f, 0x94, 0x23, 0xd2, 0x92, 0xfa, 0xb4, 0x99, 0x7e, 0x5b, 0xfc,
+	0xaa, 0x3a, 0x0b, 0x9c, 0x81, 0x0e, 0xea, 0x30, 0x2a, 0x95, 0x98, 0x94,
+	0x16, 0x7b, 0x94, 0x4c, 0x3f, 0x53, 0xa7, 0x5e, 0xfa, 0x55, 0x6b, 0x5f,
+	0xab, 0x73, 0x0b, 0xeb, 0x74, 0x6e, 0x61, 0x45, 0xe7, 0xb6, 0xfb, 0xbe,
+	0xda, 0x3f, 0x44, 0xe7, 0xc6, 0x1a, 0xce, 0x85, 0x82, 0x33, 0x21, 0x31,
+	0xb2, 0x7d, 0x2d, 0x32, 0x02, 0x3b, 0x32, 0x3a, 0xbb, 0x47, 0xfe, 0xf5,
+	0xec, 0x8c, 0xba, 0x2f, 0xf5, 0x5d, 0x37, 0x19, 0x7f, 0xd0, 0xf0, 0x64,
+	0x37, 0x7c, 0xed, 0x7c, 0x57, 0x93, 0x8c, 0x7c, 0x44, 0x9d, 0x75, 0x5a,
+	0x59, 0xa3, 0x53, 0x18, 0x81, 0xcf, 0xb9, 0xb6, 0x9b, 0x30, 0x78, 0x77,
+	0xae, 0x59, 0xf2, 0xb1, 0x56, 0xd9, 0x03, 0xec, 0x54, 0xbc, 0x9e, 0xb8,
+	0x67, 0xb3, 0xfa, 0x2e, 0xe9, 0xa5, 0x72, 0xac, 0x43, 0x8f, 0x0b, 0x3a,
+	0xb4, 0x59, 0xf2, 0xef, 0xea, 0x31, 0xf5, 0x8d, 0xf0, 0x4b, 0xe5, 0x3f,
+	0xb2, 0xd6, 0xbe, 0xf3, 0xf9, 0x3f, 0xa0, 0x4e, 0x0c, 0xb4, 0x6a, 0xbc,
+	0x87, 0x14, 0x52, 0xf4, 0x2c, 0x55, 0x26, 0xd4, 0xfd, 0xae, 0xab, 0x21,
+	0xd2, 0x4b, 0xf9, 0x4e, 0xf1, 0x6c, 0x08, 0x18, 0x67, 0x0e, 0x08, 0xda,
+	0xa1, 0xbf, 0xe9, 0xe3, 0x4e, 0xe8, 0xff, 0xc9, 0x39, 0xd2, 0x66, 0x09,
+	0xb4, 0xf1, 0x54, 0xdc, 0xb9, 0x10, 0x23, 0x9e, 0x5f, 0xbd, 0xcb, 0xfc,
+	0x6e, 0x5c, 0xaf, 0x30, 0x7d, 0x70, 0x06, 0xe2, 0xc7, 0xa9, 0x7c, 0xff,
+	0x5f, 0x9d, 0xeb, 0xad, 0xa7, 0x55, 0xe0, 0xf7, 0xf3, 0xff, 0x05, 0x10,
+	0xdb, 0xd9, 0x87, 0x2b, 0xf2, 0xc1, 0x0e, 0x15, 0x73, 0x23, 0x7d, 0xab,
+	0xe0, 0xd3, 0xd1, 0x78, 0x60, 0xcf, 0x8d, 0xee, 0xf3, 0x8d, 0x3e, 0x28,
+	0xfb, 0x88, 0xaa, 0x7b, 0x20, 0xfa, 0x3b, 0x15, 0xf6, 0xc5, 0xd8, 0x52,
+	0xc6, 0xb8, 0xb3, 0x3c, 0x23, 0xa1, 0x63, 0xe3, 0x12, 0x3e, 0xca, 0x38,
+	0x7e, 0x46, 0x4a, 0x31, 0x4f, 0x1e, 0x70, 0xd7, 0xfa, 0x24, 0xdd, 0xe6,
+	0xfa, 0xb9, 0x3f, 0x2a, 0xc3, 0xa7, 0x0e, 0x49, 0xe4, 0x18, 0xcb, 0xd6,
+	0x9c, 0xe1, 0x40, 0x1f, 0x6d, 0x96, 0x4a, 0x8c, 0xb1, 0xec, 0x88, 0xfa,
+	0xd6, 0x7a, 0x79, 0xe2, 0x4a, 0xa4, 0x04, 0xac, 0x50, 0x50, 0xba, 0x05,
+	0xe9, 0x8a, 0x0f, 0xf1, 0x70, 0x07, 0xf7, 0x14, 0xfc, 0x4c, 0x23, 0x5f,
+	0x89, 0xe8, 0x7b, 0x49, 0x31, 0xd6, 0x3d, 0x04, 0x7f, 0x9b, 0x38, 0x03,
+	0xba, 0x63, 0x5c, 0x5a, 0xf8, 0x1e, 0x3a, 0xb6, 0x8a, 0x33, 0xa8, 0x13,
+	0x86, 0xdd, 0x98, 0x84, 0xcf, 0xe8, 0xb5, 0x27, 0x4c, 0xe8, 0x8e, 0x93,
+	0x7b, 0x24, 0x74, 0x94, 0xcf, 0x8d, 0x7e, 0x10, 0xb1, 0x3b, 0x6c, 0xc3,
+	0xf9, 0x2f, 0xa2, 0x3f, 0x96, 0x65, 0xfc, 0xef, 0x70, 0xf1, 0x5e, 0xfd,
+	0xfb, 0xfe, 0xef, 0x01, 0xca, 0xfe, 0xff, 0x01, 0x94, 0x1e, 0xd0, 0x94,
+	0x6c, 0x4a, 0x00, 0x00, 0x00 };
+
+static const u32 bnx2_COM_b06FwData[(0x0/4) + 1] = { 0x0 };
+static const u32 bnx2_COM_b06FwRodata[(0x14/4) + 1] = {
+	0x08000acc, 0x08000b14, 0x08000b98, 0x08000be4, 0x08000c20, 0x00000000
+};
+
+static struct fw_info bnx2_com_fw_06 = {
+	/* Firmware version: 6.2.3 */
+	.ver_major			= 0x6,
+	.ver_minor			= 0x2,
+	.ver_fix			= 0x3,
+
+	.start_addr			= 0x08000118,
+
+	.text_addr			= 0x08000000,
+	.text_len			= 0x4a68,
+	.text_index			= 0x0,
+	.gz_text			= bnx2_COM_b06FwText,
+	.gz_text_len			= sizeof(bnx2_COM_b06FwText),
+
+	.data_addr			= 0x00000000,
+	.data_len			= 0x0,
+	.data_index			= 0x0,
+	.data				= bnx2_COM_b06FwData,
+
+	.sbss_addr			= 0x08004aa0,
+	.sbss_len			= 0x38,
+	.sbss_index			= 0x0,
+
+	.bss_addr			= 0x08004ad8,
+	.bss_len			= 0xc4,
+	.bss_index			= 0x0,
+
+	.rodata_addr			= 0x08004a68,
+	.rodata_len			= 0x14,
+	.rodata_index			= 0x0,
+	.rodata				= bnx2_COM_b06FwRodata,
+};
+
+/* Initialized Values for the Completion Processor. */
+static const struct cpu_reg cpu_reg_com = {
+	.mode = BNX2_COM_CPU_MODE,
+	.mode_value_halt = BNX2_COM_CPU_MODE_SOFT_HALT,
+	.mode_value_sstep = BNX2_COM_CPU_MODE_STEP_ENA,
+	.state = BNX2_COM_CPU_STATE,
+	.state_value_clear = 0xffffff,
+	.gpr0 = BNX2_COM_CPU_REG_FILE,
+	.evmask = BNX2_COM_CPU_EVENT_MASK,
+	.pc = BNX2_COM_CPU_PROGRAM_COUNTER,
+	.inst = BNX2_COM_CPU_INSTRUCTION,
+	.bp = BNX2_COM_CPU_HW_BREAKPOINT,
+	.spad_base = BNX2_COM_SCRATCH,
+	.mips_view_base = 0x8000000,
+};
+
+static u8 bnx2_CP_b06FwText[] = {
+	0x9d, 0xbc, 0x0d, 0x78, 0x1b, 0xe5, 0x99, 0x2e, 0x7c, 0xcf, 0x48, 0xb2,
+	0x65, 0x5b, 0xb6, 0xc7, 0x8e, 0x92, 0x28, 0xd4, 0x9b, 0x68, 0xe2, 0x51,
+	0xac, 0x60, 0x03, 0xa3, 0xc4, 0x09, 0x82, 0xd5, 0x12, 0xd5, 0x31, 0xf9,
+	0x21, 0x69, 0x71, 0x4a, 0x0a, 0x86, 0xd3, 0x12, 0xd5, 0xf9, 0xc1, 0x09,
+	0x81, 0x86, 0x2d, 0xe7, 0xac, 0xd9, 0xc3, 0x1e, 0xab, 0xb6, 0x93, 0x38,
+	0x89, 0x2c, 0x39, 0x8e, 0x49, 0xc2, 0xb6, 0xdf, 0xa9, 0x88, 0x9d, 0x1f,
+	0xa8, 0x6c, 0xa5, 0x94, 0xee, 0x86, 0x9e, 0x74, 0xd1, 0x49, 0x02, 0x75,
+	0x29, 0xd0, 0xd0, 0x65, 0xbb, 0xb4, 0x17, 0x5f, 0xf1, 0x17, 0x20, 0x84,
+	0x2d, 0x05, 0xba, 0xfd, 0xd9, 0xd0, 0xbf, 0x39, 0xf7, 0x33, 0x92, 0x12,
+	0xc3, 0xb2, 0x6c, 0xcf, 0xe7, 0xeb, 0x9a, 0xcb, 0x9a, 0x99, 0xf7, 0xe7,
+	0x79, 0x9f, 0xf7, 0x79, 0xee, 0xe7, 0x7e, 0xde, 0x79, 0x67, 0x82, 0x40,
+	0x39, 0x0a, 0x7f, 0x95, 0x3c, 0xae, 0x5e, 0xbc, 0x6d, 0x3d, 0x16, 0x5e,
+	0xbd, 0x40, 0xce, 0x9d, 0x0e, 0xb5, 0x04, 0x7f, 0xe2, 0x9f, 0xff, 0x4f,
+	0x2d, 0x58, 0xf8, 0x53, 0x78, 0x34, 0x16, 0x7e, 0x3b, 0x79, 0x44, 0x2b,
+	0x1d, 0xff, 0x61, 0x59, 0xde, 0xd1, 0x8a, 0xf2, 0xc9, 0x01, 0xb7, 0x1a,
+	0x19, 0x6d, 0x6f, 0x31, 0xe0, 0x76, 0x44, 0xb6, 0xad, 0x5b, 0x6f, 0xb0,
+	0x76, 0xa6, 0xd1, 0xbf, 0x14, 0x7f, 0xb0, 0xe2, 0x5e, 0x27, 0xe4, 0xfa,
+	0x9f, 0x45, 0x7e, 0xdf, 0xfd, 0x9d, 0x6b, 0xf5, 0xf7, 0xd2, 0x0e, 0xb8,
+	0xb5, 0x48, 0x1a, 0xda, 0x3c, 0xb8, 0xeb, 0x58, 0xe7, 0xab, 0x0d, 0x19,
+	0x05, 0x55, 0xc5, 0xb6, 0x2e, 0x58, 0xdf, 0x69, 0xf0, 0xc5, 0xca, 0x22,
+	0x1a, 0x9e, 0xca, 0xa2, 0xad, 0x69, 0xa0, 0xdb, 0xaa, 0x34, 0x42, 0x70,
+	0x1b, 0x46, 0xfb, 0x80, 0xe2, 0x09, 0x6f, 0x59, 0x04, 0x4f, 0xa9, 0x81,
+	0xf8, 0x15, 0x11, 0xb4, 0x5d, 0x39, 0x56, 0x1e, 0x77, 0x46, 0xdc, 0x58,
+	0x91, 0x75, 0xc7, 0x3f, 0x11, 0x31, 0xb0, 0x3c, 0x3b, 0xbd, 0x0c, 0x55,
+	0x1a, 0xfa, 0xb2, 0x2f, 0xbb, 0xf3, 0xed, 0x05, 0x0a, 0xff, 0x3f, 0x53,
+	0x9b, 0xff, 0x3f, 0x23, 0xe6, 0x8c, 0x00, 0xdb, 0x13, 0x96, 0x55, 0x12,
+	0xb9, 0xe5, 0x16, 0x35, 0x62, 0xf8, 0x8e, 0x60, 0x39, 0x3a, 0x34, 0x3c,
+	0xb8, 0xa3, 0xf9, 0x5f, 0x95, 0x53, 0xc3, 0x4d, 0x88, 0x1f, 0x75, 0x20,
+	0xaa, 0x3d, 0xc7, 0xff, 0xb3, 0x67, 0xb7, 0x87, 0x9b, 0x70, 0xf0, 0xe8,
+	0x45, 0x5e, 0x77, 0xda, 0xd7, 0x7a, 0x0f, 0xcc, 0x9e, 0x7d, 0x7b, 0xf8,
+	0x39, 0x3c, 0x7c, 0x54, 0x7e, 0xdf, 0x85, 0xee, 0x26, 0x05, 0x93, 0xb7,
+	0x6c, 0x82, 0xc3, 0x68, 0x42, 0xdf, 0x01, 0xc5, 0xd9, 0xd3, 0xa4, 0x22,
+	0xea, 0xd5, 0x83, 0x31, 0x2a, 0xcf, 0x69, 0x20, 0x56, 0x1a, 0x09, 0x3b,
+	0xdf, 0x4a, 0x44, 0x34, 0x87, 0x61, 0x59, 0xc1, 0xd0, 0x1c, 0x38, 0x6a,
+	0x2c, 0xeb, 0x49, 0x53, 0x83, 0xff, 0xb6, 0x17, 0x10, 0x1f, 0x69, 0x83,
+	0x6a, 0xbc, 0x80, 0x9e, 0x91, 0x17, 0xf0, 0xb5, 0x7d, 0xd5, 0x6c, 0xe7,
+	0x39, 0x6c, 0x3f, 0x2a, 0xfd, 0xf2, 0xff, 0x01, 0x8e, 0x3d, 0x25, 0xb2,
+	0x34, 0xf3, 0x38, 0xcf, 0x03, 0x6e, 0x25, 0x12, 0x47, 0x20, 0xe3, 0xc6,
+	0xa4, 0xc3, 0x87, 0xef, 0x34, 0x48, 0x9d, 0x5f, 0x5b, 0x93, 0xb7, 0x15,
+	0xca, 0x4f, 0xa9, 0xd3, 0xf7, 0x31, 0x75, 0xe2, 0x23, 0x11, 0x7c, 0x3f,
+	0xa1, 0x60, 0x4b, 0xa8, 0x0a, 0xd1, 0x1a, 0xd1, 0x87, 0x65, 0x1d, 0x35,
+	0x7f, 0x6a, 0x4d, 0x6a, 0x22, 0xcb, 0x04, 0x9e, 0xe3, 0xbd, 0x1d, 0xa1,
+	0x57, 0xac, 0x9c, 0x57, 0xda, 0xff, 0x6b, 0xda, 0xe0, 0x1a, 0x5e, 0x77,
+	0x22, 0x95, 0x40, 0xac, 0x2a, 0xf2, 0x79, 0x9e, 0xeb, 0xe6, 0x3b, 0x8a,
+	0xdb, 0xfd, 0x6e, 0xc2, 0x7d, 0x5b, 0xa5, 0xa1, 0xde, 0x5f, 0x4d, 0x1b,
+	0x79, 0x9e, 0x63, 0x3a, 0x61, 0x6e, 0x82, 0xcb, 0xf8, 0xef, 0x62, 0xb3,
+	0x1c, 0xf7, 0x73, 0x16, 0x66, 0x16, 0xeb, 0x4b, 0xbb, 0x1a, 0x76, 0xa4,
+	0x2c, 0x6b, 0x97, 0x19, 0xbd, 0xae, 0x8c, 0x06, 0x73, 0x3a, 0xd1, 0x06,
+	0x77, 0x24, 0xe0, 0xbf, 0x80, 0x30, 0x96, 0x66, 0xbd, 0x78, 0x3a, 0x01,
+	0x67, 0x4b, 0x43, 0x1d, 0x7a, 0xb2, 0x11, 0xdc, 0x98, 0x35, 0xd1, 0x9a,
+	0xfd, 0xcf, 0xad, 0x74, 0x55, 0xca, 0xcf, 0x31, 0xfc, 0xc1, 0xca, 0x8f,
+	0x41, 0xc6, 0x27, 0xff, 0x39, 0xef, 0xa9, 0x2b, 0xb0, 0x7b, 0xd8, 0xc0,
+	0x4e, 0xce, 0xef, 0xca, 0x50, 0x2e, 0x5a, 0x06, 0xdd, 0xbc, 0x80, 0x08,
+	0x96, 0x65, 0x0d, 0xce, 0x79, 0x04, 0x4b, 0x53, 0xf5, 0xda, 0x08, 0xe6,
+	0x23, 0xea, 0x93, 0xf2, 0x7e, 0xec, 0xe1, 0x78, 0x3b, 0x02, 0x6d, 0xa8,
+	0xa4, 0x0d, 0x65, 0x16, 0x85, 0xd1, 0xc2, 0xfe, 0x57, 0xff, 0x09, 0xfd,
+	0xdf, 0xcc, 0xfe, 0xdf, 0x61, 0xff, 0xb9, 0x9a, 0xbc, 0xa3, 0xdc, 0xc4,
+	0x73, 0x37, 0xed, 0x75, 0x77, 0xc6, 0xe9, 0x5c, 0x99, 0xf2, 0x62, 0x57,
+	0xc6, 0xa4, 0x4d, 0xca, 0x2d, 0x1f, 0x76, 0x0c, 0xd7, 0x61, 0xe7, 0xb0,
+	0xee, 0xfb, 0x2e, 0x7f, 0xf7, 0x8e, 0x5e, 0x81, 0xed, 0xc3, 0x0a, 0x0e,
+	0x19, 0x57, 0xa0, 0x87, 0xbf, 0x0f, 0x0e, 0xcf, 0xc6, 0xc3, 0xc3, 0x0e,
+	0x84, 0xa7, 0x4d, 0x1d, 0x87, 0xfc, 0xbf, 0x02, 0xf1, 0x51, 0x3f, 0x7a,
+	0x12, 0xaf, 0xd8, 0x3a, 0xac, 0x8c, 0x3c, 0x5f, 0xc4, 0x03, 0xfa, 0x96,
+	0x1f, 0xeb, 0x13, 0x3e, 0xf4, 0xa4, 0xc4, 0x4f, 0xdc, 0xb4, 0x5d, 0xf1,
+	0x13, 0x27, 0xfd, 0x87, 0xed, 0x67, 0x8b, 0xf7, 0x15, 0x38, 0x39, 0x6f,
+	0x1b, 0x78, 0x6f, 0x57, 0x4a, 0xec, 0xa2, 0x68, 0x03, 0xf2, 0xbb, 0x96,
+	0x76, 0x59, 0x0e, 0xff, 0xe1, 0x72, 0x04, 0x1f, 0xd2, 0xf0, 0x46, 0xb3,
+	0x5c, 0xa7, 0x3f, 0x84, 0xa4, 0xcc, 0x20, 0x8e, 0x64, 0xc4, 0x8f, 0xfd,
+	0x68, 0x49, 0x4c, 0xb0, 0xfd, 0x66, 0xb6, 0x6d, 0xe2, 0x1f, 0xb2, 0x4d,
+	0xf8, 0xfb, 0x6c, 0x10, 0x7f, 0x47, 0x3d, 0x7e, 0x2b, 0xeb, 0xc7, 0x13,
+	0xd9, 0x3a, 0x7c, 0x33, 0xeb, 0xc3, 0xe3, 0x9c, 0xbf, 0x6f, 0x64, 0xdb,
+	0xe8, 0x1b, 0x1a, 0x8e, 0x67, 0x45, 0xff, 0x25, 0x1c, 0x6f, 0x39, 0x7a,
+	0x87, 0xeb, 0x83, 0xa7, 0x69, 0x5b, 0x7f, 0x67, 0xde, 0x84, 0x5c, 0x2d,
+	0xdb, 0x48, 0xf9, 0xb0, 0x8b, 0xd7, 0x77, 0x0f, 0xd7, 0x47, 0xaf, 0x54,
+	0x2c, 0x4b, 0x0d, 0x35, 0x86, 0x4f, 0xa9, 0x2a, 0x26, 0xbd, 0xba, 0x3f,
+	0xa7, 0xea, 0xfe, 0x28, 0x5c, 0x48, 0xd0, 0x77, 0xe2, 0xd3, 0xf5, 0x74,
+	0x9c, 0x36, 0xe5, 0x35, 0xbe, 0x09, 0x54, 0xe9, 0xfe, 0xb8, 0xaa, 0x61,
+	0x67, 0x4a, 0x3f, 0x18, 0x57, 0xbd, 0x88, 0x67, 0xcb, 0xf1, 0xf3, 0x61,
+	0xbd, 0x3f, 0xae, 0x7e, 0x1a, 0xf1, 0x5a, 0xcb, 0x7a, 0x3c, 0x84, 0x6d,
+	0x33, 0x23, 0x88, 0x4e, 0x8f, 0x20, 0x36, 0x3b, 0x52, 0x87, 0x54, 0x0a,
+	0x78, 0x67, 0xc0, 0xf0, 0xfd, 0xb3, 0xd2, 0x86, 0xff, 0xda, 0xa6, 0xfb,
+	0xfd, 0x6a, 0x63, 0x7c, 0x44, 0x5d, 0x44, 0x97, 0x87, 0xdf, 0x17, 0x59,
+	0x8e, 0x2e, 0xfb, 0x9a, 0x02, 0xcd, 0xf0, 0xa2, 0x37, 0x75, 0x1d, 0x62,
+	0xde, 0xfa, 0xf6, 0xbd, 0x6a, 0xfd, 0x45, 0x53, 0xd5, 0x27, 0xda, 0x54,
+	0xcb, 0xfa, 0xc5, 0xc2, 0x77, 0x2c, 0xff, 0x0c, 0xcb, 0x5a, 0xb0, 0x50,
+	0xfa, 0xf4, 0xa3, 0x26, 0x62, 0x62, 0x8d, 0x3d, 0x87, 0xe5, 0x38, 0x3f,
+	0x5c, 0xcb, 0x3e, 0x34, 0xfc, 0xd3, 0xb5, 0x7a, 0x70, 0x93, 0x5a, 0x8e,
+	0x37, 0x46, 0xcb, 0x71, 0x8e, 0xe3, 0xf9, 0xd7, 0x61, 0x1f, 0x7e, 0x35,
+	0x6c, 0x59, 0xb7, 0x99, 0x7f, 0x8e, 0xa1, 0xda, 0x41, 0xfc, 0xfd, 0xb8,
+	0x17, 0x3f, 0x4f, 0x68, 0x78, 0x3d, 0x11, 0xbd, 0x6f, 0x1a, 0xf4, 0xe8,
+	0xb8, 0x72, 0x7a, 0x5d, 0x15, 0x1a, 0xdb, 0xaa, 0x14, 0x7d, 0xc5, 0x1e,
+	0xe8, 0xbe, 0x2b, 0x15, 0x2f, 0x2e, 0x64, 0x34, 0xbc, 0x96, 0xa9, 0x0f,
+	0xff, 0x23, 0xfb, 0xfc, 0x8d, 0xf9, 0xa4, 0x95, 0x9b, 0x21, 0x7a, 0x13,
+	0x1d, 0x51, 0xcf, 0xf4, 0xdf, 0xbf, 0x4f, 0x51, 0xcf, 0x29, 0xea, 0x99,
+	0x32, 0x3c, 0x91, 0xa2, 0x9e, 0xa9, 0xbb, 0xc7, 0x69, 0x53, 0xdf, 0xe0,
+	0x3c, 0x1e, 0xb7, 0xe7, 0x31, 0xcc, 0xf9, 0xfa, 0x04, 0xfe, 0x87, 0x8d,
+	0xbd, 0xcf, 0x59, 0x7f, 0xe5, 0x95, 0x31, 0x7d, 0x65, 0x7a, 0x1e, 0xdf,
+	0x64, 0x6c, 0xdf, 0xb7, 0x62, 0x9a, 0x8c, 0x4b, 0xc6, 0x67, 0xeb, 0xcf,
+	0xbf, 0x4d, 0x39, 0xa0, 0xa0, 0xdc, 0xb2, 0xf6, 0x99, 0x85, 0xfb, 0xde,
+	0xe2, 0xf8, 0xd6, 0x2b, 0x79, 0xbb, 0xfa, 0x9b, 0x52, 0xea, 0x3b, 0x18,
+	0x55, 0x6f, 0xe3, 0xb9, 0x1e, 0x8f, 0xe2, 0x7a, 0xc7, 0x07, 0xcf, 0xd7,
+	0x7b, 0x65, 0x3e, 0xfc, 0x97, 0xce, 0x69, 0x8f, 0x76, 0x7f, 0x0f, 0xf0,
+	0x5c, 0xc6, 0x22, 0xb6, 0x28, 0x36, 0xe0, 0xa5, 0xbd, 0x2c, 0x29, 0xdc,
+	0x43, 0x5c, 0x8d, 0x6c, 0x43, 0x5b, 0xf3, 0xb7, 0xed, 0x3e, 0x4a, 0x92,
+	0xe2, 0x37, 0x0a, 0xde, 0xb9, 0x4e, 0xc1, 0xa9, 0x90, 0x41, 0x9b, 0x39,
+	0x46, 0x5c, 0x00, 0x4a, 0x93, 0x70, 0x7b, 0x22, 0x11, 0x24, 0x06, 0xe0,
+	0x2e, 0x8b, 0x84, 0x31, 0x7f, 0xa0, 0xbe, 0xf3, 0x3c, 0xf4, 0xe0, 0x80,
+	0xa2, 0xb7, 0x31, 0x16, 0x99, 0x63, 0xd4, 0xe3, 0x95, 0x8a, 0xee, 0x2f,
+	0x51, 0x04, 0xcf, 0x22, 0xc4, 0xb3, 0x63, 0xd8, 0x99, 0x95, 0xdf, 0x61,
+	0x18, 0x99, 0x92, 0x42, 0xdc, 0xb0, 0x63, 0x0e, 0xed, 0xfe, 0x3c, 0xc7,
+	0xae, 0xfb, 0x89, 0xbf, 0x6e, 0x57, 0xa4, 0x13, 0x87, 0x13, 0x70, 0x97,
+	0x44, 0xb6, 0xe2, 0x99, 0xc4, 0x95, 0xd3, 0x8b, 0xe5, 0x14, 0x96, 0xf3,
+	0x67, 0xa6, 0xca, 0xf2, 0x53, 0x2b, 0xea, 0xcd, 0xcb, 0x52, 0x9e, 0x3c,
+	0x86, 0x3d, 0x29, 0xa9, 0x1b, 0xb1, 0xeb, 0x3a, 0xd9, 0x47, 0x5f, 0xa2,
+	0x7e, 0xc5, 0x2a, 0x45, 0x0f, 0x3f, 0xca, 0xf9, 0xeb, 0x41, 0x63, 0xf4,
+	0x2d, 0xe8, 0x5a, 0x27, 0xf2, 0xb2, 0x34, 0x64, 0xf2, 0x72, 0xcc, 0xcd,
+	0x40, 0x59, 0x97, 0x82, 0x35, 0xcb, 0x80, 0xc7, 0x67, 0x18, 0xfe, 0xf7,
+	0x1d, 0xb5, 0x38, 0xc8, 0xf9, 0xe9, 0xa3, 0xaf, 0x08, 0x9e, 0xdd, 0xb3,
+	0xcf, 0x0f, 0x8f, 0x61, 0xe1, 0x48, 0xa8, 0x16, 0xcf, 0x11, 0x6b, 0xab,
+	0xe8, 0x9b, 0x2f, 0x68, 0x88, 0xce, 0x8a, 0x84, 0x95, 0xdb, 0xb3, 0xdf,
+	0x2c, 0xcc, 0xc1, 0x44, 0x4d, 0x41, 0xc6, 0x0f, 0x5d, 0x9f, 0xa3, 0x7c,
+	0xf4, 0x75, 0x28, 0xed, 0x29, 0x3d, 0x18, 0x87, 0x85, 0xea, 0x85, 0xba,
+	0x7f, 0x52, 0xf9, 0x85, 0x8a, 0x2a, 0x62, 0x75, 0xf6, 0xc3, 0xe5, 0x1a,
+	0xb5, 0x51, 0xc6, 0x75, 0x87, 0x51, 0x46, 0x9d, 0xeb, 0x26, 0x9b, 0x09,
+	0xba, 0xec, 0x6b, 0x0e, 0xa4, 0x9d, 0x51, 0x9f, 0x03, 0xbf, 0xb7, 0xa2,
+	0x6b, 0xe5, 0x5a, 0x39, 0x62, 0x6d, 0x8d, 0x3e, 0x27, 0x1a, 0xc3, 0xdb,
+	0xe9, 0x83, 0x93, 0x6b, 0x5b, 0x78, 0x2f, 0x60, 0x9e, 0x46, 0xbd, 0x7f,
+	0x3b, 0xe4, 0xf7, 0xfb, 0xb4, 0x9b, 0x16, 0xa9, 0xcb, 0x32, 0x62, 0x87,
+	0xba, 0x76, 0x1a, 0x27, 0x94, 0x96, 0xd4, 0x1f, 0xad, 0xa8, 0xd3, 0x9e,
+	0x6e, 0x85, 0x63, 0xd5, 0x1c, 0x91, 0x28, 0xb1, 0xa7, 0x4f, 0xb9, 0x31,
+	0xdb, 0xaf, 0xb4, 0x8e, 0xec, 0x52, 0x96, 0x8d, 0xec, 0x56, 0x96, 0x1f,
+	0x95, 0xf2, 0x27, 0x94, 0xa5, 0x59, 0xcb, 0xea, 0x33, 0xf5, 0x30, 0x65,
+	0xb6, 0x0e, 0x9b, 0xba, 0x1f, 0xb8, 0x52, 0x45, 0x79, 0x1c, 0x25, 0x8c,
+	0x8f, 0x3b, 0x29, 0xd9, 0x68, 0x22, 0xcc, 0xdf, 0x72, 0x4d, 0x0f, 0x82,
+	0xf1, 0xa1, 0x97, 0x3e, 0xb1, 0x23, 0x55, 0x81, 0x4d, 0x9a, 0x1e, 0x8d,
+	0x53, 0xe7, 0xa5, 0x11, 0xdf, 0x1d, 0x6f, 0x1a, 0xb9, 0xa0, 0x83, 0x73,
+	0x70, 0x94, 0x3d, 0xb6, 0x12, 0xe7, 0xd6, 0x1b, 0x2e, 0xf4, 0x6b, 0xd5,
+	0x58, 0x6f, 0xfe, 0xd6, 0xda, 0xb4, 0x56, 0xee, 0xe5, 0x65, 0x83, 0x5d,
+	0xbe, 0x8e, 0xe5, 0x75, 0xf3, 0x68, 0x01, 0x5b, 0x4f, 0x25, 0x30, 0xe8,
+	0x88, 0x10, 0xf3, 0x9b, 0x03, 0xfe, 0x1e, 0xc8, 0xdc, 0xf8, 0x71, 0x23,
+	0xe5, 0x4f, 0x3b, 0xa7, 0xe2, 0x2f, 0xe2, 0x97, 0xcb, 0xc8, 0x35, 0x29,
+	0x37, 0x49, 0xfb, 0x16, 0xac, 0xb3, 0xac, 0xbd, 0xa6, 0xd8, 0xb9, 0x8f,
+	0x76, 0x3e, 0x0d, 0xfe, 0x5a, 0x3d, 0x9e, 0x66, 0x85, 0x43, 0x09, 0x95,
+	0x63, 0x8e, 0x2a, 0x25, 0x46, 0xb5, 0xe8, 0x38, 0x18, 0xc5, 0xe7, 0x3c,
+	0xf9, 0x39, 0xb3, 0xe5, 0x00, 0xc6, 0xf5, 0xb0, 0x5f, 0x65, 0x9d, 0x4b,
+	0x7e, 0x2c, 0x98, 0x27, 0x63, 0x94, 0xf9, 0x90, 0xf1, 0xfa, 0xe9, 0xd3,
+	0xd2, 0xce, 0x9f, 0x52, 0x4e, 0xd7, 0xd2, 0x10, 0x7d, 0x39, 0xc5, 0x46,
+	0xa9, 0x03, 0xb9, 0x5e, 0x42, 0xbd, 0x4d, 0x16, 0x7c, 0x50, 0x64, 0x13,
+	0x59, 0x6f, 0xc0, 0xfa, 0x7d, 0x7a, 0x3c, 0x0e, 0xb1, 0x91, 0x28, 0x3a,
+	0x6c, 0x7d, 0x8b, 0x7c, 0x40, 0x4d, 0x72, 0x8d, 0x3b, 0xef, 0xcf, 0xc0,
+	0x5d, 0xfb, 0xda, 0x28, 0xbb, 0x85, 0x37, 0xcc, 0x5a, 0x8c, 0xd2, 0xe3,
+	0xaa, 0x93, 0x72, 0x7d, 0xaa, 0x0c, 0x11, 0xa5, 0xe3, 0x68, 0x4d, 0x59,
+	0xbe, 0xef, 0x9d, 0x6a, 0x7e, 0x5c, 0x1f, 0x55, 0xff, 0x5f, 0xad, 0x51,
+	0x6f, 0xfe, 0x5a, 0x75, 0x52, 0xf8, 0x5d, 0x1b, 0xb4, 0xa4, 0x87, 0xb1,
+	0x2b, 0x6e, 0x55, 0x18, 0x7a, 0xdb, 0x7b, 0x4a, 0x37, 0x3e, 0x1d, 0xd2,
+	0x63, 0x3f, 0x51, 0xf4, 0xe8, 0x80, 0x62, 0xd0, 0xa7, 0x82, 0x58, 0x99,
+	0xfd, 0x70, 0x5f, 0x3f, 0x82, 0x7a, 0x58, 0xfa, 0x91, 0xfe, 0xce, 0xa2,
+	0xdf, 0xd6, 0x7b, 0x71, 0x3c, 0x32, 0x36, 0x05, 0x9b, 0xec, 0x31, 0xdd,
+	0x6a, 0xdb, 0xfa, 0x8b, 0xa6, 0x0b, 0x1b, 0xf6, 0x9d, 0x9a, 0x2f, 0x4a,
+	0xde, 0x78, 0x34, 0x8a, 0xde, 0x66, 0x17, 0xd6, 0x8f, 0xac, 0x53, 0x45,
+	0x36, 0xa8, 0xd3, 0xca, 0xf2, 0xff, 0x15, 0x72, 0x10, 0x0f, 0x3a, 0xb2,
+	0xd4, 0x23, 0xf1, 0xb0, 0xe3, 0xa8, 0xcc, 0x55, 0x2d, 0xff, 0xcb, 0x7c,
+	0x79, 0xf9, 0x5f, 0xe6, 0x6a, 0x06, 0xff, 0x57, 0xc3, 0x3f, 0x43, 0x64,
+	0x69, 0x46, 0xe2, 0x00, 0xdc, 0x15, 0x91, 0x2e, 0xdc, 0x3d, 0x60, 0x59,
+	0xfd, 0x01, 0xcb, 0x2a, 0x0b, 0x91, 0x33, 0x05, 0x1a, 0xc3, 0x57, 0x2a,
+	0x25, 0x98, 0xd4, 0x9a, 0xd1, 0x7f, 0xb4, 0x24, 0x56, 0x1d, 0x99, 0x41,
+	0x3f, 0xd6, 0xf0, 0xf3, 0x45, 0x6d, 0x18, 0x1f, 0x9b, 0x3a, 0x86, 0xbc,
+	0xcd, 0x7c, 0xa7, 0xa1, 0x68, 0x33, 0x22, 0xbf, 0xc8, 0xae, 0xf7, 0xa7,
+	0xe9, 0x63, 0x71, 0x0d, 0x31, 0x07, 0x79, 0x99, 0x4a, 0x19, 0x7a, 0x2e,
+	0xf1, 0xe7, 0x8f, 0xaa, 0x7f, 0xb1, 0xb1, 0x33, 0xf1, 0x47, 0x8b, 0xa1,
+	0x91, 0x7f, 0xb9, 0xc6, 0xfb, 0x32, 0x53, 0xcb, 0x40, 0x2b, 0x8b, 0x48,
+	0x19, 0x29, 0x7b, 0xb1, 0x71, 0x73, 0xe6, 0x56, 0x7b, 0xcc, 0x69, 0x16,
+	0xde, 0xb8, 0x4f, 0x74, 0x2a, 0x3a, 0xb0, 0x70, 0xdc, 0xbc, 0x81, 0x7e,
+	0xff, 0xa6, 0xe5, 0x98, 0x21, 0x6d, 0x74, 0x29, 0xad, 0xb4, 0xf5, 0xb8,
+	0xb3, 0x14, 0xe4, 0xcf, 0x5a, 0x49, 0x24, 0xaa, 0xac, 0xb1, 0xf5, 0xdf,
+	0xaa, 0x2c, 0x1f, 0x99, 0xda, 0x76, 0x97, 0xb2, 0x2c, 0x7b, 0xaa, 0x60,
+	0x6b, 0x17, 0xec, 0x31, 0xe4, 0xe5, 0xf7, 0xa3, 0x2d, 0x25, 0xed, 0x88,
+	0x5e, 0xf3, 0xbe, 0xd3, 0x26, 0x78, 0x7f, 0x49, 0xe6, 0x3c, 0x8f, 0xc8,
+	0xfb, 0xf7, 0x22, 0xda, 0xa3, 0xc8, 0x53, 0xf4, 0xe5, 0xe2, 0xf5, 0xc5,
+	0x1f, 0xba, 0x7e, 0x96, 0xed, 0x0b, 0x97, 0x90, 0xd8, 0x24, 0xdc, 0x42,
+	0x38, 0x45, 0x90, 0xfd, 0x09, 0xc7, 0x28, 0xce, 0xb9, 0x65, 0x7d, 0xcb,
+	0x6c, 0x40, 0xac, 0x56, 0x1f, 0x04, 0xea, 0x30, 0x48, 0x19, 0x1c, 0x49,
+	0xc4, 0x29, 0x3f, 0x75, 0xa8, 0xde, 0xe0, 0x80, 0xda, 0xe4, 0x40, 0x37,
+	0x5e, 0x37, 0x8d, 0xfe, 0x4d, 0xf8, 0x33, 0xf4, 0x78, 0x2d, 0x1c, 0x36,
+	0x83, 0xc4, 0x8e, 0x72, 0x74, 0x36, 0x51, 0xc1, 0x6b, 0xbc, 0xd8, 0x9b,
+	0x8a, 0xb7, 0xd3, 0xb5, 0x19, 0x67, 0x86, 0x6f, 0x4d, 0x04, 0xf4, 0xb6,
+	0xad, 0x4c, 0x73, 0x56, 0x0e, 0xb8, 0xe1, 0x57, 0xf2, 0x3e, 0xfa, 0x38,
+	0x63, 0xf1, 0x8d, 0xe6, 0x62, 0xea, 0xac, 0x8f, 0xb6, 0xa1, 0xd2, 0x0e,
+	0xa4, 0x9f, 0x20, 0x39, 0x87, 0xd4, 0x25, 0x76, 0xcf, 0x53, 0xb0, 0x74,
+	0x1e, 0xed, 0x8e, 0xdc, 0xe5, 0x2f, 0xe9, 0x77, 0x72, 0x3f, 0x91, 0x6d,
+	0x6c, 0xbb, 0x45, 0x7d, 0xc5, 0x8a, 0x4e, 0xcf, 0xb7, 0x11, 0x55, 0x29,
+	0xf7, 0xc7, 0xc6, 0x6d, 0x13, 0xc2, 0xa7, 0xaa, 0x8c, 0xf7, 0x41, 0x9a,
+	0x00, 0x09, 0x92, 0x8e, 0xa1, 0xf8, 0x8c, 0x39, 0xb4, 0xcd, 0xd2, 0x88,
+	0x4e, 0xbb, 0xad, 0x84, 0x3a, 0xa4, 0x4f, 0x2c, 0x77, 0x20, 0x56, 0xc2,
+	0xb9, 0xed, 0x18, 0xa9, 0x45, 0xcd, 0x7e, 0xab, 0xbb, 0x3c, 0x62, 0x59,
+	0xab, 0x17, 0x45, 0x70, 0xdf, 0x51, 0x0d, 0x15, 0xfb, 0x5d, 0x90, 0x5c,
+	0xa2, 0x33, 0xd4, 0x87, 0x4e, 0x72, 0x30, 0x57, 0x32, 0x88, 0x75, 0x8c,
+	0x2f, 0xe1, 0xd4, 0x8a, 0xd6, 0x33, 0x89, 0x79, 0x5d, 0x2e, 0x87, 0x6e,
+	0xa6, 0xb0, 0x1a, 0x9b, 0xb2, 0xab, 0xb1, 0x99, 0xf1, 0xed, 0x05, 0x03,
+	0xdd, 0x2e, 0xfa, 0xe1, 0x66, 0x72, 0xb4, 0xfb, 0x53, 0x6b, 0x71, 0x7f,
+	0x76, 0x1b, 0xef, 0xb5, 0xe3, 0x5e, 0x1e, 0xf7, 0xa4, 0xda, 0xc8, 0xb3,
+	0x3e, 0x87, 0x7b, 0xb2, 0xf5, 0x88, 0x8d, 0x6c, 0xc0, 0xd6, 0xec, 0xb5,
+	0x94, 0xc1, 0x0b, 0x35, 0xb9, 0x82, 0xbe, 0xb2, 0x02, 0xf7, 0x71, 0x2c,
+	0xf7, 0x71, 0x3e, 0x2a, 0x92, 0x5b, 0x71, 0x77, 0xd6, 0x03, 0xf7, 0xd0,
+	0x62, 0x74, 0x8e, 0xdc, 0x80, 0x6e, 0xc6, 0xb2, 0xf7, 0xaf, 0xbd, 0x01,
+	0x0f, 0x8c, 0xdc, 0x8f, 0xae, 0x94, 0x11, 0x77, 0x31, 0x5d, 0xaa, 0x5e,
+	0x7c, 0x3f, 0xbe, 0x48, 0x39, 0x36, 0xec, 0xb3, 0xb0, 0xcb, 0xbc, 0x51,
+	0x6d, 0x5e, 0x13, 0xb7, 0x98, 0xff, 0x30, 0x7e, 0x1e, 0xbc, 0xa3, 0xcf,
+	0x18, 0x50, 0x8b, 0xb1, 0x57, 0xe3, 0xb9, 0x96, 0xbc, 0xb5, 0xe0, 0x9f,
+	0x4e, 0xda, 0x82, 0x42, 0x5b, 0xfc, 0x1b, 0x6c, 0x1a, 0x91, 0x73, 0xb1,
+	0x59, 0x17, 0xee, 0x1a, 0xe9, 0x62, 0x2c, 0xfd, 0xa3, 0x35, 0x59, 0xaa,
+	0xa2, 0x82, 0x98, 0xda, 0x96, 0x6d, 0x55, 0x56, 0x8d, 0xd8, 0xf3, 0xae,
+	0xb9, 0x23, 0x5d, 0xca, 0x8a, 0x6c, 0x87, 0x03, 0xe5, 0x32, 0x37, 0xd7,
+	0x62, 0xac, 0xe9, 0xa0, 0x95, 0xce, 0xcf, 0x6f, 0x9a, 0x6e, 0xe2, 0xf6,
+	0x45, 0x4e, 0xde, 0xea, 0x6b, 0xd0, 0xbb, 0x0e, 0xaa, 0xc2, 0x05, 0xdd,
+	0xc8, 0xd9, 0xf3, 0x5b, 0x02, 0x9f, 0x51, 0x83, 0x13, 0xde, 0xbc, 0x0c,
+	0x6e, 0xca, 0xe0, 0x1e, 0x70, 0x71, 0x9e, 0xfd, 0xe4, 0xe8, 0x3e, 0xcc,
+	0x49, 0xfa, 0xd0, 0x4d, 0x7d, 0x3d, 0xc0, 0x39, 0x7b, 0x80, 0x7a, 0xda,
+	0x98, 0xca, 0x11, 0xd7, 0xb7, 0x61, 0x63, 0xa1, 0x9f, 0xbe, 0x6c, 0x29,
+	0xe5, 0xec, 0xc5, 0x11, 0xad, 0x84, 0xba, 0x17, 0x6e, 0x70, 0xf0, 0x8e,
+	0xc3, 0xc6, 0x06, 0xca, 0xfa, 0x65, 0xb6, 0x21, 0x72, 0x35, 0x6a, 0x35,
+	0xc8, 0x97, 0xed, 0xc9, 0x3a, 0x39, 0x9e, 0xdf, 0x58, 0x47, 0xbd, 0x6d,
+	0xcc, 0x87, 0x44, 0x9e, 0x83, 0x77, 0xf8, 0x68, 0x0f, 0xed, 0x59, 0x37,
+	0x31, 0x31, 0x4a, 0x1d, 0xb9, 0x51, 0x96, 0x6c, 0xe5, 0x7c, 0x78, 0xe0,
+	0xa5, 0x9e, 0xef, 0xa7, 0x7d, 0x57, 0x25, 0x57, 0x73, 0x3e, 0x34, 0x54,
+	0x26, 0xfb, 0x38, 0x17, 0x5e, 0x72, 0x90, 0x36, 0x6c, 0xa1, 0x5c, 0x9e,
+	0xe4, 0x5a, 0xce, 0x49, 0x1d, 0x9c, 0xc9, 0x76, 0x6c, 0xa0, 0x6e, 0xd7,
+	0x53, 0xb7, 0x77, 0x9b, 0x2f, 0x2b, 0x1b, 0xed, 0x9c, 0x83, 0x75, 0x53,
+	0x51, 0xce, 0x71, 0xfd, 0xb6, 0x5d, 0xd4, 0x63, 0xce, 0xc5, 0x24, 0xca,
+	0xf8, 0x29, 0xf9, 0x2b, 0xbd, 0xc1, 0xe8, 0x81, 0xf3, 0x92, 0x9c, 0x45,
+	0xbc, 0x16, 0x39, 0x25, 0x16, 0x15, 0xe5, 0x74, 0xa1, 0x9a, 0x79, 0x1a,
+	0xbb, 0xf3, 0x8b, 0x9c, 0xa5, 0x2c, 0xfb, 0x66, 0xc2, 0xcf, 0xfc, 0x99,
+	0x73, 0x92, 0xfc, 0x1c, 0x6d, 0xc4, 0xcd, 0xf9, 0x76, 0x93, 0x57, 0xea,
+	0x9c, 0xf3, 0x3a, 0x7c, 0x2d, 0x55, 0x86, 0xf7, 0x39, 0xef, 0x0f, 0xf0,
+	0xf7, 0x0e, 0xfa, 0xd5, 0xcb, 0x83, 0x16, 0x9c, 0x0b, 0x6b, 0x30, 0x68,
+	0xe3, 0x57, 0x19, 0xb6, 0x07, 0x37, 0x23, 0xed, 0x55, 0xd9, 0xb7, 0x1f,
+	0xe5, 0x46, 0x05, 0x76, 0x6b, 0x88, 0xbb, 0x9a, 0x75, 0x0c, 0x04, 0xdd,
+	0x48, 0x4f, 0x47, 0xd4, 0x65, 0x44, 0x69, 0xf7, 0x2e, 0x24, 0x35, 0x05,
+	0x2e, 0x62, 0x9f, 0x97, 0x3e, 0x36, 0xac, 0xa9, 0xfc, 0x2d, 0xf7, 0xc4,
+	0x8e, 0xc8, 0x9d, 0x22, 0x46, 0x7c, 0x96, 0x23, 0xd0, 0xe5, 0x52, 0xc5,
+	0x96, 0x2a, 0x70, 0x66, 0xf0, 0xcb, 0xd8, 0xc0, 0xfe, 0xfa, 0x52, 0x1e,
+	0xe6, 0x0e, 0x43, 0x8a, 0xdf, 0x1e, 0xb7, 0x07, 0x83, 0xc3, 0x4f, 0x59,
+	0x25, 0xe4, 0x4f, 0x2e, 0x23, 0x82, 0x6d, 0x47, 0xab, 0x90, 0x1a, 0xbc,
+	0x01, 0x5f, 0xb4, 0xcb, 0x55, 0x63, 0xd7, 0xe0, 0x12, 0x6c, 0xe6, 0xef,
+	0x3d, 0xf4, 0xb9, 0x7b, 0x07, 0xee, 0xc7, 0xda, 0x54, 0x7d, 0xe7, 0x4b,
+	0x4a, 0xcc, 0xd6, 0xeb, 0x96, 0x81, 0x0d, 0xb6, 0x5e, 0xb7, 0x3e, 0xd4,
+	0x89, 0xad, 0x47, 0xaf, 0xc0, 0xfa, 0x87, 0xb6, 0x60, 0xfd, 0xd1, 0x3a,
+	0x74, 0x0c, 0x6c, 0xa5, 0xbd, 0x57, 0xe1, 0xae, 0xbd, 0x37, 0xd0, 0xf6,
+	0x6e, 0x40, 0xe7, 0x3e, 0xe3, 0x62, 0x89, 0xb2, 0x4a, 0xf1, 0xd7, 0xd2,
+	0xd6, 0x6d, 0xbb, 0xcb, 0xeb, 0x6c, 0x7b, 0x76, 0x2e, 0xe7, 0xb6, 0x9b,
+	0x73, 0x5b, 0x6a, 0xdb, 0x41, 0x05, 0x75, 0x76, 0xf7, 0x80, 0x87, 0xb6,
+	0xe2, 0xc7, 0xaa, 0x82, 0xad, 0xf4, 0x66, 0x17, 0x92, 0xe7, 0x79, 0x91,
+	0xd1, 0x82, 0xd4, 0x43, 0x71, 0x0e, 0x22, 0x05, 0x5b, 0xf9, 0x19, 0xcb,
+	0xd8, 0x76, 0xfc, 0x61, 0xbf, 0xe0, 0xdc, 0xb6, 0xa1, 0x86, 0x31, 0xb4,
+	0xc3, 0x5c, 0xa4, 0xac, 0xd1, 0x2e, 0xcd, 0x97, 0xaf, 0x38, 0x5f, 0x92,
+	0xd7, 0x55, 0xb2, 0xce, 0xd8, 0xc0, 0x97, 0x6d, 0xbb, 0xfd, 0x54, 0x76,
+	0x6a, 0xdb, 0xcd, 0xd8, 0x62, 0xcb, 0x59, 0x46, 0xfd, 0x17, 0xe7, 0x57,
+	0xef, 0x17, 0x4c, 0x0b, 0x2c, 0x28, 0x62, 0x5a, 0x47, 0xa1, 0xef, 0x51,
+	0x8b, 0x31, 0xc7, 0xe9, 0x32, 0x1c, 0xd8, 0x13, 0xdc, 0xa6, 0xc4, 0x6a,
+	0x9c, 0x94, 0x57, 0xb8, 0xe1, 0xff, 0xb4, 0x7a, 0xd7, 0xca, 0x5c, 0xfc,
+	0xb9, 0x93, 0x21, 0x4a, 0x71, 0x5d, 0xf2, 0xdd, 0xd5, 0xe8, 0x48, 0x89,
+	0x9c, 0x6d, 0x58, 0x9f, 0xb2, 0x65, 0xf2, 0x17, 0x65, 0xea, 0xa3, 0xad,
+	0x68, 0xc9, 0xdd, 0xb6, 0x3c, 0x6d, 0xb4, 0xa7, 0x07, 0xf6, 0xa9, 0x08,
+	0x2f, 0x5c, 0xa7, 0x60, 0xa6, 0xc4, 0xd9, 0x7a, 0xea, 0x51, 0xfe, 0xfb,
+	0x31, 0x27, 0x74, 0x87, 0x32, 0x39, 0x73, 0x80, 0xe5, 0x96, 0x90, 0x2b,
+	0xd4, 0x0a, 0xd7, 0xc3, 0x39, 0xf3, 0xb3, 0xca, 0x32, 0x4d, 0xc6, 0x52,
+	0xc4, 0x82, 0x7a, 0xea, 0x40, 0xe6, 0x54, 0x7e, 0xb7, 0xe0, 0xee, 0xe6,
+	0x7a, 0xdc, 0x6d, 0xc7, 0xf1, 0xbf, 0xc1, 0xc6, 0x91, 0x62, 0xdc, 0x62,
+	0xc8, 0x28, 0xe0, 0xc1, 0x4d, 0x05, 0x3c, 0xf0, 0x10, 0x0f, 0x56, 0x67,
+	0xdf, 0xa6, 0x3c, 0xe2, 0x83, 0x1f, 0x94, 0xe7, 0x5e, 0xca, 0xf3, 0x7c,
+	0x68, 0x06, 0xed, 0x4f, 0xe4, 0x58, 0x82, 0x2f, 0xee, 0x93, 0xbc, 0x52,
+	0x7e, 0x5b, 0x78, 0x2b, 0xa4, 0xa1, 0xb9, 0xe6, 0x83, 0xfd, 0x77, 0x50,
+	0x36, 0xb7, 0xf1, 0x47, 0x6b, 0x0e, 0xeb, 0x2f, 0x63, 0xff, 0x9b, 0x46,
+	0x96, 0xd0, 0xf6, 0x65, 0x5c, 0x72, 0xdf, 0xc8, 0x2d, 0x71, 0xe4, 0xf1,
+	0xa9, 0x6b, 0x44, 0xda, 0x10, 0x3d, 0x34, 0x3b, 0xf2, 0xf3, 0x57, 0x9c,
+	0x57, 0xe9, 0xdf, 0x0d, 0x47, 0x44, 0x4f, 0x2f, 0x75, 0x88, 0x0c, 0xc0,
+	0x9e, 0x21, 0xc1, 0x01, 0x0b, 0x1b, 0x42, 0x5f, 0x50, 0xb6, 0x6b, 0xfd,
+	0xb4, 0x1f, 0x69, 0x4b, 0xe2, 0x1e, 0xe3, 0x5f, 0x55, 0x15, 0x75, 0x01,
+	0x0c, 0x0c, 0xc5, 0xad, 0x2a, 0x5b, 0xae, 0x40, 0x7c, 0x9c, 0x78, 0x35,
+	0x78, 0xc8, 0x49, 0xb9, 0x84, 0x93, 0x98, 0xbc, 0x7f, 0xb9, 0x6d, 0x37,
+	0x39, 0x95, 0x97, 0x73, 0x32, 0x3c, 0x4f, 0x72, 0x8e, 0x83, 0x77, 0x04,
+	0x33, 0x82, 0x5f, 0x0e, 0xcc, 0x19, 0x72, 0xe2, 0xfd, 0x85, 0x8c, 0x59,
+	0xd3, 0x6a, 0x29, 0x66, 0x09, 0x8f, 0x25, 0x8c, 0x1d, 0x9f, 0x40, 0xc5,
+	0x50, 0xce, 0x12, 0x9d, 0x6f, 0x0c, 0x05, 0xc2, 0xa3, 0x10, 0xdb, 0x76,
+	0xa0, 0x64, 0x88, 0xf9, 0x8e, 0xb9, 0x40, 0x89, 0x7a, 0xf3, 0x7c, 0x57,
+	0xa5, 0xbc, 0x3d, 0xe3, 0x92, 0xef, 0xa7, 0xef, 0x68, 0x49, 0x84, 0x94,
+	0xa8, 0x76, 0x6a, 0xa5, 0xca, 0xeb, 0x9b, 0x8f, 0x0a, 0x3e, 0x29, 0xb6,
+	0x2d, 0xcb, 0xda, 0x56, 0x1e, 0xa7, 0x4c, 0xe2, 0xd4, 0x0c, 0x54, 0xee,
+	0x0f, 0xe3, 0x9e, 0xa3, 0xc4, 0xa9, 0xfd, 0xd7, 0x63, 0x0b, 0xcb, 0x6d,
+	0xe5, 0xbd, 0xad, 0x47, 0x6b, 0x79, 0x78, 0x79, 0xcc, 0xe0, 0xb1, 0x98,
+	0xbe, 0xd3, 0xcc, 0x58, 0xe2, 0x40, 0xf5, 0x90, 0x8a, 0xf7, 0xc8, 0x9d,
+	0x6a, 0xae, 0x96, 0x31, 0xb8, 0x31, 0x77, 0xde, 0x65, 0x9c, 0x74, 0xb2,
+	0xef, 0xaa, 0x88, 0x6e, 0x7e, 0xda, 0xe6, 0xd7, 0x6e, 0xc6, 0x32, 0xe0,
+	0xf9, 0xc1, 0x36, 0x3b, 0x4f, 0x7a, 0x2c, 0xb4, 0x03, 0xab, 0x6b, 0x44,
+	0x5f, 0x65, 0xf9, 0x7c, 0xe0, 0x03, 0x7a, 0x16, 0x4c, 0xfc, 0x64, 0xe1,
+	0xda, 0xaf, 0x84, 0x6f, 0xb7, 0x45, 0xe9, 0x2f, 0xbb, 0x52, 0xbb, 0x6c,
+	0xfd, 0x46, 0x95, 0x3a, 0x04, 0x06, 0x94, 0x8f, 0xa8, 0xa7, 0x52, 0xf6,
+	0xa2, 0x0e, 0x9d, 0xec, 0xe3, 0x04, 0xa2, 0x6b, 0x10, 0xd3, 0x22, 0x75,
+	0x1c, 0x5b, 0x5e, 0xa7, 0x57, 0x53, 0xa7, 0x9f, 0xe6, 0x78, 0x4a, 0x87,
+	0xbc, 0xb4, 0x05, 0xb1, 0xd3, 0x1f, 0x61, 0x85, 0xad, 0x2b, 0xc6, 0xa2,
+	0xfd, 0xcc, 0x35, 0x42, 0x1b, 0x95, 0x98, 0x7d, 0xee, 0xbc, 0xa4, 0x3b,
+	0x2f, 0x75, 0x37, 0x9c, 0xfc, 0x2f, 0x4a, 0xbc, 0x56, 0xae, 0xdf, 0x4f,
+	0x5c, 0xce, 0xe7, 0x0f, 0x4e, 0x23, 0xd0, 0xde, 0x4b, 0x2c, 0xbb, 0x9b,
+	0xb6, 0x18, 0x1b, 0xf1, 0x08, 0x86, 0x13, 0x67, 0xd3, 0xc4, 0x59, 0xc1,
+	0x50, 0x0d, 0x1b, 0x8e, 0x9e, 0xaa, 0x29, 0x45, 0x2d, 0xff, 0x7b, 0x79,
+	0xcc, 0xe0, 0xe1, 0x26, 0x07, 0x75, 0x63, 0xc2, 0xce, 0x25, 0x9a, 0x18,
+	0xdf, 0x3d, 0x78, 0x3a, 0x61, 0x32, 0x0e, 0x69, 0x78, 0x75, 0xb0, 0xd9,
+	0xc6, 0xa2, 0x87, 0x53, 0x35, 0x30, 0xf7, 0x2d, 0xc2, 0x36, 0xfe, 0x3e,
+	0x98, 0xaa, 0x45, 0xf5, 0xbe, 0xc5, 0x36, 0xf6, 0xed, 0x4a, 0x4d, 0xc3,
+	0xd5, 0x7b, 0xaf, 0xc5, 0xbd, 0xb6, 0x5f, 0x78, 0x0b, 0x73, 0x34, 0xa3,
+	0x30, 0x47, 0x12, 0x4b, 0x0c, 0xce, 0xd3, 0x73, 0x7f, 0xf0, 0xdf, 0x2a,
+	0x7e, 0x3b, 0x35, 0x86, 0x89, 0x1d, 0x4b, 0x9d, 0xa3, 0xf4, 0x7b, 0xf9,
+	0x2d, 0x36, 0xfc, 0x65, 0xea, 0x51, 0xec, 0xb7, 0x1e, 0x9b, 0xf7, 0xd1,
+	0x4f, 0x42, 0x33, 0x91, 0x1f, 0x5b, 0xd1, 0x76, 0xe7, 0x7c, 0x84, 0x6e,
+	0xa7, 0xc6, 0x9b, 0x9e, 0x42, 0x5c, 0x94, 0xb2, 0x45, 0xec, 0x2c, 0xe0,
+	0x49, 0xe2, 0x82, 0xf7, 0x72, 0x3c, 0xea, 0x91, 0x3e, 0x89, 0x71, 0x97,
+	0x7d, 0xb0, 0xcb, 0xf6, 0x35, 0x0d, 0xd5, 0xd7, 0x8a, 0xaf, 0xd5, 0x73,
+	0x6c, 0x7a, 0xf8, 0x72, 0xbf, 0xc7, 0x98, 0xa2, 0x4a, 0xdf, 0x1e, 0xda,
+	0x95, 0x42, 0x1f, 0x76, 0x20, 0x1f, 0x13, 0xaa, 0xe0, 0xdb, 0xdf, 0x84,
+	0x97, 0x47, 0x3d, 0xf4, 0x05, 0x95, 0xbe, 0xe0, 0xa2, 0x2f, 0x48, 0x3d,
+	0xe1, 0x32, 0xf4, 0xe9, 0xfd, 0x75, 0x38, 0x95, 0xb9, 0x02, 0x13, 0xa3,
+	0x4b, 0x59, 0x5f, 0xec, 0x69, 0xaa, 0xac, 0x7b, 0x8a, 0x31, 0x3c, 0x58,
+	0x73, 0x49, 0xd6, 0x3e, 0xc4, 0x28, 0x6f, 0x39, 0xcb, 0xdc, 0x34, 0x20,
+	0xb8, 0xdb, 0x86, 0xb1, 0x81, 0xb8, 0xe5, 0x61, 0xbf, 0x6a, 0x44, 0xf7,
+	0x7d, 0x4a, 0x31, 0xfc, 0x5b, 0x11, 0xa4, 0xcd, 0x7a, 0x51, 0x9a, 0xec,
+	0x66, 0x4c, 0xd6, 0x83, 0x7f, 0xad, 0xe8, 0x13, 0x87, 0xf0, 0x32, 0x1a,
+	0x78, 0xad, 0x24, 0x79, 0x16, 0x0f, 0x67, 0x5f, 0xc1, 0x3c, 0xce, 0x9b,
+	0x3b, 0x49, 0x3c, 0x09, 0xb8, 0x39, 0x4e, 0xb7, 0xb2, 0xa4, 0xa8, 0xf7,
+	0x04, 0xdc, 0xb3, 0xd8, 0xe6, 0x75, 0xc4, 0xb4, 0xe7, 0x0c, 0x3d, 0xf7,
+	0x24, 0x8c, 0x2e, 0xa7, 0x23, 0x88, 0x9b, 0xb3, 0x05, 0xdb, 0x4c, 0xca,
+	0x3a, 0x48, 0x1b, 0xe6, 0x0f, 0xe8, 0x8c, 0xed, 0xdd, 0xc4, 0x30, 0xbd,
+	0xed, 0xdb, 0x8a, 0x1e, 0x5f, 0xae, 0xbc, 0x8c, 0x92, 0xf1, 0xb3, 0x18,
+	0x64, 0xdb, 0x18, 0xff, 0x86, 0x43, 0xda, 0xf4, 0x8c, 0x9b, 0x7f, 0x4c,
+	0x5c, 0xc6, 0x6d, 0xcd, 0x65, 0x5c, 0xfd, 0x21, 0x4c, 0x6a, 0x6a, 0xad,
+	0x4e, 0x76, 0x6c, 0xf5, 0x45, 0xb6, 0x3d, 0x50, 0x76, 0x6d, 0xde, 0xc6,
+	0xfd, 0x19, 0x37, 0xde, 0x9a, 0x1e, 0x25, 0xc6, 0x37, 0xe3, 0x6b, 0x07,
+	0x9a, 0xb0, 0xe3, 0x00, 0xf3, 0x43, 0xb5, 0x71, 0xe2, 0xbc, 0xa3, 0x86,
+	0x7a, 0x1b, 0xb2, 0xf3, 0x58, 0x97, 0xf1, 0xd7, 0xc4, 0x1f, 0xd5, 0xe6,
+	0x11, 0x52, 0x67, 0x2e, 0xfd, 0xa2, 0xe5, 0x92, 0xfc, 0x2e, 0xa4, 0xb5,
+	0x5e, 0xde, 0xbb, 0xb1, 0xb0, 0xb6, 0x2e, 0xeb, 0x0a, 0xbd, 0x53, 0x38,
+	0xc7, 0x86, 0x29, 0x9c, 0xa3, 0xd1, 0x5f, 0x73, 0x29, 0x5e, 0xac, 0x2c,
+	0x94, 0x5f, 0xe7, 0xca, 0xcb, 0xf6, 0x29, 0x77, 0x91, 0x17, 0xe6, 0xeb,
+	0x5d, 0x53, 0x82, 0xf2, 0x3d, 0xf6, 0xba, 0xa5, 0xd3, 0xee, 0xdf, 0x24,
+	0x76, 0x5e, 0x29, 0xeb, 0xe9, 0x05, 0xff, 0xee, 0x9d, 0xe2, 0xdf, 0x6b,
+	0xd8, 0x86, 0xf8, 0xb8, 0x7b, 0x0a, 0x16, 0x7c, 0x82, 0xd7, 0xf2, 0x3e,
+	0x79, 0x39, 0x36, 0xee, 0x2c, 0xcc, 0xef, 0x62, 0x57, 0x3e, 0x46, 0x14,
+	0xd7, 0x14, 0xfe, 0x9f, 0x3f, 0x6e, 0xd2, 0xc4, 0x46, 0x8a, 0x6b, 0x04,
+	0x39, 0xbf, 0x83, 0x79, 0xf2, 0x4e, 0x5e, 0xc8, 0x24, 0xbe, 0x80, 0xc1,
+	0x1a, 0xe6, 0x7b, 0xcc, 0xe5, 0x97, 0x86, 0xec, 0x35, 0x05, 0xde, 0xfb,
+	0x8d, 0xd8, 0x6a, 0xf8, 0xb2, 0xac, 0x53, 0xed, 0x5c, 0xda, 0x16, 0x6e,
+	0xe5, 0x46, 0x45, 0x44, 0xf7, 0xaf, 0x72, 0xb4, 0x11, 0x33, 0x15, 0xdb,
+	0x87, 0xa8, 0x33, 0xf4, 0xa6, 0x15, 0xec, 0x4c, 0xd7, 0xa1, 0x87, 0x18,
+	0xbe, 0x62, 0xd0, 0x87, 0x7e, 0xfe, 0xde, 0x9e, 0x72, 0xe1, 0xc8, 0xe0,
+	0x2c, 0xec, 0x48, 0x0b, 0xb7, 0x2a, 0x21, 0xb7, 0xba, 0x02, 0x0f, 0xa7,
+	0xa5, 0xad, 0x52, 0xf8, 0x86, 0x3e, 0x81, 0x83, 0xfc, 0x3d, 0x4c, 0xbc,
+	0x4c, 0x0d, 0xd5, 0x21, 0x95, 0x96, 0xb1, 0x97, 0xd1, 0xbf, 0xff, 0x0c,
+	0x49, 0xfe, 0x1e, 0x20, 0xff, 0xca, 0xec, 0x9d, 0x8d, 0x44, 0xba, 0xce,
+	0x5e, 0xab, 0xf2, 0x50, 0xfe, 0x44, 0xa0, 0x02, 0xeb, 0xf7, 0x0a, 0x27,
+	0xf1, 0xdd, 0x71, 0x77, 0x60, 0x0e, 0xfb, 0xac, 0xc3, 0x4e, 0xf2, 0xa6,
+	0x0b, 0x83, 0x7e, 0xbb, 0xbf, 0x9e, 0x54, 0x25, 0x6e, 0x1c, 0x5c, 0xb6,
+	0x4c, 0x25, 0x9f, 0xdb, 0x9e, 0x16, 0xfc, 0xa9, 0x22, 0xa6, 0xcc, 0xc5,
+	0xd7, 0xd2, 0x82, 0x29, 0xd5, 0xc4, 0x94, 0x7a, 0x0c, 0xa6, 0x05, 0x53,
+	0x34, 0x78, 0xf7, 0x19, 0x18, 0x4e, 0xcb, 0x7a, 0x6a, 0x0d, 0xde, 0xda,
+	0x1b, 0xc0, 0x2e, 0xbb, 0x7f, 0x13, 0xc9, 0x54, 0xd8, 0xc6, 0x96, 0xab,
+	0x1e, 0xca, 0xf9, 0xaa, 0xa0, 0x60, 0x22, 0x10, 0xc4, 0xc0, 0xe8, 0x0c,
+	0x34, 0x3c, 0xa4, 0x9b, 0x5b, 0xa1, 0x4f, 0xdc, 0x8d, 0x2b, 0xb1, 0x73,
+	0xd4, 0x87, 0xc0, 0x43, 0xd5, 0x70, 0x87, 0x9a, 0xb0, 0x7d, 0xf4, 0x6a,
+	0xf4, 0x8c, 0xd6, 0x61, 0xc9, 0x00, 0xf0, 0x6c, 0xc6, 0x64, 0x2e, 0x5f,
+	0x02, 0x4e, 0x00, 0x96, 0x64, 0x45, 0x8f, 0x32, 0x87, 0x32, 0x97, 0xc5,
+	0x79, 0x64, 0xac, 0x09, 0x54, 0xa3, 0x2f, 0x24, 0xf7, 0x4e, 0xd0, 0x0e,
+	0xc2, 0x36, 0x4e, 0xe5, 0xd7, 0x7b, 0x74, 0x73, 0x27, 0x6c, 0xdd, 0x23,
+	0x9d, 0x91, 0x79, 0x60, 0x36, 0x9c, 0x99, 0x6a, 0x33, 0x3b, 0xf3, 0x36,
+	0x73, 0xc9, 0x0e, 0xb6, 0x14, 0xec, 0x40, 0x72, 0x4e, 0x0b, 0xcf, 0x98,
+	0x97, 0xd6, 0xa8, 0x5a, 0x4b, 0x10, 0x30, 0x9d, 0x0a, 0xfc, 0xa5, 0x91,
+	0x80, 0xff, 0xbb, 0x90, 0xb5, 0xaa, 0xb8, 0x12, 0xcd, 0x16, 0xd6, 0xaa,
+	0xb2, 0xc5, 0x35, 0xaa, 0xa9, 0x6b, 0x99, 0xf2, 0x0c, 0x47, 0xa5, 0x7c,
+	0x25, 0xcc, 0xdb, 0x65, 0xad, 0xa7, 0x51, 0xa3, 0x86, 0x3e, 0x94, 0xf3,
+	0x56, 0xc5, 0xca, 0x22, 0xcd, 0xf0, 0x8f, 0xd5, 0xf9, 0xdf, 0x48, 0x88,
+	0xae, 0x7f, 0x6f, 0xb9, 0x0d, 0xc3, 0x77, 0x0c, 0x75, 0xfe, 0xd7, 0x32,
+	0x2f, 0x96, 0xa0, 0xca, 0x83, 0x1b, 0x13, 0x1f, 0x5d, 0x4f, 0x8d, 0x40,
+	0x59, 0xde, 0xec, 0x43, 0x99, 0x01, 0xe7, 0x4d, 0x0d, 0x98, 0xf2, 0xd7,
+	0x86, 0x92, 0x08, 0xd4, 0xd3, 0xcd, 0x61, 0xe2, 0x4c, 0xfe, 0xb9, 0xc8,
+	0xd2, 0xac, 0xee, 0x8b, 0x2a, 0xf9, 0x67, 0x1f, 0x9d, 0xa1, 0x3f, 0x58,
+	0xa8, 0xe9, 0xb6, 0xd7, 0xcd, 0xdc, 0xe4, 0x10, 0x5b, 0x13, 0x96, 0xf5,
+	0x0c, 0x75, 0x20, 0xcf, 0xdc, 0xde, 0xce, 0xfc, 0xce, 0x9a, 0xf0, 0x3a,
+	0xf1, 0xa6, 0x31, 0xb5, 0x3d, 0x3f, 0xaa, 0x23, 0xa6, 0x60, 0x8c, 0x1d,
+	0xcc, 0xc6, 0x8c, 0xc6, 0x6d, 0x87, 0x99, 0xcb, 0xce, 0x0f, 0xe8, 0xfe,
+	0x24, 0xfe, 0x3f, 0xcb, 0x4f, 0x8e, 0x94, 0x56, 0x8a, 0xeb, 0x5f, 0x1f,
+	0x5e, 0xb7, 0xa8, 0x8a, 0xb9, 0x38, 0xbe, 0x43, 0x09, 0xbd, 0x3f, 0xce,
+	0x5c, 0x8a, 0xdc, 0x21, 0xe6, 0x8c, 0xd4, 0xf9, 0x77, 0x26, 0xec, 0x71,
+	0x9a, 0x17, 0x68, 0x0b, 0xa7, 0x9b, 0xeb, 0xfc, 0xbd, 0x19, 0xb1, 0x47,
+	0x85, 0x63, 0x69, 0xc6, 0xa3, 0x19, 0x15, 0x9b, 0x1f, 0xf2, 0x62, 0x23,
+	0xf9, 0xf1, 0x36, 0x72, 0x56, 0xe3, 0x2a, 0x27, 0xee, 0x62, 0x3e, 0xb6,
+	0x69, 0xa0, 0x94, 0x7a, 0xd4, 0xc8, 0xc5, 0x9d, 0x68, 0xba, 0xaa, 0x0a,
+	0xf1, 0xe9, 0xa5, 0x78, 0xc1, 0x74, 0xe0, 0xaa, 0x50, 0x05, 0xd2, 0x36,
+	0x96, 0x8b, 0xff, 0x0b, 0x17, 0x12, 0xbd, 0x91, 0xaf, 0x18, 0xe2, 0xb3,
+	0x1f, 0xb5, 0x36, 0xf2, 0x1b, 0x2b, 0x37, 0x7d, 0x8f, 0xcd, 0xf5, 0x1c,
+	0x11, 0xd1, 0x8d, 0xd4, 0x95, 0x75, 0x1e, 0x2f, 0xb9, 0xc5, 0x07, 0xf4,
+	0xa8, 0xcc, 0x89, 0x04, 0x26, 0x96, 0x28, 0x0e, 0x84, 0x03, 0x55, 0xb1,
+	0xea, 0x48, 0x98, 0x39, 0x4e, 0x8f, 0xcf, 0x67, 0x3f, 0x13, 0x8a, 0xe0,
+	0xc2, 0x22, 0x13, 0xb7, 0x67, 0xe1, 0x5c, 0x4e, 0xdd, 0xb7, 0x52, 0xaf,
+	0x3b, 0xcc, 0x3f, 0x58, 0x39, 0x2d, 0xcf, 0x8d, 0x62, 0x9a, 0x65, 0x6d,
+	0xa2, 0x7e, 0xc9, 0xf5, 0xf1, 0xb3, 0x82, 0x7e, 0x45, 0xa7, 0x15, 0x63,
+	0xbf, 0xb3, 0x4e, 0x53, 0xbf, 0x6e, 0xb6, 0xe7, 0x66, 0x7b, 0x65, 0x63,
+	0x1f, 0xd4, 0x73, 0x29, 0xe5, 0x59, 0x6e, 0xcb, 0xf0, 0x7e, 0x89, 0xc4,
+	0xb5, 0xa8, 0x52, 0xe4, 0x8b, 0xff, 0xd9, 0x98, 0xf2, 0x6b, 0x5d, 0x8f,
+	0x67, 0x2d, 0x6b, 0xc8, 0x14, 0xfd, 0xd7, 0x15, 0xf4, 0x5f, 0x89, 0xe8,
+	0x0c, 0xbd, 0x1f, 0x78, 0xac, 0x54, 0x70, 0x46, 0x9e, 0x61, 0xb8, 0x8c,
+	0x06, 0x6c, 0x6f, 0xf3, 0xe0, 0x8d, 0x44, 0xa5, 0x3d, 0xee, 0xfa, 0x79,
+	0x96, 0x75, 0x9f, 0xe9, 0xc7, 0x39, 0xa3, 0x31, 0xbc, 0x40, 0x9d, 0x85,
+	0x49, 0x4d, 0x9e, 0xa7, 0x51, 0x17, 0xa9, 0x19, 0x9c, 0x2f, 0xc1, 0x02,
+	0x6c, 0xa3, 0x3d, 0xf9, 0x1d, 0x11, 0xb0, 0x8e, 0xe1, 0x3f, 0x02, 0x0d,
+	0xbd, 0xde, 0x08, 0x73, 0x26, 0xb5, 0x95, 0x79, 0x73, 0xbc, 0x8c, 0xb9,
+	0xd7, 0xa3, 0x78, 0xcb, 0x8a, 0x7b, 0x2d, 0x94, 0x84, 0xca, 0xf0, 0x6c,
+	0xd3, 0xcf, 0xac, 0xe8, 0x1a, 0x69, 0x37, 0xde, 0x59, 0x42, 0x65, 0x54,
+	0x45, 0x0e, 0xde, 0xf6, 0x42, 0x40, 0x8f, 0x09, 0x3f, 0xdd, 0xc3, 0x79,
+	0x8c, 0x15, 0xd6, 0x4d, 0xfc, 0x6a, 0x9d, 0xfd, 0x6c, 0xe7, 0xf1, 0x7f,
+	0x37, 0x16, 0x19, 0xab, 0xe4, 0x1d, 0x2f, 0x5b, 0x98, 0x21, 0xfd, 0xef,
+	0xa1, 0xec, 0x11, 0xe6, 0xec, 0x2a, 0xde, 0x1d, 0x14, 0x5d, 0x48, 0x1c,
+	0x96, 0x32, 0xb8, 0xba, 0x1a, 0x72, 0x5f, 0xfc, 0x23, 0x5f, 0xa6, 0xc7,
+	0x5e, 0xa7, 0x7b, 0x95, 0xf7, 0x14, 0x1b, 0x5f, 0x8b, 0x75, 0x2f, 0x5f,
+	0x97, 0xfa, 0xa7, 0x4b, 0x25, 0x86, 0xec, 0x4c, 0xcd, 0x29, 0xcd, 0x73,
+	0x87, 0xe2, 0xb9, 0x65, 0x1d, 0x37, 0x73, 0xb3, 0x34, 0x9c, 0x50, 0xda,
+	0xe9, 0xf3, 0x28, 0x75, 0xfa, 0xe7, 0x44, 0xa0, 0xcd, 0xa2, 0x9f, 0x2f,
+	0xa5, 0x9f, 0x47, 0xe9, 0xe7, 0xeb, 0xb2, 0x27, 0x94, 0xdb, 0xb3, 0x89,
+	0x52, 0xc1, 0x1d, 0xd1, 0x5b, 0x0f, 0xed, 0x8f, 0x31, 0x86, 0x3c, 0x44,
+	0x9e, 0x74, 0x6a, 0xb2, 0xbe, 0x82, 0xed, 0x26, 0x63, 0x9c, 0xb7, 0x1a,
+	0x3b, 0x4d, 0xda, 0xac, 0xa1, 0xce, 0x75, 0xc2, 0xc2, 0x69, 0x53, 0xce,
+	0x5d, 0x98, 0xf4, 0x3a, 0xb0, 0xcb, 0x74, 0xa2, 0xd3, 0x50, 0x75, 0xb9,
+	0xee, 0x08, 0xc9, 0x39, 0x39, 0xc7, 0x74, 0x05, 0x7b, 0xc2, 0x2a, 0xe3,
+	0x46, 0x8f, 0x5f, 0xae, 0x2f, 0x0d, 0xc9, 0xb9, 0x42, 0xee, 0xaf, 0xd2,
+	0xe6, 0x15, 0x6c, 0x65, 0xbb, 0xbd, 0xa1, 0xfc, 0xda, 0x74, 0x0c, 0x96,
+	0xb5, 0xc7, 0x6c, 0xb9, 0xae, 0x82, 0xe5, 0xce, 0x9b, 0x12, 0xef, 0x0f,
+	0xde, 0x3e, 0x3f, 0x10, 0x8f, 0x96, 0x40, 0x8f, 0x95, 0x51, 0xb7, 0x3b,
+	0x07, 0xe6, 0xb0, 0x9e, 0xc2, 0x7c, 0xc7, 0xe9, 0xdb, 0x0d, 0x59, 0xcf,
+	0x0a, 0xf8, 0x5f, 0x23, 0x07, 0x4d, 0x7b, 0x1b, 0x34, 0x07, 0x0c, 0xff,
+	0x39, 0xce, 0x79, 0xb5, 0xe1, 0xdc, 0xf6, 0x03, 0xe8, 0x9d, 0x65, 0x4a,
+	0x43, 0xb0, 0x0a, 0x2e, 0xc4, 0xc9, 0x4b, 0x47, 0xc7, 0x3c, 0xc4, 0x76,
+	0x43, 0x3b, 0x62, 0xaf, 0x5b, 0x7b, 0xa8, 0x33, 0x0f, 0xfa, 0x53, 0x01,
+	0x6d, 0x42, 0x29, 0x9e, 0xcf, 0x11, 0x5c, 0x89, 0x39, 0x22, 0x82, 0x8d,
+	0x71, 0xeb, 0xe9, 0x66, 0x49, 0x6d, 0xdc, 0xfe, 0x58, 0xc6, 0xc3, 0x43,
+	0xe3, 0xe1, 0xf5, 0x6f, 0xcc, 0xf8, 0xfc, 0x1b, 0x32, 0xf0, 0x77, 0x64,
+	0x8a, 0x36, 0x5d, 0xc4, 0x05, 0xc1, 0x45, 0xcb, 0x92, 0xe7, 0xb9, 0x4f,
+	0x65, 0xa5, 0x2d, 0x99, 0x07, 0x79, 0xbe, 0x72, 0xf0, 0xf6, 0x67, 0xe8,
+	0x27, 0x2e, 0x62, 0xf8, 0x2e, 0x23, 0x4e, 0x98, 0xb5, 0x2c, 0x23, 0xa4,
+	0xfb, 0x4a, 0x14, 0x3f, 0x76, 0x36, 0xfd, 0xd6, 0x9a, 0xa4, 0x5c, 0x1b,
+	0x33, 0x33, 0xdc, 0xf9, 0x79, 0x13, 0x1f, 0x15, 0xfc, 0xf0, 0xd3, 0x86,
+	0x7d, 0xfe, 0x1e, 0xf6, 0xb3, 0xfd, 0x52, 0x3f, 0x79, 0x1f, 0xbe, 0x89,
+	0x6d, 0xb5, 0x84, 0xe0, 0x5c, 0xd6, 0xf4, 0x6f, 0x56, 0xce, 0x3b, 0xf5,
+	0xd9, 0xa5, 0x9b, 0xb1, 0x1b, 0xce, 0x8e, 0x26, 0x39, 0x57, 0xd0, 0x12,
+	0x96, 0x73, 0x05, 0x1d, 0x86, 0x9c, 0x13, 0xef, 0xb3, 0x72, 0x6e, 0x59,
+	0x97, 0xcf, 0x3f, 0x8c, 0x63, 0x26, 0xee, 0x4e, 0xc9, 0xda, 0x9a, 0xe0,
+	0x98, 0xdb, 0xff, 0xfd, 0x4c, 0x13, 0xb6, 0xa4, 0xe4, 0x19, 0x15, 0x73,
+	0x36, 0xc3, 0xe3, 0x7f, 0x36, 0x73, 0x3d, 0x36, 0x1f, 0x08, 0xa3, 0xf3,
+	0x00, 0x9a, 0xca, 0x38, 0x86, 0xd2, 0x50, 0xc0, 0x7f, 0x14, 0x9a, 0xff,
+	0x0c, 0x75, 0x72, 0x8a, 0x72, 0x9e, 0xfe, 0x80, 0x9c, 0xa2, 0x43, 0xf8,
+	0xef, 0x49, 0xb8, 0x91, 0x09, 0xbd, 0x6f, 0xc5, 0xed, 0x35, 0x40, 0xaf,
+	0xff, 0xde, 0x84, 0x1f, 0x39, 0x7b, 0xbd, 0xf6, 0x27, 0xa5, 0x82, 0xfb,
+	0x7d, 0xa9, 0x78, 0x54, 0x45, 0x71, 0x7e, 0xf5, 0xb0, 0xcc, 0xed, 0xeb,
+	0x09, 0xb9, 0x17, 0xfd, 0xb2, 0x4a, 0x5e, 0xab, 0x32, 0x47, 0x1f, 0x94,
+	0x75, 0x79, 0xf5, 0xa2, 0xfd, 0xfc, 0x8d, 0x15, 0xe3, 0x9e, 0x48, 0xa0,
+	0xbd, 0x89, 0xd7, 0xb5, 0x05, 0x88, 0xd5, 0x44, 0x64, 0x3d, 0xc5, 0xeb,
+	0x6f, 0x1c, 0xf7, 0xf9, 0xcd, 0x71, 0xf8, 0xaf, 0x1c, 0x9f, 0x2a, 0x02,
+	0x39, 0x87, 0xfa, 0x51, 0x38, 0xe2, 0xf5, 0x6f, 0x4a, 0xcc, 0x21, 0x57,
+	0x8d, 0x5b, 0x4b, 0x9b, 0x2f, 0x58, 0x73, 0x22, 0x46, 0xee, 0x34, 0x65,
+	0x78, 0xff, 0x5a, 0x3d, 0x3e, 0xcb, 0x71, 0xea, 0x01, 0x6d, 0x4a, 0x1f,
+	0xef, 0x85, 0xfe, 0xff, 0xf6, 0x51, 0x8c, 0x91, 0xb4, 0x87, 0x66, 0x19,
+	0x83, 0xc4, 0x4a, 0xe6, 0x9e, 0xb5, 0x32, 0x96, 0x19, 0x05, 0x5e, 0x57,
+	0x1c, 0x97, 0xe0, 0x95, 0x9b, 0xba, 0x28, 0xc6, 0x3f, 0xcb, 0xea, 0x35,
+	0x7c, 0x85, 0xb5, 0x6b, 0xce, 0x59, 0xf6, 0xd4, 0x75, 0x4e, 0x2c, 0xa1,
+	0x1f, 0xb4, 0x90, 0xc4, 0x46, 0x7d, 0xa5, 0x8c, 0xcb, 0xb2, 0x8e, 0x74,
+	0xa6, 0x69, 0xd2, 0x9a, 0x60, 0x1e, 0xd4, 0x92, 0x95, 0x67, 0x3c, 0x0e,
+	0x08, 0x36, 0x3d, 0x6a, 0xca, 0x7d, 0xc1, 0xa8, 0x78, 0xcc, 0x41, 0x5b,
+	0x71, 0x1b, 0x7a, 0xfb, 0xdf, 0x2a, 0x55, 0x84, 0x07, 0x67, 0x70, 0x82,
+	0x1c, 0x61, 0x8b, 0x42, 0x3f, 0xac, 0x69, 0x30, 0x65, 0x0a, 0xde, 0x4a,
+	0x04, 0xcc, 0x40, 0x21, 0xa6, 0x9d, 0xe7, 0xdc, 0xbd, 0x93, 0x30, 0x3a,
+	0x9f, 0x29, 0x9c, 0xff, 0x3c, 0x33, 0x75, 0x5d, 0x5b, 0xec, 0xd1, 0xed,
+	0xde, 0x9e, 0xc0, 0x7b, 0x8e, 0x66, 0xbc, 0x77, 0xc8, 0x2c, 0xc1, 0xd2,
+	0x36, 0xb1, 0x53, 0xb7, 0x7b, 0x67, 0x02, 0x93, 0x4e, 0x5e, 0x3b, 0x6f,
+	0xce, 0xc6, 0x19, 0x4d, 0xd6, 0xb7, 0xa2, 0x12, 0x5f, 0x98, 0x33, 0x42,
+	0x2d, 0x8f, 0x78, 0xdd, 0xe5, 0xe3, 0xd0, 0xca, 0x8c, 0x2a, 0xb8, 0x23,
+	0x68, 0x75, 0x24, 0x75, 0xff, 0x0a, 0x47, 0x13, 0x56, 0x66, 0xfd, 0xe4,
+	0xcf, 0x39, 0xf2, 0x57, 0xfb, 0x59, 0x1b, 0x6d, 0xd2, 0xc9, 0x0a, 0x7b,
+	0x67, 0xa8, 0xcc, 0x09, 0x2b, 0x58, 0xf6, 0x6e, 0xad, 0xe9, 0x2f, 0xd4,
+	0xc8, 0x20, 0x6e, 0x6e, 0x76, 0xb7, 0x56, 0x8f, 0x17, 0x75, 0x82, 0x98,
+	0x87, 0x38, 0x55, 0x65, 0x40, 0xad, 0x8c, 0x88, 0x6e, 0xfc, 0xad, 0xc9,
+	0x31, 0x91, 0x55, 0x73, 0x0f, 0x8c, 0xbd, 0xe9, 0x46, 0x79, 0x94, 0xd8,
+	0xf9, 0x13, 0xdf, 0xff, 0x5d, 0xbd, 0xff, 0xe5, 0x16, 0x8c, 0x73, 0x19,
+	0xf2, 0xdf, 0xb6, 0x2d, 0xb7, 0x3b, 0x32, 0xfa, 0x79, 0x77, 0xc0, 0xb2,
+	0x18, 0x63, 0x7d, 0x50, 0x66, 0x73, 0x3c, 0xf4, 0x35, 0xc6, 0xb4, 0x0d,
+	0x99, 0x3f, 0x58, 0x9f, 0x74, 0xda, 0xfc, 0x81, 0x9c, 0xcb, 0x7f, 0xe7,
+	0x9b, 0xc6, 0xef, 0x2d, 0xe1, 0x32, 0x4e, 0x43, 0xb8, 0xd9, 0x1c, 0xec,
+	0x36, 0x9d, 0x2b, 0x96, 0x29, 0x0a, 0xfa, 0x8c, 0x06, 0xad, 0x8c, 0x31,
+	0xae, 0x97, 0x7e, 0x1d, 0xf3, 0x1a, 0xc1, 0x43, 0x60, 0xb9, 0xcc, 0xa6,
+	0x4d, 0xae, 0xc8, 0xbd, 0x5f, 0x18, 0x6d, 0x16, 0x2c, 0x98, 0xbc, 0xf3,
+	0x19, 0xa3, 0x9d, 0xdc, 0xed, 0xab, 0xe4, 0x7b, 0xf9, 0x7e, 0x72, 0xcc,
+	0x17, 0xff, 0x7d, 0x3f, 0x9b, 0x36, 0x95, 0x46, 0x84, 0xc3, 0xa5, 0xef,
+	0x3c, 0x6c, 0xac, 0xc0, 0x8e, 0xec, 0xbd, 0x5f, 0x38, 0xdf, 0x7c, 0x90,
+	0xff, 0xf3, 0x75, 0xd2, 0xa8, 0xfe, 0xc8, 0x3a, 0x15, 0x11, 0xe9, 0xc3,
+	0xcf, 0x3e, 0xee, 0xfd, 0x42, 0xe7, 0xa2, 0x51, 0xe6, 0x6a, 0xdb, 0xfe,
+	0xd3, 0x7e, 0x2a, 0x23, 0x92, 0xcb, 0xc5, 0xd6, 0xdd, 0x14, 0xb8, 0xf7,
+	0x0b, 0x99, 0x45, 0x83, 0xec, 0xe3, 0x73, 0x48, 0x14, 0xea, 0x44, 0x15,
+	0xc7, 0x47, 0xea, 0xa0, 0x2c, 0xb2, 0x6d, 0xdd, 0xfc, 0xc0, 0xef, 0xad,
+	0x86, 0x81, 0x12, 0x5b, 0x07, 0x2e, 0xea, 0xe0, 0x61, 0xd3, 0x99, 0x0b,
+	0x38, 0x6c, 0x1d, 0x74, 0xf9, 0xa8, 0x83, 0x24, 0x75, 0x90, 0x9b, 0x6e,
+	0x84, 0xdf, 0xa5, 0x0e, 0x1a, 0xc6, 0x36, 0x6d, 0x2a, 0x8b, 0xc0, 0xe9,
+	0x30, 0x5e, 0x71, 0x30, 0x0f, 0x52, 0x5d, 0xc6, 0x26, 0xea, 0xed, 0xde,
+	0x2f, 0xcc, 0x5d, 0x64, 0xeb, 0xfc, 0x0e, 0x77, 0xe0, 0x7e, 0xda, 0x4d,
+	0x2b, 0x6d, 0x7d, 0x2b, 0x8f, 0x36, 0x1e, 0x7d, 0x3c, 0x12, 0xd8, 0x9d,
+	0xdd, 0x40, 0x5d, 0xad, 0xe6, 0x38, 0xd6, 0x52, 0xae, 0x2e, 0xfe, 0x8e,
+	0xf1, 0x77, 0x9c, 0xbf, 0x65, 0x7e, 0xd4, 0x4b, 0xb2, 0xc5, 0x2e, 0xc9,
+	0xe6, 0xa0, 0x3c, 0x1e, 0x7b, 0xfd, 0xb1, 0x3c, 0x72, 0xfc, 0x8e, 0x9b,
+	0x02, 0x9d, 0x6c, 0x23, 0x59, 0x26, 0xcf, 0xf6, 0x5d, 0x46, 0xdc, 0xe7,
+	0x84, 0xc8, 0xa7, 0xb7, 0x77, 0x22, 0x47, 0xec, 0xfd, 0x5d, 0x1e, 0x7b,
+	0x29, 0x5b, 0x15, 0xe7, 0xe7, 0xf9, 0x45, 0xe9, 0x99, 0x1e, 0x03, 0x3e,
+	0xb7, 0xd1, 0x8f, 0x81, 0xec, 0x30, 0x75, 0x20, 0x76, 0xf2, 0x20, 0xf5,
+	0xd7, 0xcd, 0x3a, 0xa7, 0x18, 0xcb, 0xf4, 0x68, 0xfe, 0x39, 0xa3, 0x9d,
+	0x73, 0xd3, 0x5e, 0x0e, 0xb3, 0xdd, 0x34, 0x65, 0x2a, 0xa1, 0xfd, 0x2a,
+	0x10, 0x1e, 0x7e, 0x86, 0xed, 0x1f, 0x36, 0x7e, 0x5d, 0x71, 0x8a, 0x63,
+	0x8f, 0x7a, 0x37, 0x61, 0xa4, 0x49, 0x74, 0x15, 0xa3, 0xae, 0x74, 0x9f,
+	0x7f, 0x8a, 0x2e, 0x2f, 0xcb, 0x7b, 0x05, 0xb9, 0x88, 0x65, 0xbd, 0x66,
+	0xb4, 0xcc, 0x67, 0x12, 0xc8, 0xbc, 0x51, 0x62, 0x80, 0x65, 0x95, 0xd8,
+	0x7b, 0xc4, 0x62, 0xeb, 0xd6, 0x1b, 0x22, 0x6f, 0x63, 0xdb, 0x76, 0x1a,
+	0xe7, 0xa6, 0x0c, 0xfd, 0x39, 0xf0, 0x3b, 0x2b, 0x3a, 0x5d, 0xea, 0xcd,
+	0xc1, 0x39, 0xc6, 0xde, 0xa8, 0x16, 0xef, 0x74, 0x43, 0xd6, 0xa1, 0x9c,
+	0xe1, 0xd5, 0x88, 0xb7, 0xbb, 0x29, 0xd7, 0x66, 0xf2, 0xd6, 0xf3, 0x46,
+	0xde, 0x8f, 0x8f, 0x64, 0xf4, 0xe8, 0xa3, 0x3c, 0x27, 0x7f, 0x26, 0x0f,
+	0x2b, 0xc6, 0x29, 0xc9, 0xcd, 0x3d, 0x70, 0x32, 0x17, 0x6b, 0x75, 0xf4,
+	0x04, 0x5d, 0xa0, 0x2f, 0x96, 0xcb, 0xb8, 0xe2, 0x1c, 0xa3, 0xe0, 0xb6,
+	0x5b, 0xdb, 0x60, 0x63, 0x79, 0x7c, 0xbe, 0x0b, 0x1e, 0x6d, 0x63, 0xa6,
+	0x18, 0xe3, 0x3c, 0x5a, 0x47, 0x42, 0x70, 0x41, 0x9e, 0x97, 0x86, 0xa9,
+	0x67, 0xc1, 0x87, 0x7f, 0xb2, 0xf7, 0x93, 0x11, 0x23, 0xaa, 0x9c, 0x46,
+	0xbe, 0x5d, 0x8d, 0xed, 0xb6, 0x39, 0x34, 0x5c, 0xf6, 0x71, 0x5d, 0x6b,
+	0x73, 0xc8, 0x5e, 0x37, 0xa2, 0x57, 0xa6, 0x50, 0x2f, 0x8f, 0x73, 0x4b,
+	0x5c, 0x36, 0xce, 0xb1, 0x0d, 0xe6, 0x2c, 0x4b, 0x13, 0x1f, 0xee, 0x5f,
+	0xfa, 0x93, 0x7e, 0x7b, 0x6a, 0x54, 0xc8, 0x5e, 0x1b, 0x79, 0xe6, 0xd5,
+	0xc9, 0xbc, 0x6f, 0xea, 0x7e, 0x1b, 0xfd, 0x04, 0xdb, 0x3f, 0x1e, 0xe7,
+	0x7c, 0xce, 0x36, 0x64, 0x2f, 0x8e, 0x3c, 0x23, 0x9b, 0xba, 0xf7, 0x46,
+	0x64, 0xab, 0x2d, 0x17, 0x7e, 0x74, 0x98, 0x38, 0x19, 0x6d, 0x93, 0xfa,
+	0x96, 0xf5, 0xd3, 0x86, 0x20, 0x72, 0xd3, 0x9c, 0x18, 0x9e, 0x07, 0x0c,
+	0x25, 0x45, 0xd7, 0xe9, 0xcf, 0xaf, 0x37, 0xfe, 0xcd, 0x8a, 0xd6, 0x36,
+	0x6a, 0xbd, 0xaa, 0xac, 0xc5, 0x8c, 0xde, 0xd1, 0x67, 0xd4, 0x6b, 0x7d,
+	0x6a, 0xee, 0x18, 0xe3, 0xd0, 0x41, 0xf6, 0x51, 0x2e, 0x58, 0x51, 0x63,
+	0x44, 0xfb, 0x6b, 0x30, 0x0f, 0xfe, 0xfc, 0x7a, 0x4f, 0xfc, 0x9b, 0xaa,
+	0x11, 0x5c, 0x23, 0xdc, 0x55, 0x7d, 0xdf, 0x4a, 0xd3, 0x06, 0xbe, 0x34,
+	0xef, 0xa7, 0x65, 0x79, 0x6c, 0x8f, 0x76, 0xce, 0xe0, 0xbc, 0xbc, 0xbd,
+	0x40, 0xf7, 0x67, 0x14, 0xd1, 0x91, 0x70, 0xb3, 0x61, 0xe6, 0x89, 0x0a,
+	0xfe, 0x6d, 0x5e, 0x04, 0x47, 0xf8, 0xff, 0x67, 0xd7, 0xcb, 0x3e, 0x33,
+	0xcb, 0x0a, 0x06, 0x1a, 0xc2, 0x35, 0x1c, 0xc3, 0xb3, 0xbc, 0xdf, 0x9f,
+	0x7d, 0xd3, 0x3a, 0x3f, 0xc3, 0x18, 0x5c, 0xce, 0xa0, 0x38, 0x34, 0xae,
+	0x6b, 0x93, 0xea, 0xff, 0xed, 0xbe, 0x17, 0xe1, 0xa2, 0xe9, 0xcf, 0xbf,
+	0x10, 0x68, 0xd4, 0x92, 0x6a, 0x65, 0xb9, 0xe8, 0x75, 0x68, 0xfc, 0xe5,
+	0x42, 0x9c, 0xcf, 0x3f, 0xa3, 0x7c, 0xea, 0x92, 0x7e, 0xe4, 0x79, 0xeb,
+	0x1c, 0xda, 0x5c, 0x34, 0x4e, 0xbd, 0xbb, 0xa7, 0x71, 0xcc, 0x5f, 0x9a,
+	0x77, 0x87, 0x3d, 0xce, 0x5a, 0x63, 0x16, 0xc7, 0xa8, 0x40, 0x9b, 0xf7,
+	0xeb, 0xc2, 0x33, 0xe2, 0x16, 0xb2, 0xb4, 0xb4, 0xd5, 0x4a, 0x1f, 0x2a,
+	0x61, 0x9d, 0x1b, 0xcd, 0x47, 0x66, 0xf6, 0x34, 0xe9, 0xbe, 0x2f, 0xd1,
+	0x56, 0x43, 0xf3, 0x7e, 0x65, 0x45, 0x35, 0xa7, 0xf9, 0x38, 0x47, 0xbd,
+	0x39, 0x21, 0x65, 0x65, 0x5e, 0x8d, 0xe8, 0x3c, 0xe5, 0x1d, 0x0b, 0xd3,
+	0x03, 0xe1, 0x79, 0xf6, 0xf8, 0x81, 0xbb, 0x32, 0xc3, 0xd8, 0x9d, 0x92,
+	0x36, 0x15, 0x2c, 0x0f, 0xbc, 0x65, 0xf9, 0x67, 0x0c, 0x63, 0xa7, 0xc8,
+	0xf3, 0x91, 0x63, 0x09, 0x72, 0x2c, 0x5f, 0xc5, 0xf6, 0x94, 0xde, 0x1e,
+	0xcf, 0xfb, 0xdd, 0x0a, 0x59, 0x57, 0x93, 0x67, 0x06, 0xcc, 0xe7, 0xef,
+	0x4c, 0x04, 0x64, 0xdd, 0x69, 0xf4, 0xf3, 0x63, 0x01, 0xda, 0x78, 0xc2,
+	0x8b, 0x5c, 0x9b, 0x94, 0xa9, 0xd7, 0xc6, 0x90, 0x23, 0xc3, 0x94, 0xf5,
+	0xfa, 0x7d, 0xe5, 0xf9, 0xf5, 0x3a, 0x1a, 0xde, 0x74, 0x5d, 0x7b, 0x9d,
+	0x9c, 0x70, 0x85, 0x21, 0x6d, 0x28, 0x98, 0x1f, 0x98, 0x86, 0xc6, 0x35,
+	0xaf, 0xbc, 0x5a, 0x12, 0xc8, 0xfb, 0x6d, 0x9f, 0x61, 0x6c, 0x3b, 0x8d,
+	0x5f, 0x13, 0xab, 0x64, 0xaf, 0xc7, 0x5e, 0xa9, 0xc7, 0xb6, 0xe6, 0x21,
+	0xa3, 0x39, 0x31, 0x62, 0xc8, 0x5e, 0x45, 0xcb, 0xba, 0x29, 0xf0, 0x06,
+	0xfd, 0x8e, 0xf2, 0x64, 0x9d, 0x85, 0xba, 0x52, 0xa6, 0xb0, 0x8f, 0x42,
+	0x69, 0xf9, 0x82, 0xe8, 0xe4, 0x69, 0x33, 0xce, 0x8c, 0x43, 0xe2, 0xc3,
+	0xe8, 0xe7, 0xdf, 0x34, 0x84, 0x9b, 0xeb, 0xe6, 0x72, 0xa5, 0x9a, 0xf1,
+	0xd6, 0xe9, 0x1f, 0xb5, 0xd7, 0x45, 0xfc, 0xc4, 0x72, 0xe1, 0xa1, 0x92,
+	0x57, 0x3a, 0xf1, 0x8c, 0x51, 0x83, 0xa7, 0xb5, 0x3c, 0xa7, 0x23, 0x26,
+	0xe2, 0x07, 0x89, 0x86, 0x1c, 0x3d, 0x84, 0xdc, 0xd8, 0xe8, 0xbc, 0xa8,
+	0xfc, 0x9a, 0x39, 0x27, 0xf0, 0x7c, 0xa6, 0x0b, 0x0f, 0xcb, 0x73, 0x29,
+	0xa5, 0x7e, 0x45, 0xa3, 0x43, 0xfa, 0xeb, 0xc2, 0x2e, 0x7b, 0x9d, 0x69,
+	0xf4, 0xf3, 0x87, 0x8d, 0xaf, 0x14, 0x64, 0x15, 0xcc, 0x1f, 0xfd, 0xfc,
+	0x33, 0xc6, 0x13, 0xf6, 0xdc, 0xc9, 0x5e, 0x83, 0x7e, 0x53, 0xb0, 0xb1,
+	0x1c, 0x6a, 0x8d, 0x83, 0xba, 0xf8, 0x1c, 0x1c, 0x35, 0xa3, 0xb4, 0x3d,
+	0x59, 0x37, 0x5a, 0x07, 0x67, 0x8d, 0x8b, 0xbe, 0x79, 0x17, 0x5c, 0x35,
+	0xc2, 0xe9, 0x8b, 0x7c, 0x7b, 0x05, 0xef, 0x8b, 0x6e, 0x27, 0x6d, 0xdd,
+	0x3a, 0x89, 0x3d, 0x7d, 0x92, 0x3b, 0x1a, 0xd5, 0xd4, 0x91, 0xde, 0x2e,
+	0xeb, 0xbb, 0x95, 0xc4, 0x56, 0xc6, 0x51, 0x77, 0x35, 0xcb, 0xbc, 0x4b,
+	0xbd, 0x37, 0x0c, 0x54, 0x90, 0xeb, 0x5b, 0xd6, 0xfb, 0xe4, 0xfa, 0xf3,
+	0x03, 0x8d, 0x39, 0x83, 0xf1, 0x0f, 0xb7, 0xe8, 0x2b, 0xe4, 0x19, 0xf0,
+	0x7a, 0xe3, 0xa2, 0x15, 0x5b, 0x2b, 0x65, 0x74, 0x5f, 0x4c, 0x29, 0xf6,
+	0xb1, 0x00, 0xfe, 0x69, 0x16, 0x5c, 0x11, 0x59, 0x37, 0xd6, 0xcd, 0x28,
+	0x5a, 0xec, 0xb5, 0x69, 0x19, 0xbf, 0xfd, 0x5c, 0x03, 0xd1, 0x09, 0x17,
+	0x8c, 0xdc, 0x11, 0x99, 0xb3, 0x99, 0x16, 0x02, 0x0b, 0x7f, 0x67, 0xa5,
+	0xbd, 0x32, 0x3f, 0xf5, 0xb9, 0x26, 0x25, 0x17, 0xf4, 0x91, 0xfb, 0x3f,
+	0x06, 0xbd, 0x2d, 0x41, 0x5d, 0xb7, 0x86, 0x6c, 0xcc, 0xf3, 0x25, 0x60,
+	0xf3, 0x7d, 0xf3, 0x1c, 0x3e, 0x89, 0x4a, 0xe6, 0xc7, 0xf3, 0xc6, 0x56,
+	0xa3, 0xaa, 0x26, 0xea, 0x2b, 0xc7, 0x62, 0x9e, 0x6f, 0x65, 0xbe, 0x73,
+	0x2b, 0xaa, 0xd6, 0xc4, 0x90, 0xe0, 0xd8, 0x2b, 0x8d, 0x3b, 0x78, 0xad,
+	0x0f, 0xc9, 0x94, 0x8b, 0xe3, 0xf8, 0x89, 0x55, 0x35, 0x5d, 0x64, 0x33,
+	0xbd, 0x15, 0x06, 0x73, 0x76, 0x5b, 0x17, 0xc4, 0xf2, 0x94, 0x70, 0xa9,
+	0xc6, 0xe8, 0x16, 0xfc, 0x81, 0xb6, 0xab, 0xb7, 0x6f, 0x50, 0xe2, 0xb4,
+	0xd9, 0x04, 0x75, 0x2e, 0x65, 0x2d, 0x6b, 0x65, 0xe0, 0x67, 0xe5, 0xb2,
+	0x1f, 0x67, 0x57, 0xd6, 0xf0, 0xbf, 0x01, 0x75, 0x71, 0x29, 0xce, 0x5a,
+	0x71, 0xcd, 0x47, 0xbb, 0x54, 0xd7, 0x0a, 0xef, 0x5a, 0x16, 0xfa, 0x25,
+	0xef, 0x6b, 0x05, 0x3b, 0x4d, 0x17, 0x74, 0x39, 0x79, 0x67, 0x9f, 0xf1,
+	0x13, 0xfb, 0xba, 0xc3, 0xbe, 0xee, 0x2f, 0x5c, 0x4f, 0xf3, 0xfa, 0x8f,
+	0x79, 0x7d, 0x90, 0xba, 0x57, 0xaf, 0x90, 0xfa, 0x9b, 0x4c, 0xa9, 0x4f,
+	0x3a, 0x62, 0x24, 0x0a, 0xf3, 0x11, 0x5b, 0x97, 0x2f, 0xbb, 0x6d, 0x5d,
+	0xbe, 0x0d, 0x27, 0xdb, 0x88, 0x47, 0xcb, 0x61, 0xa2, 0x22, 0x20, 0x38,
+	0x2f, 0x72, 0x71, 0xee, 0xb2, 0x22, 0xd7, 0x56, 0xc6, 0xc5, 0x9e, 0xef,
+	0x95, 0x23, 0xde, 0x35, 0xcb, 0xb6, 0xc3, 0x34, 0x79, 0x8a, 0xee, 0x7f,
+	0x53, 0x69, 0xf1, 0xc9, 0x36, 0xa7, 0x14, 0x39, 0xef, 0x03, 0xa6, 0x33,
+	0xdc, 0xe4, 0x68, 0xc8, 0x95, 0xc2, 0x88, 0x5d, 0x54, 0xdc, 0x15, 0x82,
+	0x0f, 0x89, 0x4c, 0x0b, 0x33, 0xb4, 0x78, 0x90, 0xb9, 0x55, 0x30, 0x4b,
+	0xdd, 0x76, 0x10, 0xb1, 0x4f, 0xd8, 0xfb, 0x86, 0x9c, 0x13, 0xab, 0xd1,
+	0xa2, 0x3b, 0xd0, 0x10, 0x9e, 0xc5, 0x0c, 0x8d, 0x76, 0x69, 0x96, 0x3a,
+	0x74, 0xff, 0xcd, 0x58, 0x6d, 0xd7, 0x3b, 0x92, 0xc9, 0x75, 0x96, 0x73,
+	0x4e, 0xbf, 0x4e, 0x39, 0x76, 0x07, 0x44, 0x8e, 0xd1, 0x82, 0x1c, 0x31,
+	0xc6, 0x5c, 0x53, 0x5b, 0x15, 0x18, 0xbc, 0xa4, 0xb7, 0xef, 0xd9, 0x7a,
+	0xeb, 0xe3, 0x79, 0x29, 0x76, 0x90, 0x3f, 0x9e, 0x6a, 0xf2, 0xda, 0xfb,
+	0x6c, 0x18, 0x63, 0xa2, 0x25, 0xf6, 0xde, 0xb4, 0x93, 0xb7, 0xad, 0x37,
+	0xf4, 0xb0, 0xc3, 0xe6, 0xff, 0x6e, 0xc4, 0x6d, 0x6e, 0xed, 0x80, 0x70,
+	0xc7, 0x47, 0xed, 0x72, 0x2e, 0xfb, 0xb9, 0xe9, 0x63, 0x05, 0x7f, 0xa9,
+	0x60, 0x7c, 0xfb, 0xba, 0xfd, 0x3b, 0xcd, 0xb9, 0x75, 0xd1, 0x57, 0x8b,
+	0x31, 0x4a, 0xd6, 0x19, 0x1f, 0xb0, 0x7d, 0x3f, 0x8d, 0xef, 0xda, 0xff,
+	0x73, 0xf9, 0xbc, 0x0c, 0x7d, 0xf4, 0x09, 0x07, 0xdb, 0xe8, 0xb5, 0xf7,
+	0x83, 0xca, 0x3a, 0xc3, 0xf5, 0xd8, 0xc1, 0x51, 0xb9, 0x8d, 0x4e, 0xf4,
+	0x6b, 0x62, 0x13, 0xdd, 0x48, 0x6a, 0xa6, 0x37, 0xdb, 0x34, 0x35, 0xa7,
+	0x32, 0x71, 0xa8, 0xe9, 0xf7, 0x8c, 0xe5, 0x72, 0xed, 0xac, 0x75, 0xd8,
+	0x38, 0x15, 0xa2, 0x07, 0xdb, 0x39, 0x7f, 0x29, 0xe7, 0xd5, 0xde, 0x3b,
+	0x45, 0x99, 0xbf, 0x97, 0x90, 0x38, 0x3a, 0x07, 0x19, 0x53, 0x64, 0x73,
+	0xb6, 0xed, 0xe1, 0x9c, 0xf4, 0xa5, 0x02, 0xd1, 0x2b, 0x79, 0x6f, 0x82,
+	0xb1, 0xac, 0x97, 0xfa, 0x8c, 0xb5, 0x09, 0x8f, 0xdb, 0x8a, 0x83, 0xb4,
+	0xb1, 0x71, 0xd3, 0xb2, 0x8e, 0x10, 0x23, 0xaa, 0x1b, 0x54, 0xe4, 0xa6,
+	0x6f, 0x45, 0x8a, 0xb1, 0xe9, 0x88, 0xd1, 0xf2, 0xc9, 0x12, 0xc4, 0xfd,
+	0x8c, 0xe1, 0x3e, 0x59, 0x67, 0x7d, 0x80, 0xf3, 0x75, 0xca, 0x14, 0x7e,
+	0xe9, 0xbc, 0xb8, 0x0c, 0x46, 0x78, 0x89, 0xe3, 0x27, 0xd6, 0xa4, 0xc8,
+	0x9e, 0xea, 0xf9, 0xdf, 0x94, 0x61, 0x9b, 0x38, 0x6f, 0x35, 0xe7, 0xf8,
+	0xdd, 0x80, 0xbe, 0xe2, 0x07, 0xec, 0xa7, 0x71, 0xa0, 0xa5, 0x53, 0x64,
+	0x38, 0x1c, 0x72, 0xc6, 0x8e, 0x20, 0xd0, 0xb6, 0x55, 0x29, 0xe6, 0x10,
+	0xc0, 0x95, 0x63, 0x26, 0x8e, 0x36, 0x3d, 0x4b, 0xbe, 0x23, 0xf5, 0x4b,
+	0xf1, 0xa4, 0xf9, 0x5d, 0xab, 0x7e, 0xe6, 0x0b, 0xd6, 0x31, 0x43, 0xdd,
+	0x42, 0x6d, 0xc7, 0x2a, 0x21, 0x6b, 0xa3, 0xe9, 0x3b, 0xef, 0x0e, 0xe8,
+	0xe6, 0x1e, 0xb6, 0x75, 0x26, 0x71, 0x2a, 0xe8, 0x66, 0x5b, 0x8f, 0x99,
+	0x92, 0x43, 0x38, 0x57, 0xac, 0xe0, 0xdc, 0xf6, 0xa4, 0x02, 0xbe, 0x5d,
+	0x94, 0x4b, 0xf2, 0xbc, 0x75, 0x09, 0xd9, 0xd7, 0x3d, 0xca, 0xf1, 0x44,
+	0xb7, 0xb9, 0xd0, 0xf2, 0x40, 0x15, 0xed, 0xa7, 0x1a, 0x45, 0x5b, 0xd7,
+	0x7d, 0xc4, 0x3b, 0xdc, 0xcd, 0x32, 0xaf, 0x06, 0xe6, 0xe0, 0xf9, 0x50,
+	0xcb, 0x9a, 0x39, 0x70, 0xc6, 0x8e, 0x29, 0x81, 0x15, 0x5b, 0x95, 0xb8,
+	0x26, 0xb6, 0xb8, 0x39, 0xa3, 0x07, 0x5b, 0x21, 0xd8, 0x1d, 0xa3, 0x3e,
+	0xe6, 0xe0, 0xfd, 0x85, 0x22, 0x97, 0x33, 0x1c, 0x74, 0x04, 0xba, 0xbe,
+	0xcb, 0xf9, 0xad, 0x6a, 0xf0, 0xd9, 0xfb, 0xbd, 0xb2, 0xf6, 0xde, 0xec,
+	0x18, 0x92, 0xd9, 0xb3, 0xef, 0x1e, 0x36, 0xe0, 0x3c, 0xd1, 0xf4, 0xb0,
+	0x85, 0x69, 0x52, 0xb6, 0x45, 0xe6, 0xa1, 0x5d, 0xe6, 0xa1, 0x9c, 0xfe,
+	0x74, 0x13, 0xe5, 0xde, 0x62, 0xcb, 0x3d, 0x07, 0x23, 0xa6, 0xac, 0xb1,
+	0x39, 0xb5, 0xcd, 0x18, 0x24, 0x76, 0x06, 0x2e, 0xf6, 0xb0, 0x9f, 0x57,
+	0x29, 0x73, 0x03, 0xf5, 0x3e, 0xd9, 0x26, 0xfc, 0xb6, 0x0f, 0x03, 0xf6,
+	0x9e, 0x5f, 0xe9, 0x43, 0x41, 0x26, 0x20, 0x7d, 0xf4, 0x91, 0xef, 0xf5,
+	0x58, 0x93, 0xd3, 0xe5, 0x7a, 0x1a, 0x3b, 0x52, 0x51, 0x8d, 0xfe, 0x40,
+	0xbd, 0x43, 0x9f, 0x03, 0x7d, 0xe2, 0x75, 0x47, 0x94, 0x3e, 0x60, 0x7a,
+	0x2f, 0x12, 0x1b, 0x4e, 0xa0, 0xcb, 0x42, 0x8d, 0x6d, 0x0f, 0x3f, 0x1b,
+	0x35, 0xa6, 0xc9, 0xb3, 0x99, 0x60, 0x8e, 0x3a, 0x50, 0x39, 0x27, 0xa2,
+	0x83, 0x4a, 0xfa, 0xec, 0x58, 0x40, 0xf7, 0x3f, 0x2f, 0x6b, 0x41, 0x94,
+	0x67, 0x75, 0x7e, 0x0e, 0x7d, 0x3b, 0x14, 0xf1, 0xe9, 0x40, 0xdb, 0x7a,
+	0x5e, 0xdf, 0x4d, 0x79, 0xe4, 0x19, 0x5c, 0x9a, 0x68, 0xd6, 0x47, 0x3e,
+	0x7b, 0x70, 0x8a, 0x3c, 0x6e, 0x7b, 0xce, 0xe2, 0xe4, 0x02, 0xa5, 0x38,
+	0x6c, 0x0a, 0x7e, 0x6b, 0x18, 0xa1, 0x9d, 0x1e, 0xe2, 0x8c, 0x44, 0xbd,
+	0x2a, 0x4a, 0x0d, 0xc1, 0x80, 0xe9, 0xbc, 0xe6, 0xe2, 0xdc, 0x54, 0xe3,
+	0x98, 0x96, 0x66, 0x9c, 0x2c, 0x72, 0xbb, 0x3f, 0x58, 0x47, 0xbd, 0xc2,
+	0xcf, 0x64, 0x0d, 0x4e, 0x9e, 0x4f, 0xec, 0xa9, 0xc8, 0xef, 0x71, 0x74,
+	0x51, 0x27, 0xf9, 0xeb, 0xdf, 0xd3, 0x84, 0x23, 0x17, 0xcb, 0xff, 0xc2,
+	0x7a, 0xda, 0x2e, 0x2f, 0xe5, 0x5c, 0x36, 0x97, 0x2f, 0xb7, 0xcb, 0xfd,
+	0xc2, 0x7a, 0x56, 0x73, 0x4e, 0x29, 0x57, 0xdc, 0x3b, 0x77, 0xea, 0xcb,
+	0x2e, 0x62, 0x9e, 0x63, 0xde, 0x12, 0x3c, 0x6d, 0x9c, 0xad, 0xef, 0x68,
+	0xea, 0x66, 0x1c, 0x2b, 0x72, 0x2d, 0x59, 0x8f, 0xb3, 0xb0, 0xd7, 0x3c,
+	0xb5, 0xb7, 0x04, 0x3d, 0xe4, 0x8e, 0xc2, 0x05, 0x84, 0xa3, 0xca, 0x1a,
+	0xe1, 0xaa, 0xf2, 0xcb, 0x39, 0xaf, 0x1e, 0xf4, 0xab, 0xd7, 0xd9, 0xdc,
+	0x30, 0xaa, 0x0a, 0xee, 0x7e, 0x78, 0x8d, 0x4c, 0x62, 0x45, 0x31, 0x8f,
+	0x16, 0xee, 0xd2, 0x8d, 0x43, 0x46, 0x91, 0xb3, 0x9c, 0x7a, 0x58, 0x25,
+	0x4e, 0x0e, 0x99, 0x4b, 0x24, 0x36, 0xfb, 0x59, 0x3f, 0x18, 0x53, 0xa7,
+	0x72, 0x9b, 0x7b, 0x2b, 0x50, 0xd5, 0xb3, 0xcb, 0x01, 0xd9, 0x83, 0x9b,
+	0xdf, 0x1b, 0xe8, 0x57, 0xcb, 0x0a, 0xeb, 0x57, 0x1f, 0xc5, 0x35, 0x8a,
+	0x7d, 0x09, 0xdf, 0xf8, 0x7d, 0x81, 0xbb, 0xc9, 0xfe, 0x44, 0x91, 0xf3,
+	0x97, 0xd6, 0x1a, 0x4d, 0xd6, 0xca, 0x3e, 0x28, 0x7b, 0xb4, 0x20, 0x7b,
+	0x4c, 0xfd, 0xc8, 0xf6, 0x7c, 0xc2, 0x77, 0x2f, 0xb7, 0x69, 0xaf, 0xb1,
+	0x5b, 0x87, 0x4d, 0x59, 0xd7, 0x95, 0x7b, 0x0a, 0x7a, 0x88, 0x43, 0x51,
+	0xad, 0x85, 0x71, 0x5e, 0xf7, 0x6d, 0xe4, 0x7c, 0xc4, 0xbd, 0xb2, 0xb7,
+	0xb4, 0x18, 0x23, 0x4b, 0x91, 0x5f, 0x5f, 0x95, 0xbd, 0x8e, 0xf9, 0x35,
+	0x55, 0xda, 0x3d, 0x7a, 0x32, 0xbf, 0xb3, 0x72, 0x5e, 0x27, 0x63, 0xe1,
+	0xe5, 0x3d, 0xf0, 0x69, 0xea, 0x75, 0x84, 0xf7, 0x76, 0x5c, 0x5a, 0x77,
+	0x91, 0xb5, 0x27, 0x89, 0xbd, 0xbf, 0xb5, 0x3a, 0x3e, 0x50, 0x56, 0xfa,
+	0x2f, 0xae, 0xf1, 0x4f, 0x8f, 0x95, 0x46, 0x02, 0xe6, 0xd1, 0xc2, 0xda,
+	0x7e, 0x6b, 0x61, 0xcd, 0x6f, 0xd9, 0xa5, 0xb5, 0xfd, 0xb3, 0xb4, 0x25,
+	0x44, 0x77, 0x90, 0xdb, 0xc5, 0xd1, 0x87, 0xa3, 0x89, 0x46, 0x6d, 0x27,
+	0x34, 0xe4, 0x9f, 0x87, 0xf7, 0xe1, 0x58, 0x02, 0xd1, 0x92, 0xab, 0xaa,
+	0xc9, 0xb7, 0x10, 0x75, 0x18, 0x7d, 0x78, 0x2c, 0xd1, 0xb8, 0x62, 0x37,
+	0xc7, 0xe4, 0x5f, 0xd3, 0x87, 0x91, 0x44, 0xcb, 0x1d, 0x8c, 0x23, 0xfe,
+	0x8a, 0x3c, 0xd7, 0x69, 0x3f, 0x4c, 0x1c, 0xd8, 0x5e, 0x58, 0x1b, 0xeb,
+	0x48, 0xfc, 0x8a, 0xf2, 0xdb, 0x42, 0xb2, 0xde, 0xc7, 0x95, 0x3b, 0x8b,
+	0xde, 0xd4, 0x59, 0x6c, 0x1a, 0x54, 0xc4, 0xbe, 0xb0, 0x31, 0x2d, 0xf2,
+	0x9c, 0xc5, 0x86, 0xc1, 0x1f, 0xe2, 0xd0, 0xe0, 0x4c, 0xb4, 0xda, 0xba,
+	0xe9, 0xc2, 0xd6, 0x7d, 0x27, 0xb1, 0x27, 0x65, 0x61, 0x77, 0xc8, 0x83,
+	0x2d, 0x8f, 0x28, 0x58, 0x19, 0x38, 0x83, 0x9d, 0xfb, 0x2c, 0xcc, 0x0d,
+	0x75, 0x63, 0x85, 0x59, 0x81, 0xd2, 0x9a, 0x86, 0x4e, 0x95, 0xe5, 0x3a,
+	0x46, 0xba, 0x94, 0x4f, 0x73, 0xdc, 0x39, 0xd7, 0x71, 0x62, 0x81, 0x0a,
+	0x9f, 0x01, 0xad, 0x3a, 0x12, 0x55, 0x6e, 0xcf, 0xb6, 0x2a, 0xed, 0x23,
+	0x36, 0x9f, 0x52, 0x6e, 0xce, 0x96, 0x55, 0x4a, 0x4c, 0x3f, 0x14, 0x3a,
+	0x8b, 0x74, 0xda, 0xf2, 0xe4, 0xfd, 0xe5, 0x2c, 0xb9, 0x83, 0xe4, 0x1c,
+	0x26, 0x6d, 0xea, 0xe3, 0xf6, 0xf6, 0x8b, 0xdd, 0x4d, 0xe2, 0xb5, 0xe1,
+	0x73, 0x38, 0x37, 0xfc, 0xcf, 0x58, 0xaa, 0x49, 0x9e, 0x69, 0x75, 0x3b,
+	0x23, 0x96, 0x75, 0xa0, 0x39, 0x6e, 0x4d, 0x37, 0xde, 0x63, 0xdb, 0x55,
+	0x98, 0x11, 0x79, 0x11, 0xbb, 0x35, 0xb6, 0x95, 0x3a, 0x8e, 0xbd, 0x29,
+	0xd9, 0xf7, 0xf4, 0x39, 0xf8, 0x52, 0x39, 0xb3, 0x16, 0xd1, 0xbd, 0xb5,
+	0xd0, 0xb7, 0xd5, 0x38, 0x8c, 0xae, 0x7f, 0x52, 0x9a, 0x70, 0x73, 0xf6,
+	0x1c, 0xde, 0x1e, 0xb6, 0x9f, 0x69, 0xb6, 0x7f, 0x5b, 0xb1, 0xba, 0x77,
+	0x87, 0xf4, 0x15, 0xff, 0x4d, 0x89, 0xc6, 0xcb, 0x69, 0x53, 0x65, 0xcc,
+	0x09, 0x6e, 0x19, 0x96, 0x7c, 0xb9, 0x1d, 0xee, 0x01, 0x3d, 0xb7, 0x8c,
+	0x3c, 0xfb, 0x4b, 0x0b, 0xe2, 0xb3, 0xa6, 0xd1, 0x2e, 0x1d, 0x8a, 0x1e,
+	0x34, 0xd4, 0x6e, 0x3c, 0x65, 0xea, 0x13, 0xbf, 0x75, 0x18, 0xe9, 0x6f,
+	0xa1, 0x09, 0x6b, 0xb3, 0x7a, 0x7a, 0x31, 0xf3, 0xb0, 0x9d, 0x49, 0x13,
+	0xa9, 0xa4, 0xde, 0xde, 0xe5, 0xe8, 0xc7, 0x3d, 0x81, 0xfa, 0x6d, 0xef,
+	0x92, 0xcb, 0x79, 0x88, 0x29, 0xc9, 0xf1, 0x0c, 0xf3, 0xdc, 0x7e, 0x6c,
+	0x7d, 0x24, 0x82, 0x2d, 0x07, 0x4c, 0xf4, 0x25, 0x33, 0x94, 0xed, 0x47,
+	0xb4, 0x6d, 0xcb, 0x6a, 0x0b, 0xc5, 0x57, 0xa9, 0x08, 0x44, 0xd9, 0x67,
+	0x8b, 0x1a, 0x09, 0xf8, 0x55, 0x85, 0xd1, 0x7f, 0xdc, 0x89, 0x5e, 0x96,
+	0x19, 0x48, 0xd1, 0xe6, 0x64, 0x6f, 0x02, 0x7d, 0x72, 0x64, 0xcc, 0x87,
+	0x23, 0x63, 0x1e, 0xa4, 0xc7, 0x34, 0x1e, 0xe5, 0xf8, 0xda, 0x90, 0x45,
+	0x2c, 0xf7, 0xe2, 0xc9, 0xc3, 0x6e, 0x6c, 0xdf, 0xef, 0xc1, 0x9c, 0xc8,
+	0x0c, 0x1c, 0x3e, 0x5c, 0x8e, 0x83, 0xbc, 0x5e, 0xb3, 0xd0, 0x8f, 0x6f,
+	0xf0, 0xfa, 0xe0, 0x7e, 0x17, 0xe7, 0x61, 0x2e, 0x8e, 0xd3, 0xb0, 0xd3,
+	0x63, 0x15, 0x48, 0x0d, 0xd1, 0xe4, 0xc9, 0x59, 0xdf, 0x64, 0x86, 0x71,
+	0xf4, 0x30, 0x63, 0xe3, 0x23, 0x26, 0x12, 0xec, 0x67, 0x0f, 0x75, 0xd5,
+	0x47, 0x5c, 0xdb, 0x3a, 0x26, 0x18, 0xbf, 0x16, 0x37, 0x0d, 0xe8, 0x2b,
+	0x5a, 0x15, 0x23, 0xba, 0x48, 0x09, 0xca, 0xbb, 0x23, 0x6e, 0x95, 0xd7,
+	0x5a, 0x12, 0xba, 0xd9, 0x8a, 0x6e, 0x9c, 0xe6, 0xb8, 0xff, 0x9a, 0x7e,
+	0xbb, 0xc4, 0xa1, 0xf7, 0xdf, 0xa8, 0x9e, 0xc4, 0xde, 0x6c, 0x4e, 0x9e,
+	0xa9, 0x23, 0x7c, 0xe8, 0x24, 0xf9, 0xdb, 0x53, 0xc4, 0x9f, 0x57, 0x2d,
+	0x9f, 0xa1, 0xe2, 0xe6, 0x87, 0x8c, 0xf0, 0x7b, 0x4a, 0x60, 0xdb, 0x2f,
+	0xa9, 0x83, 0x4f, 0x1f, 0x56, 0xf1, 0xa9, 0xbd, 0x4b, 0x90, 0x09, 0x45,
+	0xb1, 0x67, 0x91, 0x8a, 0x55, 0x8f, 0x9c, 0x24, 0xee, 0x9f, 0xb5, 0x79,
+	0x72, 0x2e, 0xf3, 0x20, 0x82, 0x03, 0xb2, 0xee, 0xef, 0x66, 0xfc, 0xae,
+	0xc4, 0x99, 0xc1, 0x6e, 0xfa, 0x6d, 0x25, 0x4e, 0xa5, 0x4f, 0xd2, 0x1e,
+	0x2b, 0xf1, 0xd4, 0xa0, 0x31, 0xf1, 0x9a, 0xa3, 0x12, 0x4f, 0xf2, 0x7c,
+	0x2f, 0xcf, 0x17, 0x0e, 0x19, 0x83, 0x5d, 0x6a, 0x25, 0x16, 0x1c, 0x6a,
+	0xc6, 0x60, 0xf2, 0xa4, 0xbd, 0xbf, 0x6a, 0xdb, 0x58, 0x53, 0x41, 0xf7,
+	0xa2, 0x73, 0x2f, 0xee, 0xa5, 0xae, 0xee, 0xd9, 0xdb, 0xcd, 0xfe, 0x7c,
+	0xd4, 0xf9, 0x49, 0x7c, 0x8d, 0x79, 0xdd, 0xee, 0xa4, 0x0f, 0x17, 0x52,
+	0x86, 0xff, 0x36, 0xc5, 0x30, 0xcb, 0x94, 0x80, 0x76, 0x06, 0x3e, 0x9c,
+	0xcb, 0x96, 0xa3, 0x77, 0xa8, 0x0e, 0xaf, 0xd1, 0x3e, 0x1f, 0xde, 0x7f,
+	0xd2, 0xb6, 0xff, 0x83, 0xa9, 0xd9, 0x78, 0x72, 0xd4, 0x64, 0xdb, 0x32,
+	0x4f, 0xd3, 0xec, 0x3d, 0x4b, 0xae, 0x94, 0xf8, 0x46, 0x74, 0x2f, 0xcd,
+	0x82, 0x98, 0x78, 0x12, 0xd9, 0x41, 0xbd, 0xff, 0x16, 0x55, 0x78, 0xb5,
+	0x4a, 0x5d, 0x3a, 0x30, 0xa9, 0xe9, 0xf1, 0x1a, 0x35, 0x3e, 0xc8, 0xfc,
+	0x35, 0x5e, 0x4b, 0x9d, 0x3c, 0x39, 0xe8, 0x44, 0xc3, 0x42, 0x95, 0xd7,
+	0xe3, 0x17, 0x19, 0xdb, 0xe2, 0x73, 0x54, 0x13, 0x07, 0x6d, 0x59, 0x11,
+	0x2f, 0x21, 0xb7, 0xaf, 0x5e, 0x58, 0xcf, 0xf8, 0xe5, 0x10, 0xdb, 0x8b,
+	0x55, 0xaa, 0x4e, 0xea, 0xfd, 0x1c, 0x46, 0x69, 0xd7, 0x8f, 0xf1, 0x38,
+	0x3e, 0x6c, 0x75, 0xaf, 0x24, 0xe7, 0x9e, 0x1b, 0xb0, 0xba, 0x6f, 0x31,
+	0x0d, 0x5f, 0x89, 0x1a, 0x88, 0x7e, 0x09, 0xe7, 0x70, 0x6c, 0x54, 0xca,
+	0xc8, 0x73, 0xf9, 0x18, 0x86, 0x93, 0x56, 0xf7, 0x5e, 0x73, 0x2e, 0x9a,
+	0xed, 0xdc, 0xf8, 0x37, 0x85, 0xfd, 0xdd, 0xe2, 0x47, 0xb2, 0x56, 0x32,
+	0x89, 0x5f, 0xb2, 0x9d, 0xf7, 0x86, 0xab, 0x31, 0xad, 0x56, 0xfc, 0xe0,
+	0x2c, 0xde, 0x1a, 0x7c, 0x11, 0x17, 0x06, 0x2d, 0x2c, 0x08, 0x59, 0x70,
+	0x86, 0x1a, 0xcd, 0x56, 0x75, 0x31, 0x31, 0x42, 0xc1, 0x4d, 0xf3, 0x7e,
+	0x88, 0x77, 0xe8, 0xff, 0xab, 0xe6, 0x59, 0xb6, 0x2c, 0x03, 0x58, 0x68,
+	0xed, 0x99, 0x2e, 0x7e, 0x63, 0xda, 0xef, 0x6f, 0x7d, 0x7c, 0x1e, 0x2c,
+	0x7b, 0xbf, 0x8b, 0xb9, 0xf0, 0x39, 0x8c, 0x0c, 0x1b, 0xd1, 0x4d, 0x45,
+	0x39, 0x07, 0xcf, 0x51, 0x07, 0x76, 0x7c, 0x7a, 0xa4, 0x06, 0x0d, 0x17,
+	0x99, 0x35, 0x5e, 0x37, 0x87, 0xb6, 0xb3, 0x60, 0x61, 0xc0, 0x5c, 0xae,
+	0x5e, 0xa0, 0x9f, 0x9e, 0xc3, 0x91, 0x74, 0x11, 0xaf, 0x7d, 0x68, 0xa5,
+	0x9f, 0xdf, 0x68, 0xe3, 0xa2, 0x17, 0x2d, 0xa9, 0x13, 0xf6, 0xfa, 0xc3,
+	0x71, 0xe2, 0xe3, 0x60, 0x4a, 0xca, 0x68, 0x18, 0xcd, 0xb6, 0x12, 0x1b,
+	0xa2, 0xf8, 0x87, 0x6c, 0x84, 0xf8, 0x10, 0x26, 0x3e, 0x34, 0x13, 0x1f,
+	0x4c, 0xe2, 0x43, 0x13, 0xf1, 0x21, 0x48, 0x7c, 0x30, 0xec, 0xb5, 0xf5,
+	0xf4, 0xd1, 0x17, 0x51, 0x32, 0x74, 0x16, 0x2e, 0xfa, 0xc0, 0x19, 0xd3,
+	0x22, 0x3f, 0x69, 0xd4, 0x36, 0x60, 0xae, 0x12, 0xd5, 0xbc, 0x48, 0xb3,
+	0xbd, 0xb2, 0x21, 0x8d, 0x63, 0xb1, 0x10, 0x0c, 0xd5, 0x87, 0xfb, 0x89,
+	0xd5, 0xbf, 0x32, 0x1a, 0xfb, 0xbd, 0x68, 0x3c, 0x38, 0x1d, 0xc6, 0xe0,
+	0x42, 0x75, 0x9e, 0x12, 0xfd, 0x8c, 0x97, 0xe3, 0xac, 0xc5, 0xec, 0xfd,
+	0x1a, 0xe6, 0xf0, 0xf8, 0xfb, 0x54, 0xfd, 0xc4, 0xab, 0x0e, 0x78, 0x67,
+	0x92, 0xee, 0xcc, 0x22, 0x13, 0x20, 0xab, 0xf5, 0xfa, 0x70, 0xe5, 0xf1,
+	0x73, 0xaa, 0x82, 0xdc, 0x67, 0x24, 0xe6, 0x35, 0x06, 0xfb, 0x54, 0x55,
+	0xd6, 0x92, 0x88, 0xe1, 0x3c, 0x54, 0x44, 0xc8, 0x22, 0xea, 0x98, 0x5f,
+	0x58, 0x1b, 0xcc, 0x32, 0xec, 0x68, 0x22, 0xe7, 0xf4, 0xea, 0x27, 0x24,
+	0x46, 0xcd, 0x64, 0x8c, 0x28, 0x4f, 0xc6, 0x37, 0xcf, 0x84, 0x07, 0x65,
+	0x49, 0xcb, 0xfa, 0x7a, 0x48, 0x83, 0x27, 0x12, 0x88, 0x6e, 0x65, 0x1a,
+	0xf9, 0x99, 0x86, 0x30, 0x6e, 0xca, 0x9e, 0xc0, 0x10, 0xc7, 0xb7, 0x32,
+	0x5b, 0x7c, 0x5f, 0xeb, 0xe3, 0xff, 0x2e, 0xbf, 0xf7, 0x75, 0xe5, 0xc1,
+	0x99, 0x30, 0xb4, 0xfb, 0xd4, 0xde, 0x2a, 0x72, 0xf0, 0xe3, 0x8c, 0x7b,
+	0xca, 0xe4, 0x67, 0x15, 0xb4, 0x0f, 0xc5, 0x31, 0x2d, 0xf4, 0x03, 0x25,
+	0x56, 0xab, 0xfb, 0xfd, 0x4a, 0x2d, 0x3e, 0xbb, 0x9f, 0xba, 0x5e, 0xf0,
+	0x7d, 0x8f, 0xbc, 0x9b, 0xf5, 0xad, 0xa3, 0xa2, 0xdb, 0xfa, 0xf4, 0x5e,
+	0x8e, 0xe3, 0xf9, 0x79, 0x27, 0x04, 0x27, 0x9f, 0xa8, 0x84, 0xe3, 0x89,
+	0x19, 0x88, 0x22, 0x3c, 0xef, 0xca, 0xf6, 0x7f, 0x56, 0x45, 0x2f, 0x76,
+	0xae, 0x38, 0x28, 0xa4, 0xe8, 0x3e, 0xe5, 0x04, 0x0e, 0x12, 0x83, 0x0f,
+	0x67, 0x4f, 0x52, 0x97, 0xc7, 0x0b, 0xf9, 0xd2, 0x5a, 0x24, 0x06, 0x64,
+	0x3f, 0xfd, 0x59, 0xcc, 0x1e, 0xd2, 0xdb, 0x76, 0x29, 0x46, 0x70, 0x95,
+	0x72, 0x16, 0xb3, 0x86, 0x82, 0x9c, 0x4b, 0x0d, 0xcb, 0x93, 0x45, 0xfc,
+	0x14, 0x0c, 0x5e, 0x4b, 0x0c, 0xb6, 0x96, 0xbc, 0x66, 0xc6, 0x99, 0xe3,
+	0xe8, 0xa6, 0x53, 0xd1, 0xdb, 0xe7, 0x29, 0x71, 0xc6, 0x50, 0xe3, 0x62,
+	0x07, 0xeb, 0x78, 0x86, 0x9a, 0xec, 0xbd, 0xc3, 0x2b, 0x38, 0x6f, 0x2f,
+	0x2e, 0xb4, 0xb0, 0x68, 0xa1, 0x7e, 0xb0, 0xcc, 0x11, 0xbd, 0xaf, 0x06,
+	0xb9, 0xae, 0xe9, 0xb4, 0x9b, 0x7b, 0x16, 0xe8, 0xe1, 0x1f, 0x10, 0x77,
+	0x89, 0xd3, 0xe8, 0x65, 0xdc, 0xd9, 0xc0, 0x58, 0x54, 0x1e, 0xd1, 0xfb,
+	0x99, 0xa3, 0xbe, 0x77, 0x97, 0x23, 0x1a, 0x92, 0x77, 0x30, 0xfe, 0x16,
+	0x4b, 0xe0, 0x0e, 0x55, 0x11, 0x07, 0xf5, 0xdc, 0x8b, 0xd0, 0x0f, 0xae,
+	0x43, 0x3f, 0x7e, 0x4c, 0x7e, 0x37, 0xfd, 0xaa, 0x1c, 0x31, 0x2a, 0x83,
+	0x87, 0xb3, 0x27, 0x39, 0x86, 0x27, 0xb0, 0x2f, 0xbb, 0x5b, 0x49, 0xd7,
+	0xca, 0x33, 0x4c, 0x45, 0xde, 0x7d, 0x89, 0x56, 0x29, 0x9f, 0x47, 0x65,
+	0xe8, 0x71, 0x2b, 0x5d, 0xa3, 0xa2, 0x3a, 0x14, 0xc4, 0x4d, 0xc9, 0x38,
+	0x1c, 0x91, 0x77, 0x2d, 0x79, 0x37, 0x73, 0xcb, 0xb8, 0x81, 0x1b, 0x93,
+	0xe5, 0x88, 0x1d, 0xb2, 0xac, 0xfe, 0x66, 0x27, 0x36, 0x8e, 0x37, 0x61,
+	0xf9, 0xd0, 0xd7, 0xac, 0x39, 0x8c, 0x39, 0x7f, 0xbc, 0xd6, 0x83, 0xbb,
+	0x0e, 0x79, 0xd0, 0x91, 0x8c, 0xc2, 0x17, 0xa9, 0xe0, 0xef, 0x80, 0xb9,
+	0x14, 0xc6, 0xc4, 0x04, 0x8c, 0xfe, 0x1b, 0x1c, 0x81, 0x63, 0x61, 0xd5,
+	0x83, 0xff, 0x4a, 0x1c, 0x5f, 0x49, 0xdc, 0x89, 0x8d, 0x5b, 0xa8, 0x8e,
+	0x78, 0xb1, 0x99, 0xf5, 0x3f, 0xc5, 0xb9, 0x7f, 0x67, 0xd1, 0x71, 0x62,
+	0x81, 0x11, 0x1b, 0x57, 0x34, 0x6c, 0x1d, 0x77, 0x53, 0x57, 0x6e, 0xc4,
+	0x8e, 0xd4, 0xe2, 0xc6, 0xfd, 0x7e, 0xdc, 0x35, 0xee, 0x41, 0x4b, 0xd2,
+	0x5a, 0x72, 0xdc, 0x8c, 0xaf, 0xd1, 0x60, 0xa0, 0x63, 0xdc, 0x8b, 0x3b,
+	0x93, 0xba, 0x6f, 0x15, 0x73, 0xfe, 0x51, 0x33, 0x88, 0xff, 0x31, 0xee,
+	0xc3, 0xed, 0xc9, 0x53, 0x92, 0x47, 0x2e, 0x75, 0x32, 0xf6, 0x3c, 0x30,
+	0x5e, 0x87, 0x35, 0x49, 0xfd, 0xe2, 0x04, 0xb9, 0x5d, 0xf7, 0x11, 0x13,
+	0xf7, 0x8d, 0xab, 0x68, 0x67, 0x3b, 0x9f, 0x4d, 0xce, 0x46, 0xd7, 0x91,
+	0x66, 0xca, 0xb0, 0x10, 0x2b, 0x87, 0x9c, 0x30, 0xc9, 0xe2, 0x71, 0x2b,
+	0xd0, 0x46, 0xff, 0x48, 0xa4, 0x1e, 0xc4, 0x9e, 0x01, 0x13, 0x77, 0x8f,
+	0xcb, 0xf9, 0x49, 0xfb, 0x7d, 0xb5, 0xf7, 0x1e, 0x59, 0x88, 0x4f, 0x0f,
+	0xc9, 0x3e, 0xc5, 0x52, 0xa4, 0xd7, 0x28, 0xb8, 0x93, 0xd7, 0x77, 0xa5,
+	0xe2, 0xc4, 0x72, 0x20, 0xb4, 0x37, 0x70, 0xac, 0x86, 0x9c, 0x61, 0xd1,
+	0x23, 0xf9, 0xeb, 0x0f, 0x13, 0xe7, 0xcb, 0x88, 0xf3, 0x15, 0xe4, 0xb0,
+	0x37, 0x8c, 0x9c, 0xc4, 0x43, 0xc4, 0xe5, 0x13, 0x43, 0xdd, 0x8c, 0x3b,
+	0x95, 0xf8, 0x06, 0xe3, 0x40, 0x92, 0xe7, 0x67, 0xf7, 0x1a, 0x5d, 0x65,
+	0xc4, 0xe9, 0x1f, 0x10, 0x7f, 0xfb, 0x89, 0x19, 0xf7, 0x24, 0xe9, 0xf6,
+	0x7b, 0x99, 0x03, 0x5c, 0x15, 0x9d, 0xef, 0x61, 0x8e, 0xb5, 0x4a, 0x09,
+	0xf8, 0xde, 0x00, 0xad, 0xee, 0x91, 0x5a, 0xb4, 0xec, 0x97, 0x32, 0x82,
+	0x5f, 0x2a, 0xd4, 0xc3, 0x4e, 0xea, 0xfc, 0x24, 0xac, 0x41, 0x07, 0xc7,
+	0x5b, 0x6f, 0x92, 0x81, 0xe3, 0xa7, 0xa6, 0xae, 0xfd, 0x03, 0xd4, 0xfc,
+	0xde, 0xc2, 0x99, 0xcd, 0x68, 0x35, 0x4c, 0x1e, 0x27, 0x71, 0x6e, 0xd0,
+	0x30, 0x0f, 0xc1, 0x89, 0x57, 0xc9, 0xf3, 0x26, 0x67, 0x32, 0x66, 0x1a,
+	0xe2, 0x87, 0x19, 0x8e, 0x47, 0x95, 0xbc, 0x04, 0x8e, 0x31, 0xe0, 0xad,
+	0x47, 0x96, 0x70, 0x5c, 0x12, 0x4b, 0x25, 0xde, 0x65, 0x28, 0xeb, 0x12,
+	0xac, 0xa6, 0x3e, 0x5a, 0x93, 0x2a, 0x32, 0x47, 0x22, 0xb8, 0xfb, 0x40,
+	0x3e, 0x0e, 0x6f, 0x0b, 0xc5, 0x6f, 0x61, 0x1c, 0x0e, 0x97, 0x33, 0x0e,
+	0xbb, 0x22, 0x22, 0x9b, 0x13, 0x23, 0x8c, 0xdb, 0x3b, 0x52, 0x61, 0xac,
+	0xe0, 0x1c, 0x4e, 0x64, 0xd8, 0x6f, 0xb2, 0x0e, 0x67, 0x32, 0x1e, 0xc6,
+	0x2c, 0x8d, 0x07, 0x51, 0x6d, 0x74, 0x06, 0x0f, 0x3f, 0x8f, 0xb9, 0x3c,
+	0x0c, 0xfb, 0xda, 0x86, 0xa4, 0x82, 0x78, 0x9b, 0x62, 0xf3, 0xf9, 0x33,
+	0x19, 0xc1, 0x66, 0x59, 0xcb, 0xfc, 0x6f, 0x55, 0xf2, 0x0e, 0xc9, 0x60,
+	0xea, 0x87, 0xa8, 0xa6, 0xfe, 0xab, 0x0a, 0x38, 0xf4, 0xb3, 0x90, 0xe0,
+	0x6e, 0x3d, 0x71, 0x57, 0xde, 0x03, 0xb0, 0xac, 0xb5, 0x81, 0xa9, 0x78,
+	0xf4, 0xff, 0xfe, 0x31, 0x6a, 0xbf, 0x2b, 0x21, 0x98, 0x44, 0xfc, 0x4b,
+	0x11, 0xff, 0x38, 0x86, 0x9e, 0xeb, 0x89, 0x81, 0x94, 0xe9, 0xef, 0x52,
+	0xc4, 0x40, 0xe2, 0xf4, 0x13, 0xc4, 0xe9, 0x6f, 0x12, 0xa7, 0x1f, 0x27,
+	0x4e, 0x7f, 0x83, 0x98, 0x90, 0x5f, 0xd3, 0x5b, 0x21, 0xcf, 0x5f, 0x38,
+	0x1f, 0xef, 0xda, 0x6b, 0x8b, 0xd3, 0xa9, 0xab, 0xd9, 0x43, 0x0a, 0xe6,
+	0x18, 0xfa, 0x31, 0xb1, 0xfb, 0x1f, 0x73, 0x9e, 0xfc, 0xd3, 0xea, 0xec,
+	0x77, 0x59, 0x5a, 0x93, 0x7d, 0x70, 0x27, 0x1b, 0xb5, 0x7e, 0xd8, 0xef,
+	0x0b, 0x9b, 0xc2, 0x45, 0x4b, 0x92, 0x1b, 0xe0, 0x48, 0x36, 0x1e, 0x3b,
+	0x2d, 0xcf, 0x79, 0x67, 0x48, 0x5e, 0xbf, 0x01, 0xce, 0xa4, 0x7e, 0x2c,
+	0x4e, 0x59, 0x96, 0xf3, 0x9e, 0x2b, 0xd9, 0x68, 0xbe, 0x01, 0x1b, 0xdb,
+	0xfc, 0x93, 0xf6, 0xbd, 0xfa, 0xf7, 0x1e, 0xa2, 0xbe, 0x72, 0x6c, 0x33,
+	0x93, 0x92, 0xbd, 0xb1, 0x75, 0x78, 0x2c, 0x2b, 0xbf, 0x1b, 0xdb, 0x13,
+	0xea, 0x31, 0xc4, 0xa6, 0x0b, 0x1f, 0x0f, 0xe3, 0xe6, 0xa4, 0x87, 0x76,
+	0x10, 0x47, 0x15, 0x7d, 0xeb, 0x8b, 0xe3, 0xcd, 0xf4, 0xb5, 0xaf, 0x59,
+	0x5a, 0x24, 0xd0, 0x3e, 0x4e, 0xce, 0xb3, 0x65, 0x7c, 0x09, 0x96, 0x0d,
+	0x59, 0x96, 0x67, 0xb1, 0x11, 0xde, 0xaa, 0xf8, 0xe1, 0xa2, 0x0f, 0x3a,
+	0xe8, 0x57, 0x9b, 0x0e, 0x05, 0xb4, 0x37, 0x88, 0xa7, 0x9d, 0xcd, 0x27,
+	0x68, 0x1f, 0xc6, 0xc5, 0x15, 0xc4, 0x52, 0x67, 0x24, 0xc0, 0x3c, 0xd1,
+	0x43, 0xdb, 0xf7, 0xe2, 0x62, 0x42, 0xfc, 0x4b, 0xef, 0xfa, 0x07, 0xe6,
+	0x26, 0x5d, 0xf4, 0x8d, 0x5f, 0x24, 0xea, 0xe8, 0x03, 0x6e, 0xbc, 0x95,
+	0x30, 0xe8, 0x6f, 0x1e, 0xbc, 0x93, 0x68, 0x62, 0x5f, 0x41, 0x96, 0xf1,
+	0xe3, 0xde, 0xf1, 0x30, 0xfd, 0xec, 0x7a, 0x1e, 0xf2, 0x6e, 0x64, 0x7d,
+	0xfc, 0x5b, 0x4a, 0xfd, 0xe0, 0x6c, 0xb5, 0x06, 0xd1, 0x5a, 0x0d, 0x7f,
+	0x39, 0xfe, 0x17, 0xf8, 0x17, 0xc6, 0xed, 0x8d, 0x49, 0x70, 0x0e, 0x11,
+	0x22, 0x0f, 0x9c, 0x38, 0x62, 0xbf, 0x33, 0xd5, 0x18, 0x9d, 0xe7, 0xd0,
+	0x99, 0xdb, 0xea, 0xb9, 0x0b, 0x0e, 0x27, 0xfb, 0x24, 0x2b, 0x66, 0xd9,
+	0x5f, 0x0c, 0x96, 0xe3, 0xbe, 0x43, 0x27, 0xe8, 0x23, 0x25, 0x58, 0xf0,
+	0x90, 0x1b, 0x7f, 0x79, 0x24, 0x43, 0xee, 0xa0, 0x62, 0x96, 0xbc, 0x53,
+	0x42, 0xa2, 0x30, 0x6b, 0x24, 0x82, 0xcd, 0x07, 0x32, 0x18, 0x2a, 0xf0,
+	0xbc, 0x50, 0x28, 0xfe, 0xdf, 0x55, 0x9c, 0x20, 0x8f, 0x08, 0x74, 0x5e,
+	0x43, 0x1b, 0xab, 0x8a, 0xc8, 0x1e, 0x5b, 0x27, 0xda, 0x68, 0x63, 0x7d,
+	0x9c, 0xcf, 0x0c, 0xc7, 0x91, 0xa0, 0x8d, 0x7d, 0x9d, 0xf2, 0xef, 0xa1,
+	0x8d, 0xc5, 0x69, 0x63, 0x71, 0xda, 0x53, 0x9c, 0x36, 0x26, 0xef, 0xdf,
+	0xc6, 0x69, 0x63, 0x71, 0xda, 0x58, 0x3c, 0xb3, 0x04, 0x47, 0xc9, 0x34,
+	0x76, 0x8e, 0x2e, 0x22, 0x8e, 0x29, 0x76, 0x54, 0xca, 0xdd, 0xf2, 0x17,
+	0xe4, 0xec, 0x37, 0xf0, 0x50, 0xb0, 0x82, 0x3e, 0xd9, 0x9f, 0xce, 0x90,
+	0xf3, 0xb8, 0xf1, 0xeb, 0xac, 0x70, 0xfc, 0x66, 0xe6, 0xb1, 0x27, 0xc9,
+	0xf3, 0x55, 0x3c, 0x6d, 0x4a, 0x1e, 0x6c, 0xf2, 0x9c, 0xb1, 0x26, 0x25,
+	0x7c, 0xed, 0x24, 0xee, 0x19, 0x04, 0x56, 0x91, 0x17, 0xd6, 0x92, 0x97,
+	0x1c, 0x5e, 0xc0, 0xdf, 0x8f, 0x9c, 0xa0, 0xcd, 0x8b, 0x3f, 0x3a, 0xa1,
+	0xb2, 0xad, 0x33, 0x83, 0xf5, 0xbe, 0x1b, 0xe9, 0x83, 0x0f, 0xb0, 0xae,
+	0xf3, 0x11, 0xa9, 0x73, 0x82, 0x6d, 0xeb, 0xe1, 0x5f, 0x73, 0xfe, 0xdb,
+	0x1f, 0xaa, 0xc5, 0x5b, 0x07, 0xf4, 0xf0, 0xfb, 0xc4, 0xbc, 0x5a, 0x87,
+	0xb5, 0xe4, 0x9a, 0x50, 0x60, 0xdb, 0x35, 0x6a, 0x9e, 0xef, 0xb5, 0xed,
+	0x75, 0xe2, 0x58, 0x68, 0x09, 0x3c, 0x0b, 0x8a, 0x9c, 0x8f, 0xb6, 0x54,
+	0x2b, 0x1c, 0x4b, 0x0f, 0x5f, 0x20, 0x57, 0x49, 0xb2, 0xfd, 0xa3, 0x99,
+	0xa7, 0x88, 0x21, 0x0f, 0xe2, 0x79, 0xe6, 0xe7, 0xa3, 0x57, 0xbf, 0x4a,
+	0xee, 0xe8, 0xc6, 0x18, 0x39, 0xe0, 0xf1, 0xc1, 0xe8, 0x27, 0x9d, 0xc4,
+	0x7d, 0xcf, 0x82, 0x4a, 0x64, 0xd2, 0xc2, 0x15, 0x2b, 0xf1, 0xec, 0xa0,
+	0xa1, 0xad, 0x52, 0xf2, 0xbc, 0x70, 0x27, 0xcf, 0xdf, 0x18, 0x34, 0x2e,
+	0x8e, 0x20, 0x30, 0x71, 0x81, 0xdc, 0xf0, 0xfd, 0xb4, 0xc4, 0xb0, 0x93,
+	0xf4, 0x71, 0x3f, 0xc2, 0x49, 0x0d, 0x27, 0xc6, 0x0c, 0xcc, 0x4f, 0x7a,
+	0xf1, 0xe8, 0x58, 0x10, 0xd7, 0xd0, 0x77, 0xb3, 0xe4, 0x87, 0x57, 0x27,
+	0xc5, 0x17, 0xeb, 0x30, 0x3e, 0x56, 0x47, 0x1f, 0x11, 0x5e, 0xfe, 0x0e,
+	0x3c, 0xb5, 0x67, 0xed, 0x3d, 0xbc, 0x23, 0x29, 0xbd, 0x3f, 0xc6, 0xf1,
+	0xc4, 0xbc, 0xfa, 0xb1, 0x18, 0xf4, 0x34, 0x70, 0xdd, 0x1f, 0xd3, 0xb7,
+	0x4a, 0x7c, 0x14, 0x7f, 0xd4, 0xf0, 0x28, 0xf9, 0x4e, 0x29, 0x31, 0x75,
+	0x76, 0xa4, 0x3e, 0xba, 0x58, 0xd1, 0xdb, 0xbe, 0xab, 0x5a, 0x56, 0x2d,
+	0xe3, 0x77, 0xf9, 0x11, 0x8d, 0xdc, 0xc3, 0xc4, 0x9d, 0x76, 0xbc, 0xd6,
+	0x30, 0x73, 0x7f, 0x2d, 0xa6, 0xed, 0x4f, 0xe1, 0xaf, 0x6c, 0x5e, 0xe6,
+	0xa1, 0x9f, 0xb8, 0x51, 0xc1, 0x98, 0x3f, 0x83, 0x79, 0xc7, 0x18, 0x4e,
+	0x7f, 0xb7, 0x12, 0x8d, 0xc7, 0x9e, 0x57, 0xf4, 0xae, 0x2e, 0x45, 0x8f,
+	0xfd, 0x5a, 0xa1, 0x38, 0xb4, 0x53, 0xcf, 0xb8, 0x46, 0xff, 0x6d, 0x3c,
+	0x31, 0x0d, 0x46, 0xfc, 0x5a, 0xd5, 0x69, 0xc1, 0x96, 0x29, 0x52, 0x95,
+	0xcf, 0x8d, 0xc2, 0x8c, 0x17, 0x12, 0x1b, 0x1c, 0xa8, 0x20, 0x0e, 0xdf,
+	0x43, 0x9f, 0x69, 0xb3, 0xe3, 0x11, 0xe3, 0x31, 0xf5, 0xb7, 0x6d, 0x3c,
+	0x4e, 0x3f, 0x59, 0x82, 0x9a, 0x7d, 0x1e, 0xdc, 0xcd, 0x58, 0xf4, 0x45,
+	0xfa, 0x53, 0x15, 0x7d, 0xe6, 0x3e, 0xf1, 0x19, 0xe2, 0xc9, 0x73, 0x8b,
+	0xc4, 0x87, 0x64, 0xae, 0x0d, 0x73, 0xb5, 0x70, 0x92, 0x66, 0xe3, 0xe2,
+	0x19, 0xca, 0xd5, 0x4d, 0xbf, 0xb9, 0x3d, 0x59, 0x8b, 0x15, 0xfb, 0x8f,
+	0x73, 0x3e, 0x35, 0xdb, 0x8f, 0xf2, 0x71, 0xca, 0xcf, 0x43, 0xe2, 0x94,
+	0xc1, 0xff, 0x3e, 0xfa, 0xba, 0xb5, 0xa4, 0x2c, 0x14, 0xff, 0x45, 0x19,
+	0x82, 0x8c, 0x4b, 0x6e, 0xca, 0xa2, 0xc7, 0x9f, 0x75, 0x28, 0xf0, 0x85,
+	0x4c, 0xca, 0xe2, 0xa1, 0x3f, 0x67, 0x18, 0x4b, 0x4e, 0xed, 0xa2, 0xa5,
+	0xfe, 0x17, 0x1f, 0x73, 0x82, 0x46, 0xce, 0xbd, 0xe4, 0x2a, 0x1b, 0x8f,
+	0x2c, 0xa6, 0xcc, 0xe2, 0x77, 0x40, 0x92, 0x39, 0xcf, 0x7a, 0xfa, 0xc1,
+	0xee, 0x14, 0x5a, 0x24, 0x57, 0xeb, 0x30, 0x03, 0xcc, 0x23, 0x9c, 0x58,
+	0x36, 0x26, 0x76, 0x24, 0x7b, 0x13, 0x91, 0xab, 0x31, 0xc2, 0xf8, 0x25,
+	0xed, 0xb4, 0xc4, 0xf0, 0xe1, 0x96, 0xb1, 0x66, 0xbc, 0xcf, 0x39, 0xb9,
+	0x9d, 0xb9, 0x4e, 0x94, 0xb9, 0x4e, 0x74, 0xcc, 0x8b, 0xe8, 0x61, 0x32,
+	0x93, 0xc3, 0x7e, 0x1e, 0x73, 0x79, 0x18, 0xbc, 0xa6, 0xe2, 0xb3, 0xcc,
+	0x5f, 0x96, 0x13, 0xcf, 0xff, 0x27, 0xed, 0xb1, 0x9f, 0x73, 0x3f, 0x44,
+	0x7b, 0xff, 0x27, 0xce, 0x43, 0xe5, 0x5e, 0xe0, 0x53, 0xd4, 0xcf, 0x60,
+	0xea, 0xa4, 0xbd, 0x07, 0xcc, 0x47, 0xdc, 0xeb, 0xa2, 0xdd, 0xf6, 0x71,
+	0xce, 0xb7, 0x0f, 0x1b, 0x5d, 0xdf, 0x40, 0x60, 0xdb, 0x5b, 0x8a, 0x8a,
+	0xe4, 0xa8, 0x8a, 0xc4, 0xe0, 0x12, 0xf2, 0x09, 0x15, 0xbd, 0x69, 0xf1,
+	0x13, 0x29, 0x73, 0x12, 0x1d, 0xf4, 0x93, 0x5b, 0x68, 0xeb, 0xb1, 0xcf,
+	0xc8, 0x9e, 0x77, 0x27, 0x73, 0xfe, 0x07, 0xf1, 0xc5, 0x84, 0xe4, 0x35,
+	0x7a, 0x7f, 0x5a, 0x75, 0x23, 0x45, 0xfb, 0x4c, 0x32, 0x47, 0x79, 0x2e,
+	0x54, 0x89, 0x44, 0xc1, 0x36, 0x4f, 0x0d, 0x1a, 0xfe, 0xa5, 0x8c, 0x65,
+	0x67, 0xd2, 0x12, 0x33, 0x2b, 0xb1, 0x64, 0xaf, 0xbc, 0x97, 0x54, 0x89,
+	0xeb, 0x1e, 0xc9, 0xcb, 0xb6, 0x8f, 0x76, 0x59, 0x3a, 0xa0, 0x51, 0x87,
+	0x06, 0xca, 0x07, 0xbc, 0xc4, 0xba, 0x20, 0x66, 0x0f, 0xf8, 0x18, 0xcb,
+	0x9b, 0x50, 0x3b, 0x90, 0xb7, 0x4b, 0xe2, 0x8f, 0x96, 0x8f, 0x11, 0x5e,
+	0x54, 0xed, 0x67, 0xec, 0x22, 0x4f, 0x78, 0x2e, 0x94, 0xd3, 0x3c, 0xcc,
+	0x39, 0x3b, 0x10, 0x21, 0x47, 0x76, 0x62, 0x4e, 0x32, 0x82, 0x65, 0xe4,
+	0xa4, 0xe7, 0x65, 0xc3, 0xc7, 0x27, 0xf2, 0x3c, 0xb0, 0x9a, 0xf1, 0xe6,
+	0x5c, 0x40, 0xa3, 0x1d, 0xb8, 0xf1, 0xad, 0xe6, 0xfc, 0x77, 0x03, 0x3e,
+	0xfb, 0x27, 0xf0, 0xc7, 0x76, 0xca, 0x54, 0xb1, 0xf0, 0x0f, 0x56, 0xac,
+	0xf0, 0xdd, 0x80, 0x5b, 0x78, 0x2e, 0xdf, 0x1e, 0x98, 0x36, 0xee, 0x74,
+	0xde, 0x96, 0xf2, 0x60, 0xe6, 0xb8, 0x29, 0xef, 0x76, 0xd8, 0x0b, 0x20,
+	0x25, 0x91, 0x56, 0x3c, 0x93, 0x50, 0x30, 0xc3, 0xf8, 0x0e, 0x7e, 0x64,
+	0xaf, 0x0b, 0xd4, 0x92, 0x1f, 0xcb, 0x9a, 0x42, 0x14, 0x87, 0x13, 0xfa,
+	0xc4, 0x53, 0x3c, 0x9f, 0x45, 0x4c, 0x2d, 0xdb, 0xaf, 0xa0, 0x21, 0xe0,
+	0x45, 0xe9, 0x11, 0xd9, 0x93, 0x6f, 0x59, 0xad, 0xa1, 0x95, 0xd6, 0x8e,
+	0xb5, 0x62, 0xdf, 0x5e, 0xe0, 0xc8, 0x8c, 0x2a, 0xc1, 0xc1, 0xc3, 0xa6,
+	0xac, 0x5d, 0x1a, 0xe8, 0x4b, 0xd4, 0xc2, 0xb1, 0xbf, 0x5e, 0x6b, 0x45,
+	0xbd, 0xd9, 0xc1, 0xfa, 0x25, 0x47, 0x6e, 0xd7, 0x64, 0xdd, 0xfe, 0x9b,
+	0x9c, 0xb3, 0x5e, 0xe2, 0x57, 0x4f, 0x2a, 0x1f, 0x43, 0x5b, 0x33, 0xef,
+	0x55, 0x8b, 0x5e, 0x7a, 0xc9, 0x51, 0xd4, 0xe4, 0xbf, 0xd8, 0x65, 0x5c,
+	0x91, 0x1c, 0xef, 0xd7, 0xe1, 0x28, 0x39, 0x83, 0x8f, 0xf1, 0xb4, 0xc2,
+	0x8e, 0xa9, 0x92, 0xf7, 0x5a, 0xd8, 0x1c, 0x8a, 0x3e, 0x40, 0xde, 0x18,
+	0x2c, 0x83, 0x1e, 0xa3, 0x0f, 0xe0, 0x74, 0x88, 0xb1, 0x35, 0xcf, 0x11,
+	0x27, 0x4e, 0x91, 0x13, 0xae, 0x0b, 0x10, 0x1b, 0xc9, 0x05, 0x1f, 0x66,
+	0x3e, 0xbe, 0x9c, 0xb6, 0xd9, 0x79, 0x80, 0xf1, 0xcd, 0x71, 0x39, 0x1f,
+	0xd7, 0x42, 0xf1, 0xbb, 0xc9, 0x03, 0x72, 0x95, 0xaa, 0xd8, 0xeb, 0x09,
+	0x62, 0x4a, 0xa0, 0xdd, 0x49, 0xdc, 0x6f, 0x64, 0xec, 0x78, 0x74, 0x40,
+	0x72, 0x65, 0xe1, 0x8e, 0xf8, 0xb2, 0xec, 0x9b, 0xdb, 0x4c, 0x5b, 0xcd,
+	0x0e, 0x58, 0xdd, 0x6e, 0xda, 0xb5, 0x73, 0x51, 0x1d, 0xbe, 0x38, 0x76,
+	0x03, 0x32, 0x7b, 0x69, 0xff, 0x9c, 0xdb, 0x4d, 0x03, 0x98, 0xe5, 0x81,
+	0xfa, 0x57, 0x9c, 0xbf, 0x30, 0x71, 0x4a, 0xab, 0x52, 0x1b, 0x2f, 0xbe,
+	0x66, 0xcb, 0xa0, 0xb7, 0x2d, 0x71, 0xd4, 0xe1, 0x2e, 0xe6, 0xa8, 0x5b,
+	0x68, 0xe3, 0x31, 0xda, 0x78, 0x8c, 0xf5, 0x4e, 0xec, 0x95, 0x67, 0x45,
+	0x46, 0xdb, 0x19, 0xe6, 0x40, 0x5d, 0xe4, 0x40, 0x8f, 0x3e, 0x24, 0x72,
+	0xcd, 0xc0, 0xe6, 0xc3, 0x37, 0x20, 0x4b, 0x7b, 0xfa, 0x22, 0xaf, 0x7d,
+	0xe3, 0xa1, 0xb9, 0xb8, 0x8f, 0xf6, 0x1f, 0x1b, 0x5b, 0x82, 0x71, 0x66,
+	0xa3, 0xf7, 0xf2, 0xde, 0xf1, 0xbd, 0x7f, 0xc1, 0x3e, 0xeb, 0xb5, 0x41,
+	0xf2, 0xc3, 0xa5, 0xc4, 0xeb, 0xf5, 0x8f, 0x64, 0x6c, 0xfc, 0x16, 0xfc,
+	0xff, 0x69, 0x06, 0x78, 0x83, 0xfc, 0x6c, 0x90, 0x3e, 0x22, 0x9c, 0xcd,
+	0xc5, 0x58, 0x51, 0x4a, 0x8c, 0x0a, 0x1f, 0x30, 0xba, 0x96, 0xab, 0xf4,
+	0xed, 0x85, 0x81, 0x7e, 0xf1, 0x85, 0x9a, 0x23, 0x2a, 0x6a, 0x87, 0x24,
+	0x6f, 0x27, 0x57, 0x22, 0x5e, 0x3f, 0x4f, 0xbc, 0xae, 0x3c, 0x94, 0xcf,
+	0xd1, 0x13, 0xcc, 0xc1, 0x6a, 0x8d, 0x7c, 0x9e, 0xbe, 0x67, 0x40, 0xf6,
+	0xeb, 0xb8, 0xf1, 0xfd, 0x8c, 0xd8, 0x7c, 0x37, 0x96, 0x32, 0x4f, 0x3f,
+	0x5d, 0xc0, 0x63, 0x8b, 0x79, 0xfa, 0x1b, 0x36, 0x16, 0xe7, 0xf3, 0xf4,
+	0xf9, 0x43, 0x46, 0x57, 0x98, 0x78, 0x7d, 0xcd, 0x21, 0xe9, 0x5f, 0x43,
+	0x2d, 0x71, 0x65, 0x3a, 0x31, 0xa5, 0x6a, 0x48, 0xd6, 0x6a, 0x02, 0x9d,
+	0xe3, 0xaa, 0xcf, 0xee, 0x63, 0x3b, 0x65, 0xeb, 0x65, 0x5e, 0xf9, 0xf5,
+	0x84, 0xa1, 0x6d, 0x55, 0x02, 0xe6, 0x4d, 0xd4, 0xeb, 0x91, 0xcc, 0x0d,
+	0xe8, 0x1c, 0xac, 0xc3, 0xb1, 0xb4, 0x60, 0x84, 0xb4, 0x7f, 0xd6, 0xc6,
+	0xbb, 0xf7, 0x0f, 0xcc, 0xc6, 0xfb, 0xa3, 0x97, 0x73, 0xf2, 0x1d, 0xa9,
+	0xe8, 0x03, 0x0c, 0xb5, 0x2b, 0x25, 0x27, 0xff, 0x21, 0x73, 0xf2, 0xb7,
+	0x14, 0x59, 0x4f, 0x24, 0x36, 0x2c, 0x70, 0x30, 0xd6, 0xe8, 0xfe, 0x17,
+	0x1d, 0x71, 0x79, 0xa6, 0xec, 0x7f, 0x88, 0xf7, 0x9f, 0x67, 0x6c, 0x7f,
+	0x9c, 0x56, 0x10, 0xad, 0x75, 0xe0, 0xd5, 0x85, 0xf1, 0xa8, 0xac, 0x99,
+	0xf6, 0x43, 0xde, 0xfb, 0x3b, 0x49, 0x0c, 0x61, 0x9e, 0xc7, 0x18, 0xd7,
+	0xb0, 0x50, 0x6f, 0xdb, 0xc9, 0x6b, 0xcf, 0x66, 0xc5, 0x27, 0xc3, 0xc4,
+	0xb1, 0x70, 0xc1, 0x27, 0x25, 0x27, 0x94, 0x7c, 0xc6, 0x90, 0xf5, 0xa0,
+	0xc1, 0xd9, 0xcc, 0xa7, 0x6a, 0x2f, 0xd9, 0xab, 0xac, 0xd7, 0x4a, 0x8e,
+	0xd3, 0xc6, 0x1c, 0x67, 0xea, 0x3b, 0xcf, 0xc7, 0xd1, 0x97, 0xbd, 0x1f,
+	0xf7, 0xed, 0xd3, 0xbb, 0x9c, 0x8e, 0xb8, 0xa5, 0x19, 0xdd, 0xcc, 0xd7,
+	0xba, 0x11, 0x58, 0x60, 0xb4, 0xbf, 0xa7, 0xe8, 0x9d, 0x3f, 0x51, 0xca,
+	0x99, 0xff, 0x9d, 0xc1, 0xf6, 0x11, 0x3d, 0x98, 0x51, 0x0c, 0xac, 0x62,
+	0xce, 0xf4, 0xe8, 0x70, 0x09, 0xed, 0xb1, 0x03, 0x47, 0x06, 0xe5, 0xfd,
+	0x54, 0x93, 0xf1, 0xb7, 0xde, 0x5f, 0xa6, 0xbc, 0x87, 0xd3, 0xe6, 0x59,
+	0x6c, 0xcf, 0xce, 0x42, 0x87, 0x26, 0xfb, 0x9b, 0x3a, 0x30, 0x3e, 0xf8,
+	0x9e, 0x55, 0x69, 0xb4, 0x91, 0x67, 0x49, 0x0e, 0x61, 0x61, 0x4f, 0xe8,
+	0x1a, 0x6c, 0xb1, 0xfd, 0xb8, 0x54, 0xbe, 0x31, 0xe1, 0x99, 0x63, 0x18,
+	0xcc, 0xa7, 0x24, 0x4f, 0xf7, 0x4d, 0xd9, 0xe7, 0x2b, 0x6b, 0xbc, 0x75,
+	0x55, 0xf9, 0x67, 0xcc, 0x1f, 0x57, 0x66, 0x12, 0x87, 0x86, 0x65, 0xad,
+	0x61, 0x9a, 0xf2, 0xd4, 0xe0, 0x3c, 0x5f, 0x0f, 0xe3, 0xc6, 0x03, 0x66,
+	0x0e, 0x6f, 0x2e, 0x2c, 0xc3, 0xa4, 0x57, 0x41, 0xe8, 0x9a, 0xb0, 0xf4,
+	0xc1, 0xbf, 0xf3, 0x96, 0xff, 0x56, 0x69, 0xc7, 0x57, 0x99, 0x5f, 0x7f,
+	0xf8, 0x79, 0x0d, 0x63, 0x16, 0xcf, 0xe5, 0xdd, 0x3f, 0x39, 0x2f, 0x5e,
+	0x7f, 0xc5, 0x8a, 0x7a, 0xe5, 0xfa, 0x5c, 0xd6, 0x13, 0x3f, 0x9e, 0xa6,
+	0x6c, 0x26, 0xee, 0xce, 0x0d, 0x4d, 0x53, 0x3a, 0xd2, 0xc5, 0x3a, 0x2f,
+	0x21, 0x3b, 0xfc, 0x12, 0xe7, 0x53, 0x0f, 0x4e, 0xc2, 0x55, 0x78, 0xe7,
+	0x48, 0xf6, 0x84, 0xb9, 0xc8, 0x49, 0x65, 0x5d, 0xfe, 0x3c, 0xf6, 0x1e,
+	0x10, 0x0e, 0x69, 0x59, 0x81, 0x79, 0xe7, 0xb1, 0xfd, 0x68, 0x71, 0x4f,
+	0xe5, 0xb4, 0xd8, 0x2c, 0x7b, 0xdf, 0xb4, 0xb4, 0xd1, 0xa7, 0xb4, 0x65,
+	0x03, 0xe1, 0x07, 0x18, 0x88, 0xb5, 0x48, 0xbf, 0xb2, 0xdc, 0x1e, 0xdb,
+	0x09, 0x5e, 0x93, 0x71, 0xca, 0xf8, 0x7c, 0x85, 0x67, 0x4d, 0x53, 0xf5,
+	0xf0, 0x2d, 0x2b, 0xda, 0x26, 0x75, 0x8b, 0x72, 0xcd, 0xa8, 0x45, 0xb9,
+	0xc8, 0x56, 0xbc, 0x3f, 0x56, 0x90, 0xbd, 0x94, 0x3c, 0x3a, 0x5f, 0xa6,
+	0x93, 0xb2, 0x97, 0x84, 0xa2, 0x38, 0xd5, 0x3c, 0x55, 0xfe, 0xe2, 0x58,
+	0x1f, 0xf9, 0x40, 0x7b, 0xf9, 0xb2, 0xcb, 0x6a, 0x65, 0xcf, 0xd4, 0xa9,
+	0xe6, 0x09, 0x7c, 0xc5, 0x5e, 0xe3, 0x78, 0x1b, 0xf1, 0xac, 0x7c, 0x83,
+	0xa6, 0x25, 0x5a, 0x86, 0x4f, 0x42, 0xbd, 0x2a, 0xae, 0x97, 0xd9, 0xdc,
+	0x3b, 0xda, 0x56, 0xc6, 0xfc, 0xdb, 0x6d, 0xe4, 0x64, 0xb7, 0x49, 0x8d,
+	0x1b, 0x7a, 0xfb, 0x32, 0x1c, 0x53, 0xee, 0x0a, 0xe8, 0x13, 0xe7, 0xc8,
+	0x85, 0xae, 0x69, 0x90, 0x5c, 0xcc, 0xf0, 0x5d, 0x54, 0x74, 0x73, 0x03,
+	0xf9, 0xc4, 0xb3, 0xb0, 0xf0, 0x5c, 0x00, 0xb4, 0x03, 0xc3, 0x3f, 0xa0,
+	0xf4, 0x63, 0x63, 0xa0, 0xdf, 0x7e, 0x16, 0xaa, 0x44, 0x56, 0xe3, 0x4a,
+	0xfb, 0x5b, 0x10, 0x6d, 0x08, 0x64, 0x5e, 0xb2, 0xf7, 0xae, 0x2b, 0x91,
+	0x18, 0xe6, 0xdb, 0xd7, 0x36, 0x20, 0x68, 0xff, 0x5f, 0x5b, 0xf8, 0x5e,
+	0x44, 0x3b, 0xea, 0xed, 0xff, 0x9f, 0xc3, 0xbc, 0xcc, 0xa5, 0x35, 0x6c,
+	0xf4, 0x9a, 0x96, 0xf5, 0x8c, 0x69, 0xe1, 0xf5, 0xcb, 0xfb, 0xd5, 0x57,
+	0x3b, 0x98, 0x1b, 0x11, 0x5e, 0x62, 0xf9, 0xef, 0xe5, 0xe4, 0xd7, 0xb4,
+	0x6f, 0xcc, 0xf6, 0x29, 0xcb, 0x3e, 0xb0, 0x5f, 0x5d, 0xf6, 0xf3, 0xd7,
+	0xda, 0xdf, 0x4b, 0x6a, 0x58, 0xe4, 0xc4, 0xf7, 0x13, 0x55, 0x31, 0x0f,
+	0x7f, 0x6f, 0x5f, 0x54, 0x82, 0x2d, 0x21, 0x72, 0xd3, 0xab, 0xce, 0xe0,
+	0x42, 0xc6, 0x89, 0x33, 0x89, 0x78, 0x68, 0x94, 0xfd, 0x9d, 0x4a, 0xa8,
+	0x38, 0x3d, 0xdc, 0x17, 0x3a, 0x64, 0xf7, 0xfd, 0x3a, 0x7a, 0x8f, 0xca,
+	0xf3, 0xc9, 0x36, 0xac, 0x4f, 0x5c, 0x60, 0x2c, 0x96, 0xb6, 0x64, 0x8d,
+	0x40, 0xcf, 0x6d, 0x60, 0x5e, 0xad, 0x3a, 0x82, 0xb8, 0x9d, 0x31, 0xf0,
+	0xf9, 0x44, 0x37, 0x5c, 0x0b, 0xf5, 0xae, 0x6f, 0x93, 0xc7, 0x54, 0x45,
+	0xf4, 0xe0, 0x3b, 0x4a, 0x3b, 0x39, 0xa3, 0xbc, 0xab, 0x24, 0x3e, 0x22,
+	0xdf, 0x93, 0xf9, 0x1c, 0x8e, 0x91, 0x3b, 0x3f, 0x97, 0xd0, 0x70, 0xa1,
+	0xd9, 0x83, 0x0c, 0xb9, 0xf4, 0xf7, 0x13, 0x6e, 0x7c, 0x9d, 0x5c, 0xfa,
+	0xb1, 0x61, 0x59, 0xcb, 0x6c, 0x45, 0x4b, 0x42, 0xd6, 0xb1, 0xc9, 0x0f,
+	0x47, 0xbd, 0xb4, 0x73, 0xcb, 0xea, 0x35, 0x67, 0xd2, 0xb7, 0xce, 0xb2,
+	0x4f, 0x59, 0xff, 0x8c, 0xe2, 0xa6, 0x81, 0x5a, 0x3c, 0x36, 0xea, 0xc3,
+	0x0b, 0xcc, 0x21, 0x92, 0xac, 0xf7, 0x7c, 0xc2, 0x8f, 0x81, 0x8c, 0x0f,
+	0xdf, 0x65, 0x2e, 0xb1, 0x93, 0xe7, 0xf2, 0x6d, 0xa2, 0x12, 0x23, 0x48,
+	0xbe, 0x7e, 0x12, 0x15, 0x03, 0x57, 0x60, 0xd3, 0x9a, 0x27, 0xa0, 0x0e,
+	0x9c, 0xe0, 0x71, 0x3d, 0x7a, 0x46, 0xaf, 0x47, 0x6a, 0x38, 0x82, 0xd4,
+	0xe8, 0x4b, 0xe8, 0x1f, 0x96, 0x71, 0xc9, 0x37, 0x66, 0x64, 0x6f, 0x12,
+	0x39, 0x29, 0x63, 0x7f, 0x7a, 0x54, 0xfa, 0xa9, 0x65, 0xdf, 0x7f, 0x6a,
+	0xfb, 0xff, 0x62, 0x6d, 0xfa, 0xac, 0xb4, 0xfd, 0xc4, 0xc7, 0xb4, 0x2f,
+	0xba, 0x92, 0x35, 0x99, 0xb6, 0xc2, 0x9a, 0x8c, 0x9b, 0x6d, 0x7a, 0xe0,
+	0x88, 0xe4, 0xd6, 0x54, 0x42, 0x8f, 0xee, 0x56, 0x8c, 0x15, 0x15, 0xca,
+	0x05, 0xec, 0xce, 0xca, 0x77, 0x0e, 0x4a, 0xf1, 0x5d, 0x62, 0xb7, 0x2b,
+	0xa4, 0x6b, 0xdf, 0x26, 0x67, 0x5b, 0x4a, 0xbc, 0x7b, 0xdd, 0xbc, 0x0e,
+	0x71, 0x4d, 0xf4, 0x57, 0x8a, 0x1f, 0x0c, 0xba, 0x89, 0x53, 0x61, 0xe4,
+	0x0a, 0xef, 0xb8, 0xfe, 0x38, 0xe1, 0xe5, 0x7c, 0x35, 0xe6, 0x0c, 0x87,
+	0x09, 0x4c, 0xcb, 0x5f, 0x3b, 0x95, 0xd8, 0x80, 0x43, 0x94, 0xf7, 0xf9,
+	0xc4, 0x45, 0xce, 0x4f, 0x27, 0xf5, 0x2f, 0xfa, 0x8e, 0x17, 0x74, 0xdd,
+	0x47, 0x5d, 0xd7, 0xe1, 0xd9, 0xc4, 0x83, 0x78, 0x8c, 0xf2, 0x3f, 0x3a,
+	0x68, 0x44, 0xe7, 0x2a, 0x27, 0x89, 0xe5, 0xa5, 0x38, 0xcd, 0xb6, 0xef,
+	0x62, 0x46, 0x3f, 0x29, 0x7d, 0xa5, 0x64, 0x1d, 0x55, 0xc1, 0x3b, 0x8b,
+	0x4e, 0x62, 0x9c, 0xf7, 0x7e, 0xcc, 0xdf, 0xe1, 0x85, 0x6e, 0xf6, 0x91,
+	0x7f, 0x2e, 0xb1, 0x93, 0x7c, 0xd0, 0x49, 0x6c, 0xbe, 0x40, 0x3e, 0xe6,
+	0x60, 0x99, 0xd7, 0x6c, 0x8e, 0xc6, 0x4c, 0x34, 0x53, 0x8a, 0xef, 0xf1,
+	0xda, 0x3c, 0x62, 0x43, 0xfe, 0xf9, 0xcd, 0x49, 0x6c, 0x21, 0xb6, 0xb7,
+	0xb0, 0x4c, 0x47, 0x3a, 0xef, 0x77, 0x1b, 0xe9, 0x77, 0x63, 0xe6, 0x34,
+	0xe5, 0x9e, 0xb4, 0xc4, 0xaf, 0x97, 0xb0, 0xe7, 0xa1, 0xbc, 0x9e, 0x3a,
+	0x42, 0x5e, 0xca, 0xee, 0x9a, 0x96, 0xe7, 0xd6, 0x25, 0xfc, 0xbf, 0x01,
+	0xe9, 0xcc, 0xcb, 0x85, 0xe7, 0x6d, 0xf2, 0xce, 0x8b, 0x51, 0x78, 0xdf,
+	0xff, 0xf2, 0x73, 0xb6, 0x6f, 0x66, 0xab, 0xc8, 0xe9, 0xcb, 0x69, 0x57,
+	0x25, 0x31, 0x2f, 0xe3, 0xfc, 0x86, 0x05, 0x1a, 0xf6, 0x2d, 0xfe, 0x6c,
+	0x2d, 0xaa, 0x34, 0xe7, 0xaf, 0x9a, 0xe9, 0x5f, 0xa9, 0xaa, 0x58, 0x4d,
+	0xe4, 0x2b, 0xf6, 0xde, 0xac, 0xd0, 0xe2, 0xe9, 0x8c, 0x6f, 0xf2, 0xbc,
+	0x3a, 0x86, 0x37, 0x13, 0xb5, 0xb1, 0xda, 0x48, 0x35, 0xf3, 0xfb, 0xf7,
+	0x30, 0x30, 0xe2, 0x44, 0x15, 0x79, 0x7c, 0xa5, 0xfd, 0x0e, 0x98, 0xac,
+	0x2d, 0x5e, 0x81, 0x59, 0xfb, 0x67, 0xc3, 0xb7, 0xbf, 0x0e, 0xd5, 0xe4,
+	0x49, 0x9e, 0x90, 0x65, 0xfd, 0x6c, 0xa1, 0x65, 0x5d, 0xc9, 0xa3, 0x8c,
+	0xc7, 0xf9, 0x90, 0xf8, 0x64, 0x14, 0x8d, 0xb6, 0x6f, 0x1a, 0x68, 0xb2,
+	0xff, 0xb7, 0xd2, 0xaf, 0xbb, 0x42, 0xf3, 0xc7, 0x1f, 0x0c, 0xcd, 0x1b,
+	0x9f, 0x0e, 0x75, 0x68, 0x06, 0xf9, 0x93, 0x86, 0xcf, 0x2c, 0xb6, 0xd0,
+	0x4a, 0x7f, 0xdd, 0x68, 0x0a, 0x4f, 0xdb, 0x40, 0x9e, 0xd6, 0x1f, 0x32,
+	0xc6, 0x9f, 0xc0, 0x8d, 0x8c, 0xb7, 0xee, 0x21, 0x1f, 0xfb, 0x91, 0xbc,
+	0xdf, 0x99, 0x9b, 0xc3, 0x7c, 0xe0, 0x9a, 0x85, 0xc2, 0xd9, 0xda, 0xc9,
+	0xd9, 0x4e, 0xa0, 0x7d, 0xfc, 0x24, 0x6e, 0x66, 0x19, 0xcf, 0xd0, 0xcb,
+	0x48, 0x66, 0x5f, 0xc1, 0x40, 0x56, 0xe2, 0x48, 0x0e, 0xab, 0xd8, 0x76,
+	0xf9, 0xd0, 0x0a, 0x72, 0xd5, 0xd5, 0xd8, 0x34, 0x6e, 0x61, 0x65, 0x68,
+	0x02, 0x2b, 0xc7, 0x1f, 0xc4, 0xc6, 0xf1, 0xa2, 0x6f, 0x0a, 0x7f, 0x5b,
+	0x4d, 0xfe, 0x26, 0xf1, 0x70, 0xad, 0xbd, 0xbe, 0xa7, 0xd2, 0xe7, 0x5a,
+	0x68, 0xcb, 0x4f, 0xa5, 0xe2, 0x58, 0x3f, 0x2e, 0x58, 0x7b, 0x3f, 0x7a,
+	0xc7, 0x65, 0xbd, 0xf8, 0xab, 0xa1, 0xb9, 0xe3, 0xaf, 0xa0, 0x65, 0x3c,
+	0x1d, 0x6a, 0x18, 0x1f, 0xa5, 0xdc, 0x09, 0xca, 0x36, 0x18, 0xaa, 0x1f,
+	0x1f, 0x0e, 0x05, 0xc7, 0x0f, 0x86, 0x02, 0xe3, 0x6d, 0xd8, 0x39, 0xbe,
+	0x16, 0x3b, 0xc6, 0xb7, 0x61, 0xfb, 0xb8, 0xe0, 0xf5, 0x24, 0x96, 0x8f,
+	0xbf, 0x8e, 0x65, 0xe3, 0xcf, 0xa1, 0x75, 0xfc, 0x2c, 0x96, 0x8e, 0xbf,
+	0x84, 0x15, 0xe3, 0x2f, 0x73, 0x2c, 0xb2, 0xfe, 0x2c, 0x6b, 0xcf, 0xc5,
+	0x67, 0x7d, 0x53, 0xf7, 0x53, 0xcb, 0xfa, 0x8a, 0xbc, 0xff, 0x25, 0x73,
+	0xe8, 0xc2, 0x1a, 0xed, 0x3c, 0xfa, 0x0e, 0xc8, 0x37, 0xd1, 0x1a, 0xb5,
+	0x5e, 0xc8, 0x73, 0xdc, 0x97, 0x68, 0x6b, 0xf2, 0x2c, 0xf7, 0x03, 0xdf,
+	0x32, 0xd1, 0x26, 0x2f, 0x3d, 0xf7, 0x94, 0xf7, 0xbb, 0x24, 0xe6, 0x5c,
+	0x40, 0x4f, 0xf6, 0x37, 0x56, 0x54, 0x93, 0xb2, 0xf2, 0x7e, 0x98, 0xd8,
+	0xc3, 0x79, 0x7c, 0xed, 0xc0, 0x05, 0x72, 0xa7, 0x09, 0x7b, 0xfd, 0xe8,
+	0xdd, 0x06, 0xf9, 0x5e, 0x8e, 0x9f, 0x38, 0x74, 0x1e, 0xa9, 0xa3, 0xc0,
+	0xf8, 0x23, 0xe2, 0x73, 0x1b, 0xe8, 0x73, 0x13, 0xe2, 0x7f, 0x71, 0xe2,
+	0xef, 0x9d, 0x1e, 0xdc, 0x4f, 0x7e, 0x54, 0x82, 0xdc, 0x68, 0x39, 0xbe,
+	0x37, 0x1c, 0xb7, 0xe4, 0x9b, 0x0a, 0x95, 0x11, 0x23, 0x77, 0x25, 0xe3,
+	0xfd, 0xcb, 0xbc, 0x36, 0x31, 0x08, 0xbf, 0xcf, 0x08, 0xf8, 0xe6, 0xf0,
+	0xfc, 0x74, 0x7a, 0x82, 0x76, 0xde, 0x85, 0x49, 0xfe, 0x97, 0xbc, 0x18,
+	0xe8, 0x45, 0x3a, 0x2d, 0xfa, 0x6c, 0xa3, 0x3e, 0x05, 0x03, 0xf5, 0xae,
+	0x56, 0x62, 0x9f, 0xa5, 0x08, 0xf6, 0xc9, 0x7b, 0x9f, 0xc2, 0x21, 0xec,
+	0xef, 0x96, 0x98, 0x03, 0xca, 0x4b, 0xf8, 0x3e, 0x73, 0x98, 0xf2, 0xfd,
+	0xe4, 0x41, 0xc4, 0xc5, 0xaa, 0x88, 0x62, 0xac, 0x0c, 0x9c, 0xc7, 0xf7,
+	0x46, 0xe5, 0xfd, 0x5c, 0x27, 0x26, 0x88, 0x89, 0x8e, 0xa4, 0xec, 0x21,
+	0xd0, 0x28, 0x8b, 0xac, 0x55, 0x9d, 0x45, 0xce, 0x7e, 0xc6, 0x27, 0xb9,
+	0xcc, 0x8b, 0x76, 0x3f, 0x4e, 0xca, 0xde, 0x47, 0xdc, 0xec, 0x49, 0xfd,
+	0x10, 0xad, 0x69, 0x0f, 0xf3, 0x8b, 0xb3, 0xcc, 0xd3, 0x5e, 0x47, 0xea,
+	0x40, 0x1d, 0xd6, 0x91, 0x97, 0xce, 0x4a, 0x9a, 0xd0, 0xa8, 0xb7, 0xdb,
+	0xc7, 0x4c, 0xe6, 0x5d, 0x6b, 0xb1, 0xe6, 0xf0, 0xad, 0x3c, 0x66, 0xe0,
+	0xe6, 0xc3, 0x9d, 0xf8, 0xf4, 0x58, 0x1c, 0xed, 0x63, 0x7d, 0x3c, 0x3a,
+	0xf0, 0xa9, 0xbd, 0xd5, 0xc8, 0x30, 0x1f, 0xde, 0xb3, 0xa8, 0x83, 0x79,
+	0xbe, 0xf0, 0xb2, 0xf5, 0xf4, 0xd1, 0x6e, 0x04, 0x43, 0xeb, 0x31, 0x91,
+	0x16, 0xbc, 0x93, 0x7d, 0x96, 0xeb, 0xb1, 0x9d, 0x39, 0xfc, 0x08, 0xd6,
+	0xa3, 0x87, 0xd7, 0xf6, 0xda, 0x73, 0x70, 0x12, 0x4b, 0x98, 0x9f, 0xbd,
+	0x7f, 0xed, 0x49, 0x5c, 0x77, 0x48, 0xfa, 0x7e, 0x0f, 0xa9, 0x7d, 0x1b,
+	0xd8, 0x66, 0x0e, 0x6d, 0x63, 0xff, 0x88, 0x4f, 0xef, 0xc5, 0xe6, 0x6a,
+	0x54, 0x33, 0xd7, 0x0a, 0xb4, 0x0f, 0x28, 0xff, 0x68, 0xb7, 0xbd, 0x3d,
+	0xf5, 0x0a, 0x73, 0xac, 0x0b, 0x78, 0x34, 0xf3, 0x32, 0x73, 0xab, 0xa9,
+	0x73, 0x2a, 0x73, 0xf9, 0x36, 0xb1, 0xff, 0x47, 0x38, 0x32, 0x3a, 0x49,
+	0x9c, 0x3d, 0xc7, 0xe3, 0xc3, 0xcf, 0xd4, 0xf3, 0xef, 0xa4, 0xe6, 0xed,
+	0xc6, 0xc9, 0xf1, 0x15, 0x79, 0x5b, 0xdc, 0xaa, 0x36, 0x72, 0xbb, 0x66,
+	0x31, 0xae, 0x86, 0xed, 0xf7, 0x1c, 0x8d, 0xd8, 0x0f, 0x14, 0x79, 0xd7,
+	0xd1, 0x83, 0x8a, 0x48, 0x10, 0xab, 0xb3, 0x7a, 0x74, 0x15, 0xf5, 0x5d,
+	0xf6, 0xd0, 0x8f, 0xe0, 0x7c, 0xc8, 0x89, 0xd2, 0xa4, 0xac, 0xe7, 0xc8,
+	0x37, 0x61, 0xe4, 0xfb, 0x23, 0x39, 0xbd, 0x54, 0x78, 0x64, 0x72, 0x42,
+	0xf0, 0x69, 0x7e, 0x09, 0xfc, 0xb8, 0x31, 0x7b, 0x03, 0x36, 0x0c, 0x46,
+	0xd1, 0x63, 0xca, 0x3b, 0x4a, 0xf9, 0xf1, 0xcf, 0x69, 0xfe, 0x11, 0x7a,
+	0x87, 0x25, 0xff, 0x75, 0x62, 0x9d, 0xfd, 0x7c, 0xf6, 0x47, 0xe8, 0x1b,
+	0x3e, 0xe6, 0x16, 0x9e, 0xd3, 0xc7, 0x6b, 0xae, 0xa4, 0x6e, 0x7e, 0xf0,
+	0xfb, 0x33, 0x73, 0x65, 0x5f, 0x1b, 0x6d, 0x22, 0x37, 0xdf, 0x85, 0x07,
+	0x6b, 0xf3, 0xdf, 0x40, 0xf9, 0xa8, 0x6f, 0xff, 0xfc, 0x99, 0xfd, 0xed,
+	0x1f, 0x79, 0xb6, 0x2f, 0xdf, 0x8d, 0x7a, 0x3a, 0x21, 0xdf, 0x86, 0x50,
+	0x97, 0xb8, 0xa0, 0x7a, 0x5d, 0xe4, 0x83, 0xaf, 0x9b, 0xd3, 0xd1, 0xeb,
+	0xb5, 0x70, 0x23, 0x65, 0x39, 0xd6, 0xf4, 0x29, 0xa0, 0x26, 0xde, 0xee,
+	0xb2, 0xbf, 0x3f, 0xf2, 0xd2, 0x6d, 0xff, 0xfe, 0xfb, 0x23, 0x6f, 0x23,
+	0x49, 0x3b, 0xaf, 0x34, 0x6e, 0xc7, 0xf3, 0x36, 0xfe, 0x2b, 0xa8, 0x98,
+	0x27, 0x6b, 0xa3, 0x7e, 0x3c, 0x6b, 0x34, 0xfa, 0x6b, 0xe4, 0x99, 0x97,
+	0x72, 0xde, 0x8a, 0x7b, 0xeb, 0x18, 0x4b, 0xfe, 0xa3, 0xfd, 0xf8, 0x2f,
+	0x60, 0xe7, 0xbe, 0x30, 0xb9, 0xa2, 0x97, 0xf2, 0x87, 0xa7, 0x15, 0xdf,
+	0xbf, 0xdc, 0x91, 0x92, 0x7d, 0xec, 0xdd, 0x4c, 0x0c, 0xdf, 0xa6, 0x9f,
+	0xbd, 0x2d, 0xfb, 0xb0, 0xc8, 0x75, 0xfe, 0x1c, 0xc1, 0x9a, 0x69, 0xf9,
+	0xf7, 0xac, 0xec, 0xfd, 0xbe, 0xb2, 0x1e, 0xf0, 0x60, 0xe1, 0xfb, 0x88,
+	0x52, 0x56, 0xea, 0xbd, 0x6d, 0xaf, 0x0b, 0xbb, 0x8c, 0xdf, 0x58, 0x6f,
+	0x78, 0x6b, 0x59, 0xf6, 0xad, 0xc2, 0xfd, 0x0b, 0xe2, 0x33, 0x66, 0x14,
+	0x72, 0x4d, 0xea, 0x88, 0xae, 0x2e, 0xd7, 0xe9, 0x4d, 0x39, 0x88, 0x7b,
+	0x67, 0xad, 0x6e, 0xaf, 0x8c, 0xe1, 0x2b, 0x1f, 0xaa, 0xa3, 0xda, 0xdf,
+	0x02, 0xcc, 0xeb, 0x57, 0xe4, 0xf9, 0xf7, 0x7d, 0xca, 0x1a, 0x72, 0x89,
+	0x51, 0x81, 0xf3, 0x35, 0xf9, 0xb5, 0x9d, 0xcb, 0x32, 0x7e, 0xd5, 0x2b,
+	0x7b, 0xff, 0x4a, 0xed, 0x73, 0xbb, 0x5f, 0xf3, 0x72, 0xbd, 0xc3, 0x85,
+	0xf1, 0xd6, 0xda, 0xef, 0x3a, 0x3d, 0x6c, 0x73, 0x18, 0xc7, 0x94, 0x71,
+	0x87, 0xbc, 0x1f, 0xec, 0x67, 0x4f, 0xa1, 0x5f, 0xd5, 0x7e, 0x5f, 0xec,
+	0x72, 0x1f, 0x22, 0xd7, 0x93, 0x85, 0x3a, 0x7a, 0x38, 0x6a, 0xf7, 0xaf,
+	0x32, 0x6f, 0x2b, 0xf6, 0x49, 0x7f, 0x5a, 0x58, 0x6c, 0x63, 0x42, 0xec,
+	0xab, 0xbb, 0x94, 0xb1, 0xe9, 0x7c, 0xf3, 0xfd, 0xd8, 0x9e, 0x10, 0x3d,
+	0xcb, 0xb7, 0x24, 0x89, 0xc1, 0x36, 0xaf, 0x72, 0xd1, 0xdf, 0x16, 0x23,
+	0xad, 0xc5, 0x71, 0xa8, 0x49, 0xde, 0xed, 0x73, 0xd1, 0xa6, 0xe3, 0x28,
+	0x23, 0xa7, 0x8d, 0xf2, 0x9a, 0xec, 0x6b, 0x39, 0x62, 0xea, 0xd1, 0xa7,
+	0xf1, 0x65, 0x38, 0xae, 0xb2, 0xd7, 0xc0, 0x56, 0xa4, 0x21, 0xd7, 0x4d,
+	0xe6, 0x24, 0x53, 0x57, 0x0c, 0xca, 0x68, 0x3b, 0xf6, 0x7e, 0x6c, 0x53,
+	0xde, 0xfd, 0x1b, 0x48, 0xc8, 0x3b, 0x68, 0x8d, 0x31, 0x72, 0x41, 0x3c,
+	0x9f, 0x91, 0x3d, 0x10, 0xbf, 0xb5, 0xe2, 0xd3, 0x65, 0xaf, 0xe5, 0xd4,
+	0x3a, 0x25, 0xc4, 0xa5, 0x40, 0xb8, 0x4a, 0x29, 0xbe, 0x87, 0x76, 0xf9,
+	0xef, 0x66, 0xda, 0xcc, 0x05, 0xfb, 0xdd, 0x41, 0x39, 0x8b, 0xa0, 0x25,
+	0x25, 0xdf, 0x44, 0xd4, 0x27, 0x56, 0xa2, 0x31, 0x57, 0xcf, 0x7c, 0x3b,
+	0xcf, 0x35, 0xc2, 0x58, 0x4d, 0xbb, 0xd9, 0x11, 0x08, 0xdb, 0xef, 0xc8,
+	0x2d, 0x4f, 0xd5, 0x07, 0x1f, 0x85, 0xde, 0xf9, 0x16, 0xcb, 0x7f, 0x2a,
+	0xfb, 0x82, 0x95, 0xf6, 0xca, 0x98, 0x8a, 0x3e, 0x2e, 0xdf, 0xef, 0xa1,
+	0x1e, 0x23, 0xe2, 0x1f, 0x1e, 0xd4, 0x44, 0xc2, 0xf4, 0x43, 0x89, 0xdf,
+	0xf2, 0x7e, 0x9d, 0x7e, 0x50, 0xf2, 0xa9, 0x16, 0xe6, 0xfc, 0x2e, 0x7b,
+	0xef, 0xb4, 0xee, 0x5f, 0xe3, 0x08, 0x16, 0xf6, 0x30, 0x17, 0xe3, 0xfd,
+	0x2f, 0xbc, 0x85, 0xfd, 0xd5, 0xee, 0x39, 0x8c, 0x6f, 0x96, 0xbd, 0x77,
+	0x60, 0x83, 0x8d, 0x0d, 0x9a, 0xa1, 0x1f, 0xfb, 0xa5, 0xa3, 0x1b, 0x4f,
+	0x2e, 0x30, 0xba, 0x8e, 0xab, 0xb9, 0xb4, 0x8f, 0x38, 0x71, 0xbd, 0x23,
+	0xba, 0x97, 0xff, 0xfd, 0x2f, 0x2a, 0xf2, 0xbe, 0xb4, 0xd4, 0xd5, 0x83,
+	0x6b, 0xd5, 0xe2, 0x3b, 0xda, 0xf2, 0xde, 0x85, 0xde, 0xfe, 0x4d, 0xa5,
+	0x1b, 0x5b, 0x43, 0x46, 0xdb, 0x36, 0x45, 0x5f, 0xf1, 0xb7, 0x8a, 0xee,
+	0x0f, 0x29, 0x52, 0x2e, 0x88, 0x9b, 0xb2, 0x97, 0x63, 0xa7, 0x8b, 0x7d,
+	0x1c, 0x4e, 0xe8, 0xe1, 0x69, 0x2c, 0x7b, 0xde, 0x34, 0x7c, 0xef, 0xb1,
+	0xcd, 0x9f, 0xf0, 0xd8, 0x8b, 0x20, 0x96, 0xda, 0xed, 0x46, 0xe7, 0xbb,
+	0xec, 0xef, 0x99, 0xb6, 0x33, 0x26, 0xc8, 0x77, 0x6b, 0x62, 0xd0, 0x92,
+	0x75, 0x34, 0x31, 0xbd, 0xff, 0x16, 0x48, 0x2e, 0x7d, 0x3f, 0x03, 0xb6,
+	0x07, 0xde, 0x48, 0x37, 0xe6, 0x2d, 0x30, 0x7c, 0x8b, 0x54, 0xbb, 0x7e,
+	0x50, 0xbe, 0x01, 0xb4, 0x94, 0xe3, 0x1c, 0x86, 0xb4, 0x91, 0xb3, 0xb4,
+	0x79, 0xd5, 0x76, 0x9d, 0x05, 0xea, 0x27, 0xe1, 0xba, 0xfa, 0x57, 0x56,
+	0x5a, 0x83, 0x56, 0x6b, 0x48, 0x9d, 0xf8, 0x5e, 0x0d, 0xff, 0x51, 0x3d,
+	0xc1, 0x95, 0x5f, 0x5a, 0x98, 0x21, 0xf5, 0x64, 0xdf, 0xda, 0xe7, 0x70,
+	0x37, 0xf9, 0x65, 0xb9, 0x21, 0xfe, 0xa8, 0x47, 0xbf, 0x44, 0x5e, 0x59,
+	0x6e, 0x7f, 0x3b, 0x4b, 0x62, 0x49, 0x07, 0xf1, 0xac, 0x1b, 0x5a, 0x48,
+	0xef, 0xbf, 0x42, 0x95, 0xef, 0x08, 0x3d, 0x26, 0x7b, 0x77, 0x0e, 0x36,
+	0xa8, 0xf9, 0x3d, 0x3e, 0xb1, 0x8f, 0xfd, 0x26, 0x11, 0xfb, 0x2a, 0x97,
+	0x6f, 0x12, 0xd5, 0xd9, 0xef, 0xa8, 0x74, 0x24, 0x1c, 0x85, 0x3d, 0x8b,
+	0x97, 0xbf, 0xa7, 0xb9, 0x81, 0x1c, 0x7e, 0xa3, 0x7c, 0x3b, 0x8f, 0x63,
+	0xdd, 0x94, 0x90, 0x45, 0xad, 0xff, 0x03, 0x6e, 0x1f, 0x8c, 0x82, 0x98,
+	0x56, 0x00, 0x00, 0x00 };
+
+static const u32 bnx2_CP_b06FwData[(0x84/4) + 1] = {
+	0x00000000, 0x0000001b, 0x0000000f, 0x0000000a, 0x00000008, 0x00000006,
+	0x00000005, 0x00000005, 0x00000004, 0x00000004, 0x00000003, 0x00000003,
+	0x00000003, 0x00000003, 0x00000003, 0x00000002, 0x00000002, 0x00000002,
+	0x00000002, 0x00000002, 0x00000002, 0x00000002, 0x00000002, 0x00000002,
+	0x00000002, 0x00000002, 0x00000002, 0x00000002, 0x00000002, 0x00000002,
+	0x00000001, 0x00000001, 0x00000001, 0x00000000 };
+static const u32 bnx2_CP_b06FwRodata[(0x158/4) + 1] = {
+	0x08000f24, 0x08000d6c, 0x08000fb8, 0x08001060, 0x08000f4c, 0x08000f8c,
+	0x08001194, 0x08000d88, 0x080011b8, 0x08000dd8, 0x08001554, 0x0800151c,
+	0x08000d88, 0x08000d88, 0x08000d88, 0x08001240, 0x08001240, 0x08000d88,
+	0x08000d88, 0x080014e0, 0x08000d88, 0x08000d88, 0x08000d88, 0x08000d88,
+	0x080013b4, 0x08000d88, 0x08000d88, 0x08000d88, 0x08000d88, 0x08000d88,
+	0x08000d88, 0x08000d88, 0x08000d88, 0x08000d88, 0x08000d88, 0x08000d88,
+	0x08000d88, 0x08000d88, 0x08000d88, 0x08000fac, 0x08000d88, 0x08000d88,
+	0x08001678, 0x08000d88, 0x08000d88, 0x08000d88, 0x08000d88, 0x08000d88,
+	0x08000d88, 0x08000d88, 0x08000d88, 0x08000d88, 0x08000d88, 0x08000d88,
+	0x08000d88, 0x08000d88, 0x08000d88, 0x08000d88, 0x08000d88, 0x08000d88,
+	0x08001410, 0x08000d88, 0x08000d88, 0x08001334, 0x080012a4, 0x08001e2c,
+	0x08001efc, 0x08001f14, 0x08001f28, 0x08001f38, 0x08001e2c, 0x08001e2c,
+	0x08001e2c, 0x08001ed8, 0x08002e14, 0x08002e1c, 0x08002de4, 0x08002df0,
+	0x08002dfc, 0x08002e08, 0x080052f4, 0x080052b4, 0x08005280, 0x08005254,
+	0x08005230, 0x080051ec, 0x00000000 };
+
+static struct fw_info bnx2_cp_fw_06 = {
+	/* Firmware version: 6.2.3 */
+	.ver_major			= 0x6,
+	.ver_minor			= 0x2,
+	.ver_fix			= 0x3,
+
+	.start_addr			= 0x080000a0,
+
+	.text_addr			= 0x08000000,
+	.text_len			= 0x5694,
+	.text_index			= 0x0,
+	.gz_text			= bnx2_CP_b06FwText,
+	.gz_text_len			= sizeof(bnx2_CP_b06FwText),
+
+	.data_addr			= 0x08005820,
+	.data_len			= 0x84,
+	.data_index			= 0x0,
+	.data				= bnx2_CP_b06FwData,
+
+	.sbss_addr			= 0x080058a4,
+	.sbss_len			= 0xf1,
+	.sbss_index			= 0x0,
+
+	.bss_addr			= 0x08005998,
+	.bss_len			= 0x5d8,
+	.bss_index			= 0x0,
+
+	.rodata_addr			= 0x08005694,
+	.rodata_len			= 0x158,
+	.rodata_index			= 0x0,
+	.rodata				= bnx2_CP_b06FwRodata,
+};
+
+/* Initialized Values the Command Processor. */
+static const struct cpu_reg cpu_reg_cp = {
+	.mode = BNX2_CP_CPU_MODE,
+	.mode_value_halt = BNX2_CP_CPU_MODE_SOFT_HALT,
+	.mode_value_sstep = BNX2_CP_CPU_MODE_STEP_ENA,
+	.state = BNX2_CP_CPU_STATE,
+	.state_value_clear = 0xffffff,
+	.gpr0 = BNX2_CP_CPU_REG_FILE,
+	.evmask = BNX2_CP_CPU_EVENT_MASK,
+	.pc = BNX2_CP_CPU_PROGRAM_COUNTER,
+	.inst = BNX2_CP_CPU_INSTRUCTION,
+	.bp = BNX2_CP_CPU_HW_BREAKPOINT,
+	.spad_base = BNX2_CP_SCRATCH,
+	.mips_view_base = 0x8000000,
+};
+
+static u8 bnx2_RXP_b06FwText[] = {
+	0xec, 0x5b, 0x7f, 0x8c, 0x5c, 0xd5, 0x75, 0x3e, 0xef, 0xcd, 0xec, 0x7a,
+	0xbc, 0xde, 0x1f, 0xcf, 0xe3, 0xf1, 0x32, 0x36, 0x4b, 0x98, 0xe7, 0x7d,
+	0xb6, 0x17, 0x76, 0x45, 0x9e, 0x37, 0x83, 0x59, 0xdc, 0x49, 0x18, 0x66,
+	0xd7, 0x66, 0x41, 0x48, 0x0c, 0x60, 0x5c, 0x54, 0x51, 0x69, 0x34, 0x63,
+	0x43, 0x5a, 0x55, 0x95, 0x0b, 0x34, 0xa0, 0x0a, 0xc4, 0x64, 0x76, 0xed,
+	0xb8, 0x64, 0xbc, 0x6f, 0x95, 0x75, 0x30, 0x22, 0x91, 0x32, 0xec, 0x0f,
+	0xaf, 0x69, 0xc7, 0x7e, 0x40, 0x43, 0x8a, 0x54, 0x01, 0x2b, 0xdb, 0xb8,
+	0x89, 0xda, 0x4a, 0x44, 0x89, 0xa2, 0xfe, 0x91, 0xb6, 0x96, 0xdd, 0xc6,
+	0xe9, 0x5f, 0x58, 0x54, 0x15, 0xb4, 0x80, 0x5f, 0xbf, 0xef, 0xbe, 0xf7,
+	0x76, 0xc7, 0x5b, 0xa4, 0x90, 0x2a, 0x55, 0xfb, 0xc7, 0xbb, 0xd2, 0xe8,
+	0xbe, 0x7b, 0xef, 0xb9, 0xf7, 0x9e, 0x7b, 0xee, 0x39, 0xdf, 0x39, 0xf7,
+	0xde, 0xdd, 0xc9, 0x4e, 0xe9, 0x90, 0x20, 0x75, 0xe1, 0xb7, 0xf3, 0xe0,
+	0xd3, 0x8f, 0x7f, 0xe9, 0x96, 0xe1, 0x5b, 0x58, 0x8e, 0xc5, 0xf4, 0x76,
+	0xe6, 0x9a, 0x44, 0x29, 0x4a, 0x51, 0x8a, 0x52, 0x94, 0xa2, 0x14, 0xa5,
+	0x28, 0x45, 0x29, 0x4a, 0x51, 0x8a, 0x52, 0x94, 0xa2, 0x14, 0xa5, 0x28,
+	0x45, 0x29, 0x4a, 0x51, 0x8a, 0x52, 0x94, 0xa2, 0x14, 0xa5, 0x28, 0x45,
+	0x29, 0x4a, 0x51, 0x8a, 0x52, 0x94, 0xa2, 0x14, 0xa5, 0x28, 0x45, 0x29,
+	0x4a, 0x51, 0x8a, 0x52, 0x94, 0xa2, 0x14, 0xa5, 0x28, 0x45, 0x29, 0x4a,
+	0x51, 0x8a, 0x52, 0x94, 0xa2, 0x14, 0xa5, 0x28, 0x45, 0xe9, 0x7f, 0x2b,
+	0x55, 0x3f, 0x07, 0x4d, 0xc7, 0xaa, 0x72, 0x4c, 0xc4, 0x60, 0xde, 0x15,
+	0xfc, 0x24, 0xa1, 0xe7, 0xf2, 0x4f, 0x14, 0x2c, 0x49, 0xc4, 0x72, 0x7f,
+	0xfb, 0x54, 0xc5, 0x12, 0xc9, 0x37, 0x07, 0x33, 0xa3, 0xf2, 0xa9, 0x57,
+	0x4d, 0xc5, 0x85, 0xf5, 0x37, 0xe4, 0x3e, 0x79, 0xee, 0xad, 0xdb, 0xcc,
+	0x2b, 0x8d, 0x98, 0x24, 0x8c, 0x9c, 0x31, 0x6c, 0x6c, 0x93, 0x44, 0x1f,
+	0xfa, 0x7c, 0x77, 0xfb, 0x55, 0x43, 0xba, 0xc3, 0xb1, 0x3c, 0x6f, 0xc1,
+	0xf6, 0xe4, 0xbc, 0x5d, 0xd5, 0x46, 0xb7, 0xbf, 0xa9, 0x15, 0x9c, 0xab,
+	0x5e, 0x3e, 0xae, 0x8b, 0x8e, 0xf1, 0xf6, 0x37, 0x13, 0x72, 0x60, 0xbe,
+	0x43, 0x1e, 0x6d, 0xac, 0x93, 0x72, 0x43, 0x0c, 0x3d, 0x97, 0x96, 0xc7,
+	0x50, 0x77, 0x21, 0x06, 0x3a, 0x57, 0x4a, 0xb1, 0xdc, 0x47, 0xf7, 0x95,
+	0xeb, 0xa4, 0x17, 0x5d, 0xcf, 0x2d, 0xdd, 0xb7, 0xbf, 0x79, 0xee, 0xbe,
+	0x72, 0x93, 0x74, 0xa4, 0x41, 0x5b, 0xb3, 0x53, 0x6a, 0xc7, 0x52, 0x72,
+	0xd8, 0x32, 0x47, 0x1a, 0xa2, 0x6f, 0xd0, 0xa5, 0x6a, 0xe8, 0x62, 0xe6,
+	0x6b, 0x32, 0x68, 0xfc, 0x50, 0x7e, 0x5b, 0xf2, 0x86, 0xbf, 0xb2, 0xb3,
+	0xd3, 0x6b, 0xa5, 0x3c, 0x74, 0xbf, 0xe4, 0x8b, 0x9a, 0x9c, 0x99, 0xae,
+	0x1a, 0x58, 0x29, 0xd6, 0x74, 0xe5, 0xf1, 0x8a, 0x65, 0x1a, 0xa3, 0x68,
+	0x2f, 0xd4, 0x13, 0x92, 0x57, 0x94, 0x1a, 0x68, 0x3b, 0xc0, 0xdb, 0x2e,
+	0x29, 0xa7, 0x58, 0xee, 0x37, 0xda, 0xb5, 0x0e, 0x29, 0x0c, 0xed, 0x94,
+	0x7c, 0x4a, 0x97, 0xf3, 0xe0, 0xf9, 0x62, 0x5d, 0xb4, 0x42, 0x16, 0x79,
+	0x53, 0x30, 0x16, 0xe9, 0x75, 0x39, 0x37, 0x1d, 0x93, 0x77, 0xa7, 0xa5,
+	0x0f, 0xe3, 0xf6, 0xea, 0xb2, 0x95, 0x63, 0x6e, 0x89, 0x23, 0x1f, 0xc3,
+	0x6f, 0xb7, 0xc4, 0xd1, 0x2f, 0xfe, 0x59, 0xf4, 0xa0, 0x65, 0x9f, 0xcf,
+	0xa2, 0x7f, 0xb3, 0x53, 0x3a, 0x12, 0xe8, 0x43, 0x7a, 0x2c, 0xde, 0xea,
+	0x05, 0x3f, 0xfe, 0xfc, 0x1c, 0xe3, 0xdc, 0xb4, 0xc8, 0xa5, 0xba, 0x24,
+	0x75, 0xd5, 0x27, 0x2e, 0x95, 0x2c, 0xdb, 0x3a, 0x41, 0xff, 0xa6, 0xfa,
+	0xbf, 0x9e, 0x4b, 0xaa, 0x5f, 0x0c, 0xfd, 0x12, 0xcb, 0xfd, 0xc0, 0x37,
+	0xea, 0x34, 0x7c, 0x27, 0xa4, 0x90, 0x35, 0xe4, 0x52, 0xc3, 0xa7, 0xbd,
+	0xa8, 0xe4, 0xad, 0x81, 0xd6, 0xe7, 0x4d, 0xb7, 0x74, 0x29, 0x43, 0x8a,
+	0xe7, 0x2c, 0x33, 0x23, 0x1a, 0x69, 0x4c, 0xbb, 0x2a, 0xcc, 0xd9, 0x97,
+	0xf2, 0xf3, 0xeb, 0xce, 0x08, 0xfb, 0x99, 0x90, 0xf0, 0x2f, 0xbd, 0xb7,
+	0xb6, 0xa7, 0xe4, 0x1d, 0xd7, 0x90, 0x57, 0x5d, 0x7d, 0x83, 0x74, 0x9b,
+	0xd5, 0xaa, 0xb4, 0x49, 0x79, 0xe6, 0xaa, 0x17, 0xe3, 0x18, 0xba, 0x85,
+	0xf5, 0xa1, 0xdd, 0x41, 0xbb, 0x83, 0xfa, 0xb9, 0x75, 0x1b, 0xa4, 0x23,
+	0x2d, 0x6f, 0x6d, 0x67, 0x3f, 0xf6, 0x61, 0xdf, 0x5c, 0x8f, 0xdf, 0x4f,
+	0xd0, 0xaf, 0x28, 0x31, 0xcb, 0x93, 0x82, 0x1d, 0x97, 0xd1, 0x94, 0x68,
+	0xba, 0x55, 0x85, 0x2e, 0xd8, 0x5d, 0x98, 0x13, 0x63, 0x55, 0xb5, 0xbc,
+	0xcb, 0x3c, 0x1c, 0xef, 0x72, 0x8f, 0x3f, 0x56, 0x15, 0x63, 0x3d, 0x2d,
+	0x6f, 0xbb, 0x4f, 0xca, 0x5f, 0xba, 0x25, 0x79, 0xdd, 0x7d, 0x06, 0x63,
+	0x1e, 0x94, 0x1f, 0xb8, 0x7f, 0x20, 0x6f, 0xb8, 0x5f, 0x95, 0xef, 0xbb,
+	0xfb, 0xe5, 0x2f, 0xdc, 0x47, 0xe4, 0x35, 0xf7, 0x61, 0xcc, 0x37, 0xa0,
+	0x15, 0x1d, 0xea, 0x76, 0x63, 0x47, 0xa1, 0x5e, 0x05, 0x8f, 0x77, 0xc8,
+	0x81, 0x19, 0xd3, 0xd0, 0x15, 0x9f, 0x96, 0x40, 0xef, 0x82, 0xb6, 0x36,
+	0xd9, 0x3f, 0xe3, 0xc9, 0xeb, 0x36, 0xdb, 0x9e, 0x03, 0x3f, 0x66, 0xba,
+	0x10, 0xdb, 0x9e, 0x89, 0x43, 0x68, 0x7a, 0xce, 0x4c, 0x97, 0xa1, 0x2b,
+	0x93, 0x76, 0x4a, 0x26, 0x5c, 0xf3, 0x8a, 0x88, 0xf9, 0xa6, 0xc8, 0x83,
+	0x52, 0x4d, 0x15, 0xa5, 0xe1, 0xf6, 0x6a, 0xa3, 0x33, 0x49, 0x6d, 0x6c,
+	0x26, 0xae, 0xed, 0x76, 0x3c, 0xa9, 0xd8, 0x90, 0x6d, 0xce, 0x03, 0xad,
+	0x35, 0x30, 0x2b, 0xd0, 0xb7, 0x98, 0x99, 0x1e, 0x8b, 0x49, 0x7e, 0x9f,
+	0x25, 0xf9, 0xc7, 0xac, 0xbf, 0xd3, 0x1a, 0x29, 0x4d, 0xd9, 0x42, 0x19,
+	0x73, 0x8d, 0xda, 0x14, 0x17, 0x64, 0x64, 0x14, 0x91, 0xb7, 0x23, 0xa7,
+	0x0e, 0x3e, 0xd9, 0xe5, 0x9b, 0x2a, 0x6d, 0xe9, 0x59, 0x7c, 0xdb, 0x98,
+	0x43, 0x12, 0x5f, 0xc8, 0xd5, 0x9f, 0xf8, 0xc7, 0xed, 0x2b, 0x65, 0x3d,
+	0xf7, 0x73, 0xe8, 0xb1, 0xa6, 0xec, 0x52, 0xc3, 0xf7, 0x96, 0xe6, 0xf7,
+	0x36, 0xf8, 0x36, 0xb8, 0x03, 0x32, 0x82, 0x3c, 0x9c, 0x38, 0x6c, 0x2f,
+	0x23, 0xb1, 0x5c, 0x97, 0xfc, 0xe4, 0x5b, 0x5c, 0xeb, 0x60, 0x46, 0x97,
+	0xbc, 0x19, 0x17, 0x5b, 0xe6, 0xdd, 0xb8, 0x36, 0xea, 0xe4, 0xc1, 0xa7,
+	0x85, 0x75, 0xe9, 0x52, 0x4a, 0xe5, 0xe5, 0x50, 0xd6, 0x1c, 0xa8, 0x4a,
+	0x46, 0xca, 0xc3, 0xb6, 0x2c, 0xb8, 0xa0, 0x4c, 0x55, 0xe5, 0x44, 0xd6,
+	0xb4, 0x1b, 0xb2, 0x4e, 0x96, 0x0c, 0x5b, 0x4e, 0xb8, 0x09, 0x79, 0x77,
+	0xe6, 0x5e, 0x79, 0xcc, 0xe1, 0x7e, 0xc8, 0x60, 0x9b, 0x7c, 0x5d, 0x16,
+	0xb2, 0x5f, 0xbf, 0xb2, 0x60, 0x7f, 0xa7, 0x53, 0xba, 0x69, 0xef, 0xb7,
+	0xf4, 0xf8, 0x7c, 0x7f, 0x05, 0x6b, 0xcb, 0x43, 0x7e, 0x3d, 0xb0, 0x47,
+	0xea, 0xf2, 0x1a, 0x29, 0xec, 0x4b, 0x22, 0x67, 0x3f, 0x73, 0xe0, 0x82,
+	0x7c, 0x48, 0x9d, 0xb1, 0x97, 0xf4, 0x90, 0xcf, 0x36, 0x29, 0xf4, 0xb2,
+	0x9f, 0xd9, 0x85, 0xfa, 0xcc, 0x0a, 0xff, 0x9b, 0xb5, 0xd1, 0xe3, 0xdd,
+	0x72, 0xee, 0x85, 0x5b, 0x31, 0x5e, 0x5c, 0x0e, 0x0c, 0x7b, 0xde, 0x1f,
+	0xdb, 0xf1, 0xcc, 0x98, 0xec, 0x25, 0xff, 0xf2, 0xe3, 0xa9, 0x8d, 0xd2,
+	0x30, 0x12, 0xf2, 0xd3, 0xa9, 0x70, 0xbe, 0x35, 0x81, 0xfd, 0x5f, 0xe0,
+	0xf8, 0x99, 0x8c, 0xde, 0x15, 0x94, 0x43, 0xbe, 0xc6, 0xa4, 0xec, 0xf4,
+	0x1b, 0x5b, 0xf4, 0xdf, 0xd7, 0x80, 0x2f, 0x48, 0xe3, 0x41, 0xf9, 0x51,
+	0xed, 0xce, 0x78, 0xaf, 0xc4, 0x2d, 0xb3, 0x5b, 0x3a, 0xe2, 0x72, 0xc6,
+	0x09, 0xeb, 0x81, 0x11, 0x8a, 0x8e, 0xb2, 0x96, 0x1d, 0x2b, 0xb2, 0x96,
+	0x1d, 0x5b, 0x9a, 0xfd, 0xc1, 0x98, 0xf9, 0x80, 0x36, 0x29, 0xf9, 0x74,
+	0x4a, 0x26, 0x9d, 0x90, 0xf6, 0x13, 0x79, 0x62, 0xd8, 0x3c, 0x49, 0x7c,
+	0x59, 0xe9, 0x93, 0x97, 0x8a, 0xd3, 0xa7, 0xd5, 0x8e, 0xf5, 0xa7, 0xfb,
+	0x75, 0xcf, 0x2b, 0xd8, 0x37, 0x63, 0x4f, 0x0c, 0x60, 0x54, 0x27, 0x64,
+	0xc3, 0x71, 0x3e, 0xc0, 0xde, 0x72, 0xac, 0x3e, 0x6d, 0xe2, 0x58, 0x4e,
+	0xca, 0xc7, 0x07, 0xd1, 0xde, 0x1e, 0xac, 0x41, 0xf5, 0x33, 0x1e, 0x62,
+	0x3e, 0xff, 0x21, 0xe8, 0xd8, 0xa7, 0x4f, 0xab, 0xce, 0x33, 0xb7, 0x65,
+	0xd6, 0x55, 0x7c, 0x64, 0xee, 0x87, 0xce, 0x54, 0xd3, 0x37, 0x1b, 0xf3,
+	0xfa, 0x36, 0x2d, 0xaf, 0xf0, 0xac, 0x5d, 0xbe, 0x9d, 0xea, 0x47, 0x59,
+	0x93, 0xf2, 0x2e, 0xf0, 0x62, 0x67, 0x82, 0x7a, 0xd6, 0x99, 0x47, 0x2c,
+	0x7d, 0x2d, 0xd6, 0xec, 0x79, 0x0f, 0xd9, 0x94, 0x3b, 0x70, 0x60, 0x78,
+	0x33, 0xe6, 0x33, 0x90, 0x87, 0x32, 0x5d, 0x0f, 0xfe, 0x28, 0x13, 0x65,
+	0xe7, 0xd8, 0xbf, 0x34, 0xe6, 0xbb, 0x03, 0x36, 0xbd, 0xda, 0xde, 0x61,
+	0xe3, 0xdd, 0xb4, 0xf5, 0xdb, 0x29, 0xc7, 0x01, 0x91, 0x1f, 0xa1, 0x9c,
+	0x96, 0x76, 0x0b, 0x4a, 0xd0, 0x41, 0x7d, 0xbf, 0x0e, 0xf5, 0x6b, 0x3f,
+	0xf2, 0x31, 0x37, 0xac, 0x4b, 0x68, 0xfe, 0xda, 0xee, 0x85, 0x5c, 0xf6,
+	0x2a, 0x39, 0xd6, 0xf4, 0x98, 0x96, 0xef, 0xeb, 0x37, 0x26, 0xc0, 0x6f,
+	0x21, 0x6e, 0x36, 0x4a, 0x92, 0xc6, 0x5e, 0x1b, 0xb0, 0xe3, 0x14, 0xec,
+	0x3a, 0xa3, 0x15, 0xc0, 0xd3, 0x01, 0x27, 0x27, 0x95, 0xe3, 0xc4, 0x0b,
+	0xd3, 0x28, 0x00, 0x8f, 0x94, 0x3e, 0x38, 0x9e, 0x57, 0xb1, 0x25, 0x5f,
+	0xb0, 0x06, 0xd3, 0x13, 0xd4, 0x6f, 0xe8, 0xfd, 0xac, 0x3b, 0x00, 0x3d,
+	0xde, 0x9a, 0x51, 0x65, 0xd7, 0xc2, 0xf7, 0x10, 0xec, 0x26, 0x0b, 0x6c,
+	0xe0, 0xda, 0x12, 0xc1, 0xda, 0x80, 0xaf, 0xd0, 0xe7, 0x25, 0x7d, 0x44,
+	0x16, 0xb6, 0xbf, 0x0e, 0x3d, 0x1e, 0x01, 0xcd, 0x3a, 0xc9, 0xef, 0x65,
+	0xfd, 0x88, 0xcc, 0x3a, 0xc0, 0x7e, 0xea, 0x95, 0xa2, 0xcb, 0xc9, 0x9c,
+	0x53, 0x52, 0x7c, 0x12, 0x0b, 0x46, 0xe3, 0x25, 0xa9, 0xb8, 0xac, 0xe7,
+	0xba, 0x0c, 0x99, 0xdf, 0x8e, 0x7d, 0x70, 0x74, 0x8c, 0xab, 0xa1, 0xff,
+	0x55, 0xec, 0x7f, 0x28, 0xc3, 0xdb, 0x20, 0x53, 0x0b, 0x6d, 0x5c, 0xe3,
+	0x66, 0xa9, 0xf5, 0x62, 0x2f, 0x86, 0x53, 0x14, 0x9b, 0x14, 0x92, 0x1b,
+	0xa5, 0x70, 0x33, 0xf7, 0xb8, 0x17, 0xe5, 0x4e, 0xdf, 0x56, 0x92, 0x6c,
+	0x7f, 0xb6, 0xdb, 0xd7, 0xaf, 0xb6, 0x55, 0xe5, 0xa7, 0x91, 0x77, 0xcb,
+	0x75, 0x16, 0x73, 0x03, 0xf9, 0x33, 0xc8, 0x93, 0xc8, 0xfb, 0x31, 0xd7,
+	0x5b, 0xd8, 0x0f, 0xee, 0x05, 0xbe, 0xe7, 0xd8, 0x67, 0x53, 0x30, 0x2f,
+	0xc7, 0xed, 0xc6, 0x38, 0x5d, 0xc1, 0x5c, 0xdd, 0x28, 0x77, 0x04, 0x73,
+	0xb1, 0xfd, 0xdb, 0xdd, 0xdc, 0x8f, 0x02, 0xfd, 0xc4, 0x35, 0xe5, 0x99,
+	0x6e, 0xfa, 0xa4, 0xeb, 0xac, 0x6e, 0xe5, 0x23, 0x2e, 0xf6, 0xf6, 0xe2,
+	0x9b, 0x73, 0x92, 0x86, 0xed, 0xc8, 0x5d, 0x7e, 0xa7, 0x20, 0x97, 0xbc,
+	0x7c, 0xcd, 0xa1, 0x6f, 0x85, 0x1e, 0x62, 0xaf, 0x6a, 0xd0, 0xf3, 0xc2,
+	0xb1, 0xb5, 0x81, 0xee, 0xd2, 0x9e, 0xf2, 0xb2, 0x5f, 0xed, 0x5b, 0x3f,
+	0xf6, 0x8b, 0x7b, 0x45, 0xdd, 0x87, 0x7d, 0x19, 0x7b, 0xd1, 0x7f, 0x27,
+	0x70, 0x97, 0xb6, 0xf1, 0x89, 0xa7, 0x67, 0xe3, 0x46, 0x4d, 0x88, 0xb5,
+	0xe3, 0x90, 0x2d, 0xdb, 0x80, 0x3b, 0x8e, 0x39, 0x5d, 0x83, 0x2d, 0x9e,
+	0xb1, 0xbb, 0x83, 0xf1, 0x1e, 0xc6, 0x78, 0x88, 0x47, 0x7a, 0x89, 0x39,
+	0x9b, 0xb5, 0xc2, 0x71, 0xc8, 0xbb, 0x68, 0xc8, 0xf9, 0x2c, 0xf1, 0x29,
+	0x2b, 0x8b, 0xcb, 0xf8, 0x54, 0x05, 0x3e, 0x11, 0x9b, 0xaa, 0xc0, 0x28,
+	0xdf, 0x4e, 0xf7, 0xc9, 0xf5, 0xb0, 0xd3, 0x34, 0xf7, 0x15, 0x76, 0xfa,
+	0x22, 0xec, 0x14, 0x7b, 0x60, 0x13, 0x27, 0xa8, 0x8f, 0x5f, 0x85, 0xcd,
+	0x75, 0x00, 0xf7, 0xf8, 0x1d, 0xae, 0xa1, 0x3d, 0x28, 0xa3, 0x6d, 0xf1,
+	0x4f, 0xa4, 0x70, 0x7c, 0x3f, 0xd6, 0xfd, 0xaf, 0x4a, 0xe6, 0xe5, 0x45,
+	0xfe, 0x42, 0xbb, 0x78, 0x16, 0xf2, 0xd7, 0xc4, 0xb7, 0x07, 0xc8, 0x26,
+	0x7b, 0x19, 0x34, 0x45, 0x99, 0x73, 0x31, 0x5e, 0x9a, 0x3c, 0x7f, 0x16,
+	0x1d, 0xdb, 0xb1, 0x8e, 0x2c, 0x6d, 0x07, 0xf5, 0x73, 0xa1, 0xbe, 0x74,
+	0xaa, 0x39, 0xcb, 0xc3, 0x1d, 0xc1, 0x7a, 0x29, 0x1b, 0xda, 0x60, 0x1a,
+	0x36, 0xa4, 0x49, 0x45, 0xd9, 0x11, 0xea, 0x5c, 0xea, 0x1b, 0x6d, 0x09,
+	0x63, 0xd8, 0x94, 0x89, 0x21, 0x0f, 0x28, 0xfa, 0xf4, 0x0a, 0x7e, 0xf5,
+	0x69, 0xe8, 0xc3, 0xf2, 0x5a, 0xd9, 0xa2, 0x30, 0xb6, 0x2f, 0xb0, 0xb3,
+	0xb6, 0x00, 0xdb, 0x1e, 0x96, 0xc7, 0xdd, 0x22, 0xec, 0x23, 0x2d, 0x7f,
+	0xe4, 0xf6, 0xc9, 0x93, 0xd0, 0xfd, 0x0b, 0xc9, 0x22, 0xf5, 0x38, 0xe0,
+	0xf7, 0x0e, 0x79, 0x8a, 0xfe, 0x5b, 0x7d, 0x9b, 0xf6, 0x05, 0xfd, 0x36,
+	0x8c, 0x47, 0xdb, 0xa6, 0x8d, 0x93, 0x2e, 0x16, 0xf0, 0xf8, 0x4a, 0xa7,
+	0x4f, 0xd3, 0x26, 0x8d, 0xa4, 0x89, 0x15, 0x93, 0xb7, 0x78, 0x60, 0x63,
+	0xa6, 0x51, 0x12, 0xae, 0x99, 0xbc, 0xf2, 0xbb, 0x55, 0x16, 0xcc, 0x5b,
+	0x65, 0x10, 0x8e, 0x13, 0x62, 0xc4, 0x98, 0xe4, 0x5d, 0xe6, 0xf4, 0x07,
+	0xf0, 0xf7, 0x0e, 0xfc, 0xbd, 0x03, 0x3f, 0xef, 0xc0, 0xcf, 0x3b, 0xf0,
+	0xf3, 0x0e, 0xfc, 0x3c, 0x6c, 0xf2, 0x75, 0x07, 0xbe, 0xde, 0x81, 0xaf,
+	0x77, 0x18, 0xa3, 0x54, 0x11, 0x1f, 0x84, 0x71, 0x27, 0xf6, 0xd9, 0x62,
+	0x6c, 0xc9, 0x7a, 0x05, 0xe5, 0xf4, 0xe5, 0xc0, 0x8d, 0x71, 0x29, 0x1c,
+	0xf3, 0xbc, 0x49, 0x3b, 0x29, 0x93, 0x96, 0xe7, 0xed, 0xb6, 0xaf, 0x83,
+	0x2f, 0x19, 0x34, 0xe6, 0xa5, 0x17, 0xeb, 0x61, 0x1c, 0x45, 0xac, 0xd9,
+	0x0c, 0x9e, 0xbf, 0xa9, 0x8d, 0xce, 0x11, 0x6b, 0xae, 0x7a, 0x7b, 0xe0,
+	0xb3, 0x6b, 0xce, 0x60, 0xfa, 0x04, 0xd6, 0x52, 0x19, 0xa9, 0x21, 0xf6,
+	0xa4, 0xad, 0xb5, 0x29, 0x1f, 0x37, 0x09, 0x7b, 0xa8, 0x65, 0x8f, 0x69,
+	0x7b, 0x16, 0x39, 0x4f, 0x5c, 0x6a, 0xee, 0x55, 0x4f, 0x87, 0x2d, 0xd6,
+	0x24, 0x2c, 0xfb, 0xb1, 0xd9, 0x85, 0xd8, 0x37, 0xb5, 0xc2, 0xdc, 0x05,
+	0x15, 0x3f, 0xbd, 0xa6, 0xe2, 0xa7, 0x34, 0xe2, 0x16, 0xcf, 0x7b, 0xd5,
+	0xf6, 0xbc, 0x1f, 0xdb, 0xcb, 0x3c, 0x23, 0x55, 0xb5, 0x31, 0x37, 0x23,
+	0x63, 0x6e, 0xa1, 0xc7, 0x97, 0x87, 0xc8, 0x84, 0xc3, 0x79, 0x5e, 0xd2,
+	0x8a, 0x8b, 0x53, 0xf8, 0x4d, 0x6b, 0xa3, 0x98, 0x6b, 0xc2, 0x91, 0x6a,
+	0xcd, 0x3e, 0xa9, 0x8d, 0xba, 0x47, 0xb4, 0xfb, 0x17, 0xbb, 0x15, 0x2f,
+	0x35, 0xa7, 0x17, 0xbc, 0x7f, 0xa2, 0xe2, 0xa9, 0x02, 0xe2, 0xdd, 0xdf,
+	0x81, 0x02, 0x15, 0xea, 0xf4, 0x37, 0xd4, 0x65, 0xb6, 0x7b, 0x1e, 0xe2,
+	0x93, 0xe7, 0x0a, 0x59, 0xf2, 0x47, 0xde, 0x54, 0xdd, 0x3b, 0x3e, 0x76,
+	0x9c, 0xd0, 0x0a, 0x8b, 0x9d, 0xf0, 0xbb, 0x8c, 0x1d, 0x18, 0xab, 0xb2,
+	0xdf, 0x56, 0xd8, 0x63, 0x13, 0x73, 0x30, 0x0e, 0xa7, 0x2c, 0xc1, 0x33,
+	0x6c, 0xfe, 0x35, 0x15, 0x8f, 0x71, 0x4d, 0x19, 0xc8, 0xfb, 0xa0, 0xdc,
+	0xe5, 0x24, 0x31, 0x2f, 0xf9, 0xbc, 0x82, 0xf5, 0x51, 0x66, 0xb5, 0x01,
+	0xb0, 0xad, 0x95, 0x6d, 0xd3, 0x16, 0x19, 0x55, 0x72, 0x9d, 0x47, 0x0c,
+	0x54, 0xb6, 0x0d, 0xea, 0x4c, 0xa6, 0x6c, 0x57, 0xc1, 0xad, 0xcf, 0xdf,
+	0x68, 0x3d, 0x8e, 0x36, 0x96, 0x05, 0x36, 0x11, 0xf2, 0x1c, 0x07, 0xbe,
+	0x84, 0x6b, 0x09, 0xeb, 0x96, 0x7a, 0x88, 0x49, 0xb3, 0xee, 0x17, 0x31,
+	0x06, 0xc7, 0xfd, 0x55, 0x63, 0x24, 0x80, 0xe7, 0x1c, 0x27, 0x21, 0x27,
+	0x1d, 0xd2, 0xd3, 0xcf, 0x25, 0xa4, 0x03, 0x3e, 0x79, 0x6d, 0x4e, 0xb4,
+	0x9b, 0xb6, 0x9a, 0xc6, 0x7c, 0x2c, 0x26, 0xcf, 0xa7, 0xe4, 0x66, 0xc6,
+	0x79, 0xb2, 0xde, 0x3f, 0x3f, 0x14, 0x10, 0x37, 0x4f, 0x02, 0x8f, 0x27,
+	0x86, 0x4c, 0x63, 0xd6, 0x3f, 0x63, 0x18, 0x77, 0xab, 0x73, 0xc3, 0xbf,
+	0x79, 0xa5, 0xd4, 0x36, 0xc4, 0xc2, 0x92, 0x88, 0xe7, 0xe2, 0x3b, 0x26,
+	0xeb, 0x07, 0x85, 0x31, 0xd6, 0xc4, 0xd0, 0x5a, 0x29, 0x19, 0xfd, 0x23,
+	0x77, 0xa9, 0x73, 0x46, 0x62, 0x47, 0xc5, 0xf2, 0xf9, 0x1a, 0x85, 0xae,
+	0x4c, 0x40, 0x6f, 0xee, 0x6a, 0x32, 0x06, 0x88, 0xef, 0xe8, 0x47, 0xec,
+	0x7d, 0x18, 0xfa, 0xdc, 0x8e, 0x7d, 0x59, 0x52, 0xba, 0x61, 0x40, 0x76,
+	0xc4, 0xa2, 0x11, 0x8c, 0xfd, 0x1e, 0xe4, 0x66, 0xd1, 0xcf, 0xc1, 0x47,
+	0x51, 0x3f, 0x06, 0xa0, 0x1b, 0x7d, 0x88, 0x63, 0xd3, 0x88, 0x6f, 0xa9,
+	0x2b, 0xe6, 0x11, 0x2a, 0xf0, 0x46, 0xd0, 0xbe, 0xb1, 0x8d, 0xf1, 0x99,
+	0xe7, 0xed, 0xb5, 0xcc, 0x86, 0x48, 0x37, 0x30, 0x50, 0xa0, 0x1b, 0xdc,
+	0x2b, 0xc9, 0x4f, 0xd8, 0x1d, 0xe0, 0x25, 0x2e, 0x0f, 0x58, 0x19, 0xc6,
+	0x77, 0xd8, 0x63, 0xe5, 0xbf, 0xa0, 0x27, 0xcb, 0xfb, 0x0c, 0x1f, 0x09,
+	0x27, 0xdf, 0x21, 0x06, 0xce, 0x35, 0xa8, 0x27, 0xce, 0xb4, 0xd0, 0x1a,
+	0xbe, 0x8e, 0xc4, 0xa0, 0x23, 0x95, 0x2c, 0x69, 0xa5, 0x5a, 0xc8, 0x52,
+	0x4f, 0xb0, 0xb7, 0xee, 0x8b, 0x3d, 0x7e, 0x8c, 0x09, 0x3a, 0x15, 0x47,
+	0x7c, 0x01, 0xba, 0x02, 0x9c, 0x3c, 0xae, 0xfc, 0x2f, 0x4e, 0x1e, 0xd4,
+	0x15, 0xe8, 0xa5, 0xdb, 0x49, 0x9e, 0xf2, 0xa3, 0x0e, 0x6d, 0x0b, 0xfa,
+	0x96, 0x8d, 0x05, 0xe7, 0xab, 0x01, 0xcc, 0x9b, 0x91, 0xf5, 0xd0, 0x83,
+	0x82, 0xf2, 0xad, 0xf4, 0x95, 0x06, 0xcb, 0x8c, 0x9d, 0x8c, 0x1a, 0xe2,
+	0x6b, 0x9e, 0xd9, 0x76, 0xec, 0xcc, 0x48, 0xcd, 0x5e, 0xc7, 0x39, 0x0c,
+	0x9f, 0xaf, 0xee, 0xa0, 0x5e, 0xba, 0xc1, 0x57, 0x17, 0xe3, 0xd6, 0x09,
+	0xea, 0x66, 0x96, 0x31, 0xd2, 0x9a, 0xb0, 0x0d, 0x72, 0x1c, 0x6a, 0x89,
+	0x89, 0x87, 0x10, 0x13, 0xb7, 0xa9, 0xfa, 0xf6, 0x5c, 0x56, 0xce, 0xd7,
+	0xfb, 0x65, 0x09, 0x7e, 0xfd, 0x90, 0xc3, 0xf5, 0x61, 0x7e, 0xfb, 0x46,
+	0xe5, 0xe7, 0x0f, 0x39, 0xda, 0x8d, 0xfe, 0x1c, 0x62, 0xc4, 0x72, 0x9b,
+	0x65, 0x54, 0xd5, 0x89, 0x3e, 0x0b, 0x4c, 0xe0, 0x1a, 0x0f, 0x61, 0x0d,
+	0xc5, 0x61, 0x1d, 0xe3, 0x5c, 0x6b, 0x9f, 0xfe, 0xb9, 0x84, 0xf6, 0x99,
+	0x01, 0x46, 0xc5, 0xa1, 0xf7, 0xde, 0x3b, 0xba, 0x45, 0xfb, 0x64, 0x4c,
+	0x4d, 0xac, 0xa0, 0x9d, 0xd2, 0x2e, 0x4f, 0xc0, 0x56, 0xa7, 0x61, 0x57,
+	0xa1, 0xfd, 0xfc, 0xbb, 0x41, 0x1c, 0x04, 0x89, 0x5a, 0xdb, 0xac, 0xec,
+	0x0a, 0x30, 0xb4, 0x07, 0x71, 0xb6, 0x7f, 0x28, 0x9d, 0xa5, 0x0f, 0x30,
+	0x44, 0x8f, 0xe5, 0xa4, 0xc7, 0xa7, 0x49, 0xc8, 0xa8, 0xe1, 0xe3, 0x57,
+	0xcd, 0xb1, 0xe0, 0x35, 0x4d, 0xc4, 0x82, 0xb0, 0xef, 0x69, 0xda, 0xf8,
+	0xf7, 0x30, 0xde, 0x92, 0xa9, 0xab, 0xae, 0x7a, 0x6f, 0x1b, 0xc6, 0x29,
+	0xda, 0xba, 0xc4, 0x76, 0xbd, 0x1f, 0x2b, 0xdc, 0x02, 0x59, 0x8c, 0x00,
+	0xaf, 0x86, 0xc8, 0xd3, 0x13, 0x88, 0xf3, 0xd5, 0xd9, 0x03, 0x3a, 0xfa,
+	0x9e, 0x54, 0xea, 0x9d, 0xd2, 0x8e, 0xf6, 0x32, 0xda, 0x0b, 0x43, 0x96,
+	0xb1, 0x47, 0x36, 0x62, 0xbd, 0x4b, 0x60, 0x0c, 0x7e, 0x78, 0x1b, 0xc6,
+	0x1d, 0x02, 0x76, 0xef, 0x0d, 0xe2, 0xc2, 0x65, 0x1a, 0xe2, 0x7d, 0x21,
+	0xd9, 0x26, 0x9c, 0x93, 0x6d, 0x83, 0x69, 0x43, 0xe1, 0x20, 0xb0, 0xa5,
+	0xc8, 0xbe, 0xac, 0xc3, 0x9e, 0x0f, 0x57, 0x20, 0x97, 0x8f, 0xbd, 0x6d,
+	0xc3, 0xac, 0x63, 0xf9, 0x03, 0xd0, 0xeb, 0xb2, 0x6d, 0xa7, 0xda, 0x77,
+	0xcc, 0x6f, 0x61, 0x7e, 0xee, 0xff, 0x1e, 0xe5, 0x7b, 0xcb, 0xd0, 0xcd,
+	0x2d, 0xc3, 0x5d, 0x72, 0xd0, 0xd6, 0x15, 0x46, 0x6d, 0x40, 0xbc, 0xb1,
+	0xc1, 0x3a, 0x83, 0x79, 0xc8, 0xff, 0xfb, 0xb1, 0x51, 0xae, 0xc3, 0x26,
+	0xee, 0xf2, 0xec, 0x4c, 0x1e, 0x3e, 0xf6, 0x76, 0x0c, 0x7f, 0x4c, 0x8c,
+	0xad, 0xea, 0x88, 0x49, 0x97, 0xe8, 0xbf, 0x87, 0x29, 0xb7, 0x8d, 0xbe,
+	0x2f, 0x1f, 0x0e, 0xe5, 0x46, 0x19, 0xf6, 0x40, 0x76, 0x94, 0x1b, 0xe3,
+	0x55, 0xab, 0x1a, 0xd3, 0x5b, 0xe5, 0xb7, 0xd5, 0xfe, 0x12, 0xfd, 0x0f,
+	0xe6, 0x93, 0x24, 0x65, 0xe8, 0x81, 0x67, 0xf2, 0x4e, 0x9e, 0xb7, 0xa3,
+	0x8e, 0xfb, 0xc4, 0xf1, 0xba, 0xfc, 0xb3, 0xcc, 0xb0, 0xa6, 0x62, 0x21,
+	0x3d, 0xc9, 0x7e, 0xa4, 0xe5, 0x7a, 0x43, 0xfa, 0xab, 0x01, 0x3f, 0x9b,
+	0x82, 0x7e, 0xa4, 0xef, 0x0d, 0x62, 0x8b, 0xf8, 0xaa, 0x7e, 0xa1, 0x8c,
+	0x44, 0x8b, 0x5b, 0xe1, 0x3a, 0xd6, 0x05, 0xfd, 0xa8, 0x1f, 0x9a, 0x8a,
+	0xcf, 0x80, 0x71, 0x86, 0x2f, 0x4f, 0xca, 0x2e, 0x9c, 0x4b, 0x9d, 0x95,
+	0x50, 0x0f, 0x7c, 0x70, 0x80, 0x17, 0xc0, 0x9f, 0xef, 0x3b, 0xc0, 0x09,
+	0xc4, 0x07, 0xaf, 0x5f, 0x83, 0xcb, 0x36, 0xb0, 0xe5, 0xbd, 0xe0, 0xcc,
+	0xdd, 0x59, 0x8a, 0xc3, 0x1e, 0xde, 0x01, 0xa6, 0xfc, 0xc0, 0x0d, 0x31,
+	0x26, 0xc4, 0x16, 0x62, 0x8d, 0x14, 0x6b, 0xf5, 0xe7, 0x20, 0x1f, 0xa9,
+	0x6e, 0xce, 0x71, 0x3f, 0x3b, 0x47, 0x80, 0x0d, 0xc5, 0x5a, 0x93, 0x7e,
+	0x0b, 0x70, 0x92, 0x43, 0x6c, 0xe8, 0x26, 0x12, 0xfa, 0x54, 0xa2, 0x7a,
+	0x7d, 0x8e, 0xb6, 0x95, 0x91, 0x4c, 0xf3, 0x0a, 0xf0, 0xc6, 0x50, 0xfa,
+	0x55, 0x18, 0x3a, 0x7a, 0x3d, 0xe3, 0xfd, 0x1a, 0x7c, 0x59, 0x3c, 0x27,
+	0x71, 0x3d, 0xd7, 0x9e, 0x98, 0xc8, 0x76, 0xc2, 0xaf, 0x8f, 0x6f, 0xd2,
+	0x4f, 0xdf, 0xbb, 0x29, 0x76, 0xba, 0xb7, 0xd4, 0x96, 0xab, 0x6e, 0xd2,
+	0xa7, 0x80, 0xcd, 0x75, 0x58, 0x0d, 0x70, 0x65, 0xbf, 0xa0, 0x7c, 0xfa,
+	0xc1, 0x07, 0xf5, 0x9c, 0xc2, 0x86, 0x67, 0xe6, 0x81, 0x31, 0xb3, 0x75,
+	0x33, 0x53, 0x94, 0x67, 0xa4, 0x56, 0x7f, 0x5a, 0x26, 0x10, 0x9b, 0xd5,
+	0x5c, 0x60, 0x30, 0x70, 0xe7, 0x21, 0xc4, 0x19, 0xb3, 0xc3, 0x9f, 0x7a,
+	0x94, 0xe5, 0xec, 0xf0, 0x97, 0x71, 0x6e, 0xd0, 0x91, 0x0f, 0xa8, 0xf3,
+	0x6d, 0xc1, 0x55, 0xbe, 0x0a, 0xe7, 0x59, 0xd8, 0x9c, 0xba, 0x57, 0x88,
+	0xb3, 0x0f, 0xb0, 0x60, 0xc9, 0xbf, 0xe7, 0x31, 0x24, 0x38, 0x97, 0x9d,
+	0x6b, 0xc1, 0x86, 0x73, 0xc0, 0x86, 0xdf, 0x4b, 0xfa, 0x31, 0xb5, 0x11,
+	0x60, 0x5f, 0xa7, 0x46, 0xdd, 0x9b, 0x50, 0xb4, 0x18, 0xb7, 0x4e, 0x3d,
+	0x1d, 0x81, 0x9e, 0x12, 0x77, 0xc3, 0x7e, 0x19, 0xf4, 0x93, 0x44, 0x2f,
+	0xea, 0x7f, 0xb6, 0x8d, 0xe7, 0x66, 0xcf, 0x7b, 0x72, 0x05, 0x83, 0x81,
+	0xbd, 0xc4, 0xe0, 0xcf, 0x83, 0xbf, 0x07, 0xd7, 0xff, 0xdf, 0xe0, 0xef,
+	0x91, 0xf5, 0x11, 0xfe, 0x3e, 0x96, 0xfc, 0x4d, 0xe0, 0xef, 0xbe, 0x65,
+	0xfc, 0xf5, 0xd6, 0x7f, 0x3e, 0xfc, 0x3d, 0xf4, 0x9b, 0xc1, 0xdf, 0x22,
+	0xf1, 0x97, 0x73, 0xfe, 0x3a, 0xf8, 0xfb, 0x40, 0xf2, 0xff, 0x1b, 0xfe,
+	0xee, 0xfb, 0x95, 0xf8, 0x7b, 0xfb, 0xff, 0x10, 0x7f, 0x07, 0x5b, 0xf0,
+	0x77, 0xe0, 0xd7, 0xc0, 0xdf, 0x1b, 0x82, 0x7e, 0xd4, 0x0f, 0xf6, 0xd9,
+	0xa4, 0xce, 0x2e, 0x9f, 0x8d, 0xbf, 0xa1, 0x0e, 0x51, 0xe7, 0x2c, 0xa3,
+	0x2c, 0x89, 0x40, 0x87, 0xbc, 0x6f, 0x2c, 0x97, 0x53, 0xa5, 0xc0, 0xa6,
+	0xdb, 0x82, 0xb6, 0x6c, 0xd7, 0x4a, 0x5f, 0xe6, 0x7f, 0x9d, 0xf4, 0xcb,
+	0xea, 0x8e, 0x27, 0x0f, 0x5a, 0x60, 0x58, 0xa6, 0xa4, 0xe7, 0x52, 0x32,
+	0xda, 0x54, 0xca, 0x84, 0xba, 0x11, 0xde, 0x8b, 0x53, 0xaf, 0x80, 0x77,
+	0x6f, 0x5d, 0x0d, 0xce, 0x83, 0xc4, 0xbb, 0x7c, 0x9c, 0x18, 0xe5, 0x8e,
+	0x13, 0xf7, 0x0e, 0xfa, 0xf7, 0x78, 0x05, 0xd9, 0xaf, 0xda, 0x07, 0x8d,
+	0x09, 0x8e, 0x99, 0x12, 0x8c, 0x25, 0x19, 0x3d, 0xb7, 0x86, 0xf7, 0x8a,
+	0x18, 0xeb, 0x6c, 0x30, 0x6f, 0x6e, 0x55, 0x39, 0xaf, 0xed, 0x76, 0xc6,
+	0xb4, 0x3d, 0xce, 0x38, 0xc6, 0xd5, 0x81, 0x21, 0xbc, 0x97, 0x8c, 0xab,
+	0x3b, 0x82, 0x72, 0x0a, 0xe7, 0x90, 0xe5, 0xb3, 0x54, 0x9f, 0xba, 0xb7,
+	0x3c, 0xd4, 0x5c, 0x27, 0xb5, 0x46, 0x68, 0x4b, 0x6a, 0x0c, 0x8c, 0xb5,
+	0x16, 0x6d, 0x49, 0xde, 0x3d, 0xf7, 0xb6, 0xcb, 0xd2, 0x4d, 0xba, 0x64,
+	0x64, 0xb7, 0x1b, 0xf6, 0xa3, 0x2c, 0x63, 0x38, 0x4b, 0x55, 0xb5, 0xdd,
+	0x2e, 0xcf, 0x53, 0x53, 0x5a, 0x7e, 0xf1, 0x25, 0xfc, 0xa6, 0xf1, 0x3b,
+	0x09, 0x3b, 0x3e, 0x02, 0xdb, 0xe4, 0xb9, 0xa3, 0x89, 0xef, 0x70, 0xdc,
+	0x56, 0x5b, 0xe7, 0x9c, 0x21, 0x6f, 0xd0, 0xa3, 0x79, 0xde, 0x59, 0x93,
+	0x07, 0xd6, 0xc1, 0x47, 0xcc, 0x2b, 0x3b, 0x96, 0xc3, 0xcd, 0x56, 0x7e,
+	0x8c, 0xe0, 0x2e, 0x34, 0x2c, 0x9f, 0xb9, 0xde, 0x2f, 0xf3, 0xfb, 0xe9,
+	0x40, 0xa6, 0x5f, 0x5c, 0x1f, 0x3c, 0x89, 0x60, 0x9c, 0xaf, 0xf8, 0x67,
+	0x55, 0x65, 0x9f, 0xe3, 0xc0, 0x13, 0xd6, 0x2d, 0xad, 0x29, 0xd8, 0xe1,
+	0xde, 0xdd, 0x8b, 0xba, 0x22, 0x7e, 0xe1, 0xdd, 0xf9, 0x5e, 0x7c, 0xe7,
+	0x03, 0x3a, 0x19, 0xf1, 0x71, 0x34, 0x3c, 0xab, 0x86, 0x67, 0xcd, 0xd6,
+	0xf5, 0xf3, 0x3c, 0x37, 0xa9, 0xd6, 0xba, 0x7b, 0xf1, 0x79, 0x9c, 0x01,
+	0xb9, 0x06, 0x9e, 0x05, 0xef, 0x01, 0x4e, 0xc7, 0x65, 0x29, 0x45, 0x7c,
+	0x9a, 0x47, 0xfb, 0xfb, 0xe4, 0x17, 0xeb, 0x19, 0x43, 0xdf, 0x79, 0xf2,
+	0x89, 0x6f, 0xca, 0x28, 0x7c, 0x23, 0x69, 0x7d, 0x4f, 0xf1, 0xc7, 0x1c,
+	0x5b, 0x1e, 0x33, 0x1c, 0x2f, 0x1c, 0x8b, 0x63, 0x9c, 0x0c, 0xc6, 0x58,
+	0x7e, 0x63, 0x99, 0xd6, 0x73, 0xbc, 0x9f, 0xd8, 0x9a, 0xa9, 0x09, 0xcf,
+	0x97, 0xd0, 0xa1, 0x65, 0x39, 0x87, 0x7c, 0x4b, 0x75, 0x85, 0xc6, 0x3f,
+	0xdf, 0x8d, 0xb9, 0xad, 0x77, 0xfe, 0x79, 0xad, 0xe8, 0xdc, 0xad, 0x8d,
+	0xce, 0x40, 0xfe, 0xf8, 0x8d, 0xcd, 0xf0, 0xce, 0x9b, 0xe7, 0x3d, 0xf5,
+	0x3e, 0x31, 0x50, 0x96, 0x4d, 0xe0, 0xed, 0x6b, 0xd0, 0xb1, 0xaa, 0x4c,
+	0xda, 0x9b, 0xa5, 0x3c, 0xd0, 0xe7, 0xfb, 0x37, 0xc8, 0x45, 0xb7, 0x9e,
+	0x42, 0xfd, 0x5a, 0xd4, 0xf1, 0xac, 0xba, 0x4e, 0xbd, 0x41, 0xe8, 0x56,
+	0x56, 0xbd, 0x3f, 0x94, 0x07, 0x20, 0xeb, 0x62, 0xbb, 0x2a, 0x97, 0x8a,
+	0xc4, 0xf6, 0x97, 0x36, 0xf8, 0xfb, 0x63, 0xa3, 0xbd, 0xb5, 0xfc, 0x5b,
+	0x28, 0x77, 0x82, 0x1e, 0x58, 0x55, 0xe4, 0xdd, 0x14, 0x75, 0x6f, 0xdf,
+	0x2a, 0x1a, 0x55, 0x06, 0x0d, 0xef, 0xa0, 0x47, 0x78, 0x57, 0x8a, 0xdf,
+	0xc3, 0xa8, 0xbb, 0x01, 0x75, 0xb4, 0xb7, 0x1b, 0x51, 0xbe, 0x1e, 0xbf,
+	0x7b, 0x83, 0x3b, 0xf7, 0xb0, 0xdf, 0x3d, 0xab, 0xc6, 0xd9, 0x8d, 0xf2,
+	0xed, 0xe8, 0x43, 0xbf, 0x5c, 0x05, 0xfd, 0xdf, 0x78, 0x65, 0xe0, 0x48,
+	0x61, 0x68, 0x37, 0x63, 0x33, 0xd0, 0xbd, 0xb0, 0x81, 0x6f, 0x23, 0x22,
+	0x6b, 0x57, 0x8d, 0xf3, 0x65, 0xa9, 0xa6, 0xd8, 0x3e, 0x8d, 0x32, 0xdf,
+	0x2e, 0x48, 0xc7, 0x73, 0x5f, 0xeb, 0xfe, 0x71, 0xbf, 0xb8, 0x77, 0xe1,
+	0x9e, 0x71, 0xbf, 0xbe, 0xd5, 0xe2, 0xa7, 0xbe, 0x1b, 0xf4, 0x65, 0xfb,
+	0x4d, 0x81, 0xbf, 0x6f, 0x53, 0x77, 0xe1, 0x38, 0x93, 0x07, 0xe5, 0xf0,
+	0x2e, 0xa5, 0x6d, 0xd5, 0x5d, 0x4a, 0x5b, 0x70, 0x47, 0x4b, 0x5a, 0x3d,
+	0xa0, 0x55, 0x6f, 0x7c, 0xa8, 0xcb, 0x04, 0xef, 0x2d, 0x29, 0xbe, 0xb7,
+	0xb4, 0xe8, 0x69, 0x9b, 0xd2, 0xa9, 0xa2, 0x4b, 0xbe, 0xc8, 0x03, 0xd7,
+	0x42, 0x3e, 0xc2, 0xb7, 0x97, 0x0f, 0x92, 0xfe, 0xdb, 0x0b, 0xc7, 0x31,
+	0xd5, 0x7d, 0x90, 0x2c, 0xbf, 0xf3, 0xfc, 0x43, 0x4b, 0x5b, 0x58, 0x47,
+	0xdd, 0x59, 0x79, 0xf7, 0xf1, 0xdf, 0x7c, 0x42, 0xdf, 0x8d, 0x32, 0xef,
+	0xe9, 0x24, 0x7c, 0xcf, 0xe1, 0x5d, 0x0c, 0xdf, 0x0d, 0x79, 0x77, 0xb4,
+	0x06, 0x27, 0x6e, 0x65, 0x96, 0x88, 0x41, 0x74, 0x9e, 0x37, 0x32, 0x38,
+	0x4b, 0xa7, 0x0f, 0xc8, 0x9f, 0x83, 0x9f, 0x3c, 0xb4, 0xc4, 0x7f, 0x87,
+	0x2a, 0x01, 0xe3, 0x96, 0x0c, 0xcf, 0xe3, 0x5b, 0xd7, 0x2c, 0xce, 0xfe,
+	0x0b, 0xbc, 0x9f, 0x69, 0xbe, 0xb1, 0x81, 0xf7, 0x61, 0x93, 0xd6, 0xca,
+	0x7d, 0x4f, 0x03, 0x34, 0x73, 0x68, 0x3b, 0xec, 0x63, 0x2a, 0x31, 0x1a,
+	0x78, 0x8f, 0x78, 0xc9, 0xfa, 0x4f, 0xaf, 0x9c, 0x6a, 0xa5, 0xf5, 0x04,
+	0xf1, 0x9b, 0x84, 0x6f, 0x97, 0x77, 0x6d, 0x6f, 0xc5, 0xa0, 0x01, 0x85,
+	0xb9, 0x15, 0xf5, 0x0e, 0xe8, 0xfb, 0x93, 0x0b, 0x38, 0xcb, 0x5f, 0x9a,
+	0xef, 0x90, 0x8b, 0x0d, 0x1f, 0x8f, 0x2e, 0x2a, 0x4c, 0x34, 0xe4, 0x5f,
+	0xe6, 0x2d, 0xb4, 0x0d, 0xe0, 0x97, 0x94, 0x5f, 0xcc, 0x87, 0x76, 0x17,
+	0xca, 0xe0, 0x0e, 0xc8, 0x3f, 0x19, 0xc8, 0xbf, 0x0b, 0x7e, 0x91, 0x6f,
+	0x6d, 0xfe, 0xbb, 0x44, 0x8d, 0x40, 0x15, 0xa7, 0x5c, 0x78, 0x5f, 0x1a,
+	0xde, 0xa3, 0xf7, 0x1b, 0x67, 0xe0, 0xc7, 0xee, 0x8c, 0x27, 0xa1, 0x3b,
+	0x3f, 0x0a, 0x30, 0x8d, 0x34, 0x21, 0xce, 0x50, 0x76, 0x3f, 0xc4, 0xd8,
+	0x36, 0xe2, 0xf8, 0x21, 0xc4, 0xf1, 0x59, 0x15, 0xe3, 0xbf, 0xea, 0x76,
+	0xc9, 0xbb, 0xd3, 0xe6, 0x74, 0x95, 0xf7, 0xd2, 0x88, 0xe3, 0xaa, 0x86,
+	0x79, 0x84, 0xf7, 0x0d, 0x67, 0xeb, 0xbc, 0x83, 0xa6, 0x3f, 0x68, 0x93,
+	0x59, 0xfb, 0x0d, 0x85, 0x77, 0x98, 0x27, 0x78, 0x77, 0xf9, 0xab, 0x14,
+	0x63, 0x8a, 0xbc, 0xb0, 0x8d, 0x77, 0xb7, 0x49, 0x99, 0xb3, 0x9b, 0xe8,
+	0x4b, 0x9a, 0x84, 0xf4, 0x4f, 0xb1, 0xef, 0x2b, 0xc0, 0x78, 0xcc, 0xe1,
+	0x0c, 0x81, 0x76, 0x04, 0xf5, 0x7c, 0xd7, 0x99, 0x43, 0x9d, 0x1a, 0x27,
+	0x93, 0xd1, 0x8d, 0xe0, 0x1e, 0xdd, 0x90, 0x86, 0xbb, 0x5e, 0xd9, 0x48,
+	0x5e, 0x4f, 0xc8, 0x96, 0xa9, 0x49, 0x29, 0x03, 0x2f, 0x4b, 0xea, 0xbd,
+	0x90, 0x6b, 0xf0, 0xef, 0xfe, 0xf2, 0x7a, 0xe6, 0xbf, 0xdd, 0xfd, 0xe5,
+	0x75, 0x8e, 0x7b, 0x54, 0xda, 0xac, 0x37, 0x53, 0xbc, 0x67, 0x6d, 0xb7,
+	0xc2, 0xfb, 0xfa, 0x1e, 0xf5, 0x36, 0xb1, 0x7c, 0x27, 0x6f, 0xa4, 0x5a,
+	0xee, 0xe3, 0x13, 0xc1, 0x7d, 0xfc, 0x9d, 0x29, 0xdf, 0xfe, 0x4a, 0x98,
+	0x8b, 0xfd, 0x3e, 0x0c, 0xee, 0xc4, 0xbf, 0x12, 0xdc, 0xaf, 0x26, 0x02,
+	0x7b, 0x88, 0xf1, 0x0e, 0x06, 0xfa, 0x0b, 0xec, 0x99, 0xb9, 0x4d, 0x2a,
+	0x33, 0x93, 0xb2, 0xdf, 0xe1, 0x9e, 0x10, 0xcb, 0xcc, 0xf4, 0xa3, 0x52,
+	0x4d, 0xc7, 0xc4, 0x1c, 0xe0, 0x9b, 0xd9, 0xbc, 0xac, 0x0b, 0xf4, 0x91,
+	0xf7, 0xd7, 0x58, 0x87, 0x7a, 0x6b, 0xe8, 0x37, 0x76, 0x23, 0xf6, 0x2a,
+	0x63, 0x6f, 0x4a, 0xca, 0x86, 0x58, 0xff, 0xbb, 0x98, 0xbb, 0xbf, 0xba,
+	0x9b, 0xfe, 0x15, 0xf1, 0x78, 0x11, 0x67, 0xa3, 0x39, 0xc4, 0xba, 0x8c,
+	0xad, 0x80, 0x1d, 0x40, 0x9d, 0x3e, 0xf0, 0x7e, 0x00, 0x34, 0x83, 0x06,
+	0x62, 0x26, 0x5d, 0xbf, 0x85, 0xb1, 0x1c, 0x72, 0xeb, 0x0f, 0xd9, 0xcf,
+	0x68, 0x83, 0xed, 0x56, 0xec, 0x18, 0xef, 0x91, 0x30, 0x36, 0x69, 0x99,
+	0x9b, 0xd5, 0xbc, 0x54, 0x81, 0x37, 0xf4, 0x2f, 0xd8, 0x4d, 0xcb, 0xb7,
+	0xf7, 0xbc, 0xae, 0xa9, 0xf7, 0x82, 0xb2, 0x5a, 0x63, 0x3e, 0x63, 0x08,
+	0xdf, 0x2b, 0xb9, 0x46, 0xc4, 0x71, 0x53, 0x8c, 0xbf, 0x79, 0x0f, 0x9f,
+	0x93, 0x83, 0x8b, 0x45, 0xf0, 0xd5, 0x2d, 0xfd, 0x2f, 0xf0, 0x2e, 0x0a,
+	0xf8, 0xe7, 0xb2, 0xcc, 0x37, 0x93, 0x47, 0xf0, 0x4d, 0xda, 0x34, 0x72,
+	0xee, 0x4f, 0x1f, 0x72, 0xca, 0x96, 0xf2, 0x81, 0x1e, 0xee, 0xcd, 0xc8,
+	0xec, 0xcc, 0x4e, 0x29, 0xcd, 0xed, 0xc4, 0xf8, 0xff, 0x04, 0x19, 0xde,
+	0x1a, 0xc8, 0x2f, 0x94, 0xe5, 0x8b, 0x29, 0xde, 0xc3, 0x6d, 0x99, 0x62,
+	0x3d, 0x73, 0xe0, 0x28, 0xce, 0x95, 0xbc, 0xe7, 0xaf, 0xa8, 0x77, 0x00,
+	0xe8, 0xb0, 0xdb, 0xfa, 0xb6, 0x9b, 0x04, 0xd6, 0xf0, 0xed, 0x35, 0x7c,
+	0x6b, 0x35, 0x8d, 0x82, 0x7a, 0x37, 0x1a, 0x68, 0x79, 0x7f, 0x4d, 0x88,
+	0x35, 0xd5, 0x29, 0x31, 0xde, 0xcf, 0xfa, 0xef, 0xaf, 0xea, 0x7d, 0x67,
+	0x54, 0xfe, 0x5e, 0xc6, 0x9a, 0xd4, 0xbf, 0x14, 0xce, 0x40, 0x3f, 0x47,
+	0x6c, 0xb4, 0x6e, 0xc3, 0x8a, 0x9e, 0xd0, 0x46, 0x3a, 0x5a, 0x6c, 0x83,
+	0x7a, 0x48, 0xfd, 0x84, 0x3d, 0x38, 0xb0, 0x07, 0x07, 0xb6, 0x00, 0x7e,
+	0xaa, 0x0a, 0x33, 0x46, 0x60, 0x2b, 0x1f, 0xc1, 0x56, 0xaa, 0x5a, 0x01,
+	0x47, 0xfb, 0x59, 0xd7, 0x93, 0xe7, 0xed, 0x6b, 0x6d, 0x7c, 0xcf, 0x35,
+	0xef, 0xc4, 0xe3, 0x72, 0xd8, 0x35, 0x61, 0x7f, 0xab, 0xdf, 0x89, 0x45,
+	0x5e, 0xc1, 0x59, 0xf3, 0xa4, 0xc3, 0xb6, 0xf0, 0x9d, 0x38, 0x7c, 0x23,
+	0xfe, 0xa9, 0xec, 0x3f, 0x26, 0xb2, 0x88, 0xf6, 0x05, 0x47, 0x57, 0xef,
+	0x08, 0x13, 0xee, 0x3a, 0x99, 0x6d, 0xe0, 0xdc, 0xeb, 0x48, 0xa9, 0x70,
+	0x2b, 0x71, 0x2e, 0x21, 0x17, 0x55, 0xcc, 0x22, 0xb2, 0xed, 0x54, 0x5c,
+	0xe2, 0xa7, 0x70, 0xc0, 0xc6, 0xfa, 0xd4, 0x9d, 0xf5, 0x72, 0x7c, 0x91,
+	0x93, 0x23, 0xe0, 0xbd, 0x36, 0x93, 0x52, 0xe7, 0xd1, 0x35, 0xb9, 0x17,
+	0x9f, 0xba, 0x6c, 0xf5, 0x1b, 0xe3, 0x42, 0x59, 0x7e, 0x22, 0x77, 0xdb,
+	0x47, 0xe4, 0x00, 0xf6, 0xf8, 0x30, 0xce, 0xc5, 0xf7, 0xc0, 0x56, 0x33,
+	0xeb, 0x69, 0xbf, 0x38, 0x57, 0x59, 0x3c, 0x5f, 0x7b, 0x32, 0x66, 0xdf,
+	0x6c, 0xfc, 0xa9, 0xf0, 0xef, 0x02, 0x88, 0x8b, 0xff, 0xe1, 0x31, 0xa6,
+	0xbf, 0x0c, 0x3f, 0x99, 0x57, 0x74, 0x9a, 0x4f, 0x37, 0x4d, 0xba, 0x41,
+	0xe3, 0x79, 0xd2, 0x35, 0xb4, 0x80, 0x4e, 0x03, 0x5d, 0x4c, 0xce, 0x50,
+	0x67, 0x53, 0x39, 0x9c, 0xbd, 0x70, 0xfe, 0xdf, 0x11, 0xbe, 0xa3, 0xae,
+	0x05, 0x96, 0xae, 0xf4, 0x3f, 0x1b, 0xf4, 0x3f, 0x14, 0xf4, 0x3f, 0xbf,
+	0xdc, 0x3f, 0xc4, 0xd3, 0x4f, 0x3d, 0x69, 0xe1, 0xeb, 0x6c, 0xdd, 0xa7,
+	0x3f, 0x12, 0xf0, 0x75, 0x7e, 0x99, 0xaf, 0x90, 0x3e, 0x87, 0xb5, 0x72,
+	0xcd, 0xc4, 0x5f, 0xe2, 0x70, 0x3f, 0xe4, 0xce, 0x58, 0x94, 0x6f, 0x31,
+	0xe6, 0x48, 0x55, 0xdd, 0xa7, 0xea, 0x88, 0x95, 0x8e, 0xc8, 0xb8, 0x65,
+	0x8e, 0x4c, 0xe0, 0x1c, 0x72, 0x91, 0xf1, 0x19, 0x6c, 0x79, 0x16, 0x76,
+	0xc3, 0xbc, 0x6c, 0x7f, 0x36, 0xaf, 0x97, 0x5a, 0x78, 0x8d, 0xbd, 0x4c,
+	0x1e, 0x7d, 0x5e, 0x13, 0x5b, 0x57, 0x78, 0xf5, 0xe9, 0x7d, 0x5e, 0x2f,
+	0xd5, 0x5b, 0xe8, 0x4f, 0xc5, 0x03, 0xfa, 0x78, 0x0b, 0xbd, 0x39, 0x5e,
+	0x85, 0x1f, 0xf9, 0x33, 0xe5, 0x2b, 0x3c, 0xef, 0x32, 0xfc, 0xc5, 0xf8,
+	0xb2, 0xbf, 0x18, 0xe7, 0xf9, 0x56, 0xf4, 0x53, 0x16, 0xca, 0x88, 0xa3,
+	0x4f, 0x65, 0x64, 0xcb, 0xd1, 0x84, 0xac, 0x59, 0x80, 0x8e, 0xbc, 0xdc,
+	0xab, 0x7c, 0x85, 0xfe, 0x72, 0x06, 0xf1, 0x13, 0xec, 0xe6, 0x68, 0x5c,
+	0xac, 0xa3, 0x0a, 0x73, 0xb0, 0xb6, 0x5d, 0x32, 0x71, 0x9c, 0xb6, 0x69,
+	0xc9, 0xd6, 0xa3, 0x5c, 0x3b, 0xcf, 0x69, 0x8d, 0x1d, 0x95, 0x3a, 0xdf,
+	0x95, 0x3b, 0x45, 0x5f, 0xf8, 0xa5, 0x54, 0x2c, 0xfa, 0xae, 0x6e, 0xe9,
+	0x58, 0x30, 0x24, 0xb6, 0x00, 0x6c, 0x5c, 0x48, 0x4b, 0x1b, 0xf4, 0x47,
+	0x3f, 0x95, 0xd2, 0x6a, 0xc7, 0x88, 0x75, 0xbc, 0x7f, 0x18, 0x40, 0x39,
+	0xad, 0xd5, 0xea, 0x43, 0xc8, 0xa9, 0x67, 0x80, 0xb9, 0x53, 0xd4, 0x2d,
+	0xf2, 0x61, 0xa9, 0x77, 0x37, 0xc6, 0x74, 0x5b, 0x4e, 0xa5, 0xd4, 0x3d,
+	0xc3, 0x65, 0x9b, 0x6b, 0xf9, 0x09, 0xce, 0x62, 0xe1, 0xdf, 0xed, 0xc8,
+	0x7a, 0x9c, 0xc6, 0x7a, 0x10, 0x63, 0x8c, 0x5c, 0x94, 0xcf, 0xbb, 0xae,
+	0xeb, 0x3e, 0xc7, 0xba, 0xb8, 0x8e, 0xd6, 0x75, 0x71, 0x4d, 0xdd, 0xd2,
+	0xa6, 0xd6, 0x15, 0xae, 0x07, 0x60, 0x8a, 0xf5, 0x6c, 0x39, 0x9a, 0xc6,
+	0xf8, 0x8f, 0x48, 0xad, 0x8e, 0xb8, 0xed, 0xd4, 0xc3, 0xc8, 0x11, 0x6e,
+	0x9c, 0xe2, 0xda, 0xb9, 0xd6, 0x5f, 0x48, 0xed, 0x58, 0xb8, 0xce, 0x12,
+	0xbe, 0xdf, 0x96, 0x89, 0x63, 0xde, 0x73, 0xc0, 0x6e, 0xde, 0x81, 0x24,
+	0x75, 0xa5, 0x27, 0xab, 0xd7, 0xfe, 0xb6, 0xf8, 0xf2, 0xe1, 0x7d, 0x3e,
+	0xbe, 0xe7, 0x57, 0xcb, 0xa2, 0xf5, 0x6f, 0x95, 0x2c, 0xbe, 0xfd, 0xa9,
+	0xf7, 0xa1, 0x82, 0xbd, 0x44, 0x59, 0x48, 0xb9, 0xb9, 0x49, 0xad, 0xcf,
+	0xff, 0x9b, 0x25, 0x5b, 0xd9, 0xab, 0xef, 0xd7, 0x87, 0xe4, 0x1b, 0xf0,
+	0x1b, 0x67, 0xed, 0x6b, 0x64, 0x54, 0x62, 0x9c, 0x30, 0xdb, 0x1c, 0x83,
+	0x2e, 0xc3, 0x97, 0x36, 0x0c, 0xb9, 0x58, 0x6f, 0x97, 0x59, 0xc4, 0x02,
+	0x73, 0x98, 0xb7, 0x56, 0x27, 0x1f, 0x1d, 0xa8, 0xf7, 0xe3, 0x06, 0x62,
+	0xc3, 0xc5, 0x3a, 0xb0, 0x17, 0x36, 0x71, 0x11, 0x7b, 0x3d, 0xdb, 0xec,
+	0x43, 0x6e, 0x21, 0xcf, 0x20, 0x1f, 0x40, 0x3e, 0x84, 0x7c, 0x08, 0x39,
+	0xf8, 0xaa, 0xa7, 0x91, 0x87, 0xf1, 0x21, 0xc7, 0x5a, 0x59, 0x43, 0xad,
+	0x99, 0x02, 0x1e, 0xb4, 0xc6, 0xe9, 0x15, 0x39, 0x33, 0x0d, 0xff, 0x6a,
+	0xf3, 0x6c, 0x4a, 0x7b, 0x7a, 0x46, 0xce, 0xd4, 0x89, 0xe5, 0xf4, 0x0f,
+	0xf8, 0x6e, 0xb2, 0x9d, 0xfd, 0x91, 0x37, 0xfa, 0x61, 0x2f, 0xc4, 0x1a,
+	0xc4, 0x7f, 0xdb, 0x81, 0xa9, 0xfa, 0xcf, 0x36, 0x4a, 0x77, 0x0d, 0xb8,
+	0x4a, 0x1d, 0xa9, 0x40, 0x37, 0xf8, 0x2e, 0xc9, 0xf3, 0xf0, 0x98, 0x54,
+	0xe7, 0x86, 0x40, 0xb7, 0x4a, 0x27, 0x4e, 0xd7, 0x4a, 0x2a, 0xbe, 0x3f,
+	0xe1, 0xaf, 0x49, 0x9f, 0x4d, 0x48, 0x19, 0x6b, 0xd2, 0x4f, 0xc3, 0x47,
+	0x61, 0x4d, 0xfa, 0xe9, 0x14, 0x72, 0xec, 0xe9, 0x69, 0xf8, 0x1b, 0xac,
+	0x4d, 0x3f, 0x0d, 0x5f, 0x81, 0xb5, 0xe9, 0xa7, 0x07, 0x90, 0x63, 0xaf,
+	0x4e, 0x87, 0x6b, 0xe2, 0xf8, 0xe4, 0x23, 0x8c, 0x21, 0x2b, 0x52, 0x9e,
+	0x66, 0x8c, 0x43, 0x9c, 0xc5, 0x77, 0x63, 0x97, 0xd4, 0x8e, 0xe7, 0xb0,
+	0xce, 0x14, 0xb0, 0x69, 0x40, 0x26, 0x66, 0xfa, 0x8d, 0x3d, 0xd0, 0xaf,
+	0xda, 0xe2, 0x3f, 0x4b, 0x63, 0xbe, 0x22, 0xf3, 0xe0, 0xb3, 0xe6, 0x00,
+	0x47, 0xfe, 0xab, 0x73, 0xab, 0x8d, 0x6d, 0xe3, 0xac, 0xe3, 0xff, 0x3b,
+	0x3b, 0xa9, 0x1b, 0x9a, 0xf4, 0x92, 0x38, 0x89, 0xd3, 0x06, 0x66, 0xd7,
+	0x97, 0x26, 0x23, 0xde, 0xb8, 0xb6, 0x16, 0x0b, 0xc5, 0x5a, 0x3c, 0xa7,
+	0x49, 0xbb, 0x31, 0xa1, 0xb4, 0x0b, 0xd3, 0x26, 0xf1, 0xc1, 0x73, 0xba,
+	0xd1, 0x7d, 0x1a, 0xa3, 0x93, 0x8a, 0x50, 0x45, 0x2d, 0xc7, 0xd1, 0x32,
+	0xe4, 0xd9, 0x59, 0x09, 0xac, 0x42, 0x13, 0xf2, 0x1c, 0xd3, 0x0e, 0x29,
+	0x8a, 0x3b, 0xf6, 0x0a, 0x5a, 0x69, 0x49, 0xb7, 0x69, 0x12, 0x48, 0xd3,
+	0xbe, 0x20, 0x3e, 0x20, 0x51, 0x55, 0x1d, 0x13, 0x12, 0x12, 0x48, 0x13,
+	0x12, 0x68, 0x94, 0xe3, 0xf7, 0x7b, 0x9e, 0xbb, 0xc4, 0xf1, 0x8a, 0x26,
+	0xf1, 0xc1, 0xf2, 0x3d, 0x2f, 0xf7, 0xbc, 0xfc, 0xdf, 0xdf, 0xae, 0x71,
+	0x59, 0xe1, 0x7a, 0x5a, 0xec, 0xe8, 0xbc, 0xa0, 0x0f, 0xb0, 0xa8, 0x57,
+	0x79, 0x97, 0x4b, 0x92, 0x56, 0xff, 0x84, 0xd9, 0xaf, 0x25, 0x5d, 0x0f,
+	0xcb, 0x0f, 0x2a, 0xcd, 0xf9, 0x38, 0xca, 0xdd, 0x88, 0xca, 0xbb, 0x3c,
+	0xf3, 0xc3, 0x1b, 0x92, 0xf9, 0x91, 0x2b, 0x1f, 0x38, 0x63, 0x91, 0xed,
+	0x06, 0x6b, 0x95, 0x5c, 0x59, 0x05, 0x8d, 0x1d, 0x76, 0x62, 0x0f, 0xb1,
+	0x76, 0x2e, 0x1b, 0x76, 0xa5, 0x7d, 0x5f, 0xcc, 0x89, 0x1a, 0xf1, 0x87,
+	0xb6, 0x1b, 0xa4, 0xf1, 0x31, 0xeb, 0x04, 0x64, 0x98, 0xb6, 0xb5, 0xb7,
+	0xc9, 0x09, 0xe5, 0x4b, 0x82, 0x6e, 0xcb, 0x9f, 0xa8, 0xb8, 0xea, 0x47,
+	0x49, 0xc2, 0x1a, 0xed, 0x35, 0xe5, 0x0f, 0x86, 0x3e, 0x4a, 0xb6, 0x49,
+	0xa1, 0xcf, 0x75, 0x1f, 0xdd, 0x37, 0xdb, 0xa7, 0x6d, 0xf8, 0xe7, 0xfa,
+	0x75, 0xcd, 0xd3, 0x82, 0xd7, 0x3e, 0x02, 0x7e, 0x69, 0xa6, 0xcb, 0x88,
+	0x57, 0x43, 0x47, 0x3a, 0x24, 0x2f, 0x91, 0x0f, 0x2c, 0xc9, 0xd5, 0x7d,
+	0x9a, 0x24, 0xfc, 0xc8, 0x0f, 0xc4, 0x2f, 0xfe, 0xeb, 0x7c, 0x26, 0xaf,
+	0x2d, 0x82, 0xd7, 0xc8, 0x1f, 0x3b, 0x65, 0x92, 0xf1, 0x24, 0x53, 0xf5,
+	0xe7, 0xb5, 0x5d, 0xe4, 0xcd, 0x5b, 0xca, 0xca, 0xfc, 0x12, 0x75, 0xcb,
+	0x3a, 0xe8, 0x7d, 0x04, 0xde, 0x18, 0xe9, 0xfe, 0x0c, 0xf8, 0x97, 0xf1,
+	0x44, 0x8c, 0x55, 0x95, 0xbd, 0x3f, 0x1a, 0x35, 0x9b, 0x73, 0x7f, 0xff,
+	0xea, 0x63, 0x2c, 0xf1, 0xd2, 0x08, 0xe8, 0xe3, 0x39, 0xea, 0xcb, 0x61,
+	0x45, 0x4b, 0x99, 0x17, 0x89, 0x23, 0xd7, 0x3d, 0xe2, 0x40, 0x9c, 0x76,
+	0x0f, 0x01, 0x47, 0x9a, 0xef, 0xbf, 0x06, 0xf8, 0x4d, 0x3b, 0x37, 0xc8,
+	0xab, 0x7f, 0x33, 0xed, 0xb1, 0xd1, 0x13, 0x06, 0x63, 0x16, 0x68, 0xd7,
+	0x03, 0x52, 0x0d, 0x13, 0x4e, 0x80, 0xab, 0x41, 0x9b, 0xec, 0x56, 0xf0,
+	0x6a, 0x85, 0xd5, 0x2f, 0x01, 0x2b, 0xc2, 0xdc, 0x87, 0x15, 0x9f, 0x53,
+	0xc0, 0xeb, 0x41, 0xc9, 0x5f, 0xa0, 0x8c, 0xc1, 0x73, 0x43, 0xef, 0x5d,
+	0xa8, 0x34, 0x9f, 0x99, 0xe7, 0x25, 0xee, 0x2f, 0xc9, 0x64, 0x95, 0xfc,
+	0xc9, 0xbc, 0x34, 0x79, 0x26, 0xe8, 0x70, 0xaf, 0x4c, 0xc2, 0xaf, 0x4f,
+	0xfb, 0x8f, 0x6b, 0xd9, 0xf4, 0xfd, 0xf3, 0xc6, 0x94, 0xca, 0xcf, 0x2d,
+	0x41, 0xef, 0xff, 0x1e, 0x7b, 0x32, 0x06, 0xc7, 0xf6, 0x32, 0xda, 0x7c,
+	0x66, 0x1c, 0xb6, 0xa8, 0xf8, 0x64, 0x1e, 0xb2, 0xd4, 0xb2, 0x73, 0xa0,
+	0xd7, 0x9d, 0x80, 0x23, 0xf8, 0x25, 0x89, 0xe7, 0x2a, 0xf9, 0x48, 0xe9,
+	0x0b, 0x6b, 0xb3, 0x86, 0xcd, 0xb7, 0xdb, 0x6d, 0xbc, 0x43, 0xda, 0xf3,
+	0x63, 0xf0, 0xdc, 0x7b, 0x08, 0x7b, 0x77, 0x62, 0x8d, 0xd8, 0x52, 0x55,
+	0x48, 0x7b, 0x67, 0x94, 0x9f, 0x40, 0x7c, 0x2f, 0xe0, 0x1e, 0x93, 0x65,
+	0xd2, 0xe1, 0x69, 0xf8, 0x3b, 0xf0, 0xed, 0xc2, 0xf4, 0x7d, 0xe7, 0xa4,
+	0x46, 0x1e, 0x4f, 0xba, 0x38, 0x1b, 0x9e, 0xab, 0xef, 0xf4, 0x4b, 0x17,
+	0xee, 0xb5, 0xe2, 0x02, 0x86, 0x87, 0xe1, 0x5f, 0xb8, 0x6e, 0xd0, 0x9e,
+	0x92, 0xe8, 0x31, 0xea, 0x36, 0xc1, 0xfb, 0x3a, 0xd6, 0x4d, 0xbb, 0x35,
+	0x3d, 0xa3, 0x72, 0xe1, 0x80, 0x5d, 0xd7, 0x80, 0x74, 0xf4, 0x89, 0x8e,
+	0x5b, 0x6d, 0x57, 0xb5, 0x2e, 0x53, 0xe5, 0x98, 0xaa, 0xb9, 0x33, 0xed,
+	0xe6, 0xf5, 0x0e, 0x78, 0xeb, 0x71, 0xdc, 0x14, 0x1d, 0xdf, 0xeb, 0xd7,
+	0x71, 0x39, 0xc6, 0x5f, 0x00, 0xe3, 0x75, 0xf0, 0xfc, 0x55, 0xf0, 0xfb,
+	0xdb, 0x25, 0xe2, 0x60, 0x0c, 0x32, 0x9f, 0x3e, 0x3d, 0xd7, 0x4a, 0xa8,
+	0xbd, 0xd7, 0x4b, 0x01, 0xcf, 0xbf, 0x9e, 0x18, 0xa0, 0x6d, 0xaf, 0xe2,
+	0x72, 0x6a, 0x9d, 0x21, 0x3d, 0x4f, 0xfc, 0xb1, 0x5e, 0x75, 0x9e, 0x9a,
+	0x8a, 0x8d, 0x11, 0x4e, 0xa0, 0xf3, 0x52, 0xaf, 0x37, 0xe7, 0x2b, 0x03,
+	0x9a, 0x4f, 0xd8, 0xc7, 0x7b, 0x24, 0x24, 0x53, 0xf6, 0xdf, 0xeb, 0x56,
+	0xf1, 0x80, 0xcd, 0xb5, 0x06, 0x5a, 0xee, 0x60, 0x7a, 0x77, 0xe0, 0x38,
+	0x60, 0xbd, 0x25, 0x67, 0xe2, 0xdb, 0x89, 0xa4, 0x11, 0xe2, 0xf3, 0x0f,
+	0xc0, 0x4d, 0x6b, 0x9e, 0x84, 0x38, 0xb2, 0x81, 0x23, 0xca, 0xa5, 0x84,
+	0x3c, 0x07, 0x9c, 0xf7, 0xd8, 0xc4, 0xb5, 0xc8, 0xf0, 0x59, 0xca, 0x27,
+	0x0b, 0xb6, 0x70, 0xec, 0x5c, 0x5e, 0x26, 0xe4, 0xa2, 0xd3, 0x2e, 0xc7,
+	0xac, 0x58, 0x35, 0x1b, 0xe8, 0x6c, 0x3a, 0xc3, 0x2c, 0xfa, 0xb8, 0x3f,
+	0xd7, 0x8f, 0x60, 0xee, 0x69, 0x99, 0x2b, 0x6d, 0xa3, 0x1f, 0x18, 0xcd,
+	0x9a, 0x5d, 0x2d, 0x67, 0xbd, 0xd7, 0x3b, 0x6b, 0x14, 0x36, 0x2d, 0xec,
+	0xc4, 0x1e, 0xbe, 0xc3, 0x7d, 0x89, 0x6f, 0xee, 0x95, 0x04, 0x4d, 0x44,
+	0x21, 0xb7, 0x89, 0x59, 0x8c, 0x3f, 0xa8, 0xec, 0x24, 0xac, 0xb3, 0x04,
+	0x38, 0x74, 0xa8, 0xf8, 0xdd, 0xfc, 0x8f, 0xb3, 0x9e, 0x1e, 0x63, 0x6d,
+	0x25, 0x74, 0x44, 0xe5, 0x26, 0xd6, 0x7b, 0x03, 0xe3, 0xe4, 0x0f, 0xd2,
+	0x71, 0x09, 0x74, 0x3c, 0x06, 0x3f, 0x83, 0xf1, 0x42, 0xbe, 0x4b, 0x7b,
+	0x7a, 0x1a, 0x67, 0x60, 0xac, 0xe2, 0x0d, 0x0d, 0x67, 0xb9, 0xa3, 0xe5,
+	0x5c, 0x71, 0xef, 0x5c, 0xfe, 0x78, 0x9b, 0x04, 0xfb, 0xc9, 0xe3, 0x61,
+	0xd8, 0xe8, 0xd4, 0xd1, 0x90, 0xf1, 0x33, 0x5c, 0xeb, 0xb3, 0x65, 0x51,
+	0xf6, 0xff, 0x94, 0x45, 0x59, 0x13, 0xb2, 0x07, 0x67, 0x6c, 0x53, 0x78,
+	0x04, 0x3e, 0x6e, 0x99, 0x03, 0xf3, 0xf1, 0x39, 0xea, 0xe1, 0xb3, 0xb9,
+	0xfe, 0x54, 0xe3, 0xef, 0xe9, 0x0a, 0xf9, 0x29, 0xad, 0xea, 0x63, 0xff,
+	0x5c, 0x22, 0x4c, 0x79, 0xc6, 0x8b, 0x3c, 0xe3, 0xc4, 0xba, 0xc3, 0xdc,
+	0xc6, 0xd7, 0x41, 0x7f, 0x0e, 0xe0, 0x9c, 0xc7, 0xbd, 0x3a, 0x61, 0x33,
+	0xdb, 0xca, 0x26, 0xcd, 0x38, 0xf7, 0x7a, 0x74, 0x5d, 0xe8, 0x6d, 0x87,
+	0x2e, 0x38, 0xe2, 0x98, 0xaa, 0x56, 0xc5, 0xfc, 0x06, 0xfb, 0xe0, 0xbb,
+	0x2d, 0x93, 0x5f, 0xe3, 0x90, 0x2d, 0x61, 0xa3, 0x56, 0x17, 0xac, 0xcd,
+	0xb8, 0xe8, 0x84, 0x30, 0x5f, 0x36, 0x69, 0xc1, 0x72, 0x4d, 0x45, 0x60,
+	0x63, 0x92, 0x8f, 0x59, 0xf3, 0xd9, 0x8a, 0xf7, 0x71, 0x0f, 0xbe, 0xad,
+	0xf8, 0xfe, 0xf7, 0x00, 0x0b, 0x17, 0xe6, 0x2b, 0xb6, 0x75, 0x15, 0x72,
+	0x67, 0x32, 0xcc, 0xe7, 0x1c, 0xf8, 0x9f, 0xf2, 0x26, 0xaa, 0xe4, 0x4d,
+	0xad, 0x3a, 0x2e, 0x8b, 0x2b, 0xec, 0xa7, 0x0c, 0xf1, 0x65, 0x47, 0x52,
+	0xd1, 0x5a, 0x56, 0xf1, 0x9d, 0x03, 0x3c, 0x59, 0xb0, 0x1b, 0x78, 0x37,
+	0xfa, 0xf8, 0x11, 0xaf, 0x2e, 0xb3, 0x79, 0xff, 0x88, 0xb7, 0x3f, 0x1e,
+	0x14, 0x7e, 0x39, 0xdf, 0x83, 0xb5, 0x19, 0x57, 0xbe, 0xd0, 0x7c, 0x85,
+	0xf4, 0x41, 0x3a, 0x01, 0x0f, 0xae, 0xfa, 0xf3, 0x7c, 0x9c, 0xf8, 0x6d,
+	0xce, 0xef, 0x54, 0x3e, 0x90, 0x96, 0x7b, 0x94, 0x79, 0xd8, 0xa7, 0x83,
+	0xfb, 0xf8, 0x7d, 0x3e, 0x8e, 0xfc, 0x38, 0x46, 0x14, 0x7c, 0xc6, 0x18,
+	0x86, 0x23, 0xaf, 0xc3, 0xb6, 0x7a, 0xad, 0x31, 0x0a, 0xfe, 0xb3, 0xc1,
+	0x7f, 0x43, 0xe0, 0xbd, 0x88, 0xaa, 0xe5, 0x9d, 0xae, 0xf8, 0xf6, 0x23,
+	0x71, 0xa2, 0x7c, 0xb4, 0xc8, 0x55, 0xd0, 0xc7, 0xa3, 0x4e, 0x6c, 0x74,
+	0x2a, 0x40, 0x9d, 0xd2, 0xa1, 0xe4, 0xd1, 0x64, 0x23, 0x36, 0x5a, 0x13,
+	0xc2, 0x87, 0x71, 0x10, 0xe0, 0xa3, 0x41, 0xbc, 0x99, 0xa0, 0xa5, 0x71,
+	0xec, 0xff, 0x16, 0xfa, 0x4d, 0x2f, 0x16, 0x90, 0x64, 0x6d, 0x12, 0x71,
+	0x05, 0xfe, 0x80, 0x4d, 0xb1, 0x32, 0x0e, 0xbd, 0xc1, 0xdc, 0x21, 0x6d,
+	0x91, 0x94, 0xaa, 0x8f, 0x31, 0xed, 0xa1, 0x40, 0xce, 0x4a, 0x01, 0x76,
+	0x41, 0x39, 0x54, 0x1e, 0x0c, 0xe4, 0x67, 0x52, 0x0a, 0x8e, 0x19, 0xd0,
+	0xfb, 0xbc, 0x73, 0x50, 0x8a, 0x17, 0x5c, 0x33, 0x6b, 0xd1, 0xce, 0x20,
+	0x1f, 0x50, 0x17, 0xce, 0x81, 0x8e, 0x29, 0x4f, 0xb9, 0xe7, 0xfb, 0x66,
+	0x3a, 0x7c, 0x50, 0x16, 0x9e, 0xe7, 0xba, 0xa4, 0x13, 0xd7, 0x7d, 0xdd,
+	0xa1, 0xfc, 0x66, 0x5e, 0x91, 0xfe, 0xce, 0x4d, 0xcc, 0x1f, 0xdc, 0xad,
+	0x79, 0x92, 0x3a, 0x6c, 0xcc, 0x5a, 0x37, 0x5f, 0xc4, 0x3b, 0x69, 0xac,
+	0xf5, 0xd7, 0xb0, 0xd6, 0x1f, 0xb4, 0x75, 0x58, 0x73, 0x72, 0xee, 0x54,
+	0x11, 0xfe, 0xad, 0x69, 0xdf, 0x89, 0xf7, 0x13, 0x52, 0x04, 0x0f, 0x77,
+	0xa4, 0xde, 0x3b, 0x75, 0xdf, 0xb3, 0xe4, 0x3b, 0xd8, 0x90, 0x0d, 0xfa,
+	0x49, 0x5f, 0x02, 0x0e, 0x58, 0xdf, 0x72, 0xee, 0xe4, 0xed, 0xc3, 0xae,
+	0x84, 0xb0, 0x5f, 0x3b, 0xeb, 0xc1, 0x97, 0x18, 0x07, 0x33, 0xf7, 0xb4,
+	0xcb, 0x5e, 0xf8, 0xad, 0x3c, 0x57, 0x73, 0x5d, 0x8b, 0x0b, 0xf8, 0xd1,
+	0x2f, 0xfa, 0x87, 0xfb, 0x52, 0x78, 0xaf, 0x53, 0x00, 0xdf, 0xb5, 0x03,
+	0x66, 0xb5, 0x86, 0x5a, 0x73, 0x94, 0x34, 0x70, 0x01, 0x3c, 0x74, 0x7e,
+	0x24, 0x6e, 0xbd, 0x03, 0x7a, 0x3f, 0xb4, 0x64, 0x48, 0xcd, 0x8e, 0x45,
+	0x2e, 0x60, 0x9d, 0x29, 0xc8, 0x96, 0x5a, 0x82, 0xfe, 0x11, 0x6c, 0x93,
+	0x2a, 0x63, 0x08, 0xdb, 0x24, 0xd3, 0xdd, 0xa6, 0xe8, 0x2a, 0xbd, 0x85,
+	0xae, 0x8e, 0xfb, 0xfa, 0x03, 0x72, 0xe7, 0x85, 0x53, 0x99, 0xa5, 0xed,
+	0x2a, 0x86, 0x43, 0x99, 0x95, 0x36, 0x77, 0xb4, 0xf0, 0xc0, 0xc3, 0x1b,
+	0x3c, 0x40, 0x5b, 0x3c, 0xbf, 0x42, 0x9c, 0xbf, 0x70, 0x0a, 0x38, 0x97,
+	0x43, 0x38, 0xab, 0x99, 0x62, 0xee, 0x91, 0xb8, 0x1e, 0x83, 0x7d, 0x17,
+	0x92, 0xbc, 0x95, 0x64, 0x5d, 0x36, 0xd6, 0x19, 0x6c, 0x59, 0xc7, 0xd7,
+	0x81, 0x29, 0xf0, 0x3a, 0xed, 0x12, 0x2d, 0x33, 0x9f, 0x6e, 0xc4, 0xa3,
+	0x87, 0xe5, 0xab, 0x90, 0x9d, 0xc4, 0x5d, 0x58, 0xf9, 0xd1, 0x35, 0xf8,
+	0x9b, 0xa6, 0xbc, 0xa5, 0xea, 0xe8, 0x67, 0x40, 0x4b, 0x17, 0xa5, 0x10,
+	0x09, 0xc0, 0x7f, 0x3c, 0x09, 0x38, 0xf5, 0x0a, 0x69, 0xc9, 0xa7, 0xbb,
+	0x23, 0xca, 0x6f, 0x2a, 0x3a, 0x63, 0xd1, 0x05, 0xe5, 0x6b, 0x74, 0x63,
+	0xff, 0x45, 0xc8, 0x39, 0xe0, 0xa3, 0xd2, 0x25, 0x05, 0xcb, 0x98, 0x08,
+	0xa4, 0x54, 0x7d, 0xe1, 0xa9, 0x8c, 0xb2, 0xcf, 0x65, 0x38, 0x90, 0x6a,
+	0x07, 0xbf, 0xba, 0xf2, 0x21, 0xac, 0x9b, 0x42, 0x69, 0x11, 0xb6, 0x37,
+	0x79, 0xea, 0x2f, 0xe0, 0x93, 0x73, 0x78, 0xbe, 0x9d, 0x36, 0x8c, 0x43,
+	0x7d, 0x44, 0x7f, 0x7f, 0xa1, 0x92, 0x06, 0x7f, 0xc5, 0xc6, 0x4d, 0x33,
+	0xa5, 0xee, 0xfe, 0xf4, 0xca, 0x0d, 0xa9, 0x2f, 0x33, 0xb6, 0x90, 0xa4,
+	0xad, 0x6d, 0x15, 0x93, 0x69, 0xde, 0xd5, 0x99, 0x81, 0xed, 0x54, 0xaf,
+	0x77, 0x49, 0xb6, 0x07, 0xf6, 0x30, 0x68, 0xf4, 0xba, 0x8d, 0xf7, 0x31,
+	0xb7, 0xb6, 0x1c, 0x94, 0xab, 0x36, 0x6d, 0x60, 0x89, 0x66, 0x92, 0x68,
+	0xd7, 0xdb, 0x07, 0x35, 0x3f, 0x6a, 0xdb, 0x38, 0xdf, 0x88, 0x59, 0x87,
+	0x95, 0x4d, 0xcc, 0x3e, 0xd7, 0x0d, 0xdb, 0xdd, 0xe6, 0xb2, 0xe5, 0xaa,
+	0xd8, 0x4c, 0x28, 0xf5, 0xd2, 0xa9, 0xd0, 0xb3, 0x3c, 0xfb, 0xc5, 0x7d,
+	0x3a, 0xff, 0x7d, 0xee, 0xd4, 0xdc, 0x92, 0x3b, 0x11, 0xdc, 0x37, 0x66,
+	0x15, 0x58, 0x3b, 0x69, 0x4d, 0xc8, 0xb7, 0x1c, 0x8e, 0xbf, 0x84, 0xf1,
+	0x23, 0xf4, 0x17, 0x62, 0x41, 0x55, 0xaf, 0x19, 0x8b, 0x1c, 0x07, 0x0f,
+	0xe6, 0x00, 0xb7, 0x4c, 0x60, 0x07, 0xed, 0x0a, 0xc0, 0x2b, 0x2f, 0x3a,
+	0x8f, 0xf0, 0x5d, 0x79, 0xcc, 0x19, 0x76, 0xd6, 0x25, 0xef, 0x6a, 0x1b,
+	0x83, 0x31, 0x9f, 0x6d, 0x72, 0xdc, 0x09, 0x86, 0x32, 0x0d, 0x8d, 0xff,
+	0x43, 0x81, 0xf4, 0xf6, 0xa2, 0x1d, 0x0e, 0x4d, 0x83, 0xd7, 0x17, 0xc0,
+	0xfb, 0xc5, 0x46, 0xc4, 0x98, 0x5c, 0x25, 0xbf, 0xb0, 0xfe, 0xe0, 0x7d,
+	0x23, 0xa7, 0x6c, 0xe9, 0xbd, 0xf8, 0x7d, 0x60, 0x5c, 0xb7, 0x46, 0xe4,
+	0xfa, 0x28, 0x6c, 0x01, 0x6b, 0x3f, 0xda, 0x7b, 0xf0, 0xfb, 0x1d, 0xfa,
+	0xe2, 0xe8, 0x0b, 0x29, 0x5b, 0x41, 0xd9, 0xdc, 0xf6, 0x9b, 0xe8, 0x8b,
+	0xe1, 0xff, 0x30, 0xff, 0x41, 0x17, 0x9f, 0xec, 0x92, 0x0e, 0xe6, 0x1b,
+	0x7e, 0x83, 0xf6, 0xb0, 0xaa, 0xbd, 0xdd, 0xda, 0xbf, 0x86, 0xfe, 0x03,
+	0x58, 0xa3, 0x5d, 0xdd, 0xd1, 0xb4, 0xf7, 0xe1, 0xf7, 0x93, 0x96, 0x39,
+	0x3f, 0x6b, 0x59, 0x2b, 0x21, 0x4b, 0x15, 0x5f, 0x5f, 0x50, 0x47, 0x58,
+	0x12, 0x2c, 0xb3, 0xe6, 0x3b, 0x2c, 0xaf, 0x40, 0x7f, 0x14, 0x94, 0xfe,
+	0x88, 0xca, 0xcb, 0xa5, 0x8a, 0x41, 0x5d, 0x91, 0x36, 0xa9, 0x3f, 0x34,
+	0x0c, 0xb4, 0x0e, 0x79, 0xc6, 0xeb, 0x2f, 0xf4, 0x06, 0xc1, 0x53, 0x19,
+	0x67, 0xc1, 0xa0, 0x0e, 0x4e, 0x43, 0x7f, 0xac, 0x2c, 0x6b, 0x59, 0x14,
+	0x2c, 0x87, 0x8d, 0xc9, 0x3a, 0x78, 0xaa, 0x14, 0x8f, 0xe4, 0xcc, 0x80,
+	0x1c, 0x57, 0xfb, 0x9f, 0x06, 0x3e, 0x6f, 0x53, 0x79, 0x12, 0xc0, 0x0e,
+	0xf0, 0x1c, 0xb3, 0x72, 0x66, 0xc8, 0xb3, 0x93, 0x38, 0x1e, 0x69, 0xe2,
+	0x81, 0xa7, 0x8c, 0x59, 0x2d, 0xcb, 0x31, 0x96, 0x54, 0x32, 0x2b, 0x57,
+	0x62, 0xdd, 0x37, 0xeb, 0x70, 0x29, 0xbb, 0xb9, 0x4f, 0x54, 0x9e, 0x5c,
+	0x3d, 0x21, 0xb4, 0x03, 0x8e, 0x2a, 0x9d, 0xe0, 0x78, 0xeb, 0x7c, 0xbe,
+	0x85, 0x97, 0x1e, 0x31, 0x34, 0x2f, 0x71, 0x1c, 0x70, 0x2e, 0xdb, 0x1b,
+	0xb6, 0x0b, 0xcf, 0xbc, 0x75, 0xee, 0x83, 0xde, 0x5c, 0x1b, 0x7b, 0xda,
+	0x4a, 0x7f, 0xb0, 0x5e, 0xb8, 0x00, 0x1f, 0xf7, 0x40, 0x0f, 0xf7, 0xe4,
+	0x7e, 0x5d, 0xb2, 0xe7, 0x41, 0xf8, 0x8e, 0x65, 0xfe, 0xf2, 0xd0, 0x89,
+	0x84, 0x4b, 0x27, 0xe4, 0xf1, 0xae, 0x5b, 0xc8, 0x8e, 0x8c, 0xb7, 0xde,
+	0xaf, 0x06, 0x99, 0x13, 0xd9, 0x9c, 0xcf, 0x18, 0x2a, 0xdb, 0x51, 0xc9,
+	0xaf, 0xf2, 0xdf, 0x75, 0xbb, 0xed, 0x2e, 0x39, 0x6a, 0x11, 0x2f, 0xbe,
+	0xdd, 0xce, 0x79, 0xbb, 0x21, 0xdf, 0x69, 0xab, 0x1f, 0x82, 0x7c, 0xe7,
+	0xba, 0x5c, 0xff, 0x0e, 0xe3, 0xa8, 0x5a, 0xf3, 0xb7, 0x83, 0x8c, 0x19,
+	0x07, 0xca, 0x94, 0xf7, 0xfc, 0x37, 0x3c, 0x1b, 0xb9, 0x47, 0xe7, 0x7c,
+	0x52, 0x7e, 0x3e, 0x97, 0xef, 0xec, 0x6a, 0xb9, 0xe7, 0x90, 0xe1, 0xdb,
+	0x93, 0x69, 0xda, 0x4e, 0xe6, 0x87, 0x9e, 0xed, 0xc4, 0xb1, 0x3e, 0x6f,
+	0xcc, 0x90, 0x3e, 0x05, 0xff, 0x98, 0x53, 0x35, 0x39, 0xef, 0xcb, 0x92,
+	0x5b, 0xa6, 0x9e, 0x24, 0x4c, 0xfe, 0x04, 0x5a, 0x42, 0xbb, 0xde, 0x4c,
+	0x4b, 0x96, 0xf4, 0x96, 0xdd, 0x89, 0xdc, 0x7e, 0xd2, 0xcf, 0x33, 0x0a,
+	0x1f, 0x45, 0xcf, 0xfe, 0x98, 0xdf, 0xb0, 0x3f, 0x8a, 0xe8, 0xa7, 0x6e,
+	0x2d, 0xf4, 0xf6, 0x2a, 0xda, 0xa1, 0x1f, 0x73, 0x06, 0x32, 0x86, 0x7d,
+	0x9d, 0xd0, 0x3d, 0x21, 0x55, 0xff, 0x99, 0x9e, 0x4d, 0x7a, 0xf2, 0xd5,
+	0xda, 0x45, 0xdb, 0x81, 0xf6, 0x36, 0xbf, 0x37, 0x08, 0x94, 0xfd, 0xbe,
+	0x11, 0xc5, 0x2f, 0x05, 0xda, 0x21, 0xb3, 0x3a, 0x56, 0x1f, 0x28, 0x13,
+	0x5f, 0xdb, 0x61, 0xc3, 0x11, 0x9e, 0x3a, 0x46, 0xbf, 0x79, 0xe7, 0x27,
+	0x65, 0x56, 0xc9, 0x8a, 0x29, 0xb5, 0x1e, 0x6b, 0x0e, 0xbb, 0xb1, 0xe6,
+	0xd1, 0x30, 0x65, 0x28, 0xe7, 0xa6, 0xd1, 0x4f, 0xfe, 0x8a, 0x60, 0x9d,
+	0xd3, 0x9e, 0xbd, 0x4f, 0xfb, 0x86, 0xfd, 0x1c, 0xb7, 0xd1, 0x0f, 0x9d,
+	0xa7, 0xfd, 0x80, 0xa6, 0xfe, 0x51, 0x69, 0x2b, 0x27, 0x54, 0x7f, 0x4d,
+	0xe5, 0xe6, 0xfc, 0xfe, 0x04, 0xe6, 0xd3, 0xd7, 0x8e, 0x37, 0xf5, 0x9d,
+	0xc0, 0xba, 0x63, 0x5e, 0x1d, 0xc2, 0xde, 0xa6, 0x7e, 0xd0, 0x55, 0x89,
+	0x79, 0xa2, 0x31, 0xaf, 0xb6, 0x9c, 0xe7, 0x63, 0xff, 0x9e, 0xa6, 0xf3,
+	0xdf, 0x23, 0x47, 0xd5, 0xf9, 0x39, 0xc6, 0x38, 0x4c, 0xa7, 0xd2, 0xd3,
+	0xa4, 0xbb, 0x42, 0x95, 0x77, 0x20, 0x0e, 0x56, 0x3d, 0x19, 0x7f, 0x4d,
+	0xde, 0x5e, 0x86, 0x3c, 0x52, 0xf1, 0x6c, 0xf7, 0x4c, 0xd1, 0x49, 0x33,
+	0x0f, 0x05, 0xbe, 0x01, 0x9c, 0x9d, 0x58, 0x74, 0x32, 0xd0, 0xc5, 0x58,
+	0x35, 0xf4, 0x4f, 0xde, 0xcb, 0x31, 0x24, 0x18, 0x23, 0x96, 0x1f, 0xd6,
+	0x47, 0xc1, 0xaf, 0xc4, 0xad, 0x8e, 0xdd, 0xd4, 0x4a, 0xbc, 0x83, 0x8e,
+	0x49, 0xb1, 0x6d, 0x96, 0x1d, 0xfc, 0x13, 0xb6, 0x49, 0xfc, 0x1f, 0x84,
+	0xbc, 0xe6, 0x5c, 0xfc, 0xd7, 0xaf, 0xc9, 0xbb, 0xcb, 0xbe, 0xec, 0x35,
+	0xe4, 0x6d, 0xdb, 0x3d, 0x33, 0x0f, 0x3b, 0x19, 0x76, 0x82, 0x93, 0x67,
+	0x4e, 0xd6, 0xb6, 0xa1, 0x97, 0x5d, 0x77, 0xdd, 0x59, 0xef, 0x35, 0x15,
+	0x0d, 0xd0, 0x36, 0xfe, 0x3e, 0xee, 0x7e, 0xe5, 0x80, 0x29, 0x9d, 0x2d,
+	0x3c, 0x53, 0x24, 0x4c, 0x22, 0x69, 0xf1, 0xf5, 0x2b, 0xe9, 0x8d, 0xf6,
+	0xd9, 0x35, 0x99, 0xae, 0x33, 0xc7, 0xd6, 0x0f, 0x7b, 0x23, 0xb6, 0x98,
+	0x95, 0xad, 0x74, 0xd7, 0x06, 0xba, 0xab, 0x29, 0xb9, 0xf5, 0x08, 0x69,
+	0xdf, 0xe5, 0xb7, 0x25, 0xc5, 0x4a, 0x33, 0xdd, 0x7d, 0x53, 0xb4, 0xcc,
+	0x22, 0x5d, 0x7d, 0x0e, 0x73, 0x0a, 0xbd, 0x6d, 0x6a, 0x8f, 0x0e, 0x99,
+	0x7b, 0xde, 0xf7, 0x35, 0xda, 0x40, 0x87, 0xec, 0xf7, 0xfd, 0x8d, 0x8f,
+	0x77, 0x69, 0xdb, 0x86, 0x74, 0xda, 0xe5, 0xe7, 0x2d, 0xc5, 0x3c, 0xdb,
+	0xa6, 0x70, 0x14, 0x28, 0xf7, 0x49, 0x76, 0x26, 0x20, 0x81, 0xb3, 0x8d,
+	0x0d, 0x1a, 0x29, 0xe0, 0x2c, 0x39, 0xd5, 0xc7, 0xf6, 0x1b, 0xe8, 0xdf,
+	0xd9, 0x44, 0xd7, 0x90, 0x51, 0xb3, 0xfe, 0x98, 0xf5, 0x3f, 0x6c, 0x67,
+	0x8e, 0x9b, 0x3a, 0x47, 0x82, 0xb9, 0xe6, 0x59, 0x9e, 0x57, 0xbf, 0x67,
+	0x9e, 0xd5, 0x74, 0xb5, 0xf5, 0xbd, 0x2f, 0x6e, 0xbc, 0x87, 0x71, 0xf0,
+	0xb1, 0x5e, 0x7b, 0x7a, 0xdc, 0x90, 0x77, 0x13, 0xac, 0xbd, 0x21, 0x5f,
+	0x0f, 0x3b, 0xd3, 0x42, 0x1f, 0xff, 0x36, 0x99, 0x51, 0x73, 0x69, 0x57,
+	0xf7, 0x2a, 0xbb, 0x3a, 0x6d, 0x6e, 0xfa, 0x52, 0x93, 0x1b, 0xb5, 0x59,
+	0xb4, 0x9b, 0x7c, 0x3b, 0x99, 0xed, 0x8f, 0x77, 0x7d, 0xda, 0x9f, 0xda,
+	0xe1, 0xad, 0xe5, 0x8f, 0xf9, 0x36, 0xb4, 0xdf, 0xd6, 0x7a, 0x63, 0x73,
+	0x3e, 0xf3, 0x73, 0x1a, 0x77, 0x79, 0x2c, 0x1a, 0xee, 0xe3, 0xba, 0xf7,
+	0x0f, 0x68, 0x79, 0xa6, 0xfb, 0xd3, 0xe2, 0xcf, 0xf5, 0xdb, 0x03, 0xa4,
+	0xa1, 0x48, 0xd4, 0x8c, 0xab, 0x38, 0xca, 0xf5, 0x30, 0x75, 0xd7, 0x95,
+	0x96, 0x77, 0xf8, 0xcc, 0x77, 0xf8, 0x2e, 0x79, 0x7a, 0x80, 0xfd, 0x78,
+	0x87, 0x71, 0xc3, 0xdb, 0xfb, 0xb4, 0x4c, 0xbb, 0x55, 0x8c, 0x85, 0x73,
+	0xee, 0x96, 0x68, 0x0f, 0x6d, 0xab, 0x9b, 0xa0, 0x97, 0xbb, 0x01, 0xef,
+	0x28, 0x7c, 0xfd, 0x20, 0x6c, 0x63, 0xfa, 0x2f, 0x71, 0x5d, 0xe7, 0xb3,
+	0x36, 0xe7, 0xf9, 0x23, 0xf4, 0x63, 0xa2, 0x6a, 0xac, 0xa8, 0xd6, 0x81,
+	0x0d, 0x9e, 0x44, 0x7b, 0xed, 0x86, 0xe4, 0xeb, 0xb4, 0x99, 0x2f, 0x7b,
+	0xbc, 0x84, 0xe7, 0xea, 0xc3, 0xbb, 0x19, 0x5f, 0x9a, 0x2c, 0x37, 0xdb,
+	0xd2, 0x71, 0xd0, 0x0c, 0xf7, 0x5a, 0x44, 0xdf, 0x25, 0xd0, 0xe5, 0xa2,
+	0x2c, 0xd8, 0xf4, 0xab, 0xae, 0xb9, 0x87, 0x28, 0xc7, 0x12, 0x43, 0x90,
+	0xef, 0xfc, 0xee, 0x25, 0x01, 0x3b, 0x42, 0xe5, 0x69, 0x23, 0x05, 0x19,
+	0x84, 0x5d, 0xc2, 0x6f, 0x2a, 0x58, 0xd7, 0xc0, 0xfd, 0xb8, 0x16, 0x6b,
+	0xdb, 0xa2, 0xe8, 0xdf, 0xe9, 0xad, 0x67, 0xc8, 0xf9, 0x25, 0x9f, 0x4f,
+	0x1e, 0xd8, 0xad, 0xbe, 0x7d, 0x74, 0xd8, 0x3e, 0xa6, 0x9e, 0xdb, 0x7c,
+	0xf9, 0xbe, 0x05, 0x9f, 0x7c, 0x2f, 0x78, 0x33, 0x1d, 0xe6, 0x5d, 0xf4,
+	0x9d, 0x73, 0x0e, 0x75, 0x06, 0x7d, 0x83, 0x4f, 0x3c, 0x5b, 0x87, 0x77,
+	0x6b, 0x8e, 0xe1, 0xe9, 0x78, 0x29, 0x7c, 0x26, 0x15, 0x43, 0xcf, 0xad,
+	0xce, 0xab, 0xb8, 0x69, 0xce, 0xab, 0x69, 0xc9, 0x6d, 0xd4, 0xd5, 0xa4,
+	0x94, 0x3f, 0x4d, 0x9d, 0xcd, 0x5c, 0xd6, 0xeb, 0x15, 0xf8, 0x42, 0xb0,
+	0x07, 0x5e, 0x85, 0x2e, 0x7d, 0x05, 0x7b, 0xfd, 0x02, 0x76, 0xe1, 0xcb,
+	0xf0, 0xa7, 0x2e, 0xaa, 0x3c, 0xf0, 0xb8, 0x17, 0xd3, 0xba, 0x22, 0xc7,
+	0x57, 0x89, 0x2f, 0xea, 0x02, 0x43, 0x7e, 0x6e, 0x8f, 0x59, 0x8f, 0x0b,
+	0xeb, 0xd8, 0x62, 0x69, 0x9e, 0xbb, 0xc3, 0x8e, 0x5b, 0x2b, 0x12, 0x1c,
+	0xbf, 0x8f, 0xdf, 0x2f, 0xd8, 0xcc, 0xad, 0x8f, 0x39, 0x8f, 0x8b, 0x9f,
+	0x5f, 0x1f, 0x4e, 0x6f, 0x33, 0xfe, 0xe9, 0x5e, 0x99, 0xe5, 0x1c, 0xef,
+	0x3b, 0x4f, 0x83, 0x34, 0x5d, 0xcf, 0xea, 0x5a, 0xbe, 0xd2, 0x49, 0xd6,
+	0x3d, 0x9a, 0xa9, 0xd0, 0x03, 0xba, 0xbd, 0x84, 0x36, 0x6b, 0x35, 0x18,
+	0xbf, 0x62, 0x7b, 0xf9, 0xe4, 0x9e, 0xea, 0x1f, 0xbf, 0xc0, 0xef, 0x79,
+	0x75, 0x9c, 0x64, 0xc8, 0x8b, 0x41, 0xdf, 0xf3, 0xc4, 0xb1, 0x24, 0xfd,
+	0x9c, 0x10, 0x60, 0xf8, 0xbd, 0xdd, 0xfa, 0xbb, 0xbc, 0x7c, 0xbe, 0x5b,
+	0x54, 0x4e, 0xeb, 0xe4, 0x47, 0x36, 0xbf, 0x89, 0x8d, 0x45, 0xb6, 0x99,
+	0x84, 0x89, 0x86, 0x6f, 0x4d, 0x7d, 0x8f, 0x81, 0x76, 0x29, 0x24, 0xe7,
+	0x13, 0xa6, 0xdc, 0x13, 0x4c, 0x47, 0x4d, 0xd9, 0x1b, 0x3d, 0x2b, 0x38,
+	0x1f, 0x7d, 0x8c, 0xd5, 0x58, 0x9e, 0xf3, 0x83, 0x65, 0xae, 0x17, 0x55,
+	0x7a, 0x34, 0xbe, 0xd7, 0x75, 0x9f, 0x74, 0xc4, 0x88, 0xdf, 0xf9, 0xa1,
+	0xcb, 0x7c, 0xac, 0xb9, 0xd6, 0x1a, 0xdb, 0xf1, 0xe3, 0x3a, 0x8c, 0xe9,
+	0xf8, 0xf1, 0x9c, 0x28, 0xce, 0xe8, 0xc7, 0x74, 0xd2, 0xc6, 0xd1, 0xca,
+	0x11, 0xe3, 0x48, 0xc5, 0x5c, 0x0e, 0x31, 0xe7, 0xb4, 0xdf, 0x95, 0xde,
+	0x7d, 0x3e, 0xce, 0x18, 0x13, 0x17, 0xe9, 0x5e, 0x3b, 0xa4, 0xf3, 0x1e,
+	0x6b, 0xa6, 0xca, 0xbd, 0xf7, 0x9c, 0x67, 0x9c, 0x9b, 0x31, 0x32, 0x5b,
+	0x7a, 0xd7, 0x86, 0xa1, 0xcf, 0xfa, 0x24, 0xa7, 0x6c, 0xd0, 0x3e, 0x65,
+	0x5f, 0x52, 0x76, 0xe6, 0xac, 0x1e, 0x15, 0x8f, 0xca, 0x59, 0xd8, 0xab,
+	0xf2, 0xda, 0x90, 0x74, 0x30, 0x46, 0xf1, 0x6d, 0xb4, 0xa9, 0x93, 0xee,
+	0x6a, 0xe9, 0x6f, 0xce, 0x3d, 0xc6, 0xac, 0x3d, 0x9f, 0xfa, 0x3e, 0x95,
+	0x7d, 0xad, 0xf9, 0xc6, 0xb7, 0x24, 0xdb, 0xcf, 0x1c, 0xa3, 0x1f, 0x77,
+	0x74, 0xbc, 0xb8, 0xe3, 0xab, 0x43, 0xe4, 0x9d, 0xcb, 0x15, 0xc9, 0x06,
+	0x53, 0xa1, 0xc4, 0x7c, 0x29, 0xf0, 0xf7, 0x4d, 0x9f, 0x09, 0xed, 0xd5,
+	0x8d, 0x9c, 0x2b, 0xc6, 0x9e, 0x82, 0xfe, 0x29, 0x40, 0x97, 0xe4, 0xfd,
+	0xfa, 0x51, 0x8c, 0x6f, 0xbc, 0xff, 0x19, 0x67, 0xea, 0x50, 0xf9, 0xda,
+	0x3d, 0x5b, 0xf2, 0xb5, 0xaf, 0x0c, 0xd1, 0x46, 0x2b, 0x34, 0x36, 0xdf,
+	0x6d, 0xf3, 0xde, 0x9d, 0xfa, 0xcc, 0xfb, 0x50, 0x4e, 0x30, 0xee, 0x47,
+	0x5e, 0x5f, 0x50, 0xfe, 0xe1, 0x7c, 0x63, 0x51, 0x72, 0x76, 0x8f, 0x4c,
+	0x2e, 0xfb, 0x7e, 0x87, 0x3b, 0x31, 0xe7, 0xe4, 0x07, 0x03, 0xc2, 0xf7,
+	0xb9, 0x9f, 0xaf, 0x8f, 0xb9, 0xfe, 0x0e, 0x4f, 0x27, 0xd3, 0xc7, 0xd0,
+	0xba, 0x5d, 0xaf, 0xf5, 0x1d, 0x6d, 0x0f, 0xa8, 0x3e, 0x7e, 0xf3, 0xf5,
+	0x84, 0xe2, 0xff, 0xcb, 0x95, 0xf7, 0xbc, 0xf8, 0xec, 0xd6, 0x7a, 0xb3,
+	0x5b, 0xe3, 0x9a, 0x78, 0xf6, 0xe1, 0x92, 0x87, 0x4f, 0x6d, 0x5b, 0x7b,
+	0x59, 0xbf, 0xb0, 0x71, 0x1f, 0xfa, 0x49, 0xca, 0x1f, 0x52, 0x77, 0x9d,
+	0xf6, 0xee, 0x1a, 0xc0, 0x99, 0xe7, 0x4a, 0xfe, 0x9c, 0x33, 0x32, 0xb2,
+	0x3f, 0x16, 0x89, 0x9b, 0xea, 0xec, 0xca, 0x67, 0xca, 0x38, 0x67, 0xe0,
+	0x0b, 0xd1, 0x6f, 0x52, 0x71, 0x8b, 0xc8, 0x63, 0xca, 0xd7, 0xa4, 0x4f,
+	0xa4, 0xfc, 0xa8, 0x68, 0x01, 0x77, 0x99, 0x6c, 0xa8, 0x58, 0x6d, 0xe4,
+	0x70, 0x20, 0xb6, 0x94, 0x53, 0xb1, 0x0c, 0xde, 0x85, 0x67, 0x8f, 0xe5,
+	0xc5, 0x68, 0xce, 0x5b, 0xa9, 0xf8, 0x83, 0x31, 0x35, 0xd2, 0x29, 0x99,
+	0x25, 0x91, 0x97, 0xc1, 0xa3, 0x17, 0xeb, 0xe4, 0xb1, 0x40, 0xbf, 0x8e,
+	0xa5, 0xad, 0xdf, 0x65, 0x4a, 0xbf, 0xca, 0xa1, 0x16, 0x00, 0x53, 0xe8,
+	0xeb, 0x89, 0xc0, 0x7e, 0x77, 0x42, 0xe7, 0xe7, 0x99, 0xc3, 0x99, 0x83,
+	0x4c, 0x6d, 0xf6, 0x51, 0x20, 0x3f, 0x66, 0xd8, 0x9f, 0x03, 0xdc, 0x36,
+	0xe3, 0xda, 0x85, 0x6a, 0x51, 0xc9, 0xad, 0x5a, 0xbd, 0x53, 0xe9, 0x94,
+	0x5a, 0xf5, 0xa7, 0x80, 0x8b, 0x8c, 0x98, 0xa9, 0x82, 0xd7, 0xdf, 0x26,
+	0xd5, 0x2a, 0xdb, 0x32, 0xd4, 0xae, 0x68, 0xca, 0xcf, 0x75, 0x59, 0xb2,
+	0x02, 0xdb, 0xa7, 0xba, 0x6a, 0xe3, 0x37, 0x8a, 0x5f, 0x02, 0xbf, 0xfb,
+	0xa1, 0x0f, 0x68, 0x8f, 0x31, 0xb7, 0xd5, 0xd9, 0xb2, 0x7f, 0x9b, 0xaa,
+	0x1d, 0xbb, 0x5c, 0x21, 0xde, 0x74, 0x3c, 0xab, 0x50, 0x65, 0xbb, 0x35,
+	0xd6, 0x47, 0xb9, 0x39, 0xea, 0xc9, 0xc1, 0x37, 0xbd, 0xfa, 0xbe, 0xff,
+	0x02, 0x30, 0xca, 0x6a, 0x17, 0xf4, 0x72, 0x00, 0x00, 0x00 };
+
+static const u32 bnx2_RXP_b06FwData[(0x0/4) + 1] = { 0x0 };
+static const u32 bnx2_RXP_b06FwRodata[(0x24/4) + 1] = {
+	0x08003430, 0x08003430, 0x080033a8, 0x080033e0, 0x08003414, 0x08003438,
+	0x08003438, 0x08003438, 0x08003318, 0x00000000 };
+
+static struct fw_info bnx2_rxp_fw_06 = {
+	/* Firmware version: 6.2.3 */
+	.ver_major			= 0x6,
+	.ver_minor			= 0x2,
+	.ver_fix			= 0x3,
+
+	.start_addr			= 0x08003210,
+
+	.text_addr			= 0x08000000,
+	.text_len			= 0x72f0,
+	.text_index			= 0x0,
+	.gz_text			= bnx2_RXP_b06FwText,
+	.gz_text_len			= sizeof(bnx2_RXP_b06FwText),
+
+	.data_addr			= 0x00000000,
+	.data_len			= 0x0,
+	.data_index			= 0x0,
+	.data				= bnx2_RXP_b06FwData,
+
+	.sbss_addr			= 0x08007340,
+	.sbss_len			= 0x4c,
+	.sbss_index			= 0x0,
+
+	.bss_addr			= 0x0800738c,
+	.bss_len			= 0x440,
+	.bss_index			= 0x0,
+
+	.rodata_addr			= 0x080072f0,
+	.rodata_len			= 0x24,
+	.rodata_index			= 0x0,
+	.rodata				= bnx2_RXP_b06FwRodata,
+};
+
+/* Initialized Values for the RX Processor. */
+static const struct cpu_reg cpu_reg_rxp = {
+	.mode = BNX2_RXP_CPU_MODE,
+	.mode_value_halt = BNX2_RXP_CPU_MODE_SOFT_HALT,
+	.mode_value_sstep = BNX2_RXP_CPU_MODE_STEP_ENA,
+	.state = BNX2_RXP_CPU_STATE,
+	.state_value_clear = 0xffffff,
+	.gpr0 = BNX2_RXP_CPU_REG_FILE,
+	.evmask = BNX2_RXP_CPU_EVENT_MASK,
+	.pc = BNX2_RXP_CPU_PROGRAM_COUNTER,
+	.inst = BNX2_RXP_CPU_INSTRUCTION,
+	.bp = BNX2_RXP_CPU_HW_BREAKPOINT,
+	.spad_base = BNX2_RXP_SCRATCH,
+	.mips_view_base = 0x8000000,
+};
+
+static u8 bnx2_rv2p_proc1[] = {
+	/* Date:        09/14/2010 09:06 */
+#define RV2P_PROC1_MAX_BD_PAGE_LOC   9
+#define RV2P_PROC1_BD_PAGE_SIZE_MSK	0xffff
+#define RV2P_PROC1_BD_PAGE_SIZE	((BCM_PAGE_SIZE / 16) - 1)
+	0xad, 0x56, 0x3f, 0x68, 0x13, 0x61, 0x14, 0x7f, 0xb9, 0x24, 0x77, 0x69,
+	0x9a, 0xe4, 0x0e, 0x6c, 0x43, 0xac, 0x85, 0xc4, 0xa2, 0x43, 0xda, 0x0b,
+	0x4d, 0xd4, 0xcd, 0x42, 0xa1, 0x08, 0x05, 0xdb, 0xa9, 0x20, 0x8a, 0x08,
+	0xa6, 0x87, 0xb8, 0xe8, 0xe2, 0xea, 0xe2, 0x51, 0xec, 0xa0, 0xa0, 0x25,
+	0x83, 0x85, 0x76, 0x69, 0x27, 0xff, 0x14, 0x87, 0xdc, 0x62, 0xa1, 0x8b,
+	0x83, 0x1d, 0x1d, 0x1c, 0x5c, 0x54, 0xb0, 0x46, 0x51, 0x44, 0x10, 0x17,
+	0x17, 0x07, 0x8d, 0xdf, 0xfb, 0xf3, 0x35, 0x77, 0x87, 0xad, 0x83, 0x06,
+	0xc2, 0x2f, 0xef, 0xbb, 0xf7, 0xff, 0xfd, 0xde, 0x77, 0x71, 0x00, 0xc0,
+	0x04, 0x3f, 0x28, 0x2b, 0xb4, 0xc1, 0x4c, 0x64, 0x14, 0x76, 0xbb, 0x90,
+	0x2e, 0x01, 0x7e, 0x0c, 0x20, 0x19, 0xa2, 0x72, 0x02, 0xe0, 0x71, 0x86,
+	0x64, 0xdf, 0xca, 0x91, 0xec, 0x8f, 0x03, 0x7f, 0xc6, 0x18, 0xfc, 0x31,
+	0x87, 0xb4, 0x3b, 0x2d, 0xad, 0x8f, 0xf2, 0x49, 0x98, 0xac, 0x20, 0x26,
+	0x61, 0xf2, 0x30, 0xe2, 0x20, 0x3c, 0xad, 0xa0, 0xdf, 0x9f, 0x5d, 0xf0,
+	0x73, 0xa4, 0xef, 0x97, 0x51, 0xfe, 0xa1, 0x64, 0xb1, 0x0b, 0x10, 0xdb,
+	0xe0, 0xbb, 0x88, 0xea, 0x5b, 0xe3, 0x73, 0xbf, 0x86, 0x7a, 0x13, 0x2a,
+	0x50, 0x3f, 0xd9, 0xed, 0x8c, 0x6b, 0x7b, 0x8e, 0x6f, 0xb9, 0x0e, 0xe1,
+	0xdb, 0x16, 0xea, 0x7d, 0xeb, 0x46, 0xf5, 0x60, 0x0f, 0xbd, 0x2f, 0xb1,
+	0x3c, 0x3e, 0x4b, 0x1e, 0x47, 0xe1, 0x88, 0xc1, 0xf5, 0xa7, 0xa0, 0x24,
+	0x05, 0x22, 0x1e, 0x12, 0x9c, 0x12, 0x84, 0xff, 0x8c, 0x77, 0xff, 0xd1,
+	0xfe, 0x8e, 0xe0, 0xa6, 0xe0, 0x4d, 0xc1, 0xd7, 0x82, 0x63, 0x31, 0xfd,
+	0x2b, 0x0a, 0xb9, 0x1f, 0x2f, 0x5b, 0x32, 0xd7, 0xaa, 0x60, 0x39, 0x43,
+	0x7d, 0x81, 0x51, 0x3d, 0x77, 0xd4, 0xdf, 0x96, 0xfe, 0x40, 0xc2, 0x4f,
+	0x92, 0x5d, 0x61, 0x62, 0x33, 0x9a, 0x87, 0xc1, 0x12, 0x2c, 0x98, 0x0e,
+	0x75, 0x6f, 0x29, 0xa0, 0xf9, 0x0f, 0x2c, 0x05, 0x32, 0xdf, 0x51, 0x1d,
+	0x8f, 0x60, 0x80, 0xfd, 0x02, 0xe4, 0xc5, 0xce, 0x48, 0x87, 0xe7, 0x03,
+	0x90, 0x8d, 0xf8, 0xc3, 0xf3, 0x3e, 0x40, 0xbe, 0xce, 0xa7, 0x99, 0x6f,
+	0xb7, 0x5b, 0xcc, 0xdf, 0x4e, 0x1d, 0xf5, 0x1f, 0xa9, 0xfc, 0x12, 0xe4,
+	0x37, 0xfa, 0x3c, 0x01, 0x9d, 0x76, 0x34, 0x4e, 0xdc, 0x9f, 0x17, 0xf3,
+	0xe7, 0x35, 0x50, 0x7f, 0x6d, 0xd7, 0x9f, 0x17, 0xf3, 0xe7, 0x05, 0xda,
+	0x1f, 0x9e, 0x1f, 0x68, 0xaf, 0x07, 0x9a, 0x6f, 0xec, 0xbf, 0xe2, 0x4a,
+	0xdf, 0x04, 0xa1, 0xa6, 0xeb, 0x46, 0xf9, 0x8c, 0xec, 0xd7, 0x1b, 0xe9,
+	0xe7, 0x70, 0xc2, 0x97, 0xe7, 0x65, 0xe2, 0xdb, 0x7b, 0x75, 0x6e, 0x03,
+	0xf2, 0xbf, 0x39, 0x6d, 0x53, 0xbc, 0x82, 0xc9, 0x6e, 0xce, 0xd9, 0x8c,
+	0x97, 0xa4, 0x31, 0x1f, 0xb3, 0x9c, 0xff, 0xe5, 0x7e, 0x96, 0xe7, 0xf3,
+	0x68, 0x3f, 0x08, 0x3d, 0x7b, 0x9d, 0xd7, 0x7e, 0xf9, 0x60, 0x7c, 0x1d,
+	0x47, 0xe7, 0xa1, 0xe3, 0xa1, 0xbf, 0x17, 0x2a, 0x9f, 0xbf, 0xc5, 0x65,
+	0xf4, 0x84, 0x00, 0xef, 0x8c, 0x68, 0x3f, 0xd2, 0x75, 0xc6, 0x54, 0x83,
+	0x71, 0xb5, 0x8e, 0x71, 0xb2, 0xd0, 0x94, 0xfb, 0xa5, 0x98, 0x66, 0x9e,
+	0xac, 0x6e, 0x49, 0xe0, 0x24, 0xc6, 0x35, 0x85, 0x57, 0x57, 0xbb, 0xcc,
+	0xd3, 0xd4, 0x80, 0xf9, 0x84, 0xf5, 0xcd, 0xa4, 0xe6, 0x13, 0x3e, 0xbf,
+	0xa6, 0xf3, 0x2b, 0x2d, 0xe7, 0x38, 0xaf, 0x95, 0x5c, 0x0a, 0xe5, 0x13,
+	0x2b, 0xcf, 0x69, 0x6e, 0xee, 0xca, 0x96, 0xd4, 0x6f, 0x47, 0x79, 0x3e,
+	0x57, 0xe5, 0xfb, 0x61, 0xae, 0xca, 0x7c, 0xf7, 0x47, 0x10, 0x0b, 0xea,
+	0x27, 0xe2, 0x10, 0xf8, 0x06, 0xd9, 0x67, 0xb7, 0x89, 0xbf, 0x49, 0xf5,
+	0x53, 0xef, 0x07, 0xa7, 0xb9, 0x33, 0x4a, 0x90, 0xe1, 0x3c, 0x9a, 0xa1,
+	0x7b, 0x27, 0xdc, 0x5f, 0xcc, 0x93, 0xf5, 0x2b, 0x6e, 0xf8, 0x3c, 0x3c,
+	0x0f, 0x3d, 0x07, 0xcd, 0xbb, 0x0c, 0xd5, 0xcf, 0xcf, 0x55, 0x1f, 0x6a,
+	0xac, 0xe6, 0x4b, 0x1f, 0xa1, 0x21, 0xcf, 0x6b, 0xf1, 0xbd, 0xd5, 0xbc,
+	0xd6, 0xf9, 0xa1, 0x9e, 0x13, 0xdb, 0xe3, 0x99, 0x6e, 0x6f, 0xef, 0xf1,
+	0x7c, 0x43, 0xf8, 0x78, 0x4b, 0xee, 0xc3, 0xf8, 0x3d, 0xd0, 0x27, 0x7d,
+	0x3e, 0x15, 0xb3, 0xd3, 0x3c, 0x5e, 0x90, 0x73, 0xa3, 0xbd, 0xde, 0x42,
+	0xb4, 0xbc, 0x4f, 0xb1, 0x7d, 0x68, 0xb8, 0x38, 0x97, 0x1b, 0x10, 0x48,
+	0xbd, 0xaf, 0x22, 0x75, 0xe7, 0x85, 0xff, 0x26, 0x3c, 0x0c, 0xd8, 0xff,
+	0xc5, 0x8a, 0xee, 0x17, 0xe3, 0x03, 0x57, 0xea, 0x20, 0xfd, 0x8c, 0xf4,
+	0xe9, 0xba, 0xc4, 0x75, 0xe0, 0x7e, 0xa0, 0x79, 0x8b, 0x3c, 0xb6, 0xa0,
+	0x2e, 0x7b, 0xd2, 0x14, 0xbe, 0x76, 0xb2, 0xbc, 0x0f, 0xde, 0x0c, 0xf1,
+	0x03, 0x8a, 0xc2, 0x5b, 0x2f, 0xcf, 0xf2, 0x50, 0x9e, 0xdf, 0x53, 0x75,
+	0x7a, 0xbf, 0x65, 0x94, 0xcc, 0x58, 0xec, 0x47, 0xbb, 0x12, 0x7c, 0x98,
+	0x25, 0x75, 0xb7, 0xc7, 0xab, 0x38, 0x9f, 0xa4, 0xce, 0xe3, 0x78, 0x5e,
+	0x04, 0x18, 0x09, 0xf7, 0x3f, 0xb7, 0x7b, 0xef, 0xad, 0x81, 0xae, 0x4b,
+	0xf7, 0x17, 0xeb, 0x38, 0xb8, 0xc7, 0x3c, 0xce, 0xee, 0xde, 0x03, 0x23,
+	0xd3, 0x98, 0xa7, 0x0d, 0x05, 0x8b, 0xdf, 0x8b, 0x8c, 0xca, 0xde, 0xb0,
+	0xd0, 0x6c, 0x78, 0xd1, 0x60, 0x79, 0x71, 0x81, 0xdc, 0xcc, 0x2e, 0xea,
+	0xf3, 0xa9, 0x24, 0xe2, 0xdc, 0xc6, 0x33, 0x3a, 0x2f, 0x04, 0x49, 0x3e,
+	0xb7, 0x66, 0x74, 0x9f, 0x6c, 0xaa, 0x7b, 0x99, 0xfb, 0x74, 0xe1, 0x1e,
+	0xe3, 0x79, 0x38, 0x4d, 0x98, 0xed, 0xed, 0x93, 0xfc, 0x4f, 0xc8, 0x87,
+	0xf7, 0x29, 0xad, 0xd2, 0x73, 0x28, 0x9f, 0xde, 0xdc, 0xe2, 0xf7, 0xe0,
+	0x7e, 0xf3, 0x9b, 0x0a, 0xf1, 0x4d, 0xcf, 0x2f, 0xbe, 0x5f, 0xc4, 0x0f,
+	0xe1, 0xdf, 0xf7, 0x5f, 0x7f, 0xe6, 0xdf, 0xb1, 0x3d, 0x78, 0x6b, 0x89,
+	0xdd, 0x57, 0x65, 0xf7, 0x1b, 0x72, 0xc1, 0x87, 0x3f, 0xf8, 0x08, 0x00,
+	0x00, 0x00 };
+
+static u8 bnx2_rv2p_proc2[] = {
+	/* Date:        09/14/2010 09:06 */
+#define RV2P_PROC2_MAX_BD_PAGE_LOC   5
+#define RV2P_PROC2_BD_PAGE_SIZE_MSK	0xffff
+#define RV2P_PROC2_BD_PAGE_SIZE	((BCM_PAGE_SIZE / 16) - 1)
+	0xad, 0x56, 0x4d, 0x68, 0x5c, 0x55, 0x14, 0x3e, 0xf3, 0xe6, 0x7f, 0xe6,
+	0xcd, 0xbc, 0x34, 0x09, 0x93, 0x98, 0x54, 0x3b, 0xe9, 0x34, 0xd1, 0x29,
+	0x6f, 0x34, 0x7f, 0x54, 0x17, 0x82, 0x65, 0x16, 0x6d, 0xaa, 0x42, 0xd3,
+	0x54, 0x10, 0xdc, 0x68, 0x06, 0x3b, 0x74, 0xb4, 0x74, 0x61, 0x70, 0xe3,
+	0xc6, 0x87, 0xad, 0x2d, 0x94, 0x2c, 0x9a, 0x62, 0x9a, 0x10, 0x84, 0x4a,
+	0xdd, 0xb9, 0x1b, 0x51, 0x6a, 0xbb, 0x2c, 0x76, 0x28, 0xba, 0xa8, 0x8a,
+	0x0b, 0x5d, 0x58, 0x29, 0x56, 0x43, 0x0a, 0x2e, 0xfc, 0x21, 0x88, 0x68,
+	0xc7, 0x7b, 0x7e, 0xee, 0x9b, 0xfb, 0x5e, 0xa6, 0x64, 0xe3, 0x6c, 0x3e,
+	0xee, 0xbb, 0xe7, 0x7e, 0xf7, 0xfc, 0x7c, 0xe7, 0xdc, 0xe9, 0x01, 0x80,
+	0x18, 0x78, 0xcd, 0x5d, 0x0a, 0x1d, 0x48, 0x44, 0x52, 0x0a, 0xdb, 0x00,
+	0xf1, 0x41, 0xc0, 0x9f, 0x05, 0xf2, 0xdb, 0xdb, 0x43, 0xf0, 0x6d, 0x93,
+	0xf1, 0xf6, 0x12, 0xe3, 0xd1, 0x22, 0xe3, 0x2e, 0xb6, 0xfa, 0xc8, 0x7b,
+	0xc2, 0x56, 0x10, 0x01, 0xaf, 0x8c, 0x3c, 0x79, 0x78, 0x41, 0x08, 0xf6,
+	0xbb, 0x82, 0x0e, 0xf3, 0xc6, 0x00, 0x71, 0x07, 0x80, 0x87, 0xd8, 0x2b,
+	0xf8, 0x94, 0xe0, 0x8f, 0x82, 0xb7, 0x05, 0x7f, 0x08, 0x21, 0x08, 0x6e,
+	0x0a, 0x7e, 0x1f, 0xfa, 0xfe, 0xb7, 0xe0, 0x4c, 0x84, 0xf1, 0x25, 0x59,
+	0x7f, 0x2e, 0x78, 0x43, 0xf0, 0x1b, 0x85, 0x3a, 0x3e, 0x5c, 0xdf, 0x6d,
+	0x77, 0xd6, 0x36, 0xd3, 0x95, 0xf1, 0xfb, 0x9d, 0xb6, 0xe6, 0xd7, 0xf9,
+	0xb0, 0xe2, 0x18, 0xf7, 0x88, 0xbb, 0x76, 0x95, 0xe3, 0x7f, 0xb9, 0xc8,
+	0xdf, 0x1f, 0x71, 0x31, 0xee, 0x04, 0x78, 0x82, 0x50, 0x41, 0xb4, 0x22,
+	0x5e, 0x45, 0x27, 0x52, 0xe7, 0x8f, 0x57, 0xf3, 0x39, 0xe6, 0xcd, 0x04,
+	0x78, 0x0b, 0x5b, 0x78, 0xbf, 0x4b, 0x9b, 0xfc, 0x1f, 0x0b, 0x7f, 0x66,
+	0x5b, 0xfe, 0x5a, 0x8e, 0xb1, 0xcf, 0xed, 0x76, 0x4f, 0x7a, 0x1b, 0xff,
+	0x5f, 0xdb, 0x96, 0xff, 0xad, 0x90, 0xff, 0xb0, 0x17, 0xed, 0x23, 0x00,
+	0xbb, 0x75, 0x7c, 0x68, 0xbf, 0x07, 0xae, 0x8f, 0xf4, 0x50, 0xf6, 0x5a,
+	0xa4, 0x9f, 0xcb, 0x50, 0x2d, 0x61, 0x40, 0xed, 0x76, 0x3d, 0x8b, 0xeb,
+	0xa2, 0xbb, 0x76, 0x8d, 0xed, 0x5f, 0x15, 0xa2, 0x9f, 0x35, 0x21, 0x97,
+	0x01, 0xbc, 0x2c, 0xf2, 0xf6, 0x42, 0xcb, 0xc6, 0xfb, 0xbe, 0x52, 0xf5,
+	0xc0, 0x75, 0x14, 0x3c, 0x27, 0xe8, 0xd7, 0x25, 0x60, 0xbb, 0x1d, 0x8f,
+	0xf2, 0xd7, 0xf3, 0xf5, 0x1e, 0xb2, 0x5b, 0x6d, 0x6a, 0x9d, 0xe2, 0xbe,
+	0xd2, 0xbb, 0xc3, 0xe7, 0x61, 0x77, 0x8a, 0x2e, 0xe1, 0x78, 0xd5, 0x65,
+	0x15, 0xcd, 0x83, 0x18, 0x87, 0xd6, 0x92, 0x3e, 0x47, 0x3c, 0xca, 0x4f,
+	0x7d, 0x1e, 0xfd, 0xf8, 0xd7, 0xd7, 0xcb, 0xc5, 0x51, 0xad, 0x17, 0x5e,
+	0xf7, 0x4f, 0x32, 0x2e, 0x4f, 0xc6, 0x11, 0xdc, 0xfa, 0x02, 0x2d, 0x1f,
+	0xff, 0x69, 0x22, 0x45, 0xbe, 0x7a, 0x15, 0x3c, 0x7f, 0xb1, 0xa3, 0x37,
+	0xc9, 0xc7, 0x2f, 0xa3, 0xb8, 0x9f, 0x55, 0x7e, 0x31, 0xdf, 0x5c, 0xc3,
+	0xd4, 0xe1, 0x79, 0x43, 0x9f, 0x68, 0xb7, 0x5f, 0xfc, 0x2e, 0x4a, 0x9d,
+	0x76, 0xaa, 0x3a, 0xe9, 0xfc, 0xeb, 0x3a, 0x39, 0x74, 0xdf, 0xbd, 0x6a,
+	0x0f, 0xf9, 0x7d, 0x98, 0xf3, 0x74, 0xe1, 0xc0, 0x15, 0xce, 0xd3, 0x21,
+	0x8b, 0xd6, 0x99, 0xd3, 0x9f, 0x9a, 0xf5, 0x7a, 0x71, 0xba, 0x7e, 0x8d,
+	0xf7, 0xe3, 0xa7, 0xb8, 0x6e, 0x87, 0xe5, 0xda, 0x43, 0xd1, 0x08, 0xc2,
+	0x62, 0xe2, 0x14, 0x57, 0xa7, 0x45, 0xfb, 0x7d, 0x70, 0xb6, 0xc9, 0xfb,
+	0x27, 0xb3, 0x1c, 0x47, 0x23, 0xce, 0xe7, 0xce, 0x2d, 0xd1, 0x3c, 0x69,
+	0x6f, 0x4c, 0xa3, 0xff, 0x6f, 0x2a, 0xff, 0xe9, 0x7c, 0x7f, 0x70, 0x3f,
+	0x02, 0x1b, 0x9f, 0xe0, 0x7a, 0xc6, 0xdd, 0x60, 0x1d, 0xb8, 0x8d, 0x33,
+	0x72, 0xa1, 0xc5, 0x7c, 0xf7, 0x2c, 0xb6, 0x17, 0x39, 0x64, 0x62, 0x96,
+	0x43, 0xe7, 0xec, 0x03, 0x8c, 0xef, 0xd2, 0xfe, 0x3f, 0x91, 0x45, 0xaa,
+	0xd7, 0x33, 0xf9, 0xd8, 0x15, 0x1d, 0x0f, 0x63, 0x47, 0x57, 0x5a, 0x77,
+	0xc2, 0x1f, 0xd2, 0xd7, 0x19, 0x5b, 0xeb, 0x4a, 0xf2, 0x5f, 0x7e, 0x90,
+	0xae, 0x18, 0x13, 0x25, 0xd6, 0xc9, 0x56, 0x7d, 0x09, 0x3f, 0x04, 0xe6,
+	0xa3, 0xa1, 0x0b, 0x02, 0xa5, 0x87, 0x80, 0x3e, 0x94, 0x8e, 0xa8, 0xff,
+	0x55, 0x3e, 0x75, 0xdd, 0x91, 0x28, 0x09, 0xaf, 0x0b, 0x5f, 0x43, 0xe2,
+	0x39, 0x21, 0xf1, 0xfc, 0x9a, 0xd1, 0x79, 0xd7, 0x71, 0x30, 0x9e, 0xf5,
+	0xe3, 0xd0, 0x73, 0x9a, 0xe7, 0xf2, 0x5c, 0x23, 0xe0, 0xcf, 0xe2, 0x0d,
+	0xe9, 0xd3, 0xe1, 0x12, 0xa3, 0x1f, 0xdf, 0x18, 0xe9, 0x3d, 0x3f, 0xf0,
+	0x99, 0xa9, 0xbf, 0x4d, 0x55, 0x3f, 0xae, 0xc3, 0x6a, 0xd3, 0xec, 0xa3,
+	0xa1, 0x2e, 0x7d, 0xa4, 0x75, 0x1e, 0x8c, 0xff, 0x64, 0x2e, 0x8a, 0x30,
+	0x7d, 0x6b, 0x5d, 0xf3, 0x9a, 0xef, 0x49, 0xd2, 0xd7, 0x51, 0xff, 0x3e,
+	0xc9, 0x93, 0x60, 0xe1, 0x49, 0xe4, 0x9b, 0x15, 0xfe, 0x71, 0xe1, 0xb7,
+	0xa5, 0x8f, 0x2a, 0x5d, 0xfa, 0x48, 0xe7, 0x85, 0xee, 0x73, 0x6f, 0xad,
+	0xa3, 0xfd, 0xf0, 0x03, 0xfa, 0x6a, 0xb4, 0x1d, 0x7c, 0x07, 0x4a, 0x5d,
+	0xde, 0x01, 0xed, 0x27, 0xc7, 0xcb, 0x7e, 0xa8, 0xb8, 0x2b, 0x54, 0x3f,
+	0xa8, 0x2f, 0xd0, 0x9c, 0x04, 0x3d, 0x27, 0xbd, 0x09, 0xd3, 0x3e, 0x9c,
+	0x97, 0x98, 0xf8, 0x5d, 0x68, 0x07, 0xdf, 0xad, 0x7e, 0xe3, 0xde, 0x40,
+	0xde, 0x3c, 0xa0, 0x3c, 0x27, 0x65, 0xee, 0x0c, 0xfb, 0xef, 0x56, 0xe6,
+	0x31, 0x46, 0x2b, 0x8e, 0xfb, 0x69, 0x7f, 0xee, 0x42, 0x99, 0xfb, 0xfe,
+	0xf8, 0x31, 0x5e, 0x9e, 0xdb, 0x43, 0x79, 0x78, 0xef, 0xc4, 0x26, 0xcd,
+	0x81, 0x0f, 0xde, 0xb8, 0x8a, 0x71, 0x3d, 0x04, 0xeb, 0x0b, 0x36, 0xf9,
+	0x53, 0x1d, 0x61, 0xbb, 0xbf, 0x9e, 0x0e, 0xc6, 0x7b, 0xb4, 0x88, 0xbc,
+	0x29, 0xc9, 0x9b, 0xb2, 0x9b, 0x0f, 0xbf, 0x23, 0x6c, 0x5f, 0x9d, 0xe7,
+	0x39, 0x5b, 0x8d, 0xe0, 0xfa, 0x61, 0x58, 0x9f, 0xb2, 0x29, 0x1f, 0x61,
+	0xfb, 0x4e, 0x5c, 0xac, 0xeb, 0x83, 0x0e, 0xf3, 0xeb, 0x7e, 0xf3, 0xfc,
+	0x7e, 0xc3, 0x73, 0xbf, 0xdf, 0xd7, 0x71, 0x1e, 0x99, 0x32, 0xcf, 0x97,
+	0xd4, 0x3b, 0xc2, 0xe7, 0x67, 0xa5, 0x2f, 0x5e, 0x91, 0x0b, 0xee, 0x64,
+	0x1c, 0xe2, 0xab, 0x3d, 0x47, 0x3a, 0x80, 0x42, 0x96, 0xf3, 0x50, 0x7b,
+	0x9e, 0xf7, 0x6b, 0x39, 0xfe, 0x3e, 0x94, 0x63, 0x7f, 0x67, 0x93, 0x36,
+	0xd9, 0x0f, 0xe5, 0x18, 0x0b, 0xd2, 0x3f, 0x2d, 0x7f, 0x2e, 0x30, 0xae,
+	0x26, 0xcc, 0x7e, 0x8a, 0xc1, 0xf5, 0x04, 0xc7, 0x07, 0x65, 0xee, 0x87,
+	0xea, 0x98, 0x4d, 0xfb, 0x73, 0xe5, 0xe0, 0xfc, 0xbd, 0x24, 0x6e, 0x4b,
+	0x7f, 0x0d, 0x75, 0xe6, 0x87, 0x39, 0x5f, 0xd2, 0x93, 0x2b, 0xcd, 0xe0,
+	0xfb, 0xb1, 0x9a, 0x30, 0xfb, 0x16, 0x79, 0x69, 0xa9, 0xfa, 0xd5, 0x9c,
+	0x33, 0x51, 0xd1, 0xc3, 0x1f, 0xd2, 0x97, 0x7d, 0x70, 0xb3, 0xc9, 0x71,
+	0xb5, 0x9a, 0xe1, 0x3a, 0xea, 0xfb, 0x34, 0x1f, 0xfb, 0xad, 0xe3, 0xe8,
+	0xf0, 0xf3, 0xfd, 0xc7, 0xc4, 0xcf, 0xbb, 0x63, 0x78, 0x4f, 0x41, 0xe2,
+	0x41, 0x5e, 0xfe, 0x3e, 0x23, 0x73, 0xcf, 0xf3, 0xd7, 0xc1, 0x79, 0x35,
+	0xeb, 0xe8, 0xff, 0x75, 0xfa, 0x7c, 0xe8, 0x7d, 0x1c, 0x67, 0x5c, 0x1e,
+	0xd7, 0x75, 0xd0, 0xf5, 0xd2, 0xf5, 0xe1, 0x3a, 0x16, 0x26, 0xc8, 0x6c,
+	0xba, 0x36, 0x41, 0xfa, 0x1d, 0xaf, 0xfd, 0x16, 0xfc, 0xbf, 0x72, 0xc4,
+	0x45, 0xfb, 0xb7, 0xe1, 0x6b, 0xea, 0x2f, 0xf5, 0x4f, 0x50, 0xb0, 0x33,
+	0x1f, 0xa4, 0x00, 0x60, 0xce, 0x19, 0x55, 0xbf, 0xb8, 0xee, 0x27, 0xd9,
+	0x9e, 0x32, 0x75, 0xf7, 0xe1, 0xfd, 0x4e, 0x1f, 0xea, 0x78, 0x70, 0xbf,
+	0x22, 0xba, 0x4b, 0x41, 0xf5, 0x20, 0xde, 0xeb, 0x40, 0x3e, 0xc9, 0xfa,
+	0xcd, 0x27, 0xcd, 0xba, 0xa8, 0xfa, 0xa7, 0x93, 0xb8, 0xdc, 0xd9, 0x9b,
+	0x26, 0xbf, 0x2f, 0x7c, 0xf1, 0x25, 0x6d, 0x5f, 0x5e, 0xc9, 0xf2, 0xf7,
+	0x81, 0x2a, 0xd3, 0xc7, 0x48, 0x9f, 0x51, 0x38, 0xcd, 0xfa, 0x7d, 0x7f,
+	0x99, 0x71, 0x0d, 0x9e, 0x65, 0x9e, 0xde, 0x77, 0xe8, 0xbd, 0x4c, 0x0d,
+	0x70, 0xfa, 0x16, 0x57, 0x44, 0x97, 0x83, 0x16, 0xbf, 0xab, 0x90, 0x93,
+	0xff, 0x6b, 0xd2, 0x3f, 0xac, 0xc7, 0x98, 0x51, 0xd7, 0xed, 0xf4, 0x89,
+	0x68, 0x2b, 0xfd, 0xf1, 0x71, 0xd1, 0x69, 0x2a, 0xac, 0x53, 0x5d, 0xb7,
+	0x41, 0xab, 0xab, 0x2e, 0xf7, 0x05, 0x75, 0x99, 0x10, 0x5d, 0xfe, 0xe9,
+	0xcf, 0xb3, 0xad, 0xbc, 0x68, 0x9f, 0x55, 0x7a, 0xfd, 0xbf, 0x74, 0xca,
+	0x38, 0x53, 0xc2, 0xfb, 0x07, 0x0c, 0xbd, 0x69, 0xbf, 0xd0, 0x9f, 0xe3,
+	0xaa, 0xae, 0xff, 0x01, 0xa5, 0xeb, 0xca, 0xd2, 0xf0, 0x0c, 0x00, 0x00,
+	0x00 };
+
+static u8 bnx2_TPAT_b06FwText[] = {
+	0xc5, 0x58, 0x7f, 0x6c, 0x5c, 0x55, 0x7a, 0x3d, 0xf7, 0xbd, 0x37, 0x33,
+	0x2f, 0xce, 0x38, 0x7e, 0x4e, 0x1c, 0x32, 0xde, 0x75, 0xeb, 0x77, 0xf1,
+	0x1b, 0xcf, 0xb0, 0x63, 0xc8, 0x9b, 0xc4, 0xc0, 0x44, 0x4c, 0x95, 0x89,
+	0xe3, 0x24, 0x93, 0x90, 0x10, 0xa7, 0x44, 0xaa, 0xa3, 0x22, 0xc5, 0x0d,
+	0x01, 0xd2, 0x25, 0xcb, 0x9a, 0x2e, 0xad, 0xbc, 0xbb, 0x48, 0x79, 0xeb,
+	0x38, 0x89, 0x61, 0xc7, 0x9e, 0x60, 0x68, 0x1c, 0xaa, 0xaa, 0x64, 0xb3,
+	0x21, 0x0e, 0xdd, 0x49, 0x86, 0x85, 0xfe, 0xc1, 0xaa, 0x1b, 0x61, 0x91,
+	0x5f, 0x66, 0x21, 0xb0, 0xa8, 0xaa, 0x04, 0xea, 0x1f, 0xf5, 0x42, 0x96,
+	0xcd, 0x4a, 0x09, 0x04, 0xa4, 0x56, 0xa6, 0xec, 0xfa, 0xf6, 0xdc, 0x99,
+	0x71, 0x58, 0x7e, 0xa8, 0xda, 0xff, 0x6a, 0x69, 0x3c, 0x6f, 0xde, 0xdc,
+	0x7b, 0xdf, 0x77, 0xbf, 0x7b, 0xce, 0xf9, 0xce, 0x37, 0x9e, 0x40, 0x1d,
+	0x6a, 0x7f, 0xf5, 0x7c, 0xdd, 0xf6, 0x57, 0xfd, 0x8f, 0x2c, 0xbf, 0x65,
+	0xd9, 0x2d, 0xfa, 0xb3, 0x30, 0x8d, 0x30, 0xfe, 0x1f, 0xfe, 0x4c, 0xc0,
+	0x99, 0x8b, 0x47, 0xbf, 0x60, 0x1b, 0x59, 0xb4, 0x74, 0x79, 0xb0, 0xcd,
+	0xec, 0x53, 0xee, 0xbd, 0x1e, 0x90, 0x2b, 0xa5, 0xdc, 0xd5, 0xf8, 0xbd,
+	0x0a, 0x9a, 0x2c, 0xe8, 0xfb, 0x7f, 0x92, 0xfd, 0xdd, 0xd2, 0xd3, 0xb7,
+	0xcb, 0x6b, 0x47, 0x4c, 0xd8, 0x4e, 0xf6, 0xa0, 0xe5, 0xb4, 0xc3, 0x6e,
+	0xe1, 0x9c, 0x7f, 0x4c, 0xdc, 0x23, 0xb0, 0x60, 0x6e, 0x2d, 0xa5, 0x86,
+	0xfc, 0x08, 0x06, 0xfd, 0x18, 0xf6, 0x15, 0x0d, 0xe4, 0x9c, 0x08, 0xf6,
+	0x7a, 0x33, 0x6a, 0xa7, 0x2f, 0xfd, 0x7d, 0x50, 0xad, 0x67, 0x7d, 0x19,
+	0xeb, 0x36, 0x91, 0xfb, 0xbe, 0xd7, 0x82, 0x7d, 0xe5, 0x18, 0x86, 0xca,
+	0x36, 0xa6, 0xcd, 0x21, 0x74, 0x97, 0xe7, 0xe6, 0xb9, 0x9c, 0x97, 0xc4,
+	0xfe, 0xcf, 0xcf, 0x75, 0xf7, 0x21, 0x15, 0xdb, 0x0f, 0x03, 0x7d, 0x4d,
+	0x1e, 0xe7, 0xb5, 0xb9, 0xfb, 0x21, 0x93, 0x5c, 0x27, 0x08, 0x77, 0xba,
+	0x5c, 0x23, 0xe0, 0x7c, 0xe9, 0x1e, 0x87, 0x5e, 0x2b, 0xc3, 0xcf, 0x6f,
+	0xab, 0xd3, 0x89, 0x16, 0xbc, 0xc8, 0xf5, 0x5f, 0x28, 0x3b, 0x78, 0xbe,
+	0xec, 0xe1, 0xe5, 0xb2, 0x8b, 0x7f, 0x29, 0x37, 0xe1, 0xa7, 0x65, 0xbb,
+	0xcf, 0xce, 0xa2, 0xa7, 0x69, 0x64, 0x8f, 0x8a, 0x79, 0x08, 0xbe, 0x96,
+	0xf5, 0x0e, 0x1f, 0x36, 0xa2, 0x99, 0xbf, 0xb9, 0x0d, 0x3d, 0x0b, 0x4f,
+	0xda, 0xd8, 0x52, 0x6c, 0xe9, 0x8b, 0x64, 0xc1, 0x31, 0x02, 0xfe, 0x6d,
+	0x36, 0x7a, 0xb8, 0x46, 0xc0, 0xf5, 0x73, 0xe5, 0x21, 0xbe, 0x6c, 0xbc,
+	0x5f, 0xb0, 0xed, 0x86, 0x91, 0x1b, 0xf4, 0x18, 0x5c, 0x29, 0x5c, 0x53,
+	0x1f, 0xa4, 0x1d, 0xfc, 0x62, 0x85, 0x52, 0xf5, 0x59, 0x04, 0xf3, 0x3b,
+	0x03, 0x98, 0x59, 0x99, 0xbf, 0xd3, 0x14, 0xe8, 0xbe, 0xd9, 0x4b, 0x8e,
+	0x88, 0xbb, 0xef, 0x66, 0x4e, 0x6d, 0x91, 0x75, 0xad, 0xb6, 0x52, 0x06,
+	0x8f, 0x95, 0xb9, 0x2f, 0xc6, 0x33, 0x54, 0x46, 0xee, 0x2f, 0x13, 0x26,
+	0x8e, 0x36, 0xe1, 0xd1, 0xf7, 0x3a, 0x2d, 0x7c, 0x52, 0x90, 0xb1, 0xa4,
+	0xf9, 0x28, 0xf6, 0x14, 0x06, 0x70, 0x5f, 0x01, 0x81, 0x9e, 0x33, 0x3f,
+	0x5b, 0xb0, 0x1e, 0x1c, 0x81, 0x5d, 0x97, 0x1d, 0xb6, 0x36, 0x8c, 0xf4,
+	0xe3, 0xcf, 0x3b, 0xb3, 0xdc, 0x77, 0x0e, 0xcf, 0x94, 0x61, 0x2f, 0xca,
+	0x76, 0xb7, 0x7c, 0xa7, 0x5d, 0x1e, 0xc9, 0x19, 0x40, 0x7e, 0x14, 0x58,
+	0x5b, 0x14, 0x38, 0x93, 0x11, 0xd8, 0xe9, 0x2f, 0x41, 0xe0, 0x74, 0x62,
+	0xb8, 0x2c, 0xf3, 0x01, 0xbf, 0x5b, 0xca, 0xf9, 0xa1, 0xec, 0x3d, 0xd6,
+	0xb3, 0x05, 0xd8, 0xb1, 0x6c, 0xaf, 0x15, 0x2b, 0xb6, 0x39, 0x97, 0x85,
+	0x0c, 0x8e, 0x42, 0x4e, 0x01, 0xa9, 0x9c, 0x61, 0xc8, 0xe1, 0x66, 0x53,
+	0x66, 0x92, 0x86, 0x8e, 0xf1, 0x1e, 0xcb, 0x2f, 0xe9, 0xf7, 0x5e, 0x2b,
+	0x51, 0x02, 0xee, 0xe2, 0x9a, 0x17, 0x57, 0x08, 0x94, 0xd2, 0x57, 0x55,
+	0xb0, 0x58, 0xe6, 0xa6, 0x45, 0x27, 0x8a, 0x65, 0x60, 0xcb, 0x28, 0xec,
+	0x08, 0xc7, 0xfe, 0x86, 0x6b, 0xd6, 0x73, 0xec, 0xc9, 0x91, 0xb6, 0x20,
+	0x69, 0xc8, 0xbe, 0x6b, 0x90, 0xfd, 0x5c, 0xd3, 0x3f, 0x28, 0x64, 0xec,
+	0x94, 0x90, 0xee, 0xfd, 0xa8, 0xae, 0xd9, 0x51, 0x5b, 0xd3, 0x2b, 0xd9,
+	0x62, 0x6d, 0x11, 0x62, 0x5d, 0x11, 0xee, 0xab, 0x3e, 0x98, 0x87, 0x28,
+	0x0e, 0x94, 0xeb, 0xe0, 0x36, 0xca, 0xdc, 0x24, 0x74, 0x7c, 0x1d, 0x8c,
+	0x4f, 0xc0, 0x4e, 0xe8, 0xf1, 0x1d, 0x56, 0xb2, 0x84, 0x5c, 0x2c, 0x9b,
+	0x11, 0xbd, 0xe5, 0x43, 0x35, 0xee, 0x58, 0x62, 0xfd, 0xb8, 0x4c, 0x02,
+	0xb2, 0x67, 0x8d, 0x50, 0xea, 0xc6, 0xb4, 0xec, 0xdd, 0x21, 0x52, 0x33,
+	0x3b, 0x84, 0xec, 0xd9, 0x2e, 0x60, 0xbc, 0xe3, 0xeb, 0x79, 0x05, 0x2b,
+	0x55, 0x79, 0xde, 0xb0, 0xf5, 0x8d, 0xd2, 0x62, 0xb8, 0x4b, 0xd0, 0x60,
+	0x79, 0x8b, 0x70, 0xa9, 0x82, 0x73, 0xd4, 0xdb, 0xde, 0x1d, 0xc6, 0x65,
+	0x27, 0x8c, 0x8b, 0xfe, 0x6f, 0xd5, 0x91, 0x46, 0xbd, 0x3e, 0xf0, 0xd0,
+	0x93, 0x0e, 0xe6, 0x79, 0xd7, 0x70, 0x36, 0xfd, 0xb0, 0xf1, 0x98, 0xd3,
+	0x0f, 0xc3, 0xfb, 0xb5, 0x31, 0xe8, 0x34, 0x61, 0x98, 0xb1, 0x34, 0xc4,
+	0x9b, 0xf4, 0x9e, 0xbf, 0x14, 0xc7, 0xc6, 0xf1, 0x77, 0x54, 0x50, 0x9d,
+	0x9f, 0x3b, 0xe3, 0xff, 0x88, 0x98, 0xd4, 0xf7, 0x07, 0xb8, 0xbf, 0x59,
+	0x35, 0x69, 0x65, 0x70, 0xa0, 0x48, 0x7e, 0x78, 0x36, 0x1a, 0xf8, 0x7a,
+	0xaf, 0x30, 0x20, 0x7a, 0xca, 0x39, 0xb1, 0x79, 0xa2, 0x4b, 0xe4, 0x26,
+	0x2c, 0x71, 0xd7, 0x38, 0xf7, 0x5e, 0x54, 0xea, 0xd5, 0x34, 0xf3, 0xeb,
+	0xff, 0xca, 0x38, 0xc2, 0xfd, 0xbb, 0x62, 0x56, 0xa5, 0xe3, 0x06, 0x62,
+	0xde, 0x5a, 0xd1, 0x3b, 0xa1, 0x54, 0x72, 0x59, 0x5e, 0x6c, 0x99, 0x80,
+	0xdd, 0x9c, 0xcd, 0x5a, 0x2b, 0x8a, 0xbf, 0x34, 0xdc, 0x25, 0x51, 0x14,
+	0x8a, 0x2e, 0xfe, 0xd3, 0x37, 0x30, 0xbd, 0x64, 0x1e, 0x2c, 0x4f, 0xf0,
+	0x85, 0xe8, 0x2b, 0x3e, 0xac, 0x10, 0xaf, 0xd7, 0xf4, 0x58, 0x18, 0xea,
+	0xdc, 0x20, 0xba, 0x39, 0xa7, 0x91, 0x58, 0x4b, 0x8f, 0xe6, 0x11, 0x23,
+	0x7e, 0x9d, 0x6c, 0x3c, 0x96, 0x31, 0x0c, 0xbc, 0xe9, 0xc7, 0x93, 0xfd,
+	0xb0, 0x30, 0xdd, 0x28, 0x63, 0x0c, 0x54, 0x34, 0x67, 0xe3, 0xc9, 0x9f,
+	0x41, 0xc0, 0xf4, 0x2c, 0xae, 0x19, 0xc2, 0xf4, 0xdd, 0x36, 0xf6, 0x12,
+	0x97, 0x61, 0xde, 0x3f, 0x5e, 0xb9, 0xaf, 0x3f, 0xc3, 0x59, 0x53, 0xfe,
+	0xa2, 0x66, 0xf0, 0x7e, 0xb1, 0x0d, 0x7d, 0xd5, 0x7c, 0x3a, 0x6b, 0xb8,
+	0xdf, 0x1f, 0x59, 0xfa, 0xf2, 0x4f, 0xaf, 0xdf, 0xeb, 0x66, 0x9c, 0xd1,
+	0xac, 0xe7, 0x14, 0xd0, 0x4c, 0xfe, 0x02, 0xa3, 0xe4, 0xf1, 0xc5, 0xf4,
+	0x0d, 0x60, 0xbe, 0xf9, 0xd7, 0xe4, 0x6c, 0x1e, 0x5f, 0x84, 0xe9, 0xc5,
+	0x95, 0xb5, 0x9c, 0x6d, 0xe3, 0x4a, 0x65, 0x96, 0x87, 0xd1, 0x98, 0x18,
+	0x8c, 0x35, 0x22, 0xf0, 0x4d, 0x72, 0xfa, 0x02, 0x9f, 0xef, 0x2f, 0x33,
+	0xd1, 0xb6, 0xac, 0xc3, 0xc4, 0x42, 0xe0, 0x68, 0x41, 0x6b, 0x8a, 0x9c,
+	0xb9, 0xc0, 0xff, 0xef, 0x96, 0x35, 0x9e, 0x7d, 0xe2, 0x59, 0xe0, 0xb8,
+	0xa7, 0xcf, 0xd9, 0xb7, 0xda, 0x89, 0xd5, 0x6f, 0x31, 0x9f, 0x06, 0x79,
+	0x34, 0x52, 0xd6, 0x9c, 0x3c, 0x6e, 0x0c, 0x36, 0x4a, 0x57, 0x3f, 0xe1,
+	0x6a, 0x01, 0xa2, 0x94, 0x7e, 0xdc, 0x08, 0x1a, 0x51, 0xd3, 0xb7, 0x47,
+	0xac, 0xae, 0x82, 0xd6, 0xb7, 0x8d, 0xd6, 0xbd, 0x7c, 0x6f, 0xcd, 0xf6,
+	0x5b, 0xaa, 0xa8, 0xb1, 0x97, 0x27, 0xf6, 0x64, 0x26, 0x0f, 0x19, 0xec,
+	0x42, 0x2a, 0x79, 0x19, 0xd2, 0xbf, 0x64, 0xa6, 0x72, 0x36, 0xf9, 0x61,
+	0x99, 0xb2, 0xff, 0x1c, 0xe4, 0x40, 0x95, 0x23, 0x1b, 0x6b, 0x1c, 0xc9,
+	0x5b, 0x4b, 0x2b, 0xef, 0x8f, 0x68, 0xae, 0xf0, 0xbd, 0xdf, 0xba, 0xa5,
+	0x44, 0x2d, 0x2b, 0x4a, 0xdf, 0x15, 0x11, 0xdc, 0x94, 0xb6, 0xf1, 0x8c,
+	0xa7, 0x5a, 0x3f, 0x59, 0x2e, 0x73, 0xdb, 0xcc, 0x16, 0xf2, 0x3d, 0x86,
+	0xa7, 0x89, 0xa3, 0xaf, 0xc7, 0x87, 0xb0, 0xad, 0x6c, 0x12, 0xf3, 0x2e,
+	0xf3, 0x18, 0xc1, 0x2b, 0xd4, 0xb6, 0xb5, 0x7e, 0x52, 0xcf, 0x4b, 0x9e,
+	0x21, 0x77, 0x8e, 0x51, 0xdf, 0x26, 0xa9, 0x6f, 0x7b, 0xcb, 0x6d, 0xc9,
+	0x63, 0x90, 0x7d, 0x6b, 0xa8, 0x6f, 0xf5, 0x9d, 0xd2, 0x19, 0xe1, 0x51,
+	0x36, 0x64, 0xa9, 0x8b, 0xe5, 0x0c, 0x06, 0xa9, 0x45, 0x6b, 0xca, 0x03,
+	0x62, 0x73, 0x79, 0x0e, 0xa3, 0x1f, 0x12, 0x97, 0x1a, 0xa7, 0x36, 0x76,
+	0x14, 0x81, 0x07, 0x8a, 0x3e, 0x42, 0x9e, 0xf1, 0x77, 0x11, 0x5c, 0xc3,
+	0x99, 0xf4, 0x04, 0xee, 0x73, 0x72, 0xc4, 0xe1, 0x46, 0xf5, 0xed, 0xad,
+	0x7a, 0xfc, 0x80, 0xb8, 0x93, 0x67, 0xd6, 0x17, 0xaa, 0xe4, 0xc3, 0xf8,
+	0x05, 0x33, 0x9e, 0x5b, 0x3c, 0xb8, 0x30, 0x5c, 0xd1, 0x6d, 0xfd, 0x6e,
+	0x62, 0x93, 0x8f, 0xf5, 0xf5, 0x90, 0xb1, 0x9b, 0x45, 0x10, 0xf0, 0x3c,
+	0x72, 0xf5, 0x46, 0xd0, 0x67, 0x33, 0x2f, 0x4f, 0x0a, 0xa0, 0x75, 0x54,
+	0xe3, 0x6f, 0x4e, 0xe7, 0x2d, 0x3c, 0x54, 0x3c, 0x6d, 0xbc, 0x12, 0x0a,
+	0x23, 0x32, 0x16, 0xc2, 0x82, 0x31, 0x0b, 0xc6, 0x98, 0xc0, 0xbc, 0x6c,
+	0x10, 0x5b, 0xc0, 0xf3, 0xea, 0x47, 0x0c, 0x57, 0x8b, 0x36, 0x1e, 0x4e,
+	0x84, 0x90, 0xf7, 0x64, 0xdf, 0x73, 0x62, 0xd0, 0xb7, 0x79, 0xef, 0x0a,
+	0x75, 0xda, 0x35, 0xfe, 0x89, 0x13, 0x9a, 0x10, 0x6a, 0x0f, 0xa3, 0x8e,
+	0xf3, 0xbe, 0x5b, 0x54, 0x7b, 0xe6, 0x67, 0x03, 0xb7, 0x8e, 0x79, 0x7e,
+	0x82, 0xeb, 0xce, 0x8c, 0x28, 0x75, 0xff, 0xad, 0x5e, 0xb2, 0x9d, 0xda,
+	0x14, 0x32, 0x2d, 0xfc, 0xe6, 0x64, 0x75, 0xfd, 0xfa, 0x31, 0x1b, 0xd1,
+	0x43, 0x81, 0xc3, 0xf5, 0xa7, 0xb6, 0x30, 0x82, 0xb6, 0xa2, 0xd6, 0x04,
+	0xa5, 0x22, 0x59, 0xaf, 0xf7, 0x01, 0xd6, 0x9d, 0x64, 0x5a, 0xce, 0xd4,
+	0x8b, 0xb6, 0x9e, 0x2b, 0xa6, 0x52, 0xdd, 0xe9, 0xb8, 0xbf, 0x93, 0x31,
+	0xb7, 0x97, 0x23, 0x30, 0x19, 0x57, 0xcc, 0xfb, 0x5b, 0x63, 0xc0, 0x31,
+	0x99, 0x8b, 0x7d, 0xc6, 0xb7, 0x2b, 0x58, 0x75, 0x10, 0x1a, 0xad, 0x43,
+	0xb3, 0x97, 0x13, 0xdb, 0xc8, 0xcd, 0x35, 0x13, 0x16, 0x62, 0x63, 0x9a,
+	0x9b, 0xcc, 0xa9, 0xd7, 0x4d, 0x1e, 0xae, 0xad, 0xf0, 0x75, 0xdd, 0xb8,
+	0x81, 0xb7, 0xfc, 0x55, 0x08, 0x65, 0xf3, 0x62, 0xdd, 0x84, 0xe6, 0xcf,
+	0x06, 0x72, 0x99, 0x67, 0xb8, 0xd0, 0xc2, 0x6b, 0xfe, 0x2a, 0x11, 0xca,
+	0x6a, 0xbe, 0x84, 0xd0, 0xb7, 0xe5, 0x8f, 0xe7, 0xd0, 0xe3, 0x45, 0x0b,
+	0xb9, 0xc6, 0x39, 0xbe, 0xcc, 0xaa, 0x1f, 0x58, 0xd5, 0x6f, 0x1e, 0xe4,
+	0x7d, 0x7b, 0x4c, 0x73, 0xb8, 0x9b, 0x1c, 0xb6, 0xf0, 0xc3, 0xb2, 0x25,
+	0xc8, 0x11, 0xc4, 0xd2, 0xb0, 0x17, 0x64, 0x73, 0xd6, 0x1b, 0xcc, 0x4b,
+	0x7c, 0xb9, 0xce, 0x89, 0xec, 0x4b, 0x18, 0x92, 0xbb, 0xa8, 0xe3, 0xf9,
+	0x2b, 0x75, 0x39, 0x9d, 0xca, 0x1f, 0x10, 0x72, 0xd7, 0x2b, 0x42, 0xce,
+	0x3c, 0x47, 0xfc, 0x39, 0x69, 0x8d, 0xc9, 0xee, 0x9a, 0xf6, 0xe6, 0xac,
+	0x95, 0x25, 0xd6, 0xfa, 0x85, 0x31, 0x6a, 0x48, 0x04, 0xe1, 0xf8, 0x8c,
+	0x9a, 0xf2, 0xe5, 0xae, 0xa8, 0x50, 0xad, 0x2f, 0xa7, 0x5b, 0x50, 0x20,
+	0x36, 0x9f, 0x61, 0x6d, 0xdb, 0xce, 0x67, 0x75, 0x8f, 0xcb, 0x60, 0xbb,
+	0x59, 0xad, 0xc3, 0x8f, 0x6b, 0x6c, 0x50, 0xe3, 0xbe, 0xde, 0x1e, 0xc1,
+	0x63, 0xc4, 0xa9, 0x97, 0x76, 0x31, 0xc8, 0xba, 0xbc, 0xaf, 0x28, 0xdd,
+	0x41, 0xa4, 0xfa, 0xf7, 0x69, 0xac, 0x2e, 0xf6, 0x88, 0xc7, 0x36, 0xd6,
+	0xe6, 0x2f, 0xd6, 0x2b, 0x39, 0xac, 0x6b, 0xb3, 0x49, 0xec, 0xb6, 0x19,
+	0x55, 0xec, 0x0e, 0xd5, 0xb0, 0xdb, 0x5d, 0xc1, 0xee, 0x21, 0x43, 0x63,
+	0x56, 0xe3, 0xb1, 0x87, 0xfb, 0x47, 0x18, 0xc6, 0x5b, 0x7c, 0x9e, 0x7b,
+	0xc3, 0xe7, 0xb1, 0xb8, 0xdd, 0x47, 0x73, 0x2b, 0xb9, 0xb8, 0x07, 0x81,
+	0x1b, 0xe6, 0x99, 0x3f, 0x83, 0x20, 0xdf, 0x4c, 0x2c, 0x2e, 0xe7, 0xb9,
+	0xc6, 0x88, 0x45, 0x2c, 0x9a, 0xc3, 0x62, 0x14, 0xbb, 0x8b, 0x9f, 0x8a,
+	0x20, 0xa4, 0xb5, 0x97, 0x56, 0x84, 0xde, 0x65, 0xc1, 0x29, 0xad, 0xbd,
+	0x11, 0x0a, 0x88, 0x85, 0xfb, 0x8a, 0xc6, 0xd6, 0x10, 0x14, 0x36, 0xa5,
+	0x43, 0x38, 0x11, 0xd7, 0x38, 0x5c, 0x85, 0xd7, 0x3a, 0xe8, 0x25, 0x16,
+	0x5b, 0xa8, 0x3b, 0x5a, 0xc5, 0xf2, 0x00, 0x35, 0x84, 0xb5, 0x3b, 0x39,
+	0x4d, 0x1c, 0xcd, 0x5f, 0x3e, 0x1f, 0xbb, 0xe3, 0x83, 0x4e, 0x94, 0xcf,
+	0x35, 0x20, 0xf3, 0x07, 0x38, 0x62, 0xe5, 0x48, 0x13, 0xac, 0x76, 0x22,
+	0xf8, 0xb8, 0x37, 0xf5, 0x9e, 0xa9, 0xf1, 0x0b, 0xac, 0x38, 0x69, 0x8b,
+	0xcd, 0x45, 0x38, 0x8d, 0x59, 0x2f, 0xf3, 0x91, 0xf8, 0x89, 0x98, 0x76,
+	0xaa, 0xf5, 0x61, 0xd3, 0x78, 0x84, 0xe7, 0x78, 0x45, 0xfd, 0x33, 0x35,
+	0x3d, 0x7c, 0xab, 0xc6, 0x22, 0xf3, 0x7e, 0xd4, 0x46, 0xf8, 0xd0, 0x22,
+	0x5c, 0xe8, 0xa0, 0xde, 0x6e, 0xd5, 0x98, 0x8c, 0xa0, 0x91, 0xb8, 0x5c,
+	0x7a, 0x5b, 0x04, 0x0d, 0x47, 0xe7, 0x30, 0xfa, 0x8a, 0xd0, 0x18, 0x9d,
+	0xe7, 0xfd, 0xbb, 0xf8, 0x6b, 0x27, 0xc3, 0xfc, 0x28, 0xf5, 0x1a, 0x35,
+	0xff, 0xe1, 0xf8, 0xde, 0x81, 0x46, 0xc6, 0x7f, 0x29, 0x1d, 0x24, 0x2d,
+	0x84, 0x38, 0x5e, 0xe6, 0x4f, 0xf0, 0x49, 0x37, 0x8f, 0x58, 0x62, 0x03,
+	0xf1, 0xbf, 0x20, 0xeb, 0xcd, 0x9c, 0x62, 0x4d, 0x5c, 0x9d, 0x6e, 0x73,
+	0x1e, 0xc4, 0xac, 0xda, 0xe8, 0xc5, 0xa7, 0xae, 0x98, 0x3a, 0xbe, 0x10,
+	0xc2, 0x63, 0xff, 0xcd, 0x7d, 0x29, 0xb5, 0xa3, 0x53, 0xe1, 0x6d, 0x3f,
+	0xc8, 0xc4, 0x20, 0x87, 0xaf, 0xa1, 0x09, 0x4b, 0xc7, 0xf6, 0x28, 0x8b,
+	0xf7, 0x0f, 0x74, 0x36, 0xe0, 0x03, 0xd6, 0xd2, 0xf3, 0x42, 0xe1, 0xbe,
+	0x74, 0xd0, 0x13, 0x82, 0xdc, 0xd5, 0x23, 0x5c, 0x94, 0x46, 0xe4, 0x4c,
+	0x5e, 0x84, 0x31, 0xff, 0xa8, 0x37, 0x35, 0x28, 0xa2, 0x88, 0x9e, 0x8a,
+	0xe2, 0x93, 0x72, 0x18, 0xf3, 0xc6, 0xa2, 0x68, 0x1c, 0xf5, 0x06, 0x12,
+	0x66, 0x30, 0x39, 0x8f, 0x35, 0xdf, 0x31, 0xdb, 0x71, 0xfe, 0xef, 0x65,
+	0xd2, 0x36, 0x3d, 0x37, 0x61, 0x44, 0x61, 0x9d, 0x72, 0xf1, 0xe6, 0x49,
+	0x0f, 0xe7, 0x4f, 0x3a, 0x38, 0x4e, 0x6d, 0x1e, 0x2e, 0x7e, 0x11, 0x1b,
+	0x0e, 0x5a, 0x3d, 0xa3, 0xc2, 0xbb, 0xed, 0x95, 0x9a, 0xd8, 0xcd, 0xd7,
+	0x5a, 0x72, 0x50, 0x73, 0x59, 0x20, 0xc2, 0xef, 0xc2, 0xe9, 0x59, 0x95,
+	0x89, 0xe7, 0xc9, 0xc1, 0x79, 0xe4, 0xdd, 0x06, 0xf2, 0xce, 0xc4, 0xa4,
+	0xa3, 0xb9, 0x37, 0xaf, 0xc6, 0x37, 0x0b, 0x51, 0x9e, 0x65, 0x50, 0xe3,
+	0x9c, 0x4d, 0xce, 0x9d, 0xf8, 0x3f, 0x39, 0xc7, 0xac, 0x8d, 0x19, 0x38,
+	0xe5, 0x45, 0x58, 0x8b, 0xda, 0x62, 0xf5, 0x88, 0x60, 0x87, 0xef, 0xc0,
+	0x20, 0x46, 0x0e, 0x92, 0x73, 0xba, 0xce, 0x68, 0x2e, 0x6e, 0x26, 0x16,
+	0x7f, 0x55, 0xd5, 0x46, 0x3c, 0x5c, 0x8c, 0xb1, 0x76, 0xe9, 0x5a, 0xd1,
+	0xcd, 0x5a, 0x61, 0xe1, 0x09, 0xf2, 0x63, 0xcd, 0xb8, 0x83, 0x37, 0xe3,
+	0xaa, 0xf5, 0xfd, 0xb4, 0x52, 0x47, 0xfd, 0x16, 0x8c, 0x92, 0x3b, 0xfb,
+	0xc9, 0x9d, 0xb5, 0xe5, 0x59, 0xb5, 0x9e, 0xf5, 0x28, 0x4a, 0xae, 0x15,
+	0x46, 0xf4, 0xf9, 0xcb, 0xc0, 0x15, 0x67, 0xd6, 0x31, 0x3f, 0x93, 0xfd,
+	0xc4, 0xd3, 0x73, 0xe9, 0xd4, 0x8c, 0x63, 0xca, 0xa9, 0x61, 0xfa, 0xa2,
+	0x95, 0xd4, 0xb4, 0xb5, 0x66, 0x04, 0xe9, 0x1a, 0x47, 0x33, 0x35, 0x8e,
+	0x7a, 0x25, 0xad, 0x29, 0xc8, 0x7d, 0xca, 0x18, 0x13, 0xe4, 0xe8, 0x6f,
+	0xe9, 0x83, 0xf7, 0x17, 0x2b, 0xb5, 0x21, 0xd3, 0x2e, 0x52, 0x93, 0x97,
+	0xc8, 0x37, 0x2c, 0xf1, 0xf8, 0xbc, 0xb6, 0xcc, 0x25, 0x48, 0x77, 0x1d,
+	0xf9, 0xd5, 0x4c, 0x7e, 0x3d, 0x8d, 0x2a, 0xbf, 0x0e, 0xd4, 0xf8, 0xb5,
+	0xee, 0x73, 0xfc, 0xd2, 0xfa, 0x75, 0xea, 0xf7, 0xc4, 0x25, 0xbd, 0xca,
+	0x80, 0xe8, 0xd5, 0x5c, 0x8b, 0x20, 0x77, 0x8e, 0x5c, 0x3b, 0xe2, 0xd8,
+	0x68, 0xcd, 0xd6, 0x57, 0xf4, 0xa8, 0x35, 0xcb, 0xb3, 0x28, 0x6b, 0xcf,
+	0xa2, 0xf5, 0x4f, 0xfb, 0x15, 0xad, 0x05, 0x02, 0xef, 0xf8, 0x57, 0xe1,
+	0x2e, 0x52, 0x6a, 0xbf, 0x3f, 0xab, 0x5e, 0xe7, 0xb9, 0xd4, 0xd3, 0x9f,
+	0x6c, 0x9a, 0xc8, 0x8b, 0x8d, 0x13, 0x31, 0x3c, 0x51, 0xac, 0x87, 0xed,
+	0x6d, 0x10, 0xf9, 0x09, 0xe0, 0x5e, 0xea, 0xfc, 0xd2, 0x76, 0xd5, 0xfa,
+	0x6e, 0x5a, 0xf6, 0x77, 0x71, 0x6f, 0xaf, 0xfa, 0x16, 0xcf, 0xa1, 0x85,
+	0x39, 0x8b, 0x31, 0x26, 0x99, 0x99, 0xc4, 0x10, 0xba, 0x2a, 0x75, 0x0f,
+	0xb9, 0xff, 0x88, 0x47, 0xf0, 0x36, 0xf5, 0x24, 0xb2, 0xbc, 0xea, 0xf3,
+	0x75, 0xcd, 0xfc, 0x35, 0x52, 0x99, 0xb3, 0xdc, 0xdf, 0x74, 0xd5, 0xdb,
+	0xfb, 0x67, 0x89, 0x4f, 0xde, 0x9f, 0x59, 0xcb, 0x3d, 0x46, 0xe9, 0xef,
+	0xf7, 0x97, 0x65, 0x70, 0xc5, 0x0c, 0x98, 0x67, 0x81, 0xa7, 0x3d, 0x38,
+	0xe1, 0x6c, 0x75, 0x3f, 0x6b, 0xb9, 0xe7, 0x83, 0xac, 0x83, 0x4f, 0x97,
+	0xff, 0xd0, 0x9f, 0xe9, 0x78, 0x2c, 0xb1, 0x85, 0xbc, 0x78, 0xc0, 0xd7,
+	0x5e, 0x8a, 0xf9, 0xe0, 0xbe, 0xa7, 0x43, 0x11, 0x5c, 0xf1, 0xdb, 0x66,
+	0xa2, 0x4c, 0xc0, 0xb5, 0xe5, 0xb3, 0xea, 0x13, 0xaf, 0x8e, 0x1e, 0x2a,
+	0x47, 0xcf, 0xd4, 0x25, 0x7a, 0x88, 0xc1, 0x6d, 0x15, 0xbd, 0xcf, 0x73,
+	0x3f, 0xb6, 0x58, 0x43, 0x0f, 0xf3, 0x92, 0xaf, 0xf3, 0x3d, 0x8f, 0x98,
+	0xd2, 0xb8, 0xa2, 0x87, 0xf1, 0x37, 0x88, 0xd5, 0x13, 0xab, 0x60, 0x65,
+	0x99, 0xbb, 0x8a, 0x8f, 0x5a, 0x25, 0xac, 0x1a, 0x16, 0x5f, 0xa5, 0x87,
+	0x72, 0x3f, 0xd3, 0x7f, 0xf6, 0x26, 0x9f, 0x61, 0xb1, 0xfb, 0x2b, 0xf4,
+	0x7f, 0x94, 0x98, 0x9b, 0xac, 0xe9, 0x7f, 0x17, 0x63, 0x5b, 0x55, 0xd3,
+	0xff, 0x3d, 0xcc, 0xe3, 0xce, 0x44, 0x96, 0xb9, 0xb5, 0xa8, 0xc9, 0x36,
+	0xf6, 0x3d, 0x55, 0x87, 0x83, 0x4f, 0x45, 0xf1, 0xf4, 0x53, 0x4a, 0x95,
+	0x7d, 0x9c, 0x75, 0x88, 0xa5, 0xb6, 0xe5, 0xc7, 0xf1, 0x51, 0x63, 0xdc,
+	0x35, 0x4d, 0x5d, 0x13, 0xba, 0x59, 0x13, 0xe6, 0x70, 0x27, 0x87, 0x2f,
+	0x93, 0xfb, 0xed, 0xed, 0x32, 0x79, 0x9e, 0xb5, 0x80, 0x5e, 0x7c, 0xe6,
+	0x38, 0x71, 0x32, 0x42, 0xbf, 0xff, 0x0c, 0xaa, 0x58, 0x8b, 0xd7, 0xb0,
+	0xe6, 0x97, 0x6c, 0xbc, 0xeb, 0x29, 0xd5, 0x45, 0x9d, 0x5f, 0x47, 0x2c,
+	0x4c, 0x3b, 0xb1, 0x8a, 0x1f, 0xd9, 0xcc, 0x73, 0x79, 0x97, 0xd8, 0x0e,
+	0x53, 0xaf, 0x58, 0x23, 0x82, 0xd5, 0xec, 0xd7, 0x9a, 0x97, 0xc9, 0x49,
+	0xed, 0x61, 0xf6, 0xce, 0x79, 0x98, 0x44, 0xd5, 0xc3, 0x80, 0x1e, 0x46,
+	0xd7, 0x93, 0x73, 0x9c, 0x73, 0xbc, 0xe6, 0x61, 0x5e, 0xe7, 0x33, 0xb5,
+	0x87, 0x99, 0x26, 0x4e, 0x0b, 0x15, 0x0f, 0xa3, 0x3d, 0x8b, 0xf6, 0x2b,
+	0xb0, 0xad, 0x6c, 0xa7, 0x35, 0x54, 0x90, 0x79, 0xed, 0x69, 0x16, 0x74,
+	0xca, 0x5d, 0xb7, 0x08, 0xf2, 0x97, 0x1a, 0x37, 0x52, 0x5e, 0x82, 0x27,
+	0x9e, 0x5c, 0x80, 0xb0, 0xd7, 0x88, 0xf6, 0x85, 0x2b, 0xad, 0x08, 0xcf,
+	0xd7, 0xe0, 0xd9, 0x76, 0x7d, 0xc9, 0xdf, 0x9c, 0xa5, 0xe6, 0x4a, 0x77,
+	0x1a, 0x4d, 0x5f, 0xa1, 0x29, 0x7f, 0x38, 0x4e, 0xcf, 0xd7, 0xb5, 0x5a,
+	0xaf, 0xf1, 0x86, 0x55, 0xe5, 0x81, 0xee, 0x03, 0xfe, 0x0c, 0x43, 0x8c,
+	0xf9, 0x0d, 0x5f, 0xd7, 0xad, 0xb9, 0x73, 0xfd, 0x1a, 0x79, 0xa2, 0xcf,
+	0xb5, 0x9e, 0xef, 0xfa, 0xfc, 0x6d, 0x7c, 0xc8, 0x9c, 0x7f, 0xc4, 0x9c,
+	0x5f, 0x7b, 0x2a, 0xcb, 0xfd, 0xe1, 0x11, 0xea, 0xae, 0x8a, 0x2c, 0x53,
+	0xea, 0x6a, 0xfa, 0x76, 0x94, 0x98, 0xf7, 0x0b, 0x42, 0xfb, 0xc5, 0x6e,
+	0xfa, 0x45, 0xd8, 0x0d, 0xcc, 0xe5, 0x87, 0x23, 0x32, 0xa0, 0x3f, 0xdd,
+	0x65, 0x9b, 0xa9, 0xcc, 0x09, 0x21, 0xfb, 0xaf, 0x09, 0xd9, 0xa7, 0xc7,
+	0xe8, 0x7c, 0xdf, 0x5c, 0xcb, 0x77, 0x47, 0xe9, 0x7b, 0x5c, 0x5f, 0xfb,
+	0x43, 0xed, 0x41, 0x1f, 0xad, 0x79, 0xd0, 0xad, 0x35, 0x0f, 0x3a, 0x50,
+	0xf3, 0xa0, 0x3d, 0x7f, 0xa4, 0x07, 0xdd, 0x5a, 0xf3, 0xa0, 0x3d, 0x35,
+	0x0f, 0xfa, 0x68, 0xcd, 0x83, 0x0e, 0xd0, 0x83, 0xce, 0x3d, 0x47, 0xef,
+	0xe5, 0x56, 0x4b, 0x5f, 0x3f, 0x41, 0x2c, 0x5f, 0xf4, 0xcf, 0xa9, 0x23,
+	0x8b, 0xeb, 0x2b, 0x3e, 0xe5, 0xb3, 0x3d, 0xeb, 0x5e, 0xe4, 0x9a, 0x3a,
+	0x17, 0xff, 0x81, 0x89, 0x3a, 0xa5, 0x8e, 0xf9, 0x39, 0x1c, 0x2e, 0x4e,
+	0xa9, 0xc3, 0x4d, 0xda, 0x57, 0x68, 0x9f, 0xbd, 0xbb, 0xd2, 0x37, 0xb6,
+	0x66, 0x77, 0x31, 0x3e, 0x39, 0x75, 0x82, 0xfe, 0x34, 0x69, 0x4a, 0xf7,
+	0x5d, 0x53, 0xe6, 0xf6, 0x57, 0xf0, 0xb4, 0xdb, 0x5a, 0x51, 0x79, 0xee,
+	0x2e, 0xf6, 0x6a, 0x73, 0xcf, 0xcd, 0x31, 0x67, 0xdb, 0x54, 0xa1, 0x49,
+	0x4e, 0x5d, 0xae, 0xf4, 0x74, 0xbb, 0x2b, 0x79, 0x6a, 0xe4, 0x98, 0xf4,
+	0xe8, 0xac, 0x6a, 0x4b, 0xc8, 0xbc, 0x69, 0xea, 0xf5, 0x53, 0x7e, 0x1b,
+	0x73, 0x75, 0xa3, 0x21, 0x77, 0x9d, 0x17, 0xd5, 0xb5, 0x6e, 0xaa, 0xad,
+	0x75, 0x73, 0xe9, 0x59, 0xc6, 0xad, 0xf1, 0x59, 0xad, 0x7f, 0x66, 0x36,
+	0x0a, 0x63, 0xc4, 0x9b, 0x59, 0x8d, 0xf8, 0xd4, 0x25, 0x33, 0x8a, 0xe6,
+	0x93, 0xc5, 0x4a, 0xbc, 0xaf, 0xf9, 0x67, 0xcc, 0x0a, 0xdf, 0x4f, 0xe9,
+	0x1a, 0x68, 0xc1, 0x62, 0x5d, 0x6a, 0x1f, 0x95, 0xbd, 0xdd, 0xe2, 0x63,
+	0xf5, 0xdd, 0xb8, 0x37, 0x79, 0x01, 0xda, 0x2b, 0xc5, 0xe9, 0x95, 0xa2,
+	0x48, 0x9c, 0x7a, 0x9f, 0xf1, 0x69, 0xbf, 0xa7, 0xfb, 0x74, 0x07, 0x75,
+	0x23, 0x5e, 0xef, 0x26, 0x11, 0xef, 0xdb, 0x29, 0x1c, 0x44, 0xaf, 0xaf,
+	0x67, 0x89, 0xd5, 0x5c, 0x67, 0xc1, 0x98, 0x83, 0x9b, 0x46, 0xa5, 0xf3,
+	0x10, 0x3e, 0x50, 0x9b, 0x3c, 0xaf, 0x2f, 0xc1, 0xba, 0x7a, 0x22, 0x1d,
+	0x9f, 0x19, 0xe6, 0xd8, 0x95, 0xd7, 0xd7, 0x89, 0xa2, 0x61, 0x54, 0x3f,
+	0x3b, 0x18, 0x8e, 0xb0, 0x67, 0xf1, 0x8d, 0x97, 0x78, 0xdf, 0x45, 0xb9,
+	0x54, 0xcf, 0x5e, 0x50, 0xa9, 0x5e, 0xea, 0x8e, 0x95, 0xf5, 0x76, 0x75,
+	0xa3, 0xbd, 0xff, 0x98, 0x48, 0xf5, 0x2d, 0x40, 0xca, 0xa9, 0x87, 0x37,
+	0xb3, 0x51, 0x73, 0xe3, 0xba, 0x67, 0x01, 0xca, 0x85, 0x1e, 0xce, 0x8b,
+	0x3b, 0x97, 0xf8, 0x0c, 0xf3, 0x8e, 0xd4, 0xb0, 0x89, 0x54, 0x10, 0x83,
+	0xe7, 0x36, 0xb2, 0x67, 0x0b, 0x9c, 0xcf, 0xc6, 0xfd, 0xac, 0x32, 0x8e,
+	0x3d, 0xef, 0xed, 0xda, 0x9b, 0x29, 0xf5, 0x2c, 0x79, 0x1b, 0x54, 0xea,
+	0xa1, 0xc0, 0xa0, 0xaf, 0x7f, 0x27, 0xe9, 0x72, 0x2d, 0x7a, 0xf6, 0xfb,
+	0xf0, 0xa9, 0x0a, 0x9a, 0x72, 0xc9, 0x50, 0xe5, 0x77, 0x10, 0xe9, 0xf4,
+	0x51, 0xeb, 0x26, 0xab, 0x7d, 0x19, 0xfb, 0x28, 0xa5, 0xce, 0x53, 0xab,
+	0x9e, 0xa5, 0xc6, 0x0f, 0x96, 0x3e, 0x55, 0x93, 0x4d, 0xec, 0x19, 0x3d,
+	0x3d, 0xae, 0xaa, 0x49, 0x47, 0x1c, 0xa5, 0x7e, 0xac, 0xf5, 0xbf, 0x34,
+	0xa7, 0x53, 0xec, 0xa9, 0xa8, 0x11, 0xf7, 0x7a, 0xff, 0xa3, 0x76, 0x7c,
+	0x6e, 0xac, 0x52, 0xa3, 0x8c, 0xe1, 0x6d, 0x1f, 0x8f, 0x86, 0x10, 0xef,
+	0x9b, 0x61, 0xec, 0x17, 0x57, 0xc8, 0x9e, 0x92, 0x48, 0xf5, 0x6e, 0x14,
+	0x32, 0x7f, 0xa7, 0x30, 0xba, 0xe7, 0x71, 0x4c, 0x22, 0x2d, 0xfd, 0xcb,
+	0xec, 0xa6, 0xc3, 0xbc, 0x3e, 0xe7, 0xcb, 0xd8, 0x31, 0xbe, 0xef, 0xc8,
+	0xe8, 0x35, 0xb4, 0xee, 0x68, 0xcd, 0x1a, 0xa2, 0x66, 0x05, 0x6a, 0xbe,
+	0xf7, 0x4b, 0x75, 0x3a, 0x21, 0x7b, 0x86, 0x84, 0xc7, 0xb9, 0x2e, 0xd6,
+	0x53, 0x2b, 0x6c, 0x7e, 0x67, 0x8f, 0xb8, 0x78, 0x81, 0x9a, 0xf3, 0x7c,
+	0x39, 0x89, 0x97, 0xcb, 0x1e, 0x5e, 0x64, 0x3d, 0xf9, 0x69, 0xd9, 0xc2,
+	0xfd, 0x4f, 0xca, 0x8c, 0x25, 0xf6, 0xe0, 0x92, 0x2f, 0x9d, 0x7f, 0x60,
+	0xdc, 0xf4, 0x6c, 0x07, 0x57, 0x53, 0x67, 0xf8, 0x8c, 0xa0, 0xcf, 0x6c,
+	0x14, 0x76, 0xd6, 0xc6, 0xf7, 0x13, 0x06, 0x8e, 0x34, 0xf5, 0x63, 0x6d,
+	0xfb, 0x6e, 0xbe, 0x2c, 0x2c, 0x1a, 0xd3, 0xf5, 0xc0, 0x42, 0xc3, 0x58,
+	0x03, 0x1e, 0x20, 0x97, 0x6f, 0x59, 0x96, 0xc3, 0xd5, 0x74, 0x5b, 0xf2,
+	0x02, 0x35, 0x88, 0x5a, 0x9e, 0x07, 0x7e, 0x8e, 0x6d, 0xec, 0x2f, 0x32,
+	0xcb, 0x0f, 0x52, 0xf3, 0xf5, 0x1e, 0x7f, 0x8e, 0xd5, 0xfc, 0xbc, 0xc7,
+	0x6f, 0xb8, 0x7e, 0x5e, 0x47, 0x2a, 0x79, 0x34, 0xb0, 0xe0, 0x50, 0xa0,
+	0xea, 0xd8, 0xcf, 0x4c, 0x50, 0x6b, 0x2f, 0xc6, 0x6f, 0x70, 0x36, 0xb1,
+	0x6f, 0x98, 0x3f, 0xe6, 0xb9, 0x77, 0xd2, 0x3f, 0x0d, 0xfa, 0xfb, 0x78,
+	0x16, 0xf1, 0x5c, 0x94, 0xed, 0x79, 0x43, 0x36, 0x9e, 0x6b, 0x10, 0x03,
+	0xe2, 0x6e, 0xdd, 0x6f, 0x85, 0xe7, 0x6a, 0x0d, 0x6b, 0xe8, 0x21, 0xdd,
+	0xbf, 0x47, 0x50, 0x4a, 0xb7, 0xf5, 0xea, 0x5a, 0xf4, 0xcd, 0x74, 0x97,
+	0xd8, 0xc0, 0xfb, 0xc6, 0xa1, 0x59, 0xb5, 0x9a, 0x7d, 0xc7, 0xea, 0x5a,
+	0xdf, 0xb1, 0x7d, 0x3c, 0x4f, 0x7f, 0x64, 0x8b, 0x6d, 0xe4, 0x6f, 0x46,
+	0x1b, 0xde, 0xbb, 0x75, 0xcf, 0xaf, 0xf7, 0xe0, 0xd0, 0xaf, 0x69, 0x0d,
+	0x73, 0xb0, 0xb7, 0x53, 0xc6, 0x02, 0x68, 0x2e, 0x7f, 0xb1, 0xc6, 0xc0,
+	0xc9, 0x7f, 0xa9, 0xee, 0xc0, 0xd9, 0xc2, 0x58, 0x64, 0x58, 0xa9, 0x45,
+	0x69, 0x13, 0x7d, 0x15, 0xcf, 0x13, 0x73, 0xf2, 0xec, 0x19, 0xa7, 0x4a,
+	0x74, 0xdb, 0x87, 0x94, 0xda, 0x43, 0x2c, 0x7d, 0x92, 0x18, 0x3c, 0xdc,
+	0x8c, 0x60, 0x78, 0x11, 0xf5, 0xe7, 0x0e, 0x96, 0xc0, 0xb7, 0x0b, 0x7f,
+	0x01, 0x77, 0xb1, 0xd1, 0x19, 0xa3, 0x87, 0x32, 0xc7, 0x02, 0x15, 0xf2,
+	0xbc, 0x99, 0x1f, 0xd3, 0x8b, 0x7e, 0xb4, 0xbc, 0x43, 0xfb, 0x95, 0x4a,
+	0xae, 0xd6, 0xd1, 0x5b, 0x7d, 0xcc, 0x1a, 0x90, 0xab, 0x7c, 0x8e, 0x3a,
+	0x77, 0x8e, 0xcf, 0xaa, 0x1d, 0xcc, 0x4d, 0x57, 0x35, 0x2e, 0xab, 0x2e,
+	0xcb, 0xa6, 0xf2, 0x56, 0x38, 0xeb, 0xbf, 0x22, 0xa6, 0x8d, 0xba, 0xff,
+	0x09, 0x55, 0xe7, 0xad, 0x1f, 0x6f, 0x61, 0x8c, 0xd2, 0x9d, 0xac, 0xe0,
+	0xc7, 0xc7, 0xc7, 0xde, 0x60, 0x6c, 0x21, 0x82, 0x24, 0xfb, 0xd0, 0x99,
+	0x7f, 0xe5, 0xbd, 0xf6, 0x65, 0xc0, 0x47, 0xe5, 0x17, 0x59, 0x07, 0x8c,
+	0x8e, 0x46, 0x04, 0x53, 0x8c, 0xf1, 0xf0, 0x1d, 0xc4, 0xe4, 0xc0, 0x28,
+	0x1e, 0x61, 0x9b, 0x81, 0x97, 0x58, 0x7f, 0x4f, 0x50, 0x33, 0x1a, 0xd2,
+	0x0e, 0xca, 0xbc, 0x3e, 0x56, 0x8c, 0xef, 0x3a, 0x4b, 0xde, 0x9e, 0xe4,
+	0xf5, 0x71, 0xee, 0xf3, 0x7e, 0xfa, 0xbd, 0xef, 0x8c, 0xd7, 0xe1, 0x5b,
+	0xe3, 0x51, 0xdc, 0x3f, 0x9e, 0x65, 0x1f, 0x86, 0x7b, 0xea, 0xb9, 0xee,
+	0xeb, 0xc4, 0xf3, 0x8e, 0x65, 0xb7, 0x61, 0x83, 0x13, 0x77, 0x77, 0x0b,
+	0xfa, 0xcf, 0x43, 0x70, 0x1c, 0xe2, 0xe8, 0xdf, 0xbc, 0x3b, 0xd8, 0x4c,
+	0x28, 0xb5, 0x73, 0x99, 0xfe, 0xcd, 0x67, 0x7d, 0xe5, 0x7a, 0x28, 0xad,
+	0xfd, 0x11, 0x31, 0x59, 0x24, 0x26, 0x79, 0x36, 0x2f, 0x14, 0x89, 0x4b,
+	0x7a, 0xc5, 0xe7, 0x8b, 0x1a, 0xdb, 0x3e, 0x4e, 0x27, 0xfa, 0x55, 0x15,
+	0x2b, 0xbf, 0x53, 0xcf, 0x7a, 0x57, 0x42, 0xa8, 0xb3, 0xe8, 0xe7, 0x81,
+	0xb7, 0x0a, 0x31, 0x67, 0x4b, 0x59, 0xe3, 0xe1, 0x7b, 0x35, 0x3c, 0xd0,
+	0x5c, 0x57, 0xfc, 0x8a, 0x9c, 0x9a, 0x80, 0xd6, 0xba, 0x16, 0xe7, 0xae,
+	0xe2, 0xe0, 0x24, 0x73, 0x3f, 0x40, 0x8f, 0xee, 0x5e, 0xe6, 0x91, 0x8f,
+	0x96, 0x8c, 0x0e, 0xf6, 0xba, 0xcc, 0x87, 0xde, 0x33, 0xf9, 0x9b, 0x96,
+	0x49, 0x7d, 0x26, 0x27, 0x0b, 0xd8, 0xca, 0xbe, 0x84, 0x8a, 0x5d, 0xdd,
+	0x5b, 0x89, 0x7b, 0xfe, 0x21, 0xf7, 0xfc, 0x13, 0x5e, 0x1f, 0x2d, 0xc6,
+	0xf3, 0x5d, 0xdc, 0xf3, 0x73, 0xbc, 0x9e, 0x28, 0xa6, 0x2b, 0xcf, 0x98,
+	0x28, 0xe5, 0x50, 0x2c, 0xbe, 0xaa, 0x8a, 0x95, 0xdf, 0xa9, 0x2c, 0xd1,
+	0xc5, 0x9e, 0x76, 0xfe, 0xa1, 0x39, 0x8d, 0x57, 0x6a, 0x3d, 0xf7, 0xff,
+	0xcd, 0xf4, 0x9c, 0x4e, 0xcb, 0xcc, 0x37, 0xc4, 0xac, 0xfa, 0xd8, 0x93,
+	0xb9, 0x17, 0x70, 0x46, 0x2d, 0x44, 0x6a, 0x6a, 0xa1, 0x90, 0x93, 0x2b,
+	0x0d, 0xe9, 0x36, 0x9b, 0x55, 0xad, 0x4e, 0xd6, 0xb4, 0xda, 0x2b, 0x3d,
+	0x58, 0xdb, 0x43, 0xca, 0x39, 0x86, 0x79, 0xc4, 0xbe, 0xae, 0xa9, 0x5a,
+	0x7f, 0xf4, 0x67, 0xfa, 0x24, 0x2b, 0x17, 0x33, 0x99, 0x87, 0xdc, 0x56,
+	0x7d, 0x2f, 0x52, 0xfb, 0x8d, 0x28, 0xe5, 0x57, 0x7a, 0xc7, 0xa6, 0x2e,
+	0x7e, 0xa7, 0x7b, 0xc7, 0x4f, 0x55, 0x5f, 0x53, 0xd7, 0x75, 0xcd, 0x0a,
+	0xd0, 0x41, 0x5f, 0x78, 0x99, 0x9a, 0x90, 0xa0, 0xab, 0x12, 0x38, 0xc3,
+	0x3e, 0xed, 0x58, 0x47, 0xdc, 0xd9, 0xcb, 0xf5, 0x72, 0x8e, 0x43, 0x2d,
+	0xd8, 0x83, 0x90, 0xc7, 0x31, 0xe5, 0x04, 0xe7, 0x68, 0x2d, 0xd4, 0x3f,
+	0x3e, 0xfc, 0x57, 0xbb, 0xe5, 0xf9, 0xf4, 0x30, 0xa7, 0x0d, 0xcb, 0xd3,
+	0x79, 0x49, 0x65, 0xf6, 0x32, 0x9e, 0x69, 0xc6, 0x13, 0xf2, 0x72, 0xd4,
+	0xc6, 0x54, 0x65, 0x7e, 0x60, 0xe9, 0x38, 0x2a, 0xf1, 0xf0, 0x9e, 0xd6,
+	0x3c, 0xd9, 0x73, 0x06, 0xa9, 0xdc, 0x4e, 0xed, 0xad, 0x17, 0xeb, 0x18,
+	0xda, 0x62, 0x3b, 0x19, 0xcf, 0x91, 0xa6, 0x8a, 0x9e, 0xf2, 0x3b, 0x3e,
+	0xaf, 0x68, 0x6c, 0xac, 0x23, 0xde, 0x6f, 0x4c, 0xc7, 0x78, 0xb6, 0x1d,
+	0x78, 0xbc, 0x5c, 0x3d, 0xe7, 0xc7, 0x2a, 0x58, 0xfe, 0x5f, 0x19, 0xf6,
+	0xc4, 0xf3, 0xd8, 0x17, 0x00, 0x00, 0x00 };
+
+static const u32 bnx2_TPAT_b06FwData[(0x0/4) + 1] = { 0x0 };
+static const u32 bnx2_TPAT_b06FwRodata[(0x0/4) + 1] = { 0x0 };
+
+static struct fw_info bnx2_tpat_fw_06 = {
+	/* Firmware version: 6.2.3 */
+	.ver_major			= 0x6,
+	.ver_minor			= 0x2,
+	.ver_fix			= 0x3,
+
+	.start_addr			= 0x08000490,
+
+	.text_addr			= 0x08000400,
+	.text_len			= 0x17d4,
+	.text_index			= 0x0,
+	.gz_text			= bnx2_TPAT_b06FwText,
+	.gz_text_len			= sizeof(bnx2_TPAT_b06FwText),
+
+	.data_addr			= 0x00000000,
+	.data_len			= 0x0,
+	.data_index			= 0x0,
+	.data				= bnx2_TPAT_b06FwData,
+
+	.sbss_addr			= 0x08001c00,
+	.sbss_len			= 0x44,
+	.sbss_index			= 0x0,
+
+	.bss_addr			= 0x08001c44,
+	.bss_len			= 0x450,
+	.bss_index			= 0x0,
+
+	.rodata_addr			= 0x00000000,
+	.rodata_len			= 0x0,
+	.rodata_index			= 0x0,
+	.rodata				= bnx2_TPAT_b06FwRodata,
+};
+
+/* Initialized Values for the TX Patch-up Processor. */
+static const struct cpu_reg cpu_reg_tpat = {
+	.mode = BNX2_TPAT_CPU_MODE,
+	.mode_value_halt = BNX2_TPAT_CPU_MODE_SOFT_HALT,
+	.mode_value_sstep = BNX2_TPAT_CPU_MODE_STEP_ENA,
+	.state = BNX2_TPAT_CPU_STATE,
+	.state_value_clear = 0xffffff,
+	.gpr0 = BNX2_TPAT_CPU_REG_FILE,
+	.evmask = BNX2_TPAT_CPU_EVENT_MASK,
+	.pc = BNX2_TPAT_CPU_PROGRAM_COUNTER,
+	.inst = BNX2_TPAT_CPU_INSTRUCTION,
+	.bp = BNX2_TPAT_CPU_HW_BREAKPOINT,
+	.spad_base = BNX2_TPAT_SCRATCH,
+	.mips_view_base = 0x8000000,
+};
+
+static u8 bnx2_TXP_b06FwText[] = {
+	0x9d, 0x7b, 0x0b, 0x70, 0x5c, 0xd5, 0x99, 0xe6, 0x77, 0x6e, 0xb7, 0xa4,
+	0x6e, 0x3d, 0x5a, 0x57, 0xa6, 0x6d, 0x5a, 0x13, 0x67, 0xdc, 0x97, 0xbe,
+	0x57, 0x6a, 0x90, 0x6c, 0x6e, 0xcb, 0x32, 0x96, 0x33, 0xdd, 0xb8, 0x23,
+	0xcb, 0x96, 0xfc, 0xc2, 0x02, 0x94, 0x8c, 0x3c, 0xc3, 0x0e, 0x1a, 0x5b,
+	0x60, 0x81, 0x0d, 0x88, 0xa0, 0xcd, 0x8a, 0x2c, 0x13, 0x35, 0x92, 0x6c,
+	0x8c, 0xdd, 0xd2, 0x95, 0x68, 0x2b, 0x32, 0x53, 0x5b, 0x13, 0x61, 0xc9,
+	0xc8, 0x40, 0xcb, 0x0d, 0x21, 0x49, 0x25, 0xbb, 0x93, 0x4a, 0xaf, 0x01,
+	0xe3, 0x24, 0x3c, 0x92, 0xdd, 0xd4, 0x14, 0x99, 0x9a, 0x99, 0xb8, 0x78,
+	0x18, 0xc3, 0xf2, 0x9a, 0xd9, 0x4c, 0xad, 0x9c, 0x01, 0xdf, 0xfd, 0xce,
+	0xbd, 0xdd, 0xb6, 0x93, 0x62, 0xa6, 0xa6, 0x46, 0x55, 0xaa, 0x6e, 0xdd,
+	0xc7, 0x7f, 0xfe, 0xf3, 0x3f, 0xbe, 0xff, 0xfb, 0xcf, 0x39, 0xba, 0x0e,
+	0x28, 0x47, 0xe1, 0xa7, 0x8a, 0xbf, 0x37, 0xf4, 0x0f, 0x0e, 0xac, 0x5e,
+	0xd5, 0xb4, 0xca, 0xb9, 0xe0, 0x51, 0x4a, 0xe5, 0xc7, 0x0d, 0x02, 0xe8,
+	0x79, 0x1f, 0xff, 0xa1, 0x9f, 0x65, 0xff, 0xb1, 0xd7, 0x70, 0xf0, 0x2a,
+	0xf7, 0xf3, 0xef, 0x4a, 0x2e, 0x5f, 0xf3, 0x00, 0x6a, 0x51, 0x4f, 0xf9,
+	0x0b, 0x9f, 0x12, 0x0f, 0xc7, 0x5b, 0x75, 0xf8, 0x3c, 0xf1, 0x5f, 0x26,
+	0x76, 0xeb, 0x40, 0x32, 0xdb, 0x10, 0xde, 0x80, 0xcf, 0xec, 0x54, 0xd0,
+	0x0b, 0x79, 0xfd, 0x8b, 0xf1, 0x4f, 0x87, 0x7e, 0xb4, 0x56, 0xfb, 0x64,
+	0xc6, 0x03, 0x9f, 0x1a, 0x3f, 0x01, 0xb5, 0x0e, 0xbe, 0xe5, 0x7c, 0xe7,
+	0xbf, 0xd5, 0xff, 0x77, 0x05, 0x81, 0xa2, 0xac, 0x16, 0x8c, 0x58, 0x48,
+	0xf9, 0xe2, 0xfd, 0x28, 0x5b, 0x03, 0xbc, 0x93, 0x36, 0xcc, 0x11, 0x60,
+	0x42, 0x89, 0x1b, 0xe1, 0x53, 0x30, 0xb1, 0x3f, 0x17, 0x46, 0x1b, 0x7f,
+	0x37, 0x5b, 0x17, 0xed, 0x70, 0x09, 0x52, 0x1e, 0x3e, 0xb7, 0xab, 0x19,
+	0xd8, 0x98, 0x36, 0x71, 0xc0, 0x82, 0xaf, 0x36, 0xfe, 0x10, 0xd6, 0xf1,
+	0x33, 0x10, 0x1f, 0xc4, 0x6b, 0x63, 0x91, 0xf0, 0x93, 0xd0, 0xba, 0x75,
+	0x8f, 0x36, 0x08, 0x34, 0xf4, 0xf5, 0x0a, 0xad, 0xe7, 0x75, 0xa1, 0x75,
+	0x8e, 0x09, 0xf8, 0x04, 0x9f, 0x6b, 0xc8, 0xca, 0xcf, 0x41, 0x5c, 0x97,
+	0xf5, 0xe1, 0xac, 0x47, 0x8e, 0xff, 0x65, 0xda, 0x5f, 0xc0, 0xab, 0xb7,
+	0x60, 0x94, 0x3a, 0x94, 0xc4, 0x05, 0x8e, 0x35, 0x1b, 0xa1, 0x61, 0xc8,
+	0xfb, 0x61, 0x6c, 0xc8, 0xc9, 0x4f, 0x8d, 0xb3, 0xb6, 0xed, 0x51, 0xd3,
+	0xb6, 0x8f, 0x9b, 0x65, 0x48, 0xa9, 0x5a, 0x08, 0x10, 0x18, 0x36, 0x15,
+	0x24, 0xd5, 0xd6, 0xb0, 0x17, 0x5a, 0xe8, 0x0e, 0xfc, 0x0b, 0xe7, 0x9c,
+	0x8c, 0x96, 0xc0, 0x7d, 0xbe, 0x07, 0x65, 0xc8, 0xab, 0xae, 0xd5, 0x8e,
+	0xa5, 0x6d, 0xfb, 0xb4, 0xee, 0xc5, 0x71, 0xda, 0x67, 0x38, 0xfb, 0x2f,
+	0x76, 0x9e, 0xb6, 0x19, 0xd5, 0x8b, 0xe3, 0xfb, 0x30, 0xa3, 0xda, 0xf6,
+	0x2c, 0xef, 0x1d, 0xc8, 0x16, 0xed, 0x6c, 0xdb, 0x8a, 0x6e, 0xdb, 0xbb,
+	0xf5, 0xdf, 0xda, 0xbb, 0x7e, 0xe7, 0x59, 0xdb, 0x3e, 0x64, 0x5e, 0x85,
+	0x13, 0x99, 0x36, 0xb1, 0x65, 0x7e, 0x59, 0x60, 0xf3, 0xb4, 0x8d, 0xd3,
+	0x26, 0x54, 0x25, 0xbe, 0x49, 0x6c, 0x9e, 0xef, 0x10, 0x1b, 0x73, 0xb7,
+	0x88, 0x4d, 0xb3, 0x7f, 0x22, 0x3a, 0xe6, 0x7b, 0x44, 0x7b, 0x2e, 0x84,
+	0x39, 0x2b, 0x88, 0x59, 0xab, 0x5b, 0xb4, 0xcd, 0x77, 0x09, 0x77, 0x1e,
+	0x83, 0xa2, 0x35, 0x57, 0x94, 0x75, 0xd9, 0x8e, 0x9b, 0xd3, 0xf4, 0xb6,
+	0x55, 0xc6, 0x71, 0x16, 0xed, 0x1f, 0xd5, 0x2f, 0x72, 0x9e, 0x26, 0x1e,
+	0xcd, 0x1d, 0xc2, 0xf6, 0x69, 0xdb, 0xce, 0xc6, 0x80, 0x6c, 0x0e, 0x78,
+	0xc6, 0x8a, 0x74, 0xf6, 0x09, 0xdb, 0x6e, 0x37, 0xec, 0x15, 0xe7, 0xcc,
+	0x86, 0xe8, 0x8b, 0xf8, 0x7f, 0xf6, 0x4c, 0x10, 0xa9, 0x4a, 0xca, 0x38,
+	0x4c, 0x9f, 0xdd, 0x3d, 0x06, 0x5f, 0x59, 0x7c, 0x14, 0xef, 0xa6, 0xe1,
+	0x2b, 0x8d, 0xa7, 0x70, 0x3a, 0x3d, 0xac, 0xfa, 0x10, 0x09, 0x6d, 0x16,
+	0xa9, 0x41, 0x05, 0x5a, 0xff, 0x5b, 0xd0, 0xc2, 0xf4, 0xc7, 0x99, 0x17,
+	0x84, 0x96, 0x7f, 0x11, 0x5a, 0xf2, 0xb7, 0x42, 0xeb, 0xa8, 0xf5, 0x20,
+	0xa9, 0x18, 0x3e, 0xfc, 0xa8, 0x5e, 0xfa, 0x64, 0x14, 0xab, 0x1c, 0xdf,
+	0xa4, 0x70, 0xed, 0x25, 0xdf, 0xd0, 0x5e, 0xd4, 0xeb, 0x00, 0xf5, 0x7a,
+	0xc9, 0xd4, 0x42, 0xc7, 0x60, 0xaf, 0xe8, 0x35, 0xdd, 0x7b, 0xa3, 0xb9,
+	0x16, 0x3c, 0x62, 0x25, 0x71, 0xc8, 0xfa, 0x01, 0x75, 0x6e, 0x63, 0x1c,
+	0x24, 0xf1, 0xfd, 0x5c, 0x1b, 0x7e, 0x9c, 0x8b, 0xe3, 0x7b, 0xbc, 0xf7,
+	0xdd, 0x5c, 0x33, 0x9e, 0xcf, 0x99, 0xf8, 0x4e, 0xae, 0x11, 0xcf, 0xe5,
+	0xa2, 0x78, 0x36, 0xe7, 0x15, 0x1b, 0xad, 0x2c, 0x36, 0x8f, 0xa5, 0xd0,
+	0xce, 0x58, 0x3a, 0x93, 0x8e, 0xb4, 0x3c, 0x05, 0xed, 0x59, 0x06, 0x74,
+	0xa0, 0x23, 0xa7, 0x06, 0xda, 0x2c, 0xad, 0x03, 0x08, 0x06, 0xda, 0x72,
+	0x3a, 0x4e, 0xa5, 0x43, 0x81, 0xd6, 0x5c, 0x28, 0xb0, 0xc1, 0x5a, 0x1e,
+	0xd8, 0x90, 0x33, 0xc4, 0x59, 0x55, 0x20, 0xb2, 0xd2, 0x87, 0xbd, 0x99,
+	0x5f, 0xa2, 0xa7, 0x46, 0x6a, 0xa5, 0xe2, 0x5e, 0xda, 0xe6, 0xd5, 0x58,
+	0x43, 0xcf, 0x87, 0x78, 0x1d, 0xa9, 0xa5, 0xee, 0xb5, 0x7e, 0x5e, 0xab,
+	0x6e, 0x42, 0x60, 0x07, 0xed, 0x75, 0x8b, 0xe5, 0xc3, 0xcd, 0x4d, 0x9f,
+	0xd9, 0xe1, 0x25, 0x8e, 0x8f, 0x03, 0x5d, 0xd3, 0xde, 0xc0, 0x26, 0xcb,
+	0xb6, 0xf7, 0x37, 0x09, 0x3c, 0x6f, 0x36, 0x89, 0x9e, 0x25, 0xc5, 0xd8,
+	0x4f, 0xce, 0xfc, 0xc0, 0x4c, 0x62, 0xa9, 0x9e, 0xc7, 0xd2, 0xab, 0x30,
+	0xf3, 0x94, 0xb9, 0x52, 0x84, 0x6b, 0xdc, 0xb8, 0x18, 0xca, 0x70, 0xae,
+	0x57, 0xb9, 0xb2, 0x77, 0x53, 0xf6, 0x5e, 0xb3, 0x21, 0xf9, 0x33, 0x99,
+	0x83, 0x35, 0x49, 0x64, 0xcd, 0x88, 0x48, 0x39, 0xcf, 0xc5, 0xb1, 0x7f,
+	0xbe, 0x19, 0x07, 0xe8, 0xd7, 0x3b, 0x33, 0x5a, 0xf4, 0x2c, 0xc2, 0x98,
+	0xcf, 0xe9, 0x22, 0x1f, 0x0c, 0xe3, 0xf9, 0xfa, 0x4a, 0xf4, 0xd0, 0x1e,
+	0xc3, 0xd3, 0x48, 0xb6, 0x33, 0x56, 0xcf, 0x06, 0x97, 0xc1, 0xa3, 0x07,
+	0xf8, 0x5b, 0x96, 0xac, 0xd5, 0xcb, 0xb1, 0x7b, 0x36, 0x88, 0x07, 0x73,
+	0x37, 0xe2, 0x50, 0x26, 0x88, 0x01, 0xda, 0xb9, 0x3b, 0x96, 0x7c, 0x3a,
+	0x04, 0x63, 0x62, 0x4a, 0x09, 0xe2, 0x6b, 0x7c, 0x6f, 0x74, 0x3a, 0x88,
+	0x7e, 0x4b, 0xc5, 0xa4, 0x69, 0x0c, 0xd6, 0xf0, 0xda, 0x7d, 0xbc, 0x36,
+	0x3e, 0xed, 0xc3, 0xab, 0xb1, 0x76, 0x31, 0x53, 0xa3, 0x45, 0x69, 0x2f,
+	0xec, 0xb1, 0x64, 0xfc, 0xe1, 0xe1, 0xca, 0xb8, 0x11, 0x7d, 0x93, 0x7f,
+	0xdf, 0x91, 0x2b, 0x0f, 0x6c, 0x9a, 0x0e, 0xc0, 0xa7, 0x7f, 0x6a, 0x97,
+	0x34, 0xdb, 0xf6, 0x0b, 0xa6, 0xd1, 0xbd, 0x0f, 0x5e, 0xec, 0xcd, 0x29,
+	0xe8, 0x9b, 0x2d, 0xe7, 0x9c, 0xbc, 0x78, 0xaf, 0xbe, 0x1c, 0x77, 0xcd,
+	0xc6, 0x71, 0x60, 0x9a, 0x3a, 0x64, 0xb0, 0xe2, 0x15, 0x73, 0x64, 0x67,
+	0x25, 0x63, 0x62, 0xb7, 0x88, 0x62, 0x85, 0xe1, 0xc7, 0xd0, 0x6c, 0x25,
+	0x63, 0x5b, 0xc5, 0x5d, 0xf3, 0x7e, 0x3c, 0x98, 0x51, 0x70, 0x5d, 0xbd,
+	0xd4, 0x2d, 0x72, 0x22, 0xc4, 0x9c, 0x7a, 0xae, 0xa9, 0x02, 0xf7, 0xcf,
+	0xfa, 0x31, 0x90, 0x51, 0xd1, 0x3b, 0xdd, 0x8c, 0x49, 0x2b, 0x0e, 0x8b,
+	0x79, 0xf0, 0x58, 0x93, 0x96, 0x6a, 0x53, 0xb4, 0xfe, 0x12, 0x25, 0x89,
+	0x0f, 0x63, 0x25, 0x98, 0xa9, 0xb1, 0xed, 0x17, 0x63, 0x0d, 0xd1, 0x49,
+	0xc6, 0xf9, 0x92, 0x78, 0x90, 0x39, 0xa6, 0xcd, 0x30, 0xfe, 0x5a, 0x74,
+	0xe5, 0x0b, 0xe2, 0x2c, 0x6d, 0x73, 0xdc, 0x0a, 0x06, 0xb6, 0x5b, 0x6a,
+	0x60, 0x7b, 0x6e, 0x79, 0xa0, 0xd5, 0x92, 0xfe, 0x06, 0x7d, 0x0f, 0xec,
+	0xa0, 0xdf, 0x3e, 0x8a, 0x7d, 0x66, 0xe7, 0x6b, 0x8a, 0x7e, 0xd3, 0x0e,
+	0xa6, 0xa0, 0x4d, 0x48, 0x3b, 0x1f, 0x99, 0xf7, 0x06, 0x3a, 0x2d, 0x81,
+	0xa0, 0xde, 0x8c, 0x89, 0x9c, 0x1c, 0xdf, 0xb6, 0xa7, 0x4c, 0xa0, 0x6f,
+	0x3c, 0xb2, 0x58, 0x23, 0xfc, 0x38, 0x7b, 0x35, 0x30, 0x74, 0x92, 0x36,
+	0xb0, 0xda, 0x70, 0x98, 0xf1, 0xf8, 0x64, 0x73, 0x10, 0x77, 0x32, 0xb6,
+	0xb6, 0x59, 0x61, 0xec, 0x5b, 0x90, 0xf1, 0xa4, 0x63, 0xf7, 0x82, 0x0f,
+	0x7b, 0x32, 0xff, 0x8b, 0xbe, 0x90, 0xf2, 0xff, 0x0a, 0x08, 0xa8, 0xc4,
+	0x9e, 0x0e, 0x3c, 0x6a, 0xa1, 0xc9, 0x17, 0xd7, 0xa2, 0x49, 0xd8, 0xa8,
+	0x8b, 0xe1, 0xd3, 0x52, 0x18, 0x9d, 0xe7, 0x3d, 0x02, 0xeb, 0x8c, 0x0e,
+	0x3c, 0x4e, 0xbd, 0xb6, 0x64, 0xfd, 0x18, 0xcc, 0x94, 0xa3, 0x3f, 0x63,
+	0xc3, 0xbb, 0x1a, 0x03, 0x5e, 0x3e, 0x57, 0xdd, 0x64, 0xf4, 0xbd, 0x2e,
+	0xbc, 0xd8, 0x9e, 0xed, 0x60, 0x9e, 0xbc, 0x8f, 0x64, 0xa9, 0x0f, 0xc7,
+	0xb2, 0x95, 0x98, 0xc9, 0xc6, 0x31, 0x42, 0x3f, 0xed, 0xa5, 0xcf, 0x7b,
+	0x96, 0x96, 0x22, 0x5a, 0xa7, 0xf0, 0x37, 0x18, 0xb8, 0x69, 0x7a, 0x79,
+	0x60, 0xa3, 0xe5, 0xa5, 0xcf, 0x14, 0xdc, 0x93, 0x91, 0xf6, 0xb1, 0x71,
+	0x2c, 0xa6, 0xe2, 0x58, 0x2e, 0x88, 0x7d, 0x56, 0x08, 0x27, 0x72, 0x87,
+	0xa9, 0x4f, 0x90, 0xf9, 0x2e, 0x75, 0x7a, 0x19, 0x2e, 0x3e, 0x03, 0x5f,
+	0x1b, 0x2f, 0x41, 0xd2, 0x29, 0x23, 0x41, 0xf4, 0x5a, 0x3f, 0xb6, 0x4b,
+	0x74, 0xfd, 0xe8, 0x7e, 0x7e, 0x7f, 0x20, 0x57, 0x89, 0x07, 0x2d, 0xad,
+	0x65, 0x8d, 0xa7, 0x12, 0x7b, 0x18, 0x7f, 0xff, 0x99, 0xf1, 0x3a, 0xe3,
+	0x3c, 0x57, 0x4a, 0xa3, 0xbb, 0xcf, 0x0f, 0x59, 0xf6, 0xc7, 0x15, 0xf1,
+	0x8b, 0x76, 0xdf, 0x1a, 0xbd, 0xe3, 0xbc, 0x27, 0x88, 0xbb, 0xf8, 0xdc,
+	0xc0, 0xac, 0xb4, 0xff, 0x26, 0x05, 0xe5, 0x5a, 0x38, 0xcc, 0x2a, 0xd0,
+	0x9e, 0xfb, 0xe7, 0x42, 0x0d, 0x1c, 0x14, 0x3b, 0x25, 0xc6, 0x97, 0xc1,
+	0xb7, 0x82, 0x78, 0x38, 0x6a, 0x0d, 0x8a, 0xdb, 0x89, 0x43, 0x5b, 0x69,
+	0xe7, 0xbb, 0x63, 0x91, 0x8e, 0x36, 0xe2, 0x4f, 0x94, 0xf8, 0xa3, 0xc4,
+	0x7c, 0xd8, 0xd0, 0x78, 0xc1, 0xee, 0x71, 0x6c, 0xd8, 0x81, 0x71, 0xab,
+	0x05, 0x63, 0xcc, 0xdf, 0x3c, 0x31, 0xa6, 0x8d, 0x36, 0x3b, 0x6d, 0xa0,
+	0xba, 0x92, 0x36, 0x3d, 0x90, 0x8b, 0xb4, 0xbc, 0xc7, 0x04, 0x3b, 0xa0,
+	0xdb, 0xf8, 0x29, 0x63, 0x22, 0x5b, 0xc3, 0x22, 0xa0, 0xdf, 0x88, 0xc9,
+	0x4c, 0x19, 0xcc, 0xa6, 0xe4, 0x37, 0x54, 0x62, 0xf8, 0xf9, 0x35, 0xc8,
+	0x72, 0x68, 0x11, 0x8a, 0x1b, 0x33, 0x3f, 0x20, 0x9c, 0x1f, 0xa1, 0x2d,
+	0x33, 0xd6, 0x0d, 0xf8, 0x0e, 0x71, 0x66, 0xce, 0xf4, 0xe2, 0x7f, 0x67,
+	0xa7, 0x89, 0xf7, 0x86, 0xb9, 0x44, 0x94, 0xd3, 0x7e, 0xe0, 0x38, 0x78,
+	0x58, 0x89, 0xdb, 0xf6, 0x2b, 0xd4, 0xe1, 0x19, 0xc3, 0x48, 0x0e, 0x0b,
+	0xa8, 0x9e, 0xb8, 0xbd, 0xe2, 0x8e, 0x58, 0x29, 0x7d, 0x15, 0xc0, 0x0a,
+	0xbd, 0x47, 0x74, 0xe4, 0x0c, 0xf3, 0x05, 0xfc, 0x89, 0xb8, 0x7d, 0x1e,
+	0xac, 0x5d, 0xdd, 0x62, 0xe7, 0x7c, 0x39, 0xfd, 0xdd, 0x42, 0xb9, 0xa8,
+	0x5e, 0xa2, 0x2b, 0xf8, 0xda, 0x2d, 0x02, 0xcb, 0xf4, 0x24, 0x4e, 0x37,
+	0xab, 0x81, 0x6e, 0xc6, 0xca, 0x11, 0xc6, 0xc7, 0xd1, 0x93, 0xa1, 0xc0,
+	0x57, 0x18, 0x1f, 0x53, 0x27, 0x83, 0xf4, 0x51, 0x1b, 0xb1, 0x7c, 0x79,
+	0x60, 0xa7, 0xd5, 0x21, 0x76, 0x12, 0xd3, 0xb7, 0xcc, 0x42, 0x2d, 0x8f,
+	0x77, 0x89, 0x4d, 0xb9, 0x41, 0xb1, 0x25, 0xf7, 0xf7, 0x17, 0xcf, 0x06,
+	0x25, 0x1e, 0x19, 0x33, 0x5f, 0xc7, 0xd5, 0xb4, 0x33, 0x31, 0xcf, 0x72,
+	0x6a, 0x57, 0xf5, 0x32, 0x7d, 0x14, 0xdf, 0x52, 0x5d, 0x3b, 0x6e, 0xa4,
+	0x1d, 0x67, 0xbc, 0xa8, 0x5e, 0xaa, 0xdf, 0x8b, 0x29, 0xe7, 0x5a, 0x30,
+	0xd0, 0x6e, 0x25, 0x15, 0x45, 0x87, 0xba, 0x22, 0xde, 0xc6, 0xfa, 0xb0,
+	0x9c, 0x98, 0xd7, 0x21, 0xda, 0x28, 0x3f, 0xc9, 0x9a, 0x91, 0x64, 0xcd,
+	0x48, 0x52, 0xd7, 0x24, 0x6b, 0x45, 0x6b, 0x4e, 0xda, 0x5d, 0xca, 0x25,
+	0xa6, 0x32, 0xbf, 0xbe, 0x47, 0xf9, 0xdf, 0xb5, 0x88, 0xa7, 0x16, 0xf1,
+	0xd4, 0x22, 0x9e, 0x5a, 0xc4, 0x53, 0x4b, 0xe2, 0x70, 0x07, 0xb1, 0xfb,
+	0xe7, 0x17, 0xf3, 0x41, 0x89, 0x61, 0x41, 0xe6, 0x51, 0x1b, 0xf5, 0x90,
+	0x38, 0x1a, 0x66, 0x9d, 0x5b, 0x1e, 0xb8, 0x99, 0xf3, 0x99, 0xcc, 0x06,
+	0x14, 0x59, 0x5f, 0x23, 0x2b, 0xdd, 0x5c, 0x3d, 0x34, 0x2d, 0xf3, 0x51,
+	0x3b, 0x11, 0x66, 0x9e, 0x76, 0xc7, 0x4c, 0x1b, 0x57, 0xcb, 0xbc, 0x64,
+	0xae, 0x33, 0x97, 0x1f, 0x23, 0x3e, 0xae, 0x8b, 0xad, 0x41, 0xd3, 0x55,
+	0xb2, 0x56, 0x68, 0x1d, 0x29, 0xcc, 0x5c, 0x4c, 0x05, 0xb5, 0x96, 0x19,
+	0x14, 0x65, 0x7f, 0x9e, 0x5c, 0x3f, 0xee, 0xce, 0x54, 0x30, 0x37, 0x6c,
+	0x74, 0x32, 0x9e, 0xab, 0x57, 0x6b, 0xfd, 0xd5, 0x4a, 0x39, 0x4e, 0x19,
+	0xb6, 0xdd, 0x69, 0xca, 0xfc, 0xa2, 0x2c, 0xa5, 0x43, 0xf2, 0x84, 0x2f,
+	0xaf, 0x60, 0x6d, 0x7f, 0x95, 0x71, 0x31, 0x96, 0xf3, 0x63, 0x5f, 0xc6,
+	0xa9, 0x9d, 0x6d, 0xa5, 0xcc, 0xa3, 0x91, 0x98, 0x82, 0xbd, 0xba, 0xd1,
+	0x51, 0x21, 0x8c, 0x33, 0xeb, 0xc9, 0xb4, 0x76, 0x32, 0x87, 0xf6, 0x10,
+	0x1f, 0xda, 0xa6, 0x8d, 0xe8, 0x3f, 0x11, 0xbb, 0x36, 0x66, 0x2f, 0xe7,
+	0xcd, 0xdd, 0x19, 0x87, 0x07, 0x50, 0x77, 0x15, 0x3f, 0x60, 0xde, 0xdc,
+	0xc7, 0xbc, 0x79, 0xae, 0x90, 0x37, 0xb9, 0xdc, 0x93, 0x42, 0xc6, 0x34,
+	0x14, 0x2f, 0x71, 0xf7, 0x46, 0x7e, 0x67, 0xfe, 0xcd, 0xba, 0x71, 0x0e,
+	0x07, 0x43, 0xfa, 0x85, 0xd4, 0x39, 0xa8, 0x4b, 0x1b, 0x4c, 0xf1, 0x7b,
+	0x25, 0xbe, 0xc3, 0x9a, 0x3f, 0x49, 0xb9, 0xba, 0x21, 0xeb, 0xb4, 0x0f,
+	0x66, 0x9d, 0xbd, 0xa2, 0xba, 0xe9, 0x82, 0x90, 0xf9, 0x60, 0xe5, 0xb6,
+	0xd1, 0x27, 0x8d, 0x70, 0xeb, 0x81, 0xca, 0x78, 0x68, 0x63, 0x3c, 0x48,
+	0x1c, 0x49, 0xc2, 0xf5, 0x63, 0x07, 0xeb, 0xfa, 0xbf, 0xe6, 0xbf, 0x7a,
+	0x8e, 0x2b, 0x7d, 0x58, 0x5a, 0x78, 0xdf, 0x47, 0x5c, 0x4e, 0xe2, 0x15,
+	0x62, 0x82, 0x5b, 0xaf, 0xaa, 0x9c, 0x38, 0xd9, 0x2e, 0xe3, 0xa4, 0xc4,
+	0x95, 0x7f, 0xeb, 0x34, 0x4a, 0x96, 0xc4, 0x11, 0x0e, 0x90, 0x7b, 0xdc,
+	0xdd, 0x64, 0xe4, 0x6f, 0x11, 0xdb, 0x44, 0x77, 0x2e, 0x18, 0xd8, 0xe1,
+	0x60, 0x7c, 0x9b, 0xd8, 0xc1, 0x98, 0xe9, 0x64, 0xcc, 0x74, 0x3a, 0x63,
+	0xca, 0x98, 0xfb, 0xdd, 0x71, 0x6f, 0xca, 0x2d, 0xe5, 0x98, 0x92, 0x63,
+	0x04, 0x03, 0x9b, 0xa9, 0xeb, 0x66, 0x3e, 0xbf, 0xc1, 0x1a, 0xe7, 0x35,
+	0xa9, 0xaf, 0x1d, 0x0e, 0xc4, 0xcf, 0xb2, 0x56, 0x23, 0xf5, 0x07, 0x71,
+	0x5f, 0xaa, 0x3a, 0xfe, 0x99, 0xfd, 0xea, 0x9a, 0xe5, 0xac, 0xd7, 0x21,
+	0xd6, 0xe8, 0x20, 0x6d, 0xa8, 0xb2, 0x46, 0x27, 0x39, 0x67, 0x10, 0x93,
+	0x3f, 0x8f, 0x8f, 0xda, 0xa8, 0xe4, 0x3b, 0xe4, 0x1a, 0x81, 0xad, 0x39,
+	0x6f, 0x4f, 0x69, 0x1c, 0x9d, 0x3f, 0x49, 0x0f, 0xd9, 0xe5, 0x3a, 0x4b,
+	0x72, 0x5c, 0x4f, 0x5e, 0x27, 0x2a, 0x5b, 0xc8, 0x1d, 0x3b, 0x5f, 0xce,
+	0xb6, 0x78, 0xf5, 0x71, 0x3f, 0x4a, 0xc8, 0x99, 0x36, 0xe6, 0x6c, 0x7b,
+	0xc4, 0xbc, 0xff, 0xfa, 0x5d, 0x2d, 0xcf, 0xe7, 0x3b, 0xe9, 0xf7, 0x54,
+	0xae, 0xcf, 0xc1, 0xb4, 0x54, 0x8e, 0x4e, 0xbe, 0xa5, 0xb1, 0x2d, 0x7c,
+	0x72, 0x8d, 0x97, 0x7f, 0xa7, 0x6a, 0xe2, 0xbf, 0x0a, 0x20, 0xd0, 0x0f,
+	0xf3, 0x06, 0xc9, 0x27, 0xe0, 0x5b, 0x12, 0x3f, 0x18, 0xbf, 0xa5, 0x4e,
+	0x3b, 0x08, 0x85, 0x56, 0x1b, 0x07, 0x6e, 0x27, 0xe6, 0x5f, 0xf8, 0x23,
+	0x81, 0x96, 0xd5, 0x04, 0xf8, 0xab, 0x4c, 0x1c, 0xcc, 0x69, 0x1d, 0xc4,
+	0x2d, 0xd4, 0x93, 0xf3, 0x54, 0xc7, 0xf7, 0xe1, 0x63, 0x7e, 0x56, 0xc6,
+	0xfb, 0x90, 0x1e, 0x8b, 0xe4, 0xcf, 0x43, 0x8b, 0x2e, 0x0a, 0x8d, 0x03,
+	0x35, 0x98, 0x3f, 0x20, 0x0f, 0x1d, 0x13, 0x5a, 0xf2, 0x4e, 0x87, 0x7b,
+	0xee, 0x83, 0xe1, 0xf0, 0x9b, 0x3e, 0x44, 0xe9, 0xf3, 0x36, 0xca, 0x1c,
+	0x69, 0x11, 0xd8, 0x65, 0x7e, 0x68, 0x27, 0x83, 0x5a, 0xf2, 0x2c, 0x79,
+	0xee, 0x23, 0x9c, 0x77, 0xe5, 0x38, 0x7c, 0x25, 0x7c, 0xf6, 0x38, 0x79,
+	0x94, 0x97, 0xcf, 0x8e, 0xa6, 0x23, 0xe6, 0x41, 0xa1, 0xb5, 0x90, 0xd3,
+	0x32, 0x8b, 0x1b, 0x92, 0xe7, 0xc8, 0x35, 0x87, 0xa1, 0x2d, 0x72, 0x00,
+	0x47, 0x66, 0x7d, 0x41, 0xe6, 0xfa, 0x2c, 0xc4, 0x66, 0xeb, 0x20, 0x76,
+	0x1a, 0x6d, 0xac, 0x17, 0x2d, 0xe4, 0x6f, 0xe4, 0xcb, 0x94, 0x57, 0x36,
+	0x2e, 0xe5, 0x5e, 0xe9, 0x67, 0xa2, 0x33, 0xc7, 0xa8, 0x88, 0x0f, 0x60,
+	0xef, 0x98, 0x1c, 0xa3, 0x5f, 0x8e, 0x11, 0x7d, 0x99, 0x32, 0xef, 0x10,
+	0xee, 0x18, 0xef, 0x78, 0xb4, 0x16, 0x8e, 0x71, 0xe6, 0x3c, 0xc7, 0xf0,
+	0xeb, 0x52, 0xfe, 0x80, 0x94, 0xcf, 0xcf, 0x7e, 0xac, 0xcb, 0x0e, 0xd2,
+	0xaf, 0x3e, 0xd1, 0x9d, 0xb9, 0x11, 0x47, 0x67, 0x6f, 0x84, 0x95, 0x11,
+	0xac, 0x97, 0x4b, 0x91, 0x5f, 0xea, 0x70, 0xf8, 0xaa, 0x80, 0x5e, 0x8b,
+	0x7b, 0x55, 0x54, 0x57, 0xeb, 0x5f, 0xc4, 0x7d, 0x05, 0xfe, 0xbb, 0x73,
+	0xb2, 0x13, 0x21, 0x62, 0xf0, 0xb5, 0xab, 0xbd, 0x68, 0xa9, 0x41, 0x72,
+	0x45, 0xbc, 0x85, 0xf1, 0xf9, 0xae, 0xe2, 0x62, 0x7e, 0xc0, 0xef, 0xd6,
+	0x19, 0xc7, 0xf6, 0xbf, 0x77, 0xef, 0x46, 0x8c, 0x65, 0x4a, 0x41, 0x0e,
+	0x7a, 0x73, 0x25, 0x5e, 0x93, 0xb9, 0xfc, 0xc6, 0x2d, 0x62, 0x83, 0x47,
+	0xc6, 0x93, 0xf4, 0xd3, 0x17, 0xe2, 0xbe, 0xc4, 0x7f, 0xad, 0x7f, 0xad,
+	0x50, 0xa7, 0xae, 0xbc, 0x1e, 0xfd, 0x9c, 0xeb, 0x02, 0x4f, 0x4f, 0xa8,
+	0xe4, 0xb1, 0x2a, 0xb2, 0x69, 0x1b, 0x9e, 0xb8, 0x17, 0x7d, 0x63, 0xb2,
+	0x2e, 0x07, 0xb1, 0x90, 0xd6, 0x7a, 0xce, 0x92, 0x5b, 0xef, 0x6a, 0xd6,
+	0x71, 0xcf, 0x42, 0x08, 0xf3, 0x69, 0xd8, 0xfe, 0xb8, 0x9e, 0xf7, 0x93,
+	0x8f, 0xec, 0x59, 0x58, 0x8e, 0x93, 0x69, 0xfd, 0xcc, 0xb0, 0x30, 0x06,
+	0x6b, 0x3d, 0x5e, 0xdc, 0xb7, 0xd0, 0x88, 0x7b, 0x59, 0xc3, 0x17, 0x28,
+	0x63, 0x4b, 0x6c, 0x39, 0x9f, 0x57, 0xf0, 0xd4, 0x11, 0xd6, 0x25, 0xe2,
+	0x41, 0xdf, 0x02, 0x30, 0x3f, 0xc1, 0x9c, 0x3f, 0xce, 0xfc, 0x7f, 0x02,
+	0xd8, 0xf3, 0x84, 0x82, 0xd9, 0x09, 0x9b, 0x3e, 0x1e, 0xae, 0x55, 0x50,
+	0x82, 0x1e, 0xf2, 0xc8, 0x12, 0xf2, 0xaf, 0x3b, 0x54, 0x97, 0xdf, 0x9d,
+	0x65, 0xad, 0xba, 0xfb, 0x89, 0x28, 0xde, 0x48, 0xa7, 0xb0, 0x65, 0x4d,
+	0x08, 0x83, 0xd4, 0xe5, 0xf5, 0x34, 0x31, 0x65, 0xc1, 0xc4, 0x6b, 0x69,
+	0x1f, 0xc7, 0x69, 0xc4, 0x8b, 0x69, 0xf9, 0x8c, 0x7c, 0xb6, 0x12, 0xbd,
+	0xd4, 0xe5, 0xd5, 0x74, 0x88, 0x63, 0x06, 0xf1, 0x13, 0x3e, 0x77, 0xd7,
+	0x82, 0x4e, 0x1e, 0xeb, 0xe3, 0xb8, 0x61, 0xbc, 0x9c, 0x26, 0x66, 0xf1,
+	0xfa, 0xa9, 0x74, 0x2f, 0x46, 0xd2, 0x0d, 0x67, 0x36, 0x90, 0x2b, 0x85,
+	0xaf, 0x72, 0x6b, 0xf0, 0xa9, 0xf4, 0xdb, 0xf6, 0x36, 0xa7, 0x56, 0xca,
+	0x71, 0x8a, 0xe3, 0xf6, 0x62, 0x38, 0xfd, 0xb8, 0xa7, 0xd8, 0x7b, 0x3e,
+	0x3d, 0x21, 0xb9, 0xff, 0x72, 0x3c, 0x65, 0xf1, 0xfb, 0x2c, 0x70, 0xd2,
+	0x4a, 0xd9, 0xd5, 0x71, 0x72, 0x02, 0x62, 0xf2, 0x9b, 0x6b, 0x1a, 0x39,
+	0xae, 0xde, 0x73, 0x4a, 0xc8, 0x5e, 0xc0, 0x8b, 0xf0, 0x13, 0xd2, 0x5e,
+	0x0a, 0x66, 0x58, 0xdf, 0x7e, 0x40, 0x5c, 0xac, 0x1f, 0xd3, 0x42, 0x8c,
+	0xd1, 0xee, 0x19, 0x68, 0x9d, 0x79, 0xd4, 0x45, 0xef, 0xc1, 0x90, 0x5d,
+	0x1a, 0x27, 0x16, 0x13, 0x6f, 0x17, 0x1a, 0x6d, 0xfb, 0xa3, 0x35, 0xb6,
+	0xfd, 0xab, 0x66, 0xd8, 0x4a, 0x5c, 0x37, 0x6b, 0x3d, 0xf9, 0x2f, 0x56,
+	0x41, 0x3f, 0x13, 0x10, 0x7a, 0xfe, 0x4d, 0x18, 0xfd, 0x2f, 0x40, 0xda,
+	0x15, 0x58, 0xb5, 0xe0, 0xc5, 0xf5, 0x9c, 0xcf, 0xc6, 0x31, 0x8e, 0x4d,
+	0x8e, 0x60, 0x70, 0x4e, 0xdb, 0xc7, 0x6c, 0x72, 0x8d, 0x4a, 0xac, 0xa4,
+	0x8d, 0xfb, 0xa6, 0x6c, 0xbb, 0x8c, 0x36, 0xae, 0xa7, 0x7f, 0xee, 0x9c,
+	0xb4, 0x71, 0xca, 0x3c, 0x45, 0x9b, 0x0a, 0xf4, 0x74, 0x36, 0xf3, 0x9d,
+	0x20, 0x9f, 0x27, 0xaf, 0x1a, 0x93, 0xbd, 0xc4, 0x72, 0x3e, 0xf3, 0x0a,
+	0x0e, 0xa7, 0xa3, 0x68, 0xa4, 0xfd, 0xc2, 0x94, 0xd9, 0xc0, 0x77, 0xc2,
+	0x0b, 0x6e, 0x3f, 0x17, 0x5e, 0x90, 0x18, 0x74, 0x25, 0xe6, 0x48, 0x0c,
+	0x02, 0x8e, 0x4e, 0x68, 0x07, 0xf3, 0xc4, 0x98, 0xaa, 0xf8, 0x10, 0x6b,
+	0x08, 0xf0, 0xfa, 0x8c, 0xc0, 0xf8, 0x04, 0xfb, 0x9f, 0x35, 0xb0, 0xcb,
+	0x39, 0x8f, 0xd7, 0x66, 0xfe, 0x10, 0x4f, 0x1e, 0xe1, 0xdc, 0x8f, 0x05,
+	0xf1, 0x4c, 0xda, 0x8b, 0x6b, 0xc7, 0xb5, 0xd4, 0x0c, 0xf4, 0xe8, 0x3e,
+	0x21, 0xb1, 0x47, 0x9b, 0x48, 0xc1, 0x08, 0x97, 0x08, 0x05, 0x75, 0x4f,
+	0x7a, 0xa1, 0x9f, 0x0c, 0xa3, 0xa4, 0xce, 0x07, 0xbd, 0xee, 0xeb, 0x8c,
+	0x41, 0x05, 0xa5, 0xe4, 0x32, 0xed, 0x8f, 0x45, 0x79, 0x2d, 0xc8, 0x6b,
+	0xf8, 0xc3, 0x32, 0x78, 0x96, 0x79, 0x58, 0x57, 0x4a, 0x75, 0x36, 0x40,
+	0x5e, 0xdb, 0xf6, 0x90, 0x13, 0xec, 0xfc, 0x96, 0x6d, 0x47, 0x56, 0x7f,
+	0xdd, 0xe1, 0x83, 0x91, 0x93, 0x3a, 0x9f, 0xa3, 0x5e, 0xac, 0x2d, 0xdf,
+	0x61, 0x0f, 0xf7, 0x1c, 0x63, 0xf6, 0x59, 0xcb, 0xc3, 0xd8, 0xd1, 0x4c,
+	0xe9, 0x43, 0x94, 0x87, 0x39, 0xcf, 0x37, 0x1c, 0x7f, 0x3d, 0x47, 0xfc,
+	0x7c, 0x96, 0xb9, 0x2e, 0xe7, 0x70, 0x62, 0x42, 0x10, 0x67, 0xe3, 0x7c,
+	0x76, 0x3d, 0x3c, 0x31, 0xc9, 0x5b, 0x83, 0xd8, 0xa5, 0xb6, 0xe0, 0x69,
+	0xab, 0x04, 0x15, 0xfa, 0x32, 0xec, 0xed, 0x54, 0xf1, 0x74, 0x4e, 0x0b,
+	0xd3, 0x4f, 0xd1, 0x3c, 0xfe, 0xce, 0xc3, 0x7c, 0x32, 0xa1, 0xfc, 0x35,
+	0xf4, 0xc7, 0x14, 0x8c, 0x98, 0x1e, 0xc6, 0xa7, 0x89, 0xd2, 0x3a, 0x20,
+	0x9f, 0xf5, 0xe2, 0xb4, 0x4e, 0x99, 0x16, 0xe5, 0x53, 0x87, 0x67, 0x2d,
+	0x4d, 0xcd, 0x3b, 0xf1, 0x1a, 0xe5, 0xb8, 0x5a, 0x4b, 0x52, 0xfc, 0x89,
+	0x47, 0xea, 0xc9, 0x71, 0xbd, 0x6e, 0xfc, 0x3c, 0xe1, 0x91, 0xf5, 0xef,
+	0xf2, 0xdf, 0xe5, 0x50, 0xe2, 0x5a, 0xa8, 0xd5, 0x23, 0xf1, 0x65, 0x5f,
+	0x62, 0x54, 0xff, 0x83, 0x2b, 0x74, 0xef, 0xc2, 0x48, 0xee, 0x72, 0xef,
+	0xd9, 0x91, 0x76, 0xe2, 0xa6, 0x43, 0xda, 0xfe, 0x90, 0x29, 0xb1, 0x75,
+	0x50, 0xb4, 0x11, 0xab, 0x52, 0x5e, 0xb7, 0xb7, 0x3c, 0xc0, 0xde, 0xf2,
+	0xa5, 0xb4, 0x5c, 0x5f, 0x18, 0xc0, 0x6e, 0x7e, 0x86, 0x78, 0x2d, 0x64,
+	0x45, 0xc2, 0x27, 0xa0, 0xf5, 0xf5, 0x12, 0xa3, 0x88, 0x57, 0x83, 0x73,
+	0x42, 0xeb, 0xaf, 0xf5, 0xc8, 0x3e, 0xdf, 0xc5, 0xaa, 0x95, 0x05, 0xac,
+	0x6a, 0xcc, 0x06, 0x03, 0x1d, 0xac, 0x43, 0x1d, 0xac, 0xa3, 0xed, 0x0e,
+	0x8f, 0xea, 0x16, 0x5b, 0xe7, 0x7d, 0x62, 0x13, 0x79, 0xea, 0x4b, 0xa6,
+	0xc0, 0x4c, 0x17, 0xd4, 0x6b, 0xd7, 0xc0, 0xbf, 0x35, 0xd3, 0x89, 0x32,
+	0xe2, 0xd3, 0xdd, 0xb1, 0x32, 0xb4, 0x3b, 0xb5, 0x52, 0xd6, 0x7b, 0xd9,
+	0x4f, 0x77, 0x11, 0xeb, 0xa0, 0xfa, 0xe3, 0x6e, 0xef, 0x2c, 0x71, 0x6f,
+	0x3b, 0xdf, 0x3d, 0xc1, 0x38, 0x84, 0x5b, 0x53, 0xc5, 0x0e, 0xf6, 0x21,
+	0x1f, 0xc5, 0x04, 0xf2, 0x37, 0xfb, 0x40, 0x59, 0x9c, 0xef, 0xcf, 0x13,
+	0xa3, 0x13, 0x9d, 0xa2, 0x6d, 0x76, 0xce, 0xbf, 0xc1, 0x92, 0xf5, 0x79,
+	0xc6, 0x4f, 0xee, 0xc2, 0x9a, 0xf8, 0xfb, 0xb2, 0xe4, 0xba, 0x45, 0x3a,
+	0xb1, 0x8e, 0x3c, 0xaa, 0x65, 0xf5, 0x3f, 0xda, 0xf8, 0x63, 0xf9, 0xfe,
+	0x03, 0x05, 0xfb, 0x25, 0xa9, 0x4f, 0xd0, 0xd7, 0x9e, 0x53, 0x7d, 0xc9,
+	0x5c, 0x1b, 0xdf, 0xef, 0xa4, 0xac, 0x2e, 0x7f, 0x9b, 0x75, 0x9b, 0x7f,
+	0xa3, 0xb5, 0xcd, 0xbf, 0xc9, 0x62, 0xee, 0xe6, 0x3a, 0x69, 0xc7, 0x6d,
+	0xec, 0x83, 0x6f, 0x23, 0xc7, 0x94, 0x32, 0x7b, 0xc8, 0x77, 0xfd, 0x9c,
+	0xdb, 0x10, 0xe7, 0x96, 0x0f, 0x91, 0xb1, 0x6b, 0x25, 0xac, 0x19, 0x23,
+	0x8e, 0xdf, 0x0e, 0x3a, 0x6b, 0x31, 0xfe, 0xf8, 0x64, 0xe2, 0xda, 0x49,
+	0x05, 0x27, 0x74, 0xd4, 0x94, 0xc4, 0x11, 0xf7, 0xc3, 0x30, 0xcf, 0xc3,
+	0x08, 0xbd, 0xc4, 0x67, 0x86, 0x19, 0xa3, 0x23, 0x4e, 0xdf, 0x4d, 0xc3,
+	0x67, 0x2b, 0x44, 0x7b, 0xa6, 0x11, 0x5b, 0x2c, 0x9f, 0x7f, 0x07, 0x7b,
+	0xb9, 0x50, 0x5c, 0xeb, 0xe8, 0xf6, 0x30, 0x8f, 0x63, 0xf9, 0x2f, 0x07,
+	0xd0, 0x88, 0x8e, 0x9c, 0xcf, 0xbf, 0x61, 0xfa, 0x0f, 0xd0, 0x38, 0xa5,
+	0x25, 0x53, 0xcc, 0x41, 0x0f, 0xf9, 0xc2, 0xe1, 0x18, 0x70, 0x38, 0xbb,
+	0x1c, 0x2b, 0xc7, 0x1c, 0x7f, 0xf6, 0xe4, 0x19, 0xdf, 0x63, 0xd9, 0x30,
+	0xf4, 0xb1, 0x24, 0xde, 0x25, 0x97, 0xf6, 0x2e, 0xd4, 0xe2, 0x9a, 0x49,
+	0x0f, 0xda, 0xcc, 0x0e, 0x8c, 0xa8, 0x0a, 0xf6, 0x47, 0x77, 0x61, 0x26,
+	0x28, 0x73, 0xe3, 0xab, 0x38, 0xa0, 0x7a, 0x50, 0xab, 0xdf, 0x89, 0xc7,
+	0x1d, 0x5c, 0xfc, 0x12, 0xce, 0xba, 0x75, 0xc3, 0x57, 0x16, 0x3f, 0x90,
+	0x78, 0xf7, 0x88, 0xc0, 0x9b, 0x7a, 0xb3, 0x7f, 0x47, 0x46, 0xf3, 0xb7,
+	0x67, 0xae, 0x83, 0x31, 0x65, 0xd3, 0xde, 0xc3, 0x1d, 0x01, 0xc6, 0xcb,
+	0x87, 0x66, 0x37, 0x1e, 0x99, 0xc6, 0x0d, 0x7e, 0x3a, 0xac, 0x8a, 0xf8,
+	0xdd, 0x66, 0x1a, 0x2a, 0xf1, 0x24, 0xdf, 0x06, 0x6d, 0x90, 0xd0, 0x94,
+	0xac, 0x8d, 0x1b, 0x8c, 0x0b, 0x6c, 0xab, 0xa6, 0x2e, 0x7e, 0x62, 0x73,
+	0x60, 0x21, 0xec, 0xdf, 0xce, 0x7a, 0xe2, 0x61, 0x3f, 0xe8, 0x37, 0x70,
+	0x43, 0x15, 0x73, 0xf6, 0x05, 0x48, 0xdd, 0x1a, 0xfd, 0x3b, 0x59, 0x1f,
+	0xde, 0xd1, 0xed, 0xa1, 0x63, 0x66, 0x25, 0x6a, 0x17, 0x4c, 0x7f, 0xb7,
+	0xd5, 0x8d, 0xe1, 0xf9, 0x28, 0x14, 0x43, 0x45, 0x68, 0xa1, 0xc5, 0xbf,
+	0x83, 0x79, 0x58, 0x4d, 0x8c, 0x6a, 0x58, 0x48, 0xfa, 0x6f, 0xa2, 0xcf,
+	0x56, 0x2d, 0xac, 0xa5, 0x2c, 0x59, 0xab, 0x27, 0x12, 0xc7, 0x27, 0x3a,
+	0xe8, 0x9b, 0x24, 0xfd, 0x62, 0x63, 0x3e, 0xa6, 0x85, 0x3e, 0x40, 0x64,
+	0xf0, 0x00, 0xf0, 0x32, 0x61, 0xed, 0x95, 0x12, 0x18, 0x3d, 0xb5, 0x9e,
+	0x4f, 0xed, 0xf3, 0x31, 0xa3, 0xfb, 0xa0, 0xa8, 0xe4, 0xfb, 0x6a, 0x01,
+	0x8b, 0x68, 0x5f, 0xc6, 0x40, 0x15, 0xe7, 0xb8, 0x30, 0x25, 0xd7, 0xae,
+	0x52, 0x89, 0xd7, 0xa6, 0x7e, 0x42, 0xff, 0x6b, 0xea, 0x49, 0x21, 0xe5,
+	0x1e, 0x4a, 0x1c, 0x3f, 0xe2, 0xac, 0xa5, 0x24, 0x4e, 0x1f, 0x91, 0x71,
+	0xff, 0x50, 0x22, 0x34, 0xad, 0x63, 0xd5, 0x94, 0x36, 0xf8, 0x24, 0x22,
+	0x7d, 0x8b, 0x02, 0xac, 0x24, 0xff, 0x64, 0x1f, 0x33, 0xe4, 0x5a, 0x15,
+	0x63, 0x89, 0x38, 0xe9, 0x21, 0xfe, 0xd7, 0x52, 0x3e, 0x16, 0x5e, 0xa4,
+	0x9c, 0x10, 0x7c, 0x86, 0x8e, 0xba, 0xa9, 0x28, 0x6d, 0x86, 0x17, 0x4b,
+	0x81, 0x87, 0x58, 0xfe, 0x1f, 0x0e, 0xac, 0x85, 0xef, 0xc3, 0x35, 0x95,
+	0xb4, 0x85, 0x8a, 0x2a, 0xe7, 0xb9, 0x20, 0x9f, 0x3b, 0x66, 0xa7, 0x9c,
+	0xfa, 0x40, 0xdc, 0x99, 0x42, 0xd0, 0x4b, 0x79, 0x1b, 0x9a, 0xa5, 0x3c,
+	0x79, 0x5f, 0xe5, 0x7d, 0x99, 0x7f, 0x87, 0x12, 0xbb, 0x8f, 0x48, 0xbd,
+	0x52, 0x05, 0xbd, 0x1e, 0xa2, 0x5e, 0x3a, 0xd6, 0x51, 0x7e, 0xcb, 0x94,
+	0x16, 0xbe, 0xc3, 0x9d, 0xf3, 0xbe, 0x5a, 0x60, 0x20, 0x84, 0x8f, 0xec,
+	0x37, 0x0d, 0x23, 0xcc, 0x7a, 0xf1, 0xf0, 0xec, 0x9a, 0xa2, 0x6e, 0xec,
+	0x29, 0x89, 0xc3, 0xb5, 0xd4, 0xd1, 0xd5, 0x6f, 0x39, 0xe5, 0x4a, 0x3b,
+	0xfc, 0x46, 0x28, 0xfa, 0x79, 0x62, 0x99, 0xc4, 0x93, 0x20, 0x71, 0xac,
+	0x47, 0xd6, 0xf9, 0x54, 0x8a, 0x39, 0x50, 0xc2, 0x1c, 0xd8, 0x28, 0xe3,
+	0xdc, 0x62, 0x9c, 0x5b, 0x8c, 0x73, 0x4b, 0x0b, 0xf5, 0x23, 0xa2, 0xf6,
+	0xd2, 0x9f, 0xc9, 0x90, 0x8c, 0xff, 0x2e, 0xec, 0xe6, 0xef, 0x9d, 0xbc,
+	0x7f, 0x80, 0xbd, 0x28, 0x9c, 0x9e, 0x73, 0x80, 0xdc, 0xea, 0x61, 0xf4,
+	0x65, 0xf0, 0x5b, 0x7f, 0x73, 0x19, 0xca, 0x56, 0x96, 0x30, 0x9e, 0x34,
+	0xf5, 0x51, 0x3c, 0x4c, 0xce, 0xff, 0x1b, 0x51, 0xa1, 0x7b, 0x3b, 0x0f,
+	0x93, 0xe7, 0xb4, 0xd1, 0x17, 0xbb, 0x72, 0xb7, 0xd1, 0x97, 0x91, 0xbe,
+	0x97, 0xd8, 0x43, 0xcf, 0xd4, 0x72, 0x6c, 0xe6, 0xd7, 0x0e, 0x8e, 0x63,
+	0x49, 0x3d, 0x1c, 0xcc, 0xdd, 0x05, 0x69, 0xc7, 0x1f, 0xd5, 0xf7, 0x72,
+	0x7c, 0x57, 0x8f, 0x61, 0xf6, 0x21, 0xbd, 0xd4, 0x69, 0xb7, 0x93, 0x73,
+	0x5d, 0x94, 0x71, 0x19, 0xcb, 0x36, 0xa4, 0x65, 0x0d, 0xb5, 0xf1, 0x08,
+	0xfb, 0x83, 0xa7, 0xf8, 0x7b, 0x86, 0x78, 0x36, 0x72, 0x05, 0x9e, 0x29,
+	0x7c, 0x6e, 0x27, 0x9f, 0x6b, 0x21, 0x96, 0xcf, 0xcf, 0xca, 0xf8, 0x1e,
+	0x90, 0xeb, 0x65, 0xc8, 0x5a, 0xd2, 0x9e, 0xfd, 0x38, 0x9d, 0x8e, 0x0c,
+	0x7a, 0x3c, 0xf6, 0x50, 0x20, 0xae, 0x9d, 0xf9, 0x98, 0xf1, 0xfc, 0xea,
+	0x1a, 0xad, 0x93, 0x3e, 0x89, 0x92, 0x43, 0x86, 0x7e, 0x8a, 0x7c, 0xbb,
+	0x0f, 0x0d, 0xe1, 0xeb, 0x3d, 0x86, 0x4a, 0xec, 0xcb, 0xf7, 0x72, 0xa6,
+	0xc7, 0x72, 0x2e, 0xde, 0xad, 0x2b, 0xe0, 0x5d, 0x4b, 0xb6, 0x9c, 0x78,
+	0xc4, 0xba, 0x3c, 0x6b, 0xa7, 0x02, 0xac, 0x59, 0xb9, 0x59, 0x29, 0x7b,
+	0x08, 0x0d, 0x31, 0x29, 0x4b, 0xef, 0x18, 0x13, 0xf8, 0x6a, 0x05, 0x0c,
+	0xd6, 0x2b, 0x98, 0x65, 0x7a, 0xca, 0x66, 0x5d, 0x52, 0x4b, 0xe2, 0xb2,
+	0x66, 0x6e, 0x23, 0x46, 0x76, 0x11, 0x23, 0x25, 0x8f, 0x97, 0x6b, 0x88,
+	0x2e, 0x46, 0x6d, 0xcc, 0x49, 0xbf, 0x48, 0x9f, 0x48, 0xdf, 0x0c, 0xe0,
+	0x0e, 0x0b, 0x29, 0x59, 0xd7, 0x27, 0x4c, 0x23, 0xfc, 0x24, 0xa4, 0x9f,
+	0x06, 0x68, 0x8b, 0x12, 0xec, 0x26, 0x26, 0xee, 0x6a, 0xa6, 0xad, 0x02,
+	0x25, 0xd8, 0x35, 0x2b, 0xfb, 0x9f, 0xa2, 0xfd, 0x4a, 0xe8, 0x43, 0xc1,
+	0x1c, 0xef, 0x2f, 0x71, 0xed, 0xe8, 0xf2, 0x7f, 0x4f, 0x5c, 0xca, 0x0b,
+	0x51, 0xae, 0xac, 0xc1, 0xae, 0xed, 0xda, 0xd3, 0x52, 0xae, 0x8d, 0x13,
+	0xa6, 0xcb, 0x57, 0x8b, 0x36, 0x93, 0x78, 0x5f, 0xb3, 0x16, 0xb8, 0x7e,
+	0x5c, 0xe6, 0xca, 0x00, 0x16, 0xc8, 0x59, 0xcb, 0x79, 0x6d, 0xcb, 0x58,
+	0xa4, 0xff, 0x5d, 0xa1, 0x45, 0x4f, 0x92, 0x77, 0x48, 0xae, 0x7d, 0x92,
+	0x35, 0x64, 0x2b, 0x79, 0x72, 0x5d, 0xa1, 0x06, 0x18, 0x59, 0xf2, 0x77,
+	0xb8, 0x76, 0xa9, 0xcf, 0x56, 0x17, 0xf0, 0x7a, 0x00, 0xbb, 0xc8, 0x67,
+	0x6a, 0xeb, 0x86, 0xe0, 0x6b, 0x52, 0x2e, 0x2a, 0x18, 0xc2, 0x3b, 0xab,
+	0x99, 0x19, 0x4b, 0x6d, 0x5c, 0xb3, 0x3a, 0x65, 0x97, 0xe9, 0x75, 0xe1,
+	0x32, 0x45, 0xae, 0xc5, 0x1a, 0xa9, 0x11, 0xe2, 0x8b, 0xd2, 0xa4, 0xa5,
+	0x92, 0xf0, 0xa9, 0x35, 0x7a, 0x4f, 0x81, 0x4b, 0x86, 0x7c, 0x9b, 0xc9,
+	0x77, 0x8c, 0xd8, 0x67, 0xf6, 0x4c, 0x70, 0x08, 0xa1, 0xa6, 0xfc, 0x60,
+	0x08, 0xc9, 0xfb, 0x43, 0xac, 0x45, 0xaf, 0x8b, 0x83, 0xc8, 0x1a, 0x21,
+	0xdf, 0xb6, 0x5c, 0xca, 0xbf, 0xa5, 0x3e, 0x8c, 0xad, 0x63, 0x6d, 0x62,
+	0x6b, 0x4e, 0xc7, 0xa6, 0xb1, 0x0e, 0xf6, 0xed, 0x9d, 0xa2, 0x73, 0x56,
+	0xda, 0x47, 0xda, 0x57, 0x53, 0xc3, 0x0a, 0xe7, 0x7e, 0xa9, 0xae, 0xbb,
+	0xbc, 0xe4, 0x47, 0xf5, 0xe7, 0x9d, 0xd8, 0x19, 0x35, 0x55, 0xda, 0xe5,
+	0x7f, 0x94, 0x20, 0x60, 0xe3, 0xb8, 0x29, 0x63, 0x4e, 0x75, 0xfa, 0xf0,
+	0x8d, 0xcd, 0x13, 0xb6, 0x57, 0x97, 0x7d, 0x58, 0xc8, 0xf1, 0x97, 0xec,
+	0xfb, 0xda, 0x66, 0xbb, 0xe8, 0xa3, 0xe2, 0xba, 0xee, 0x8d, 0xfe, 0x0d,
+	0xd2, 0x0f, 0x66, 0x15, 0x92, 0xaa, 0x10, 0xfe, 0x78, 0xb9, 0x2f, 0xca,
+	0xda, 0x79, 0x30, 0x3b, 0x80, 0x76, 0xea, 0xfc, 0x48, 0x56, 0xc6, 0xd8,
+	0x44, 0xe2, 0x34, 0x39, 0xf0, 0x4b, 0x66, 0x29, 0x66, 0x3a, 0x7d, 0xc4,
+	0xf9, 0x1e, 0xdc, 0xcd, 0xf1, 0x0f, 0xb1, 0xdf, 0x75, 0xd7, 0x98, 0x35,
+	0x35, 0x85, 0x6b, 0x4a, 0x65, 0x5f, 0x3a, 0xaa, 0x5f, 0xe9, 0xfb, 0xf5,
+	0xfe, 0x4d, 0x19, 0xad, 0x73, 0x06, 0xa9, 0x68, 0x09, 0x22, 0x2d, 0xfb,
+	0x21, 0xf9, 0x17, 0x71, 0xd4, 0xa9, 0x29, 0x07, 0x12, 0xd7, 0x4e, 0xbd,
+	0x61, 0x9f, 0xd7, 0xbd, 0xf4, 0xf5, 0x5a, 0x6c, 0x50, 0x25, 0xa6, 0xc7,
+	0xfd, 0x9d, 0xd3, 0x5e, 0xa5, 0x3a, 0x8e, 0x66, 0xf6, 0xd7, 0x76, 0xc0,
+	0x59, 0xa7, 0x02, 0xeb, 0xc1, 0x8d, 0xfe, 0x6d, 0x99, 0x30, 0x0e, 0xc7,
+	0x7c, 0x85, 0x75, 0xd4, 0x1b, 0xa8, 0xb3, 0x47, 0x28, 0x71, 0x78, 0x6e,
+	0x6f, 0xb6, 0xf1, 0xa0, 0x69, 0xe4, 0xd7, 0x7b, 0x7c, 0x94, 0xe3, 0xc5,
+	0xd1, 0x6c, 0x33, 0xef, 0x69, 0xfe, 0x9d, 0x99, 0xe1, 0xc5, 0x12, 0x38,
+	0x1c, 0x3a, 0xaf, 0xf0, 0xf3, 0xfa, 0xd5, 0xb8, 0x37, 0x44, 0x47, 0x56,
+	0x13, 0x57, 0x4f, 0x0a, 0x23, 0xfc, 0xa8, 0x40, 0xd2, 0x1f, 0x37, 0x52,
+	0x8f, 0xe2, 0x0d, 0xfb, 0x93, 0xec, 0x5a, 0xbe, 0xd3, 0xc1, 0x1c, 0x4e,
+	0x12, 0xbf, 0xe5, 0x3b, 0xda, 0x99, 0x2d, 0xd0, 0xfa, 0xd7, 0x7b, 0x22,
+	0x3d, 0xc4, 0xcb, 0xfb, 0x02, 0x30, 0x3a, 0x9f, 0x14, 0x9f, 0xda, 0xfb,
+	0x63, 0xa9, 0xee, 0x15, 0x30, 0x3a, 0x36, 0x32, 0x5e, 0xfa, 0x44, 0x98,
+	0xb5, 0x41, 0xfa, 0x37, 0x8a, 0x4f, 0x38, 0xae, 0x57, 0x97, 0x7e, 0x5a,
+	0x8f, 0xde, 0x59, 0xf6, 0x42, 0x97, 0xe2, 0x58, 0xda, 0x46, 0xda, 0x7d,
+	0x0d, 0x6d, 0xb3, 0x84, 0xf3, 0xfb, 0xb9, 0x83, 0x57, 0x7e, 0x3d, 0x8a,
+	0xef, 0xd3, 0xc7, 0xdf, 0x23, 0xff, 0xfa, 0xee, 0x25, 0x3e, 0x29, 0x63,
+	0x6e, 0x22, 0x71, 0xed, 0x4c, 0x23, 0x6d, 0xb7, 0x1c, 0xcf, 0x3b, 0xfd,
+	0xad, 0xcf, 0xdf, 0x31, 0x6d, 0xe3, 0x88, 0x19, 0x80, 0x5c, 0x3b, 0x2a,
+	0x8b, 0xe5, 0xc9, 0x34, 0x1a, 0xb1, 0x89, 0xd7, 0xdb, 0xa6, 0x2b, 0x44,
+	0x5b, 0xc6, 0xc6, 0xf7, 0x4c, 0x2d, 0xd5, 0xea, 0x21, 0x5e, 0x98, 0x72,
+	0x4d, 0xda, 0x10, 0x3d, 0xaa, 0x8c, 0x5f, 0x2f, 0x2a, 0x75, 0x57, 0x5e,
+	0xe3, 0xcc, 0x8d, 0xe4, 0x29, 0x32, 0x7f, 0x3d, 0xab, 0xca, 0xd1, 0x23,
+	0x66, 0xbc, 0xee, 0xda, 0x57, 0x32, 0x57, 0xc1, 0x9c, 0x0f, 0xb3, 0x26,
+	0x96, 0xc2, 0x5d, 0xb3, 0xbc, 0xd1, 0xdf, 0x9d, 0xc1, 0x5f, 0x85, 0xe0,
+	0xf9, 0xd6, 0x55, 0x78, 0x54, 0x24, 0x9d, 0xfd, 0x23, 0x39, 0x46, 0xb2,
+	0xc0, 0xf1, 0x3a, 0x91, 0x21, 0x96, 0x0d, 0x33, 0x0f, 0x6e, 0xd5, 0x6f,
+	0x64, 0x4d, 0xf5, 0xe1, 0x9c, 0xa9, 0x20, 0x1f, 0xf4, 0x60, 0x89, 0x2e,
+	0xd7, 0x28, 0x1a, 0x51, 0xfb, 0xad, 0x66, 0xca, 0x58, 0xcb, 0x9a, 0xdb,
+	0x8d, 0xc7, 0xe7, 0xd9, 0x77, 0xaf, 0x96, 0x35, 0x57, 0xeb, 0xbb, 0x49,
+	0x49, 0x75, 0x57, 0x91, 0xe3, 0xef, 0x63, 0x4f, 0x7b, 0xb3, 0x93, 0x67,
+	0x07, 0x12, 0xd1, 0xb9, 0x10, 0x4a, 0x1e, 0x93, 0x78, 0xa7, 0x85, 0xfc,
+	0xce, 0xb5, 0x83, 0x89, 0x08, 0xaf, 0xd5, 0x90, 0x53, 0x86, 0x97, 0x15,
+	0xd7, 0x19, 0xe4, 0xf5, 0x43, 0xbc, 0xee, 0xac, 0xef, 0x27, 0xc2, 0xce,
+	0xe7, 0x43, 0xfc, 0xac, 0x10, 0xb7, 0x67, 0x6c, 0x7b, 0xb7, 0x99, 0xc4,
+	0x27, 0xab, 0xd9, 0x50, 0x2f, 0x29, 0x47, 0xaf, 0x5e, 0xc1, 0x5f, 0xdb,
+	0x9e, 0x2c, 0xac, 0xdd, 0x84, 0x95, 0x0a, 0xf6, 0x9a, 0xf0, 0xf9, 0xf8,
+	0xbe, 0x8f, 0x75, 0x26, 0x89, 0xe1, 0x9d, 0x21, 0x72, 0x8e, 0x3d, 0xb1,
+	0xbf, 0x64, 0xef, 0xae, 0x45, 0xcb, 0x44, 0x85, 0xd8, 0x46, 0xae, 0xb2,
+	0x95, 0x5c, 0xe5, 0x26, 0x72, 0x95, 0xea, 0xb8, 0x96, 0xdc, 0xe1, 0x91,
+	0x6b, 0xf3, 0xf9, 0x9b, 0xab, 0x20, 0x6b, 0xac, 0xcb, 0x55, 0x4a, 0xa6,
+	0xc8, 0x5b, 0x21, 0xf7, 0x79, 0x6c, 0xfb, 0x29, 0x32, 0xd1, 0xcd, 0xe4,
+	0x2a, 0xa5, 0x63, 0x5a, 0x47, 0x52, 0xf6, 0x9d, 0x31, 0x2f, 0x36, 0x91,
+	0xab, 0x28, 0xec, 0x1f, 0xde, 0xcc, 0xd6, 0xc2, 0x43, 0x9e, 0xb2, 0xdb,
+	0xfc, 0x00, 0xbd, 0x8c, 0xe5, 0x07, 0xa3, 0x21, 0x11, 0xbe, 0x5a, 0x81,
+	0xaa, 0x57, 0x8a, 0x7e, 0xf2, 0x94, 0x15, 0xfa, 0x1f, 0x8a, 0x21, 0x87,
+	0x9f, 0xfc, 0x03, 0x92, 0x35, 0x2e, 0x4f, 0x71, 0x73, 0x40, 0xe0, 0x1a,
+	0xa3, 0xd9, 0x7f, 0x3b, 0x63, 0xf6, 0x26, 0xf2, 0x14, 0x2f, 0x79, 0xca,
+	0x85, 0xd5, 0xc3, 0xf9, 0x5a, 0xc6, 0xec, 0xeb, 0xb1, 0x6e, 0x8c, 0x4f,
+	0x63, 0x13, 0xe3, 0x76, 0x1f, 0xe3, 0x36, 0x55, 0x25, 0x6c, 0x7b, 0x23,
+	0xb9, 0x4a, 0x89, 0xa2, 0x75, 0x8e, 0x93, 0xa7, 0x78, 0xe2, 0x86, 0xb9,
+	0x01, 0xe8, 0x2d, 0xa7, 0xbf, 0x3f, 0xc8, 0x02, 0xe7, 0xb2, 0x61, 0xca,
+	0x29, 0x45, 0x2d, 0x79, 0xca, 0x07, 0x3a, 0x4e, 0xaf, 0x70, 0x7a, 0x24,
+	0x1f, 0x3e, 0xce, 0x36, 0xfa, 0x3b, 0xc8, 0x53, 0x5e, 0x35, 0xec, 0xa1,
+	0xe3, 0xb1, 0x4a, 0x9c, 0xcf, 0x9a, 0xfe, 0x4e, 0xf2, 0x94, 0xfd, 0xe4,
+	0x29, 0xe7, 0x75, 0x15, 0x9f, 0x64, 0x5b, 0xc8, 0x43, 0x34, 0x52, 0xb2,
+	0x20, 0xde, 0x26, 0x87, 0xcf, 0x90, 0xab, 0xdc, 0xca, 0xd8, 0xcd, 0x90,
+	0xab, 0x6c, 0xc9, 0x48, 0xbe, 0x39, 0x91, 0x58, 0xc7, 0xfc, 0xd8, 0x50,
+	0xe0, 0x2a, 0xad, 0x31, 0x6d, 0xf1, 0x16, 0x44, 0xfa, 0xef, 0x04, 0x86,
+	0x56, 0x00, 0x2f, 0xd6, 0xc2, 0x88, 0x2e, 0x32, 0x3f, 0x5e, 0x8d, 0x19,
+	0xe1, 0x05, 0x10, 0x03, 0x58, 0xb3, 0x53, 0xec, 0xa1, 0xb6, 0xe6, 0x64,
+	0xec, 0xf9, 0xf0, 0x40, 0xac, 0x0a, 0x3d, 0x4b, 0x84, 0x28, 0x25, 0xb6,
+	0xbc, 0xd2, 0x1c, 0xa5, 0xae, 0x03, 0xb8, 0x95, 0xd8, 0x72, 0xd5, 0x82,
+	0x5c, 0x4f, 0x98, 0x48, 0xec, 0x9d, 0x54, 0xe9, 0x17, 0x0f, 0xce, 0x12,
+	0x5b, 0xb0, 0xe0, 0x62, 0x4b, 0xf9, 0x42, 0x25, 0x54, 0x23, 0x81, 0xbc,
+	0x53, 0x9b, 0xd7, 0x33, 0x3f, 0x4b, 0xb1, 0x4c, 0x97, 0xbd, 0x8f, 0xcc,
+	0xcf, 0x9f, 0xe0, 0xab, 0xb4, 0x71, 0x19, 0xf1, 0xa2, 0xdb, 0xc1, 0x0b,
+	0xdb, 0xae, 0x5a, 0x6d, 0x24, 0xe5, 0xf2, 0x8c, 0xef, 0xe4, 0x8d, 0xfe,
+	0x8d, 0x8c, 0xeb, 0x39, 0x72, 0xc7, 0x94, 0xea, 0x62, 0xc5, 0xad, 0xc4,
+	0x8a, 0x0a, 0x62, 0xc5, 0xd0, 0x1a, 0x62, 0x45, 0x93, 0xc1, 0xbc, 0x66,
+	0x08, 0x9c, 0xf4, 0x51, 0x96, 0xcb, 0x0f, 0x3b, 0x18, 0x4b, 0xd7, 0xc5,
+	0xc8, 0x0b, 0x63, 0xc3, 0x2a, 0xf9, 0x20, 0x7b, 0x20, 0x7c, 0x9f, 0x51,
+	0xd5, 0xe8, 0x21, 0x56, 0xbc, 0xa4, 0x18, 0x47, 0x0f, 0x89, 0x94, 0xdc,
+	0x8e, 0x21, 0x5e, 0x44, 0x3a, 0xbd, 0x8a, 0xd1, 0x7d, 0x97, 0xf2, 0x86,
+	0xbd, 0x95, 0xb6, 0xb9, 0xfd, 0x0a, 0xcc, 0xb8, 0xb0, 0x5a, 0xeb, 0x6f,
+	0xf2, 0x0c, 0x3f, 0x5b, 0x4a, 0x4c, 0xff, 0x1b, 0x81, 0xb6, 0x32, 0x44,
+	0x68, 0x13, 0xac, 0x20, 0x57, 0x34, 0xfb, 0xf0, 0xa9, 0x7d, 0xcc, 0x7c,
+	0xc3, 0x6e, 0x37, 0x8c, 0x9e, 0x53, 0x48, 0xa5, 0x96, 0xb1, 0xe6, 0x94,
+	0x29, 0x61, 0xda, 0x21, 0x0a, 0xd3, 0x90, 0x18, 0xe2, 0x65, 0x0e, 0xad,
+	0xc7, 0xd7, 0x1c, 0xac, 0x77, 0xf3, 0xae, 0x9d, 0x79, 0xf7, 0x4f, 0x26,
+	0xd9, 0xf8, 0x12, 0x9b, 0xfe, 0x64, 0x05, 0x19, 0xb7, 0xed, 0x55, 0x6b,
+	0x75, 0x33, 0x40, 0x72, 0x58, 0x7a, 0xf2, 0xe5, 0x42, 0x8c, 0xcb, 0xbd,
+	0xd1, 0x89, 0x84, 0xfa, 0x98, 0x07, 0x35, 0x4d, 0xd5, 0x08, 0x2f, 0xd1,
+	0xa2, 0x33, 0x4a, 0x27, 0x1e, 0xa5, 0xaf, 0x57, 0x1b, 0xcc, 0x57, 0xf2,
+	0x8d, 0x07, 0xc8, 0x73, 0xf6, 0x5a, 0x91, 0xc5, 0x07, 0xd8, 0x63, 0x9e,
+	0xfd, 0x82, 0x16, 0xee, 0x51, 0xba, 0xd0, 0x6b, 0xf1, 0x97, 0x75, 0x79,
+	0x9b, 0xf5, 0x1b, 0x31, 0x6a, 0x54, 0xf2, 0xbb, 0x7c, 0x4f, 0x0b, 0xa7,
+	0x94, 0x3e, 0xf4, 0xcc, 0xcb, 0x1a, 0x02, 0x35, 0x18, 0xef, 0x24, 0x6f,
+	0x2a, 0xc5, 0x57, 0x9a, 0xb7, 0xb1, 0x56, 0x74, 0xe0, 0x90, 0xd5, 0xe8,
+	0xf4, 0x75, 0xcf, 0x53, 0xf6, 0x57, 0x8d, 0x0e, 0x7c, 0x4b, 0xe2, 0x93,
+	0x25, 0x7b, 0x23, 0x62, 0x99, 0xd5, 0x25, 0xbe, 0x22, 0x71, 0xcc, 0x1a,
+	0x14, 0x5d, 0x12, 0xd7, 0x2c, 0xe2, 0xda, 0x25, 0xfc, 0x33, 0x89, 0x7f,
+	0x57, 0x62, 0xcb, 0x0d, 0x68, 0x2d, 0x55, 0x50, 0xa3, 0x47, 0xfc, 0x6d,
+	0x19, 0xd9, 0x3f, 0xfe, 0xfd, 0xc5, 0x1e, 0x95, 0x3d, 0x88, 0x83, 0x2d,
+	0x7f, 0x7b, 0xf1, 0x94, 0xc3, 0x27, 0x8b, 0x75, 0x73, 0x3d, 0xee, 0xca,
+	0x2c, 0x73, 0x7a, 0xac, 0x28, 0xe3, 0xb6, 0xac, 0x46, 0x62, 0xbc, 0x5c,
+	0x33, 0x9b, 0x48, 0xa4, 0x27, 0x85, 0xdc, 0x3f, 0x74, 0x30, 0xae, 0x61,
+	0x66, 0xbd, 0x5c, 0x5f, 0xc5, 0x86, 0xd8, 0x1d, 0xb8, 0x43, 0x2d, 0x47,
+	0x95, 0xfe, 0x67, 0xb8, 0x47, 0xad, 0x64, 0x4f, 0x5b, 0xb4, 0xe7, 0x44,
+	0x69, 0x61, 0xbd, 0xa2, 0x90, 0x73, 0x92, 0x0b, 0xa4, 0x12, 0x5b, 0xa6,
+	0xfe, 0x6f, 0xa9, 0xe4, 0xcd, 0xe4, 0x35, 0xbc, 0x7e, 0xc8, 0xb9, 0xee,
+	0xe5, 0xf5, 0xd1, 0x2b, 0x78, 0xaa, 0x67, 0x4a, 0x53, 0x75, 0x11, 0x59,
+	0xdc, 0x44, 0x4e, 0xee, 0x21, 0x6f, 0xfe, 0xa4, 0xde, 0xc8, 0x13, 0x0e,
+	0x7d, 0xd5, 0xe4, 0xa6, 0x8b, 0xd9, 0x20, 0x73, 0x4b, 0xc5, 0xd9, 0xec,
+	0x47, 0xa5, 0x92, 0xa7, 0xbc, 0x5b, 0xc0, 0xdc, 0x18, 0x31, 0xf7, 0xf6,
+	0x8c, 0x5c, 0xab, 0x0f, 0x33, 0x2e, 0x8e, 0x5f, 0x0c, 0x5f, 0xed, 0xe3,
+	0x7c, 0xa5, 0x0e, 0x5e, 0x7e, 0x8e, 0xe2, 0x5e, 0xc6, 0xcc, 0x76, 0xeb,
+	0xaf, 0x2e, 0xce, 0xd4, 0x74, 0x62, 0x9c, 0x76, 0xab, 0x2e, 0xbc, 0x77,
+	0xfd, 0x8c, 0x55, 0xd0, 0x53, 0x47, 0x80, 0xfc, 0xb8, 0x6a, 0x0a, 0xbd,
+	0x54, 0xbf, 0x91, 0x48, 0xf8, 0xf0, 0xa3, 0x9c, 0xeb, 0x93, 0xe4, 0xd6,
+	0xef, 0x71, 0xbc, 0x73, 0xce, 0x78, 0x41, 0x8e, 0xf7, 0xc1, 0xc5, 0x9e,
+	0x02, 0xff, 0x56, 0xa6, 0xb0, 0x5c, 0x2e, 0x3b, 0xf6, 0xf2, 0x99, 0xb7,
+	0x9d, 0xfb, 0x2a, 0xef, 0x7f, 0xb9, 0x4c, 0xd6, 0x9d, 0x32, 0x5d, 0xee,
+	0xb7, 0x1f, 0x4a, 0xb4, 0x5e, 0xd1, 0x17, 0x78, 0x38, 0xbf, 0xdd, 0x9c,
+	0x9f, 0xca, 0x71, 0x6a, 0xa7, 0x34, 0xce, 0x2f, 0x92, 0x7f, 0xcb, 0x83,
+	0x7d, 0x4c, 0x99, 0x81, 0x5a, 0xf2, 0xf0, 0xea, 0x7a, 0x23, 0xca, 0xda,
+	0xfb, 0x70, 0x96, 0x9c, 0xff, 0x03, 0x8e, 0xf9, 0x0e, 0x79, 0x40, 0x99,
+	0x1e, 0x42, 0xfd, 0xc2, 0x72, 0xd4, 0x1b, 0xee, 0xf8, 0xe1, 0x85, 0x6d,
+	0x18, 0x62, 0x2c, 0x0d, 0x31, 0xc6, 0x1e, 0xb4, 0x1e, 0xe7, 0xb5, 0x4e,
+	0x3c, 0x98, 0x5b, 0x4f, 0x2e, 0xf7, 0xfb, 0x76, 0x0f, 0xd2, 0x17, 0xf5,
+	0x4c, 0x6a, 0x79, 0xef, 0xf3, 0xf8, 0xca, 0x37, 0x31, 0xc8, 0xfe, 0xf3,
+	0xc1, 0x4c, 0x0a, 0xf7, 0x66, 0xbe, 0x41, 0x0e, 0xee, 0xd4, 0xeb, 0x3b,
+	0x5d, 0xdc, 0xb3, 0xf1, 0xb3, 0x98, 0x21, 0x39, 0xe8, 0x2d, 0x15, 0x90,
+	0x9c, 0xc6, 0x68, 0xb9, 0x4e, 0xd8, 0x28, 0x8d, 0xa1, 0xbf, 0xad, 0xd9,
+	0x88, 0x9e, 0xc3, 0xc3, 0xb6, 0x5c, 0xd3, 0xf6, 0x14, 0xf8, 0x8d, 0xec,
+	0xbd, 0xe5, 0xde, 0x44, 0x6b, 0x81, 0x8b, 0x6e, 0xc8, 0xbd, 0xf1, 0x7b,
+	0xeb, 0x36, 0xe1, 0x42, 0x7d, 0xf5, 0x8b, 0x56, 0x8e, 0x73, 0x80, 0xdc,
+	0xf1, 0x59, 0xf3, 0x54, 0xa8, 0x14, 0x0a, 0xbc, 0x4d, 0x02, 0xf7, 0x33,
+	0xe7, 0x52, 0x41, 0x1b, 0xb7, 0xf0, 0x73, 0x0f, 0xb1, 0xeb, 0x1d, 0xf2,
+	0xa2, 0x19, 0x55, 0x25, 0x27, 0x67, 0x0d, 0x51, 0xe6, 0x4b, 0x64, 0xed,
+	0x08, 0x2b, 0xb2, 0x1e, 0x84, 0x0b, 0xf9, 0x70, 0xe5, 0x5a, 0x8b, 0xe4,
+	0x41, 0xc5, 0xf5, 0x8e, 0x26, 0xf2, 0x43, 0x39, 0x77, 0xbf, 0x20, 0x1f,
+	0x89, 0x12, 0x2a, 0x89, 0x5b, 0x79, 0xa6, 0x6c, 0xf2, 0x82, 0x02, 0xed,
+	0xe8, 0xdb, 0xec, 0xad, 0x1f, 0xac, 0xd3, 0x8e, 0xfe, 0x11, 0xc9, 0xd0,
+	0xe0, 0xb8, 0x0f, 0xf7, 0x8d, 0x6f, 0x42, 0xb5, 0xb3, 0xee, 0x36, 0xca,
+	0xfc, 0x54, 0x10, 0xd2, 0x87, 0x3f, 0xf3, 0xc2, 0xc3, 0xf8, 0x79, 0x08,
+	0x2d, 0xce, 0xf5, 0x11, 0xdc, 0x99, 0xf1, 0x8b, 0x2d, 0x19, 0xd6, 0x9c,
+	0x9b, 0x1f, 0x42, 0x49, 0x53, 0x0f, 0xf5, 0x92, 0xd7, 0xe5, 0xf7, 0x5b,
+	0xd9, 0x13, 0x4b, 0xfd, 0x4a, 0x59, 0x3b, 0xa9, 0x5b, 0x93, 0x8e, 0xa1,
+	0x71, 0xaf, 0xd8, 0x69, 0xfd, 0x8d, 0x7d, 0xe1, 0x6a, 0xf2, 0x6a, 0x59,
+	0xbf, 0x9a, 0xca, 0xe5, 0xf9, 0x03, 0x3e, 0x93, 0xf4, 0xb7, 0x5a, 0xbd,
+	0xac, 0xe5, 0xa5, 0xb8, 0xd5, 0x79, 0xff, 0x9e, 0x52, 0x77, 0x4e, 0x49,
+	0xe2, 0x7b, 0x1b, 0xfb, 0x13, 0xf9, 0x8c, 0x52, 0xb8, 0xd6, 0xe3, 0x73,
+	0xcf, 0x38, 0xc8, 0xfc, 0xe8, 0xc5, 0xb5, 0x74, 0x42, 0x9d, 0x21, 0x63,
+	0xb5, 0x17, 0x75, 0xd9, 0x25, 0x85, 0x23, 0x22, 0xa3, 0xb8, 0xc7, 0xca,
+	0x23, 0x10, 0xd7, 0xc9, 0xab, 0x68, 0xbb, 0xa5, 0xf2, 0xfd, 0x55, 0xbe,
+	0xdf, 0x7d, 0x5f, 0x72, 0x3c, 0x72, 0xf9, 0x80, 0xe4, 0xf4, 0x9f, 0x77,
+	0xff, 0xcb, 0x90, 0xf7, 0xbc, 0xfa, 0x5f, 0x60, 0x6f, 0xc6, 0xe8, 0xac,
+	0x50, 0x64, 0xfc, 0xfc, 0x05, 0xee, 0x9e, 0xa5, 0x13, 0xcb, 0xa5, 0xfc,
+	0x01, 0xf6, 0x6a, 0x5e, 0xd1, 0x61, 0xe9, 0xd8, 0x33, 0xae, 0xdc, 0x54,
+	0x8a, 0xef, 0xdb, 0x65, 0x4b, 0x87, 0x50, 0x17, 0x1b, 0xe1, 0xf3, 0x04,
+	0x5b, 0xf2, 0xf2, 0x43, 0xac, 0x84, 0x9b, 0x6a, 0x6c, 0xec, 0x8e, 0x3d,
+	0x6b, 0xf7, 0x76, 0x49, 0x1b, 0x0a, 0x6c, 0xe4, 0xf5, 0xe7, 0xe8, 0xdf,
+	0x63, 0xa6, 0x17, 0x75, 0x4b, 0xe4, 0x1a, 0xaa, 0x36, 0x91, 0xc4, 0xd7,
+	0x9d, 0x31, 0x6b, 0xd8, 0xc7, 0x54, 0xeb, 0x7a, 0xff, 0x0e, 0xa5, 0x6e,
+	0xe2, 0x75, 0xc6, 0x53, 0x6b, 0xd3, 0x95, 0xf7, 0x8a, 0x36, 0x31, 0xc9,
+	0xd5, 0x9f, 0xb6, 0x71, 0xd5, 0x30, 0xd4, 0xa6, 0x2b, 0xfd, 0x5f, 0xd4,
+	0x7b, 0x80, 0xb9, 0x8c, 0x54, 0x75, 0x5c, 0xae, 0xb1, 0x19, 0x94, 0x33,
+	0x80, 0xaf, 0xe5, 0x46, 0x70, 0x7f, 0xa6, 0xd0, 0xbb, 0x30, 0xb6, 0xf5,
+	0xa6, 0xcb, 0x73, 0xbb, 0x27, 0x63, 0xf4, 0x54, 0x15, 0xe6, 0xb6, 0x6f,
+	0x56, 0xd6, 0x3e, 0x62, 0x33, 0x6d, 0xda, 0xef, 0xd8, 0xb4, 0x0b, 0x66,
+	0xf6, 0xb2, 0xdc, 0x3e, 0xca, 0xf5, 0xc7, 0xa5, 0xdd, 0x8c, 0x16, 0x3f,
+	0xe5, 0xee, 0xa1, 0xdc, 0xdd, 0x57, 0xc8, 0xed, 0x35, 0x2f, 0xcb, 0xdd,
+	0x95, 0x31, 0x8e, 0x2a, 0x05, 0xb9, 0x0f, 0xcc, 0x16, 0x65, 0xa4, 0xb0,
+	0xbd, 0x29, 0x85, 0xec, 0xba, 0x7d, 0xf6, 0x3e, 0xc7, 0x1e, 0x3f, 0x71,
+	0xae, 0x6f, 0xac, 0x3b, 0xc3, 0x7c, 0xe0, 0xd7, 0xb8, 0xc9, 0x3c, 0x68,
+	0x24, 0x07, 0x8d, 0x92, 0x83, 0xea, 0xcc, 0x87, 0x30, 0x73, 0xa4, 0xb8,
+	0x2e, 0xa8, 0xbd, 0xb1, 0xc5, 0x93, 0x24, 0x4f, 0x0d, 0xfa, 0x36, 0xff,
+	0xde, 0x5a, 0xd2, 0x26, 0xf6, 0xba, 0xed, 0xd6, 0x36, 0xf2, 0x09, 0x1f,
+	0xb9, 0x61, 0x85, 0xd8, 0x98, 0x91, 0x6b, 0x4a, 0x32, 0x9f, 0x0b, 0x7d,
+	0x47, 0x4e, 0xf6, 0xd4, 0xb7, 0xb1, 0x17, 0xdb, 0x42, 0x1f, 0xf7, 0xe0,
+	0x60, 0xee, 0x2f, 0x44, 0x32, 0xc8, 0xb1, 0x2c, 0x59, 0x5b, 0xe0, 0xdf,
+	0x9e, 0xe9, 0x44, 0x05, 0xe3, 0x69, 0x69, 0xbc, 0x23, 0xf1, 0xbd, 0x3a,
+	0x5b, 0xae, 0xd1, 0xfb, 0x96, 0xc4, 0xbb, 0x13, 0xb7, 0xd4, 0x79, 0x70,
+	0xd8, 0xe1, 0x45, 0xda, 0x09, 0x77, 0xcf, 0xcb, 0x2f, 0x6e, 0xe6, 0xb3,
+	0xdf, 0xb6, 0xe4, 0x9e, 0xf2, 0x10, 0x56, 0x35, 0xe5, 0xfb, 0x02, 0x48,
+	0xfe, 0x79, 0x00, 0x1a, 0xfb, 0xda, 0x83, 0xf8, 0xae, 0x1e, 0xf2, 0x75,
+	0xe5, 0xbc, 0x62, 0xb3, 0x35, 0xe7, 0xdf, 0x62, 0x05, 0x50, 0x11, 0xd7,
+	0xf2, 0x5b, 0x3d, 0x11, 0x07, 0xcb, 0x45, 0x7c, 0x5f, 0xe2, 0x9a, 0x6c,
+	0x37, 0xf5, 0x75, 0x71, 0x55, 0x9f, 0xf1, 0xf9, 0xdb, 0xa7, 0x23, 0xe6,
+	0x90, 0xdb, 0xd7, 0x25, 0xea, 0xb2, 0xb6, 0x7d, 0xde, 0xcc, 0xd3, 0x20,
+	0xf2, 0xef, 0x23, 0x89, 0xf5, 0xd9, 0x46, 0xec, 0x24, 0xdf, 0x6b, 0x9d,
+	0x6e, 0x84, 0x3a, 0x0d, 0x3c, 0x37, 0x1e, 0x42, 0x75, 0x46, 0x3b, 0x3a,
+	0xe0, 0xe9, 0xc6, 0xc4, 0x7c, 0x1b, 0xeb, 0xa8, 0x7f, 0x31, 0xac, 0xd8,
+	0xf8, 0x24, 0xa6, 0xe0, 0x26, 0xf3, 0x3b, 0x22, 0xbf, 0x54, 0x60, 0x87,
+	0xb9, 0x43, 0x9c, 0x2d, 0xf0, 0x66, 0xd9, 0x3f, 0xdd, 0x59, 0xe0, 0xc2,
+	0x41, 0x5d, 0xee, 0x4b, 0xce, 0x91, 0x13, 0x08, 0x5c, 0xe5, 0xe0, 0xfa,
+	0xd1, 0x44, 0x4b, 0x56, 0xf2, 0x8c, 0xb5, 0xfe, 0x9b, 0x89, 0x37, 0x1f,
+	0x90, 0x67, 0xac, 0x6a, 0xd2, 0xfa, 0xc6, 0x95, 0x54, 0x54, 0x72, 0xe2,
+	0x2c, 0xb4, 0xee, 0xce, 0x02, 0xff, 0x6d, 0x98, 0x73, 0xb9, 0xf1, 0x75,
+	0x73, 0xcd, 0xfe, 0xcd, 0x7c, 0xf6, 0x9a, 0x98, 0x16, 0x56, 0x14, 0x15,
+	0x13, 0x8e, 0x9c, 0xd1, 0x84, 0x39, 0x57, 0x4a, 0x2c, 0x97, 0x36, 0x91,
+	0x7f, 0xa7, 0x13, 0xf5, 0xd9, 0xdb, 0x70, 0xd0, 0xea, 0xf6, 0xef, 0x94,
+	0xdc, 0x8d, 0x7c, 0x63, 0x85, 0xd8, 0x4c, 0x7e, 0x1f, 0x09, 0xaf, 0xf7,
+	0xb4, 0x8b, 0x94, 0xb7, 0xc1, 0x9c, 0xc3, 0x66, 0x51, 0x38, 0x4b, 0xe4,
+	0xcc, 0xdb, 0x20, 0x47, 0x6c, 0x1d, 0xf7, 0x2f, 0x26, 0x9d, 0x4b, 0x0a,
+	0x36, 0x98, 0x8b, 0xe8, 0x09, 0x6a, 0x07, 0x25, 0xbf, 0x6d, 0x23, 0x1e,
+	0xa7, 0xba, 0xbc, 0xbc, 0x2f, 0x73, 0x7d, 0x20, 0x71, 0xed, 0x18, 0xf2,
+	0xe5, 0xec, 0x8f, 0x68, 0xcf, 0x40, 0x67, 0x0e, 0xd8, 0xc8, 0x5a, 0xfe,
+	0x8c, 0xf9, 0x99, 0xdd, 0x53, 0xd8, 0x13, 0xdc, 0x3e, 0x2d, 0xc8, 0x6d,
+	0xe3, 0x18, 0x9b, 0xf7, 0x06, 0xb6, 0x59, 0xcd, 0x48, 0xe7, 0xbc, 0x57,
+	0xc8, 0x36, 0x0e, 0x5e, 0xa3, 0x28, 0x9c, 0x67, 0x8a, 0xb6, 0x2a, 0xd6,
+	0xdd, 0x87, 0x9c, 0xfa, 0x5a, 0xca, 0x79, 0xca, 0xfa, 0x53, 0x1e, 0xff,
+	0x26, 0xeb, 0xaf, 0xe4, 0x96, 0x03, 0x89, 0x75, 0x96, 0xd6, 0x23, 0xfb,
+	0xef, 0x10, 0x6d, 0x15, 0xb2, 0x64, 0x6d, 0x7a, 0x8c, 0xb5, 0x49, 0x0b,
+	0x1f, 0x12, 0x72, 0xcd, 0x4c, 0x5b, 0xbc, 0xd6, 0xa3, 0xc0, 0xd2, 0xb5,
+	0xe8, 0x5b, 0x1e, 0xad, 0xaf, 0xd6, 0xe3, 0xf6, 0x04, 0x8d, 0x73, 0xbd,
+	0xac, 0x9d, 0xae, 0x7d, 0xdd, 0x75, 0xdb, 0x54, 0xc2, 0x98, 0x93, 0xdc,
+	0xdf, 0xb6, 0xdf, 0x8e, 0x75, 0xe0, 0x11, 0x4b, 0x72, 0x7e, 0x79, 0x7d,
+	0x32, 0x51, 0x3f, 0xe3, 0xa3, 0x6e, 0x82, 0x5c, 0xb7, 0x83, 0xf1, 0x58,
+	0xd4, 0x51, 0xf6, 0x36, 0x8d, 0xe4, 0x40, 0x3e, 0xff, 0x96, 0x69, 0x27,
+	0x7e, 0x92, 0x5b, 0xc9, 0xff, 0x37, 0xc7, 0xf2, 0xb5, 0x7e, 0x74, 0xe2,
+	0x30, 0xf9, 0xce, 0x86, 0x42, 0x0f, 0x50, 0xea, 0xf4, 0x00, 0xe4, 0xfb,
+	0xa6, 0x6d, 0xff, 0x9a, 0x3d, 0xc0, 0xed, 0xec, 0x01, 0x6a, 0x9d, 0x1e,
+	0xc0, 0x8b, 0x9d, 0xe4, 0xff, 0x21, 0xf2, 0xff, 0x6e, 0xf2, 0xff, 0x6a,
+	0xf2, 0xff, 0xb7, 0x62, 0x9f, 0xe0, 0x01, 0xd5, 0xb5, 0xef, 0xae, 0xa8,
+	0x9f, 0xb1, 0xaf, 0x30, 0x87, 0x3f, 0x23, 0x2f, 0xf1, 0x90, 0x97, 0x54,
+	0x89, 0x7b, 0x9c, 0x7b, 0xbf, 0xba, 0xd4, 0x03, 0x94, 0xd3, 0xdf, 0x5b,
+	0xd8, 0x03, 0xb4, 0xb2, 0x07, 0xd8, 0x4e, 0x2e, 0xda, 0xcd, 0x1e, 0x20,
+	0xc0, 0x1e, 0x60, 0x36, 0x36, 0x1c, 0xf6, 0xb0, 0xf6, 0xad, 0x58, 0xdd,
+	0x8d, 0xa3, 0xd3, 0xf8, 0x26, 0xdb, 0xb6, 0x57, 0xc8, 0xe7, 0x93, 0x17,
+	0xd8, 0x03, 0x6c, 0x66, 0x0f, 0xe0, 0x17, 0x9a, 0xf9, 0x06, 0x7b, 0xd8,
+	0x92, 0xb8, 0xd1, 0xb9, 0x91, 0x75, 0xb2, 0x94, 0xba, 0x7c, 0x48, 0xff,
+	0xbe, 0xcf, 0x1e, 0x40, 0x72, 0x65, 0x2f, 0x7b, 0x80, 0x0f, 0x75, 0x5c,
+	0x24, 0x87, 0x3d, 0xf3, 0x36, 0x7b, 0x80, 0x0b, 0xec, 0x01, 0x36, 0x33,
+	0x26, 0xab, 0xeb, 0xed, 0xa1, 0x8f, 0x62, 0x92, 0x47, 0x98, 0xcc, 0x61,
+	0xf6, 0x17, 0xec, 0x01, 0xde, 0x63, 0x0f, 0x70, 0x9e, 0x3d, 0xc0, 0x46,
+	0x4b, 0x4b, 0x86, 0xd9, 0x03, 0xbc, 0xc3, 0x1e, 0xe0, 0x99, 0x05, 0x59,
+	0x27, 0x7c, 0x38, 0x46, 0x9e, 0xcb, 0xfe, 0xd1, 0xb7, 0x82, 0x79, 0x64,
+	0x17, 0x7a, 0x80, 0x2d, 0xe4, 0xbb, 0x77, 0x32, 0x36, 0x7f, 0x89, 0xc8,
+	0xe0, 0xdd, 0xc0, 0xcb, 0x05, 0xdd, 0xa2, 0x72, 0xbd, 0xf2, 0xa3, 0x98,
+	0xa1, 0x9e, 0x64, 0x0f, 0x70, 0x8c, 0x3d, 0xc0, 0x0c, 0x7b, 0x80, 0x6d,
+	0x39, 0xd9, 0xbb, 0xfb, 0xd8, 0xbb, 0x57, 0xa3, 0xe7, 0xe6, 0x4a, 0x74,
+	0x8f, 0xbb, 0x7d, 0xc0, 0x4f, 0xd9, 0x07, 0xbc, 0xcf, 0x3e, 0x60, 0xab,
+	0x25, 0xd7, 0x46, 0x8b, 0x9c, 0x4e, 0xc5, 0x23, 0x85, 0x3e, 0x20, 0xcc,
+	0x3e, 0x60, 0x17, 0xc7, 0xbf, 0x86, 0x7d, 0x40, 0xd4, 0x90, 0xef, 0xf9,
+	0x17, 0xe1, 0x61, 0x2d, 0x13, 0x32, 0x66, 0x0e, 0x25, 0xd6, 0x4d, 0x4b,
+	0x9d, 0xbe, 0x99, 0xb0, 0xa7, 0xb5, 0xc1, 0xf5, 0x8c, 0x8f, 0xf7, 0x8c,
+	0x97, 0x1d, 0xdf, 0xeb, 0x31, 0xb9, 0x26, 0xba, 0x2f, 0xf1, 0xda, 0x98,
+	0xec, 0xfd, 0x06, 0x12, 0xbe, 0xb1, 0x48, 0xf4, 0x4c, 0x01, 0x13, 0x8c,
+	0x6c, 0x29, 0xeb, 0xa4, 0x6b, 0x77, 0x0f, 0xf3, 0x67, 0x77, 0x3a, 0x89,
+	0xde, 0x66, 0x37, 0x97, 0xf4, 0x6c, 0x3f, 0xfb, 0xc8, 0x36, 0xa4, 0x2d,
+	0x35, 0xd0, 0xce, 0x3a, 0x38, 0x41, 0x0e, 0x5b, 0x76, 0x32, 0x14, 0xd8,
+	0xce, 0x9a, 0x53, 0x75, 0x52, 0xf2, 0xec, 0x54, 0x42, 0xfd, 0x56, 0x91,
+	0x97, 0xca, 0x7d, 0xe9, 0xa0, 0xaf, 0x95, 0xfc, 0xfa, 0x80, 0xb5, 0x8d,
+	0xdc, 0x58, 0x0b, 0xfd, 0x1c, 0x91, 0xee, 0xbb, 0xe9, 0x83, 0x9e, 0xda,
+	0xcb, 0xeb, 0x8b, 0x77, 0xf0, 0xde, 0xfe, 0x7f, 0x65, 0x7d, 0x31, 0xb0,
+	0xb2, 0x84, 0x7d, 0xb7, 0x16, 0x92, 0xeb, 0x8b, 0x43, 0x99, 0xdf, 0x88,
+	0x5a, 0xdd, 0x3b, 0x78, 0xc1, 0xa3, 0x85, 0xde, 0x16, 0x95, 0x7c, 0xf7,
+	0x36, 0xb9, 0x66, 0x8f, 0x11, 0x2b, 0x92, 0x1f, 0x91, 0xe7, 0xb6, 0xbe,
+	0x20, 0xdf, 0xbf, 0x8d, 0x3d, 0xdb, 0x6d, 0x98, 0xc8, 0x15, 0xb9, 0x55,
+	0xa7, 0xd4, 0x15, 0xed, 0xe3, 0x2e, 0x86, 0x35, 0x66, 0xfd, 0x8b, 0x67,
+	0xe1, 0xce, 0xad, 0x8a, 0x73, 0x5d, 0x18, 0xfb, 0xe7, 0x8b, 0x33, 0x5f,
+	0x91, 0x78, 0xa1, 0xcb, 0xdc, 0xf5, 0xef, 0x9c, 0xee, 0x65, 0x4c, 0x77,
+	0xe2, 0x88, 0xb5, 0x82, 0xbd, 0x6e, 0x37, 0x86, 0xa7, 0xbb, 0x1c, 0xdd,
+	0x33, 0xec, 0xe7, 0xa3, 0xab, 0x53, 0xf6, 0x7b, 0x6b, 0xf4, 0xce, 0xa7,
+	0x90, 0xbf, 0x9f, 0x98, 0x28, 0x9a, 0xc8, 0x1f, 0x6e, 0x62, 0x6d, 0x38,
+	0x35, 0xa7, 0xb3, 0x0f, 0x6e, 0xc3, 0x5e, 0xce, 0x73, 0x80, 0xf3, 0x79,
+	0x20, 0x97, 0x42, 0x72, 0x99, 0x8a, 0x96, 0xa6, 0x03, 0xc0, 0x1f, 0x7b,
+	0x31, 0x37, 0x9e, 0x44, 0xa4, 0xe9, 0x0b, 0xe8, 0xe9, 0xf2, 0x11, 0x33,
+	0x2b, 0xf1, 0xac, 0xf4, 0x91, 0x22, 0x55, 0x90, 0x78, 0xcf, 0xda, 0x62,
+	0xb1, 0xb6, 0xd0, 0x7e, 0xcf, 0xd3, 0x96, 0xdf, 0xb9, 0xb4, 0x27, 0x24,
+	0xf9, 0x51, 0x0b, 0xf9, 0x91, 0x9f, 0x3d, 0x4e, 0x0b, 0xf1, 0x0b, 0x17,
+	0xcb, 0x18, 0xa3, 0xe7, 0x3d, 0x29, 0x62, 0xf0, 0x0c, 0x71, 0x73, 0x8e,
+	0xbd, 0xa7, 0x73, 0x46, 0x22, 0xd0, 0x4d, 0xbe, 0xc6, 0x3e, 0x22, 0xd0,
+	0x95, 0x5b, 0x1e, 0xb8, 0x35, 0xb7, 0xcb, 0x4f, 0x8e, 0xcd, 0x4f, 0x89,
+	0xc5, 0x72, 0x8c, 0x2b, 0xc7, 0x3b, 0x51, 0x8e, 0x72, 0x39, 0x66, 0x18,
+	0xa9, 0xe3, 0xd7, 0x20, 0x73, 0xfc, 0x4f, 0xf9, 0xb7, 0xce, 0xfe, 0xf5,
+	0x32, 0xdf, 0x77, 0x79, 0xef, 0x6f, 0xfc, 0x92, 0xef, 0xbb, 0x6b, 0x7d,
+	0xfd, 0x89, 0x70, 0x76, 0xdc, 0x2f, 0xf9, 0x69, 0xeb, 0xb8, 0xfb, 0xb7,
+	0x7e, 0xc5, 0xdf, 0xc5, 0x75, 0xeb, 0x62, 0x3f, 0xb0, 0x82, 0xf8, 0x65,
+	0x4f, 0xeb, 0x08, 0x4d, 0x69, 0x67, 0x7a, 0x19, 0xf7, 0xeb, 0xc9, 0x95,
+	0x43, 0xec, 0x07, 0x3e, 0x32, 0x8c, 0xe8, 0x49, 0xfa, 0x6c, 0x23, 0x31,
+	0x88, 0x31, 0x81, 0x37, 0x9d, 0x7e, 0xe0, 0x63, 0xbf, 0xdb, 0x0f, 0xe8,
+	0xc4, 0x8e, 0x28, 0xfc, 0x53, 0xd0, 0x4b, 0x81, 0xe5, 0x7e, 0xf2, 0xf8,
+	0x6f, 0x33, 0xde, 0x1e, 0x24, 0x47, 0xb7, 0xf9, 0xdc, 0x05, 0xe7, 0x39,
+	0xc9, 0xe3, 0xff, 0xe5, 0x12, 0x8f, 0x0f, 0x4d, 0xe1, 0x21, 0xf2, 0x5e,
+	0xdf, 0x47, 0xe4, 0xdd, 0x1f, 0x39, 0xf7, 0x55, 0xa7, 0xaf, 0x28, 0xa3,
+	0x1e, 0xef, 0x3a, 0xfa, 0x1c, 0x72, 0xf4, 0x29, 0xf2, 0xf7, 0x5a, 0xca,
+	0xa7, 0x4e, 0x8b, 0x8f, 0x50, 0x27, 0xf2, 0x77, 0x72, 0x74, 0x34, 0xd6,
+	0x42, 0xea, 0xf6, 0x91, 0xd4, 0xcd, 0x3c, 0x49, 0x0e, 0x7f, 0xac, 0xb9,
+	0xc8, 0xdb, 0x2b, 0x99, 0x4f, 0x2a, 0xea, 0x16, 0xdc, 0x71, 0xc3, 0x0b,
+	0x7e, 0x71, 0x8b, 0xc3, 0x4d, 0x25, 0xdf, 0xb3, 0xd1, 0xd6, 0xf4, 0xef,
+	0xf3, 0xdb, 0xed, 0xac, 0x4d, 0x6f, 0xaf, 0x76, 0x39, 0x92, 0x3c, 0x83,
+	0xd3, 0xd2, 0xf4, 0x4d, 0x1b, 0xb7, 0xca, 0x58, 0x90, 0x31, 0xe1, 0x5f,
+	0x4c, 0x39, 0x61, 0x78, 0xac, 0x5c, 0xee, 0x9f, 0x47, 0x9a, 0x6e, 0xb7,
+	0xdd, 0xf8, 0x0f, 0x06, 0xba, 0x98, 0x57, 0x8f, 0x51, 0x66, 0xd7, 0x49,
+	0xfa, 0xd3, 0x3a, 0xe4, 0xf8, 0xe8, 0xd6, 0x93, 0xcb, 0xd9, 0xf7, 0xc9,
+	0xfd, 0x20, 0x08, 0x6f, 0x7c, 0x3f, 0xda, 0x27, 0xc2, 0x78, 0xcb, 0xf4,
+	0xa3, 0xe7, 0xd2, 0x5e, 0xce, 0x91, 0xc4, 0xbb, 0xe9, 0x90, 0xcc, 0x85,
+	0xf0, 0x5b, 0xe4, 0xd6, 0x29, 0xaf, 0x17, 0x8f, 0x66, 0x88, 0xb3, 0x41,
+	0x89, 0x05, 0xc5, 0xb5, 0x47, 0xf9, 0x6e, 0xf1, 0x7b, 0x05, 0xc2, 0x35,
+	0x91, 0x96, 0x3d, 0x08, 0x33, 0x3f, 0x9a, 0xc9, 0x61, 0xfe, 0x1a, 0x87,
+	0x27, 0x15, 0xdc, 0x1d, 0x23, 0x58, 0xde, 0x6c, 0xf2, 0xef, 0x86, 0xbe,
+	0xf7, 0xf0, 0x8f, 0xf6, 0xcc, 0x52, 0xf9, 0xbe, 0x3c, 0xe7, 0xf5, 0xa9,
+	0x5d, 0xab, 0xeb, 0xf9, 0x1f, 0x42, 0x1f, 0xbc, 0x80, 0x86, 0xfe, 0x45,
+	0xbc, 0x6f, 0xe7, 0x79, 0xef, 0xbc, 0xf0, 0xe0, 0x94, 0x19, 0x09, 0x29,
+	0x54, 0x5e, 0xd6, 0xf5, 0xbb, 0x4c, 0xb9, 0x0f, 0xa9, 0xf5, 0x3f, 0xc5,
+	0xfe, 0xfe, 0xb4, 0x90, 0xe7, 0x37, 0xcf, 0xda, 0xa9, 0x1a, 0x39, 0xae,
+	0xc0, 0xf5, 0x2b, 0x1b, 0x3a, 0xd8, 0xf7, 0xb7, 0x94, 0x08, 0xdd, 0x7c,
+	0x4f, 0xfc, 0xad, 0x9d, 0x0f, 0x7e, 0x6a, 0xbf, 0xad, 0x17, 0xe5, 0x6a,
+	0x61, 0x9f, 0xa7, 0xa8, 0x5b, 0x98, 0x39, 0x28, 0xd7, 0x30, 0xfe, 0x1a,
+	0x77, 0x4f, 0x7a, 0xd1, 0x16, 0xfb, 0xc0, 0x4e, 0x05, 0xa5, 0xcc, 0x3f,
+	0xab, 0x60, 0x5c, 0x52, 0xbe, 0xbb, 0x9f, 0xf1, 0xe3, 0x1c, 0xc4, 0x26,
+	0x4b, 0x72, 0x7d, 0x07, 0x77, 0x61, 0x5b, 0x72, 0x8d, 0xd9, 0xc6, 0x8e,
+	0xd8, 0x10, 0xce, 0xc7, 0x92, 0x7f, 0xee, 0x83, 0x76, 0xe6, 0x9c, 0x47,
+	0xcb, 0x37, 0x7a, 0xc2, 0xc2, 0x5f, 0xaf, 0xf7, 0xd7, 0x3b, 0xf1, 0xfc,
+	0x73, 0xf6, 0x8f, 0x95, 0xbe, 0x9b, 0x9c, 0xbd, 0xa1, 0x09, 0x2c, 0x8c,
+	0xa5, 0x58, 0x03, 0x3c, 0x18, 0x6e, 0xd6, 0xba, 0x9f, 0x14, 0x5a, 0x68,
+	0x9f, 0x08, 0x8b, 0x3b, 0xf4, 0x41, 0x3c, 0x6d, 0x1a, 0xc9, 0x56, 0xb1,
+	0xdc, 0xd7, 0x91, 0x2b, 0xca, 0x4e, 0x32, 0x07, 0xb5, 0xfc, 0x39, 0x4f,
+	0x19, 0x6a, 0x57, 0xeb, 0x1d, 0x65, 0x1e, 0x6d, 0xf0, 0x4b, 0xec, 0x5f,
+	0x36, 0xe7, 0xf2, 0xfe, 0xf7, 0x0c, 0xd6, 0xf0, 0x29, 0x29, 0x2f, 0x5d,
+	0x58, 0x3f, 0x9f, 0xc0, 0x96, 0x31, 0x7b, 0xfd, 0x2b, 0x31, 0x2d, 0xf4,
+	0xa4, 0x48, 0xc9, 0xb3, 0x97, 0xd1, 0xbd, 0xd0, 0xc3, 0xf3, 0x68, 0x44,
+	0x5b, 0x4e, 0xc1, 0x35, 0x53, 0x52, 0x66, 0x9a, 0x32, 0xf7, 0xa3, 0x6c,
+	0xd2, 0x5e, 0xbf, 0xd3, 0xd4, 0x06, 0xcf, 0x79, 0x52, 0xff, 0xb3, 0x96,
+	0x76, 0xdb, 0x24, 0xb4, 0xbe, 0x45, 0x31, 0x84, 0x57, 0x38, 0x87, 0x67,
+	0x62, 0x5a, 0xf4, 0x2f, 0x85, 0xd6, 0xf9, 0x0d, 0xe6, 0x8d, 0x27, 0x1e,
+	0xa0, 0x9e, 0x5a, 0x74, 0x16, 0x72, 0x6f, 0x25, 0x8c, 0x73, 0x66, 0xca,
+	0xdf, 0x5e, 0xdf, 0x48, 0x4e, 0xb9, 0x9c, 0xb5, 0x5a, 0x77, 0xce, 0xa3,
+	0xec, 0xcf, 0x95, 0x22, 0xaf, 0x46, 0xc9, 0x29, 0x3b, 0xa1, 0x8c, 0x55,
+	0x8a, 0xb9, 0x74, 0xc4, 0x6c, 0xc3, 0x7f, 0x41, 0x3e, 0x24, 0x43, 0x64,
+	0x3f, 0x2a, 0x27, 0x7f, 0x6d, 0x57, 0xe9, 0x7a, 0xcb, 0x98, 0xe0, 0xb8,
+	0x4f, 0x2c, 0xa7, 0x8d, 0xf9, 0x1e, 0x63, 0xf8, 0x11, 0xe2, 0xdb, 0x1d,
+	0x63, 0x21, 0xbe, 0x5f, 0x85, 0xeb, 0x27, 0xe5, 0x5a, 0xe7, 0xd5, 0x85,
+	0xb5, 0x4e, 0xc1, 0x38, 0x60, 0x1c, 0xcd, 0x56, 0x22, 0xc5, 0x31, 0xde,
+	0x4e, 0x57, 0x62, 0xbf, 0x5c, 0x73, 0xd2, 0x19, 0x5f, 0xc4, 0x9c, 0x94,
+	0xc3, 0x2b, 0xbe, 0x49, 0x1e, 0x26, 0x3f, 0x1f, 0x4b, 0x84, 0xe7, 0x9a,
+	0x2a, 0x9c, 0x3d, 0x6f, 0xe6, 0xe7, 0x7e, 0x67, 0x5d, 0x3d, 0x48, 0xfd,
+	0xaa, 0x70, 0x62, 0x42, 0xf6, 0x9c, 0xad, 0xeb, 0x7c, 0x85, 0x33, 0x19,
+	0x6f, 0x92, 0x03, 0xae, 0x9f, 0x14, 0xce, 0x99, 0x95, 0x0b, 0xab, 0x87,
+	0xb5, 0x5a, 0xac, 0xc3, 0x51, 0x55, 0x81, 0x4f, 0xff, 0x53, 0x1c, 0x54,
+	0x1b, 0x89, 0xb7, 0x3a, 0xde, 0x49, 0x7f, 0x81, 0x35, 0x28, 0x2c, 0x39,
+	0x1c, 0xae, 0x99, 0x2c, 0xe1, 0x98, 0xeb, 0xb1, 0xc9, 0x6c, 0xc7, 0x4f,
+	0x55, 0xc9, 0xd9, 0x7d, 0x7c, 0xc6, 0x8b, 0xd1, 0x59, 0xd5, 0xd9, 0x97,
+	0x3a, 0xf0, 0x3b, 0xba, 0x7d, 0x9e, 0x4e, 0x2e, 0x66, 0xfc, 0xdb, 0x3a,
+	0xf9, 0xb0, 0x98, 0xd6, 0x71, 0x21, 0xfd, 0x22, 0x3e, 0xa2, 0xec, 0xd4,
+	0xac, 0x2b, 0x73, 0x3c, 0xe7, 0xca, 0x3d, 0x60, 0x45, 0x9c, 0x35, 0xc2,
+	0x72, 0x72, 0x00, 0xeb, 0x73, 0xe7, 0xfd, 0xef, 0x19, 0x83, 0xec, 0x73,
+	0x92, 0xbd, 0xbd, 0x59, 0x8f, 0x36, 0x95, 0xfe, 0xb2, 0xe4, 0x18, 0x1a,
+	0xdc, 0xbd, 0xc1, 0x10, 0x56, 0x8d, 0xd9, 0x43, 0xa1, 0xb8, 0xbc, 0x6e,
+	0xdb, 0xd5, 0x6b, 0xf5, 0xd0, 0xeb, 0xcc, 0xdb, 0x91, 0x9c, 0x8f, 0x36,
+	0x18, 0xc5, 0x89, 0x74, 0x03, 0xb1, 0x5f, 0x41, 0x98, 0x7d, 0xea, 0x59,
+	0xcf, 0x28, 0xe6, 0xd2, 0x1f, 0x32, 0x17, 0x7c, 0x18, 0xcd, 0x55, 0x8a,
+	0xd9, 0xf4, 0xcf, 0x2a, 0x24, 0x8e, 0x8e, 0xb0, 0x27, 0x69, 0x1c, 0x93,
+	0xba, 0xda, 0x43, 0x55, 0x94, 0xf3, 0x28, 0xe5, 0xcc, 0xae, 0xd1, 0xbb,
+	0x47, 0x84, 0xb4, 0x99, 0x8a, 0xc3, 0xb9, 0x57, 0x88, 0x65, 0xd2, 0x6e,
+	0x17, 0x2a, 0xe4, 0x1e, 0xc4, 0x01, 0xf6, 0xfa, 0x3f, 0x2d, 0xc8, 0x39,
+	0x94, 0x3b, 0x83, 0xd9, 0xb4, 0x59, 0x29, 0xbf, 0x8f, 0xb0, 0xa6, 0x8d,
+	0xb2, 0xf7, 0xcd, 0xa6, 0x83, 0x18, 0x4b, 0x37, 0x74, 0x8f, 0x09, 0x6f,
+	0x61, 0x3f, 0xa1, 0x17, 0xc7, 0x0a, 0xcf, 0x0c, 0xf3, 0xdd, 0xe1, 0x4b,
+	0xdf, 0xa5, 0x8d, 0xdc, 0x73, 0x1f, 0xee, 0x9e, 0x53, 0x19, 0x7d, 0x27,
+	0xd7, 0x10, 0x74, 0xea, 0x52, 0x22, 0xcf, 0xd2, 0xe1, 0xc5, 0x89, 0xf5,
+	0x18, 0x31, 0xbf, 0x8f, 0x5d, 0x9c, 0xf7, 0x28, 0xed, 0x39, 0x69, 0xc9,
+	0xf3, 0x1d, 0x51, 0x62, 0x8f, 0xdc, 0xf3, 0xec, 0x4f, 0x1c, 0x4f, 0x7b,
+	0x71, 0x98, 0x39, 0x73, 0x67, 0xac, 0xa1, 0xf3, 0x25, 0xc6, 0x5d, 0xf2,
+	0x2b, 0xf2, 0x0c, 0x85, 0x17, 0x63, 0x99, 0x07, 0x30, 0x53, 0xd3, 0xb0,
+	0xf8, 0x2c, 0x31, 0xe1, 0x28, 0x71, 0xca, 0x4b, 0x4c, 0xa8, 0xce, 0x28,
+	0x85, 0x33, 0x01, 0x26, 0xff, 0x6e, 0x38, 0x33, 0x87, 0x5f, 0xd0, 0x2e,
+	0x52, 0xbf, 0x48, 0x74, 0x0e, 0xf2, 0x59, 0x77, 0xfd, 0x5b, 0x9f, 0xeb,
+	0xc3, 0x59, 0xd9, 0xd7, 0x2b, 0xb2, 0x0e, 0xec, 0x23, 0x8f, 0x69, 0x50,
+	0x47, 0xa4, 0xec, 0x2e, 0x2d, 0x94, 0xa2, 0xaf, 0x0e, 0x3a, 0xfd, 0xc1,
+	0x40, 0x22, 0x92, 0x95, 0x67, 0x2a, 0xab, 0xe0, 0x65, 0xec, 0x8f, 0x98,
+	0xf2, 0xcc, 0x4b, 0x28, 0xb0, 0x99, 0x3e, 0x1c, 0xb1, 0x1a, 0x5a, 0x22,
+	0x62, 0xe7, 0xa5, 0xfd, 0x72, 0x2f, 0x9f, 0x1d, 0x4d, 0x6b, 0xdd, 0x8f,
+	0xa2, 0xa1, 0x73, 0x2f, 0xbe, 0x4a, 0x6e, 0xda, 0xd0, 0x33, 0x81, 0x88,
+	0x79, 0x17, 0xb1, 0x2b, 0x0f, 0x57, 0x56, 0x5d, 0x96, 0x3c, 0x64, 0xc9,
+	0xa7, 0xf6, 0x0a, 0xfd, 0x10, 0x26, 0xc8, 0x65, 0xeb, 0x9b, 0xf4, 0x33,
+	0xdf, 0x2e, 0xdc, 0x73, 0xf7, 0x11, 0x65, 0xbc, 0x54, 0xd2, 0x06, 0x65,
+	0xf0, 0x2e, 0xe1, 0x78, 0xd2, 0x16, 0x39, 0xa9, 0xe3, 0x2b, 0xb8, 0x9f,
+	0xf1, 0x36, 0x91, 0x13, 0x30, 0xeb, 0x5e, 0x41, 0xbf, 0xac, 0x93, 0x7c,
+	0xa7, 0x35, 0xad, 0x92, 0x37, 0x85, 0xc8, 0x4f, 0x22, 0xe1, 0x61, 0xce,
+	0xaf, 0x95, 0x58, 0x30, 0x4a, 0x0c, 0x49, 0xa9, 0x2a, 0xf3, 0x55, 0xe5,
+	0xf5, 0xe5, 0xce, 0xff, 0x68, 0xc8, 0xfe, 0xad, 0x7e, 0x46, 0x9e, 0x6b,
+	0xd8, 0x8f, 0x57, 0x26, 0xf2, 0xe4, 0x91, 0x49, 0xec, 0xa9, 0xa1, 0xff,
+	0xac, 0xa5, 0xce, 0x9a, 0x87, 0xec, 0x13, 0xb7, 0x64, 0x06, 0xc8, 0x55,
+	0x6d, 0x6c, 0x8c, 0x29, 0x75, 0xf2, 0x6c, 0xcf, 0x2c, 0xfb, 0xc5, 0x09,
+	0x76, 0x7b, 0xf7, 0x9b, 0xdf, 0x80, 0xb9, 0x44, 0x62, 0xe7, 0x08, 0x5e,
+	0x98, 0x91, 0x5c, 0x20, 0xcd, 0xbe, 0x46, 0xda, 0x47, 0x21, 0x17, 0xf7,
+	0xa1, 0xd1, 0x59, 0x3f, 0xfc, 0x45, 0x62, 0xe5, 0x8c, 0xcb, 0x01, 0x1b,
+	0xb3, 0xb2, 0xd7, 0xac, 0x42, 0x80, 0xf6, 0x3a, 0x1d, 0x23, 0x3f, 0x53,
+	0xa5, 0x3d, 0xe5, 0xd9, 0x5f, 0x77, 0x9e, 0xd1, 0xac, 0xc0, 0x48, 0xf3,
+	0x95, 0x7b, 0x70, 0xf2, 0xff, 0x35, 0x8a, 0xfb, 0x70, 0xc5, 0xbd, 0x89,
+	0xbf, 0xb4, 0xcf, 0xca, 0x73, 0xa8, 0xca, 0xc3, 0x95, 0xf2, 0xfc, 0xe6,
+	0xcc, 0x25, 0xfb, 0x4a, 0x9b, 0x9e, 0xb4, 0x53, 0x05, 0xde, 0x5f, 0xcd,
+	0x67, 0x3f, 0x9e, 0xd2, 0xfa, 0xdf, 0x16, 0x0d, 0xac, 0x27, 0x8c, 0xab,
+	0x1a, 0x2f, 0x86, 0x1b, 0xd1, 0xb3, 0x22, 0xee, 0xed, 0xba, 0x60, 0xad,
+	0x47, 0xcb, 0xea, 0x77, 0x6c, 0x5c, 0xdd, 0x0a, 0x8f, 0x2e, 0xaf, 0xcf,
+	0xd8, 0x49, 0x55, 0x7e, 0xff, 0x75, 0xa5, 0xcc, 0x87, 0x1f, 0x5b, 0x79,
+	0x7b, 0xe5, 0x52, 0x97, 0x53, 0xfe, 0x3a, 0x2d, 0xf7, 0x45, 0x53, 0x76,
+	0x89, 0x6e, 0x9c, 0x79, 0xcb, 0x33, 0x80, 0x5f, 0x65, 0xf7, 0xe3, 0x8d,
+	0x09, 0x2f, 0x02, 0xba, 0x9c, 0xcb, 0x7a, 0x54, 0xaf, 0x36, 0x92, 0xef,
+	0x10, 0x17, 0xcf, 0xcc, 0x14, 0xe3, 0xe2, 0x17, 0x89, 0x55, 0x33, 0xf2,
+	0xec, 0x45, 0x15, 0x4a, 0x39, 0xcf, 0x9f, 0x98, 0x1e, 0x84, 0x97, 0x16,
+	0x39, 0xf1, 0x40, 0x42, 0x9e, 0x95, 0x91, 0x5c, 0x39, 0x92, 0xfd, 0x9b,
+	0x4a, 0x77, 0xed, 0x8e, 0x9c, 0x9c, 0x79, 0x7a, 0x30, 0xdd, 0x10, 0x3d,
+	0x2f, 0xcf, 0x6e, 0xb1, 0x5f, 0x3c, 0x8b, 0x51, 0x4c, 0xa6, 0x8b, 0x18,
+	0x1a, 0x92, 0xff, 0x03, 0x11, 0x0d, 0x2b, 0x2e, 0x46, 0x86, 0x15, 0x2d,
+	0x15, 0x56, 0xf6, 0x54, 0x4a, 0x7e, 0x31, 0x9c, 0x8b, 0x84, 0xca, 0xc8,
+	0x5f, 0xef, 0x34, 0xdd, 0xf8, 0xa8, 0x9b, 0x2b, 0x41, 0x78, 0x89, 0xac,
+	0xcb, 0xb2, 0x26, 0x7b, 0x59, 0x93, 0x97, 0x22, 0xb9, 0xd4, 0x8b, 0x57,
+	0x75, 0x69, 0x8f, 0xc7, 0x8a, 0xf6, 0x30, 0x4f, 0xe2, 0x5e, 0x3b, 0xdf,
+	0x29, 0x63, 0xa9, 0x04, 0xfb, 0x1b, 0x67, 0xed, 0x99, 0xa0, 0x9c, 0xbb,
+	0x07, 0x47, 0x89, 0xaf, 0xb8, 0x3a, 0x12, 0x3a, 0xca, 0x9a, 0x3d, 0xa2,
+	0x17, 0x63, 0x7c, 0xb6, 0xa0, 0xa7, 0xde, 0x3d, 0x8f, 0x9f, 0xf1, 0x7b,
+	0x5d, 0x68, 0x8f, 0x70, 0xc7, 0x5b, 0x39, 0xb7, 0xba, 0xaa, 0xb8, 0xee,
+	0x2b, 0x9f, 0x0d, 0x67, 0xff, 0x81, 0xf7, 0xa5, 0x2c, 0x95, 0xf1, 0x59,
+	0x26, 0x7b, 0x5f, 0x15, 0x4e, 0xbe, 0xc8, 0xfd, 0x66, 0xd0, 0x1e, 0x36,
+	0x5e, 0xa4, 0x3d, 0xf6, 0x5f, 0x3a, 0x67, 0xe7, 0xe2, 0x57, 0x39, 0xaf,
+	0x6f, 0x8e, 0x9d, 0x5a, 0xe7, 0xc7, 0x6f, 0xed, 0xb3, 0xc1, 0xe5, 0xc4,
+	0x04, 0xe9, 0xd3, 0x87, 0x0a, 0x3c, 0xec, 0x88, 0x63, 0x33, 0xb7, 0x8f,
+	0xbd, 0x34, 0x8f, 0x7c, 0x2f, 0xba, 0xe4, 0xf9, 0xc0, 0xc2, 0xf9, 0xa2,
+	0x08, 0xb1, 0xe6, 0x8b, 0xec, 0x0d, 0xa4, 0xbc, 0xe5, 0x8c, 0xaf, 0x46,
+	0xa7, 0xcf, 0xd8, 0x3a, 0x6d, 0xe3, 0xd5, 0x98, 0x17, 0xfb, 0xc7, 0x22,
+	0xe6, 0x3d, 0x02, 0x38, 0x38, 0x66, 0xdb, 0xaf, 0x99, 0xb8, 0x39, 0xc0,
+	0xfa, 0xfe, 0x34, 0xf9, 0x04, 0xf9, 0x46, 0xb8, 0x4c, 0x34, 0x84, 0xae,
+	0x63, 0xad, 0x1f, 0x21, 0x66, 0x3c, 0xbe, 0x00, 0x1c, 0x5d, 0x28, 0x87,
+	0x35, 0x29, 0xf7, 0x8d, 0xcb, 0x31, 0xf6, 0x44, 0x23, 0x75, 0x5f, 0x42,
+	0x39, 0x3e, 0x54, 0x1c, 0x6f, 0x41, 0x39, 0xfb, 0xc8, 0xcd, 0x46, 0x0b,
+	0xfc, 0xc7, 0xab, 0x58, 0x7f, 0x7d, 0x38, 0xd7, 0x4c, 0x1f, 0x3f, 0x51,
+	0x9c, 0x87, 0xc4, 0x31, 0x2f, 0x1e, 0xc9, 0xe8, 0xb0, 0x18, 0xbf, 0x0b,
+	0x96, 0x3c, 0x2f, 0x50, 0xe9, 0x60, 0xe9, 0x99, 0xc2, 0x79, 0x5a, 0xe2,
+	0x5a, 0xe8, 0x84, 0xa8, 0xc2, 0xfb, 0x93, 0xf9, 0xab, 0xcb, 0x60, 0xff,
+	0x78, 0x45, 0xdc, 0xe8, 0xde, 0xc5, 0xf8, 0x5f, 0xb5, 0x32, 0xc4, 0x7e,
+	0xc8, 0xb6, 0x2f, 0xac, 0x95, 0x3d, 0xfa, 0x11, 0xa7, 0x47, 0xaf, 0x26,
+	0x0f, 0xfd, 0x78, 0x4a, 0xef, 0x7b, 0x50, 0xa4, 0xda, 0x03, 0xb0, 0x3f,
+	0x2e, 0x8b, 0xdb, 0x9f, 0xb0, 0x17, 0xe5, 0xfb, 0x61, 0xda, 0xca, 0xb6,
+	0xdf, 0x6c, 0xb6, 0xed, 0x6c, 0x73, 0xa4, 0x5b, 0xf5, 0xa8, 0x38, 0x5e,
+	0x2f, 0xf7, 0x76, 0x15, 0xbc, 0x6f, 0xe8, 0xa1, 0x5d, 0x90, 0x67, 0x34,
+	0x88, 0xf7, 0x4b, 0xb5, 0xa4, 0x3c, 0x2f, 0xd5, 0x61, 0x2d, 0xc1, 0xd3,
+	0xf3, 0x6b, 0xd1, 0x53, 0x02, 0x67, 0x9d, 0xdf, 0x36, 0xf1, 0xfa, 0x0a,
+	0xc8, 0x1a, 0x6e, 0xb4, 0x3c, 0x88, 0x20, 0xe6, 0x73, 0xfb, 0x71, 0xdf,
+	0xa4, 0xec, 0xe5, 0x26, 0x13, 0xbe, 0x49, 0xfb, 0xd7, 0xa1, 0x78, 0x9e,
+	0x18, 0x69, 0xdb, 0xe5, 0x6b, 0x1b, 0x42, 0x2c, 0x4d, 0xe4, 0x1b, 0xa3,
+	0x92, 0x97, 0xf7, 0xbd, 0x8f, 0x1a, 0x9c, 0x98, 0x4d, 0x5e, 0xcd, 0x7e,
+	0xb7, 0xe3, 0x98, 0x50, 0xf1, 0x43, 0xce, 0xf1, 0xa9, 0x9c, 0xe4, 0x2c,
+	0x99, 0xc4, 0x96, 0xc9, 0x65, 0xf8, 0xf1, 0x7c, 0x10, 0x27, 0x2c, 0x9d,
+	0x9c, 0x09, 0xa2, 0x22, 0x6e, 0x57, 0x57, 0x53, 0xd7, 0x0a, 0x8f, 0x07,
+	0xed, 0x31, 0x79, 0xce, 0x50, 0xef, 0xab, 0x14, 0x58, 0x56, 0x06, 0x7d,
+	0xf1, 0x5e, 0xa0, 0xdf, 0x1f, 0x37, 0xce, 0x1c, 0x13, 0x46, 0xf7, 0x7b,
+	0x9e, 0x20, 0x7e, 0x48, 0x2c, 0x7a, 0x26, 0x27, 0xcf, 0xd7, 0x11, 0x6f,
+	0x58, 0x3b, 0xd3, 0xc4, 0x35, 0xa5, 0xae, 0x0a, 0x07, 0x98, 0x3b, 0x2f,
+	0x9a, 0xa5, 0xc4, 0x2b, 0x79, 0xde, 0xae, 0x78, 0xbe, 0xc5, 0xb6, 0x9f,
+	0xd5, 0xdd, 0xb5, 0x08, 0x73, 0x2e, 0x74, 0xc5, 0x1e, 0x7d, 0x90, 0x18,
+	0xdf, 0xd0, 0x19, 0x12, 0x2f, 0xdb, 0xc9, 0xaf, 0x08, 0xce, 0xf3, 0xfb,
+	0x8c, 0x4b, 0x39, 0x57, 0xe6, 0x76, 0xa6, 0x58, 0x5f, 0xaa, 0x91, 0x54,
+	0xb5, 0xce, 0x54, 0x21, 0x1e, 0x2b, 0x88, 0x4f, 0x8f, 0x92, 0x23, 0x94,
+	0x4d, 0xca, 0xba, 0x42, 0x9e, 0x2d, 0xd6, 0x93, 0x17, 0x4b, 0x0e, 0xe1,
+	0xc3, 0x5e, 0x55, 0xc6, 0x86, 0xca, 0xf9, 0x05, 0xbc, 0xf2, 0xfc, 0xdc,
+	0xd3, 0x39, 0x59, 0xd7, 0x25, 0x2e, 0x14, 0xc7, 0x0b, 0xa1, 0xd6, 0x39,
+	0x63, 0x3c, 0x90, 0xf8, 0x78, 0x4c, 0xe5, 0xd8, 0xf6, 0x90, 0x12, 0x0f,
+	0xc2, 0xc7, 0xf8, 0xba, 0xbd, 0x59, 0xef, 0x5b, 0xef, 0xd1, 0xfa, 0x17,
+	0x45, 0xa4, 0xe7, 0xa4, 0xd0, 0x5a, 0x0e, 0x8a, 0xdf, 0x91, 0x13, 0x90,
+	0x7b, 0x14, 0x92, 0x23, 0x3c, 0xe2, 0xcc, 0xe9, 0x31, 0xe7, 0xcc, 0x8e,
+	0x42, 0x6c, 0x6c, 0x4d, 0x57, 0xe1, 0xdc, 0x04, 0x74, 0x66, 0x30, 0x5e,
+	0xa0, 0x1e, 0x3d, 0xaa, 0x91, 0x6c, 0x83, 0xcc, 0x05, 0xad, 0x47, 0xf2,
+	0xa9, 0x0a, 0xe2, 0xf3, 0xec, 0x84, 0xac, 0x37, 0x42, 0x72, 0x95, 0x54,
+	0x75, 0xbc, 0x1f, 0x1f, 0xad, 0x01, 0x5e, 0x1e, 0x73, 0xcf, 0x65, 0x74,
+	0x5b, 0x17, 0x6d, 0x94, 0xb9, 0x67, 0x5e, 0x1e, 0x74, 0xce, 0xb2, 0x48,
+	0xf9, 0x03, 0xce, 0x79, 0xe5, 0x2a, 0x5e, 0x5b, 0x18, 0x8b, 0x0c, 0x92,
+	0x7b, 0xb6, 0xe4, 0xdc, 0xf3, 0xca, 0xe6, 0xc7, 0x8c, 0xfd, 0x63, 0xe4,
+	0xad, 0x07, 0xdc, 0xdc, 0x2d, 0x9c, 0x57, 0xee, 0x47, 0x24, 0xdb, 0x21,
+	0xb6, 0x3a, 0x67, 0xe0, 0x8e, 0x30, 0xdf, 0xda, 0xc4, 0xe6, 0xf9, 0x4d,
+	0x62, 0xcb, 0xfc, 0x36, 0xb1, 0x33, 0x27, 0xd7, 0x53, 0x27, 0x13, 0x7b,
+	0x27, 0x6f, 0x11, 0x5b, 0x67, 0xbb, 0x04, 0xf9, 0xad, 0xea, 0x8b, 0x77,
+	0x8b, 0x6d, 0xf3, 0xee, 0x3e, 0x40, 0x07, 0x7b, 0xc8, 0xad, 0x96, 0x8c,
+	0x87, 0x81, 0xc4, 0x96, 0x31, 0xf9, 0x3f, 0x70, 0xc1, 0xc0, 0xf6, 0x69,
+	0xad, 0x67, 0xa3, 0x90, 0x7b, 0x7f, 0xf5, 0x9c, 0xb7, 0x6d, 0x3f, 0x15,
+	0xd3, 0x89, 0x0b, 0x55, 0xe8, 0x65, 0x0f, 0x32, 0x6c, 0x5e, 0x4b, 0x7f,
+	0x38, 0xeb, 0x91, 0x9c, 0x93, 0x3c, 0x4f, 0x23, 0xe3, 0x15, 0xa9, 0x32,
+	0xea, 0xf0, 0x7f, 0xa8, 0xff, 0x9e, 0xc2, 0xbc, 0xb6, 0xc9, 0xf3, 0x26,
+	0x25, 0x48, 0xc9, 0x39, 0x64, 0x39, 0xdf, 0xc3, 0x63, 0x97, 0xe7, 0x55,
+	0x38, 0x23, 0x6d, 0xee, 0x11, 0xf2, 0xec, 0x95, 0x33, 0xaf, 0x33, 0xe7,
+	0x84, 0x96, 0x1f, 0x86, 0xc4, 0x05, 0x77, 0x5e, 0xd7, 0x17, 0xe6, 0xb5,
+	0x8a, 0xf3, 0xda, 0xec, 0x70, 0xf7, 0x23, 0xec, 0xdd, 0xdb, 0x44, 0xc7,
+	0xbc, 0x5c, 0x7f, 0x95, 0x73, 0x93, 0xf3, 0x98, 0xb4, 0xcb, 0xf5, 0x6d,
+	0x62, 0xbb, 0x73, 0x16, 0x51, 0x9e, 0x07, 0x94, 0xe7, 0x41, 0x8a, 0xf3,
+	0x92, 0x35, 0x7d, 0x49, 0x60, 0xd3, 0xb4, 0x1a, 0xd8, 0x38, 0x6d, 0xdb,
+	0x3f, 0x35, 0xff, 0x93, 0x33, 0x97, 0x13, 0xa6, 0x9c, 0x8b, 0x3c, 0x57,
+	0x54, 0x9c, 0xcf, 0x97, 0x0a, 0xf3, 0x91, 0xbe, 0xba, 0xec, 0xa7, 0xe2,
+	0xff, 0x4e, 0xbe, 0x95, 0x76, 0xcf, 0x1c, 0x15, 0xe7, 0x13, 0x88, 0x17,
+	0xcf, 0x24, 0xf6, 0xe3, 0x65, 0xde, 0xff, 0x20, 0x5d, 0x9c, 0x97, 0x07,
+	0x73, 0xb3, 0xd2, 0xfe, 0xfd, 0xf2, 0x7f, 0x27, 0x89, 0x23, 0x11, 0x73,
+	0xe4, 0xd2, 0x39, 0x73, 0x6d, 0xf0, 0x1a, 0x4f, 0x43, 0xfe, 0x1c, 0xb4,
+	0x9e, 0x45, 0x61, 0x24, 0xd9, 0x7b, 0xe2, 0x44, 0xee, 0x77, 0xfd, 0xd7,
+	0x98, 0x2d, 0x17, 0x9b, 0x32, 0x52, 0xf6, 0x2f, 0x28, 0x5b, 0x9e, 0x39,
+	0x12, 0x78, 0x72, 0x16, 0x98, 0xb5, 0x38, 0x6c, 0x7c, 0x08, 0x8f, 0x9b,
+	0xb6, 0x7d, 0xac, 0x59, 0x1f, 0xdc, 0x05, 0x9c, 0xae, 0x85, 0xc1, 0x38,
+	0x85, 0x59, 0xc5, 0xb9, 0xdf, 0x94, 0x93, 0xe7, 0x8d, 0xba, 0x68, 0x03,
+	0x39, 0x77, 0x19, 0x03, 0x45, 0xdf, 0xcb, 0xb3, 0x91, 0x29, 0xda, 0x47,
+	0xda, 0xa6, 0x78, 0x46, 0x32, 0x44, 0x5f, 0x5f, 0x69, 0x93, 0x49, 0xd7,
+	0xbf, 0xa6, 0x8c, 0x57, 0xa2, 0x0f, 0x63, 0x75, 0x8e, 0x5c, 0x62, 0xc4,
+	0x2c, 0x71, 0x78, 0x9b, 0xcc, 0xa9, 0x83, 0x56, 0x25, 0x63, 0xfe, 0x0c,
+	0xce, 0x64, 0x5f, 0xc4, 0xcb, 0x97, 0xff, 0x8f, 0x90, 0xf1, 0xd2, 0xb5,
+	0x6e, 0x8b, 0x21, 0xb9, 0x43, 0xf8, 0x4b, 0xd7, 0x1a, 0x12, 0x87, 0x7e,
+	0xb9, 0x52, 0x9e, 0x6b, 0x2b, 0x8b, 0x37, 0xff, 0x91, 0xec, 0xcb, 0x4b,
+	0xe3, 0x2f, 0xae, 0x3d, 0xad, 0x4b, 0xdb, 0xc4, 0xd7, 0x1c, 0xd7, 0xe5,
+	0xbc, 0x7a, 0x63, 0xa3, 0xce, 0xff, 0xb5, 0xde, 0xd6, 0xb2, 0xdb, 0xd9,
+	0x77, 0x33, 0x6f, 0x68, 0x75, 0x30, 0xa1, 0x33, 0x71, 0x9d, 0x63, 0x83,
+	0x6d, 0x89, 0x6b, 0x9d, 0xcf, 0x0e, 0xf2, 0x09, 0x67, 0xdd, 0x3f, 0xe1,
+	0xda, 0xa6, 0x97, 0x1c, 0x4b, 0x7e, 0xde, 0x96, 0x70, 0xcf, 0xfb, 0x77,
+	0x27, 0x74, 0xf7, 0x8c, 0x3e, 0x6b, 0x9c, 0xfc, 0xec, 0x49, 0x5c, 0x73,
+	0xc5, 0xff, 0x37, 0x02, 0xff, 0x1f, 0x8d, 0xa6, 0x0f, 0xfa, 0x00, 0x3c,
+	0x00, 0x00, 0x00 };
+
+static const u32 bnx2_TXP_b06FwData[(0x0/4) + 1] = { 0x0 };
+static const u32 bnx2_TXP_b06FwRodata[(0x0/4) + 1] = { 0x0 };
+
+static struct fw_info bnx2_txp_fw_06 = {
+	/* Firmware version: 6.2.3 */
+	.ver_major			= 0x6,
+	.ver_minor			= 0x2,
+	.ver_fix			= 0x3,
+
+	.start_addr			= 0x080000a8,
+
+	.text_addr			= 0x08000000,
+	.text_len			= 0x3bfc,
+	.text_index			= 0x0,
+	.gz_text			= bnx2_TXP_b06FwText,
+	.gz_text_len			= sizeof(bnx2_TXP_b06FwText),
+
+	.data_addr			= 0x00000000,
+	.data_len			= 0x0,
+	.data_index			= 0x0,
+	.data				= bnx2_TXP_b06FwData,
+
+	.sbss_addr			= 0x08003c20,
+	.sbss_len			= 0x68,
+	.sbss_index			= 0x0,
+
+	.bss_addr			= 0x08003c88,
+	.bss_len			= 0x14c,
+	.bss_index			= 0x0,
+
+	.rodata_addr			= 0x00000000,
+	.rodata_len			= 0x0,
+	.rodata_index			= 0x0,
+	.rodata				= bnx2_TXP_b06FwRodata,
+};
+
+/* Initialized Values for the TX Processor. */
+static const struct cpu_reg cpu_reg_txp = {
+	.mode = BNX2_TXP_CPU_MODE,
+	.mode_value_halt = BNX2_TXP_CPU_MODE_SOFT_HALT,
+	.mode_value_sstep = BNX2_TXP_CPU_MODE_STEP_ENA,
+	.state = BNX2_TXP_CPU_STATE,
+	.state_value_clear = 0xffffff,
+	.gpr0 = BNX2_TXP_CPU_REG_FILE,
+	.evmask = BNX2_TXP_CPU_EVENT_MASK,
+	.pc = BNX2_TXP_CPU_PROGRAM_COUNTER,
+	.inst = BNX2_TXP_CPU_INSTRUCTION,
+	.bp = BNX2_TXP_CPU_HW_BREAKPOINT,
+	.spad_base = BNX2_TXP_SCRATCH,
+	.mips_view_base = 0x8000000,
+};
+
diff -r 2e9e6572f41c drivers/net/bnx2/bnx2_fw2.h
--- /dev/null
+++ b/drivers/net/bnx2/bnx2_fw2.h
@@ -0,0 +1,5322 @@
+/* bnx2_fw2.h: Broadcom NX2 network driver.
+ *
+ * Copyright (c) 2004-2010 Broadcom Corporation
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, except as noted below.
+ *
+ * This file contains firmware data derived from proprietary unpublished
+ * source code, Copyright (c) 2004-2010
+ * Broadcom Corporation.
+ *
+ * Permission is hereby granted for the distribution of this firmware data
+ * in hexadecimal or equivalent format, provided this copyright notice is
+ * accompanying it.
+ */
+
+static u8 bnx2_COM_b09FwText[] = {
+	0xc5, 0x7c, 0x7d, 0x70, 0x1b, 0xe7, 0x99, 0xdf, 0xb3, 0x8b, 0x05, 0x09,
+	0x52, 0x14, 0xb5, 0xa2, 0x60, 0x1e, 0xac, 0x30, 0x32, 0x40, 0x2e, 0x3f,
+	0x6c, 0xd1, 0xbe, 0x15, 0x0b, 0x29, 0x74, 0xbd, 0xb6, 0x11, 0x80, 0x92,
+	0xe9, 0x9c, 0xe3, 0x52, 0xb6, 0xc2, 0xba, 0x3d, 0xcd, 0x95, 0x07, 0x52,
+	0xfe, 0xc8, 0xb8, 0x57, 0xe5, 0xe3, 0x26, 0xbe, 0x6b, 0x7a, 0x82, 0x41,
+	0x4a, 0xa7, 0x5c, 0x21, 0x02, 0x96, 0x60, 0x25, 0xed, 0xa4, 0x0d, 0x0c,
+	0x52, 0xb2, 0x73, 0x07, 0x09, 0xfe, 0xea, 0x8d, 0xdb, 0xb9, 0x8c, 0x18,
+	0xca, 0x56, 0x72, 0x1d, 0x4f, 0x27, 0xcd, 0x34, 0xd7, 0xdc, 0x4c, 0xfe,
+	0x50, 0x65, 0xbb, 0xf1, 0x79, 0xda, 0x1b, 0xb7, 0x93, 0x99, 0xb8, 0x37,
+	0xb6, 0xd1, 0xdf, 0xef, 0x7d, 0x77, 0x49, 0x10, 0x92, 0x6c, 0x5f, 0x66,
+	0xae, 0xa5, 0x06, 0xda, 0xdd, 0xf7, 0xf3, 0x79, 0x9f, 0xf7, 0xf9, 0x7e,
+	0x9f, 0xdd, 0x7d, 0x22, 0x9d, 0xe2, 0xff, 0x6d, 0xc6, 0x6f, 0xcf, 0x3f,
+	0xfd, 0x67, 0xb3, 0xbb, 0x6e, 0x1b, 0xbb, 0x0d, 0xb7, 0x59, 0xd3, 0x30,
+	0xdb, 0x58, 0x1e, 0xc2, 0xef, 0x87, 0xf8, 0x8d, 0xf9, 0xf7, 0xd7, 0xfa,
+	0xb3, 0xd9, 0xd7, 0x10, 0x99, 0x79, 0x47, 0x24, 0xdc, 0x52, 0x17, 0xb9,
+	0x4e, 0x9f, 0x8f, 0xfa, 0x33, 0x3f, 0x61, 0x3b, 0xfb, 0x57, 0x18, 0xfb,
+	0x93, 0xfe, 0x85, 0xfc, 0xe1, 0x37, 0xfb, 0x3f, 0x89, 0x98, 0x5e, 0x64,
+	0x3a, 0xed, 0x48, 0x24, 0xe4, 0x1d, 0xf8, 0x87, 0xb3, 0x8e, 0x48, 0xaa,
+	0xb6, 0x33, 0x9e, 0x91, 0x0f, 0x1a, 0xb9, 0xa8, 0x25, 0x2c, 0xff, 0xb4,
+	0xf7, 0xfe, 0x77, 0xbe, 0xf7, 0x99, 0xc4, 0xbb, 0x95, 0x90, 0x44, 0x6c,
+	0x2f, 0x66, 0xd8, 0x43, 0x12, 0xe9, 0x43, 0x9f, 0x6f, 0x0f, 0x4f, 0x9b,
+	0xd2, 0x1d, 0x8c, 0xf5, 0x72, 0xe3, 0x7b, 0xc3, 0x22, 0xcf, 0xd4, 0x2d,
+	0xa9, 0xd6, 0x23, 0xb2, 0x54, 0xef, 0x92, 0xe5, 0xba, 0x2d, 0x67, 0xea,
+	0x51, 0x39, 0x5b, 0x8f, 0xc9, 0xb3, 0xf5, 0x3e, 0x79, 0xae, 0x1e, 0x97,
+	0xef, 0xd6, 0x1d, 0xf9, 0xe3, 0xfa, 0x88, 0xfc, 0x49, 0x7d, 0x54, 0x6a,
+	0x75, 0x57, 0xce, 0xd5, 0x93, 0x72, 0xbe, 0x3e, 0x2e, 0xf5, 0xba, 0x27,
+	0xaf, 0xd4, 0x53, 0xf2, 0xef, 0xeb, 0x13, 0xf2, 0x67, 0xf5, 0x49, 0xb9,
+	0x50, 0x9f, 0xb8, 0x41, 0x8f, 0x8d, 0xfb, 0x22, 0xca, 0x8a, 0xa8, 0x2b,
+	0xa2, 0x4d, 0x11, 0x6d, 0x8b, 0xe8, 0x53, 0x44, 0xdf, 0x22, 0xc6, 0x28,
+	0x62, 0xac, 0x22, 0xc6, 0x2c, 0x62, 0xec, 0x22, 0xe6, 0x28, 0x62, 0xae,
+	0x22, 0xe6, 0x2c, 0x62, 0xee, 0x22, 0x60, 0x28, 0x02, 0x96, 0x22, 0x60,
+	0x2a, 0x02, 0xb6, 0xe2, 0x7d, 0xf2, 0xbd, 0x61, 0x7b, 0xe6, 0x53, 0x9e,
+	0x3b, 0xf5, 0xfb, 0xc5, 0x91, 0xa9, 0x7f, 0xfe, 0x99, 0x88, 0xa4, 0x80,
+	0x8e, 0xdf, 0x07, 0x4c, 0xf9, 0xe2, 0x65, 0xc0, 0x6f, 0xcb, 0xf3, 0x80,
+	0xf5, 0x02, 0x60, 0x7e, 0x01, 0xf0, 0xa7, 0x0b, 0x92, 0xb3, 0x3d, 0x31,
+	0xb6, 0x2e, 0x26, 0x25, 0x65, 0xa3, 0xbc, 0xb8, 0xb0, 0x59, 0xc3, 0x14,
+	0x97, 0xa3, 0xc5, 0xc6, 0x11, 0xcb, 0xd9, 0x19, 0x7f, 0x0a, 0x4f, 0x2f,
+	0xd4, 0x2c, 0x23, 0xb4, 0x18, 0x31, 0xcc, 0xd3, 0xd2, 0x17, 0x92, 0x46,
+	0x23, 0xed, 0x0e, 0xc6, 0xb2, 0x62, 0xc9, 0x52, 0xad, 0xd3, 0x30, 0x4f,
+	0x46, 0x8d, 0xd0, 0xe9, 0x86, 0xa4, 0xdd, 0x46, 0x63, 0xd6, 0x95, 0xa8,
+	0x29, 0x83, 0x76, 0x06, 0xb4, 0x53, 0xad, 0x75, 0xa1, 0xbc, 0xbb, 0xa5,
+	0x4f, 0x17, 0xfa, 0xd8, 0x28, 0xef, 0x69, 0x29, 0xb7, 0x51, 0x1e, 0x33,
+	0xcc, 0xc5, 0x28, 0xfa, 0xf5, 0xe1, 0x1a, 0xc3, 0x35, 0x22, 0xb9, 0x28,
+	0xe1, 0x16, 0xc9, 0x7f, 0x33, 0x1c, 0xb7, 0xbc, 0xc1, 0xd8, 0x84, 0x18,
+	0xd8, 0xaf, 0x3e, 0xb4, 0xbd, 0xa4, 0xe8, 0x3f, 0xff, 0x6c, 0x2c, 0x15,
+	0xf2, 0x76, 0x48, 0xba, 0xcc, 0x39, 0xfb, 0xd0, 0xe7, 0x15, 0xc0, 0x6f,
+	0x88, 0xe5, 0x70, 0x2d, 0x58, 0x23, 0x70, 0xf4, 0x7c, 0x31, 0x61, 0x93,
+	0x96, 0x2f, 0x87, 0xe2, 0xc0, 0x8d, 0xe4, 0xda, 0xbd, 0x57, 0xcc, 0x2b,
+	0x05, 0x31, 0xde, 0x4a, 0x46, 0xe4, 0xb3, 0x96, 0x21, 0x21, 0x87, 0xf4,
+	0x31, 0x03, 0x5c, 0x18, 0x8a, 0x16, 0x0c, 0xdc, 0xf7, 0xd7, 0xd8, 0x3e,
+	0x61, 0xcf, 0x28, 0xda, 0x39, 0x88, 0xba, 0xb8, 0x2c, 0x17, 0x7a, 0x65,
+	0xa9, 0x6c, 0xc9, 0xd9, 0x42, 0xb7, 0x9c, 0x29, 0xb3, 0x6d, 0xce, 0x7c,
+	0xb3, 0xf6, 0x7e, 0x63, 0x56, 0xf5, 0x39, 0x88, 0x3e, 0x62, 0x9b, 0xde,
+	0x82, 0xf9, 0xc6, 0xf2, 0x31, 0xf3, 0xad, 0xe5, 0x44, 0x4c, 0xe4, 0xb8,
+	0xf9, 0xdf, 0x6b, 0x98, 0x6b, 0x6d, 0x2c, 0xe2, 0x5f, 0x72, 0xa6, 0xc7,
+	0x3d, 0x10, 0x23, 0x9d, 0xec, 0xc3, 0x3e, 0xc4, 0xe4, 0x45, 0xb5, 0x17,
+	0x22, 0x99, 0x42, 0x44, 0xf6, 0x96, 0xe5, 0xc3, 0xac, 0xf3, 0x64, 0x28,
+	0x3d, 0x1a, 0xc2, 0x7e, 0xac, 0x3e, 0x19, 0x12, 0xd3, 0x90, 0x4e, 0x4b,
+	0x40, 0x8f, 0x86, 0xe9, 0x84, 0x25, 0x1b, 0x95, 0xdc, 0x56, 0x2f, 0x82,
+	0x31, 0x40, 0xb7, 0xa5, 0x86, 0x4c, 0xb9, 0x7c, 0x16, 0x63, 0x6c, 0x4f,
+	0x54, 0x32, 0xa7, 0xb7, 0x88, 0x39, 0x26, 0x37, 0x68, 0xfc, 0x93, 0xd6,
+	0x27, 0x64, 0xb6, 0x60, 0xc9, 0xb2, 0x9b, 0x93, 0xfe, 0xf3, 0x86, 0x68,
+	0x38, 0x27, 0x64, 0xa0, 0xd6, 0x8e, 0x4d, 0x37, 0xa5, 0xea, 0x62, 0x7e,
+	0xd0, 0xd2, 0x8b, 0x6b, 0x78, 0xfa, 0x4f, 0xc0, 0x29, 0x71, 0x74, 0x2b,
+	0xe6, 0x26, 0xfc, 0x39, 0xb4, 0x09, 0xe3, 0xfe, 0xb0, 0xf4, 0xef, 0xe9,
+	0x93, 0x89, 0xc5, 0x47, 0xba, 0xa4, 0xbb, 0x22, 0x61, 0x87, 0xcf, 0x22,
+	0x13, 0x85, 0x2e, 0xec, 0xcd, 0x80, 0x9d, 0x97, 0x51, 0x23, 0x33, 0x6a,
+	0xc9, 0x8c, 0x6d, 0x4b, 0xbe, 0x4e, 0x7c, 0xee, 0x05, 0xcc, 0x5d, 0xb2,
+	0x00, 0x3e, 0x49, 0x2f, 0xc6, 0x67, 0x42, 0x1e, 0xef, 0xa3, 0x92, 0xad,
+	0x11, 0x97, 0x0f, 0x01, 0x97, 0x37, 0x48, 0x6a, 0x8a, 0xe3, 0x5b, 0x92,
+	0x2d, 0x7c, 0x68, 0x84, 0x9c, 0x46, 0x28, 0xed, 0xda, 0x92, 0x89, 0xea,
+	0x32, 0xf3, 0x36, 0xae, 0x3d, 0x82, 0x6b, 0x0a, 0xe3, 0x24, 0x72, 0xe4,
+	0xe7, 0x54, 0x94, 0x34, 0xc9, 0xe7, 0xff, 0xd3, 0xb0, 0x87, 0xc8, 0x8b,
+	0xa6, 0x98, 0x8e, 0x65, 0x9b, 0xa6, 0x60, 0xfc, 0xe8, 0x63, 0xd9, 0x1a,
+	0xfb, 0xb6, 0xae, 0x87, 0x38, 0x5f, 0xdf, 0x77, 0x0b, 0x78, 0x9a, 0x2f,
+	0x10, 0x8f, 0x21, 0xc9, 0x4e, 0x11, 0x87, 0x1c, 0x47, 0xe3, 0x32, 0x53,
+	0x22, 0x8d, 0x6c, 0x11, 0xd0, 0xef, 0xa7, 0x43, 0xaa, 0x4f, 0x4e, 0xe6,
+	0x6b, 0xb9, 0x98, 0x25, 0xdf, 0x6e, 0xe4, 0x87, 0x13, 0xa0, 0xcf, 0x15,
+	0xdb, 0x92, 0x01, 0x7b, 0x02, 0x3d, 0xe6, 0x0a, 0x2b, 0xc0, 0x1e, 0xf1,
+	0xfb, 0xe6, 0xf4, 0xac, 0x93, 0x20, 0xae, 0x73, 0x21, 0xaf, 0x24, 0x73,
+	0x6a, 0x9f, 0x41, 0xaf, 0x75, 0xae, 0x33, 0x6a, 0xa4, 0x0b, 0x37, 0x62,
+	0x1d, 0x92, 0x5a, 0x70, 0x8f, 0x00, 0x8f, 0x2b, 0xbb, 0xd0, 0xc7, 0x44,
+	0x39, 0x70, 0x3f, 0x18, 0xab, 0x4a, 0x7c, 0x86, 0xf7, 0x19, 0xe0, 0xc4,
+	0xf2, 0x5e, 0x99, 0x5e, 0x28, 0x70, 0x3c, 0xdb, 0x98, 0x2d, 0x90, 0x3e,
+	0xa4, 0x23, 0xec, 0xc4, 0x65, 0x6f, 0x2d, 0x11, 0x3f, 0x26, 0xdc, 0x37,
+	0xc2, 0x38, 0x27, 0x13, 0x35, 0xee, 0x9f, 0x6d, 0x0c, 0xa8, 0xeb, 0x2b,
+	0xd3, 0x8e, 0x9a, 0x4f, 0xf1, 0x2a, 0xc6, 0xe2, 0x7d, 0x14, 0x7d, 0x34,
+	0xad, 0x69, 0x7a, 0xd7, 0xd7, 0xaa, 0x1b, 0x21, 0x1c, 0x58, 0x37, 0xe1,
+	0xea, 0x32, 0xd6, 0xe9, 0xbc, 0xcb, 0xe8, 0x5f, 0x1b, 0x23, 0x22, 0x79,
+	0x85, 0x63, 0xb6, 0x79, 0xbf, 0x89, 0x17, 0xde, 0x07, 0x5d, 0x2f, 0x19,
+	0xa4, 0x8b, 0xaa, 0xcb, 0xba, 0x85, 0xa6, 0xba, 0x05, 0xd4, 0xc5, 0xfd,
+	0xf1, 0x6d, 0xbf, 0x3e, 0xd2, 0x34, 0x7e, 0x64, 0xc3, 0xf8, 0x29, 0x3b,
+	0x18, 0xdf, 0x6a, 0x6a, 0x63, 0x35, 0xb5, 0x61, 0x9d, 0x34, 0xd5, 0x49,
+	0x53, 0x1d, 0x79, 0x47, 0xf1, 0x09, 0xe8, 0x9d, 0x3c, 0x43, 0xde, 0xd1,
+	0x7c, 0x34, 0xb6, 0x27, 0x22, 0x53, 0xa7, 0x41, 0x37, 0x63, 0xed, 0x98,
+	0xc3, 0x94, 0xd0, 0xd8, 0xf5, 0xe8, 0x7a, 0x13, 0x68, 0x34, 0x31, 0x02,
+	0xd2, 0x31, 0x9c, 0xc5, 0x3f, 0x32, 0xb4, 0x9c, 0xcb, 0xa1, 0x1f, 0xe9,
+	0xed, 0x19, 0xd0, 0x35, 0xe9, 0x9b, 0x74, 0xfe, 0x06, 0xd6, 0x6b, 0x90,
+	0xbe, 0x8c, 0x81, 0x45, 0xe0, 0xa5, 0xd8, 0x26, 0x99, 0xab, 0xfa, 0x01,
+	0x6e, 0xd6, 0xd5, 0x89, 0xe3, 0xd6, 0xf9, 0x02, 0x9a, 0xb3, 0x24, 0x3f,
+	0x6a, 0x82, 0x76, 0x49, 0x9b, 0x1f, 0x34, 0xe6, 0x1d, 0x4d, 0xb3, 0x59,
+	0x21, 0xcd, 0xaa, 0xfd, 0x02, 0xdd, 0x72, 0x5d, 0xcd, 0x72, 0x40, 0xad,
+	0x09, 0xb4, 0x1a, 0x31, 0xf2, 0x65, 0x39, 0x9c, 0x71, 0x25, 0x6e, 0x3a,
+	0x9d, 0x92, 0xb5, 0x8d, 0x78, 0x76, 0xe4, 0x01, 0x49, 0x1d, 0xe0, 0x5c,
+	0x92, 0x32, 0x9d, 0x49, 0x94, 0xc9, 0x8c, 0xe9, 0x7c, 0x0e, 0x57, 0x96,
+	0xed, 0x37, 0xa5, 0x93, 0x30, 0x88, 0x91, 0x4f, 0x76, 0x80, 0x9e, 0x63,
+	0x32, 0x05, 0xfe, 0xdc, 0x5f, 0xee, 0xc0, 0x9c, 0x7d, 0x68, 0x93, 0x28,
+	0x89, 0x74, 0x48, 0x76, 0x24, 0x01, 0x78, 0x28, 0x53, 0x3b, 0x51, 0xde,
+	0x03, 0x3e, 0x68, 0xc8, 0xae, 0xb1, 0x4d, 0xb8, 0xdf, 0xc2, 0xf1, 0xf0,
+	0xd7, 0x85, 0xfb, 0x18, 0xe4, 0x8c, 0x92, 0xbb, 0xd8, 0x8f, 0x57, 0xa6,
+	0xa1, 0x23, 0x3a, 0x42, 0xa0, 0xc7, 0xf9, 0x5a, 0xc2, 0x9e, 0x02, 0xbf,
+	0x84, 0x40, 0x8b, 0x59, 0x9f, 0x06, 0xfb, 0x6b, 0x53, 0x98, 0x97, 0xf3,
+	0xff, 0x15, 0xf0, 0x62, 0x0e, 0xd9, 0xe2, 0xe2, 0x99, 0x7d, 0x83, 0x67,
+	0xb6, 0xdf, 0x2e, 0xd9, 0x72, 0x97, 0x7c, 0xb9, 0xa0, 0x64, 0x7d, 0xce,
+	0x34, 0x59, 0x4f, 0xdd, 0xb3, 0x03, 0x72, 0xa0, 0xaf, 0x49, 0xe7, 0x28,
+	0xda, 0x87, 0x5c, 0x8c, 0x48, 0xa6, 0xac, 0xe6, 0x87, 0x7e, 0xd8, 0x21,
+	0x13, 0xe5, 0x38, 0xee, 0x07, 0x63, 0x73, 0x68, 0x30, 0x55, 0xa3, 0x6c,
+	0xb7, 0x64, 0x3f, 0xe8, 0xe2, 0x81, 0x5a, 0x17, 0xf4, 0x38, 0x18, 0xac,
+	0x16, 0xc5, 0x2f, 0x86, 0x1f, 0x65, 0x7f, 0x1f, 0x78, 0x2a, 0x80, 0x29,
+	0x65, 0xe9, 0x71, 0x83, 0xe7, 0xef, 0x74, 0xe9, 0xe7, 0xab, 0xe5, 0xc4,
+	0xba, 0x7e, 0xf8, 0x29, 0xf6, 0x23, 0x2e, 0x2f, 0xd7, 0x6d, 0xec, 0x91,
+	0x83, 0x7d, 0xe9, 0x93, 0x97, 0x36, 0xee, 0xcd, 0xd4, 0x5c, 0xe1, 0x48,
+	0x83, 0xbc, 0x14, 0xf5, 0xc6, 0xa7, 0xcb, 0x43, 0x4e, 0x3c, 0x2f, 0x5d,
+	0xe3, 0x0b, 0x49, 0x94, 0xd7, 0x08, 0xff, 0x67, 0x20, 0xff, 0x9e, 0x8f,
+	0x4a, 0x77, 0x44, 0xf1, 0x76, 0xbb, 0x17, 0x6b, 0xfb, 0x39, 0x64, 0x44,
+	0xce, 0xfc, 0x34, 0xe0, 0x6e, 0x34, 0x16, 0x60, 0x7b, 0xdc, 0x53, 0xfb,
+	0xa0, 0xf1, 0xa4, 0xa5, 0xed, 0x0e, 0xd3, 0xfb, 0x61, 0xbb, 0xa6, 0xf5,
+	0x14, 0x70, 0xc9, 0x67, 0xd7, 0xd4, 0x76, 0x4a, 0xbc, 0x8d, 0xf2, 0xda,
+	0xf2, 0x5e, 0x0e, 0xa1, 0x4f, 0x24, 0xec, 0xbd, 0xdb, 0x76, 0x06, 0xd7,
+	0x36, 0xef, 0xdb, 0xa3, 0x97, 0x54, 0xfb, 0x5c, 0xd0, 0x3e, 0xec, 0xf3,
+	0xe2, 0xf4, 0xb0, 0xda, 0x93, 0xf2, 0xf4, 0x90, 0xba, 0x7e, 0x7b, 0x5a,
+	0xcb, 0x89, 0x0a, 0xe4, 0x04, 0xaf, 0xcb, 0xd3, 0x83, 0xea, 0xfa, 0x9c,
+	0xea, 0x67, 0x78, 0x9e, 0x5f, 0x3f, 0xe1, 0xd7, 0xcf, 0x4c, 0xc7, 0xd5,
+	0x75, 0xce, 0x6f, 0x77, 0xd8, 0x7f, 0xfe, 0xba, 0x3f, 0x6e, 0xc9, 0x1f,
+	0xf7, 0x5b, 0xe8, 0xf7, 0x3b, 0x61, 0x8d, 0xc7, 0x2e, 0xc9, 0xd5, 0xd5,
+	0x9e, 0xc9, 0x83, 0xd0, 0x33, 0xf3, 0x8a, 0x5e, 0xe2, 0xd8, 0xd7, 0x04,
+	0x68, 0xa9, 0x5d, 0xb2, 0x63, 0x89, 0xe3, 0x02, 0xf9, 0x79, 0x72, 0x98,
+	0x36, 0xd5, 0x9b, 0xd3, 0xb4, 0xa9, 0x74, 0xbd, 0x01, 0x5e, 0xb3, 0x62,
+	0x83, 0xa6, 0x03, 0x1b, 0x0c, 0x3c, 0x52, 0x74, 0x20, 0x43, 0xbb, 0x64,
+	0x62, 0xca, 0x90, 0x5d, 0x43, 0xd0, 0xf9, 0xb6, 0x23, 0x25, 0xea, 0xc3,
+	0x45, 0x8e, 0x5d, 0x02, 0x1e, 0x7f, 0x03, 0xfb, 0xda, 0x25, 0xe1, 0xf3,
+	0xdf, 0x37, 0xc9, 0x97, 0xbb, 0x86, 0xba, 0x44, 0xce, 0xf3, 0x6a, 0x4a,
+	0xff, 0x6d, 0xe3, 0xd0, 0x8d, 0x7f, 0xd5, 0x48, 0xc1, 0x8e, 0x7b, 0x60,
+	0x6d, 0x7c, 0x8c, 0x59, 0xe7, 0xfc, 0x7f, 0xd9, 0x80, 0xcc, 0xc1, 0x18,
+	0x06, 0xee, 0x6f, 0x55, 0xb2, 0x21, 0x3b, 0x26, 0xb9, 0x30, 0x68, 0xac,
+	0x5a, 0x48, 0xc4, 0x69, 0xe3, 0x54, 0x61, 0xd7, 0x2c, 0x15, 0x9e, 0x6c,
+	0x4f, 0x8f, 0x52, 0x3e, 0x3d, 0x07, 0xbb, 0x22, 0x62, 0x54, 0xcb, 0x12,
+	0x87, 0x18, 0x3f, 0x9c, 0x76, 0x43, 0xd0, 0x49, 0x94, 0xbd, 0x61, 0xa5,
+	0x6b, 0x27, 0xdc, 0x7f, 0x64, 0xac, 0xd3, 0xe9, 0x26, 0x83, 0x65, 0x19,
+	0x77, 0x87, 0x64, 0xa1, 0xfb, 0x52, 0x07, 0x72, 0x76, 0x48, 0x8e, 0xa1,
+	0xfe, 0x7f, 0x98, 0xda, 0x2e, 0x4f, 0xd8, 0x07, 0xf0, 0x7f, 0xba, 0xd0,
+	0xf1, 0x5e, 0x4a, 0x75, 0xb1, 0x44, 0xc3, 0x62, 0x19, 0x99, 0xc2, 0xba,
+	0xec, 0x37, 0xbd, 0x24, 0x6d, 0xb0, 0x14, 0x74, 0x13, 0xf8, 0x84, 0x72,
+	0x6f, 0xdc, 0x98, 0x53, 0x78, 0x4e, 0x42, 0xb6, 0x12, 0x5e, 0xd0, 0x37,
+	0x34, 0x0f, 0xe1, 0xb6, 0xbd, 0x14, 0xec, 0x22, 0xc2, 0x4d, 0x38, 0xe2,
+	0x62, 0x9e, 0x9f, 0x0f, 0xf9, 0xf0, 0xa4, 0x4c, 0xef, 0x09, 0xc3, 0x3c,
+	0xcf, 0xf1, 0xc6, 0x9b, 0xe4, 0xf3, 0x38, 0xc6, 0x60, 0xdf, 0x6f, 0xfa,
+	0x78, 0xe0, 0x18, 0xb9, 0x96, 0x31, 0x72, 0xb0, 0xeb, 0x64, 0x8b, 0xe9,
+	0x00, 0x5f, 0x07, 0xb8, 0xd6, 0xe3, 0xa8, 0xbf, 0x2c, 0x21, 0x4f, 0xf1,
+	0x2a, 0xf6, 0x65, 0x24, 0x24, 0x9d, 0x39, 0xb6, 0x93, 0x74, 0x12, 0xeb,
+	0x29, 0x4d, 0x81, 0xbe, 0x69, 0xeb, 0xb5, 0x03, 0x37, 0x9c, 0x3a, 0xeb,
+	0xc3, 0x10, 0xe8, 0xe8, 0x2f, 0x75, 0xf8, 0x30, 0x01, 0x16, 0xaf, 0x65,
+	0x6d, 0xaf, 0xf8, 0x6b, 0xf3, 0xa8, 0x53, 0x88, 0x27, 0xc2, 0x54, 0xe2,
+	0xfe, 0xa4, 0x93, 0x83, 0xe0, 0x23, 0x3e, 0xc7, 0xa9, 0xe7, 0xd0, 0x3e,
+	0x4e, 0xdb, 0xa0, 0x01, 0x0e, 0x16, 0xcd, 0x9b, 0x01, 0xde, 0x0d, 0xc9,
+	0xa0, 0xed, 0xbc, 0xcf, 0xaf, 0x13, 0xb5, 0x40, 0x2f, 0x90, 0x37, 0x13,
+	0xc7, 0x73, 0x42, 0xdb, 0x16, 0x02, 0xbd, 0xbb, 0x21, 0xcf, 0xbb, 0xe5,
+	0xc6, 0x7c, 0x31, 0x11, 0x8f, 0x9b, 0x83, 0x92, 0x2d, 0x51, 0xee, 0x0c,
+	0xca, 0xe1, 0x4a, 0x4c, 0x0e, 0x2b, 0x1d, 0x7b, 0x27, 0xda, 0xc0, 0x80,
+	0x33, 0x37, 0x89, 0xf4, 0xd2, 0x56, 0xa4, 0xcc, 0x7d, 0xcf, 0xc8, 0xab,
+	0x39, 0x57, 0x20, 0x43, 0x4d, 0xda, 0x85, 0x90, 0x33, 0xb0, 0x0d, 0x2a,
+	0xb4, 0xeb, 0x50, 0x57, 0x6b, 0xb6, 0x29, 0x03, 0x79, 0xf1, 0xf6, 0x9a,
+	0x4d, 0x77, 0xa1, 0x9e, 0x83, 0xec, 0x42, 0xfb, 0x72, 0x04, 0xb6, 0x91,
+	0x98, 0xb3, 0xb0, 0x9d, 0x94, 0xbe, 0x91, 0x2e, 0x5b, 0xe3, 0xe4, 0x89,
+	0x10, 0xe9, 0x37, 0xec, 0x48, 0xc3, 0xf4, 0x60, 0x83, 0xc1, 0x48, 0xc5,
+	0x9a, 0x2d, 0xda, 0x1f, 0xd9, 0x28, 0xcb, 0xcb, 0x8d, 0x3c, 0xc6, 0x4d,
+	0x97, 0x78, 0x8f, 0xf1, 0x20, 0x97, 0x2a, 0x6a, 0x9d, 0x31, 0xcc, 0xf3,
+	0x2d, 0xd4, 0xb1, 0x7c, 0xbb, 0xa4, 0x2a, 0x9c, 0x2f, 0x85, 0xb9, 0xd2,
+	0x21, 0xd2, 0xda, 0x44, 0xa1, 0xdc, 0x38, 0x5a, 0xbc, 0xa6, 0x1e, 0x91,
+	0xaa, 0xa2, 0x5b, 0xc8, 0xee, 0x71, 0x57, 0xf2, 0xe3, 0x3b, 0x63, 0x21,
+	0xd9, 0x09, 0x2e, 0x70, 0x60, 0xcf, 0x84, 0x00, 0xdb, 0x14, 0x64, 0xfd,
+	0x73, 0xd0, 0xfb, 0x94, 0x87, 0x61, 0xb4, 0xc5, 0x3e, 0xb8, 0xcb, 0xa0,
+	0x37, 0xa5, 0x63, 0xfc, 0x39, 0x08, 0x4f, 0xa3, 0x91, 0xa1, 0xed, 0x39,
+	0xfa, 0x6f, 0x95, 0x8f, 0xf0, 0x62, 0x91, 0xb4, 0x4e, 0x19, 0x55, 0xfb,
+	0x82, 0x6f, 0xff, 0x60, 0x9f, 0xc1, 0x3f, 0x12, 0xec, 0x51, 0xca, 0xd8,
+	0x9f, 0x1c, 0x53, 0x74, 0xe1, 0x2c, 0x96, 0x1b, 0x27, 0xe1, 0x9b, 0xf4,
+	0x2f, 0x76, 0xc9, 0xd4, 0x22, 0xf4, 0x5f, 0x2f, 0xf5, 0x2a, 0x64, 0xff,
+	0xf9, 0x3b, 0xfd, 0x7a, 0xd6, 0xb5, 0xc9, 0x54, 0xb4, 0x55, 0x26, 0x3f,
+	0xb1, 0x45, 0xeb, 0x6c, 0xb4, 0x5d, 0xbc, 0xd1, 0xf2, 0x7d, 0x5d, 0xec,
+	0x51, 0x0a, 0x7b, 0x63, 0x2b, 0x3b, 0x3c, 0x5d, 0xa0, 0xbf, 0xd1, 0xe7,
+	0xd3, 0x21, 0xc7, 0x85, 0x0d, 0xb2, 0x3c, 0x6e, 0xe6, 0x0b, 0x5b, 0x60,
+	0xd7, 0x93, 0x86, 0xee, 0x16, 0xd0, 0xd7, 0xbb, 0x93, 0x49, 0x99, 0x69,
+	0xf7, 0x56, 0x1a, 0x6d, 0xde, 0x9f, 0xed, 0xbc, 0x52, 0x70, 0x62, 0xfb,
+	0xc4, 0xb1, 0x27, 0xc5, 0xdc, 0x66, 0x4a, 0x1e, 0xb6, 0xde, 0x43, 0xd4,
+	0x7b, 0x80, 0x99, 0xfd, 0x7e, 0x49, 0x7a, 0x43, 0xbf, 0x94, 0x91, 0x4d,
+	0x8a, 0xda, 0x43, 0x75, 0x55, 0x76, 0xfd, 0xb8, 0x99, 0xad, 0xdd, 0x61,
+	0x69, 0x3d, 0x82, 0x79, 0xca, 0x01, 0x4c, 0x71, 0xa5, 0x3b, 0x61, 0x3b,
+	0x29, 0xfe, 0x0a, 0x79, 0x3d, 0xa8, 0x4b, 0x19, 0xb3, 0xa0, 0x83, 0x59,
+	0xa5, 0xef, 0x94, 0xcd, 0xee, 0xc3, 0x87, 0xba, 0x65, 0xd3, 0x1f, 0xa3,
+	0xa7, 0x69, 0x8c, 0xab, 0xf1, 0x35, 0xb0, 0xd8, 0x23, 0xe9, 0xd3, 0x8d,
+	0xc6, 0x14, 0xd4, 0x69, 0xa8, 0x57, 0xf7, 0x4d, 0x9f, 0xdd, 0x88, 0x33,
+	0xb3, 0xb7, 0x15, 0x67, 0x5f, 0x0f, 0x69, 0x9c, 0xb1, 0xef, 0x3a, 0xce,
+	0x60, 0x1f, 0xb7, 0xc0, 0x14, 0x51, 0xf4, 0x46, 0xbb, 0x60, 0x63, 0x7f,
+	0xb4, 0x5b, 0x9e, 0x8d, 0xea, 0x31, 0xd8, 0x87, 0xb6, 0x02, 0xdb, 0xec,
+	0x6e, 0x1a, 0xab, 0xb7, 0x65, 0xac, 0xcd, 0xd7, 0x19, 0x0b, 0xed, 0x96,
+	0xa3, 0x9b, 0xf4, 0x58, 0x4f, 0xc0, 0x3f, 0xa3, 0xbe, 0xe3, 0xfe, 0x04,
+	0x38, 0xe4, 0x38, 0xf4, 0x15, 0x38, 0x06, 0x65, 0x89, 0xa2, 0x39, 0xc8,
+	0x8c, 0xc3, 0x4d, 0xf2, 0x0b, 0x7e, 0x46, 0xed, 0x7a, 0xb6, 0x15, 0xf5,
+	0x34, 0x69, 0x9d, 0xf8, 0x22, 0xbd, 0xc7, 0x7d, 0x5d, 0xad, 0xed, 0x27,
+	0xda, 0x11, 0xfb, 0x93, 0x62, 0x4c, 0x15, 0x40, 0x9b, 0x27, 0x3b, 0x64,
+	0xe0, 0x24, 0xf9, 0xe0, 0x26, 0xc0, 0xf9, 0x27, 0xd8, 0x6f, 0xc8, 0x96,
+	0x11, 0xda, 0xe6, 0xe3, 0xa2, 0x6c, 0xab, 0x91, 0xcd, 0xb8, 0xa7, 0x0d,
+	0x04, 0xbc, 0x8c, 0xdc, 0x86, 0x7b, 0xda, 0x1e, 0x96, 0x31, 0x63, 0x41,
+	0xfe, 0x8e, 0xdc, 0xe2, 0xdb, 0x4b, 0xc0, 0xb7, 0x33, 0xa4, 0xfa, 0x5e,
+	0x28, 0xfe, 0x93, 0x30, 0xd7, 0xf0, 0x52, 0x71, 0x06, 0xcf, 0x9b, 0xd0,
+	0xe6, 0x6f, 0xd0, 0x86, 0xe5, 0xdd, 0x68, 0xf3, 0x04, 0xca, 0xd8, 0x3e,
+	0x68, 0xf3, 0x63, 0x3c, 0xdf, 0x8e, 0x36, 0x9d, 0x18, 0x17, 0x72, 0xd4,
+	0xd9, 0x83, 0xdf, 0x5b, 0x28, 0xfb, 0x0c, 0xca, 0x2e, 0xa2, 0x6c, 0x37,
+	0x9e, 0xff, 0xb2, 0x65, 0xdc, 0x5b, 0xf1, 0xfc, 0x24, 0xea, 0xdb, 0x50,
+	0xff, 0x43, 0xd4, 0xdf, 0x8e, 0xdf, 0x9f, 0xb7, 0xb4, 0xa9, 0xb6, 0x3c,
+	0x07, 0x36, 0xd5, 0x7f, 0x45, 0x9f, 0xf8, 0x06, 0x9b, 0x2a, 0x04, 0x5c,
+	0xcc, 0x82, 0x8e, 0xb3, 0x05, 0xfa, 0xf4, 0x11, 0x79, 0x04, 0xb6, 0xd8,
+	0xc3, 0x65, 0xa1, 0xee, 0x83, 0x2f, 0xa3, 0xec, 0xac, 0x64, 0x1b, 0xf4,
+	0xd3, 0x72, 0x6d, 0x87, 0x4c, 0x96, 0x61, 0xfb, 0x15, 0x04, 0xd2, 0x69,
+	0x70, 0xfc, 0x6d, 0xe5, 0xc3, 0xc3, 0x76, 0x2c, 0xd0, 0xe6, 0xea, 0xc2,
+	0x7d, 0x27, 0xe5, 0xa8, 0xbb, 0x0a, 0x5f, 0xfd, 0x2c, 0x6c, 0xae, 0x0a,
+	0xe4, 0x61, 0x05, 0xf5, 0xcf, 0xd6, 0x3e, 0x1d, 0xe6, 0x3e, 0x5f, 0x58,
+	0x83, 0xe1, 0x4f, 0x5b, 0x60, 0x60, 0x79, 0x44, 0x9c, 0xd3, 0x5d, 0x32,
+	0x78, 0x7a, 0x07, 0xe4, 0xa3, 0xd9, 0x4f, 0xc3, 0x6c, 0xe8, 0x34, 0xed,
+	0x3a, 0x19, 0xb2, 0x84, 0xf2, 0x5c, 0x46, 0xc3, 0xb0, 0xc5, 0x43, 0xde,
+	0xe0, 0xc8, 0x59, 0xfd, 0x0c, 0x7b, 0x0e, 0x3a, 0x13, 0x76, 0x5e, 0xca,
+	0xb7, 0xf3, 0xf6, 0xae, 0xd9, 0x79, 0xb0, 0xd1, 0x6b, 0x7d, 0x61, 0xca,
+	0x52, 0xc2, 0xd5, 0x7f, 0x3a, 0xe6, 0xeb, 0x1e, 0xe8, 0xe9, 0x93, 0x36,
+	0x64, 0x58, 0xd4, 0x7f, 0x26, 0x4f, 0x41, 0xd7, 0x99, 0x2c, 0xe7, 0x15,
+	0x75, 0x49, 0xf2, 0x10, 0x9e, 0xab, 0xa4, 0x8b, 0xb8, 0xaf, 0xcb, 0xbe,
+	0x41, 0xfb, 0x1e, 0xf5, 0x84, 0x99, 0xb8, 0x6c, 0xa6, 0xb7, 0xdf, 0xb5,
+	0xa5, 0x73, 0x04, 0xf4, 0x46, 0x5f, 0xf1, 0xb7, 0xfc, 0x75, 0x72, 0x8d,
+	0xff, 0xa2, 0x65, 0x8d, 0xe4, 0xc9, 0xb8, 0x2c, 0xa0, 0x6e, 0xe0, 0xb4,
+	0x48, 0xbe, 0x46, 0x5d, 0x3a, 0x0a, 0x7f, 0x3e, 0xb0, 0x63, 0x1b, 0x8d,
+	0x33, 0xb0, 0x15, 0xf6, 0x95, 0xbb, 0xa1, 0xab, 0x07, 0x63, 0x87, 0x84,
+	0x78, 0x84, 0xcd, 0xc4, 0x18, 0x07, 0xd6, 0x97, 0xc3, 0xfa, 0x72, 0x58,
+	0x5f, 0x0e, 0xeb, 0xcb, 0x61, 0x7d, 0xc7, 0xd6, 0xd6, 0x17, 0xac, 0xe1,
+	0x5b, 0x8d, 0x53, 0x45, 0x5e, 0x09, 0x7f, 0x97, 0xcc, 0x9c, 0xe5, 0x3d,
+	0xe4, 0x7f, 0x37, 0x75, 0x42, 0x80, 0xf7, 0x87, 0x5a, 0x60, 0x22, 0x6e,
+	0xe2, 0xb4, 0xcb, 0xa2, 0x8c, 0xca, 0x1d, 0xa6, 0x2d, 0x80, 0xf9, 0x66,
+	0x6a, 0xe3, 0xf0, 0x71, 0x74, 0x9f, 0xb9, 0x9a, 0x27, 0xfb, 0x16, 0x77,
+	0x00, 0xce, 0x9b, 0x52, 0xd4, 0x61, 0x0f, 0xd7, 0x06, 0x47, 0xaa, 0xf4,
+	0xcb, 0x17, 0x39, 0x37, 0x7d, 0xf6, 0x18, 0xda, 0xf7, 0xc9, 0xa1, 0xda,
+	0xb5, 0x70, 0x03, 0x7b, 0x5b, 0xe1, 0x86, 0x32, 0xf0, 0xef, 0x4b, 0xde,
+	0x66, 0xfd, 0x6f, 0x6d, 0xd1, 0x73, 0xef, 0xf6, 0x61, 0xb9, 0xb6, 0x5e,
+	0x9d, 0xda, 0xa0, 0x57, 0x03, 0xbc, 0x5e, 0x6f, 0x0f, 0x9e, 0xed, 0xd6,
+	0xf3, 0x90, 0x7e, 0xae, 0xd7, 0xe6, 0x75, 0xbf, 0x0d, 0xeb, 0x5b, 0xeb,
+	0x7e, 0xd9, 0x1d, 0xec, 0xe1, 0xe0, 0xc9, 0x6b, 0xd5, 0x4f, 0x6e, 0x59,
+	0xef, 0x7b, 0xad, 0xb1, 0x6f, 0xda, 0x12, 0xac, 0xf3, 0xea, 0x3a, 0xca,
+	0xa3, 0x11, 0x15, 0x5f, 0x08, 0x7b, 0x4f, 0x98, 0x55, 0xb5, 0xce, 0x94,
+	0x59, 0xf5, 0xd7, 0x39, 0xb1, 0xb6, 0x4e, 0xb6, 0x43, 0x3d, 0xf7, 0x77,
+	0x89, 0xf7, 0x37, 0xe2, 0x4a, 0xde, 0x7c, 0xc2, 0xd4, 0x76, 0x4e, 0x1f,
+	0xf6, 0x23, 0x05, 0x1d, 0x43, 0x1f, 0x71, 0xc2, 0xcc, 0x36, 0xf5, 0x81,
+	0xaf, 0xe5, 0xfb, 0xf7, 0xd6, 0x81, 0x74, 0xc1, 0x95, 0xf9, 0x52, 0x18,
+	0x6d, 0x12, 0xa9, 0x9c, 0xdc, 0x2d, 0xb3, 0x6e, 0x62, 0x92, 0x74, 0x9f,
+	0x8d, 0x26, 0xa6, 0x44, 0xee, 0x93, 0x7c, 0xe9, 0x7e, 0x99, 0x2f, 0x37,
+	0xe4, 0x5e, 0xb7, 0xd1, 0xf8, 0xa2, 0x0b, 0x3b, 0xf9, 0x1c, 0x5c, 0x9b,
+	0x73, 0x00, 0xe4, 0x5c, 0x54, 0xcc, 0xa7, 0xfb, 0x24, 0x7c, 0x22, 0x26,
+	0xd6, 0x09, 0xca, 0xdc, 0x01, 0xfb, 0x5e, 0x91, 0xad, 0xa6, 0x5c, 0xfc,
+	0x8c, 0x29, 0x89, 0xf1, 0x94, 0x0c, 0xc4, 0x8f, 0xc1, 0x36, 0xa8, 0xe2,
+	0x9a, 0x97, 0x81, 0x91, 0x67, 0xe1, 0x23, 0x85, 0xcf, 0xa1, 0x2d, 0xfa,
+	0x75, 0x9c, 0x89, 0xe3, 0xd7, 0x2b, 0x9d, 0x67, 0x08, 0x43, 0xbf, 0x7f,
+	0xe5, 0x1e, 0x07, 0x32, 0x38, 0x92, 0xeb, 0xf1, 0xe8, 0x33, 0x51, 0xfe,
+	0x52, 0x16, 0x3b, 0x6b, 0xbe, 0xf9, 0xfe, 0x3d, 0x84, 0x9d, 0x70, 0x83,
+	0x16, 0x4f, 0xd2, 0x67, 0xfa, 0xa5, 0x94, 0x4f, 0xd2, 0x6e, 0xa6, 0xce,
+	0x18, 0xa3, 0x5f, 0xfa, 0xad, 0x9c, 0x8a, 0xe5, 0xec, 0xc6, 0x1a, 0x72,
+	0x32, 0xb5, 0xe7, 0xce, 0xa8, 0xa6, 0x9f, 0xfb, 0xc4, 0x3c, 0x99, 0x6b,
+	0x00, 0x87, 0xa0, 0x9f, 0x23, 0xe0, 0xd1, 0x15, 0xc0, 0x9a, 0x82, 0x6f,
+	0x94, 0xb0, 0xb3, 0x70, 0x50, 0x33, 0x52, 0x56, 0xbc, 0xb3, 0xf7, 0xe4,
+	0x7d, 0x62, 0x9d, 0x64, 0x7d, 0x1b, 0x70, 0xd9, 0x2e, 0x47, 0xa3, 0x89,
+	0x5c, 0x06, 0xbc, 0x66, 0x3a, 0x5b, 0xa5, 0xbf, 0xca, 0x6b, 0x8f, 0xf4,
+	0x9f, 0xfd, 0x31, 0xe8, 0x8b, 0xf7, 0xd8, 0xde, 0xd3, 0x2c, 0xef, 0xc7,
+	0x95, 0xe5, 0x8e, 0x98, 0x8b, 0x11, 0x8c, 0x1f, 0x95, 0x7e, 0xd8, 0xb7,
+	0x47, 0x93, 0xf7, 0xc1, 0x06, 0x12, 0x63, 0x1e, 0xf6, 0x45, 0xb6, 0xe2,
+	0x49, 0xb5, 0x00, 0x59, 0x58, 0x7b, 0x54, 0xf2, 0x85, 0x5f, 0xe0, 0x3a,
+	0x87, 0xeb, 0xbb, 0xb8, 0x3e, 0x8e, 0xeb, 0x7b, 0xb8, 0x12, 0xfe, 0x47,
+	0xa5, 0x5a, 0xf9, 0x6b, 0x8c, 0xcd, 0x31, 0xa6, 0xa3, 0x41, 0x3c, 0x21,
+	0xbd, 0xe7, 0x51, 0xd8, 0x68, 0x41, 0xf9, 0xa3, 0x10, 0xb4, 0x8f, 0xe1,
+	0x77, 0x73, 0x1b, 0x9f, 0x4d, 0x2f, 0x27, 0xf3, 0xc9, 0x71, 0xca, 0x58,
+	0xe3, 0x68, 0xf2, 0x71, 0x7f, 0x9c, 0xc7, 0x30, 0xdf, 0x4f, 0x30, 0x77,
+	0x04, 0x7b, 0xdb, 0x90, 0xfd, 0xee, 0x11, 0xf9, 0xb2, 0x7b, 0xa3, 0x8c,
+	0xf5, 0xac, 0x6c, 0xdd, 0xba, 0xb6, 0x66, 0xe2, 0x82, 0xeb, 0x26, 0x3e,
+	0xb8, 0xf6, 0x60, 0xcd, 0x5c, 0x2f, 0x7c, 0xf6, 0x45, 0xea, 0x30, 0xd2,
+	0xef, 0x1f, 0xf8, 0xbe, 0x99, 0x21, 0xfd, 0x43, 0x1c, 0xcb, 0x93, 0xd0,
+	0xc9, 0x21, 0x3b, 0x69, 0xd2, 0xee, 0x1b, 0xc0, 0xef, 0x08, 0x68, 0xc6,
+	0x39, 0xde, 0x6f, 0xbe, 0x07, 0xf8, 0x50, 0x57, 0x8d, 0xe4, 0x22, 0xd0,
+	0x0f, 0xd6, 0xee, 0xcb, 0x58, 0x57, 0x4e, 0xda, 0x77, 0x7b, 0x72, 0xa5,
+	0xc6, 0x7b, 0x11, 0xf3, 0xdc, 0x7d, 0xf2, 0x56, 0xe9, 0x27, 0x72, 0xac,
+	0x74, 0x9f, 0xbc, 0x81, 0xeb, 0x42, 0x29, 0x07, 0x1c, 0x3a, 0x90, 0x0f,
+	0x1c, 0xa3, 0x21, 0x0b, 0x2e, 0x65, 0xf5, 0x2d, 0xf0, 0xcb, 0x4d, 0xd8,
+	0x92, 0x0d, 0x39, 0xe3, 0xe6, 0xe4, 0xcc, 0x38, 0xfa, 0x54, 0x3a, 0x24,
+	0xfc, 0x0c, 0xd7, 0xda, 0x2d, 0x99, 0x52, 0x4e, 0x26, 0x92, 0xe4, 0x8d,
+	0x4e, 0xf0, 0x41, 0x4c, 0xe6, 0x0b, 0x8d, 0x23, 0x26, 0x7d, 0x8b, 0x24,
+	0x6d, 0x50, 0x3c, 0xd7, 0xde, 0x33, 0xaa, 0x6b, 0x76, 0xfe, 0x8a, 0xf1,
+	0x52, 0x0d, 0xb4, 0x53, 0x04, 0x2d, 0x5d, 0xc5, 0x67, 0xa4, 0x91, 0x57,
+	0x8d, 0x6a, 0x45, 0xf1, 0x9a, 0xcf, 0x1b, 0xe8, 0x5b, 0x13, 0x6d, 0xb7,
+	0x82, 0xc4, 0xab, 0x15, 0xda, 0xa4, 0xbf, 0xa0, 0x5d, 0x02, 0xdc, 0x98,
+	0x8c, 0x27, 0x02, 0x22, 0x91, 0x4a, 0x85, 0x6d, 0xfa, 0x20, 0x9b, 0x03,
+	0x1a, 0x4a, 0xc9, 0xbc, 0x93, 0x00, 0x9d, 0xab, 0xf5, 0xe0, 0xca, 0xf5,
+	0x74, 0x02, 0x5e, 0xc6, 0xf9, 0x68, 0x3b, 0x38, 0xe0, 0x5b, 0x4d, 0xe3,
+	0x17, 0x6b, 0x6d, 0x92, 0x2f, 0x87, 0xb1, 0x2f, 0x5d, 0x72, 0xb4, 0x60,
+	0xcb, 0x31, 0xd0, 0xc4, 0x1f, 0x16, 0xfa, 0xe4, 0x38, 0x74, 0x29, 0x63,
+	0x76, 0x86, 0x77, 0x69, 0xba, 0x7f, 0x99, 0xd7, 0xd7, 0xa6, 0x07, 0x2a,
+	0xbc, 0xbe, 0xee, 0xfb, 0xcf, 0x3f, 0xf2, 0xfd, 0xe5, 0x9f, 0xfa, 0xfe,
+	0xf3, 0xcf, 0xa6, 0x47, 0xd4, 0xf5, 0x72, 0x53, 0xdc, 0x2e, 0xe2, 0xc7,
+	0x3b, 0x92, 0xb4, 0x35, 0xa9, 0xa7, 0xad, 0x43, 0xa0, 0x8d, 0xb9, 0x1a,
+	0x7d, 0xb8, 0x11, 0x39, 0x5a, 0xf7, 0x40, 0x1f, 0xe0, 0x75, 0xcf, 0x65,
+	0xbc, 0xc5, 0xff, 0x0b, 0xfa, 0xc2, 0x1e, 0xf1, 0xd4, 0x1e, 0xf8, 0x7e,
+	0x93, 0x4b, 0x3b, 0xb5, 0xf9, 0x8f, 0xe3, 0x81, 0xce, 0xa8, 0x0f, 0x3f,
+	0xa0, 0xff, 0x67, 0x65, 0x93, 0x5a, 0x56, 0xe5, 0xe1, 0x17, 0xac, 0x96,
+	0x25, 0x12, 0xf1, 0xfe, 0xa3, 0x44, 0x9e, 0x6e, 0x34, 0x7e, 0x0e, 0x19,
+	0x92, 0x83, 0xbf, 0x6a, 0x1a, 0x28, 0x5f, 0x66, 0x1d, 0xe5, 0xc3, 0x4e,
+	0xfb, 0x0a, 0x68, 0x28, 0x05, 0x27, 0xf6, 0x07, 0x28, 0x83, 0x4f, 0x0c,
+	0xdc, 0xbe, 0x0e, 0xdc, 0xfa, 0xb8, 0x56, 0x65, 0x81, 0xed, 0xc6, 0x75,
+	0xec, 0xb4, 0xdb, 0xd1, 0xbf, 0xb2, 0xcc, 0x3e, 0x89, 0x71, 0x74, 0x45,
+	0x3f, 0xbd, 0xbe, 0x7d, 0xc9, 0x11, 0xb9, 0x58, 0x50, 0x63, 0x80, 0x76,
+	0x3f, 0x44, 0x1f, 0xc6, 0x4f, 0x41, 0xd3, 0xe2, 0x41, 0x4f, 0xe2, 0x57,
+	0x18, 0x50, 0x67, 0x09, 0x33, 0x31, 0x6d, 0x2b, 0xac, 0x16, 0xfe, 0x43,
+	0x1b, 0x75, 0x5f, 0xda, 0xe1, 0xfd, 0x38, 0xda, 0xc0, 0x4f, 0xf1, 0xa8,
+	0xbb, 0xb9, 0xa6, 0x66, 0x5c, 0xe8, 0x3f, 0xda, 0x35, 0xfe, 0x1a, 0xd5,
+	0x9f, 0x9e, 0x87, 0xbe, 0x8c, 0x9e, 0x67, 0x02, 0xca, 0x39, 0x83, 0xf9,
+	0x07, 0xce, 0x59, 0x16, 0x63, 0x03, 0xfd, 0xe7, 0xc0, 0x26, 0x8a, 0x7e,
+	0xe0, 0x13, 0x29, 0xff, 0xb1, 0xd9, 0x67, 0xa2, 0x0f, 0x45, 0x1c, 0x24,
+	0x72, 0x2b, 0x40, 0x76, 0x8f, 0x77, 0x49, 0x1e, 0x38, 0xad, 0xd7, 0x6c,
+	0x9e, 0x85, 0x97, 0x0b, 0xdd, 0x7e, 0xa5, 0x9c, 0x70, 0x2f, 0x43, 0xe6,
+	0x66, 0xa2, 0x2e, 0x68, 0x13, 0x86, 0x61, 0x37, 0xe4, 0xa7, 0xf9, 0xbf,
+	0xda, 0xb4, 0x8d, 0x0c, 0x9d, 0xce, 0xf8, 0x43, 0x21, 0x85, 0x3e, 0xed,
+	0xf2, 0xdb, 0x16, 0xee, 0x6b, 0x7c, 0x86, 0x2d, 0x63, 0x69, 0xf8, 0xf2,
+	0x3e, 0x0e, 0xf3, 0x58, 0x87, 0x79, 0x9a, 0x38, 0x34, 0xe4, 0x01, 0x48,
+	0x6f, 0xc1, 0xf8, 0xfd, 0xfe, 0x5c, 0xfd, 0x67, 0x03, 0xda, 0x00, 0xdc,
+	0xa7, 0x3d, 0x65, 0x3f, 0x6b, 0x1b, 0x99, 0xf2, 0x82, 0xf5, 0xd7, 0xb3,
+	0x8b, 0xb9, 0x1e, 0xf6, 0xa5, 0x1f, 0xac, 0x69, 0x6b, 0xd2, 0xa7, 0xad,
+	0xc7, 0x40, 0x5b, 0x8f, 0x2a, 0xda, 0x6a, 0xc8, 0xcf, 0xdd, 0x11, 0xf9,
+	0xc6, 0x35, 0xe9, 0xab, 0xf5, 0xaf, 0x0b, 0xf0, 0xf2, 0xd7, 0x2b, 0xf3,
+	0xdf, 0xc4, 0xbc, 0xd0, 0x27, 0xf9, 0x42, 0x22, 0x35, 0x43, 0x7b, 0x07,
+	0xfa, 0x21, 0x0f, 0xbf, 0xaf, 0xff, 0x5c, 0x9f, 0x6a, 0xd3, 0x0f, 0x5d,
+	0x51, 0x05, 0xbd, 0x11, 0xbf, 0xf9, 0x02, 0x64, 0xea, 0xb9, 0x30, 0xf4,
+	0x11, 0x79, 0x51, 0x7a, 0x4c, 0xf0, 0x3a, 0xdb, 0x57, 0xc1, 0x3b, 0xfd,
+	0xe7, 0x60, 0x4b, 0x62, 0xcf, 0x38, 0x56, 0x15, 0xf6, 0x27, 0xfb, 0x57,
+	0x41, 0xef, 0xec, 0x57, 0x2d, 0x8c, 0xe2, 0x0a, 0x59, 0x9d, 0x74, 0x65,
+	0xe8, 0x5c, 0x52, 0xe2, 0xe7, 0x0c, 0xc6, 0x28, 0x1b, 0x11, 0xc0, 0x3e,
+	0x72, 0x6e, 0xab, 0x5c, 0x56, 0x71, 0xfb, 0x88, 0x8a, 0xe5, 0x2f, 0x24,
+	0xa7, 0xc0, 0x9b, 0xc4, 0x9f, 0x87, 0x3e, 0x13, 0xd0, 0x7b, 0x13, 0x72,
+	0xb4, 0x4c, 0xfc, 0xd0, 0x2f, 0x5c, 0x85, 0xaf, 0x9b, 0x80, 0x6c, 0xc2,
+	0xbf, 0x52, 0x3b, 0x64, 0x93, 0x05, 0xdd, 0x76, 0xb0, 0x5d, 0x3a, 0x07,
+	0x49, 0x0f, 0xc0, 0x8b, 0x87, 0xb1, 0x27, 0x60, 0x8b, 0x4e, 0xc8, 0x44,
+	0x79, 0xbd, 0x7d, 0x56, 0xda, 0xc1, 0x53, 0x73, 0x72, 0xa8, 0xa4, 0xe2,
+	0xbf, 0x76, 0x5e, 0x86, 0xe9, 0x2f, 0xdb, 0x7b, 0x31, 0x0e, 0x74, 0x72,
+	0xd3, 0x1f, 0xf9, 0x2f, 0xf5, 0x11, 0x34, 0x19, 0xf0, 0x5d, 0x24, 0xd7,
+	0xe6, 0x4d, 0x19, 0xab, 0x49, 0xb1, 0x66, 0x93, 0x9f, 0x33, 0x7e, 0x90,
+	0x4c, 0x1a, 0xaf, 0x26, 0x53, 0xc6, 0x6b, 0xc9, 0x09, 0xe3, 0x12, 0xf4,
+	0x4c, 0xb5, 0xfe, 0x63, 0xd0, 0xcf, 0x88, 0xcc, 0xf3, 0x4c, 0x6e, 0x6d,
+	0x0f, 0xa3, 0x2a, 0x96, 0xd6, 0xe6, 0xbd, 0x2d, 0x97, 0x0a, 0xb4, 0x0b,
+	0x1a, 0x77, 0xcf, 0xba, 0xb9, 0x1b, 0x01, 0x9f, 0xbd, 0x4f, 0xe8, 0x6f,
+	0xaf, 0xeb, 0x82, 0x36, 0x0f, 0xbc, 0xa5, 0x74, 0x41, 0x17, 0x75, 0x81,
+	0x9b, 0x91, 0xcd, 0xb2, 0x5a, 0xa2, 0x2c, 0x06, 0x0f, 0x0a, 0x79, 0x06,
+	0xcf, 0x95, 0xa8, 0x7c, 0xa3, 0x18, 0xd0, 0x13, 0xd7, 0x9c, 0xdf, 0xd6,
+	0x01, 0xff, 0x7f, 0x52, 0xe9, 0xe0, 0x6e, 0xb9, 0xb8, 0x0c, 0xdf, 0x07,
+	0x92, 0xd1, 0xbc, 0x39, 0xac, 0x62, 0x64, 0xf4, 0xcf, 0x65, 0x2b, 0x7d,
+	0xb3, 0x65, 0xe0, 0x8b, 0xb1, 0x6b, 0xac, 0x75, 0x2b, 0x57, 0x15, 0x3c,
+	0x8f, 0x82, 0x2f, 0x79, 0x6f, 0x48, 0x06, 0x36, 0xe2, 0x6a, 0x81, 0xd7,
+	0x18, 0xae, 0x3b, 0x01, 0x1b, 0xfc, 0x9c, 0x29, 0x43, 0xda, 0x9d, 0x61,
+	0xe1, 0x39, 0x4b, 0x35, 0xca, 0xf8, 0xef, 0x0b, 0xaa, 0x6d, 0xbb, 0x43,
+	0x3f, 0xe4, 0x3e, 0xc9, 0xaa, 0xb3, 0x33, 0x5c, 0x97, 0x35, 0x1c, 0x19,
+	0xc8, 0xea, 0xec, 0x68, 0x07, 0xf5, 0xd7, 0x48, 0x8e, 0x72, 0x40, 0xd9,
+	0xee, 0x49, 0xf0, 0xe0, 0xf7, 0xdb, 0xa9, 0xb7, 0xf7, 0xb9, 0xe3, 0xc0,
+	0x03, 0xef, 0x59, 0x9f, 0x70, 0x29, 0x04, 0x2d, 0x6f, 0x65, 0x7a, 0xc1,
+	0x69, 0x6b, 0xd7, 0x3c, 0x57, 0x02, 0xcd, 0x3f, 0x2a, 0x7f, 0x5a, 0x9f,
+	0x93, 0x7f, 0x57, 0x9f, 0x81, 0x1d, 0x72, 0x10, 0x76, 0xc8, 0x43, 0xe0,
+	0xe9, 0x03, 0xe0, 0xe9, 0xc7, 0xc1, 0x07, 0x53, 0x2a, 0x16, 0x52, 0x2a,
+	0x24, 0x9e, 0xcf, 0xa9, 0xb8, 0xd4, 0xdb, 0xe0, 0x81, 0x31, 0xb1, 0x4e,
+	0xf7, 0x01, 0xcf, 0xb9, 0x46, 0xd4, 0x69, 0xdc, 0xbd, 0xe0, 0x72, 0xef,
+	0x73, 0x09, 0x4b, 0xd1, 0x8c, 0x63, 0x7f, 0x15, 0xb8, 0xdd, 0xe6, 0x25,
+	0x4a, 0xdc, 0xf2, 0x33, 0xa5, 0x11, 0xc9, 0x9e, 0x47, 0xfb, 0x93, 0x5d,
+	0xc0, 0x21, 0x75, 0x45, 0xe2, 0x78, 0x56, 0x56, 0x40, 0x27, 0x29, 0x65,
+	0xc3, 0xe4, 0xa3, 0x89, 0xe7, 0x44, 0xc6, 0x65, 0xf7, 0x22, 0x68, 0x7c,
+	0x91, 0xf1, 0x7e, 0x43, 0xc5, 0xd0, 0xfb, 0xcf, 0x7b, 0xb0, 0x61, 0x28,
+	0x9b, 0xba, 0x95, 0x1f, 0x3d, 0x0f, 0xfd, 0x13, 0xd6, 0xfa, 0x1c, 0x73,
+	0x3d, 0x21, 0x73, 0xd0, 0x4e, 0xf0, 0x05, 0x20, 0xbf, 0x9d, 0x18, 0xe6,
+	0x8b, 0xcc, 0x9e, 0xb7, 0x23, 0x73, 0xe7, 0x39, 0x46, 0x44, 0x42, 0x8b,
+	0xdc, 0x67, 0x8e, 0x01, 0x7e, 0xc0, 0xb8, 0x03, 0x8b, 0xc4, 0xd9, 0x4e,
+	0xf4, 0xcb, 0x40, 0xd7, 0x6a, 0x1a, 0x4b, 0x9f, 0xd4, 0xb2, 0x02, 0xbe,
+	0x4c, 0x93, 0xde, 0xc3, 0x5e, 0x40, 0x96, 0xa4, 0x94, 0x7f, 0xd3, 0xaa,
+	0xf3, 0x14, 0xec, 0x98, 0x8f, 0xba, 0xce, 0x89, 0x97, 0x15, 0xbd, 0x3b,
+	0x32, 0x77, 0xfe, 0xc7, 0x11, 0xe2, 0xf1, 0x22, 0xd6, 0x18, 0x3a, 0xb9,
+	0x42, 0x9d, 0x88, 0xb9, 0x39, 0x56, 0xb8, 0x69, 0x2d, 0x49, 0xc8, 0xa6,
+	0x74, 0x84, 0xfb, 0xf1, 0x05, 0xf8, 0x57, 0xfd, 0x0a, 0x1e, 0x96, 0xbb,
+	0x58, 0xa3, 0xf4, 0x32, 0x4a, 0x61, 0xc2, 0x66, 0xfc, 0xac, 0x92, 0x71,
+	0x63, 0x90, 0x6b, 0xb6, 0x2c, 0x0f, 0x73, 0xbf, 0xe0, 0xe7, 0x3f, 0xcb,
+	0x67, 0xee, 0x1b, 0x69, 0x80, 0xfc, 0x1a, 0x85, 0x0e, 0xc2, 0xde, 0x75,
+	0xf7, 0x49, 0xa5, 0xce, 0xba, 0x3e, 0x45, 0xef, 0x16, 0xf6, 0x65, 0xa1,
+	0xd0, 0xb8, 0x3b, 0xed, 0xe6, 0x00, 0x33, 0xf7, 0x41, 0xc1, 0x87, 0xbd,
+	0x18, 0x05, 0xfe, 0x09, 0x7b, 0xb7, 0xaf, 0xa3, 0x37, 0xc3, 0x0f, 0x25,
+	0xcd, 0xe3, 0x5a, 0xd9, 0x0c, 0xbb, 0x92, 0xbc, 0xf6, 0x04, 0xe8, 0x8e,
+	0x6b, 0xd6, 0x74, 0x3e, 0x01, 0x3a, 0xcb, 0xc3, 0xc7, 0xbd, 0xb8, 0x28,
+	0x91, 0x6d, 0x90, 0xe1, 0x5f, 0xa1, 0x9c, 0x05, 0xcd, 0xe5, 0x97, 0x61,
+	0x73, 0x96, 0xbb, 0x21, 0x53, 0x1b, 0x8d, 0x03, 0xb0, 0x91, 0x0f, 0xbb,
+	0xc4, 0xdd, 0x8f, 0x80, 0xbb, 0xf6, 0xd8, 0x61, 0xec, 0xe1, 0xd2, 0xb3,
+	0x77, 0x29, 0x99, 0x02, 0xfb, 0x46, 0xe9, 0x36, 0x1d, 0xbb, 0x71, 0x69,
+	0x0f, 0x29, 0x3e, 0x4f, 0x3b, 0x94, 0x99, 0x5f, 0x04, 0x1e, 0x46, 0x95,
+	0x8c, 0xd7, 0xf2, 0xa7, 0x43, 0xb2, 0x07, 0x52, 0x58, 0xef, 0x78, 0x4b,
+	0xbb, 0x24, 0x9e, 0x61, 0xeb, 0xd5, 0x7e, 0x8f, 0xf8, 0x45, 0xf9, 0xb8,
+	0x9c, 0x19, 0x9e, 0x94, 0xb3, 0xc3, 0x89, 0xf1, 0x19, 0x93, 0x7a, 0x63,
+	0x52, 0x2a, 0xcf, 0xa6, 0x64, 0xa9, 0xa8, 0xf5, 0xf7, 0xac, 0x33, 0x2e,
+	0x99, 0xda, 0x04, 0x9e, 0x3d, 0xc6, 0x86, 0xd1, 0x3e, 0x90, 0xcd, 0xc1,
+	0x9a, 0xd2, 0x5c, 0x13, 0xe4, 0x88, 0xd6, 0xcf, 0xa6, 0xd9, 0x8e, 0xfd,
+	0xa1, 0xec, 0xb8, 0x1f, 0xe5, 0x69, 0xc8, 0x3f, 0xe8, 0x70, 0x73, 0x00,
+	0x7b, 0x57, 0x54, 0xfb, 0x94, 0x71, 0xe9, 0x0b, 0xb0, 0x4f, 0x22, 0x36,
+	0x8b, 0xf2, 0x29, 0xa1, 0x9e, 0xe5, 0xda, 0x82, 0xf1, 0x3c, 0x1f, 0xfe,
+	0x90, 0x1f, 0x43, 0xfb, 0x4e, 0x84, 0x7c, 0x1a, 0x72, 0x82, 0xf2, 0x9d,
+	0xd0, 0xd1, 0x61, 0x35, 0x47, 0xbe, 0xc8, 0xb2, 0x01, 0x9b, 0xfd, 0x33,
+	0xee, 0x88, 0x3a, 0x93, 0xff, 0x82, 0xef, 0x9f, 0x1f, 0x80, 0xff, 0x9a,
+	0xa9, 0xb5, 0x7d, 0x8c, 0x8e, 0x5e, 0x97, 0x87, 0x5a, 0x76, 0xaf, 0xc6,
+	0x6c, 0x5f, 0x3e, 0x1f, 0x82, 0x7c, 0x36, 0xc7, 0x0c, 0x69, 0x83, 0xbc,
+	0xdd, 0x27, 0x83, 0xbe, 0xac, 0xe5, 0x7a, 0xba, 0x95, 0x3e, 0xcc, 0x4c,
+	0xc5, 0xe4, 0xd8, 0xd2, 0xaf, 0x42, 0xef, 0x1f, 0x67, 0xe3, 0x91, 0xe6,
+	0x21, 0x1f, 0x8a, 0x90, 0x1d, 0x45, 0xc8, 0x8e, 0x22, 0x64, 0x47, 0x11,
+	0xb2, 0xa3, 0x08, 0xd9, 0x51, 0x84, 0xec, 0x28, 0x4e, 0xf9, 0x7a, 0xf5,
+	0xb0, 0x1f, 0x6f, 0x6a, 0x3d, 0x0b, 0x62, 0xcc, 0x89, 0xfe, 0x4b, 0x22,
+	0x77, 0x19, 0x78, 0x79, 0xc1, 0xa5, 0xdf, 0xdd, 0x90, 0x1f, 0xbb, 0xcd,
+	0x2b, 0x67, 0x8c, 0xc3, 0x21, 0x7d, 0xab, 0x58, 0xf2, 0x03, 0xc0, 0xd7,
+	0x83, 0x57, 0x9d, 0x5b, 0xed, 0x90, 0xd9, 0xf2, 0x60, 0x2e, 0x04, 0xbf,
+	0x74, 0x6a, 0x03, 0xde, 0xe8, 0x83, 0x7f, 0x94, 0xdf, 0xcd, 0x98, 0xc2,
+	0xcf, 0xb8, 0xd7, 0x72, 0xc9, 0xdf, 0xd3, 0x4c, 0xb2, 0x1b, 0xf4, 0x4d,
+	0xdb, 0xee, 0x92, 0xb2, 0xed, 0xf6, 0xb9, 0x96, 0xac, 0x44, 0xa9, 0x4f,
+	0xdf, 0x91, 0x43, 0xe5, 0x9b, 0x3b, 0x18, 0x2b, 0x5a, 0x28, 0x0e, 0xcb,
+	0xaa, 0x92, 0x21, 0xf7, 0xa3, 0xad, 0x27, 0x73, 0xd8, 0xeb, 0xbd, 0xf0,
+	0x07, 0xcf, 0xca, 0xce, 0xd8, 0x59, 0xac, 0xe3, 0x0f, 0x5d, 0x9e, 0xe5,
+	0x37, 0x1a, 0x13, 0x28, 0x7b, 0x0d, 0x3e, 0xc3, 0x15, 0xe1, 0xfd, 0x4e,
+	0xfb, 0x38, 0x1c, 0x8b, 0x94, 0x3d, 0x60, 0xbf, 0x2d, 0x01, 0xfd, 0x90,
+	0x56, 0x78, 0x2e, 0xd0, 0x2b, 0x99, 0x65, 0xfa, 0x57, 0xdd, 0xe0, 0xaf,
+	0x77, 0xa0, 0x83, 0x39, 0x07, 0xf9, 0x9d, 0xf0, 0x19, 0x98, 0x33, 0x3e,
+	0xd3, 0xee, 0xdd, 0x02, 0xbd, 0x4b, 0x19, 0xaf, 0x7d, 0xa0, 0x0c, 0xfa,
+	0x28, 0x3d, 0xe0, 0x06, 0xe7, 0x22, 0x7f, 0x00, 0x1b, 0x27, 0x8a, 0xfd,
+	0x45, 0xf9, 0x72, 0xf3, 0x99, 0x2f, 0xdb, 0xeb, 0xb8, 0xb6, 0xce, 0x99,
+	0x48, 0x43, 0x7f, 0xdd, 0x87, 0xb6, 0x8c, 0xdf, 0x35, 0x1a, 0x8f, 0xba,
+	0xf0, 0x21, 0x4e, 0x51, 0x46, 0xdd, 0x0c, 0x5e, 0xa5, 0x4d, 0x44, 0x7d,
+	0x2b, 0xc6, 0x8f, 0x92, 0xab, 0x76, 0x44, 0x78, 0x5e, 0x39, 0x27, 0x69,
+	0xd0, 0x57, 0x68, 0xd7, 0x24, 0x74, 0xaf, 0x3a, 0xb7, 0x00, 0x0d, 0x73,
+	0xde, 0xfb, 0x8d, 0x3f, 0x4f, 0x8e, 0x42, 0x17, 0xdf, 0x05, 0x5d, 0xdc,
+	0x8b, 0xb1, 0xd2, 0xd0, 0xc7, 0xd4, 0xc5, 0xb6, 0x7c, 0xb7, 0x9e, 0x86,
+	0x4c, 0xda, 0xd7, 0x41, 0x1e, 0x9a, 0x5c, 0xe3, 0x95, 0x09, 0x9f, 0x97,
+	0xb6, 0x48, 0x46, 0xc5, 0xc7, 0x27, 0x14, 0xcf, 0xe5, 0x97, 0x69, 0x83,
+	0x80, 0xff, 0x96, 0xc9, 0xfb, 0xb4, 0x27, 0x29, 0x13, 0x20, 0x43, 0x96,
+	0x3f, 0x87, 0xeb, 0x24, 0xae, 0xda, 0x4e, 0x7b, 0xbe, 0x68, 0x75, 0xe8,
+	0x58, 0x68, 0xac, 0xc9, 0x56, 0xab, 0x60, 0x7d, 0xf7, 0xf9, 0x67, 0xda,
+	0x0f, 0x61, 0x8d, 0x07, 0x40, 0x5f, 0x53, 0xa0, 0xaf, 0x49, 0xac, 0xf5,
+	0xb8, 0x31, 0xb4, 0x27, 0x04, 0x5d, 0x7e, 0x44, 0x26, 0x5c, 0xc8, 0xd2,
+	0xa5, 0x9c, 0x31, 0xb6, 0x28, 0xea, 0x39, 0x03, 0x7e, 0x35, 0x9d, 0x3b,
+	0xd4, 0xb9, 0xef, 0xc9, 0xba, 0xe5, 0xc7, 0x09, 0x2d, 0x94, 0x51, 0x77,
+	0x43, 0x16, 0xd9, 0x18, 0xab, 0xb8, 0x65, 0x93, 0x74, 0x62, 0xbc, 0xe2,
+	0xe7, 0xf1, 0xcc, 0x78, 0xc1, 0xfd, 0xc6, 0xc6, 0xf2, 0x95, 0xad, 0xd0,
+	0x75, 0x76, 0x1a, 0x7e, 0xa5, 0xe5, 0x90, 0x5f, 0x1c, 0xec, 0x4f, 0x4a,
+	0x32, 0x43, 0xb0, 0xc7, 0xce, 0x37, 0xf3, 0x0a, 0xe4, 0x58, 0xc9, 0x93,
+	0xa5, 0x3a, 0xed, 0x26, 0x4f, 0xf9, 0xc5, 0x94, 0x4f, 0xd9, 0x12, 0x6c,
+	0x1f, 0xf7, 0x71, 0x23, 0xa5, 0xc6, 0x8c, 0xe4, 0x6c, 0x8f, 0x71, 0x0d,
+	0x31, 0xec, 0x3d, 0x97, 0xe1, 0x8b, 0x26, 0xc1, 0x9b, 0x1e, 0xe4, 0xa1,
+	0x0d, 0x79, 0x47, 0x3d, 0x76, 0x11, 0xb2, 0x1e, 0xe5, 0xe7, 0x61, 0xef,
+	0x9c, 0xa2, 0x7c, 0xf8, 0x89, 0x98, 0xd5, 0x8f, 0x8a, 0x7b, 0x30, 0xe6,
+	0x71, 0xbb, 0x7f, 0x8e, 0xd4, 0x0d, 0x78, 0xf5, 0x1c, 0x61, 0xd8, 0xf4,
+	0x17, 0x4b, 0x9b, 0xe0, 0xcb, 0xdd, 0x6f, 0x64, 0xa2, 0x2c, 0xcb, 0xc9,
+	0x72, 0x92, 0x36, 0x28, 0xe3, 0x1e, 0x11, 0xfa, 0xee, 0x7e, 0xac, 0xa1,
+	0xd5, 0xcf, 0xa4, 0xce, 0x7f, 0x59, 0x54, 0x79, 0x2d, 0x38, 0x8b, 0xa2,
+	0x2f, 0xf6, 0xb2, 0xf4, 0xc3, 0xff, 0x5c, 0x87, 0x63, 0xc5, 0xc8, 0xd6,
+	0xfe, 0xa2, 0x53, 0x3a, 0x09, 0x0b, 0xd7, 0xa4, 0xe7, 0x33, 0x4f, 0x8e,
+	0xf9, 0xf3, 0xc5, 0xb8, 0x26, 0x23, 0x8c, 0x7d, 0x69, 0x73, 0x82, 0xb9,
+	0xee, 0xe9, 0xd6, 0x70, 0x8e, 0xa0, 0xee, 0x5d, 0xd4, 0xf1, 0x99, 0xf5,
+	0x23, 0xcc, 0xc7, 0x32, 0x42, 0x7b, 0xe0, 0x1d, 0x43, 0x87, 0x57, 0x21,
+	0x63, 0x4c, 0xe8, 0xca, 0x6a, 0xf1, 0x71, 0x5c, 0x31, 0xce, 0xa9, 0x9f,
+	0xc8, 0xac, 0xf6, 0xa7, 0x61, 0x63, 0x0e, 0x2a, 0x7d, 0x7b, 0x2f, 0xfc,
+	0x7e, 0xe6, 0x8a, 0xf4, 0xef, 0xba, 0x05, 0x65, 0xf4, 0xa3, 0x72, 0x72,
+	0xf3, 0xed, 0xdc, 0x27, 0xee, 0x0f, 0x6d, 0x3e, 0xee, 0x17, 0x75, 0x73,
+	0x19, 0x7b, 0x04, 0xfc, 0x0f, 0xad, 0xc5, 0x00, 0x52, 0xcc, 0x7d, 0x5a,
+	0x2a, 0x92, 0x07, 0x53, 0xf2, 0x5c, 0x9d, 0x3a, 0xef, 0x97, 0xf2, 0x95,
+	0x93, 0x7f, 0x0f, 0x7b, 0x7f, 0x23, 0x70, 0x1e, 0x95, 0xd0, 0xd3, 0x8c,
+	0x7f, 0x53, 0xf6, 0xef, 0x84, 0xcc, 0xb5, 0x7d, 0x1b, 0x22, 0x2a, 0xd6,
+	0xd3, 0x7d, 0xd2, 0x7e, 0x22, 0x26, 0x6d, 0x27, 0x1a, 0x8d, 0x05, 0x77,
+	0x20, 0x0e, 0xdb, 0x98, 0x36, 0xd0, 0xf8, 0x9b, 0xc2, 0x33, 0xf1, 0x9d,
+	0x71, 0x5c, 0xdd, 0x55, 0xfc, 0x5e, 0xc5, 0xf8, 0xed, 0xb0, 0xdf, 0xdb,
+	0xce, 0xfd, 0x3a, 0xf0, 0xa3, 0xc7, 0x6c, 0xed, 0x9b, 0xd7, 0x7d, 0xd1,
+	0x2f, 0x11, 0xcb, 0xc9, 0x00, 0xfa, 0xb1, 0xff, 0x00, 0xfa, 0x0e, 0x8c,
+	0xbf, 0xb1, 0xd6, 0x9f, 0x7d, 0xa9, 0xf3, 0xa2, 0xe0, 0xf3, 0xed, 0x52,
+	0xfd, 0x26, 0xf9, 0x1d, 0xf6, 0x3f, 0xe4, 0x5a, 0xb6, 0xc6, 0x6b, 0x17,
+	0xae, 0x6c, 0x13, 0xf7, 0xeb, 0xfb, 0xfd, 0x7a, 0x47, 0xe9, 0x41, 0x6b,
+	0x2d, 0x7e, 0x02, 0x5f, 0xa1, 0x98, 0x38, 0x1e, 0x37, 0xa8, 0x67, 0xe3,
+	0x2a, 0xf7, 0x8d, 0xe7, 0x73, 0xd5, 0x53, 0xb0, 0x2b, 0x2b, 0xbc, 0x76,
+	0x48, 0xbe, 0xf2, 0xa8, 0xcc, 0xa8, 0xfb, 0xfd, 0xb2, 0xdf, 0xce, 0x35,
+	0xda, 0x61, 0xff, 0xdc, 0x3c, 0xb6, 0xb2, 0xb5, 0xc3, 0x8f, 0xa9, 0xa4,
+	0xcd, 0x23, 0xb2, 0xcf, 0x25, 0x3d, 0x38, 0xf6, 0x3d, 0xc0, 0x69, 0xb6,
+	0xd6, 0x46, 0x9a, 0x07, 0xdc, 0x1e, 0xf8, 0x2c, 0x25, 0x67, 0xeb, 0x89,
+	0xb8, 0x60, 0x6f, 0xee, 0xe1, 0x73, 0x05, 0x78, 0x65, 0x0c, 0xe2, 0x69,
+	0xe2, 0x92, 0xeb, 0xa6, 0x7e, 0x24, 0x3e, 0xb9, 0x7e, 0xea, 0x5c, 0xc6,
+	0xd2, 0x12, 0xe3, 0x57, 0x84, 0x7e, 0x33, 0xf1, 0xc5, 0x71, 0x82, 0x35,
+	0xeb, 0x7e, 0xe6, 0x99, 0x5e, 0x18, 0x93, 0x11, 0x31, 0x4f, 0xd8, 0x62,
+	0x9e, 0xe3, 0xb5, 0x0b, 0x57, 0xd6, 0xc1, 0x1f, 0x3d, 0xd3, 0xef, 0xd7,
+	0x39, 0x28, 0x83, 0xdd, 0xf8, 0x14, 0xf9, 0x6b, 0x3b, 0xf8, 0x9a, 0x71,
+	0x1c, 0xd2, 0xe2, 0xb8, 0x7c, 0x77, 0x69, 0x23, 0x8f, 0x85, 0x4e, 0x68,
+	0x9b, 0x63, 0x23, 0x8f, 0x8d, 0xff, 0x0a, 0x3c, 0xc6, 0x39, 0x28, 0x57,
+	0x2c, 0xf9, 0x4a, 0x34, 0x11, 0x4f, 0x69, 0xff, 0xc2, 0x1e, 0x30, 0x87,
+	0xe2, 0xb4, 0x41, 0xab, 0xa7, 0x7e, 0xa3, 0x93, 0x3a, 0xe6, 0x29, 0x97,
+	0x74, 0x1b, 0xd0, 0x19, 0x73, 0x52, 0x1a, 0xf2, 0x0d, 0xe8, 0xdf, 0xbc,
+	0x63, 0x28, 0xdb, 0x92, 0xf6, 0xe2, 0x83, 0xd1, 0x86, 0x3c, 0xe6, 0xea,
+	0xfe, 0xf3, 0x32, 0xe4, 0xd3, 0xb5, 0xf2, 0xd9, 0x20, 0x87, 0xb9, 0x5f,
+	0xcc, 0x59, 0xbb, 0x51, 0xdc, 0x1e, 0xd0, 0xf9, 0x18, 0x75, 0x35, 0xf7,
+	0x21, 0xa0, 0xef, 0x6b, 0xc6, 0xb7, 0x54, 0x6e, 0x40, 0xa6, 0x40, 0xb8,
+	0x98, 0xbf, 0x93, 0x82, 0xcf, 0xb4, 0x1e, 0xe3, 0x1a, 0x18, 0xca, 0x35,
+	0xc2, 0x98, 0x3b, 0x0b, 0x1f, 0xe2, 0xc1, 0xa8, 0x13, 0x1f, 0x34, 0x87,
+	0x62, 0x47, 0xa5, 0xae, 0xe0, 0xfd, 0x92, 0xab, 0xe9, 0x65, 0x21, 0x79,
+	0xad, 0xb8, 0x13, 0x71, 0x14, 0xf0, 0x3e, 0xc7, 0x5a, 0x31, 0xbe, 0x5c,
+	0xd3, 0x31, 0xa6, 0xac, 0x1f, 0x97, 0xce, 0xd6, 0xd6, 0x65, 0x8f, 0xe5,
+	0xcb, 0x82, 0x7c, 0xe9, 0xd7, 0x25, 0x90, 0x3d, 0xa5, 0x24, 0xf6, 0xeb,
+	0x24, 0xf7, 0x29, 0xee, 0xe7, 0x36, 0x45, 0x9a, 0x6c, 0xe1, 0x30, 0x6c,
+	0x61, 0xc0, 0x6c, 0xbe, 0x0e, 0x79, 0x70, 0x4a, 0xc2, 0x4e, 0x30, 0x56,
+	0x07, 0xda, 0xc4, 0xfc, 0x73, 0x87, 0xcd, 0x8c, 0x51, 0xa1, 0xcd, 0xed,
+	0xa8, 0x9f, 0x43, 0x3b, 0xea, 0x4c, 0xc6, 0xfb, 0xa9, 0x3f, 0x79, 0x16,
+	0xdc, 0x83, 0x76, 0x1d, 0x92, 0xa9, 0xdc, 0xe9, 0x97, 0x05, 0x63, 0xec,
+	0x69, 0x6a, 0x1f, 0x94, 0xe9, 0x73, 0x82, 0x94, 0x09, 0x59, 0xaf, 0xec,
+	0xa0, 0xf8, 0xda, 0x59, 0x87, 0x59, 0xfd, 0x5d, 0x5b, 0xf7, 0x67, 0x3b,
+	0xca, 0x7e, 0xe8, 0x98, 0x22, 0xf4, 0x4e, 0x71, 0xd2, 0xd7, 0x45, 0x33,
+	0xa2, 0xf5, 0xac, 0x18, 0x7b, 0x93, 0xfe, 0xb9, 0x6f, 0xa1, 0x5b, 0x96,
+	0xca, 0x1c, 0x9f, 0x78, 0x07, 0xfd, 0xd4, 0xb5, 0x4d, 0x6c, 0x26, 0xdb,
+	0x78, 0xee, 0x04, 0x7d, 0xae, 0xf5, 0x7d, 0x15, 0xfa, 0xfe, 0x4c, 0xd9,
+	0x50, 0xba, 0xf2, 0x8c, 0x1b, 0xe8, 0xed, 0x1f, 0xfa, 0x67, 0xe2, 0xd4,
+	0xc5, 0xa3, 0xf0, 0xc9, 0xfa, 0xa0, 0xe3, 0x5c, 0xe8, 0xb7, 0x11, 0xf8,
+	0x66, 0x0e, 0x74, 0x5c, 0x1c, 0x3a, 0x4e, 0xeb, 0x73, 0x9e, 0xd1, 0xbd,
+	0x86, 0x5f, 0x86, 0xf1, 0x82, 0xc5, 0x37, 0x65, 0xb9, 0x40, 0x5f, 0x0a,
+	0xfe, 0x40, 0x9d, 0xb9, 0x76, 0x0f, 0x48, 0x2a, 0x46, 0x9a, 0x67, 0x1d,
+	0xe3, 0xdb, 0x6f, 0xaa, 0x9c, 0xd0, 0x8b, 0x25, 0xc6, 0x4a, 0x8f, 0xc8,
+	0x57, 0xa0, 0x17, 0xab, 0x4b, 0x97, 0xe5, 0xc5, 0xc2, 0x9b, 0xf2, 0xb2,
+	0xb2, 0x05, 0xef, 0x90, 0x07, 0x99, 0x87, 0x76, 0x4a, 0xfb, 0x75, 0xed,
+	0x8e, 0xa6, 0xaf, 0xac, 0x6f, 0x0f, 0xce, 0x3a, 0xe4, 0x73, 0xea, 0x36,
+	0xc9, 0x75, 0x78, 0x9d, 0xb9, 0x08, 0xf4, 0xdb, 0xa3, 0xc2, 0xf8, 0x43,
+	0x12, 0xf2, 0x24, 0x1a, 0xe8, 0xab, 0x5c, 0x1a, 0xb6, 0x72, 0xc9, 0x1c,
+	0x91, 0x94, 0x15, 0x85, 0xde, 0xa3, 0xae, 0x73, 0x68, 0x03, 0x61, 0xfc,
+	0x1b, 0x99, 0xcb, 0x55, 0xe2, 0xa1, 0xb2, 0xd2, 0x7f, 0x49, 0xea, 0xc3,
+	0x3e, 0x39, 0x06, 0xd9, 0xb5, 0x04, 0x99, 0xb6, 0xaa, 0x78, 0x20, 0x31,
+	0x32, 0xa9, 0xf4, 0xcd, 0x2f, 0xd4, 0x39, 0xe6, 0x2c, 0xf6, 0x79, 0x0e,
+	0xb4, 0x99, 0x8f, 0xa2, 0xcd, 0x92, 0x2d, 0x95, 0x25, 0x5b, 0xc9, 0xce,
+	0x33, 0xf5, 0xf5, 0x78, 0xf6, 0xaa, 0x10, 0x2e, 0xc2, 0xb1, 0x17, 0x7b,
+	0xc9, 0x7a, 0xf2, 0xb2, 0xa2, 0x27, 0xdf, 0x67, 0xbf, 0x0c, 0xbb, 0x90,
+	0x73, 0x18, 0xd2, 0xe9, 0xfc, 0x04, 0xf4, 0x10, 0xb4, 0x33, 0x94, 0xbe,
+	0x4f, 0xdf, 0xf0, 0x71, 0xe7, 0x08, 0xe4, 0xf5, 0x4d, 0xf0, 0x93, 0x4c,
+	0x9f, 0xee, 0xbe, 0xec, 0xdb, 0xfb, 0x11, 0xd8, 0xd7, 0x8c, 0xc5, 0xe7,
+	0x85, 0x7a, 0x23, 0x1b, 0x5d, 0x60, 0x6c, 0x49, 0xcd, 0x79, 0x6f, 0xb2,
+	0x4b, 0xfa, 0x4f, 0xb4, 0xc9, 0xc0, 0xd3, 0x26, 0x68, 0x99, 0x7b, 0x7f,
+	0xb7, 0xec, 0x75, 0x87, 0xd5, 0x59, 0x77, 0xd5, 0x8e, 0x62, 0x7f, 0xa0,
+	0xdf, 0x46, 0x98, 0x33, 0xb3, 0x8b, 0x67, 0x11, 0x0a, 0x8e, 0xaa, 0x3d,
+	0x28, 0xcc, 0x23, 0xa9, 0x42, 0xe7, 0xe4, 0x4f, 0x7d, 0x6f, 0x93, 0xf6,
+	0xcd, 0x5b, 0x9f, 0xbf, 0xd6, 0x4e, 0x3a, 0x8d, 0x1b, 0x77, 0x76, 0xad,
+	0x9f, 0x29, 0x7f, 0x1c, 0xec, 0x41, 0x5b, 0xc2, 0x13, 0x16, 0xe7, 0xa9,
+	0x2e, 0x19, 0x84, 0x0c, 0x1d, 0x82, 0xee, 0x19, 0x3e, 0xd1, 0x27, 0x23,
+	0x27, 0xe2, 0x72, 0xf3, 0x89, 0x40, 0xa7, 0x5f, 0x9a, 0x1e, 0xf0, 0xe3,
+	0xb1, 0xce, 0x27, 0x8c, 0xc7, 0xde, 0xac, 0xc6, 0x07, 0x8c, 0x4b, 0x90,
+	0x69, 0xd1, 0x27, 0x95, 0xee, 0xd7, 0x78, 0x7f, 0x47, 0xf6, 0x96, 0xc3,
+	0x32, 0xa4, 0xf8, 0x89, 0xf4, 0x4d, 0x3b, 0xfb, 0x43, 0xac, 0x23, 0x01,
+	0xfa, 0x3f, 0xe8, 0xfb, 0x86, 0x9d, 0xc0, 0x2b, 0x71, 0x08, 0x7d, 0xe5,
+	0x32, 0xff, 0x10, 0x78, 0x74, 0x9b, 0xfb, 0xb3, 0xef, 0xfb, 0xe8, 0x93,
+	0x82, 0x4d, 0xc0, 0x7a, 0xe9, 0x0d, 0xc9, 0xb5, 0xea, 0x3f, 0x8b, 0x7a,
+	0xca, 0x8d, 0x7d, 0x90, 0x1b, 0xad, 0xf5, 0x69, 0xd4, 0x71, 0xfe, 0x1b,
+	0x31, 0xaf, 0xe1, 0xcb, 0xec, 0x00, 0x27, 0xdc, 0xd7, 0x5e, 0xe6, 0x96,
+	0x51, 0x5e, 0xca, 0x84, 0xcd, 0x98, 0x10, 0xcb, 0x7e, 0xcd, 0xdf, 0xeb,
+	0x31, 0x7f, 0xaf, 0xc9, 0x67, 0x9b, 0x54, 0x3e, 0x48, 0xda, 0xdd, 0x24,
+	0x13, 0x51, 0xe6, 0xd5, 0xc6, 0x55, 0x1c, 0x6e, 0xb9, 0xa0, 0xe5, 0x75,
+	0x46, 0x52, 0x5b, 0x79, 0x3e, 0xb0, 0xe0, 0xaa, 0x18, 0x59, 0x3c, 0xe4,
+	0xd1, 0x2e, 0x71, 0x23, 0xab, 0xe0, 0xb9, 0x6a, 0x99, 0x67, 0x88, 0x21,
+	0xfc, 0x80, 0x67, 0xcb, 0x10, 0xdb, 0x61, 0x59, 0x4e, 0xeb, 0xa8, 0x29,
+	0xf0, 0xac, 0xa9, 0xda, 0xc4, 0xd3, 0x6e, 0xaf, 0xff, 0x1c, 0x93, 0xa5,
+	0xc2, 0xad, 0x7d, 0xa6, 0xf7, 0x3f, 0x6f, 0x4c, 0x27, 0xb7, 0xf2, 0x9c,
+	0x07, 0x65, 0xe4, 0x8b, 0xff, 0x02, 0xbe, 0x08, 0xfb, 0x7e, 0x80, 0xc5,
+	0x33, 0x32, 0xac, 0xf3, 0x7d, 0xd0, 0x74, 0xeb, 0x9a, 0xdb, 0xfc, 0x35,
+	0x73, 0xbd, 0xc4, 0x37, 0xfb, 0x07, 0xfa, 0x8a, 0x38, 0x8f, 0xf8, 0xbe,
+	0x43, 0xc2, 0xae, 0x98, 0xbf, 0xb7, 0x4d, 0x97, 0xf3, 0x1e, 0x72, 0xa6,
+	0x08, 0x99, 0x53, 0x84, 0xac, 0x81, 0xcd, 0xf0, 0x12, 0xe4, 0xe0, 0x8b,
+	0xf0, 0x9f, 0x5e, 0x28, 0x06, 0x76, 0xf7, 0x38, 0x64, 0x5d, 0xe0, 0x13,
+	0x32, 0xf7, 0xa8, 0xfd, 0x13, 0xe7, 0x1e, 0x85, 0xbc, 0xa0, 0x5f, 0xbb,
+	0x64, 0x55, 0x9f, 0xb8, 0xcc, 0xd5, 0xae, 0xd5, 0x36, 0xf0, 0x15, 0x9b,
+	0xfd, 0x44, 0xfa, 0x8d, 0x41, 0xee, 0x76, 0x5c, 0x60, 0xcb, 0x1b, 0x0f,
+	0x26, 0xe3, 0xe2, 0x9c, 0x7f, 0x47, 0x66, 0x4f, 0x4b, 0x34, 0x0c, 0x17,
+	0xb6, 0xdd, 0x1b, 0x1c, 0xbf, 0x07, 0xbe, 0x64, 0x45, 0xc5, 0xb8, 0xb8,
+	0xee, 0x46, 0xe3, 0x90, 0xfb, 0x8c, 0xb6, 0xeb, 0x7b, 0x29, 0x6f, 0x61,
+	0xdb, 0x57, 0xd1, 0xf7, 0xfc, 0x47, 0x9d, 0x43, 0xea, 0x7c, 0xb5, 0x90,
+	0xa3, 0xf2, 0x92, 0x7c, 0xdc, 0x32, 0x37, 0xc9, 0xcf, 0xad, 0x2c, 0x30,
+	0xcf, 0x95, 0x32, 0x5d, 0xe7, 0xba, 0xe6, 0xeb, 0xad, 0xfc, 0x67, 0x2b,
+	0x3b, 0xf7, 0x7b, 0xc3, 0xd7, 0xe2, 0xc3, 0x60, 0x7d, 0x3a, 0xe7, 0xa9,
+	0x4d, 0xe5, 0x3c, 0x09, 0xfc, 0xaa, 0x88, 0x5c, 0x29, 0xd3, 0xbe, 0xcc,
+	0xcb, 0xfc, 0xf8, 0x82, 0xe4, 0xc7, 0x21, 0xf7, 0x46, 0x41, 0x27, 0xa3,
+	0xcc, 0xeb, 0xbf, 0x15, 0x3a, 0x7b, 0x1e, 0xe3, 0x50, 0x06, 0xdc, 0x01,
+	0xda, 0xb0, 0xfd, 0x3c, 0x8f, 0xd7, 0xa7, 0xd3, 0x25, 0x31, 0x5e, 0x2d,
+	0x30, 0xce, 0x79, 0x69, 0xfa, 0x52, 0x99, 0xf2, 0x65, 0x4c, 0x96, 0xc6,
+	0xef, 0x96, 0xea, 0x86, 0xfe, 0x7d, 0x2a, 0x77, 0xfc, 0x58, 0x9d, 0xe7,
+	0xa5, 0xed, 0x32, 0x03, 0x7d, 0x79, 0x59, 0xe5, 0xdc, 0xf4, 0x48, 0x55,
+	0xd1, 0x35, 0x75, 0xd2, 0x16, 0x59, 0x8d, 0x6a, 0x5f, 0x9b, 0x39, 0xf2,
+	0xd5, 0x68, 0x62, 0xe4, 0x32, 0x6c, 0xdb, 0x37, 0x0a, 0xc4, 0xd9, 0x26,
+	0xc9, 0xfa, 0x73, 0xea, 0x98, 0x21, 0x71, 0xcb, 0xd8, 0x13, 0x63, 0x51,
+	0x7f, 0xd1, 0x45, 0x39, 0x7a, 0xa1, 0xf8, 0x35, 0x5f, 0xde, 0xf2, 0x1e,
+	0x34, 0xd6, 0x19, 0xd3, 0xb9, 0xbb, 0xd1, 0xa3, 0x2a, 0x07, 0xf8, 0xb5,
+	0xc2, 0x7f, 0x43, 0x3b, 0xda, 0x82, 0x6d, 0x28, 0xcb, 0x35, 0xf2, 0xaa,
+	0x0c, 0xea, 0x41, 0xe5, 0x68, 0x3d, 0x62, 0xe8, 0xf6, 0xfa, 0xcc, 0x29,
+	0xcd, 0x5c, 0x40, 0xbb, 0x5f, 0xe5, 0x22, 0x5d, 0x28, 0x0e, 0x6f, 0x5a,
+	0x1f, 0xcb, 0xf1, 0x71, 0x7b, 0xac, 0x4b, 0x97, 0xf9, 0xf9, 0xaf, 0x36,
+	0x61, 0xed, 0x90, 0x37, 0x4a, 0x31, 0x15, 0x2f, 0xcd, 0x46, 0x7b, 0x71,
+	0x7d, 0x1f, 0x6d, 0x22, 0xd8, 0x43, 0xc6, 0x9f, 0x7e, 0x4d, 0xad, 0x35,
+	0xe4, 0x68, 0xbf, 0x39, 0xcd, 0xdc, 0xde, 0x4a, 0xc7, 0x66, 0xd6, 0x3f,
+	0x5b, 0x56, 0x39, 0x7b, 0xb8, 0xd2, 0x56, 0xf8, 0x10, 0x7e, 0x5c, 0x58,
+	0x32, 0x25, 0x07, 0xf6, 0x7d, 0x98, 0xfc, 0x84, 0xf2, 0x4f, 0xc9, 0xd9,
+	0x92, 0x80, 0xbf, 0xdb, 0xa0, 0xa3, 0x15, 0x0e, 0x40, 0xed, 0x8c, 0x17,
+	0x70, 0x7e, 0xdb, 0x8f, 0x37, 0xf3, 0xde, 0x91, 0xa3, 0xea, 0x9c, 0xfe,
+	0x16, 0xf0, 0x70, 0x12, 0x7c, 0xbb, 0x82, 0x95, 0xbc, 0xab, 0x7c, 0x93,
+	0x55, 0xd1, 0x3e, 0xe0, 0x7c, 0x0d, 0xbe, 0x4b, 0x41, 0xc7, 0xb0, 0xd6,
+	0xcf, 0x63, 0x3e, 0xea, 0x2c, 0x26, 0x22, 0xab, 0x6e, 0x9b, 0xef, 0xdb,
+	0x47, 0x2c, 0x65, 0xaf, 0xd7, 0xba, 0x70, 0x4d, 0x6e, 0x66, 0x7e, 0x70,
+	0xb5, 0xc6, 0x33, 0x99, 0xb8, 0x2c, 0xd5, 0x78, 0x26, 0xc3, 0xe7, 0xb8,
+	0x84, 0x3c, 0x1d, 0x07, 0x63, 0xec, 0xcb, 0xf2, 0x18, 0x73, 0xa3, 0x4c,
+	0xc2, 0x58, 0xc0, 0xdd, 0xb1, 0x62, 0x4a, 0xc5, 0xc2, 0xf2, 0xb5, 0x5b,
+	0xe4, 0x62, 0x79, 0x44, 0x56, 0xcb, 0xa3, 0xf2, 0x6a, 0xf9, 0x36, 0x79,
+	0xad, 0x4c, 0x1d, 0xcb, 0x33, 0x9e, 0x46, 0x63, 0xce, 0x45, 0xf9, 0xb2,
+	0x29, 0x47, 0xa3, 0x68, 0xb3, 0x7c, 0x8b, 0xac, 0xac, 0xc5, 0x11, 0x1c,
+	0xc8, 0x13, 0xd2, 0xac, 0x05, 0x1f, 0xd2, 0x96, 0x05, 0xee, 0x4d, 0x9d,
+	0x7e, 0x5a, 0x27, 0x64, 0x0c, 0xeb, 0x7a, 0xe0, 0xab, 0xdf, 0x06, 0xff,
+	0x7e, 0x8b, 0x30, 0x16, 0x96, 0x76, 0x2c, 0xd8, 0xa1, 0xb0, 0x17, 0x1d,
+	0xc6, 0xb3, 0x4d, 0x65, 0xdb, 0xcd, 0xd7, 0x98, 0xff, 0xb1, 0x6d, 0x2d,
+	0x9f, 0x65, 0x7e, 0x8d, 0x4f, 0xe0, 0xc7, 0x94, 0xb7, 0xcb, 0xac, 0xea,
+	0xab, 0xde, 0xbd, 0xf0, 0xe3, 0x4b, 0x9c, 0xbb, 0x82, 0xb5, 0xb0, 0xad,
+	0x85, 0x67, 0xc8, 0xe6, 0x32, 0xf3, 0xa0, 0x45, 0x0e, 0x15, 0x7a, 0x65,
+	0x6e, 0x79, 0x40, 0xc1, 0xcc, 0x18, 0xdb, 0x5e, 0x25, 0x37, 0x40, 0xef,
+	0xe3, 0x84, 0xc5, 0xca, 0xb5, 0x7b, 0xdb, 0xe5, 0x18, 0xda, 0x1d, 0xc5,
+	0xbe, 0x5d, 0x29, 0xf7, 0x4a, 0x7e, 0xb9, 0x4d, 0xde, 0x28, 0x0f, 0xd8,
+	0x17, 0xd7, 0xda, 0xb3, 0xed, 0x7b, 0xc0, 0x4b, 0xaf, 0xcc, 0x6f, 0x58,
+	0xa3, 0x9e, 0x27, 0x8d, 0x79, 0xe6, 0x55, 0x7f, 0xf6, 0xd5, 0x31, 0xbb,
+	0xf5, 0x7e, 0x9b, 0xc1, 0x83, 0xdc, 0xef, 0x84, 0x3b, 0x23, 0x9c, 0xeb,
+	0x93, 0xcc, 0xa1, 0xe9, 0x83, 0x67, 0x48, 0xd9, 0x24, 0xf5, 0x45, 0x1c,
+	0x72, 0x83, 0xe7, 0x94, 0xd8, 0xb7, 0x42, 0xf3, 0x19, 0x92, 0xca, 0x51,
+	0x90, 0x4a, 0xcd, 0x51, 0xf2, 0x3b, 0xe4, 0xa9, 0x73, 0xb0, 0xad, 0xfe,
+	0xfb, 0x28, 0x1f, 0x13, 0x17, 0xe4, 0xd8, 0x96, 0xe4, 0x6a, 0x3a, 0x36,
+	0x92, 0xaf, 0x73, 0xcf, 0x9b, 0x73, 0x3b, 0x79, 0x9e, 0x65, 0xc9, 0x45,
+	0xd0, 0xca, 0x6b, 0x9c, 0xbf, 0xd8, 0x90, 0x12, 0x74, 0xcf, 0xab, 0x6a,
+	0xff, 0x41, 0x73, 0xf0, 0x41, 0x16, 0x70, 0x7d, 0xd6, 0x41, 0x9b, 0x1a,
+	0xfb, 0xa3, 0x0e, 0x70, 0xff, 0xa0, 0xd6, 0x26, 0xcf, 0x58, 0xcc, 0x43,
+	0x0e, 0xcb, 0x15, 0x6b, 0x3b, 0xe8, 0x26, 0xae, 0xce, 0x2b, 0xd2, 0x68,
+	0xbb, 0x5a, 0xe3, 0xf3, 0x08, 0xe8, 0xc9, 0x10, 0xeb, 0x36, 0xfa, 0x2a,
+	0x94, 0x39, 0x8c, 0x83, 0x40, 0x3f, 0x4d, 0xb1, 0xce, 0x50, 0x39, 0x61,
+	0xeb, 0xed, 0x76, 0xc6, 0x6d, 0x09, 0xda, 0x51, 0x47, 0xb6, 0xfb, 0x79,
+	0x46, 0x68, 0xc3, 0xf3, 0x3d, 0xd8, 0x78, 0x26, 0xe7, 0x2f, 0x6c, 0x51,
+	0xf9, 0xf3, 0x47, 0x8b, 0xcf, 0xaa, 0x77, 0x91, 0xb6, 0xaa, 0xfc, 0x9c,
+	0x11, 0xc9, 0x60, 0x5f, 0xd2, 0xe5, 0x20, 0xd6, 0xba, 0x6d, 0x2d, 0x6f,
+	0x48, 0x7a, 0xd9, 0x76, 0x3d, 0x57, 0xea, 0x68, 0x71, 0x07, 0xf8, 0xb0,
+	0x4f, 0x96, 0xd5, 0x39, 0x09, 0xe3, 0xad, 0xa6, 0xcc, 0x45, 0x51, 0xb6,
+	0xbc, 0x43, 0x2a, 0xcb, 0x50, 0xfa, 0x3d, 0xdc, 0x67, 0xe6, 0xe7, 0x6d,
+	0x87, 0x8d, 0xde, 0x4a, 0x77, 0xa4, 0xb9, 0x1d, 0xdd, 0x94, 0x0f, 0x95,
+	0x9a, 0xa6, 0x85, 0xa5, 0xb2, 0xa8, 0x77, 0x97, 0xaa, 0x4d, 0xb4, 0x30,
+	0x11, 0xd0, 0x02, 0xf4, 0x67, 0xdc, 0xdc, 0x48, 0x0b, 0xd5, 0x16, 0x5a,
+	0x98, 0x68, 0xa2, 0x85, 0xa5, 0x65, 0xb6, 0xbf, 0x56, 0x1e, 0x6c, 0x40,
+	0x87, 0xa3, 0x2a, 0x57, 0x2e, 0xe4, 0xfd, 0x6d, 0xf6, 0x9d, 0x67, 0xd2,
+	0xec, 0x3f, 0x2a, 0xb9, 0x7a, 0xf3, 0xfb, 0x2b, 0x5a, 0xbe, 0x2f, 0xb8,
+	0xb4, 0x03, 0x78, 0xee, 0xc4, 0xf7, 0x96, 0xb4, 0xdf, 0x97, 0x77, 0xc9,
+	0x97, 0xe9, 0x38, 0xcf, 0x6b, 0x0e, 0xc9, 0x9d, 0x58, 0x6f, 0x6a, 0x24,
+	0x2c, 0xc1, 0x7b, 0x56, 0x6d, 0xb2, 0x62, 0x37, 0x1a, 0x97, 0x78, 0x4e,
+	0x8d, 0x7d, 0x39, 0xa3, 0xce, 0x5a, 0xc1, 0xef, 0x9d, 0x16, 0x68, 0x64,
+	0xfd, 0x7d, 0x94, 0x0a, 0xda, 0x2c, 0xa1, 0xee, 0xd8, 0x1a, 0x6c, 0xd4,
+	0x17, 0xb0, 0x75, 0x9d, 0xbf, 0x69, 0x64, 0xa3, 0x1b, 0xda, 0xfa, 0xb2,
+	0x97, 0xf1, 0x4e, 0xc6, 0xba, 0x6d, 0xc9, 0x2c, 0xf7, 0xe0, 0x17, 0xc5,
+	0x8f, 0x6d, 0x18, 0xff, 0xe4, 0x1e, 0x5f, 0x2f, 0x46, 0xdc, 0x25, 0xf7,
+	0x14, 0x72, 0xf0, 0x93, 0x73, 0x8d, 0x0e, 0xa7, 0x1b, 0x7e, 0x07, 0x7d,
+	0xed, 0x44, 0x0e, 0x06, 0x58, 0xae, 0xd3, 0x73, 0xe2, 0xf7, 0x0a, 0xfd,
+	0x90, 0x86, 0xbc, 0xe0, 0x32, 0x76, 0x7c, 0xb3, 0x5c, 0xb6, 0x13, 0xdf,
+	0xe2, 0x22, 0xcd, 0xa1, 0x51, 0x99, 0x38, 0xe7, 0x8c, 0xdc, 0x2b, 0xca,
+	0xaf, 0x88, 0x4f, 0x12, 0x6f, 0x6b, 0xf9, 0xd7, 0x96, 0x4f, 0x47, 0xa3,
+	0xb2, 0xf7, 0xdc, 0x3b, 0x2a, 0x5e, 0xff, 0xa0, 0xdb, 0x9c, 0x6f, 0xa7,
+	0xf2, 0xbe, 0x46, 0xb7, 0x0a, 0xdf, 0x8d, 0x13, 0x68, 0x10, 0xf0, 0x47,
+	0x92, 0xb9, 0x5d, 0xcc, 0x15, 0x57, 0x57, 0x39, 0xac, 0x72, 0xba, 0x2c,
+	0x99, 0xa9, 0xd1, 0x8e, 0x88, 0xc8, 0x57, 0x6a, 0xdc, 0xd3, 0x2e, 0x95,
+	0xef, 0xf5, 0x12, 0xf6, 0x76, 0xae, 0xa6, 0x73, 0x42, 0x67, 0x6a, 0xfa,
+	0x7d, 0xba, 0x99, 0x1a, 0xed, 0x0b, 0xc6, 0x9e, 0xaf, 0x97, 0x0f, 0xb6,
+	0x9e, 0x0b, 0xc5, 0x18, 0xec, 0x2a, 0xf4, 0x72, 0xa6, 0x64, 0xab, 0x33,
+	0xc6, 0xac, 0xbd, 0x55, 0x0e, 0x8d, 0xb4, 0x03, 0xe7, 0x3d, 0x8a, 0xa7,
+	0x98, 0x2f, 0x16, 0x76, 0xe8, 0x4b, 0x52, 0x1f, 0x07, 0x78, 0xde, 0x8d,
+	0xb2, 0xf7, 0x81, 0x7b, 0x96, 0xc1, 0xbf, 0x55, 0xf6, 0xed, 0x57, 0xc1,
+	0x5b, 0xcc, 0xe3, 0xae, 0x6c, 0x49, 0xab, 0xfd, 0x60, 0x7c, 0xe8, 0x6d,
+	0xf5, 0x1e, 0xe3, 0x85, 0x7a, 0x90, 0xff, 0x46, 0xff, 0xdc, 0xf6, 0xcf,
+	0xc6, 0x19, 0x1f, 0xea, 0x91, 0xec, 0x32, 0x65, 0xb3, 0xe6, 0xdf, 0xcb,
+	0xa1, 0xed, 0x92, 0xab, 0x5c, 0xeb, 0x9c, 0xbf, 0xd1, 0x78, 0xd1, 0x55,
+	0x7e, 0xf3, 0xf1, 0x9c, 0xbf, 0xc7, 0x53, 0x49, 0xfa, 0xe7, 0x96, 0x8f,
+	0xe3, 0x2e, 0x3f, 0xb7, 0x01, 0x7e, 0x4e, 0x0f, 0xdf, 0x97, 0xf9, 0x4d,
+	0x3f, 0xd6, 0x47, 0x1f, 0xfb, 0x43, 0xdf, 0x66, 0xa6, 0x7f, 0xdd, 0xa3,
+	0xfc, 0x1f, 0xb3, 0x1a, 0xd0, 0x09, 0x73, 0xce, 0xe9, 0x7b, 0x0f, 0x4b,
+	0xaa, 0x12, 0x92, 0x54, 0x2f, 0x9f, 0x2f, 0xf8, 0x7d, 0x79, 0xdf, 0x90,
+	0x7d, 0x57, 0xbd, 0xa3, 0x34, 0xae, 0x7d, 0xfa, 0xce, 0xe0, 0x0c, 0xbf,
+	0x35, 0x97, 0x5b, 0xc1, 0x09, 0x9a, 0x09, 0x60, 0xd0, 0x73, 0xed, 0x05,
+	0xbc, 0x55, 0xd8, 0x0e, 0x3d, 0x0e, 0x73, 0x7d, 0x42, 0x32, 0xd6, 0x03,
+	0x3b, 0xc5, 0xd4, 0xf0, 0x54, 0x2b, 0xcc, 0xe9, 0x0e, 0xe0, 0xd4, 0xb1,
+	0x80, 0x6a, 0x25, 0xa1, 0x72, 0xdc, 0xc2, 0xb0, 0x2d, 0xc6, 0x7a, 0x89,
+	0xe7, 0x56, 0x38, 0xd2, 0x7e, 0x0e, 0x71, 0x6b, 0xf9, 0xed, 0x4d, 0xf0,
+	0xbd, 0xdd, 0xf4, 0x1e, 0x63, 0xd4, 0xcf, 0x33, 0x80, 0x3d, 0x53, 0x66,
+	0x5c, 0x82, 0x30, 0xf6, 0x40, 0x16, 0x62, 0x8d, 0xee, 0x58, 0xa8, 0x19,
+	0xd6, 0x74, 0x32, 0x88, 0x67, 0x84, 0x15, 0x5d, 0xcc, 0x26, 0xb9, 0x96,
+	0xb0, 0x1f, 0xdf, 0x20, 0x5c, 0x09, 0x3f, 0xa7, 0x91, 0xf0, 0x79, 0x5b,
+	0xf4, 0xfe, 0xcf, 0xf9, 0xeb, 0x0d, 0xf2, 0x20, 0x39, 0xd6, 0xa7, 0xd0,
+	0xff, 0x3b, 0x0d, 0xda, 0xb1, 0x3c, 0x9c, 0x3c, 0x04, 0x5b, 0xef, 0x82,
+	0x82, 0xf1, 0x53, 0x7a, 0x2c, 0x65, 0xdf, 0xe8, 0xfd, 0xbe, 0xb0, 0x86,
+	0x3f, 0xf2, 0x57, 0x80, 0x43, 0x8e, 0xd1, 0xe3, 0x9f, 0x5d, 0x10, 0x86,
+	0x8e, 0x16, 0x18, 0x12, 0xee, 0x46, 0x19, 0xb7, 0xbb, 0x69, 0xed, 0xa4,
+	0xb5, 0x6e, 0x99, 0x2f, 0x75, 0x4a, 0xbe, 0xb4, 0x89, 0xf1, 0x9b, 0x11,
+	0x11, 0xda, 0x5f, 0xe4, 0x4b, 0x95, 0xdb, 0xaf, 0xde, 0x15, 0x59, 0xe7,
+	0xcf, 0x6e, 0xb4, 0xa3, 0x1c, 0xc7, 0xb5, 0xa2, 0xe5, 0x53, 0x45, 0x9a,
+	0x63, 0x4f, 0xb4, 0xb1, 0x57, 0x8c, 0xb9, 0x5a, 0x10, 0x77, 0xd2, 0x79,
+	0x4d, 0xd9, 0xb5, 0xbc, 0x14, 0xe6, 0xd6, 0x71, 0x0d, 0xc1, 0xfb, 0x6e,
+	0x39, 0xd9, 0xbf, 0xa7, 0x03, 0xfe, 0x4f, 0xa7, 0x4f, 0xa3, 0x77, 0xf9,
+	0xf3, 0x60, 0xbe, 0xc5, 0x71, 0xe9, 0x5f, 0xcc, 0xc1, 0xde, 0x55, 0xb9,
+	0xd4, 0x68, 0x13, 0xc8, 0x8a, 0x41, 0xb6, 0xf1, 0xe3, 0x3a, 0x6c, 0x87,
+	0xfd, 0xda, 0x93, 0x18, 0x89, 0x9b, 0x7c, 0x57, 0xea, 0xa0, 0xf4, 0x9f,
+	0x1e, 0x97, 0x81, 0x45, 0xca, 0x7a, 0x9e, 0xfe, 0x27, 0x94, 0xcd, 0x3d,
+	0x70, 0x5e, 0x8f, 0xe7, 0x2c, 0xb2, 0x7e, 0x00, 0x36, 0x25, 0xeb, 0x33,
+	0xb1, 0x90, 0xca, 0x10, 0xb8, 0x05, 0xf4, 0xd4, 0xe6, 0xc7, 0xbc, 0xf8,
+	0x8e, 0x27, 0xfb, 0x33, 0x06, 0xfa, 0xc7, 0xd8, 0xb3, 0x4c, 0xdc, 0x14,
+	0xf6, 0x51, 0xe3, 0xe1, 0x3e, 0x38, 0x97, 0x22, 0xae, 0x47, 0x65, 0x19,
+	0xb6, 0x41, 0xaa, 0xa2, 0xdf, 0x01, 0xc8, 0x56, 0x82, 0x5c, 0xd1, 0x07,
+	0x37, 0xbc, 0x73, 0xa0, 0x73, 0xa1, 0xae, 0x87, 0x1f, 0xe2, 0xa6, 0xdd,
+	0xd6, 0x39, 0xe4, 0x1d, 0xea, 0xec, 0xb7, 0x49, 0x1e, 0xfa, 0xfd, 0xff,
+	0x7a, 0x0b, 0x73, 0x05, 0xf8, 0xbe, 0x1b, 0x7d, 0xe3, 0x90, 0xef, 0x1b,
+	0x67, 0xa2, 0x51, 0xc5, 0x17, 0xfd, 0xd5, 0xa0, 0x9d, 0xe1, 0x8f, 0x43,
+	0xbc, 0x79, 0xfe, 0x1a, 0x5c, 0xf8, 0xdf, 0x2c, 0x1b, 0x46, 0x5f, 0xee,
+	0x1b, 0xae, 0x55, 0xde, 0x63, 0x9d, 0xa3, 0xbd, 0xd4, 0xf7, 0x39, 0xdb,
+	0xeb, 0x50, 0xcf, 0x7a, 0xdc, 0x8e, 0xa6, 0x79, 0x5b, 0x79, 0x86, 0x71,
+	0xbf, 0xd7, 0x7d, 0xba, 0x61, 0x3d, 0x9f, 0x5b, 0xdb, 0x4c, 0x6e, 0x09,
+	0xea, 0xad, 0xc5, 0x80, 0x5f, 0x88, 0x53, 0x9e, 0x57, 0xe3, 0x7a, 0xde,
+	0x03, 0x6c, 0xbc, 0xc7, 0x55, 0xbd, 0x33, 0xc1, 0x76, 0xfc, 0xb5, 0x8e,
+	0x63, 0x61, 0xec, 0x80, 0x77, 0xaf, 0x95, 0x17, 0x44, 0x99, 0x7c, 0xdc,
+	0x58, 0x2d, 0x30, 0x1f, 0x23, 0x27, 0x87, 0x92, 0xdd, 0x32, 0x5b, 0x32,
+	0xe1, 0xcf, 0xab, 0x73, 0x01, 0x9e, 0xad, 0xc3, 0xc6, 0xe0, 0x5e, 0x0d,
+	0xf9, 0x31, 0x82, 0x0e, 0x99, 0xb0, 0x49, 0xd7, 0x43, 0xb2, 0x5c, 0x99,
+	0x52, 0xb9, 0xac, 0x9a, 0xae, 0xdb, 0x7c, 0x7a, 0x7b, 0x26, 0x2c, 0x9d,
+	0x39, 0xf8, 0x6f, 0x01, 0x6f, 0x0f, 0xc9, 0x44, 0xa5, 0xf9, 0xdc, 0x8e,
+	0x39, 0x46, 0xc1, 0x7b, 0x9a, 0x6b, 0xef, 0xe7, 0x94, 0x72, 0xa0, 0x9b,
+	0xcb, 0x51, 0xc6, 0x51, 0xd8, 0x6e, 0xb3, 0xaf, 0x77, 0x67, 0xb0, 0x0f,
+	0xbd, 0x86, 0x38, 0x84, 0x0d, 0xba, 0x42, 0xcd, 0x33, 0x20, 0xfb, 0xa2,
+	0xa0, 0x65, 0x8c, 0xab, 0xe7, 0xbd, 0x09, 0xcf, 0x6c, 0xbb, 0xc5, 0xaf,
+	0xff, 0x94, 0xff, 0xdc, 0xe9, 0x3f, 0x87, 0xf0, 0x5c, 0x6e, 0x94, 0x8a,
+	0x1c, 0x93, 0x57, 0xbe, 0x2f, 0x43, 0x7f, 0xdb, 0x93, 0xf0, 0x79, 0x91,
+	0xbd, 0xb5, 0x4e, 0x79, 0xb8, 0xa2, 0xf0, 0x6b, 0x38, 0x8b, 0x34, 0x0c,
+	0xee, 0xf4, 0xef, 0xaf, 0xa6, 0xb5, 0x2f, 0x6f, 0xa0, 0xb5, 0xdf, 0xf6,
+	0x69, 0xa4, 0x19, 0xde, 0xbb, 0x01, 0xeb, 0xf5, 0xf2, 0xaf, 0xa8, 0xab,
+	0xb4, 0xaf, 0x0d, 0x3a, 0x56, 0x79, 0x46, 0x87, 0x0a, 0x80, 0xb5, 0x04,
+	0x85, 0xa5, 0x72, 0x60, 0x82, 0xbc, 0xc8, 0x4e, 0xac, 0x6b, 0xc8, 0xcf,
+	0xb3, 0x60, 0x5f, 0xe6, 0x67, 0x06, 0xe7, 0x9d, 0xcd, 0x36, 0x2f, 0x75,
+	0x12, 0xf5, 0x8d, 0x8b, 0x3d, 0x70, 0xd1, 0xf6, 0x28, 0x65, 0x0e, 0xf4,
+	0x55, 0x90, 0xf3, 0x9d, 0xbf, 0xea, 0xbd, 0xfd, 0x63, 0x80, 0xf5, 0x3f,
+	0xd7, 0x18, 0x8b, 0xee, 0x90, 0xd0, 0xc9, 0x20, 0xff, 0x8a, 0x7b, 0x4c,
+	0x7b, 0xcc, 0x82, 0x3d, 0xfb, 0xf9, 0x96, 0x38, 0xb5, 0x5a, 0x54, 0x24,
+	0xe4, 0x4d, 0xca, 0x6c, 0xe1, 0x3b, 0x36, 0xf3, 0x54, 0x6d, 0x2f, 0x88,
+	0x6d, 0x87, 0xfc, 0xf7, 0x57, 0x87, 0xf1, 0xcc, 0x38, 0x17, 0xeb, 0x72,
+	0xb2, 0x75, 0xcf, 0xe7, 0x99, 0xcf, 0xbb, 0x23, 0xa4, 0xe0, 0x57, 0xef,
+	0xfc, 0x43, 0x6e, 0x44, 0x60, 0x7b, 0xbb, 0xe2, 0xf8, 0xb9, 0xe5, 0xaf,
+	0xd6, 0x92, 0x32, 0xb8, 0xc8, 0x7c, 0xff, 0x4d, 0x2b, 0xd4, 0x15, 0xaf,
+	0xd5, 0xd8, 0x86, 0xbc, 0x06, 0x19, 0x0b, 0x99, 0xbd, 0x5a, 0xf3, 0x54,
+	0x6e, 0xcb, 0xaa, 0xff, 0xde, 0xe6, 0xc5, 0x9a, 0x25, 0xa6, 0xca, 0xa1,
+	0x57, 0xef, 0xe8, 0xc1, 0x66, 0x8b, 0xa3, 0x9e, 0xf9, 0x73, 0x7d, 0x2a,
+	0x27, 0x26, 0x5f, 0x7b, 0x08, 0xd7, 0xaf, 0xc2, 0x3f, 0xd5, 0x67, 0x02,
+	0xf9, 0x1a, 0x73, 0x63, 0x6c, 0x75, 0xe6, 0xda, 0xbf, 0x38, 0x01, 0xfe,
+	0x0d, 0xbe, 0x3d, 0x10, 0x45, 0x19, 0xe1, 0xcb, 0xb5, 0xd8, 0x4a, 0xcc,
+	0xad, 0x7f, 0xc3, 0xd6, 0xef, 0xa7, 0x76, 0xa9, 0x9c, 0x1a, 0x6d, 0x9b,
+	0xd0, 0xee, 0x8b, 0xa0, 0x3d, 0xd7, 0xdb, 0x49, 0xdd, 0xd5, 0xa0, 0x7c,
+	0x1a, 0xc0, 0x5c, 0x55, 0x95, 0x9b, 0xc8, 0x78, 0x85, 0x03, 0xdb, 0x59,
+	0xbd, 0xcb, 0x0b, 0xb9, 0x92, 0x18, 0x99, 0x91, 0x8c, 0x1d, 0xc6, 0x78,
+	0xf9, 0x1a, 0xc7, 0xe2, 0x7a, 0xb8, 0xce, 0xae, 0x15, 0xe6, 0xf6, 0x67,
+	0xd5, 0x99, 0x7f, 0xf0, 0x2e, 0x6a, 0x44, 0xbd, 0x7f, 0xc1, 0xf7, 0x88,
+	0xd2, 0xea, 0xfd, 0x8b, 0x1c, 0xf4, 0x9e, 0x7a, 0xdf, 0x4c, 0xbd, 0x7f,
+	0x51, 0xa9, 0x4d, 0xfa, 0xef, 0x60, 0x90, 0x8e, 0x22, 0x90, 0x8f, 0x5d,
+	0x28, 0xb3, 0xf1, 0x0b, 0x83, 0x3f, 0xf9, 0xbe, 0xc0, 0x66, 0xd8, 0x6b,
+	0xc4, 0x33, 0xdf, 0x17, 0x88, 0xf2, 0xdb, 0x09, 0xa0, 0x35, 0xbe, 0x77,
+	0x41, 0x9b, 0xac, 0x4f, 0xce, 0x12, 0x77, 0x3e, 0xcf, 0x5f, 0x6d, 0x93,
+	0x93, 0x0e, 0xbf, 0xce, 0xf7, 0xd1, 0xfc, 0x3c, 0x4c, 0xe6, 0x8b, 0x32,
+	0xa6, 0xc4, 0xf3, 0xe0, 0xa9, 0x7d, 0x4b, 0x58, 0xe3, 0xab, 0x15, 0xe0,
+	0xf1, 0x00, 0xcb, 0x98, 0x37, 0xd6, 0x0e, 0x19, 0xa7, 0x62, 0x94, 0x9d,
+	0x4b, 0xce, 0x66, 0xb9, 0x58, 0x8a, 0xfa, 0xef, 0x2b, 0x27, 0xec, 0xaa,
+	0xdc, 0xb4, 0x95, 0x31, 0xfe, 0xbd, 0xaa, 0x7f, 0xc0, 0xf3, 0xfe, 0x3b,
+	0xe7, 0xcb, 0x5a, 0xa6, 0x3c, 0x9a, 0x84, 0x0d, 0x73, 0x4e, 0x8c, 0x47,
+	0x92, 0x7d, 0x72, 0xa5, 0xc0, 0xb9, 0x06, 0xd0, 0x0f, 0xf4, 0x13, 0x23,
+	0xbf, 0xbf, 0xdf, 0xa8, 0x02, 0xde, 0x2b, 0x35, 0xda, 0xee, 0xb0, 0xa7,
+	0xa6, 0xd8, 0xc7, 0x13, 0xf3, 0x04, 0xdb, 0xf4, 0x80, 0x06, 0xc3, 0xea,
+	0xbd, 0xde, 0x6c, 0x81, 0xf1, 0x65, 0xd6, 0xf1, 0x7e, 0x87, 0x1f, 0xe3,
+	0x21, 0xfe, 0x7f, 0xaa, 0xf0, 0x47, 0xb9, 0x14, 0xe4, 0x10, 0x30, 0x9f,
+	0x75, 0xb6, 0x74, 0x1f, 0xf8, 0xc8, 0xf2, 0xed, 0x34, 0x0b, 0x63, 0x74,
+	0x6c, 0xd5, 0x76, 0x03, 0x73, 0x0c, 0xb4, 0x5d, 0xa2, 0xf5, 0x0d, 0xcf,
+	0x1b, 0x3b, 0xe1, 0x17, 0xac, 0xf1, 0xe6, 0xc7, 0xe8, 0x98, 0xe6, 0x58,
+	0xd7, 0x40, 0xec, 0xac, 0xa8, 0xf7, 0xfb, 0x64, 0x06, 0x6b, 0x39, 0xee,
+	0xaf, 0xff, 0x9e, 0xa4, 0x23, 0x97, 0x2b, 0xcc, 0x0d, 0x18, 0xc6, 0x95,
+	0x39, 0x90, 0x5c, 0xcb, 0xb4, 0x9f, 0xe7, 0xe9, 0x01, 0x07, 0x07, 0xe1,
+	0x47, 0x8d, 0xca, 0x9b, 0x85, 0x01, 0x77, 0xaf, 0x8a, 0xa1, 0x27, 0x62,
+	0x17, 0x65, 0x67, 0x7c, 0x1e, 0x3c, 0x98, 0xb3, 0x13, 0xb1, 0xcb, 0xb0,
+	0xdd, 0xaf, 0x14, 0x9e, 0x00, 0xbc, 0xc4, 0xef, 0x41, 0xc6, 0xd0, 0xa0,
+	0x33, 0x79, 0x1e, 0xc0, 0xe7, 0x3e, 0x3f, 0xef, 0x87, 0xf9, 0xd3, 0x07,
+	0x61, 0xdf, 0xf7, 0xf1, 0x0c, 0x2b, 0xd0, 0xd1, 0xa8, 0xdf, 0xa9, 0x78,
+	0x59, 0xeb, 0x60, 0xce, 0xfd, 0x2f, 0xb7, 0x92, 0x6f, 0xdb, 0xbc, 0x83,
+	0x7e, 0xee, 0x4e, 0xd0, 0x4e, 0xe7, 0x43, 0x5c, 0x84, 0xfe, 0xfd, 0x01,
+	0xf6, 0x25, 0x0f, 0xfa, 0x9a, 0xa9, 0x8c, 0xcb, 0x5b, 0xea, 0xbd, 0x1e,
+	0xc2, 0x0b, 0x9a, 0x8e, 0xe9, 0xbd, 0x51, 0xb9, 0xe8, 0xbb, 0x22, 0x0a,
+	0xbf, 0xdc, 0x9b, 0x2b, 0x85, 0x8d, 0x7b, 0xb3, 0x0a, 0x9f, 0xad, 0x6a,
+	0xdb, 0xca, 0x67, 0xc8, 0x16, 0xfe, 0x01, 0xf6, 0x26, 0x88, 0xe5, 0x05,
+	0x7b, 0xd3, 0x79, 0x8d, 0xbd, 0x09, 0x37, 0xed, 0x0d, 0xdb, 0x73, 0x7f,
+	0x68, 0x9f, 0x5d, 0x6b, 0x7f, 0xae, 0xb7, 0x37, 0x3f, 0xf5, 0xf7, 0xb4,
+	0x4f, 0xc1, 0xb4, 0x4f, 0xad, 0xdd, 0x50, 0xef, 0xc2, 0xbf, 0x55, 0x0b,
+	0xf0, 0xc6, 0x5c, 0x25, 0xfa, 0xe3, 0x6c, 0xcf, 0xb2, 0x3e, 0x15, 0xff,
+	0x4b, 0xbb, 0xda, 0x9e, 0x79, 0x43, 0xc5, 0x32, 0xb9, 0x6e, 0xda, 0x1c,
+	0xa0, 0xf9, 0xca, 0x4d, 0xea, 0x9b, 0x05, 0x17, 0x8a, 0x9f, 0x94, 0x1e,
+	0xde, 0xdd, 0xaa, 0x63, 0x85, 0xf0, 0x67, 0x76, 0xd9, 0x7e, 0xdf, 0xc0,
+	0x06, 0xef, 0x83, 0x4c, 0x3a, 0x08, 0x7f, 0x7c, 0x20, 0xf6, 0xb0, 0x04,
+	0x73, 0x36, 0xee, 0xe6, 0x79, 0xe3, 0x44, 0x72, 0xa7, 0x3d, 0xaf, 0x60,
+	0xe5, 0x99, 0x78, 0x02, 0x3e, 0x35, 0xbf, 0x51, 0xd2, 0x1c, 0x7b, 0x23,
+	0x7d, 0x25, 0x52, 0x2b, 0x32, 0xe0, 0x6a, 0x1a, 0x1b, 0x92, 0x15, 0xd0,
+	0xd8, 0x1f, 0xf9, 0x34, 0x76, 0x2f, 0xc6, 0x76, 0x4e, 0x8c, 0xca, 0xc0,
+	0x89, 0x81, 0xf8, 0x71, 0xe1, 0xd9, 0xfd, 0x16, 0x6a, 0x4b, 0xe3, 0x9e,
+	0x64, 0x1c, 0xb8, 0x60, 0x3e, 0x28, 0xae, 0x35, 0xde, 0xd3, 0x4f, 0xdf,
+	0x44, 0xd9, 0x75, 0x37, 0xe3, 0xcb, 0xc4, 0xd3, 0x84, 0xaa, 0x83, 0x2d,
+	0xf6, 0x34, 0x61, 0x82, 0xe3, 0xd5, 0x99, 0x50, 0x31, 0xeb, 0xcb, 0xea,
+	0xbb, 0x12, 0x1a, 0xbe, 0x0c, 0xe0, 0x9b, 0xd3, 0xf0, 0xc5, 0x67, 0xd6,
+	0xec, 0xf4, 0x44, 0xec, 0xa8, 0xf4, 0xa9, 0xd8, 0x55, 0xaa, 0x42, 0x1f,
+	0x26, 0xdb, 0x43, 0xda, 0x0a, 0x31, 0xe6, 0xb7, 0x2b, 0xe3, 0xd3, 0x07,
+	0xe9, 0x2a, 0x27, 0xaf, 0x26, 0x55, 0xfe, 0xb6, 0x3d, 0x29, 0x77, 0x49,
+	0xea, 0xa1, 0x9c, 0x3c, 0x0c, 0x9e, 0xd0, 0xf6, 0x2e, 0xae, 0x15, 0xde,
+	0x53, 0xaf, 0x38, 0x7e, 0xae, 0x16, 0xf7, 0xed, 0x51, 0x15, 0x27, 0x01,
+	0xde, 0xe1, 0x1f, 0xf6, 0x81, 0x6e, 0x48, 0x63, 0xb3, 0xa0, 0x41, 0x6d,
+	0xf7, 0x5c, 0x2c, 0x90, 0x7e, 0x07, 0xe8, 0x0f, 0xb7, 0xd8, 0x9b, 0xe1,
+	0x35, 0x7b, 0x73, 0x55, 0xcd, 0xb7, 0x17, 0x30, 0x65, 0x6c, 0xda, 0x9a,
+	0xeb, 0xf4, 0xae, 0xcf, 0x1b, 0xf3, 0xb5, 0x9c, 0xbc, 0x96, 0xe4, 0x7e,
+	0xc0, 0xde, 0xc4, 0x78, 0x4b, 0xeb, 0xfc, 0x80, 0xf5, 0x2b, 0x3e, 0x04,
+	0x0f, 0x26, 0x6c, 0xcb, 0xe8, 0x53, 0x32, 0x78, 0x15, 0x7a, 0xfa, 0x12,
+	0x60, 0x59, 0x55, 0x34, 0xa2, 0xe9, 0x63, 0xb5, 0x72, 0xd7, 0xc7, 0xd0,
+	0xc7, 0xc9, 0x9e, 0x40, 0xce, 0x3c, 0x0c, 0xb9, 0xf7, 0x5a, 0x4d, 0x8c,
+	0xb9, 0x64, 0x20, 0x03, 0xd6, 0x79, 0x2a, 0x0f, 0x9e, 0x4a, 0xef, 0xea,
+	0x5c, 0x93, 0x77, 0xab, 0xaa, 0x3e, 0x2a, 0x99, 0x35, 0x79, 0x17, 0xe4,
+	0xc8, 0x2e, 0x60, 0xbc, 0xa0, 0xec, 0xa6, 0xff, 0x87, 0xbc, 0xd5, 0x4a,
+	0xe7, 0xad, 0xb4, 0x19, 0xc9, 0x75, 0xea, 0x77, 0x9b, 0xe5, 0xde, 0xdd,
+	0xd0, 0xd7, 0x27, 0x48, 0xab, 0x5a, 0xb6, 0xef, 0x93, 0x7f, 0xa3, 0x64,
+	0xfb, 0xcf, 0x5d, 0xd0, 0xe3, 0x6e, 0xce, 0x43, 0x1a, 0xee, 0x82, 0x2c,
+	0xdc, 0x8c, 0x5f, 0x54, 0xfa, 0xcf, 0x38, 0xa0, 0x65, 0xe8, 0x67, 0x17,
+	0xfe, 0x04, 0x68, 0xb8, 0xff, 0x04, 0xf7, 0x95, 0x34, 0xb0, 0xc5, 0xdf,
+	0xcb, 0xab, 0x69, 0x38, 0xd3, 0x42, 0xc3, 0x99, 0x0d, 0x34, 0xfc, 0x7d,
+	0xd2, 0xb0, 0xd2, 0xaf, 0xa0, 0x61, 0xf2, 0x9a, 0xa2, 0xe1, 0x7d, 0xa0,
+	0xe1, 0x8b, 0x3e, 0x8f, 0xad, 0x34, 0xd1, 0xf0, 0xa1, 0x0d, 0x34, 0xbc,
+	0x65, 0x9b, 0xa6, 0xe1, 0xd4, 0x9a, 0x7c, 0x03, 0x3c, 0xa0, 0xa3, 0x3b,
+	0x15, 0xdd, 0x3e, 0x02, 0xba, 0xed, 0x7f, 0x4a, 0xd3, 0x6d, 0xff, 0x33,
+	0xbc, 0x6f, 0xa5, 0xdb, 0x7f, 0xed, 0xd3, 0x6d, 0x9f, 0x2f, 0x17, 0x4f,
+	0xaf, 0xd1, 0x6c, 0xe6, 0x04, 0xe1, 0xbb, 0x1e, 0xcd, 0xf2, 0xac, 0x13,
+	0x76, 0xbc, 0x9a, 0xeb, 0x7f, 0xaf, 0xd1, 0xac, 0x5e, 0xcf, 0xdf, 0x8a,
+	0x66, 0x63, 0xa4, 0xd9, 0xd0, 0x47, 0xd2, 0xec, 0x97, 0x3e, 0x86, 0x66,
+	0x6f, 0xdf, 0x16, 0xd0, 0xec, 0x23, 0x49, 0xca, 0x42, 0x31, 0x1e, 0xe6,
+	0x18, 0x2d, 0x34, 0xbb, 0xda, 0xa2, 0xa3, 0xf5, 0x7a, 0xf7, 0x37, 0xd1,
+	0xec, 0x5d, 0x4d, 0x3a, 0xfa, 0x80, 0x54, 0x0f, 0xb4, 0xd2, 0x6a, 0xdb,
+	0x35, 0x68, 0x35, 0x05, 0x8b, 0x29, 0xc8, 0xfd, 0xfb, 0x55, 0x69, 0xf3,
+	0x6b, 0xdb, 0xb4, 0x0c, 0xa6, 0xfd, 0x32, 0x2c, 0xf1, 0x67, 0x3a, 0xe5,
+	0x4a, 0x54, 0xdb, 0x57, 0x99, 0xdd, 0xcc, 0x09, 0x6e, 0x83, 0xfd, 0x12,
+	0xf6, 0xe1, 0xe6, 0x33, 0xf7, 0x93, 0x39, 0xc2, 0xda, 0x3e, 0xf9, 0xf8,
+	0x35, 0x77, 0xb6, 0xac, 0x39, 0xda, 0x64, 0x97, 0x04, 0x7c, 0xfa, 0x3b,
+	0xdb, 0xd6, 0xf9, 0xf4, 0x86, 0xbf, 0x03, 0x3e, 0x6d, 0xe6, 0xbf, 0x48,
+	0x6e, 0x93, 0xd7, 0xfc, 0x7d, 0x01, 0xb6, 0xcd, 0xc9, 0x17, 0x77, 0x77,
+	0xca, 0x44, 0x49, 0x8c, 0xc7, 0x76, 0xc3, 0xf6, 0x2a, 0x8c, 0xcb, 0xe4,
+	0x09, 0xd8, 0xaa, 0x4f, 0x69, 0x9e, 0x0c, 0x1b, 0x2f, 0x49, 0xaa, 0xaf,
+	0x21, 0x8f, 0x60, 0x0f, 0xae, 0x8c, 0xbe, 0xe0, 0x9f, 0xb7, 0xa9, 0x77,
+	0x19, 0xdc, 0x2b, 0xb0, 0xc5, 0x56, 0xb9, 0xaf, 0x07, 0x06, 0xdc, 0xe7,
+	0xc0, 0xa7, 0xab, 0xee, 0x33, 0xa0, 0x69, 0x17, 0xd7, 0x25, 0x9f, 0xb6,
+	0xef, 0x88, 0x6a, 0xfa, 0x58, 0xe7, 0xdb, 0x0c, 0xf8, 0x36, 0x7d, 0x0d,
+	0xbe, 0x85, 0x1c, 0x50, 0x7c, 0xcb, 0x77, 0x36, 0xfa, 0x4f, 0x6c, 0xe4,
+	0xdb, 0xfe, 0x13, 0x9a, 0x6f, 0xfb, 0xcf, 0x1d, 0x94, 0xb4, 0xa2, 0xf3,
+	0xfa, 0xb6, 0x80, 0x6f, 0xe3, 0xe7, 0xfe, 0xb6, 0x7c, 0xfb, 0xc1, 0x55,
+	0x7c, 0x9b, 0x0e, 0xf8, 0x36, 0xa6, 0xf9, 0x36, 0xed, 0xf3, 0x6d, 0xfa,
+	0x19, 0xde, 0xb7, 0xf2, 0xed, 0xe1, 0x35, 0xbe, 0xed, 0x57, 0xb6, 0xe6,
+	0xe3, 0x6b, 0x7c, 0x3b, 0x7b, 0x82, 0xf0, 0x5d, 0x9f, 0x6f, 0xe1, 0x65,
+	0x4b, 0x56, 0xcd, 0x75, 0x79, 0x5b, 0xc0, 0xb7, 0xe9, 0xbf, 0x13, 0xbe,
+	0xbd, 0xe7, 0x63, 0xf8, 0xf6, 0xd6, 0xe8, 0x27, 0xe7, 0xdb, 0xab, 0x69,
+	0xf8, 0x6a, 0x5d, 0x73, 0x53, 0x74, 0x9d, 0x86, 0x47, 0xfe, 0x3f, 0xea,
+	0x1a, 0xd2, 0x9b, 0xb6, 0xa9, 0x2e, 0x30, 0x5f, 0xd8, 0xf8, 0xc7, 0xfe,
+	0x98, 0xbc, 0xff, 0x57, 0x3d, 0x57, 0x9f, 0x53, 0x6a, 0x5e, 0x9f, 0x4b,
+	0x86, 0x54, 0xfc, 0x28, 0x5f, 0x21, 0xfc, 0xac, 0xeb, 0x53, 0xef, 0x5b,
+	0x87, 0x01, 0xef, 0x12, 0x6c, 0xf1, 0x2c, 0x78, 0xe3, 0x4c, 0x32, 0x23,
+	0x6d, 0x8e, 0x8e, 0xdf, 0x64, 0x41, 0x47, 0xb3, 0x25, 0xae, 0x6f, 0x52,
+	0xbd, 0xfb, 0x34, 0xeb, 0xf2, 0x7b, 0x1b, 0xcc, 0x29, 0xb8, 0x56, 0xee,
+	0x52, 0x10, 0x5b, 0xe6, 0x1a, 0x26, 0xa2, 0xd2, 0x9d, 0xc3, 0x3a, 0x82,
+	0x18, 0x16, 0x6d, 0x67, 0x7e, 0x77, 0x22, 0x38, 0xfb, 0xd3, 0x73, 0xeb,
+	0x58, 0x5d, 0xf0, 0xce, 0x55, 0xe0, 0xbb, 0xd3, 0x2e, 0xa4, 0xcf, 0x25,
+	0xb9, 0x88, 0x97, 0x32, 0x3a, 0xc0, 0xa3, 0x17, 0x4b, 0x1e, 0x68, 0x64,
+	0x1c, 0x3e, 0xe5, 0x1d, 0x92, 0x8f, 0x92, 0x47, 0xbf, 0x2e, 0xe6, 0xd3,
+	0xc3, 0xb2, 0x54, 0xea, 0x90, 0x99, 0x28, 0x7d, 0xab, 0xb0, 0x8a, 0x57,
+	0x5f, 0x39, 0xc0, 0x18, 0x23, 0xfd, 0x31, 0x2d, 0xbf, 0x56, 0x2b, 0x47,
+	0xa2, 0xfa, 0x5d, 0xd2, 0xcd, 0xb2, 0x52, 0xd1, 0xf9, 0xf3, 0x79, 0xc6,
+	0x5b, 0x4b, 0x61, 0xdf, 0xbf, 0xed, 0xc4, 0xde, 0xfc, 0x2c, 0x5c, 0x55,
+	0xb1, 0x6f, 0xae, 0xbf, 0xdd, 0x97, 0x83, 0xd2, 0x59, 0x75, 0xb8, 0xf6,
+	0x66, 0x3f, 0x4e, 0xfb, 0xef, 0xf6, 0x1e, 0xce, 0x47, 0xdd, 0xc4, 0x35,
+	0x46, 0x25, 0x7c, 0xf6, 0xa0, 0x98, 0xa7, 0xc7, 0x25, 0xb4, 0xc8, 0x98,
+	0xc9, 0xc6, 0x58, 0x60, 0xe8, 0xfc, 0x98, 0x8a, 0x3b, 0x39, 0x8b, 0x83,
+	0x3a, 0x26, 0x90, 0xc4, 0xb5, 0x7a, 0xa7, 0x5f, 0x96, 0xba, 0x66, 0x0c,
+	0x65, 0xe3, 0x3e, 0x5f, 0xcb, 0x37, 0xe5, 0xf7, 0x95, 0xb8, 0x27, 0x5f,
+	0x35, 0xd2, 0xce, 0xe8, 0x54, 0xb6, 0x26, 0x53, 0xd9, 0x82, 0xa8, 0x7c,
+	0xbd, 0x74, 0x52, 0xa6, 0xf4, 0xb7, 0xe2, 0xbe, 0x7e, 0xc0, 0xff, 0x0e,
+	0x98, 0xff, 0xad, 0xa3, 0x71, 0xff, 0xd9, 0x9a, 0xe6, 0xb7, 0x71, 0x18,
+	0x2b, 0x5d, 0xa8, 0x31, 0x0e, 0xa0, 0xcf, 0x4f, 0x4d, 0x27, 0xe1, 0x56,
+	0x24, 0xf8, 0x6e, 0x23, 0xeb, 0xc5, 0x0a, 0x7b, 0x43, 0x23, 0x47, 0x65,
+	0x08, 0xbc, 0xb8, 0xd3, 0xb6, 0x20, 0x6b, 0xce, 0x8c, 0x1a, 0xb2, 0x30,
+	0x9a, 0xf3, 0xbf, 0xdf, 0x26, 0xd3, 0xb3, 0xce, 0x60, 0xfc, 0x28, 0xd6,
+	0x99, 0x81, 0x6c, 0x84, 0x4f, 0xa6, 0xa4, 0xdb, 0xc3, 0xb5, 0xe0, 0xdc,
+	0x40, 0xfb, 0x9e, 0xbf, 0xda, 0x78, 0xe1, 0x60, 0xbc, 0x00, 0x6e, 0xff,
+	0x5d, 0xdf, 0x60, 0x5c, 0x3d, 0x5e, 0xc8, 0x1b, 0xb2, 0xf3, 0x32, 0x14,
+	0x9b, 0x57, 0x67, 0x8a, 0xcc, 0x7b, 0x18, 0xd4, 0xb2, 0x54, 0x7d, 0x37,
+	0x26, 0x98, 0x9b, 0xf8, 0x8d, 0xa8, 0xef, 0x30, 0x84, 0x1d, 0xfd, 0x6d,
+	0xc5, 0x2c, 0xd6, 0x9d, 0x2d, 0xf0, 0x0c, 0xb2, 0xcb, 0x3f, 0x77, 0x55,
+	0x71, 0xe5, 0xb5, 0xf6, 0x61, 0xaf, 0x0b, 0x3e, 0xc9, 0x70, 0xdc, 0x52,
+	0xdf, 0x1d, 0x61, 0x4e, 0x80, 0x3e, 0x3b, 0x59, 0x52, 0x78, 0x63, 0x1e,
+	0x83, 0xcc, 0x84, 0xbd, 0x1f, 0x45, 0xf8, 0xee, 0xad, 0x3e, 0x1f, 0x60,
+	0x3d, 0x9e, 0x6b, 0xfc, 0x1e, 0x4d, 0xd8, 0xff, 0x16, 0x1c, 0xeb, 0x3f,
+	0xf0, 0xeb, 0x59, 0x17, 0xc0, 0xbe, 0x7d, 0x46, 0x9f, 0xff, 0x83, 0xf7,
+	0x0b, 0xef, 0x81, 0xf6, 0x17, 0xf8, 0xfe, 0xaa, 0x2c, 0xd5, 0xf1, 0x3b,
+	0xc5, 0x3c, 0xf4, 0xed, 0xc2, 0xf3, 0xb3, 0xe5, 0xba, 0x21, 0xd5, 0x53,
+	0xfa, 0x9b, 0x6c, 0x4b, 0xdf, 0x7c, 0xbf, 0x91, 0x55, 0xb9, 0xb6, 0xc1,
+	0xf7, 0x62, 0xf6, 0xdc, 0xc0, 0xf3, 0xb8, 0x6a, 0x7d, 0x63, 0x39, 0xdf,
+	0xc9, 0xa8, 0x2c, 0x35, 0xc3, 0xb6, 0x7d, 0xc6, 0xf2, 0x82, 0xf9, 0x2d,
+	0xbe, 0x2b, 0xa3, 0x72, 0x85, 0x17, 0x92, 0x0b, 0xfc, 0x3e, 0x9f, 0xbf,
+	0xf7, 0x11, 0xdf, 0x56, 0x55, 0x7c, 0xbb, 0x86, 0x03, 0xd3, 0x63, 0xde,
+	0x28, 0xf9, 0x95, 0x79, 0xa5, 0x5c, 0x37, 0x16, 0x6d, 0x3b, 0x23, 0x59,
+	0xf5, 0xcd, 0x1d, 0x53, 0x2c, 0xac, 0xb3, 0x62, 0x33, 0xae, 0xa3, 0xbe,
+	0x3b, 0x37, 0x9d, 0x2e, 0xfc, 0xe6, 0x0d, 0x41, 0xce, 0x1a, 0xcf, 0x25,
+	0x2d, 0x45, 0x9f, 0xd6, 0xf4, 0xfa, 0x37, 0x9c, 0x66, 0xfc, 0xfa, 0xcd,
+	0x4d, 0x74, 0xd1, 0x2c, 0x9f, 0x18, 0x1e, 0xfc, 0xbf, 0xb8, 0xc6, 0xb3,
+	0x5f, 0x98, 0x55, 0x00, 0x00, 0x00 };
+
+static const u32 bnx2_COM_b09FwData[(0x0/4) + 1] = { 0x0 };
+static const u32 bnx2_COM_b09FwRodata[(0x38/4) + 1] = {
+	0x80080240, 0x80080100, 0x80080080, 0x80080000, 0x00000c80, 0x00003200,
+	0x08000e98, 0x08000ef4, 0x08000f88, 0x08001028, 0x08001074, 0x80080100,
+	0x80080080, 0x80080000, 0x00000000 };
+
+static struct fw_info bnx2_com_fw_09 = {
+	/* Firmware version: 6.2.1b */
+	.ver_major			= 0x6,
+	.ver_minor			= 0x2,
+	.ver_fix			= 0x1,
+
+	.start_addr			= 0x08000118,
+
+	.text_addr			= 0x08000000,
+	.text_len			= 0x5594,
+	.text_index			= 0x0,
+	.gz_text			= bnx2_COM_b09FwText,
+	.gz_text_len			= sizeof(bnx2_COM_b09FwText),
+
+	.data_addr			= 0x00000000,
+	.data_len			= 0x0,
+	.data_index			= 0x0,
+	.data				= bnx2_COM_b09FwData,
+
+	.sbss_addr			= 0x08005608,
+	.sbss_len			= 0x30,
+	.sbss_index			= 0x0,
+
+	.bss_addr			= 0x08005638,
+	.bss_len			= 0x11c,
+	.bss_index			= 0x0,
+
+	.rodata_addr			= 0x08005594,
+	.rodata_len			= 0x38,
+	.rodata_index			= 0x0,
+	.rodata				= bnx2_COM_b09FwRodata,
+};
+
+static u8 bnx2_CP_b09FwText[] = {
+	0xad, 0xbc, 0x0d, 0x78, 0x5b, 0xd5, 0x95, 0x2e, 0xfc, 0x9e, 0x23, 0xc9,
+	0x96, 0x6d, 0xd9, 0x3e, 0x76, 0x14, 0xa3, 0x80, 0x4b, 0xa4, 0xf8, 0xc8,
+	0x11, 0xb1, 0x03, 0x47, 0x8e, 0x02, 0xa2, 0x23, 0x88, 0x9a, 0x38, 0xc1,
+	0x21, 0x21, 0x75, 0x42, 0xda, 0x3a, 0x43, 0xef, 0x45, 0x37, 0x04, 0x08,
+	0x34, 0xb7, 0x63, 0x7a, 0x99, 0x67, 0x5c, 0x6e, 0xda, 0x1c, 0xe2, 0xfc,
+	0x18, 0xa2, 0x1f, 0xdb, 0x38, 0x3f, 0x7c, 0x0f, 0xcf, 0xa0, 0xd8, 0x8e,
+	0x1d, 0xa8, 0x2c, 0x01, 0x65, 0x66, 0xd2, 0xfb, 0xb5, 0xc5, 0x37, 0x10,
+	0x08, 0x94, 0x9f, 0xb4, 0xb7, 0x9d, 0xcb, 0xbd, 0x5f, 0x6f, 0xf1, 0x84,
+	0x40, 0x33, 0xfc, 0x06, 0xca, 0xf4, 0x86, 0x69, 0xc3, 0xf9, 0xde, 0x75,
+	0x64, 0x05, 0x93, 0xa1, 0x3f, 0xf7, 0xf9, 0x3e, 0x3f, 0x8f, 0x1e, 0x49,
+	0x47, 0x67, 0xaf, 0xbd, 0xf6, 0xda, 0x6b, 0xbd, 0xeb, 0x5d, 0x7b, 0xef,
+	0xe3, 0x10, 0x50, 0x89, 0xe9, 0xbf, 0x6a, 0xbe, 0x2e, 0xbf, 0xb2, 0xfb,
+	0x96, 0x8d, 0xe1, 0xcb, 0xdb, 0xe4, 0xbb, 0x53, 0x51, 0xcb, 0xf0, 0x79,
+	0x7f, 0x31, 0x44, 0x2f, 0xbc, 0xe4, 0xff, 0xdc, 0x1b, 0xff, 0xc0, 0x5f,
+	0x14, 0x01, 0x85, 0x6f, 0x2d, 0xd3, 0x5f, 0x9d, 0x7c, 0xc5, 0xab, 0x1d,
+	0x7f, 0xf0, 0x76, 0xfe, 0xa2, 0x95, 0xf4, 0x93, 0x17, 0xdc, 0x6a, 0x2c,
+	0xb7, 0x61, 0xa9, 0x0e, 0xb7, 0x23, 0xf6, 0xd1, 0x4d, 0xb7, 0xe8, 0x6c,
+	0x9d, 0x6b, 0xf1, 0x2f, 0xc3, 0x39, 0xcb, 0xf4, 0x3a, 0x21, 0xd7, 0xbf,
+	0x10, 0xfb, 0xfd, 0xc3, 0x3f, 0xba, 0x2a, 0x70, 0x26, 0xeb, 0x80, 0x5b,
+	0x8b, 0x65, 0xa1, 0x35, 0xc3, 0xdd, 0xc8, 0x36, 0x0f, 0xcd, 0xff, 0xad,
+	0x8a, 0x9a, 0x92, 0xac, 0x27, 0xad, 0x1f, 0xcd, 0x07, 0x0e, 0x16, 0x9c,
+	0x18, 0x2e, 0xb8, 0x31, 0x52, 0xf0, 0x60, 0xb4, 0xa0, 0xe1, 0x50, 0xc1,
+	0x8b, 0xb1, 0x82, 0x0f, 0xe3, 0x85, 0x46, 0x1c, 0x2e, 0xf8, 0xf1, 0x48,
+	0x41, 0xc7, 0xa3, 0x85, 0x10, 0xbe, 0x57, 0x68, 0x45, 0xae, 0x60, 0x60,
+	0xa2, 0x10, 0x41, 0xbe, 0x10, 0x45, 0xa1, 0x10, 0xc3, 0x91, 0x42, 0x1c,
+	0x3f, 0x28, 0xb4, 0xe3, 0x87, 0x85, 0x0e, 0x3c, 0x55, 0xf0, 0xbb, 0x8b,
+	0xb2, 0xf9, 0x39, 0xc3, 0x6b, 0x19, 0xfe, 0x96, 0xe1, 0x3d, 0x19, 0xde,
+	0x9b, 0x61, 0x9b, 0x0c, 0xdb, 0x66, 0x28, 0x23, 0x43, 0x59, 0x19, 0xca,
+	0xcc, 0x50, 0x76, 0x86, 0x7d, 0x64, 0xd8, 0x57, 0x86, 0x7d, 0x66, 0xd8,
+	0x77, 0x86, 0x3a, 0x64, 0xa8, 0x4b, 0x86, 0x3a, 0x65, 0xa8, 0x5b, 0x66,
+	0x35, 0x7e, 0x34, 0xdf, 0x97, 0xb8, 0x24, 0x66, 0x74, 0xde, 0x93, 0x09,
+	0x75, 0xfe, 0xe7, 0xab, 0xdc, 0x88, 0xd3, 0x1c, 0xf7, 0x14, 0x02, 0xbe,
+	0x2c, 0x02, 0x9a, 0x89, 0x40, 0xc8, 0x04, 0x12, 0xce, 0x18, 0x12, 0xe5,
+	0x31, 0x37, 0xca, 0xf4, 0x32, 0x24, 0xb4, 0x1e, 0xff, 0x8e, 0x08, 0xb0,
+	0x34, 0xe9, 0xf6, 0x9f, 0xcc, 0x01, 0xb7, 0x24, 0xdd, 0x98, 0x72, 0x78,
+	0xfc, 0xaf, 0xe7, 0xee, 0xad, 0x2d, 0xce, 0x75, 0x1c, 0x0e, 0x1d, 0x09,
+	0x35, 0x26, 0xd7, 0xe1, 0x5f, 0x96, 0x93, 0xb6, 0x4e, 0xec, 0xca, 0xdc,
+	0xed, 0x7f, 0x23, 0x19, 0xd0, 0x76, 0xa1, 0xc5, 0x37, 0x8c, 0x72, 0x24,
+	0xbc, 0x81, 0x10, 0x90, 0x3d, 0x77, 0x7f, 0x46, 0x81, 0x4b, 0x9f, 0x85,
+	0xf6, 0x83, 0x4e, 0xdc, 0x97, 0x09, 0xc4, 0x75, 0xc5, 0x89, 0xbe, 0x82,
+	0xb4, 0x0d, 0x68, 0x59, 0xfe, 0xbe, 0x83, 0xba, 0xee, 0xcc, 0xcc, 0xc2,
+	0xae, 0x7e, 0x0b, 0x4f, 0x1b, 0x4d, 0xda, 0x08, 0xe7, 0x73, 0xbb, 0xfd,
+	0xfb, 0x2c, 0x98, 0x59, 0xf9, 0xfd, 0x34, 0xed, 0xac, 0xe1, 0x31, 0xda,
+	0xf5, 0xa9, 0x42, 0x1d, 0xee, 0xeb, 0xaf, 0xc3, 0xee, 0xfe, 0x10, 0x54,
+	0xdd, 0x42, 0x28, 0x1c, 0x42, 0xd9, 0xd5, 0x16, 0x5e, 0x37, 0x5a, 0xb1,
+	0x53, 0x57, 0x70, 0xa2, 0xb5, 0x01, 0x1b, 0xb5, 0x46, 0xec, 0xd0, 0xbf,
+	0x89, 0xa2, 0x2d, 0xb3, 0xe7, 0x32, 0x19, 0x24, 0x5c, 0x31, 0xa7, 0xaa,
+	0xea, 0xd7, 0xe2, 0xbd, 0xbd, 0x31, 0xbc, 0xbb, 0x17, 0x5f, 0xaf, 0x81,
+	0x65, 0xe5, 0xc2, 0xc1, 0xce, 0x2d, 0x8a, 0xe6, 0x7f, 0x34, 0x47, 0x5f,
+	0x5a, 0xe7, 0xa4, 0x3c, 0xf8, 0x87, 0x73, 0x33, 0xfd, 0x86, 0xfd, 0xd1,
+	0xa6, 0x8f, 0x65, 0x44, 0x17, 0x1f, 0xed, 0x38, 0x46, 0x5f, 0x2f, 0x8e,
+	0x69, 0x67, 0xe6, 0x55, 0xea, 0xe4, 0xa7, 0x3e, 0x8d, 0xf8, 0x3e, 0xe7,
+	0xfa, 0x09, 0xea, 0xf6, 0x78, 0x41, 0x74, 0x0c, 0x1c, 0x30, 0x51, 0x87,
+	0xd1, 0xfe, 0x46, 0x3c, 0xa6, 0xb7, 0xe2, 0x71, 0xea, 0xd8, 0x6b, 0x84,
+	0xb0, 0x31, 0xda, 0x4f, 0x7d, 0x14, 0xac, 0x6b, 0x3d, 0x30, 0xad, 0x57,
+	0xc0, 0x0f, 0x55, 0x45, 0xbc, 0x3e, 0x10, 0xf2, 0xab, 0x22, 0xf3, 0x53,
+	0x7d, 0x53, 0x19, 0x98, 0xee, 0x98, 0xe8, 0x7c, 0x2d, 0x72, 0xd4, 0xf7,
+	0x7b, 0x7b, 0x83, 0xc6, 0x66, 0x15, 0xab, 0x3d, 0xd4, 0xf9, 0xce, 0x70,
+	0x30, 0xba, 0x80, 0x3a, 0x8f, 0xe7, 0x54, 0x8e, 0xc7, 0xeb, 0x1f, 0xa3,
+	0xee, 0xf1, 0x75, 0x2a, 0x75, 0xa7, 0x2e, 0xf4, 0x85, 0xef, 0xd3, 0x17,
+	0x9e, 0xa0, 0x2f, 0x3c, 0x6e, 0xeb, 0x1d, 0xa2, 0xce, 0xc5, 0x39, 0x1a,
+	0xce, 0x4d, 0x51, 0xdf, 0x99, 0x7a, 0x36, 0x52, 0x77, 0x24, 0xea, 0x62,
+	0x77, 0xfb, 0x9b, 0xd2, 0xb4, 0x77, 0xc6, 0xb2, 0x4e, 0x18, 0x96, 0xf5,
+	0xa1, 0xe1, 0xa1, 0xfd, 0x32, 0xf4, 0x83, 0x92, 0x3e, 0x73, 0xcd, 0xb2,
+	0x18, 0xda, 0x19, 0x3e, 0xd6, 0xb1, 0x48, 0x30, 0x5a, 0xaf, 0xa8, 0x70,
+	0xea, 0x9a, 0x7f, 0x7e, 0x3e, 0x60, 0xd0, 0x3e, 0xfe, 0x60, 0x1e, 0x7e,
+	0x3d, 0x4f, 0x59, 0x9f, 0xe9, 0x37, 0xa0, 0x4d, 0x42, 0xfa, 0xf5, 0xb3,
+	0xff, 0xa9, 0xe9, 0xb9, 0x13, 0xf9, 0x3e, 0xf6, 0x29, 0xfd, 0x8b, 0x6c,
+	0xcb, 0xfa, 0xc0, 0x80, 0xae, 0x21, 0x68, 0x0e, 0xd0, 0xff, 0x1c, 0x31,
+	0xcd, 0xdf, 0x9d, 0xe3, 0xef, 0xe7, 0x65, 0x14, 0xe7, 0x63, 0x63, 0xce,
+	0x3f, 0x3d, 0x86, 0x00, 0x55, 0xb0, 0xc7, 0x40, 0x5f, 0x2d, 0xc9, 0x11,
+	0xb9, 0xe8, 0xec, 0x4b, 0x6e, 0xb3, 0x1c, 0xfa, 0x5d, 0xa6, 0x1a, 0xd1,
+	0xa3, 0x0e, 0xc5, 0x13, 0x7d, 0x23, 0x12, 0xc6, 0x5c, 0x1d, 0xe6, 0x9c,
+	0x18, 0x3a, 0x77, 0xe6, 0x2a, 0xcd, 0xba, 0xd8, 0x0f, 0x6f, 0xdc, 0x9e,
+	0x73, 0x63, 0x49, 0x61, 0xb5, 0x0b, 0x35, 0x71, 0x0c, 0x14, 0x2a, 0xf9,
+	0x2e, 0x63, 0xff, 0xce, 0xf4, 0x18, 0xdd, 0x6e, 0x23, 0x5d, 0xf1, 0xb5,
+	0xda, 0xd8, 0x19, 0xcb, 0xa7, 0xeb, 0x09, 0x9f, 0x8a, 0xa9, 0xf7, 0x16,
+	0xe3, 0xcc, 0xbb, 0x8b, 0x9b, 0x3b, 0xd3, 0x4a, 0x73, 0x57, 0x4a, 0x51,
+	0xb0, 0x62, 0xa1, 0x82, 0x3b, 0x16, 0xae, 0xc6, 0xae, 0x42, 0x45, 0x35,
+	0x6a, 0x3a, 0x71, 0x5f, 0xa1, 0x21, 0x41, 0xbb, 0xe0, 0xb9, 0xa4, 0x37,
+	0xe1, 0x26, 0x3e, 0xb8, 0x52, 0x96, 0xe5, 0x88, 0xe9, 0xfe, 0xd7, 0x71,
+	0xe3, 0x8d, 0x6a, 0xec, 0xe8, 0x15, 0x2e, 0x7c, 0x05, 0xdb, 0x35, 0x6c,
+	0x3d, 0x11, 0xf9, 0x50, 0x51, 0xf7, 0x6d, 0x81, 0x39, 0xee, 0x40, 0x5c,
+	0xdb, 0xca, 0xf7, 0x4b, 0x2f, 0x5d, 0x15, 0xdd, 0x82, 0x3d, 0xe3, 0x67,
+	0x79, 0xdd, 0xc9, 0x6b, 0x9d, 0x48, 0x65, 0x2e, 0xbd, 0x74, 0x75, 0x74,
+	0x2b, 0x92, 0xe3, 0xf2, 0xd9, 0x85, 0x6c, 0xdd, 0x6a, 0xf4, 0x32, 0xb6,
+	0x6b, 0xf4, 0xad, 0x48, 0x8f, 0x6f, 0xe1, 0x4b, 0xbe, 0xbb, 0x18, 0x97,
+	0x5b, 0xb1, 0x73, 0xbf, 0x1f, 0xb5, 0xbc, 0x9e, 0xe1, 0xf5, 0xcc, 0xb8,
+	0x7c, 0xbf, 0x17, 0x47, 0x5a, 0xe9, 0xbf, 0x37, 0x9a, 0x8c, 0xb1, 0x2d,
+	0xd8, 0xb1, 0x5f, 0x71, 0x0e, 0xf0, 0xbb, 0x7f, 0x1d, 0x9c, 0x4e, 0xbd,
+	0x8a, 0x6d, 0x24, 0x4e, 0x67, 0xda, 0x55, 0xec, 0xc9, 0xfb, 0xa4, 0xed,
+	0xf8, 0x77, 0x61, 0x8e, 0xdc, 0x4d, 0x9d, 0xc4, 0xbe, 0x83, 0x7c, 0x8f,
+	0x3a, 0xaf, 0x4b, 0xc6, 0xb4, 0x39, 0xba, 0x65, 0x59, 0x86, 0x03, 0x1f,
+	0xcf, 0xb2, 0xac, 0xc3, 0xc6, 0x0a, 0xa0, 0xae, 0x93, 0xf1, 0x2e, 0xf7,
+	0x7e, 0x17, 0xbb, 0x1e, 0xd0, 0x31, 0xd9, 0x29, 0x6d, 0x65, 0x2c, 0x5b,
+	0x71, 0x60, 0xbf, 0x8c, 0x4d, 0x64, 0x48, 0x7b, 0xb8, 0x95, 0x98, 0x89,
+	0x68, 0x6e, 0x77, 0x79, 0xd1, 0xae, 0x48, 0xd4, 0xc6, 0xdc, 0xee, 0x77,
+	0x53, 0x67, 0xac, 0x1a, 0xbd, 0x26, 0x51, 0x15, 0xeb, 0x73, 0x78, 0x9a,
+	0x35, 0xdc, 0xb9, 0x38, 0xd0, 0x41, 0xff, 0xa7, 0xcf, 0xeb, 0xfe, 0xbc,
+	0x52, 0xf1, 0x35, 0x2d, 0xa6, 0x21, 0x49, 0xfc, 0xbb, 0x9f, 0x71, 0x74,
+	0x5f, 0xa1, 0x09, 0xfd, 0x9a, 0x17, 0x3b, 0x0b, 0x17, 0xea, 0x2c, 0x3a,
+	0xae, 0x87, 0x59, 0x30, 0x3b, 0x5d, 0x08, 0x74, 0xac, 0x20, 0x86, 0x34,
+	0xa7, 0x3a, 0x14, 0xc6, 0xa3, 0xf9, 0x53, 0x14, 0xf5, 0xd8, 0xf1, 0xff,
+	0xab, 0x1e, 0xaf, 0x59, 0xfd, 0x5e, 0xd1, 0x43, 0x41, 0x9d, 0xbe, 0x9e,
+	0x3e, 0x33, 0x53, 0x9f, 0x92, 0x6f, 0xff, 0x67, 0xf6, 0xff, 0x5d, 0xf4,
+	0x8e, 0x58, 0x56, 0xaf, 0x11, 0x47, 0x1f, 0xb1, 0x7a, 0x77, 0x26, 0x1e,
+	0x20, 0xbc, 0x9a, 0xae, 0x58, 0x27, 0xd4, 0x58, 0xb0, 0x63, 0x3b, 0xfb,
+	0xa6, 0x9f, 0x28, 0x95, 0x31, 0x38, 0x73, 0x91, 0x29, 0xf7, 0x4b, 0x49,
+	0xbd, 0xeb, 0x51, 0x85, 0x73, 0x59, 0x27, 0x6a, 0x4d, 0xb9, 0x5f, 0x49,
+	0x2a, 0xf8, 0xb5, 0x1e, 0xec, 0x7e, 0x4b, 0x99, 0x72, 0xbf, 0x9c, 0xd3,
+	0x30, 0x27, 0x15, 0xe8, 0x32, 0x95, 0x28, 0x7e, 0x90, 0xf3, 0xc2, 0x97,
+	0x22, 0xf6, 0xe7, 0x0c, 0x3c, 0xf2, 0x19, 0x4c, 0xfa, 0xdc, 0x3f, 0xd3,
+	0x41, 0x5f, 0xdc, 0x94, 0xf4, 0x63, 0xbb, 0x71, 0xce, 0x8a, 0x6b, 0x32,
+	0xde, 0x29, 0x8e, 0x17, 0x4a, 0x4d, 0x4c, 0xf7, 0xe5, 0x95, 0x7f, 0xb2,
+	0x12, 0x5e, 0xb9, 0x8d, 0xfa, 0xd9, 0xb8, 0xda, 0x85, 0x3d, 0xcc, 0x3b,
+	0x3b, 0x33, 0x67, 0xac, 0x2a, 0xc6, 0x49, 0x59, 0xec, 0x62, 0x8c, 0x0f,
+	0xe9, 0x78, 0x24, 0x69, 0x59, 0xef, 0x18, 0x93, 0x51, 0x0f, 0xf4, 0xce,
+	0xb7, 0x11, 0x88, 0x2f, 0x50, 0x62, 0x38, 0x9e, 0xd3, 0x31, 0x9a, 0x8c,
+	0xe1, 0xe9, 0x64, 0x93, 0xd6, 0x8b, 0x45, 0x88, 0xfb, 0x44, 0x8e, 0x1f,
+	0x13, 0xd4, 0x7b, 0x38, 0xd8, 0x89, 0xda, 0x58, 0x14, 0x47, 0xa9, 0x37,
+	0xe3, 0x85, 0x72, 0x0c, 0xbc, 0xfc, 0x67, 0xe8, 0xca, 0x5c, 0x83, 0x07,
+	0xa9, 0x6b, 0x74, 0xd1, 0x39, 0x0b, 0xb3, 0xdc, 0x38, 0x69, 0x5c, 0xc4,
+	0x38, 0x80, 0x59, 0x11, 0x73, 0x3b, 0xfb, 0x92, 0x1a, 0x0e, 0xe7, 0x3c,
+	0xce, 0xde, 0xa4, 0x17, 0x23, 0x8c, 0x7d, 0xc6, 0xb0, 0xe9, 0xa3, 0xdc,
+	0x39, 0xb4, 0x7f, 0x7e, 0xa8, 0x11, 0x85, 0xa1, 0x80, 0xf1, 0x8a, 0xe2,
+	0xc3, 0xd8, 0xe8, 0xc5, 0x98, 0x18, 0x52, 0x30, 0x1e, 0xa4, 0xee, 0xfc,
+	0xfc, 0xbd, 0xa1, 0x4b, 0x91, 0x1b, 0x72, 0x60, 0x8f, 0x6d, 0x57, 0x1b,
+	0xf3, 0xa6, 0xdf, 0x2f, 0x46, 0x76, 0x14, 0xce, 0x05, 0x29, 0x0d, 0x8f,
+	0xe6, 0x18, 0x12, 0x29, 0x2f, 0x46, 0x73, 0x8c, 0xf0, 0x4a, 0x91, 0xed,
+	0xc7, 0x70, 0x12, 0xfc, 0x2c, 0xe3, 0x78, 0x4f, 0x29, 0xe6, 0xb6, 0x62,
+	0xae, 0x79, 0xaa, 0xd0, 0x36, 0x9d, 0xe7, 0xe3, 0xcc, 0x59, 0xfc, 0x9e,
+	0x11, 0x1b, 0x57, 0xc2, 0x7f, 0xa8, 0x12, 0xa1, 0xbd, 0x4e, 0xcc, 0xdf,
+	0x2b, 0xf9, 0xc0, 0xb2, 0x5c, 0xe1, 0x5a, 0xbc, 0x69, 0x60, 0x76, 0x19,
+	0x82, 0xfe, 0x61, 0xbb, 0x3f, 0x13, 0x9b, 0x72, 0x70, 0xbb, 0x28, 0xfb,
+	0x50, 0xd2, 0xc3, 0xb8, 0x9d, 0x99, 0xbb, 0x34, 0x8c, 0x68, 0x01, 0xa6,
+	0x5b, 0x85, 0x18, 0xea, 0x34, 0x9c, 0x04, 0xed, 0x31, 0x42, 0xe0, 0xd3,
+	0x28, 0x43, 0x7b, 0xa7, 0x42, 0x8e, 0x61, 0xfa, 0x34, 0x8c, 0x9e, 0xdb,
+	0x3d, 0xbf, 0x12, 0xa6, 0x37, 0xe0, 0xbb, 0x1d, 0x72, 0x4d, 0x45, 0xc5,
+	0xe5, 0xbf, 0xb1, 0xfc, 0x5f, 0x11, 0x59, 0x1e, 0xfa, 0xe3, 0x85, 0x39,
+	0x09, 0xd8, 0x9c, 0x14, 0x7f, 0xd3, 0x69, 0xb7, 0x88, 0x2a, 0x39, 0x46,
+	0xb8, 0x4a, 0xb1, 0xff, 0x0d, 0x1c, 0x9b, 0xb4, 0x97, 0xfc, 0xeb, 0xf4,
+	0xed, 0xa4, 0x41, 0x9c, 0xbc, 0xbe, 0x23, 0x79, 0x9c, 0x3a, 0x45, 0xa8,
+	0x8f, 0xce, 0x39, 0x35, 0xf0, 0x63, 0xf2, 0x92, 0x7f, 0x20, 0x3f, 0xf9,
+	0x7b, 0xf2, 0x94, 0xbf, 0x23, 0x5f, 0x79, 0xf2, 0x33, 0x39, 0x6d, 0x2d,
+	0xe7, 0x46, 0xf4, 0x8f, 0x63, 0x47, 0xa6, 0x0c, 0xbb, 0x87, 0x2a, 0xd1,
+	0x37, 0xd4, 0x64, 0x9c, 0x66, 0x2e, 0xfa, 0x85, 0xb1, 0x0a, 0xd9, 0xfa,
+	0x88, 0x8d, 0xfd, 0x7b, 0x78, 0x3d, 0x39, 0xd4, 0xc4, 0x7c, 0x6a, 0x59,
+	0x4b, 0xc3, 0x2d, 0x1d, 0xc3, 0xcc, 0x6d, 0xfe, 0xd9, 0x01, 0x7f, 0x56,
+	0x0d, 0xf8, 0xe3, 0x70, 0x21, 0xd3, 0x4a, 0x50, 0x9d, 0x2d, 0xb9, 0xd1,
+	0x89, 0x59, 0xfa, 0x7f, 0x55, 0x50, 0x13, 0xf0, 0x27, 0xd4, 0x38, 0xe3,
+	0x25, 0xd0, 0x9f, 0x50, 0xdb, 0x19, 0xd7, 0x95, 0xf8, 0x68, 0x28, 0x60,
+	0x26, 0xd4, 0x35, 0x48, 0xd4, 0x5b, 0xd6, 0x40, 0x1b, 0xba, 0x1b, 0x62,
+	0x88, 0x7b, 0x63, 0xf0, 0x5f, 0xca, 0x5c, 0x78, 0x51, 0xac, 0x0b, 0x0f,
+	0x92, 0xcf, 0x44, 0x33, 0xba, 0xaf, 0xc1, 0xf1, 0x65, 0xdc, 0xad, 0xb5,
+	0x9c, 0xed, 0x55, 0xaf, 0xc4, 0xd4, 0x45, 0x32, 0x47, 0xd7, 0xe1, 0xbb,
+	0x5a, 0x3b, 0xf9, 0xc7, 0x17, 0x31, 0xe9, 0x55, 0x88, 0x55, 0x4d, 0x9a,
+	0x83, 0xfd, 0x36, 0xa9, 0x96, 0xd5, 0x69, 0x7c, 0x60, 0xa1, 0x81, 0xf2,
+	0x0c, 0xe9, 0xcb, 0x8f, 0x3a, 0xfa, 0x93, 0x46, 0x7f, 0xaa, 0xcb, 0x57,
+	0xe2, 0xed, 0x21, 0x98, 0x17, 0xc5, 0x02, 0x9d, 0xab, 0xd4, 0x4a, 0xbc,
+	0x35, 0x5a, 0x89, 0x7f, 0x1e, 0x72, 0xe2, 0xf4, 0x90, 0x65, 0x35, 0x71,
+	0x4e, 0xcb, 0xc2, 0x58, 0xc8, 0x39, 0x3d, 0x73, 0x2b, 0x4c, 0x7c, 0xc2,
+	0x7b, 0x7f, 0x33, 0xe4, 0xc3, 0x6f, 0x87, 0xae, 0xc4, 0x7f, 0xab, 0x8f,
+	0x07, 0xea, 0xc9, 0x0b, 0x2c, 0xfa, 0xe9, 0x47, 0xc9, 0xc0, 0xe6, 0x53,
+	0x8e, 0xc0, 0x24, 0x79, 0x68, 0xcf, 0xa8, 0x12, 0xe8, 0x3e, 0xa0, 0x06,
+	0x12, 0xaf, 0x28, 0x5e, 0xbc, 0xcb, 0x78, 0x78, 0x27, 0xd7, 0x14, 0x7d,
+	0x82, 0xfd, 0xff, 0x8b, 0x71, 0xc4, 0xca, 0x36, 0x88, 0xed, 0xc4, 0x4e,
+	0xb4, 0x35, 0xf9, 0xdb, 0x3f, 0x30, 0x2f, 0xff, 0x3d, 0xf9, 0xdb, 0xdf,
+	0x51, 0x9f, 0x27, 0xff, 0x4d, 0xce, 0x96, 0x79, 0x8d, 0x72, 0x5e, 0x5f,
+	0xb4, 0xfe, 0xc6, 0x2b, 0x63, 0x3a, 0x59, 0x23, 0xb6, 0x82, 0x1a, 0xf0,
+	0xc5, 0x21, 0xdf, 0x9f, 0xb7, 0x26, 0x35, 0x19, 0x5f, 0x53, 0x77, 0x77,
+	0xd1, 0x7e, 0x9b, 0x9f, 0x56, 0x4e, 0x71, 0x9e, 0x2d, 0xeb, 0x89, 0xf0,
+	0xf4, 0xef, 0xde, 0xd2, 0x38, 0xf3, 0xbc, 0x2e, 0x63, 0xbd, 0xcd, 0x59,
+	0x94, 0xf1, 0xff, 0xf0, 0xbb, 0xc8, 0x91, 0xcf, 0x57, 0x57, 0xf0, 0x1a,
+	0xb9, 0x47, 0xe9, 0x1a, 0xfd, 0xdf, 0xf6, 0xf7, 0xe7, 0xf8, 0x5d, 0x74,
+	0x17, 0x1f, 0xf9, 0x63, 0x7e, 0x21, 0x3e, 0x61, 0xd0, 0x87, 0x2e, 0x51,
+	0xc4, 0xe7, 0x66, 0xe9, 0xd6, 0x36, 0x67, 0xcc, 0x2d, 0x38, 0xe4, 0x57,
+	0x63, 0x82, 0xbf, 0xdd, 0xf0, 0xe7, 0x2c, 0x6b, 0x5f, 0xc4, 0xc4, 0xdf,
+	0x44, 0x1c, 0x58, 0x17, 0x99, 0xac, 0x9f, 0x1d, 0x53, 0xe0, 0xd5, 0x45,
+	0x2f, 0xd3, 0xaa, 0xd3, 0x97, 0xab, 0x25, 0xae, 0xbb, 0x5b, 0xfc, 0x87,
+	0xe3, 0xbf, 0x2f, 0xf3, 0x0e, 0xde, 0x4a, 0x9e, 0xc6, 0xe9, 0x64, 0x8b,
+	0xb1, 0x4a, 0x69, 0x0a, 0x55, 0x28, 0x4d, 0xda, 0x18, 0x63, 0x23, 0xee,
+	0x6d, 0xf2, 0xad, 0x52, 0x6a, 0xf8, 0x2e, 0x7e, 0xde, 0x92, 0x18, 0x51,
+	0xab, 0x60, 0xd6, 0x15, 0x71, 0xdd, 0x15, 0x7b, 0x07, 0xef, 0xb1, 0xcd,
+	0xbb, 0x49, 0x8f, 0x6f, 0x34, 0xe9, 0x43, 0xba, 0x70, 0x23, 0x01, 0xc6,
+	0x8b, 0x14, 0xf5, 0x23, 0xef, 0xc3, 0x47, 0x13, 0xd2, 0x06, 0x78, 0x8a,
+	0x78, 0xf5, 0xf1, 0x5f, 0x28, 0xc4, 0x9c, 0x7f, 0xb2, 0x70, 0x91, 0x8d,
+	0x97, 0xca, 0xc6, 0x24, 0x3c, 0x65, 0x7a, 0x05, 0x56, 0xd8, 0xb5, 0x01,
+	0x94, 0xcd, 0x49, 0xd3, 0x70, 0x2e, 0x24, 0x10, 0xad, 0xb7, 0x31, 0x4a,
+	0xb9, 0x23, 0x79, 0x6f, 0xb8, 0x69, 0xa1, 0x47, 0x72, 0xa8, 0xfd, 0xfd,
+	0xd1, 0xa4, 0x13, 0x2b, 0xea, 0x68, 0x3b, 0xde, 0x3b, 0x96, 0xbc, 0xd7,
+	0x3a, 0x46, 0x6e, 0x37, 0x6a, 0x40, 0xa9, 0x4a, 0xdf, 0xc1, 0xb1, 0xe8,
+	0xa8, 0xca, 0x7f, 0xd9, 0x41, 0x0c, 0xb1, 0xef, 0x4d, 0x25, 0xb1, 0x28,
+	0xb7, 0x70, 0x5e, 0x49, 0x4f, 0x77, 0x79, 0xec, 0x00, 0x7e, 0x4d, 0x1d,
+	0xde, 0xd3, 0xc5, 0x36, 0x07, 0x70, 0x79, 0xae, 0x78, 0xdf, 0xf6, 0xa4,
+	0x43, 0xc6, 0x65, 0x73, 0xcd, 0xc4, 0x57, 0x11, 0x97, 0x6b, 0x0f, 0x27,
+	0xa1, 0x1c, 0x48, 0x06, 0x48, 0x14, 0xf5, 0xe3, 0x1f, 0x38, 0xe2, 0x57,
+	0xcf, 0xc1, 0x36, 0xd4, 0x2e, 0x0a, 0x76, 0xbf, 0x8f, 0xe0, 0xe6, 0x9f,
+	0x29, 0x86, 0x3b, 0x95, 0x83, 0x92, 0xe4, 0x3d, 0x3b, 0xf9, 0xda, 0x13,
+	0xd4, 0x8d, 0xbb, 0x94, 0xf8, 0xda, 0x32, 0xde, 0x33, 0x62, 0x04, 0x3b,
+	0x96, 0x29, 0xc1, 0x78, 0x1b, 0xef, 0xe9, 0xcb, 0x89, 0xac, 0xa8, 0xe2,
+	0xcc, 0xd7, 0x38, 0xa6, 0xeb, 0x33, 0x45, 0x30, 0xb7, 0x96, 0x3c, 0xf1,
+	0x41, 0x62, 0xf4, 0xd9, 0x41, 0x0b, 0x8e, 0x45, 0x1e, 0xfc, 0x15, 0xf9,
+	0xc7, 0x5c, 0xfd, 0x7f, 0x59, 0xdb, 0xa6, 0xc7, 0xbc, 0x23, 0xb9, 0x66,
+	0x76, 0x71, 0x5e, 0x4a, 0x63, 0xd1, 0xa3, 0xfb, 0xe0, 0xf1, 0x8d, 0xe7,
+	0xe6, 0xf3, 0xbb, 0x6d, 0x53, 0xf6, 0xfb, 0xbf, 0x59, 0xa7, 0x30, 0x92,
+	0xf5, 0xd2, 0x3d, 0x2d, 0xda, 0x28, 0x24, 0xee, 0x2a, 0x88, 0x15, 0xc2,
+	0x0b, 0xe3, 0x21, 0x17, 0xe4, 0x9a, 0x03, 0x59, 0x67, 0xdc, 0xe7, 0xc0,
+	0xef, 0xad, 0xf8, 0x7a, 0xb9, 0x56, 0x89, 0x44, 0x67, 0x8b, 0xcf, 0x89,
+	0x96, 0xe8, 0x4e, 0xe2, 0xc0, 0xd4, 0xfa, 0xa5, 0xfc, 0x2d, 0x68, 0x3c,
+	0x8d, 0x26, 0xff, 0x4e, 0xc8, 0xe7, 0x8f, 0x99, 0xa7, 0x96, 0x4a, 0x5b,
+	0xde, 0x53, 0xe4, 0x7c, 0x4f, 0x13, 0x67, 0x76, 0x18, 0x16, 0x9e, 0x35,
+	0x60, 0x96, 0xc7, 0x8e, 0x28, 0x27, 0x93, 0x9f, 0x58, 0x71, 0x27, 0x56,
+	0x33, 0x36, 0x0d, 0xd2, 0x7d, 0xbf, 0x3b, 0x16, 0xf4, 0x1f, 0x67, 0x75,
+	0xe7, 0x88, 0x99, 0xca, 0x54, 0x6e, 0x87, 0xf2, 0x46, 0xae, 0x4f, 0x39,
+	0x95, 0x93, 0xb6, 0x47, 0x94, 0xd7, 0x73, 0x92, 0x7b, 0x1b, 0xfd, 0xc7,
+	0x92, 0x67, 0x2c, 0x72, 0x49, 0xb5, 0x97, 0x73, 0xb5, 0xcb, 0x20, 0xf1,
+	0xd3, 0xf4, 0xd0, 0x30, 0xf5, 0x3d, 0x14, 0x81, 0xb1, 0xdb, 0x70, 0x61,
+	0x4a, 0x83, 0xa7, 0xd7, 0x70, 0xca, 0x77, 0x72, 0x4b, 0x69, 0xdb, 0xe8,
+	0xdf, 0x99, 0x3b, 0x67, 0x09, 0x77, 0x92, 0xef, 0x87, 0x22, 0xa5, 0x6b,
+	0xbf, 0xb1, 0x26, 0xd7, 0xab, 0xfc, 0xfe, 0x98, 0x8c, 0x9b, 0x6d, 0x67,
+	0x62, 0xbb, 0xd4, 0x40, 0x2a, 0x79, 0x73, 0x1d, 0x1d, 0x3c, 0x60, 0x66,
+	0xd1, 0x45, 0xbc, 0x26, 0xe9, 0xab, 0xf1, 0x31, 0x2f, 0x77, 0x91, 0x5f,
+	0x8b, 0xdf, 0x28, 0xfc, 0xdd, 0x83, 0xe5, 0xc9, 0x03, 0x8e, 0xa2, 0x8d,
+	0x55, 0xa0, 0xc1, 0x41, 0x9e, 0x2b, 0xdc, 0xf6, 0x42, 0x5c, 0x6f, 0xf4,
+	0x9f, 0xa6, 0xde, 0x15, 0xba, 0xce, 0x38, 0x68, 0xf4, 0xbf, 0x91, 0xeb,
+	0x62, 0x9c, 0xbc, 0xc4, 0x7e, 0x3d, 0x78, 0x23, 0x59, 0x43, 0x4e, 0x17,
+	0x88, 0x4b, 0x22, 0x59, 0x11, 0xf1, 0xa1, 0x42, 0x9f, 0x99, 0x5e, 0x3b,
+	0x41, 0xae, 0x21, 0xfe, 0xad, 0x5e, 0xb7, 0x38, 0x8a, 0xcd, 0x39, 0x38,
+	0x37, 0x45, 0x62, 0xb8, 0x95, 0x3c, 0xe2, 0x76, 0xce, 0xfb, 0x16, 0xfa,
+	0xc0, 0x9e, 0x30, 0xc7, 0x56, 0x67, 0x59, 0xe5, 0xfa, 0x36, 0xa9, 0xe3,
+	0x90, 0x62, 0xde, 0xbf, 0x45, 0x77, 0xb2, 0x66, 0x02, 0x5e, 0xca, 0xfd,
+	0xce, 0xba, 0x9d, 0x35, 0xf0, 0xb3, 0x9f, 0x91, 0x09, 0x75, 0x54, 0x6f,
+	0x09, 0xed, 0x64, 0xde, 0xa7, 0x5c, 0xb3, 0x26, 0x66, 0x59, 0x97, 0x05,
+	0x03, 0x71, 0x97, 0x62, 0xe0, 0xe9, 0x89, 0x29, 0x8b, 0x38, 0xcf, 0x1a,
+	0xb2, 0x94, 0x73, 0x65, 0xac, 0x52, 0x1b, 0x09, 0x56, 0x48, 0x7d, 0x34,
+	0x13, 0x2f, 0x54, 0xac, 0x18, 0x92, 0x1c, 0xe0, 0xc3, 0xba, 0xe4, 0xbd,
+	0x78, 0xba, 0xd5, 0x89, 0x0e, 0xd6, 0x96, 0xd7, 0x31, 0x4f, 0xae, 0x25,
+	0x9e, 0xae, 0x4c, 0xb2, 0x66, 0x24, 0xf7, 0xbb, 0x9e, 0x71, 0xf6, 0x4c,
+	0x2b, 0x6b, 0x3f, 0x6f, 0x39, 0xde, 0x26, 0x0f, 0x3d, 0x66, 0x68, 0xc8,
+	0xda, 0x31, 0xba, 0x07, 0x9a, 0x6e, 0x63, 0x21, 0x71, 0x4b, 0x6c, 0xe8,
+	0xa0, 0x3d, 0x55, 0x24, 0xce, 0xdb, 0xf0, 0xf3, 0x6a, 0x20, 0xd1, 0x4b,
+	0xea, 0xa0, 0x0f, 0xac, 0xc4, 0x6c, 0x69, 0x0f, 0xd3, 0x13, 0x93, 0x71,
+	0x28, 0xf4, 0x7b, 0x03, 0xbd, 0x13, 0xed, 0x78, 0xb8, 0x30, 0x73, 0xa8,
+	0x67, 0xac, 0x39, 0x7a, 0x2d, 0x5e, 0xd5, 0xf5, 0x9e, 0x39, 0x8e, 0x13,
+	0xd0, 0xc8, 0x6f, 0xfa, 0x26, 0x82, 0xdd, 0x67, 0x14, 0x07, 0x5e, 0x22,
+	0x77, 0x74, 0xc7, 0xc8, 0xa1, 0x26, 0xe0, 0xdc, 0xb9, 0xd8, 0x40, 0x7a,
+	0x62, 0x7b, 0xb4, 0x9a, 0x9c, 0xca, 0xb9, 0xb8, 0xc8, 0xbf, 0xbe, 0x41,
+	0xdb, 0x6e, 0x0c, 0xdb, 0xfc, 0xab, 0xc8, 0x3d, 0x34, 0xcb, 0x7a, 0x5d,
+	0x17, 0x3b, 0x03, 0x87, 0xa7, 0x6d, 0x7c, 0x88, 0x9f, 0xfb, 0xa6, 0x6d,
+	0xbc, 0x83, 0xf2, 0x5c, 0x94, 0x3f, 0xf6, 0x19, 0xce, 0xb4, 0x9e, 0x18,
+	0xee, 0x07, 0x63, 0x91, 0xfe, 0x6e, 0xe0, 0x54, 0xae, 0x0c, 0x93, 0xeb,
+	0x03, 0x7e, 0xbf, 0xc2, 0x3c, 0xaa, 0x8a, 0x3f, 0x09, 0x7f, 0xf8, 0x82,
+	0x93, 0x98, 0x4d, 0x3b, 0xfc, 0x2f, 0xf9, 0x1e, 0x8a, 0x7f, 0xee, 0x6f,
+	0xa5, 0x7a, 0xcf, 0xb2, 0x06, 0x0d, 0xb1, 0x7f, 0xa3, 0xcd, 0x3f, 0x1e,
+	0x2b, 0x54, 0x23, 0xde, 0x10, 0xe8, 0x03, 0x1e, 0x90, 0xfb, 0x34, 0xbf,
+	0xea, 0x20, 0x37, 0x98, 0x8f, 0x9d, 0x9d, 0xe2, 0x57, 0xb2, 0xa6, 0xa1,
+	0x20, 0xd4, 0x6c, 0x59, 0x75, 0x61, 0x3f, 0x4e, 0xea, 0x2d, 0x66, 0x9b,
+	0x3a, 0x07, 0xa8, 0xe7, 0x9c, 0x16, 0xda, 0x39, 0xaf, 0x0d, 0xc4, 0x2a,
+	0xf1, 0x43, 0x74, 0x93, 0xd3, 0xfa, 0x65, 0xcc, 0x6f, 0x24, 0x85, 0xc3,
+	0x68, 0xe8, 0xf5, 0x26, 0x98, 0xe3, 0xd4, 0x76, 0x17, 0x84, 0xc7, 0xe9,
+	0xe6, 0x23, 0xf8, 0x67, 0xcb, 0xf4, 0x5a, 0xcc, 0xa3, 0x55, 0x78, 0xa1,
+	0xf5, 0x6d, 0x2b, 0xbe, 0x56, 0xe4, 0x9a, 0x9b, 0xcb, 0x68, 0x98, 0x9a,
+	0x58, 0xd7, 0xd7, 0x5e, 0x0e, 0x06, 0x12, 0x79, 0x96, 0x2d, 0x7b, 0x52,
+	0x6e, 0x24, 0x64, 0x29, 0x07, 0xa2, 0xcb, 0x85, 0x75, 0x64, 0x89, 0x67,
+	0xcb, 0x5c, 0xef, 0x20, 0xde, 0xbc, 0xca, 0x5c, 0x2e, 0xfd, 0xdf, 0x4d,
+	0xdd, 0x13, 0xe4, 0x0c, 0xe4, 0xee, 0xea, 0x53, 0x0e, 0xc9, 0x3f, 0x4e,
+	0xfd, 0xd3, 0xeb, 0xdb, 0xcf, 0x5f, 0x97, 0x98, 0x1b, 0xe1, 0x35, 0xf9,
+	0xcd, 0x39, 0x9d, 0x03, 0x67, 0xde, 0x67, 0x59, 0x05, 0x63, 0x72, 0x4e,
+	0xad, 0xcd, 0x49, 0x8f, 0x28, 0xfd, 0xc4, 0x16, 0x94, 0x39, 0xfd, 0xe4,
+	0x9c, 0x9a, 0x8f, 0x78, 0xd2, 0x4b, 0x3c, 0x31, 0x89, 0x27, 0x0f, 0xe6,
+	0x8e, 0x28, 0x07, 0x72, 0x7f, 0xcd, 0x36, 0x32, 0x06, 0x07, 0x4e, 0xf6,
+	0xab, 0x78, 0xbd, 0xdf, 0xce, 0x03, 0x9f, 0x30, 0x82, 0xbf, 0x48, 0x0c,
+	0x0b, 0x59, 0x90, 0xb5, 0x93, 0x52, 0x5c, 0xff, 0xd2, 0x2a, 0xc6, 0xb5,
+	0xf4, 0x25, 0x7e, 0x59, 0xea, 0x4f, 0xc5, 0x69, 0xbb, 0x5d, 0x05, 0xef,
+	0x7d, 0x9a, 0xd7, 0x70, 0xb9, 0x1b, 0x1e, 0x9c, 0xea, 0xb7, 0x18, 0xc3,
+	0x16, 0x76, 0x1a, 0xb3, 0xf1, 0x88, 0x8d, 0x9f, 0x2a, 0x3e, 0xee, 0x77,
+	0xe0, 0x2c, 0xaf, 0x67, 0x88, 0x4b, 0xe4, 0x29, 0xdf, 0xe4, 0x2c, 0xdc,
+	0x4d, 0xea, 0xbd, 0xb1, 0x96, 0x3c, 0x73, 0x97, 0x12, 0xec, 0xcc, 0x2b,
+	0xc1, 0xd0, 0x2a, 0x65, 0x0f, 0xb1, 0x51, 0xe4, 0x54, 0xda, 0x71, 0xf0,
+	0x7a, 0xbf, 0x13, 0x56, 0x51, 0xaf, 0x2b, 0x45, 0xa7, 0xd7, 0x20, 0xbf,
+	0x55, 0xf1, 0xb7, 0x5f, 0xf0, 0x7d, 0x0f, 0xdf, 0x8f, 0xae, 0x74, 0x62,
+	0x09, 0xe6, 0x87, 0x97, 0x2e, 0x73, 0x72, 0xcc, 0x6a, 0x2c, 0xee, 0x77,
+	0xc3, 0x6c, 0x70, 0x30, 0x27, 0xbc, 0xd9, 0xda, 0x8a, 0x65, 0xb9, 0x29,
+	0xeb, 0x2d, 0x82, 0xea, 0x76, 0xdd, 0x41, 0x1e, 0x65, 0xe1, 0x11, 0x43,
+	0xd6, 0x87, 0x2c, 0x5c, 0x17, 0x26, 0x2d, 0xe3, 0xfd, 0xd5, 0x8c, 0x99,
+	0x4a, 0xc6, 0x5f, 0x8a, 0xb9, 0xb8, 0x2a, 0xe6, 0x0c, 0xbd, 0x85, 0x80,
+	0xb1, 0x87, 0xdc, 0xce, 0x5f, 0x37, 0x3f, 0xca, 0x79, 0xc7, 0xcb, 0xc9,
+	0x60, 0xf4, 0x98, 0x52, 0xc4, 0x81, 0xe7, 0xe8, 0xd3, 0xaf, 0x26, 0xf5,
+	0x9e, 0x72, 0x47, 0xf1, 0xfb, 0x2b, 0xf6, 0xfa, 0x43, 0x09, 0x07, 0x7c,
+	0xd3, 0x78, 0xe9, 0x76, 0x9f, 0x4a, 0xe2, 0x8c, 0x1a, 0x91, 0x5a, 0x1c,
+	0x67, 0x7a, 0x8d, 0x49, 0xc5, 0xa5, 0xd7, 0x70, 0x2e, 0xc4, 0x06, 0x65,
+	0xd8, 0xa8, 0x91, 0xcb, 0xea, 0x6e, 0xf7, 0x5b, 0xbc, 0x67, 0x65, 0x18,
+	0x53, 0xa1, 0xab, 0x5b, 0xa2, 0x6e, 0xc4, 0xcd, 0x72, 0x1a, 0xa8, 0x3a,
+	0xe6, 0x75, 0x2f, 0xcc, 0x9b, 0x0d, 0x1e, 0xc6, 0x73, 0x55, 0x0c, 0xed,
+	0xf3, 0xd3, 0x7b, 0x6a, 0x51, 0xd3, 0x8a, 0x2d, 0x13, 0x1c, 0x59, 0xfd,
+	0x40, 0x83, 0x1a, 0x13, 0xce, 0xab, 0xc1, 0x55, 0xdf, 0x7a, 0x8d, 0x1a,
+	0x9b, 0x42, 0x57, 0xc4, 0xdd, 0x1e, 0xcd, 0xc3, 0x5d, 0x17, 0xdb, 0x8a,
+	0x70, 0x5a, 0x6a, 0x39, 0xc9, 0x0d, 0xf1, 0x9d, 0x44, 0xeb, 0x86, 0xda,
+	0x2b, 0x4b, 0xfe, 0x06, 0xb5, 0x26, 0x26, 0xfe, 0xe6, 0x6f, 0x7f, 0xc5,
+	0xce, 0x21, 0x1a, 0x6b, 0xb2, 0xff, 0xe9, 0xfb, 0xff, 0xd6, 0xfe, 0x6d,
+	0xdb, 0x6f, 0x5c, 0xba, 0xbc, 0x4b, 0xad, 0x09, 0xd2, 0x7e, 0x1d, 0xdb,
+	0xc7, 0x1b, 0x59, 0xa7, 0xda, 0x73, 0xe5, 0x2e, 0x8b, 0x75, 0xfd, 0xe5,
+	0xb3, 0xc4, 0x09, 0x17, 0x6d, 0x7f, 0x9f, 0x6e, 0x32, 0xbd, 0x59, 0x96,
+	0x1e, 0x0e, 0xf8, 0xca, 0x14, 0x3f, 0x76, 0xb7, 0xfe, 0xab, 0x35, 0x45,
+	0x7e, 0x70, 0x6b, 0x4e, 0xea, 0xf9, 0x66, 0xd6, 0xb8, 0x97, 0xce, 0x68,
+	0xf7, 0xea, 0xf9, 0x76, 0x29, 0xdd, 0x4c, 0x48, 0xbb, 0xd1, 0x70, 0xa0,
+	0x6b, 0x17, 0xdb, 0xdd, 0xcf, 0x76, 0xf1, 0xd9, 0x6c, 0x37, 0x11, 0xe2,
+	0xfd, 0x7e, 0xbe, 0xe6, 0xcd, 0xec, 0xef, 0xa6, 0x52, 0xbb, 0x07, 0x75,
+	0x73, 0xd2, 0xee, 0x6f, 0x51, 0xa0, 0xa7, 0xcc, 0xe1, 0x44, 0x9a, 0xed,
+	0x26, 0xd9, 0xee, 0x8d, 0x09, 0xe1, 0x56, 0xb8, 0x66, 0x3c, 0x99, 0x99,
+	0x72, 0xe8, 0xba, 0xf6, 0x3a, 0xe2, 0xcc, 0x35, 0xf6, 0x5c, 0x5e, 0x33,
+	0x96, 0xdb, 0x86, 0xdd, 0xfa, 0xd1, 0x70, 0x39, 0xdb, 0x1d, 0xd3, 0x8f,
+	0xfa, 0x5c, 0xc4, 0x8c, 0x4d, 0x94, 0xb7, 0x9d, 0xb5, 0xa3, 0xca, 0x7a,
+	0x62, 0x87, 0x5d, 0x7f, 0x1b, 0x98, 0x9f, 0x6b, 0x2d, 0xc6, 0xa8, 0xf0,
+	0x4d, 0xc8, 0x9c, 0xca, 0xf8, 0x02, 0xa1, 0x71, 0x7b, 0x7c, 0xca, 0x45,
+	0x87, 0x5b, 0xe9, 0x18, 0x75, 0x26, 0x7a, 0x5b, 0x25, 0xef, 0x2b, 0xcc,
+	0x39, 0x81, 0xd0, 0x24, 0x5a, 0xb1, 0xab, 0xf0, 0x05, 0x4c, 0x6a, 0x0b,
+	0xb0, 0x6b, 0xdc, 0xb2, 0x5e, 0xd0, 0x97, 0xd6, 0x55, 0xca, 0x02, 0x0d,
+	0x75, 0x76, 0x07, 0x2b, 0x85, 0x5f, 0xd8, 0xb2, 0xe2, 0x10, 0x5c, 0x55,
+	0x90, 0xd6, 0xcd, 0xcd, 0xa2, 0xff, 0x33, 0xe1, 0x40, 0xe2, 0xb0, 0xd2,
+	0xd2, 0xb5, 0x0b, 0xff, 0x4a, 0x9c, 0x07, 0x31, 0x7a, 0x2e, 0x86, 0x0d,
+	0x7a, 0x4b, 0x27, 0x39, 0x9d, 0xcd, 0x4d, 0x9c, 0xc7, 0x97, 0x31, 0x33,
+	0x3b, 0x11, 0xe8, 0xe9, 0xe0, 0xfd, 0xd1, 0xe2, 0xba, 0x18, 0xce, 0x4e,
+	0x04, 0xc8, 0x1f, 0xc4, 0x16, 0xc0, 0xce, 0x5c, 0x29, 0x87, 0x59, 0xd6,
+	0x21, 0xc3, 0xb2, 0x9e, 0x35, 0xe6, 0xe2, 0xb0, 0x11, 0x48, 0x48, 0x0c,
+	0xfc, 0xda, 0x58, 0x7a, 0x99, 0x0b, 0x81, 0x4e, 0xe2, 0x2b, 0x75, 0x53,
+	0x18, 0xaf, 0x0a, 0xaa, 0xf8, 0xf2, 0x05, 0x9d, 0xfe, 0x2a, 0x85, 0xd1,
+	0xbf, 0xa8, 0xb9, 0xa7, 0x99, 0x76, 0xaf, 0xb9, 0x5a, 0xc1, 0xbb, 0x0b,
+	0x15, 0x1c, 0x5d, 0x18, 0xf4, 0x0d, 0x2b, 0xd5, 0xcc, 0x67, 0xc1, 0xce,
+	0x76, 0xc5, 0x3c, 0xce, 0xb6, 0xf1, 0x56, 0x47, 0xc0, 0x07, 0xa5, 0x96,
+	0x79, 0x61, 0xbe, 0x5f, 0x28, 0x99, 0x33, 0x15, 0xf4, 0xdd, 0xcf, 0x77,
+	0xc7, 0x84, 0x82, 0x09, 0x3d, 0x10, 0x87, 0x2d, 0x9f, 0x7d, 0x87, 0x15,
+	0x5c, 0x1e, 0xb4, 0xac, 0xe7, 0xc3, 0x2d, 0xda, 0xf3, 0xf8, 0x35, 0xf3,
+	0x89, 0xf4, 0x53, 0xd2, 0x0d, 0xa8, 0x4c, 0xe9, 0xf1, 0x76, 0xe5, 0xa7,
+	0x42, 0xa7, 0x98, 0xdf, 0x85, 0x83, 0x94, 0xf4, 0x2d, 0x71, 0x11, 0xcb,
+	0xfa, 0xb5, 0x51, 0x94, 0xa5, 0x45, 0x02, 0x09, 0x60, 0x2e, 0x0a, 0x7a,
+	0xa0, 0x63, 0x92, 0x76, 0xf0, 0x31, 0xd6, 0xe7, 0xe8, 0x0d, 0x98, 0x72,
+	0x05, 0xb4, 0x29, 0x65, 0xd9, 0xc7, 0x2a, 0x16, 0x6c, 0x7e, 0x58, 0x69,
+	0xe9, 0xae, 0x80, 0x1e, 0xcf, 0x2b, 0x17, 0xc9, 0x7c, 0xf8, 0x3c, 0xc4,
+	0xe2, 0x4d, 0xb0, 0x79, 0x11, 0x56, 0x25, 0x9d, 0xf1, 0xb3, 0x68, 0x62,
+	0xdc, 0xe9, 0x5d, 0xb7, 0x2b, 0x81, 0x28, 0xf0, 0x25, 0xc4, 0x67, 0x8b,
+	0xae, 0x0d, 0x48, 0x7c, 0xc5, 0xb2, 0xee, 0xa0, 0xae, 0x7b, 0xa8, 0xeb,
+	0x96, 0xf0, 0x3b, 0xd6, 0x3f, 0xd9, 0x32, 0xaf, 0xc5, 0xb0, 0x7e, 0xa1,
+	0xdc, 0xb7, 0x2d, 0xcc, 0x16, 0xb9, 0x2e, 0xac, 0x98, 0x6d, 0x59, 0x6a,
+	0x44, 0xf0, 0xf9, 0xef, 0x5c, 0xc4, 0xe3, 0xa8, 0xe0, 0x3e, 0xd4, 0x0b,
+	0xb9, 0x8f, 0x43, 0x6a, 0x47, 0x5f, 0x42, 0x51, 0x1b, 0xab, 0x98, 0x5b,
+	0xdc, 0xc4, 0xc6, 0x3b, 0xc9, 0xd3, 0xe2, 0xb3, 0x6b, 0xf1, 0x4d, 0xce,
+	0x69, 0x75, 0x50, 0xbd, 0xd8, 0xc1, 0x39, 0x39, 0x1c, 0x96, 0xef, 0x2e,
+	0x4c, 0xce, 0x76, 0x60, 0x1b, 0x67, 0x59, 0x0b, 0xaa, 0x73, 0xe4, 0xba,
+	0xbb, 0x4d, 0xbe, 0x53, 0xff, 0x8b, 0x14, 0xdc, 0x41, 0x8f, 0x54, 0x83,
+	0xdb, 0x7d, 0x72, 0xbd, 0xc3, 0x90, 0xef, 0x0a, 0x9a, 0xc2, 0x4e, 0xce,
+	0x0b, 0xf9, 0x2f, 0x75, 0xaf, 0x0c, 0xf2, 0x7a, 0x58, 0x3e, 0xc7, 0xef,
+	0xe0, 0xb8, 0xe3, 0x23, 0x8a, 0x60, 0xdc, 0x2f, 0xac, 0x17, 0x98, 0xbb,
+	0x35, 0xfe, 0xfe, 0x4d, 0xf6, 0x7d, 0x3c, 0xfc, 0xac, 0x35, 0xa7, 0x4e,
+	0xc1, 0xf3, 0x51, 0x3f, 0xe6, 0x2e, 0x6c, 0xc4, 0xd4, 0x8d, 0x32, 0x66,
+	0x05, 0xd5, 0x7a, 0x47, 0x99, 0xac, 0x23, 0xd4, 0xe8, 0x17, 0x61, 0xc5,
+	0xda, 0xe2, 0xb5, 0x8a, 0xa0, 0xac, 0x49, 0xfb, 0x51, 0xb1, 0xb0, 0x1e,
+	0xfe, 0xe9, 0x6b, 0xcb, 0x82, 0xce, 0xce, 0x6a, 0x45, 0xd7, 0x56, 0x29,
+	0xf2, 0xfb, 0x47, 0x56, 0xdc, 0x6b, 0x59, 0x77, 0x72, 0xbe, 0xe6, 0x87,
+	0x3d, 0x78, 0x8f, 0xfd, 0x6c, 0xa7, 0xfd, 0x56, 0x9f, 0x9f, 0xaf, 0x52,
+	0xfb, 0x0f, 0x59, 0xf3, 0x4b, 0x5b, 0x91, 0xd1, 0xdc, 0xb1, 0x42, 0x76,
+	0x52, 0x2a, 0xc5, 0xce, 0xb6, 0xcd, 0x78, 0xef, 0x7a, 0xfb, 0xbb, 0x16,
+	0x79, 0xf5, 0xfc, 0xfa, 0xea, 0x19, 0x3b, 0xcf, 0x2f, 0xbd, 0x5a, 0xc3,
+	0x94, 0x55, 0xd7, 0x66, 0x6a, 0xe5, 0x10, 0x0e, 0xd6, 0x14, 0x7a, 0x9c,
+	0x72, 0xff, 0x9b, 0x51, 0xe4, 0x02, 0x87, 0x8c, 0x40, 0xbf, 0xc9, 0xf8,
+	0x49, 0xb0, 0x3e, 0x6e, 0x17, 0xbe, 0x54, 0x98, 0xe2, 0x3c, 0xcc, 0x45,
+	0x79, 0x5b, 0xa0, 0x6f, 0x1e, 0xeb, 0x55, 0x47, 0x44, 0xb8, 0x84, 0xcc,
+	0x8f, 0x7d, 0x4f, 0x54, 0x72, 0xd5, 0x32, 0xea, 0x18, 0x6e, 0x93, 0xfc,
+	0xfc, 0xc7, 0xf8, 0x95, 0xc8, 0xb1, 0xf3, 0x78, 0x5f, 0x1c, 0x7f, 0xea,
+	0x5e, 0x90, 0x09, 0xc9, 0x9a, 0xaf, 0xfb, 0x9a, 0x44, 0x4e, 0x25, 0xb7,
+	0x2b, 0xd3, 0xb6, 0x47, 0x1a, 0xf8, 0x92, 0xdf, 0x9d, 0xd7, 0x6c, 0xcc,
+	0x9d, 0x5f, 0x33, 0x46, 0xbf, 0x51, 0x06, 0xf5, 0x72, 0xc9, 0x17, 0x8c,
+	0x65, 0x4d, 0xc6, 0x67, 0xd2, 0xcb, 0x65, 0xdf, 0x66, 0xc7, 0xd7, 0x6e,
+	0x21, 0x5e, 0x3c, 0xcd, 0x1e, 0x47, 0xc9, 0x21, 0x4d, 0x3b, 0x32, 0x04,
+	0x1b, 0x66, 0xae, 0xd3, 0x49, 0xfe, 0x2a, 0x71, 0x88, 0x05, 0x18, 0xd8,
+	0xbf, 0x16, 0xfe, 0x86, 0x22, 0x06, 0xaa, 0xb1, 0x45, 0x58, 0xda, 0xff,
+	0x7f, 0x97, 0x15, 0x6b, 0xa3, 0x66, 0xa4, 0xf6, 0x87, 0x91, 0x9d, 0x2d,
+	0xbf, 0xc9, 0x35, 0x37, 0x04, 0xa3, 0x77, 0xef, 0xbf, 0x18, 0x53, 0x5e,
+	0xc6, 0x2c, 0xe5, 0x26, 0x18, 0x3b, 0xaa, 0x4e, 0x4e, 0xa3, 0x89, 0xfc,
+	0xa3, 0x97, 0x11, 0x47, 0x8c, 0xe5, 0x68, 0xe9, 0x1a, 0xc3, 0x29, 0x72,
+	0x69, 0x7b, 0xbd, 0xde, 0x5f, 0x1e, 0x9b, 0xbc, 0xc3, 0x85, 0x60, 0x62,
+	0x9c, 0x38, 0xe0, 0x99, 0x90, 0x5a, 0x78, 0xae, 0xec, 0x51, 0x58, 0x4b,
+	0x89, 0x2d, 0x09, 0xd6, 0x13, 0x5f, 0x22, 0x05, 0xb9, 0x85, 0x98, 0x71,
+	0x48, 0x6f, 0xe9, 0x1e, 0xc3, 0xbf, 0x10, 0x67, 0xe5, 0xfe, 0x43, 0xec,
+	0xcf, 0x67, 0xdb, 0x6a, 0xf7, 0x7e, 0x59, 0x9f, 0xe9, 0xfa, 0x4b, 0xf2,
+	0x70, 0xa7, 0x4b, 0x4f, 0x94, 0x09, 0xaf, 0x29, 0xa3, 0x1e, 0x7b, 0xf6,
+	0x2b, 0x68, 0xa7, 0x9c, 0xfb, 0xe9, 0x33, 0x77, 0x04, 0xe1, 0xec, 0x58,
+	0x48, 0xce, 0x07, 0x86, 0xe0, 0x6c, 0x1d, 0xf7, 0x8d, 0x23, 0x9a, 0xd3,
+	0x27, 0xe7, 0x78, 0xf0, 0x03, 0xca, 0x91, 0x9c, 0x72, 0xe9, 0xb4, 0x9c,
+	0x57, 0x2f, 0x90, 0xd3, 0x8c, 0x07, 0xa7, 0xe5, 0x1c, 0xa0, 0x9c, 0x2b,
+	0xe6, 0xc3, 0x59, 0x73, 0x85, 0xcc, 0x55, 0x2b, 0xe3, 0xa7, 0x19, 0x19,
+	0x3b, 0xaf, 0x90, 0xb3, 0x7c, 0x11, 0x8a, 0xde, 0x2c, 0x35, 0x57, 0xca,
+	0x6e, 0xb7, 0xbc, 0x75, 0xf2, 0x2c, 0x4b, 0x58, 0xe5, 0xcc, 0xfc, 0x49,
+	0x06, 0x6a, 0xc9, 0x36, 0x97, 0x63, 0xe7, 0xfe, 0x79, 0x25, 0x7d, 0x6f,
+	0xda, 0x71, 0xbe, 0x8f, 0x05, 0xbc, 0xd6, 0xca, 0x3a, 0x9e, 0xed, 0x74,
+	0x59, 0x3b, 0x16, 0xfe, 0xdb, 0x62, 0x54, 0x28, 0x01, 0x33, 0xce, 0x79,
+	0x99, 0xf4, 0x2e, 0x40, 0xaf, 0x9d, 0x87, 0x0c, 0xb6, 0xff, 0xeb, 0xda,
+	0x22, 0x1f, 0x83, 0xeb, 0x7a, 0xde, 0xdb, 0x1e, 0x2e, 0xf6, 0x47, 0x1c,
+	0x76, 0xbb, 0x62, 0x6d, 0x38, 0x34, 0x74, 0xfe, 0xf7, 0xc0, 0x72, 0x7d,
+	0xe6, 0x7c, 0x4d, 0x06, 0x5c, 0xf8, 0x0d, 0xdf, 0x2f, 0x95, 0x3c, 0xf3,
+	0x99, 0xb1, 0xef, 0x18, 0xaf, 0x2e, 0x47, 0xe5, 0x3c, 0xec, 0x1c, 0xb7,
+	0xb0, 0xc3, 0xae, 0xcd, 0xca, 0xb0, 0xbd, 0xd5, 0x3b, 0xcd, 0x7b, 0x67,
+	0x4b, 0xee, 0x88, 0x66, 0x21, 0xf9, 0x55, 0xfc, 0xe7, 0x21, 0xdb, 0x7f,
+	0x1c, 0xca, 0x4c, 0xff, 0xd9, 0x86, 0x17, 0xf5, 0xa3, 0x6b, 0xcb, 0x71,
+	0x74, 0x83, 0xec, 0xb5, 0x74, 0x87, 0xf1, 0xcc, 0x75, 0x8c, 0xcd, 0x37,
+	0x0c, 0xca, 0x9e, 0xcf, 0xfc, 0x65, 0x63, 0x96, 0x82, 0x72, 0x3d, 0x84,
+	0x5d, 0xfb, 0x03, 0xfe, 0x32, 0x35, 0xc4, 0x3e, 0xff, 0xcd, 0x7a, 0x1c,
+	0xf5, 0x37, 0x70, 0x28, 0x79, 0xf4, 0xdb, 0xe5, 0xb8, 0x57, 0xf8, 0xe0,
+	0x6b, 0xa7, 0x28, 0x63, 0xb9, 0x51, 0xb2, 0x95, 0xd8, 0xa9, 0x24, 0x67,
+	0x01, 0xd2, 0xfb, 0x4b, 0xed, 0x15, 0xbc, 0x14, 0xf4, 0x4d, 0xaf, 0x73,
+	0x2f, 0x40, 0x6a, 0xfc, 0xe8, 0xf3, 0xe4, 0x39, 0xcc, 0x53, 0x47, 0x7b,
+	0x7c, 0xd4, 0xe5, 0x4c, 0xb8, 0x34, 0xa7, 0x12, 0x9b, 0x33, 0x65, 0x88,
+	0xef, 0x42, 0xa9, 0x21, 0x35, 0xa8, 0xa1, 0x8f, 0xe6, 0x82, 0x48, 0x54,
+	0xc5, 0x9a, 0x91, 0x1c, 0x67, 0x6c, 0x4d, 0x94, 0xc1, 0x79, 0xa5, 0xe4,
+	0x5d, 0x7b, 0x7f, 0xee, 0x9a, 0x93, 0xc9, 0x32, 0xdc, 0x6c, 0x9c, 0xb3,
+	0x04, 0x17, 0x9f, 0xd7, 0x71, 0x49, 0x19, 0x31, 0xb1, 0x39, 0x1c, 0x8c,
+	0x6f, 0x62, 0x2d, 0x7e, 0xac, 0xd5, 0x79, 0xcd, 0xe9, 0xdc, 0x6f, 0xad,
+	0xac, 0xf7, 0xc2, 0xf1, 0x88, 0x3d, 0x70, 0x7c, 0x65, 0x50, 0xfa, 0x94,
+	0xfe, 0x4a, 0x3e, 0x2a, 0xfd, 0x5b, 0x56, 0x30, 0x2c, 0x71, 0xf2, 0xe9,
+	0x18, 0xde, 0xd4, 0x4b, 0x63, 0xd0, 0x99, 0xbf, 0x7d, 0xb2, 0xf6, 0xed,
+	0xae, 0x88, 0xfd, 0x1e, 0x97, 0x05, 0x5b, 0x3b, 0x9f, 0xcf, 0xa1, 0xf3,
+	0xb8, 0xbd, 0x56, 0x49, 0x4c, 0x8e, 0x99, 0x28, 0x5f, 0x8c, 0x4e, 0xf2,
+	0x44, 0xca, 0x9b, 0x9a, 0xbb, 0xc3, 0xde, 0x8b, 0x3d, 0x30, 0xf7, 0x16,
+	0x9d, 0xf5, 0x76, 0xce, 0x83, 0xe1, 0x9c, 0x70, 0x88, 0xd1, 0x0d, 0xba,
+	0xfd, 0x7e, 0x78, 0x43, 0x93, 0x9d, 0x9b, 0x25, 0x06, 0x03, 0x46, 0x16,
+	0xa5, 0xbd, 0x58, 0x38, 0x3d, 0x94, 0xc5, 0xf1, 0x46, 0xf7, 0xa0, 0x39,
+	0x9e, 0xe4, 0xf8, 0x4f, 0xb6, 0xb6, 0x74, 0x96, 0xf3, 0xdd, 0xb5, 0xd0,
+	0xec, 0xa8, 0xb4, 0xe7, 0x79, 0x74, 0xc3, 0x2d, 0x7a, 0xd0, 0xbf, 0x1c,
+	0x01, 0x5f, 0x13, 0x6b, 0x38, 0xd6, 0xe6, 0x76, 0x75, 0x76, 0x5b, 0x4e,
+	0x64, 0x9d, 0xcf, 0xa9, 0xe7, 0xe5, 0x55, 0x51, 0x5e, 0x65, 0xac, 0xd9,
+	0xb8, 0x1f, 0x22, 0x93, 0x79, 0xbc, 0xb5, 0x85, 0x20, 0xaf, 0xe0, 0x8d,
+	0x56, 0x33, 0x5e, 0x71, 0x81, 0x3c, 0x87, 0xe2, 0x2a, 0xc9, 0x73, 0x7b,
+	0xa8, 0x7b, 0x32, 0xc8, 0xfa, 0xfa, 0x33, 0x72, 0x55, 0x54, 0xb0, 0x3c,
+	0x74, 0x53, 0x5e, 0x1f, 0xe5, 0xdd, 0x47, 0x39, 0x4f, 0xb7, 0x4a, 0xad,
+	0xac, 0xe0, 0x54, 0x6b, 0x50, 0xeb, 0x45, 0xd5, 0xf4, 0x7a, 0xc9, 0xf9,
+	0xfe, 0xcd, 0xca, 0x98, 0x1b, 0x6b, 0x52, 0x62, 0xeb, 0xe0, 0xe6, 0x17,
+	0xc8, 0xa5, 0x6f, 0x98, 0xf0, 0x60, 0x75, 0x2a, 0xd8, 0xb5, 0x53, 0xf1,
+	0x60, 0xd5, 0x44, 0x71, 0x4d, 0x64, 0x72, 0xc6, 0xfd, 0xae, 0x98, 0x07,
+	0x63, 0xc9, 0xf9, 0x7e, 0xa7, 0x8d, 0x4f, 0xba, 0xef, 0x19, 0x1b, 0xef,
+	0x3c, 0x18, 0xc9, 0x89, 0x8d, 0xab, 0x64, 0x0f, 0x4a, 0x78, 0x9c, 0xb3,
+	0x3c, 0xe6, 0xc0, 0xee, 0x52, 0x5d, 0x6a, 0xeb, 0x76, 0xc2, 0xfd, 0x48,
+	0xf2, 0x9c, 0x55, 0xa9, 0xeb, 0xf1, 0x05, 0x36, 0x67, 0x3f, 0xe1, 0x3e,
+	0x9c, 0x3b, 0xe1, 0x1e, 0x65, 0x0d, 0x44, 0xcc, 0xf1, 0xed, 0x42, 0xf1,
+	0xda, 0x48, 0xee, 0x62, 0xb6, 0xd7, 0x30, 0x16, 0x31, 0xf1, 0x74, 0xf2,
+	0x2c, 0x63, 0x6a, 0x07, 0x8e, 0x25, 0x59, 0x55, 0xb1, 0x66, 0x1e, 0x7d,
+	0x80, 0xa9, 0x9b, 0xb5, 0xc2, 0x76, 0xb2, 0xaa, 0x43, 0xf6, 0xbe, 0x82,
+	0x9b, 0x73, 0xaf, 0x60, 0xfc, 0x01, 0x2f, 0x71, 0x53, 0x45, 0x6e, 0xbf,
+	0x8a, 0x23, 0xfb, 0x61, 0xd6, 0xc6, 0x7e, 0x6f, 0xd5, 0x2c, 0x0a, 0x6c,
+	0x7e, 0x85, 0xb1, 0x76, 0x68, 0x02, 0xc8, 0x8e, 0x08, 0x77, 0x3e, 0xe1,
+	0x7e, 0x8e, 0x7d, 0xb9, 0xf5, 0x8b, 0x13, 0xce, 0x98, 0x1e, 0x3a, 0x4d,
+	0x7d, 0x8e, 0xe5, 0x9c, 0x18, 0xc9, 0x00, 0xc3, 0xf4, 0xa5, 0x07, 0x23,
+	0x22, 0xcb, 0xc4, 0x3c, 0x5b, 0xee, 0x0e, 0x34, 0x15, 0x84, 0xe7, 0xff,
+	0xde, 0xba, 0x3f, 0x1c, 0xe8, 0x58, 0x45, 0x39, 0xa1, 0x94, 0xc7, 0x8d,
+	0x4a, 0x27, 0x0e, 0x17, 0x4a, 0xeb, 0xf5, 0x9f, 0xb5, 0xc9, 0x68, 0xd2,
+	0x89, 0xe1, 0xa4, 0xca, 0x3a, 0x5f, 0x0f, 0xb5, 0x13, 0xe4, 0xb3, 0x9a,
+	0xee, 0x1b, 0x21, 0xe5, 0x2a, 0xe3, 0xfc, 0x3a, 0x63, 0x15, 0x48, 0x78,
+	0x75, 0x6d, 0x0c, 0xb5, 0xb2, 0xf6, 0xe6, 0x74, 0xc6, 0xaa, 0x67, 0xf8,
+	0x80, 0xac, 0xf5, 0x7f, 0x1a, 0xcb, 0x2a, 0xe7, 0x7b, 0x69, 0xb2, 0xe2,
+	0x6c, 0x1c, 0x33, 0xfd, 0x64, 0xb1, 0x5b, 0xd6, 0xc2, 0x58, 0x03, 0xf0,
+	0xf7, 0xc3, 0x33, 0x7e, 0xff, 0x0b, 0xf7, 0xf4, 0x5a, 0x1b, 0xf3, 0xc1,
+	0x11, 0x45, 0x4d, 0xc9, 0x5a, 0x95, 0xa9, 0x54, 0x2c, 0x06, 0xf4, 0x09,
+	0x59, 0xa3, 0x8a, 0xcb, 0xba, 0x3f, 0x82, 0x9c, 0x47, 0xfd, 0x60, 0x05,
+	0x9a, 0x0f, 0x56, 0x62, 0xfe, 0xa1, 0xe2, 0x5a, 0x95, 0x63, 0x42, 0x30,
+	0x37, 0x10, 0x35, 0x6d, 0xee, 0x29, 0x79, 0x68, 0x39, 0x65, 0x99, 0xf4,
+	0x03, 0xcb, 0xda, 0x6d, 0x08, 0x46, 0x45, 0xf9, 0x59, 0xae, 0x09, 0x9f,
+	0xee, 0x41, 0x6f, 0xa6, 0x1b, 0xbb, 0x32, 0x55, 0xb8, 0x4d, 0xb3, 0xd7,
+	0x81, 0xdc, 0xe5, 0xb1, 0xcd, 0x37, 0xfd, 0x5a, 0x9f, 0x0c, 0x39, 0x98,
+	0x7b, 0xc7, 0xa9, 0x40, 0x7b, 0x52, 0x61, 0xae, 0x71, 0xa1, 0x4f, 0xab,
+	0xc5, 0x2d, 0xc6, 0xbf, 0x5a, 0xb7, 0xad, 0x97, 0xdf, 0x4a, 0xfb, 0xa8,
+	0x72, 0xff, 0x16, 0xde, 0x1f, 0x30, 0xc6, 0xa7, 0xfd, 0xe1, 0x68, 0x12,
+	0xfd, 0xb2, 0x26, 0xb2, 0x31, 0x12, 0xf4, 0x6f, 0xb7, 0xf7, 0x93, 0xfc,
+	0xd8, 0x94, 0xf3, 0xe3, 0x56, 0xce, 0x51, 0xd6, 0x39, 0xd3, 0x6f, 0xa4,
+	0x6e, 0x24, 0x2f, 0xe1, 0x7d, 0xbd, 0xd3, 0xb9, 0xb5, 0xfd, 0x7c, 0x6d,
+	0x27, 0xeb, 0xec, 0xa5, 0xfa, 0x6e, 0x16, 0xfc, 0xf5, 0xb2, 0x0e, 0x06,
+	0x7b, 0x1e, 0x9c, 0x3a, 0xd4, 0x32, 0xbd, 0x56, 0xfc, 0x9d, 0xb9, 0x2b,
+	0x38, 0xbd, 0x2f, 0x57, 0x8c, 0x45, 0xe4, 0x03, 0x51, 0xbf, 0xfa, 0x99,
+	0xbc, 0xed, 0x8f, 0xdb, 0xfb, 0x72, 0x12, 0x1b, 0x32, 0x66, 0xbf, 0xbd,
+	0xcf, 0x31, 0x9c, 0xfc, 0x73, 0xee, 0x93, 0x33, 0x05, 0x62, 0x33, 0xfa,
+	0x64, 0x52, 0xec, 0x20, 0xd7, 0xcb, 0x68, 0xbb, 0x87, 0xce, 0x15, 0xf7,
+	0x62, 0x4a, 0xf9, 0xc0, 0x8d, 0xdb, 0xfb, 0x4b, 0xe7, 0x1f, 0xe2, 0x78,
+	0xd3, 0xb6, 0xb9, 0x9b, 0xdc, 0x1e, 0xe8, 0x4c, 0xfe, 0x08, 0xd3, 0x6b,
+	0xee, 0xfe, 0x4f, 0xb9, 0x69, 0x87, 0x4b, 0xf2, 0xf4, 0x8f, 0xe6, 0x8f,
+	0x4e, 0x9f, 0xd1, 0xf8, 0x63, 0xf7, 0x94, 0xf8, 0xcb, 0x43, 0xe7, 0xfa,
+	0x33, 0x8d, 0x33, 0xd6, 0xc0, 0x18, 0xd7, 0x83, 0x81, 0x3e, 0x13, 0xdf,
+	0xa2, 0x0c, 0x27, 0x7e, 0x46, 0x8e, 0xea, 0x1c, 0x3c, 0x7a, 0x99, 0x2c,
+	0x11, 0xbb, 0xc6, 0xe2, 0xe8, 0x8d, 0xb8, 0xe0, 0x18, 0xde, 0xea, 0x16,
+	0xb9, 0x7e, 0xf5, 0x7a, 0x57, 0xf1, 0x5d, 0xe2, 0xda, 0x03, 0x35, 0x2f,
+	0x6b, 0x5e, 0x8c, 0xb7, 0x31, 0xb1, 0x65, 0x3d, 0xdf, 0xc5, 0x9e, 0x5e,
+	0xbe, 0x8b, 0x2d, 0x1b, 0xf8, 0x4e, 0xdb, 0x36, 0xc8, 0xfa, 0xc9, 0xdd,
+	0x48, 0x32, 0x2f, 0x57, 0xc5, 0x7a, 0xf0, 0x8d, 0x94, 0x65, 0xf5, 0x31,
+	0xf7, 0x54, 0x90, 0xc7, 0xde, 0x19, 0x6c, 0x89, 0x2e, 0x50, 0xca, 0xc8,
+	0xe9, 0xef, 0x46, 0xdf, 0x78, 0x59, 0xa2, 0x36, 0xd6, 0x40, 0xde, 0xaa,
+	0xe1, 0xdd, 0xc5, 0x9d, 0xc8, 0x4f, 0xfc, 0xa1, 0x75, 0x97, 0xd2, 0xbc,
+	0xfa, 0xa6, 0x6d, 0xe6, 0x14, 0xbc, 0xeb, 0x63, 0x0e, 0xa5, 0x4e, 0xe5,
+	0x82, 0x2d, 0x28, 0x9e, 0x83, 0xf9, 0xbc, 0xbd, 0xd1, 0x6f, 0xd9, 0xe3,
+	0xc8, 0xe2, 0xa1, 0x73, 0xbb, 0x32, 0x32, 0x0e, 0x17, 0x8e, 0xf5, 0xcb,
+	0xd8, 0x2c, 0x3c, 0x66, 0x5c, 0xcb, 0x7a, 0xec, 0x03, 0xcb, 0xd1, 0x20,
+	0x7b, 0x86, 0x3d, 0xca, 0x33, 0xf4, 0x31, 0xd3, 0x19, 0x57, 0x8e, 0x47,
+	0xca, 0x65, 0x2d, 0x53, 0x2b, 0x8f, 0xb1, 0x0c, 0x99, 0x90, 0x36, 0x4e,
+	0x54, 0x1c, 0x9c, 0x29, 0xbb, 0x47, 0x79, 0x2e, 0x77, 0x6c, 0x7a, 0x9e,
+	0x4b, 0x36, 0x2e, 0x9d, 0x05, 0x90, 0x7d, 0x05, 0x3f, 0xea, 0xd2, 0xa2,
+	0x93, 0xd8, 0xce, 0x0f, 0x67, 0x9e, 0xdf, 0xf3, 0x9f, 0xa7, 0x5b, 0x29,
+	0xd6, 0x16, 0xd3, 0x2f, 0x44, 0xc7, 0x52, 0x5c, 0x95, 0xae, 0x5f, 0x79,
+	0xc1, 0xf5, 0x13, 0xec, 0x4b, 0xf6, 0x40, 0x2c, 0x6b, 0xaf, 0x21, 0xfb,
+	0x21, 0xb2, 0x17, 0xd2, 0xfa, 0x39, 0x67, 0x3f, 0x2c, 0xeb, 0xef, 0x8d,
+	0xf9, 0xc8, 0xd6, 0x07, 0xb2, 0xb2, 0x0e, 0x3a, 0x48, 0x2c, 0x5b, 0x96,
+	0x96, 0x31, 0xc6, 0x69, 0x2f, 0xf5, 0x5a, 0xb2, 0x2b, 0x56, 0xbc, 0xdb,
+	0x70, 0xca, 0xd0, 0x0f, 0xdc, 0xc6, 0x3a, 0x72, 0xbb, 0xd7, 0xc2, 0x21,
+	0x63, 0x33, 0x63, 0xb9, 0x12, 0x9b, 0x5b, 0x69, 0xcc, 0xba, 0x76, 0xa4,
+	0x32, 0x66, 0x97, 0xc3, 0xce, 0x27, 0x47, 0xbe, 0x96, 0x0c, 0x06, 0x3a,
+	0xb7, 0x10, 0xeb, 0x56, 0xa6, 0xdc, 0xf0, 0x17, 0xd7, 0xc8, 0x8c, 0x9f,
+	0x93, 0xa3, 0x1f, 0x33, 0xd6, 0xb9, 0x8b, 0xeb, 0x61, 0xb2, 0xf6, 0x29,
+	0xfd, 0x6c, 0x66, 0x9d, 0x2d, 0x6d, 0xfd, 0xd8, 0xd0, 0xac, 0xe0, 0x40,
+	0x73, 0xa0, 0xdf, 0xef, 0xb0, 0x2c, 0xef, 0x22, 0x27, 0x39, 0x6d, 0x17,
+	0x1e, 0x2c, 0xb4, 0xf8, 0xf7, 0xaa, 0xbf, 0xb4, 0x4c, 0x6f, 0x31, 0xe6,
+	0x4c, 0x95, 0xba, 0xff, 0xc9, 0x3d, 0x28, 0x03, 0xb2, 0x47, 0x58, 0xae,
+	0xaf, 0x54, 0xc6, 0xed, 0x76, 0x35, 0xb8, 0x6e, 0x30, 0x7b, 0xee, 0xe1,
+	0x8c, 0xf8, 0x34, 0x1a, 0x7c, 0xfa, 0x1c, 0xfc, 0x7a, 0xa4, 0x1a, 0x4b,
+	0x07, 0x05, 0xeb, 0x3c, 0x66, 0x79, 0xcc, 0x87, 0x93, 0x23, 0xf5, 0xb8,
+	0x7e, 0x1f, 0x12, 0xd5, 0x31, 0x6b, 0x5b, 0x5d, 0xec, 0xeb, 0xa8, 0x1c,
+	0xd3, 0xd0, 0xbe, 0xcf, 0xb2, 0x9a, 0xae, 0x74, 0xd9, 0x3c, 0xf8, 0x41,
+	0x63, 0x3d, 0xe6, 0xe4, 0x1b, 0xb1, 0x22, 0x1d, 0x82, 0x8f, 0x79, 0xe0,
+	0xfd, 0x64, 0x47, 0x7b, 0x3e, 0xd5, 0xdc, 0xf1, 0xa6, 0x12, 0x30, 0x9e,
+	0x57, 0x88, 0x6f, 0xf9, 0x28, 0x5c, 0x69, 0x05, 0x3f, 0xd1, 0xb1, 0xad,
+	0x26, 0x16, 0x83, 0x2b, 0x1f, 0x83, 0x27, 0xed, 0xc4, 0x3b, 0xb4, 0x77,
+	0x15, 0xe7, 0x72, 0x56, 0xba, 0x11, 0xb3, 0xf2, 0x97, 0x60, 0x6a, 0xa4,
+	0x15, 0x8e, 0x7c, 0x3d, 0xfb, 0xf3, 0xe2, 0xfa, 0x74, 0x27, 0x66, 0xe9,
+	0x11, 0x54, 0xe6, 0x23, 0x70, 0xa6, 0xbd, 0x38, 0xc5, 0xf9, 0xd8, 0x90,
+	0xee, 0x60, 0x3f, 0x1e, 0x74, 0x0d, 0xae, 0x81, 0x6f, 0x98, 0xf5, 0xe2,
+	0xa0, 0x1f, 0x05, 0x42, 0x76, 0xed, 0xb0, 0x0f, 0x15, 0x69, 0x3d, 0x74,
+	0xb9, 0x82, 0x78, 0x2e, 0xe2, 0x83, 0x27, 0x0f, 0x54, 0x0d, 0x5a, 0xf8,
+	0x56, 0x78, 0x9b, 0x7a, 0x63, 0xbd, 0x69, 0x39, 0x6c, 0x6e, 0x73, 0x9a,
+	0x1c, 0xed, 0xd1, 0xe9, 0x18, 0x97, 0xf5, 0x9e, 0xd3, 0x37, 0x85, 0xd3,
+	0xdf, 0x9a, 0x8e, 0x49, 0x27, 0x64, 0xcd, 0xc4, 0xad, 0x07, 0xe1, 0x1a,
+	0x96, 0xef, 0xe2, 0xcf, 0x2e, 0xb8, 0x87, 0x25, 0xe7, 0xf4, 0x28, 0x8f,
+	0xd9, 0xeb, 0x87, 0x32, 0x1f, 0x71, 0x25, 0x1f, 0x51, 0x51, 0x4b, 0x5f,
+	0x66, 0xfe, 0xc7, 0x4f, 0x27, 0x9c, 0x78, 0xe5, 0x60, 0x8f, 0xf2, 0x48,
+	0x6e, 0x63, 0x05, 0x2a, 0x65, 0xae, 0xae, 0xc2, 0x44, 0xeb, 0x90, 0x95,
+	0x5d, 0x6b, 0xcf, 0xb7, 0xe9, 0xb2, 0xfb, 0x99, 0xfa, 0x5a, 0xb8, 0x39,
+	0xd0, 0x53, 0xa7, 0x02, 0xef, 0x71, 0xbe, 0x27, 0xed, 0xf9, 0x76, 0xa2,
+	0x4e, 0x4f, 0xe2, 0x71, 0xaf, 0xac, 0x05, 0xcb, 0x1a, 0xc8, 0xe9, 0x9b,
+	0xdc, 0x29, 0x89, 0x27, 0x3f, 0x4e, 0x93, 0x0f, 0x2d, 0x4f, 0x67, 0xcf,
+	0x3d, 0x98, 0xe9, 0x64, 0x1d, 0x6a, 0xe0, 0x18, 0xbf, 0xaf, 0xa6, 0x2d,
+	0x5e, 0x24, 0x77, 0x5a, 0x95, 0x8e, 0xe0, 0x27, 0x39, 0x8d, 0xbe, 0x17,
+	0xc5, 0xd3, 0x7c, 0xbf, 0x3e, 0xbd, 0x1e, 0x2f, 0xe4, 0xbc, 0x58, 0x9a,
+	0x8e, 0xe1, 0x68, 0xce, 0x87, 0x9b, 0x69, 0xd3, 0x25, 0xf4, 0xdd, 0xce,
+	0xb4, 0x1f, 0x27, 0x72, 0xc0, 0x33, 0xfd, 0x16, 0x0e, 0x18, 0xd7, 0xab,
+	0xd5, 0xb3, 0xa4, 0xcf, 0x08, 0x9e, 0x49, 0x1a, 0x38, 0x91, 0x6c, 0x32,
+	0xfa, 0xf1, 0x01, 0x26, 0x9d, 0x49, 0xfa, 0xd9, 0x7b, 0x48, 0xd4, 0xcb,
+	0x7a, 0x66, 0x51, 0xff, 0xed, 0x05, 0x17, 0xe6, 0xe8, 0xb7, 0xe1, 0x07,
+	0xf6, 0x7e, 0xdc, 0x67, 0xf5, 0x3a, 0xcc, 0x1c, 0xbe, 0x3a, 0x2d, 0x67,
+	0xbe, 0x58, 0x0f, 0xe9, 0x8d, 0xd4, 0xc7, 0x8d, 0x55, 0x83, 0x6e, 0xd4,
+	0xd3, 0x5f, 0x56, 0x1d, 0x94, 0xbd, 0x01, 0xd6, 0x93, 0xfd, 0x3e, 0x2c,
+	0xe3, 0xe7, 0x9d, 0xf4, 0xfb, 0xa7, 0xd8, 0xf7, 0xa9, 0x45, 0x1a, 0x06,
+	0xb5, 0x0a, 0xdc, 0x17, 0xfa, 0x2f, 0xac, 0xfb, 0x65, 0x2b, 0xcd, 0xcf,
+	0x31, 0x55, 0x21, 0xa5, 0x71, 0xdc, 0x91, 0x00, 0x0e, 0x84, 0xdc, 0xc0,
+	0x45, 0x88, 0x97, 0xeb, 0x71, 0x68, 0xcc, 0x69, 0xfd, 0x1a, 0x79, 0x28,
+	0xf9, 0xe3, 0x1c, 0xfa, 0xff, 0x83, 0x9a, 0xca, 0xcf, 0xf2, 0x9b, 0x4f,
+	0x72, 0x98, 0x9c, 0xc1, 0xe9, 0x5c, 0x86, 0xe0, 0xd9, 0xeb, 0x14, 0x1f,
+	0x5e, 0xcb, 0x55, 0xe1, 0x89, 0xfe, 0xf9, 0xf8, 0x59, 0xb6, 0xcb, 0xde,
+	0x3b, 0xdf, 0x34, 0xf4, 0x89, 0x62, 0xda, 0x98, 0xe5, 0xc1, 0xed, 0x43,
+	0x30, 0xe7, 0xc6, 0x9e, 0xb2, 0x5c, 0xfa, 0xd7, 0xf1, 0xdc, 0x68, 0x0d,
+	0x6e, 0xe9, 0x77, 0xd2, 0xd7, 0xdd, 0x78, 0x3a, 0x2b, 0x3a, 0xd6, 0xe2,
+	0xfa, 0xfe, 0x0a, 0xbc, 0xc0, 0xcf, 0xb2, 0xf7, 0xdf, 0x96, 0xba, 0x1b,
+	0xa7, 0x32, 0x4d, 0xc7, 0xdb, 0xd5, 0x2e, 0xfc, 0x0f, 0xda, 0xd1, 0x48,
+	0xb5, 0xd2, 0x6e, 0x3e, 0x44, 0xf7, 0x5a, 0x56, 0xf5, 0xa2, 0x38, 0x5e,
+	0xca, 0x5d, 0x8c, 0x30, 0x3f, 0x5f, 0xd1, 0xd6, 0x8e, 0x57, 0x72, 0x8d,
+	0xb8, 0x3c, 0xd5, 0x81, 0x97, 0x73, 0x35, 0x08, 0x0d, 0xb8, 0x71, 0x3c,
+	0xeb, 0xc6, 0x8b, 0xfd, 0x3a, 0xf9, 0xdb, 0xdf, 0x2b, 0x89, 0x7a, 0x37,
+	0x7e, 0x92, 0x15, 0xff, 0x28, 0xda, 0x71, 0x77, 0x41, 0xf2, 0x92, 0x17,
+	0x63, 0x5e, 0xd9, 0x53, 0x81, 0xbb, 0x96, 0x76, 0x7c, 0x3f, 0x75, 0xe0,
+	0xdc, 0x4e, 0xda, 0xf1, 0x95, 0x09, 0x1f, 0x56, 0xa6, 0xc5, 0xa6, 0xd9,
+	0x73, 0x7b, 0x88, 0x23, 0x8f, 0xe4, 0xa2, 0x38, 0x9e, 0x74, 0xd9, 0xfc,
+	0xe1, 0x70, 0x2e, 0x86, 0x17, 0x93, 0xf7, 0x72, 0x4e, 0xc8, 0x37, 0x27,
+	0x8a, 0xb2, 0x76, 0x14, 0xca, 0xe9, 0x2b, 0xab, 0xf0, 0xb8, 0x56, 0x26,
+	0xb9, 0x96, 0x35, 0xc8, 0xe9, 0x9b, 0x0e, 0xe9, 0xf7, 0xd2, 0x3f, 0xef,
+	0xb5, 0xd7, 0xc6, 0x07, 0x33, 0x2d, 0xda, 0x2c, 0x94, 0xe6, 0xaf, 0x09,
+	0x73, 0xf5, 0xdf, 0x5a, 0x4f, 0x79, 0x65, 0x2f, 0x64, 0xfa, 0xde, 0xa4,
+	0xf4, 0xe3, 0xc7, 0xce, 0x89, 0x87, 0xce, 0x0d, 0x64, 0x9c, 0x8c, 0x51,
+	0xe6, 0xff, 0xa0, 0x17, 0xcb, 0x9b, 0x43, 0x68, 0xce, 0xcb, 0x3e, 0xcb,
+	0xbd, 0xac, 0xc7, 0x0c, 0x74, 0x07, 0xed, 0x35, 0x6d, 0xe6, 0xbc, 0xd2,
+	0x35, 0x37, 0xde, 0xf8, 0xb7, 0x71, 0x83, 0xa6, 0xc1, 0x4e, 0x54, 0xea,
+	0x16, 0x36, 0x1a, 0xff, 0x64, 0x5d, 0xbf, 0x5e, 0xfa, 0xdf, 0x52, 0x5b,
+	0xfc, 0xed, 0xce, 0x4a, 0x59, 0x8f, 0x1f, 0xcc, 0x2c, 0x62, 0x1c, 0xb5,
+	0xe1, 0xb0, 0xd7, 0xde, 0x3b, 0x99, 0x8e, 0x33, 0x39, 0xab, 0xe7, 0xc7,
+	0x5d, 0xf4, 0x99, 0xa5, 0xc4, 0x88, 0x6a, 0xe6, 0xec, 0xfb, 0x32, 0x06,
+	0x4e, 0x92, 0x03, 0x5f, 0x9f, 0x96, 0x35, 0xf3, 0x08, 0xde, 0x9a, 0xd0,
+	0xe8, 0xbf, 0x51, 0x58, 0x13, 0x5e, 0xb4, 0x53, 0xc7, 0x53, 0x13, 0x12,
+	0xef, 0x3a, 0x3e, 0x66, 0x0e, 0xeb, 0x62, 0x9b, 0xb3, 0x13, 0x75, 0x78,
+	0xf7, 0xa0, 0x13, 0x6b, 0xd2, 0x61, 0xda, 0x27, 0x84, 0xcb, 0x27, 0x3e,
+	0xb5, 0xf7, 0xae, 0xc2, 0x3c, 0xca, 0x3c, 0x22, 0x4d, 0xf9, 0x57, 0x6e,
+	0xdb, 0x49, 0x63, 0xbf, 0x5a, 0x5a, 0xce, 0x98, 0xf8, 0xa1, 0x15, 0xf2,
+	0x9f, 0x24, 0xbe, 0x2a, 0xb6, 0x9c, 0x39, 0x1e, 0xc1, 0x97, 0x87, 0xce,
+	0xed, 0xe0, 0x1c, 0x0c, 0xd2, 0x57, 0x37, 0xb4, 0xad, 0x52, 0x16, 0xd9,
+	0x71, 0x22, 0x72, 0x85, 0x33, 0x94, 0xec, 0x5f, 0xb2, 0x79, 0xd7, 0xb4,
+	0xcd, 0x4b, 0xe3, 0x0c, 0x1c, 0x10, 0xcc, 0xbe, 0xb5, 0xad, 0x84, 0xd9,
+	0x72, 0xbf, 0x5c, 0xbf, 0xd1, 0x4a, 0x6b, 0xe4, 0xe5, 0xe4, 0xcf, 0xbb,
+	0x43, 0xdf, 0x56, 0xa6, 0x34, 0x89, 0x75, 0x85, 0x98, 0x71, 0x83, 0x95,
+	0x59, 0x2f, 0xfe, 0x3c, 0x8f, 0xed, 0xa1, 0x94, 0x9f, 0x9f, 0x4b, 0xe1,
+	0x1d, 0xdb, 0xa7, 0xe7, 0x52, 0xf8, 0x4e, 0x69, 0x4c, 0x25, 0x5d, 0xa3,
+	0xf4, 0x7f, 0xd1, 0x57, 0xce, 0xea, 0xc8, 0x3d, 0x93, 0x95, 0xf6, 0x3e,
+	0x10, 0xb6, 0xcf, 0xf0, 0x87, 0x12, 0x77, 0xb1, 0x65, 0x68, 0x38, 0xef,
+	0x0f, 0x4e, 0x62, 0x81, 0xcc, 0xbb, 0xe0, 0x8c, 0x1f, 0x67, 0x72, 0x2e,
+	0xb4, 0x0e, 0x4a, 0x9d, 0xa9, 0x62, 0x4f, 0xf8, 0xab, 0x4a, 0x62, 0xf6,
+	0xfd, 0x94, 0x91, 0x3d, 0x37, 0x98, 0x49, 0xf1, 0xfd, 0x12, 0x2c, 0x27,
+	0x9e, 0x8e, 0x19, 0x9d, 0xca, 0xa4, 0x9c, 0xef, 0x54, 0x2b, 0x70, 0xf9,
+	0x60, 0xbd, 0xbd, 0x46, 0xf7, 0x7c, 0x78, 0x95, 0x12, 0xaa, 0x93, 0xb1,
+	0x17, 0xf1, 0x12, 0xea, 0x25, 0xc4, 0x60, 0x27, 0xc7, 0x24, 0x9f, 0x97,
+	0xa2, 0xfa, 0xaa, 0x4b, 0x70, 0x83, 0xcd, 0x6f, 0x82, 0xb8, 0x62, 0x1a,
+	0x33, 0x47, 0xa7, 0x73, 0xff, 0x0f, 0x88, 0x97, 0x73, 0x75, 0xc0, 0xa0,
+	0x2e, 0x4b, 0x46, 0xec, 0xdc, 0xa9, 0x69, 0x82, 0xa9, 0xb9, 0x6f, 0x70,
+	0x1c, 0xe2, 0xbb, 0x9f, 0xea, 0x28, 0xdc, 0xb4, 0x9b, 0x3a, 0x2e, 0x98,
+	0xd6, 0x71, 0x69, 0x98, 0xe0, 0xe0, 0x15, 0x1d, 0x2b, 0xa8, 0xb7, 0x93,
+	0x58, 0x23, 0xd7, 0x2d, 0xea, 0x5e, 0x87, 0x6f, 0x7d, 0x46, 0x9f, 0x2c,
+	0xfd, 0x49, 0x74, 0xfd, 0x84, 0x71, 0x7f, 0x09, 0xae, 0x18, 0x90, 0x6b,
+	0x7e, 0xbc, 0xb7, 0xf8, 0x12, 0x5c, 0x4e, 0x3e, 0x1e, 0x1a, 0x76, 0xa1,
+	0x79, 0x50, 0x8f, 0x1e, 0x43, 0x11, 0xd7, 0xe7, 0x0f, 0xdb, 0xeb, 0x60,
+	0xb4, 0xe1, 0xa2, 0x8a, 0xcf, 0xfa, 0xae, 0x60, 0x5c, 0x11, 0x93, 0x6d,
+	0xff, 0x69, 0xf6, 0xe3, 0x1d, 0xbb, 0x4e, 0x3d, 0x7d, 0x53, 0x6b, 0xce,
+	0x41, 0xbc, 0x73, 0xe2, 0xae, 0xf0, 0x5f, 0x28, 0xfe, 0x7a, 0xf1, 0x9b,
+	0x32, 0xe2, 0x66, 0x05, 0xb6, 0x67, 0x2f, 0xc1, 0x97, 0x07, 0x27, 0xad,
+	0x1a, 0x7d, 0x09, 0xfe, 0x99, 0x35, 0xf7, 0xe5, 0xac, 0xb9, 0xfa, 0xb2,
+	0x0e, 0xda, 0x52, 0xa1, 0x2d, 0xdb, 0x68, 0xcb, 0x22, 0xc7, 0x5e, 0x9a,
+	0x76, 0x93, 0xeb, 0x49, 0x5d, 0x71, 0xe6, 0xa6, 0xa5, 0xc9, 0xb0, 0x12,
+	0xd7, 0xb2, 0xcc, 0xb7, 0x47, 0xe7, 0xa8, 0xe4, 0x51, 0x29, 0x62, 0x98,
+	0x63, 0x4c, 0x62, 0x41, 0xd6, 0x71, 0x59, 0xb8, 0xe8, 0xad, 0xcc, 0x7b,
+	0x1a, 0xdb, 0x34, 0xb2, 0x4d, 0x03, 0x6e, 0xde, 0x17, 0xc3, 0x5c, 0x82,
+	0xc9, 0x86, 0x7d, 0xd7, 0x62, 0x0e, 0xef, 0x3b, 0xc2, 0x58, 0x39, 0x72,
+	0xa8, 0x9e, 0x2f, 0x2f, 0x5f, 0x0d, 0x7c, 0xb5, 0x13, 0x83, 0xea, 0xe0,
+	0x1c, 0x76, 0x60, 0xed, 0xa0, 0x8a, 0xb6, 0x36, 0x05, 0x37, 0x5e, 0x2e,
+	0xe3, 0x71, 0x63, 0x63, 0xf3, 0xa7, 0xbe, 0xd0, 0x9e, 0x96, 0xb3, 0x93,
+	0x6e, 0xf2, 0x16, 0x3f, 0xf4, 0x82, 0xe4, 0x19, 0xe0, 0xd5, 0x7e, 0xc9,
+	0x33, 0x16, 0xea, 0x16, 0x3d, 0x84, 0x85, 0xf5, 0x7d, 0xc4, 0xca, 0x8a,
+	0x62, 0x3d, 0x72, 0x81, 0x5d, 0x3a, 0xd3, 0xf6, 0x39, 0x2e, 0xb3, 0x8e,
+	0x6d, 0x0d, 0xe6, 0xf8, 0x10, 0x71, 0xc0, 0xc5, 0x76, 0xce, 0xb0, 0xa6,
+	0xec, 0xd4, 0xa4, 0x9d, 0xcd, 0x99, 0x43, 0x36, 0x5f, 0xaf, 0xa9, 0xa1,
+	0x0c, 0x60, 0xe1, 0xa0, 0x69, 0xf9, 0xec, 0x39, 0x0b, 0x9a, 0x47, 0x14,
+	0x27, 0xc7, 0x65, 0x48, 0xfd, 0x6b, 0xd7, 0x08, 0xc6, 0xf0, 0x4c, 0xd9,
+	0x59, 0x7b, 0xfe, 0x55, 0xca, 0xee, 0xcc, 0x5d, 0x82, 0x25, 0x83, 0x1a,
+	0x3e, 0x5e, 0xb4, 0x05, 0xfe, 0x59, 0xf7, 0xce, 0x90, 0x3b, 0xf7, 0x73,
+	0xf4, 0x6a, 0xe4, 0x98, 0xfe, 0xdd, 0xf4, 0xb5, 0xd7, 0xa5, 0x06, 0xe9,
+	0x88, 0x33, 0x06, 0xfa, 0x32, 0xf7, 0xd9, 0xed, 0xfc, 0x4a, 0x23, 0x5c,
+	0x76, 0xcd, 0x7d, 0x61, 0x3b, 0x15, 0x2b, 0xf7, 0x95, 0xe6, 0xd8, 0x89,
+	0x50, 0x78, 0x3f, 0x39, 0x9a, 0x9c, 0x09, 0x68, 0x24, 0xbe, 0x48, 0x5d,
+	0x4b, 0xdf, 0x99, 0x28, 0xce, 0xfb, 0xe5, 0xac, 0xb7, 0xaf, 0xdb, 0xc7,
+	0xba, 0xde, 0x78, 0x13, 0x45, 0x9e, 0xe5, 0x3c, 0x3f, 0x97, 0x1a, 0xe7,
+	0x52, 0x4b, 0xbf, 0x03, 0xd4, 0x4b, 0x9b, 0x87, 0x18, 0x47, 0xb2, 0xaf,
+	0xe5, 0xa3, 0x0c, 0x39, 0xeb, 0x7b, 0x80, 0x9c, 0x2a, 0xd8, 0x21, 0x67,
+	0xda, 0x56, 0xe6, 0x5d, 0x88, 0x0f, 0x7b, 0xd0, 0x99, 0x97, 0x9c, 0x7a,
+	0x86, 0x39, 0xb5, 0x0b, 0x3b, 0x98, 0x7f, 0x3a, 0xc7, 0x8e, 0x5e, 0xcd,
+	0x0c, 0xca, 0x77, 0x2f, 0x5f, 0x0d, 0x7c, 0x79, 0x30, 0xce, 0xba, 0x31,
+	0xc9, 0x38, 0xdf, 0x93, 0xe9, 0xc2, 0xfd, 0x72, 0x26, 0x9c, 0x18, 0x79,
+	0x4b, 0x8a, 0xb9, 0x90, 0x39, 0x77, 0x84, 0xf3, 0xbe, 0x62, 0xa0, 0x0e,
+	0x63, 0x76, 0xbe, 0xad, 0xc3, 0xf2, 0x7e, 0x62, 0xf4, 0x88, 0x9c, 0x9f,
+	0xaa, 0x47, 0xf4, 0x81, 0x35, 0xe8, 0x1a, 0xee, 0xc2, 0x40, 0x66, 0x16,
+	0xae, 0x60, 0xdc, 0x16, 0x0e, 0xca, 0x38, 0xbd, 0x58, 0x43, 0xdf, 0xc9,
+	0xd3, 0x47, 0x56, 0xd2, 0x77, 0x1e, 0x39, 0xe4, 0x43, 0x07, 0xb9, 0xd4,
+	0xe1, 0x89, 0x3b, 0xcf, 0x09, 0x1e, 0xee, 0x2e, 0xcc, 0xcc, 0x27, 0x12,
+	0x0f, 0x36, 0x7e, 0x44, 0x4b, 0xf8, 0xf1, 0xe9, 0xef, 0x33, 0x31, 0xea,
+	0x06, 0xc1, 0x1f, 0xde, 0x53, 0xc2, 0xfd, 0x99, 0x98, 0xf4, 0x29, 0x3e,
+	0x34, 0x0d, 0xca, 0xbb, 0x86, 0x3b, 0x23, 0x12, 0x73, 0x97, 0x60, 0xc1,
+	0xb0, 0xbd, 0xbe, 0x3d, 0x3d, 0x97, 0x87, 0xaa, 0x50, 0x39, 0xd7, 0x3e,
+	0x33, 0xb1, 0x94, 0x71, 0x72, 0xb3, 0xe1, 0xc0, 0xd4, 0xac, 0x22, 0x17,
+	0xbd, 0x7e, 0x5f, 0x2b, 0x5e, 0x18, 0x25, 0xd7, 0xa1, 0x1f, 0xdf, 0x12,
+	0x2e, 0x43, 0xa2, 0x53, 0xda, 0x79, 0x71, 0x5d, 0xba, 0x1e, 0xab, 0xf7,
+	0x35, 0xe2, 0x39, 0xe6, 0xe4, 0x17, 0x47, 0xe5, 0xda, 0x36, 0xca, 0x10,
+	0x5f, 0x9d, 0xa9, 0xe3, 0x9e, 0x19, 0x3a, 0xb6, 0x44, 0x67, 0xd9, 0x7c,
+	0xfb, 0xf4, 0x4d, 0x49, 0xd6, 0xeb, 0xaf, 0xe9, 0x50, 0x1e, 0x08, 0x6e,
+	0xc3, 0x37, 0xda, 0x02, 0xfd, 0xb7, 0x2b, 0x7a, 0xdf, 0x2d, 0x6a, 0x88,
+	0xb5, 0xc8, 0x14, 0x56, 0xe4, 0x4f, 0x21, 0x9e, 0xff, 0x7e, 0x85, 0xac,
+	0x33, 0xde, 0x9c, 0x5f, 0x8f, 0x49, 0xc6, 0x7b, 0x35, 0xdb, 0x4c, 0xa4,
+	0x3c, 0xcc, 0x1d, 0x50, 0x2a, 0xae, 0x0a, 0xe1, 0x5d, 0x72, 0x83, 0xb5,
+	0xe9, 0x29, 0x84, 0x99, 0x60, 0xbe, 0x9c, 0x3e, 0x85, 0x2b, 0x38, 0x0f,
+	0x6b, 0xd2, 0x9f, 0x58, 0xcf, 0x05, 0x3f, 0xb2, 0xdb, 0xcd, 0x9f, 0xf8,
+	0xc7, 0x73, 0x03, 0x9f, 0x62, 0xbb, 0x56, 0xae, 0x2f, 0xbc, 0x00, 0x57,
+	0x5a, 0xdb, 0x7b, 0x93, 0x13, 0xbf, 0xaa, 0x8f, 0xbd, 0xff, 0xe3, 0xb5,
+	0x57, 0x16, 0xfd, 0xca, 0x9f, 0xdb, 0x88, 0xbb, 0x6c, 0xce, 0xb2, 0x71,
+	0xcb, 0x9c, 0x58, 0xf7, 0xb7, 0xa3, 0x57, 0xb9, 0xd1, 0xe3, 0x95, 0x1a,
+	0xf0, 0x6e, 0xec, 0xdc, 0xbf, 0x05, 0xdb, 0xf7, 0x0f, 0xf2, 0x73, 0xcb,
+	0xd9, 0x61, 0xcc, 0xa1, 0x6d, 0x8a, 0x78, 0xe8, 0xd4, 0xf7, 0x96, 0x51,
+	0xae, 0xea, 0xb2, 0xcf, 0x76, 0xfa, 0xc9, 0xf9, 0x8a, 0xb2, 0xe6, 0xe5,
+	0xaa, 0xe9, 0xfb, 0x5d, 0x48, 0x92, 0xfb, 0x57, 0x32, 0xef, 0x38, 0x59,
+	0xff, 0xed, 0x19, 0xb0, 0x68, 0x3f, 0xd6, 0x87, 0xeb, 0x65, 0x0f, 0xfd,
+	0xde, 0xe9, 0xf3, 0xd0, 0x72, 0x2e, 0xb9, 0x97, 0xdf, 0x8f, 0x56, 0x15,
+	0xf5, 0xea, 0xbd, 0x80, 0x53, 0x94, 0xe6, 0x53, 0x6c, 0x57, 0xf2, 0x81,
+	0x95, 0xbc, 0xb7, 0xde, 0x5e, 0xfb, 0xfa, 0x34, 0xd6, 0xbe, 0x52, 0x65,
+	0xaf, 0x17, 0xe7, 0x67, 0xe6, 0xc6, 0xdd, 0xd3, 0xb6, 0xff, 0x56, 0x55,
+	0x09, 0xd7, 0x8b, 0xfa, 0x1a, 0xc4, 0x89, 0x05, 0xc4, 0xf1, 0x52, 0x6c,
+	0xf6, 0xce, 0x88, 0xcd, 0xef, 0x57, 0xc9, 0x1e, 0x6a, 0x99, 0x5e, 0x5a,
+	0xf7, 0x78, 0xef, 0x93, 0xdb, 0x34, 0x99, 0xdb, 0xd2, 0x3a, 0xc6, 0xa4,
+	0xdf, 0xc1, 0x3a, 0x7e, 0xb7, 0x2c, 0x25, 0x24, 0xff, 0x1d, 0x4e, 0xd4,
+	0x29, 0xf8, 0x2b, 0xbd, 0x16, 0xaf, 0x87, 0xed, 0x75, 0x0f, 0xfe, 0x96,
+	0xac, 0x2a, 0xfa, 0xa2, 0x73, 0x86, 0x6e, 0xc7, 0x2f, 0xd0, 0x6d, 0xa6,
+	0xef, 0x8a, 0x6e, 0xc5, 0x75, 0x92, 0xe2, 0x6f, 0x5b, 0x3d, 0xa8, 0x14,
+	0xbd, 0x65, 0x7e, 0x6e, 0xe2, 0x67, 0x99, 0x0b, 0xd1, 0xd1, 0x2d, 0x39,
+	0x80, 0x1c, 0xaa, 0xd3, 0xde, 0x0b, 0xac, 0x24, 0x6f, 0xdd, 0x4e, 0xcc,
+	0x7b, 0x3b, 0xab, 0xe0, 0xad, 0xac, 0x13, 0x8e, 0x01, 0x1f, 0x5e, 0xcf,
+	0x92, 0xb3, 0x0d, 0xcc, 0xc1, 0xa9, 0x2c, 0xb9, 0xde, 0x80, 0xe4, 0xea,
+	0x2d, 0xcc, 0xd5, 0x17, 0xe3, 0xcd, 0x6c, 0x39, 0xd4, 0x01, 0xd9, 0x8b,
+	0xdd, 0x7c, 0xd3, 0xb3, 0xcc, 0x45, 0x27, 0xc9, 0x13, 0x5d, 0x03, 0x8d,
+	0x78, 0x23, 0x5b, 0x81, 0xb9, 0x03, 0x5f, 0x80, 0x95, 0xad, 0xc4, 0x9c,
+	0x81, 0x4b, 0xf1, 0x71, 0xb6, 0x0a, 0xbe, 0x81, 0xb9, 0x38, 0x9b, 0xf5,
+	0xa0, 0x7e, 0xc0, 0x8f, 0x0f, 0xb3, 0xd5, 0xa8, 0x1b, 0x08, 0xe0, 0x83,
+	0x6c, 0x0d, 0xb4, 0x81, 0x79, 0x38, 0x93, 0xad, 0x45, 0xed, 0x40, 0x13,
+	0xde, 0xcf, 0x6a, 0xa8, 0x19, 0xd0, 0xf1, 0x5e, 0xb6, 0x0e, 0xd5, 0x03,
+	0x41, 0xbc, 0x9b, 0xf5, 0xc2, 0xb3, 0x37, 0x84, 0x77, 0x46, 0x1b, 0x50,
+	0xb5, 0xb7, 0x9b, 0x18, 0xd1, 0xc3, 0x71, 0x2d, 0xc0, 0xdb, 0xa3, 0x3e,
+	0x38, 0xf6, 0x4e, 0x6a, 0xa4, 0x16, 0x58, 0x1e, 0x6c, 0xc5, 0xeb, 0xa3,
+	0x8d, 0x98, 0x9b, 0x0a, 0x4c, 0xb6, 0x23, 0x70, 0x7c, 0x05, 0x6a, 0x59,
+	0x8f, 0x82, 0xb5, 0x01, 0x50, 0x41, 0x6e, 0xfa, 0x84, 0xd6, 0x8d, 0x9d,
+	0x05, 0xb1, 0x9b, 0xcc, 0x81, 0xcc, 0x45, 0x69, 0x1e, 0x64, 0xbf, 0xb2,
+	0x16, 0xe3, 0xe1, 0x1e, 0xce, 0xfb, 0xc7, 0x9e, 0xa2, 0x6d, 0x4b, 0x63,
+	0x09, 0xf4, 0xef, 0x82, 0xfd, 0x1d, 0xd9, 0x9c, 0xd8, 0x1d, 0x8c, 0x1b,
+	0x65, 0xbb, 0x3c, 0x5f, 0xe2, 0x88, 0xa9, 0x35, 0xdb, 0x23, 0x9b, 0xaf,
+	0x49, 0xe4, 0x0e, 0xb0, 0x06, 0x92, 0x1a, 0x73, 0xcb, 0x35, 0x1b, 0x73,
+	0xa7, 0xcf, 0xef, 0x5f, 0xf5, 0x1b, 0x4b, 0x7d, 0x1a, 0xbe, 0x84, 0x8d,
+	0xf6, 0x9a, 0xbd, 0x4a, 0x5f, 0x90, 0x33, 0x66, 0xf6, 0xb3, 0x26, 0xf4,
+	0xdf, 0x04, 0x0c, 0xdb, 0x8f, 0x37, 0xa1, 0x29, 0x67, 0xef, 0x0d, 0x84,
+	0x12, 0x78, 0x4a, 0xed, 0xd0, 0xcd, 0xe9, 0x33, 0x52, 0xe6, 0xd5, 0x1a,
+	0xe2, 0x86, 0x76, 0xfe, 0x1c, 0x55, 0xc0, 0x3f, 0x8e, 0x80, 0x6f, 0x17,
+	0x4c, 0xf4, 0x16, 0xa4, 0x5d, 0x17, 0x82, 0x76, 0xfb, 0xaf, 0x43, 0xcf,
+	0x95, 0xd6, 0xf7, 0xe4, 0xd9, 0x0c, 0xd9, 0x37, 0x65, 0x0d, 0x62, 0xcc,
+	0x5c, 0xb3, 0xc3, 0x7a, 0x07, 0x82, 0xd1, 0x76, 0x05, 0x89, 0x8a, 0x58,
+	0xd0, 0xff, 0xcf, 0xd3, 0xe7, 0xcb, 0x5c, 0x13, 0x3b, 0x94, 0xb2, 0x89,
+	0x3e, 0xc5, 0x39, 0x51, 0x5a, 0xb3, 0x93, 0x1a, 0xa6, 0x3e, 0x51, 0x19,
+	0xd3, 0xd0, 0xb1, 0xd8, 0x89, 0x5c, 0xb2, 0x86, 0xb5, 0xaf, 0x86, 0xb1,
+	0xc5, 0x65, 0xe4, 0x1e, 0xf2, 0xbc, 0xc0, 0x33, 0xa8, 0x60, 0xed, 0x37,
+	0x9e, 0x34, 0xc3, 0xcf, 0xb1, 0x4f, 0x59, 0x07, 0x1b, 0x1d, 0xda, 0x11,
+	0x3e, 0xca, 0x1a, 0x61, 0x24, 0xe9, 0x60, 0x22, 0xe9, 0xc7, 0x8e, 0xf1,
+	0xd2, 0xba, 0x9a, 0x0f, 0x85, 0xe4, 0x89, 0xb0, 0xd4, 0x0f, 0x79, 0xfb,
+	0x79, 0x9b, 0x9f, 0x87, 0x5f, 0xce, 0x89, 0xfc, 0x90, 0xb5, 0x3b, 0x63,
+	0x58, 0xbb, 0x98, 0xff, 0xf2, 0xc9, 0xfa, 0x44, 0x2d, 0xe5, 0x9f, 0x5e,
+	0xdc, 0x83, 0xf7, 0x28, 0x6f, 0x22, 0xb9, 0xd5, 0x3e, 0x6b, 0x9a, 0x4b,
+	0xae, 0xb6, 0xeb, 0xbe, 0xef, 0x25, 0x3b, 0x58, 0xf7, 0xb1, 0xd6, 0x1b,
+	0x12, 0xfe, 0xd0, 0x8e, 0xa5, 0x49, 0x05, 0x2b, 0x83, 0xeb, 0xf1, 0xfc,
+	0xe8, 0x7a, 0x3c, 0x33, 0x24, 0x67, 0xd4, 0x2f, 0xc2, 0xc6, 0xe2, 0x8a,
+	0x1b, 0x7f, 0x8f, 0xf3, 0xf7, 0x75, 0x38, 0x4a, 0x7f, 0x18, 0x61, 0xbd,
+	0xf7, 0x3a, 0xb1, 0x6b, 0x38, 0xd9, 0x8a, 0x93, 0xac, 0x6b, 0x7e, 0x90,
+	0x8c, 0xe2, 0x63, 0x7e, 0x3f, 0x92, 0x94, 0xfd, 0x98, 0x08, 0xce, 0xe6,
+	0x7e, 0x88, 0xb2, 0xd4, 0x1c, 0x1c, 0xeb, 0x7c, 0x12, 0x6a, 0xea, 0x08,
+	0x5f, 0x1d, 0x38, 0x39, 0xda, 0x81, 0x53, 0x43, 0xd7, 0xe3, 0xd4, 0xe8,
+	0x5b, 0x38, 0x3d, 0x24, 0xfa, 0x5a, 0x96, 0x1a, 0x16, 0xb9, 0x3a, 0xe5,
+	0x12, 0x1f, 0x47, 0xff, 0x4f, 0x64, 0xbf, 0x6d, 0x1d, 0x5b, 0x2f, 0x72,
+	0x9f, 0xfc, 0x23, 0xb2, 0xbb, 0x18, 0xf7, 0x72, 0x4e, 0xc7, 0x8d, 0xe7,
+	0x69, 0x9f, 0xe3, 0xc9, 0xc9, 0xcb, 0x2a, 0x30, 0xc9, 0xbc, 0xe8, 0xc7,
+	0xee, 0x5c, 0x39, 0x9e, 0x66, 0xfd, 0xb6, 0xd1, 0xb8, 0x96, 0xb8, 0x35,
+	0x44, 0x9f, 0x2d, 0xc7, 0x4f, 0x98, 0xf3, 0xee, 0x0c, 0x5f, 0x83, 0x78,
+	0x5d, 0x2b, 0xed, 0xe7, 0xc1, 0x4b, 0x49, 0x2f, 0x5e, 0x4e, 0xb6, 0x24,
+	0xf2, 0xca, 0x95, 0xd3, 0x67, 0x32, 0x3d, 0xe4, 0xcb, 0xdd, 0xb6, 0x4e,
+	0x3f, 0x49, 0x86, 0xac, 0x9d, 0xb4, 0x71, 0x5f, 0xe6, 0x6e, 0xbc, 0x4d,
+	0x7b, 0xbe, 0x90, 0x3c, 0x6b, 0xa9, 0xfa, 0xab, 0x78, 0x94, 0x36, 0x7d,
+	0x3e, 0x99, 0xe0, 0x1c, 0x36, 0xb2, 0x26, 0x3e, 0x81, 0xd1, 0xdc, 0x56,
+	0xbc, 0xde, 0xaf, 0x1f, 0xdf, 0x88, 0xad, 0x8c, 0xcb, 0x72, 0x72, 0x22,
+	0x37, 0x6a, 0x17, 0x39, 0x31, 0x65, 0xcb, 0xe3, 0x5c, 0xf4, 0x2b, 0xc8,
+	0x2d, 0xde, 0x8a, 0x77, 0xf8, 0xdb, 0x2b, 0xfc, 0xfc, 0x1e, 0xf3, 0xd2,
+	0xe4, 0xf4, 0x6f, 0xaf, 0xf7, 0x47, 0xc8, 0xd9, 0x54, 0x7c, 0x3b, 0x22,
+	0x6d, 0x7f, 0x89, 0x23, 0xd4, 0xf9, 0x68, 0xbf, 0x8a, 0x15, 0x86, 0xd3,
+	0x5e, 0x73, 0x94, 0x7b, 0x4e, 0x73, 0x0c, 0x4e, 0xb6, 0x3f, 0x95, 0xfd,
+	0x0e, 0x65, 0xc9, 0x73, 0x0a, 0xf2, 0x8c, 0xc2, 0x12, 0xe4, 0xc2, 0xdf,
+	0xa1, 0xcc, 0x9f, 0x87, 0x57, 0x92, 0xa3, 0xcc, 0x0f, 0xab, 0x98, 0x62,
+	0xfd, 0x5b, 0x43, 0xfe, 0x95, 0xcf, 0xbe, 0x85, 0xc2, 0xb4, 0x7d, 0x4e,
+	0x86, 0x65, 0x9c, 0x85, 0x6a, 0x54, 0x7a, 0x39, 0xae, 0xc7, 0xf8, 0xde,
+	0x8d, 0xa9, 0x9c, 0x60, 0x7d, 0xe9, 0x2c, 0x9e, 0xac, 0x53, 0x49, 0x9c,
+	0xf9, 0xa7, 0xd7, 0xcb, 0x66, 0x23, 0x33, 0x50, 0x93, 0x98, 0xc5, 0x3e,
+	0xfe, 0xd3, 0x95, 0xb5, 0x78, 0x3b, 0xfc, 0x10, 0xf6, 0x8c, 0x38, 0x91,
+	0x49, 0xb9, 0xb1, 0x27, 0x55, 0x8f, 0x87, 0xf7, 0x6a, 0x78, 0x70, 0xef,
+	0xc5, 0xd8, 0xb1, 0xf7, 0x52, 0x1c, 0xd8, 0xdb, 0x88, 0x34, 0xeb, 0xdb,
+	0x77, 0x17, 0x59, 0xd6, 0x02, 0xbe, 0xee, 0x63, 0xcc, 0xb8, 0xf9, 0xfe,
+	0x5c, 0x58, 0xe2, 0x49, 0xc7, 0x42, 0x3b, 0xae, 0xda, 0x71, 0x99, 0xfd,
+	0x1e, 0xc7, 0x82, 0x5c, 0x4f, 0x78, 0x73, 0x7e, 0x6b, 0xf8, 0xf6, 0xfc,
+	0x6c, 0xec, 0x1c, 0x68, 0xc0, 0xc0, 0xde, 0xfa, 0x44, 0x3d, 0xfb, 0x59,
+	0x77, 0xa5, 0x85, 0x61, 0xb6, 0x35, 0xda, 0xfa, 0xc2, 0x1b, 0xf3, 0x4f,
+	0x92, 0xe7, 0x78, 0xd1, 0x4b, 0x8c, 0x7c, 0x78, 0xaf, 0x60, 0x8a, 0xf3,
+	0xf8, 0x6d, 0xb0, 0xac, 0xb3, 0x8b, 0x8e, 0x60, 0x43, 0xfe, 0x87, 0xe8,
+	0xe2, 0x6f, 0xe9, 0x81, 0x1d, 0xc8, 0x14, 0xca, 0x12, 0xee, 0x98, 0x85,
+	0x97, 0xc2, 0x93, 0xb8, 0x81, 0xf2, 0xee, 0x1f, 0xa8, 0xa1, 0x4e, 0x95,
+	0x89, 0x72, 0x5e, 0x5b, 0x19, 0xee, 0xc3, 0x9e, 0x82, 0xac, 0xd9, 0x1d,
+	0x27, 0x77, 0xd2, 0x50, 0xb7, 0x58, 0xab, 0x46, 0x8d, 0xe6, 0x3c, 0x13,
+	0x11, 0x3f, 0x4c, 0xd0, 0x0f, 0x65, 0xbf, 0x66, 0x13, 0x6e, 0x49, 0xda,
+	0x67, 0x5e, 0xf0, 0x6c, 0x52, 0xf0, 0xfc, 0xeb, 0x38, 0x94, 0x34, 0xc9,
+	0xab, 0x64, 0x7f, 0x7a, 0x35, 0x9a, 0xf2, 0x0f, 0x85, 0x6f, 0x65, 0x3e,
+	0x77, 0xe4, 0x7f, 0x89, 0xe5, 0xf9, 0x2c, 0xf5, 0x1a, 0x0d, 0xdf, 0x92,
+	0x3f, 0x10, 0xbe, 0x2d, 0xdf, 0x81, 0x79, 0x79, 0x59, 0x17, 0xeb, 0x64,
+	0x8e, 0x90, 0x75, 0xb1, 0x29, 0x2c, 0x25, 0x07, 0x58, 0x96, 0x7f, 0x95,
+	0x5c, 0x40, 0xf0, 0x45, 0xd6, 0xcb, 0xbe, 0xe3, 0x42, 0xa5, 0xec, 0x67,
+	0x0f, 0x32, 0x17, 0x6f, 0x45, 0xef, 0xfe, 0x12, 0x96, 0xb5, 0x68, 0x23,
+	0x82, 0x43, 0x05, 0x97, 0x9d, 0x4f, 0xfa, 0x33, 0x5f, 0xa1, 0x5f, 0xaa,
+	0xa8, 0xb0, 0xf3, 0x9c, 0xc9, 0x98, 0x1e, 0x22, 0xcf, 0x96, 0xfc, 0xfb,
+	0xe5, 0xe9, 0xeb, 0x92, 0xa7, 0x25, 0xf7, 0x4a, 0xae, 0xb6, 0xf7, 0xd8,
+	0xfc, 0x6e, 0xfd, 0x06, 0xfe, 0x26, 0xed, 0x07, 0x91, 0xde, 0xdf, 0x6a,
+	0xdd, 0x4f, 0x3d, 0xe4, 0xcc, 0xc9, 0xb1, 0x20, 0xfb, 0x1a, 0x07, 0x56,
+	0x1e, 0x14, 0xfe, 0xb1, 0x09, 0x13, 0x29, 0xd6, 0x43, 0x7a, 0xc8, 0x62,
+	0x7d, 0x7a, 0x5b, 0x35, 0x31, 0x64, 0xf5, 0x44, 0x19, 0xe2, 0x87, 0x2a,
+	0xb1, 0x6a, 0xaf, 0x41, 0x9f, 0x36, 0xe9, 0xc7, 0xba, 0x71, 0x8b, 0x52,
+	0x89, 0x15, 0xbc, 0x76, 0xf3, 0x80, 0x3c, 0xef, 0x12, 0x3c, 0x7e, 0xd2,
+	0x51, 0x89, 0x0d, 0x07, 0xdd, 0xc8, 0x66, 0x57, 0x23, 0x7e, 0xf0, 0x17,
+	0x30, 0xb3, 0x2a, 0x7c, 0xfb, 0xfa, 0xa9, 0xbf, 0x13, 0x6a, 0xec, 0x2d,
+	0x1c, 0x18, 0x55, 0x51, 0xbb, 0xef, 0x29, 0x72, 0x72, 0x45, 0x7f, 0x2f,
+	0xf8, 0x63, 0xa4, 0x47, 0x9d, 0xa8, 0x4e, 0xb7, 0x63, 0x82, 0x98, 0xe3,
+	0x49, 0xc7, 0x91, 0xcb, 0x75, 0x22, 0x4b, 0x4c, 0xc9, 0x92, 0x7f, 0x55,
+	0xa5, 0x0d, 0x78, 0xf4, 0x10, 0xf6, 0x30, 0x6e, 0xca, 0x58, 0x87, 0xef,
+	0xca, 0x5d, 0x0b, 0x73, 0x74, 0x0d, 0x76, 0x8f, 0x76, 0xf2, 0x15, 0x43,
+	0xef, 0xe8, 0xdd, 0x58, 0x3a, 0xf1, 0x2a, 0xfa, 0x72, 0x09, 0x1c, 0xce,
+	0xfd, 0x1e, 0xbb, 0xb3, 0x3f, 0xc7, 0xc3, 0xfd, 0xdb, 0xc8, 0xdb, 0x7f,
+	0x8e, 0x07, 0xf9, 0xb9, 0xbf, 0x5f, 0xef, 0xf1, 0xa9, 0x3f, 0x47, 0x26,
+	0xbb, 0x15, 0x6b, 0x06, 0x14, 0xbc, 0x44, 0xff, 0xbf, 0xe1, 0x20, 0x7d,
+	0xf1, 0x81, 0x6e, 0x74, 0x4c, 0xfc, 0x12, 0xc9, 0xdc, 0x3f, 0x62, 0x4f,
+	0xb6, 0x8f, 0xb9, 0x76, 0x07, 0x76, 0x67, 0x9e, 0xa1, 0x9c, 0xe3, 0x8c,
+	0xf7, 0x1e, 0x8e, 0xf1, 0x1e, 0xbe, 0xce, 0x63, 0xbd, 0xe6, 0x57, 0x4a,
+	0x98, 0xce, 0xf8, 0xcf, 0x48, 0xed, 0x60, 0x12, 0x2f, 0x1e, 0xae, 0xb1,
+	0x9f, 0x7f, 0xd0, 0x4b, 0x6b, 0xc5, 0x32, 0x17, 0xa5, 0xf5, 0x6c, 0x27,
+	0x2a, 0xd2, 0xb2, 0x4e, 0x3c, 0x19, 0xa8, 0x20, 0x2f, 0x70, 0xa7, 0xc5,
+	0x86, 0x86, 0xb5, 0x3d, 0x23, 0x98, 0x52, 0xe4, 0x4d, 0xcf, 0xe5, 0xde,
+	0xc2, 0xce, 0xa1, 0x59, 0x58, 0xd6, 0xdf, 0x88, 0x84, 0xd7, 0xb2, 0x1e,
+	0x37, 0x5a, 0xad, 0x24, 0x6b, 0xa5, 0x3d, 0x03, 0x71, 0x62, 0x4b, 0x15,
+	0xe4, 0x7c, 0x95, 0x70, 0x8a, 0xea, 0x74, 0xc0, 0xf8, 0xec, 0xbe, 0xc4,
+	0x3c, 0xce, 0x9b, 0xe4, 0xc0, 0xc9, 0xcb, 0xaa, 0x71, 0x45, 0x75, 0x71,
+	0xbd, 0xfa, 0xc0, 0x79, 0x6e, 0xf5, 0xe7, 0xdd, 0xdf, 0xff, 0x7f, 0x78,
+	0xff, 0xcc, 0xf3, 0x9e, 0xa5, 0xe7, 0xfb, 0x64, 0xac, 0x97, 0xca, 0x33,
+	0x86, 0xa6, 0xf0, 0x35, 0xe2, 0x27, 0x8e, 0x25, 0xcb, 0x98, 0x4f, 0xd5,
+	0x25, 0x2e, 0xa8, 0x5e, 0x17, 0xca, 0x99, 0xf7, 0x1a, 0xd0, 0xeb, 0xb5,
+	0xb0, 0xdc, 0x28, 0xc3, 0xe1, 0xd6, 0xb8, 0x9c, 0xff, 0xe9, 0x72, 0xd9,
+	0x7c, 0xf8, 0x87, 0x5d, 0xff, 0x76, 0xfd, 0xf9, 0x00, 0xd2, 0x19, 0x39,
+	0xf7, 0xd2, 0x89, 0x97, 0xea, 0xe4, 0x99, 0xc3, 0x03, 0xf4, 0x63, 0x05,
+	0x15, 0xcd, 0x8c, 0xe9, 0xb0, 0x1f, 0xc7, 0xf5, 0x16, 0x7f, 0xbd, 0x1a,
+	0x30, 0xa0, 0xbc, 0x61, 0x99, 0x5e, 0xf2, 0xa3, 0x82, 0x9c, 0xed, 0xf9,
+	0x43, 0x7b, 0x0b, 0xdf, 0xc5, 0xee, 0x07, 0x22, 0x98, 0x5a, 0x2f, 0x6b,
+	0x19, 0xbf, 0xae, 0x2e, 0x71, 0xca, 0x5d, 0x19, 0xab, 0x46, 0x38, 0x86,
+	0xc8, 0xde, 0xcd, 0xfa, 0xcb, 0xa5, 0x87, 0xf1, 0x86, 0xb0, 0x44, 0xbd,
+	0xb4, 0xcf, 0x23, 0xf1, 0x71, 0xc5, 0xf4, 0xfd, 0x24, 0x2c, 0x95, 0xd2,
+	0xe6, 0x00, 0x79, 0xa1, 0xe8, 0xf3, 0x5b, 0x6b, 0xa3, 0xb7, 0x9e, 0xf7,
+	0xfe, 0x5f, 0xd3, 0xbf, 0x8b, 0x2f, 0xc8, 0x59, 0x31, 0xb9, 0x26, 0x6d,
+	0x6c, 0x5e, 0x32, 0xa3, 0x8d, 0x03, 0x75, 0xfa, 0x65, 0xe4, 0xd7, 0xb2,
+	0xf6, 0xf0, 0xb2, 0xb5, 0x4d, 0xce, 0x75, 0x35, 0x6b, 0x33, 0xfa, 0xfa,
+	0x42, 0xad, 0xe8, 0x52, 0x4e, 0x5d, 0x06, 0x32, 0x72, 0xb6, 0xfb, 0x63,
+	0xab, 0xb9, 0x41, 0x7e, 0xff, 0x52, 0x4d, 0x51, 0x7e, 0x93, 0x7d, 0x1e,
+	0xf6, 0x40, 0xa6, 0xa4, 0xb7, 0xac, 0x91, 0x7a, 0x4b, 0x7d, 0x85, 0x3e,
+	0x1d, 0x8f, 0xe8, 0xf6, 0x48, 0xcd, 0x67, 0x75, 0x5e, 0x52, 0x5d, 0x3a,
+	0x03, 0x3e, 0xc7, 0x6e, 0x53, 0xea, 0x53, 0x74, 0x3c, 0x80, 0x07, 0x0b,
+	0x17, 0x8e, 0xf1, 0x6b, 0x33, 0xc6, 0x24, 0x6d, 0x64, 0x5c, 0xda, 0xb4,
+	0x1f, 0x7c, 0x95, 0xf7, 0x48, 0x9b, 0x40, 0xb4, 0x78, 0x8d, 0xf1, 0xbb,
+	0x5f, 0xe4, 0x89, 0x0c, 0xcb, 0x7a, 0xb3, 0x98, 0x3b, 0xed, 0x7b, 0x06,
+	0x0a, 0xad, 0xf4, 0x73, 0x6b, 0x1b, 0xf1, 0xd3, 0x7a, 0x33, 0xe2, 0xc3,
+	0xce, 0x64, 0x71, 0xdf, 0x78, 0x8c, 0xd8, 0xd1, 0x6b, 0xf3, 0x22, 0x17,
+	0xb6, 0x67, 0xed, 0x33, 0xf7, 0xd6, 0x21, 0xa3, 0x5c, 0xf6, 0x7b, 0x7c,
+	0x62, 0xf3, 0xed, 0x06, 0xf9, 0x98, 0xb6, 0xd4, 0xef, 0x24, 0xa7, 0xba,
+	0x15, 0xbf, 0xe3, 0xfc, 0xca, 0x79, 0xfe, 0xe2, 0x7e, 0x62, 0x82, 0x7e,
+	0x54, 0xcc, 0x61, 0xb2, 0x47, 0x47, 0x3e, 0x35, 0x7d, 0xce, 0x79, 0x7b,
+	0xee, 0x77, 0xd6, 0xa4, 0x7d, 0xce, 0xf9, 0xd3, 0xe7, 0xb1, 0xb2, 0x9a,
+	0x65, 0x8d, 0xf0, 0xb7, 0x5d, 0xe7, 0xcf, 0x3c, 0x33, 0xb7, 0xeb, 0x72,
+	0x36, 0xfa, 0x5f, 0x39, 0x77, 0x33, 0xef, 0x9d, 0xac, 0x2b, 0x3e, 0x03,
+	0x10, 0x57, 0x97, 0xea, 0x25, 0x5c, 0x0d, 0x98, 0xa6, 0x8d, 0xab, 0xfb,
+	0x6a, 0x8b, 0x7b, 0x4b, 0x81, 0x8e, 0x4e, 0x98, 0x56, 0xa5, 0x5e, 0xc2,
+	0x01, 0xdd, 0x58, 0xa0, 0x6c, 0x63, 0x8e, 0xac, 0x94, 0xf3, 0x38, 0x01,
+	0x67, 0x2c, 0xa0, 0x9d, 0x46, 0x30, 0xf4, 0x8c, 0xbd, 0x9f, 0x29, 0xd8,
+	0xa0, 0xe3, 0xd6, 0x5c, 0x94, 0x3e, 0x2b, 0xcf, 0x7b, 0xcb, 0x67, 0x5b,
+	0x3e, 0x3f, 0x0b, 0x96, 0x76, 0x11, 0x4b, 0xcd, 0xff, 0xe0, 0xb2, 0xe5,
+	0x05, 0xba, 0x46, 0x95, 0x40, 0xc7, 0x16, 0xa5, 0x24, 0xcf, 0xf3, 0x39,
+	0xf2, 0x42, 0x6c, 0x1f, 0x99, 0x7e, 0x4e, 0x59, 0xa7, 0x0c, 0xb1, 0x97,
+	0xe0, 0xc6, 0x11, 0xe5, 0xa8, 0xfd, 0x8c, 0xc2, 0x6c, 0xe6, 0xad, 0x60,
+	0xf4, 0xf0, 0x34, 0x77, 0x7c, 0x26, 0xb7, 0x43, 0x99, 0xcc, 0xf5, 0x29,
+	0xcf, 0x4d, 0x3f, 0x9b, 0xf0, 0xf4, 0xe7, 0xf7, 0x19, 0x67, 0x9f, 0x1d,
+	0x95, 0x4a, 0x3c, 0x5c, 0x81, 0x6d, 0x28, 0x0f, 0x07, 0x43, 0xcf, 0x01,
+	0x7e, 0x67, 0x2c, 0xe8, 0x1b, 0xb5, 0xf7, 0x5d, 0x0d, 0xf7, 0x32, 0xbb,
+	0x7d, 0x84, 0xfc, 0xf9, 0x8f, 0xdb, 0xa4, 0x4a, 0xd7, 0x3b, 0x5b, 0x94,
+	0xf8, 0xd5, 0x95, 0x94, 0x13, 0x0a, 0xc3, 0x5f, 0x16, 0x2b, 0xd9, 0x28,
+	0x18, 0x3a, 0x2d, 0xe7, 0x1a, 0x22, 0x41, 0xdf, 0xb0, 0x7d, 0xee, 0x59,
+	0xec, 0x62, 0xb8, 0x8b, 0x73, 0x1f, 0x15, 0x5e, 0x6e, 0xba, 0x98, 0x3b,
+	0xc7, 0x93, 0xb2, 0xfe, 0xd3, 0xa2, 0xed, 0x46, 0x9d, 0xec, 0x91, 0xc7,
+	0x7b, 0x5b, 0x89, 0xdf, 0x49, 0xc4, 0x1d, 0x0b, 0x6b, 0xe5, 0x79, 0x98,
+	0xb8, 0x43, 0x4f, 0x90, 0x1b, 0xb5, 0x84, 0xee, 0xa3, 0xff, 0x66, 0xbd,
+	0x01, 0x9f, 0x89, 0x04, 0x9e, 0x4e, 0x2e, 0xfd, 0x4b, 0x07, 0x4c, 0xa3,
+	0x8a, 0x13, 0x5d, 0x19, 0xf3, 0x6f, 0xb8, 0x3e, 0x18, 0xf0, 0xbf, 0x30,
+	0xbd, 0x6f, 0xbc, 0x3d, 0xf9, 0x1b, 0x79, 0x06, 0x91, 0xed, 0xfe, 0xd8,
+	0x3d, 0xd2, 0xb7, 0x1b, 0x63, 0xfd, 0xdf, 0xc3, 0x8e, 0x07, 0xa8, 0xa3,
+	0x6e, 0x61, 0xa9, 0xb1, 0x0d, 0xcb, 0x0c, 0x0f, 0x36, 0x69, 0xf3, 0xa3,
+	0x2a, 0xef, 0x1b, 0xce, 0x8a, 0xce, 0x3d, 0xca, 0x4e, 0x7b, 0x5f, 0x3a,
+	0xcb, 0xba, 0xc6, 0xce, 0x9f, 0x9a, 0x3b, 0x16, 0x57, 0xee, 0xcf, 0xb5,
+	0x2b, 0xf7, 0x65, 0x45, 0x56, 0x8f, 0xd2, 0x97, 0xbb, 0x44, 0x93, 0xfd,
+	0xf3, 0x93, 0xc6, 0xab, 0xd3, 0xb8, 0x38, 0xca, 0xfa, 0xa7, 0xf4, 0xbc,
+	0x76, 0xf1, 0x9c, 0xe4, 0xe3, 0x85, 0x08, 0x1e, 0x60, 0x2d, 0xbc, 0x21,
+	0x6d, 0x42, 0x8b, 0xbd, 0x6f, 0xd5, 0xc4, 0x80, 0x6f, 0xe7, 0x75, 0x74,
+	0xa5, 0x2b, 0x91, 0x18, 0xb6, 0xac, 0x97, 0xc8, 0xe9, 0x7b, 0xf2, 0xad,
+	0x58, 0x3b, 0xf8, 0xb0, 0x55, 0xc5, 0x78, 0xb9, 0x73, 0xb1, 0x07, 0x77,
+	0x0d, 0x7b, 0xf0, 0x57, 0xcc, 0x81, 0xee, 0x58, 0x15, 0x3f, 0x07, 0x13,
+	0x67, 0x38, 0x5f, 0x29, 0x45, 0x8f, 0x2e, 0x50, 0x82, 0xc6, 0x69, 0x72,
+	0xca, 0xdb, 0xf2, 0x4e, 0x2c, 0x4f, 0xfb, 0x90, 0xc8, 0x5b, 0x70, 0xd2,
+	0xe6, 0xb7, 0xb2, 0xfd, 0xb2, 0xb4, 0x65, 0xc9, 0xd9, 0xb6, 0xc4, 0x98,
+	0x7e, 0x76, 0x23, 0xe3, 0x73, 0x5b, 0xde, 0xcd, 0x3e, 0xb3, 0xcc, 0x45,
+	0xf5, 0x58, 0xb3, 0xcf, 0xcf, 0x3e, 0x3d, 0x58, 0x9b, 0xb6, 0x96, 0xbc,
+	0x1a, 0x36, 0xbf, 0xed, 0x83, 0x8e, 0xbb, 0xc8, 0x37, 0x6e, 0x48, 0x07,
+	0x28, 0x5b, 0xc1, 0x4f, 0xc2, 0x21, 0xfc, 0xc7, 0xbc, 0x0f, 0xd7, 0xa7,
+	0x8f, 0x7e, 0xc9, 0x03, 0x73, 0x55, 0x15, 0x5a, 0x71, 0xa7, 0xbd, 0x87,
+	0x16, 0x88, 0x56, 0xb0, 0x36, 0xbe, 0x7d, 0xcc, 0x60, 0x9f, 0x2a, 0x96,
+	0x53, 0x4e, 0x7b, 0xfa, 0x52, 0xdc, 0x3a, 0x16, 0xc1, 0xa6, 0xfc, 0x22,
+	0x2c, 0x1b, 0x14, 0x3e, 0x4c, 0x2e, 0xb0, 0x1e, 0xb8, 0x6e, 0xd0, 0x4d,
+	0xdf, 0x81, 0xb2, 0x2c, 0x72, 0x02, 0xdb, 0xc8, 0xc7, 0xb7, 0xe5, 0xe5,
+	0x5a, 0x94, 0x98, 0x60, 0xe0, 0xb9, 0xec, 0x22, 0x2c, 0x1f, 0x64, 0x5d,
+	0x22, 0xb1, 0xde, 0xa9, 0x70, 0xac, 0x51, 0xe6, 0x5a, 0xf1, 0x1f, 0x03,
+	0x95, 0x03, 0xc1, 0x8e, 0x55, 0x8a, 0x81, 0x8a, 0x83, 0xc5, 0xeb, 0xfd,
+	0x99, 0xa7, 0x2c, 0x8f, 0xfe, 0x9a, 0xe5, 0x24, 0x26, 0xd7, 0x0d, 0x47,
+	0x91, 0x62, 0xfd, 0xeb, 0x8b, 0x99, 0xa8, 0xbb, 0x2a, 0x86, 0xc2, 0xc0,
+	0x36, 0xf2, 0xdd, 0x18, 0xf2, 0x07, 0xa3, 0xb8, 0x2f, 0x13, 0x43, 0xcb,
+	0x80, 0xce, 0xdc, 0x11, 0xc3, 0x02, 0x7e, 0x7f, 0x98, 0xd8, 0xbf, 0x39,
+	0x1d, 0xc3, 0x9b, 0x9c, 0xd3, 0xf2, 0x85, 0xf1, 0xba, 0x72, 0xe8, 0x8c,
+	0x21, 0xf1, 0xbf, 0x18, 0x5e, 0x1f, 0x89, 0x12, 0xe7, 0xeb, 0xb1, 0x61,
+	0x5f, 0x1b, 0x3e, 0x1e, 0x15, 0xdb, 0x6d, 0xc5, 0xe5, 0x83, 0x0e, 0x3c,
+	0x66, 0x34, 0xf5, 0x68, 0x70, 0xe0, 0xdd, 0x70, 0x40, 0x9b, 0xa0, 0x8f,
+	0xbd, 0x48, 0xde, 0x6b, 0xce, 0x8e, 0x60, 0x05, 0xf5, 0x5a, 0xa1, 0xcb,
+	0x78, 0x4c, 0x2c, 0x23, 0x97, 0xde, 0x46, 0x3e, 0xfe, 0x14, 0x73, 0x64,
+	0x74, 0x91, 0x0a, 0x5c, 0xe4, 0xa4, 0xcf, 0xc8, 0xf9, 0x98, 0x28, 0x31,
+	0x59, 0x30, 0x32, 0x02, 0xf9, 0xff, 0x05, 0x73, 0x46, 0x96, 0xe0, 0xcb,
+	0xd4, 0x3f, 0x4d, 0x7d, 0x3d, 0x6c, 0xb7, 0x67, 0xb1, 0x82, 0x57, 0xa8,
+	0xd7, 0x40, 0x66, 0x09, 0x6e, 0x18, 0x94, 0x35, 0x01, 0x15, 0x0b, 0xc7,
+	0xbe, 0x8e, 0x3b, 0xf7, 0x7e, 0x54, 0x2b, 0x78, 0xd9, 0x19, 0x36, 0x57,
+	0xa9, 0xac, 0xff, 0x2a, 0x54, 0x2c, 0x65, 0x0c, 0x33, 0x5e, 0x9c, 0x08,
+	0xe6, 0xa3, 0xbc, 0x2f, 0x4a, 0xec, 0xf5, 0xb1, 0x0e, 0xa0, 0x1e, 0xe9,
+	0x46, 0x8c, 0xb1, 0x3e, 0xc8, 0x92, 0xf7, 0x64, 0x59, 0xcf, 0x64, 0x59,
+	0x67, 0x67, 0x47, 0xfd, 0x7c, 0xcd, 0xe3, 0x4b, 0xb7, 0xaf, 0x6d, 0x4c,
+	0x2b, 0x88, 0x77, 0x2a, 0x7f, 0xe0, 0xd9, 0x7c, 0xfa, 0x72, 0x6e, 0x96,
+	0x56, 0xe4, 0x8f, 0xf2, 0xac, 0x9d, 0xf8, 0xbe, 0x89, 0xd1, 0x88, 0x3c,
+	0x97, 0xf9, 0xa7, 0x9e, 0xc9, 0x14, 0xff, 0xed, 0x41, 0xef, 0xd0, 0x3d,
+	0xd8, 0x3e, 0xb4, 0xd6, 0x3e, 0x9f, 0xe9, 0xd2, 0x03, 0x67, 0x4c, 0x34,
+	0xd5, 0xb1, 0x16, 0x3f, 0x62, 0xe2, 0x06, 0xec, 0xd1, 0xe4, 0x79, 0xc3,
+	0xac, 0xe0, 0xbe, 0xdb, 0x47, 0xce, 0xeb, 0xcb, 0xc8, 0x33, 0x77, 0x30,
+	0x1b, 0x62, 0x72, 0xce, 0x5b, 0x37, 0x3f, 0x50, 0x5a, 0x71, 0x22, 0x7f,
+	0x0f, 0xde, 0xdb, 0xb7, 0x0d, 0xef, 0x84, 0x6b, 0x4c, 0xd9, 0xb3, 0xfd,
+	0x49, 0x38, 0xd0, 0x99, 0x52, 0xe2, 0x1d, 0x55, 0x08, 0x1c, 0x5e, 0x20,
+	0xe7, 0xe2, 0xf6, 0xd9, 0xe7, 0xae, 0xe1, 0x4e, 0x99, 0x94, 0x6f, 0x2d,
+	0xd9, 0x6b, 0xc8, 0x99, 0x74, 0xf3, 0xea, 0xd9, 0x08, 0x1c, 0xbf, 0x1d,
+	0xfa, 0xd9, 0xa0, 0x03, 0x8a, 0x1a, 0x0b, 0xf6, 0x9f, 0x74, 0x6c, 0xa3,
+	0xfd, 0x3d, 0x66, 0x1d, 0x31, 0xf1, 0x67, 0xf9, 0x40, 0x7f, 0x9d, 0xa3,
+	0x1a, 0x9d, 0xb2, 0xee, 0xdf, 0x76, 0x15, 0x6b, 0xa3, 0xc0, 0x81, 0x29,
+	0xf5, 0x1e, 0xbc, 0xbe, 0xef, 0x1e, 0x9c, 0xe6, 0xeb, 0x8d, 0x7d, 0x8c,
+	0x5f, 0x9d, 0xf9, 0x87, 0xf5, 0xf1, 0xeb, 0x7c, 0xdf, 0x68, 0xe8, 0x67,
+	0x47, 0x6d, 0x4e, 0x7a, 0x0f, 0x3e, 0x1e, 0xbb, 0x07, 0x6f, 0xb2, 0x4f,
+	0x2f, 0xf1, 0x67, 0x28, 0x6d, 0x6d, 0xfb, 0x47, 0xe3, 0xbf, 0xe2, 0xe7,
+	0xf5, 0xc5, 0xda, 0xb8, 0x8b, 0xf1, 0xb2, 0x23, 0x13, 0x08, 0x65, 0x55,
+	0xcb, 0x9a, 0x35, 0xff, 0x65, 0xfb, 0xac, 0xff, 0x8d, 0xf9, 0x1e, 0xfc,
+	0x62, 0xff, 0x3d, 0xf8, 0xf9, 0x7e, 0x0d, 0x7b, 0xeb, 0x25, 0xdf, 0xb9,
+	0xcd, 0x0a, 0xfa, 0xb9, 0xbe, 0xd8, 0x6d, 0x9f, 0xa3, 0xea, 0x18, 0xf8,
+	0x05, 0x76, 0x93, 0x6b, 0x7a, 0xc3, 0x52, 0xdf, 0xb7, 0x18, 0x3b, 0xd4,
+	0x1f, 0x58, 0xf2, 0x7c, 0xe8, 0x9e, 0xe6, 0xef, 0x21, 0x4d, 0x5f, 0x4c,
+	0x36, 0x07, 0x36, 0xa7, 0xf1, 0x0f, 0x56, 0x6e, 0xb6, 0xd8, 0xe9, 0xcf,
+	0x7d, 0x3e, 0x53, 0xce, 0x97, 0x94, 0x9e, 0xd1, 0x0c, 0xf8, 0x27, 0xf1,
+	0xa0, 0xbd, 0x16, 0x61, 0xaa, 0x1a, 0x56, 0x91, 0x0b, 0xaf, 0xa6, 0x8f,
+	0xec, 0xb0, 0x31, 0x49, 0x9e, 0x85, 0xd5, 0x70, 0x3d, 0x63, 0xed, 0xbe,
+	0xec, 0xd7, 0x39, 0x7e, 0xc3, 0xf6, 0x9f, 0x81, 0x4c, 0xd1, 0xc7, 0xba,
+	0x0d, 0x73, 0x99, 0xf8, 0x98, 0x9b, 0x3e, 0x46, 0x1b, 0x86, 0x4e, 0xda,
+	0x3e, 0xe6, 0xb4, 0xf7, 0xb6, 0xee, 0x27, 0x4f, 0xdb, 0x90, 0x76, 0xa3,
+	0x4a, 0x6f, 0xc4, 0xcd, 0xb2, 0xbf, 0x35, 0xe1, 0x41, 0x7c, 0x82, 0xa0,
+	0x3b, 0x41, 0x1e, 0x3f, 0x28, 0x35, 0x01, 0x26, 0x65, 0xbf, 0xe5, 0x84,
+	0xe1, 0x45, 0xe7, 0x21, 0x37, 0xba, 0xf6, 0x35, 0xa0, 0x8b, 0xfc, 0x7e,
+	0xed, 0xa0, 0xc4, 0xa3, 0x85, 0x2b, 0xda, 0xfc, 0xf8, 0x32, 0xaf, 0xaf,
+	0xd9, 0x07, 0xa5, 0xee, 0xaa, 0x79, 0x58, 0xc3, 0x64, 0x1c, 0x9f, 0xa8,
+	0xa2, 0xaf, 0x5b, 0xac, 0x25, 0x55, 0xac, 0x3e, 0xa4, 0x60, 0xd5, 0x41,
+	0x03, 0x2b, 0xd9, 0x57, 0x2f, 0x63, 0xba, 0x8a, 0x39, 0xf7, 0x8e, 0x9c,
+	0x81, 0x4d, 0x59, 0x89, 0xf1, 0xd7, 0x2c, 0x87, 0xde, 0x86, 0xf2, 0x7d,
+	0x72, 0x26, 0x2b, 0xa8, 0xfd, 0x1d, 0xda, 0xa0, 0x8e, 0xb5, 0x61, 0xee,
+	0xe0, 0x12, 0x72, 0xf6, 0x38, 0x9a, 0xaf, 0x6a, 0x43, 0x19, 0x63, 0x3f,
+	0x49, 0x7b, 0x99, 0x13, 0x27, 0x70, 0x05, 0x65, 0x64, 0x26, 0x62, 0xac,
+	0xd5, 0xac, 0x6d, 0xb5, 0xb1, 0x6d, 0xac, 0xd3, 0x62, 0x48, 0x1d, 0x14,
+	0x1b, 0x58, 0xd6, 0x7b, 0x8b, 0x63, 0xb8, 0xbf, 0x5f, 0x27, 0x86, 0xc4,
+	0x68, 0x03, 0x89, 0x9d, 0x18, 0x0e, 0xf7, 0xcb, 0xff, 0x68, 0x88, 0x61,
+	0x3c, 0x1b, 0xc1, 0x52, 0xdb, 0x1e, 0x72, 0x4e, 0x36, 0xce, 0x5a, 0xab,
+	0x95, 0x63, 0x36, 0x38, 0xfe, 0x26, 0x63, 0x89, 0xa3, 0x1d, 0xcd, 0xac,
+	0xbf, 0x8c, 0xc1, 0x6d, 0xf0, 0xb5, 0x75, 0x20, 0x3a, 0x2c, 0x98, 0x64,
+	0x10, 0x13, 0x3b, 0xe0, 0x49, 0xe9, 0x5d, 0x79, 0x45, 0xef, 0xdc, 0xa7,
+	0x08, 0x36, 0x75, 0xb0, 0x36, 0xaf, 0x44, 0xfb, 0xe0, 0x6a, 0x38, 0x59,
+	0xcf, 0x5c, 0xb7, 0x4f, 0xfa, 0x58, 0x83, 0xf1, 0x51, 0x03, 0x9d, 0x69,
+	0xb1, 0xb7, 0x9c, 0xbf, 0x4c, 0xe0, 0xd6, 0x24, 0x6b, 0xee, 0xc1, 0xf8,
+	0xc7, 0x2a, 0xe4, 0xec, 0x11, 0xc8, 0x5c, 0x03, 0xc6, 0x49, 0x87, 0x8a,
+	0x2b, 0x17, 0x39, 0x30, 0x49, 0x6e, 0x5c, 0xa6, 0x9a, 0x8f, 0xb9, 0x10,
+	0x30, 0x1b, 0xd4, 0xad, 0xf8, 0x8f, 0xf4, 0xdb, 0xef, 0xd3, 0x46, 0x89,
+	0x7a, 0xb3, 0x5b, 0xae, 0xd5, 0xa8, 0x06, 0xe7, 0x55, 0xfa, 0x87, 0xe9,
+	0xd2, 0x1d, 0xe4, 0xfd, 0x4d, 0x1d, 0x95, 0xc4, 0x25, 0x79, 0x3e, 0xc3,
+	0xa9, 0x46, 0xe0, 0x98, 0xb8, 0x07, 0xa7, 0xe8, 0xd7, 0x67, 0xf8, 0xfa,
+	0x60, 0x9f, 0xb5, 0x4d, 0x6d, 0x53, 0x70, 0x1d, 0xfd, 0xda, 0x32, 0xf4,
+	0xe3, 0x41, 0x35, 0xc8, 0xb1, 0xd0, 0xa7, 0xe9, 0xd7, 0x67, 0xe9, 0xd7,
+	0xf5, 0xf4, 0xeb, 0x75, 0xf4, 0xeb, 0xda, 0x45, 0x3e, 0x7c, 0x68, 0xaf,
+	0x0b, 0x88, 0x4f, 0xbf, 0x6c, 0xfb, 0x4f, 0x56, 0x95, 0xcf, 0xbf, 0x9a,
+	0xf6, 0x25, 0xe2, 0x42, 0xf1, 0x7f, 0x6f, 0xd4, 0x15, 0xcf, 0x93, 0x89,
+	0x6c, 0xdd, 0xd4, 0x19, 0x47, 0x67, 0x28, 0xeb, 0xfd, 0xc1, 0x7b, 0xf0,
+	0x36, 0xe7, 0xf2, 0xbd, 0xf0, 0xd1, 0x3b, 0x6a, 0x30, 0x3f, 0x51, 0x8d,
+	0xc9, 0xb5, 0x1e, 0xe6, 0xf9, 0x3b, 0xc2, 0x41, 0xff, 0x02, 0x65, 0x0e,
+	0xdb, 0x50, 0xa7, 0x61, 0x89, 0x25, 0x7d, 0xf2, 0x18, 0xdb, 0x9e, 0x9d,
+	0x6e, 0xf3, 0x1b, 0xb6, 0xf9, 0x30, 0x7c, 0xf4, 0xae, 0x7a, 0xcc, 0xdf,
+	0x5c, 0x83, 0xc9, 0xc7, 0xab, 0xd9, 0x66, 0x4b, 0x5b, 0x30, 0xb4, 0x4f,
+	0x61, 0x5c, 0x0e, 0x9f, 0x60, 0x3b, 0xd1, 0x41, 0xb8, 0x4d, 0x89, 0xff,
+	0xf9, 0xb0, 0x29, 0xd7, 0x38, 0xcd, 0x93, 0x88, 0x67, 0xc9, 0xac, 0x8d,
+	0x53, 0x65, 0xc4, 0x93, 0xa7, 0x58, 0x4b, 0xfd, 0xb8, 0xb0, 0x9e, 0x18,
+	0xd5, 0x49, 0x8c, 0x5a, 0x4d, 0x8c, 0xea, 0x20, 0x46, 0xb5, 0x13, 0xa3,
+	0xe2, 0xc4, 0xa8, 0x18, 0x31, 0x2a, 0x2a, 0xff, 0x9b, 0x43, 0x39, 0x1e,
+	0xf9, 0x05, 0x5c, 0x03, 0x6e, 0x3c, 0xd7, 0x5f, 0x7c, 0x8e, 0xf3, 0x10,
+	0xf3, 0xf9, 0x49, 0x63, 0x81, 0x6f, 0x39, 0xf3, 0xe0, 0x28, 0xf1, 0x2c,
+	0x3b, 0xde, 0xcc, 0xd7, 0x57, 0xec, 0xe7, 0xfe, 0xb2, 0xe4, 0x52, 0x2f,
+	0x30, 0x5e, 0x57, 0x86, 0x9b, 0x8c, 0x47, 0xe4, 0xcc, 0xba, 0xde, 0x62,
+	0xce, 0xe2, 0x7d, 0x4f, 0x66, 0x5a, 0xfa, 0xbd, 0xd0, 0xfb, 0xea, 0xd5,
+	0x3e, 0xf8, 0xd7, 0x79, 0x19, 0x8f, 0xe2, 0x33, 0xeb, 0xf0, 0xed, 0xa1,
+	0x4e, 0x7c, 0x77, 0x48, 0x63, 0xac, 0x36, 0x4d, 0x5e, 0xeb, 0xc0, 0x0f,
+	0x7d, 0x70, 0x78, 0x2f, 0x02, 0x7e, 0xdf, 0x80, 0x05, 0x87, 0x8f, 0xaa,
+	0xe4, 0x25, 0x0d, 0x8e, 0xd6, 0xb9, 0xc5, 0x39, 0x8f, 0xcd, 0x62, 0xd5,
+	0x53, 0x8e, 0x05, 0xf6, 0x73, 0xaa, 0xf1, 0xf5, 0xc2, 0x93, 0x2a, 0xb0,
+	0x33, 0x64, 0x73, 0x97, 0xac, 0x9c, 0x11, 0xf7, 0xea, 0x92, 0x1b, 0x3a,
+	0xb0, 0x2b, 0x65, 0x6e, 0xf0, 0x62, 0x35, 0xfa, 0x52, 0x45, 0x3b, 0xdc,
+	0x11, 0x26, 0x44, 0xc7, 0xc4, 0xae, 0x70, 0xde, 0x15, 0x89, 0xe2, 0xb6,
+	0xdc, 0x28, 0x39, 0x74, 0x0c, 0x9b, 0x25, 0x5e, 0xfe, 0xf4, 0xff, 0x3a,
+	0xc0, 0x37, 0x93, 0x7e, 0xc6, 0xc4, 0x39, 0x2b, 0x5b, 0xb7, 0xa0, 0x87,
+	0x63, 0xd0, 0xce, 0x28, 0x57, 0xcb, 0xfe, 0xd3, 0x61, 0xc1, 0xaa, 0x06,
+	0x62, 0xd4, 0x7f, 0x1f, 0x84, 0x59, 0x4f, 0xcc, 0x6a, 0x4f, 0x6f, 0xc3,
+	0x6f, 0xdb, 0x8a, 0x58, 0x32, 0x49, 0x2c, 0xb9, 0x3a, 0x2d, 0xd7, 0x02,
+	0x2c, 0x02, 0xad, 0x25, 0x57, 0x2d, 0x7a, 0xdc, 0xbe, 0x3e, 0xc5, 0x14,
+	0x17, 0x65, 0x1c, 0xaa, 0x8b, 0xdc, 0xe8, 0x94, 0xf3, 0x42, 0xeb, 0xe4,
+	0x39, 0x3e, 0x93, 0xd5, 0x8b, 0xac, 0x73, 0x9c, 0xea, 0xba, 0x45, 0x0f,
+	0x9c, 0x5d, 0xc6, 0x3e, 0x3f, 0x61, 0x6e, 0x99, 0x9c, 0xe6, 0xdb, 0xaf,
+	0x90, 0x4b, 0x25, 0x1f, 0x90, 0xdc, 0xdc, 0xb4, 0x39, 0x8f, 0x40, 0x57,
+	0x4a, 0xb9, 0xa8, 0x5e, 0x9e, 0x1b, 0xf8, 0x4f, 0x41, 0x69, 0x0b, 0xf3,
+	0x52, 0xf6, 0xfd, 0xcc, 0xb4, 0x0f, 0x52, 0x3e, 0x3f, 0xff, 0x6a, 0x5a,
+	0x87, 0x5a, 0xf8, 0xeb, 0xc5, 0xfe, 0xa3, 0xd8, 0xc3, 0x9a, 0x6f, 0xb4,
+	0x19, 0x39, 0x27, 0x9a, 0x0e, 0x7c, 0x4b, 0x75, 0xe4, 0x66, 0x23, 0x8e,
+	0x9e, 0xe0, 0x82, 0xc7, 0x9e, 0x54, 0xe5, 0x77, 0x05, 0x17, 0xe9, 0x94,
+	0xe5, 0xd0, 0xb5, 0x13, 0xea, 0x28, 0x0e, 0x14, 0x9e, 0xb7, 0xe2, 0x5e,
+	0x2f, 0xfd, 0x42, 0xd6, 0xc6, 0x3b, 0x71, 0x92, 0xf3, 0x93, 0x97, 0xd8,
+	0x89, 0x05, 0xfa, 0x86, 0x55, 0x3f, 0xca, 0x78, 0xed, 0x03, 0xc6, 0xe7,
+	0x58, 0xae, 0x13, 0x1f, 0x0d, 0xad, 0xc3, 0xfb, 0x43, 0x4d, 0xbe, 0x5f,
+	0x28, 0x96, 0xb5, 0xc5, 0xb8, 0x14, 0x1f, 0xd5, 0x69, 0xc8, 0xd1, 0x97,
+	0xde, 0x4f, 0x9a, 0xff, 0x61, 0x36, 0x3a, 0xf0, 0x2f, 0xc9, 0x40, 0xe8,
+	0x1d, 0x25, 0xe0, 0x07, 0x5a, 0xba, 0x72, 0x08, 0x4c, 0x8e, 0xaa, 0x81,
+	0xc7, 0xaa, 0x1c, 0xab, 0xf1, 0x46, 0xae, 0x03, 0xbf, 0xcd, 0xcd, 0xf4,
+	0x8b, 0xad, 0x96, 0xbf, 0x41, 0x7c, 0x42, 0x7c, 0x83, 0xbe, 0xc9, 0x7a,
+	0xec, 0xc7, 0xd4, 0x79, 0xe3, 0x17, 0xe9, 0x9f, 0x19, 0xfa, 0x67, 0x86,
+	0xfe, 0x99, 0xa1, 0x7f, 0x66, 0xe8, 0x9f, 0x19, 0xfa, 0x27, 0x71, 0xe8,
+	0xf1, 0x4c, 0x74, 0xba, 0x16, 0x4d, 0x10, 0xc7, 0xd7, 0xe3, 0x93, 0xa1,
+	0x76, 0x7c, 0x48, 0x4e, 0xf9, 0xfc, 0xa2, 0xc9, 0xe3, 0x15, 0x08, 0x9c,
+	0xdd, 0x40, 0xc2, 0xf4, 0x54, 0xae, 0x1d, 0xa7, 0x93, 0x31, 0x4c, 0x24,
+	0x9b, 0x3a, 0xab, 0x95, 0xbf, 0x40, 0x7c, 0x8e, 0xd8, 0x34, 0x8e, 0xff,
+	0xcd, 0x9a, 0xe9, 0x64, 0x73, 0x94, 0xf9, 0xbb, 0x13, 0x72, 0x36, 0x76,
+	0x3c, 0x22, 0xbe, 0x52, 0x7c, 0xbe, 0xf6, 0x4f, 0xfd, 0xf5, 0xd0, 0x1f,
+	0x1a, 0x16, 0x9d, 0xb3, 0x26, 0xeb, 0x65, 0x8f, 0x74, 0x3d, 0xe6, 0x31,
+	0x1f, 0xce, 0xb6, 0xf7, 0x5a, 0x15, 0xac, 0x31, 0x26, 0x7d, 0x35, 0x08,
+	0xf4, 0xfc, 0x35, 0x8b, 0xfe, 0x77, 0x52, 0xb2, 0xb7, 0xd1, 0x8e, 0x5f,
+	0x27, 0xe5, 0x59, 0xd0, 0x0e, 0xbc, 0x98, 0x73, 0x3a, 0x3f, 0x4a, 0xc9,
+	0x33, 0x47, 0xab, 0xf1, 0xf3, 0x5c, 0x42, 0x7d, 0x5b, 0x33, 0x30, 0x9a,
+	0x5f, 0x87, 0xab, 0xf7, 0xc9, 0x9a, 0x56, 0x1c, 0x87, 0x92, 0x81, 0xfe,
+	0x1f, 0x60, 0x1d, 0xda, 0xc6, 0xd6, 0x63, 0xc9, 0x3e, 0x05, 0xef, 0x72,
+	0x4c, 0x0b, 0xf9, 0xb9, 0x79, 0x9f, 0x65, 0x3d, 0x63, 0x5c, 0x61, 0xed,
+	0x5e, 0x2f, 0xf6, 0x92, 0x98, 0xfe, 0xa8, 0x0e, 0x35, 0xeb, 0xe1, 0x1f,
+	0x13, 0xf9, 0x3a, 0xe5, 0xaf, 0xc3, 0xb5, 0xfb, 0x9a, 0x8e, 0x5c, 0x87,
+	0xa6, 0x8e, 0xff, 0xee, 0x58, 0x87, 0xcb, 0xc6, 0xe6, 0xd4, 0xcb, 0xd9,
+	0xd6, 0x27, 0x69, 0xa7, 0x93, 0xc9, 0x1f, 0xd7, 0x17, 0xf1, 0x47, 0x81,
+	0x3e, 0x28, 0x75, 0xf0, 0x36, 0xec, 0x34, 0x1a, 0x31, 0xee, 0x6d, 0xc6,
+	0xc4, 0x7e, 0x2f, 0x5a, 0xd2, 0x98, 0xf4, 0x90, 0x17, 0xdc, 0x19, 0xd6,
+	0x3b, 0x72, 0x8a, 0xac, 0xb1, 0x25, 0xf0, 0x6c, 0x32, 0x18, 0x5f, 0xa0,
+	0x58, 0x4b, 0x9c, 0xe1, 0x96, 0xbe, 0x5d, 0xac, 0x1d, 0xfc, 0xf5, 0xcd,
+	0x38, 0x3c, 0x2e, 0x3a, 0x76, 0x51, 0xc7, 0x2c, 0xf1, 0xde, 0xbc, 0xda,
+	0x09, 0x59, 0x97, 0x0a, 0xf8, 0x1e, 0xa7, 0x9d, 0xc9, 0x23, 0xce, 0x08,
+	0x7f, 0x38, 0xbb, 0x48, 0xe2, 0xa0, 0xc6, 0x9c, 0x13, 0x6b, 0xc5, 0xbf,
+	0xcf, 0x07, 0xba, 0xe7, 0x90, 0x43, 0x9c, 0x18, 0x20, 0x87, 0xb8, 0xb2,
+	0x9a, 0x5c, 0x2d, 0xa4, 0xc9, 0x59, 0xf7, 0x7a, 0x5d, 0xfe, 0x17, 0xcb,
+	0x1f, 0xf3, 0xd9, 0xaf, 0xd0, 0x0f, 0xc4, 0x5f, 0x77, 0x51, 0xef, 0xa2,
+	0xef, 0xee, 0xa2, 0x1f, 0x1c, 0xef, 0xa7, 0x0d, 0xc3, 0x03, 0x8a, 0x59,
+	0x7c, 0x9e, 0x90, 0xf5, 0x03, 0x39, 0x20, 0xb9, 0xe3, 0x9d, 0x03, 0x11,
+	0xfc, 0x2d, 0xf3, 0x7d, 0xb6, 0xa0, 0x10, 0x73, 0xe8, 0xef, 0x75, 0x21,
+	0xbb, 0x2e, 0x78, 0x29, 0x99, 0x40, 0xda, 0x5e, 0x2b, 0x16, 0xce, 0x19,
+	0x88, 0x66, 0x95, 0x04, 0x76, 0x27, 0x8b, 0x5c, 0xd7, 0x71, 0x55, 0x37,
+	0xba, 0x93, 0x2d, 0x3d, 0x67, 0x60, 0xff, 0x3f, 0x0b, 0xff, 0x14, 0xba,
+	0xb1, 0x29, 0xd9, 0x4a, 0x2c, 0x2b, 0x72, 0xd2, 0xe5, 0x11, 0x2f, 0x7e,
+	0x96, 0xec, 0xc6, 0x53, 0xc9, 0x96, 0xe3, 0x37, 0xcb, 0xff, 0xc0, 0xb8,
+	0x48, 0x9e, 0xa7, 0xe9, 0xc6, 0x28, 0xef, 0x19, 0xcf, 0x34, 0xf9, 0x76,
+	0x33, 0x77, 0x24, 0x38, 0x77, 0x23, 0x05, 0x59, 0xdb, 0x08, 0xe1, 0x10,
+	0x39, 0xde, 0x68, 0xa6, 0xa5, 0x6f, 0x93, 0xfa, 0x5f, 0xe4, 0xd9, 0x14,
+	0x9f, 0xfc, 0x6b, 0xb3, 0x13, 0x49, 0x0f, 0x5e, 0xce, 0x98, 0xa8, 0x65,
+	0x3d, 0x72, 0x82, 0x35, 0xca, 0x4b, 0xc9, 0x87, 0x2d, 0x4f, 0x2c, 0xd8,
+	0xf5, 0x8a, 0xe2, 0xc4, 0x4b, 0x85, 0x25, 0xc4, 0x48, 0xcb, 0xda, 0xb5,
+	0x58, 0xf7, 0xdf, 0xa6, 0xf8, 0x51, 0xc1, 0xba, 0x45, 0x6a, 0x91, 0x17,
+	0x46, 0x82, 0xd1, 0xfb, 0x88, 0x99, 0x75, 0x8b, 0x75, 0xdf, 0x07, 0x8c,
+	0x7b, 0x57, 0x6c, 0x94, 0xbc, 0x3a, 0x78, 0xfc, 0x56, 0xd6, 0x24, 0xff,
+	0x83, 0x63, 0x3a, 0x99, 0xf4, 0x61, 0x92, 0xbc, 0x72, 0x8c, 0x3c, 0xe6,
+	0x28, 0x71, 0xf7, 0x2c, 0xf5, 0x79, 0x2c, 0xf3, 0x3b, 0x6b, 0x6e, 0xac,
+	0x11, 0xaf, 0x12, 0x77, 0xdf, 0x67, 0xdd, 0xfe, 0xe1, 0x55, 0xfa, 0xe6,
+	0x36, 0xd6, 0xb2, 0xaf, 0x14, 0x3c, 0x78, 0x27, 0x19, 0xe8, 0x2e, 0x53,
+	0x3d, 0xec, 0x2f, 0x8a, 0xc9, 0xf1, 0x2f, 0xf2, 0xd5, 0x8a, 0x97, 0xc9,
+	0x43, 0x5f, 0xa4, 0xbe, 0x93, 0x94, 0xf7, 0x16, 0xdb, 0x7f, 0x2f, 0xd3,
+	0xc4, 0x1c, 0xdc, 0x14, 0x6f, 0x56, 0x98, 0xcc, 0x18, 0xbb, 0xc7, 0x0b,
+	0xd7, 0xe0, 0xed, 0x7e, 0x27, 0x9e, 0x27, 0x7f, 0x39, 0x9e, 0xc1, 0x5a,
+	0xf2, 0xc8, 0xd0, 0x02, 0x45, 0xf6, 0xd1, 0x5a, 0xfa, 0x1e, 0x45, 0xc0,
+	0xa7, 0x2a, 0x81, 0xb3, 0x77, 0xc9, 0xb3, 0x06, 0xac, 0xbf, 0x5f, 0xe3,
+	0xbd, 0x1f, 0xf6, 0x57, 0xe2, 0x67, 0x23, 0xa3, 0x78, 0x30, 0x53, 0x86,
+	0xe8, 0x7e, 0x37, 0x5e, 0x1d, 0x8f, 0xda, 0xeb, 0x2c, 0x6e, 0xdd, 0xfe,
+	0x3f, 0x12, 0x08, 0x0d, 0x9b, 0xb8, 0x35, 0xc2, 0x78, 0x1e, 0xa2, 0x7d,
+	0xe9, 0xbb, 0x67, 0x16, 0x09, 0x77, 0x8a, 0xb2, 0x8e, 0x33, 0x7f, 0xc2,
+	0x8a, 0x45, 0xd6, 0xf9, 0x7a, 0xe6, 0x90, 0x3f, 0xf9, 0x62, 0xc1, 0xee,
+	0xb3, 0xb4, 0xcd, 0x9a, 0xbc, 0xf0, 0x8e, 0x28, 0xe3, 0xd5, 0x87, 0x14,
+	0x39, 0x7a, 0x2e, 0xd9, 0x88, 0x24, 0x39, 0xba, 0x49, 0xac, 0x30, 0xc9,
+	0xc7, 0x4d, 0x72, 0x74, 0x93, 0x1c, 0xdd, 0x24, 0x47, 0x37, 0xc9, 0xd1,
+	0xcd, 0xdc, 0x12, 0xd6, 0x9a, 0x32, 0x2f, 0x2a, 0x76, 0x8d, 0x0e, 0x2a,
+	0x53, 0x9d, 0xe2, 0xe3, 0x06, 0x86, 0xf9, 0x3d, 0xde, 0x79, 0x0d, 0x86,
+	0xfb, 0xaf, 0xe5, 0x4b, 0xc1, 0xf5, 0xf4, 0xbb, 0xfb, 0xb3, 0x22, 0xbb,
+	0x15, 0x8f, 0x10, 0x33, 0xee, 0xcb, 0xb9, 0xe9, 0xab, 0x64, 0xd9, 0x57,
+	0x6e, 0x45, 0x6e, 0x80, 0x6d, 0xc9, 0x17, 0x26, 0xbd, 0x11, 0xbb, 0x6d,
+	0xb9, 0x2e, 0x7a, 0xb9, 0xe9, 0xc7, 0x26, 0x96, 0x5c, 0x05, 0x3c, 0xd6,
+	0x4f, 0xee, 0xf1, 0x80, 0x13, 0x35, 0xfc, 0xad, 0x3f, 0x3b, 0x8a, 0x0c,
+	0x65, 0xc8, 0xff, 0x73, 0x4b, 0xd1, 0x2f, 0x3f, 0x1c, 0x70, 0xc0, 0xb9,
+	0xa8, 0x29, 0xf1, 0x8c, 0x12, 0xc6, 0x13, 0x07, 0xa5, 0x3e, 0x11, 0x7f,
+	0xc5, 0xa4, 0x4a, 0xfe, 0xf5, 0xc2, 0xde, 0x7a, 0x3c, 0x3f, 0x24, 0x36,
+	0xd6, 0xe3, 0x4b, 0x19, 0x4f, 0x4d, 0xe1, 0x60, 0x9f, 0x43, 0x69, 0xc3,
+	0x4f, 0x0f, 0xb5, 0x31, 0x2e, 0x1c, 0xd8, 0x19, 0x0e, 0x9c, 0x7d, 0x1b,
+	0x4b, 0xc8, 0x8f, 0xe2, 0xa8, 0x25, 0x27, 0x7b, 0xe5, 0xa0, 0xd8, 0x28,
+	0x10, 0x7d, 0xc3, 0xe1, 0x44, 0x88, 0xb5, 0x90, 0xa9, 0x09, 0x17, 0x0a,
+	0x44, 0x4f, 0x43, 0xb8, 0x70, 0x04, 0xe3, 0x39, 0x28, 0x2b, 0x17, 0x9f,
+	0x40, 0x28, 0xd5, 0x8a, 0x11, 0x72, 0xbe, 0x39, 0x7a, 0xd4, 0x3e, 0x47,
+	0xf6, 0x38, 0xc7, 0xb7, 0xa9, 0xf5, 0x35, 0xab, 0x96, 0xb1, 0x3d, 0xbf,
+	0x4d, 0x78, 0x99, 0xd4, 0x4e, 0x71, 0x46, 0x5e, 0x0c, 0x73, 0x1f, 0xd0,
+	0xcd, 0x8f, 0x39, 0x11, 0xda, 0x88, 0xf0, 0x3d, 0xe1, 0x78, 0xfa, 0xe6,
+	0x57, 0x58, 0xe7, 0x3e, 0x41, 0xfe, 0xb6, 0xeb, 0xe0, 0x28, 0xeb, 0x3c,
+	0xe1, 0x45, 0x7e, 0xb4, 0xa4, 0xe2, 0xa8, 0x9a, 0xd0, 0x31, 0x2f, 0xd5,
+	0x0e, 0x75, 0x22, 0x84, 0x05, 0xa9, 0x0e, 0x54, 0x4e, 0xb4, 0xa2, 0x29,
+	0x25, 0x3c, 0x66, 0x35, 0x39, 0x52, 0x88, 0x78, 0x2b, 0x67, 0x13, 0xea,
+	0x30, 0xbf, 0x3e, 0xc4, 0xfe, 0x5b, 0x42, 0x0e, 0x34, 0x99, 0x2e, 0xe8,
+	0x07, 0xba, 0xd5, 0x80, 0x99, 0x40, 0xa0, 0x3f, 0x81, 0xbf, 0x92, 0x98,
+	0xed, 0xd3, 0x50, 0x8f, 0xcb, 0xf6, 0xd9, 0x5c, 0x5f, 0x72, 0x9f, 0x15,
+	0x0c, 0xfb, 0xf0, 0xc8, 0xf8, 0xd1, 0x5a, 0x89, 0xff, 0x3a, 0xfd, 0x0b,
+	0xb3, 0xe4, 0xff, 0x4d, 0x30, 0xfe, 0xcd, 0xaa, 0x98, 0xdb, 0xce, 0x9b,
+	0x9b, 0x52, 0x6e, 0xac, 0x1c, 0x8c, 0x58, 0x83, 0x19, 0xc9, 0x9d, 0xdb,
+	0x10, 0x0c, 0x47, 0xe9, 0x4f, 0x21, 0xce, 0x29, 0xf1, 0x91, 0x7e, 0x38,
+	0x7f, 0xe4, 0xeb, 0xb8, 0x79, 0xdf, 0xa7, 0xbe, 0x43, 0xfc, 0xf9, 0x06,
+	0x79, 0xb7, 0x59, 0x6d, 0xd7, 0x76, 0xa3, 0x9c, 0x87, 0x60, 0xa7, 0x5b,
+	0x75, 0x62, 0x01, 0x7d, 0xe7, 0x50, 0x4a, 0xb8, 0x77, 0xa0, 0x87, 0x80,
+	0x57, 0x57, 0xcb, 0x9a, 0x63, 0xf9, 0x44, 0x04, 0x47, 0x52, 0xf2, 0x7f,
+	0x4d, 0x2c, 0xab, 0x2f, 0xd2, 0x88, 0xae, 0x89, 0x6b, 0x31, 0x36, 0xd0,
+	0x88, 0xd5, 0x29, 0x1f, 0x56, 0xa6, 0x30, 0xa7, 0x0c, 0xea, 0xdf, 0x94,
+	0xb1, 0x16, 0xea, 0x55, 0x82, 0x5d, 0x6b, 0xe8, 0xe3, 0x4d, 0x8e, 0x40,
+	0xb4, 0x85, 0x3e, 0xfe, 0x01, 0x1a, 0xc9, 0xd9, 0x7d, 0xe4, 0xee, 0x25,
+	0xde, 0x7e, 0x2d, 0x1e, 0x1b, 0x10, 0x7d, 0x5c, 0xac, 0x0b, 0x84, 0xb3,
+	0x3b, 0x71, 0x68, 0x2f, 0x26, 0xe7, 0xe8, 0x7a, 0xbc, 0x0f, 0x0d, 0x58,
+	0x7e, 0xe8, 0x5a, 0x1c, 0x19, 0xf0, 0x93, 0xc3, 0x3b, 0x51, 0xd8, 0x3b,
+	0x8f, 0xdc, 0x5d, 0xf8, 0xfa, 0x12, 0xe4, 0xe9, 0x5b, 0x6b, 0x0e, 0x49,
+	0x9f, 0xd7, 0xd0, 0xcf, 0x9a, 0xb4, 0x5d, 0x0a, 0x79, 0xbb, 0x2e, 0xdc,
+	0x5d, 0xc6, 0x41, 0x0c, 0xc9, 0x14, 0xeb, 0xfa, 0x55, 0x11, 0x37, 0x9a,
+	0xf2, 0x06, 0x2e, 0xb3, 0x79, 0xb9, 0xc4, 0x7d, 0x1b, 0x1e, 0xa6, 0xff,
+	0x9c, 0x19, 0x7a, 0xca, 0x2a, 0xd7, 0xf5, 0xc9, 0x25, 0x0e, 0x6b, 0x89,
+	0xab, 0x2d, 0xd8, 0xe3, 0x72, 0xb4, 0x21, 0x43, 0xff, 0x49, 0x0f, 0xbc,
+	0x66, 0xf9, 0xf4, 0x25, 0xe4, 0x25, 0x71, 0x8c, 0x2d, 0x6e, 0xe3, 0x5c,
+	0x8a, 0x3c, 0xcb, 0xaa, 0xd6, 0x4d, 0xd6, 0xf7, 0x11, 0xf8, 0xf3, 0x27,
+	0x70, 0x27, 0x6d, 0xb1, 0x20, 0x1f, 0x43, 0x13, 0x39, 0xf8, 0x1d, 0x46,
+	0xcc, 0x96, 0xdd, 0x6f, 0x73, 0xc3, 0x18, 0xe6, 0x0c, 0xea, 0x67, 0xe7,
+	0xd3, 0x2f, 0xe6, 0x0e, 0x8b, 0xcf, 0xc6, 0x70, 0x6c, 0x40, 0xef, 0x39,
+	0x42, 0x7f, 0x91, 0x9a, 0xfa, 0x7e, 0xea, 0x54, 0xc3, 0x7c, 0x74, 0x03,
+	0xe7, 0x7f, 0x8c, 0xf9, 0x76, 0xc5, 0x44, 0x07, 0x96, 0x0e, 0x04, 0xbb,
+	0x56, 0x33, 0x9f, 0x8b, 0xde, 0xfd, 0x19, 0x89, 0xf7, 0x0e, 0x39, 0x87,
+	0xdb, 0xd7, 0xa4, 0x04, 0xa3, 0x21, 0xb5, 0x03, 0xe5, 0xf9, 0x6b, 0xb1,
+	0xe4, 0x81, 0xd5, 0x94, 0x47, 0xfe, 0x40, 0x9f, 0xca, 0x64, 0x9c, 0x70,
+	0xed, 0x5f, 0x83, 0x37, 0x0e, 0x15, 0xf9, 0xfb, 0xb1, 0xd4, 0x56, 0xd6,
+	0x3d, 0x06, 0x72, 0x99, 0xf8, 0x1d, 0xe4, 0x3a, 0x03, 0x45, 0x1e, 0xaf,
+	0xe2, 0x27, 0x46, 0x40, 0x7b, 0x42, 0x79, 0x14, 0x89, 0xd9, 0x01, 0x63,
+	0xbb, 0x22, 0xfd, 0x9a, 0x38, 0xba, 0x78, 0x2b, 0x56, 0x13, 0x83, 0x7a,
+	0xc3, 0x45, 0x9c, 0xfd, 0x41, 0xc6, 0xec, 0x21, 0x8f, 0x37, 0x5e, 0x21,
+	0xee, 0xcc, 0xd5, 0x65, 0x9c, 0x0e, 0x2c, 0x5c, 0xd4, 0x64, 0xbe, 0xeb,
+	0x70, 0xc0, 0xdd, 0x16, 0xe8, 0x3c, 0x8e, 0x08, 0xc7, 0x29, 0xe7, 0xff,
+	0xa2, 0x38, 0x36, 0x2e, 0x79, 0x18, 0x8a, 0x93, 0x31, 0xfe, 0xab, 0xfe,
+	0x5f, 0xd9, 0xfe, 0x74, 0x6c, 0x51, 0x89, 0x8b, 0x57, 0x7b, 0xa5, 0x56,
+	0x1f, 0x61, 0xdd, 0x23, 0x3a, 0x3e, 0x9f, 0x74, 0x50, 0x9e, 0x1b, 0x18,
+	0x97, 0xbd, 0xf2, 0x08, 0x8e, 0x25, 0x99, 0x28, 0x6d, 0x2c, 0xa3, 0xee,
+	0x05, 0x32, 0xca, 0xd8, 0x12, 0x2c, 0x7c, 0xc0, 0x83, 0xb9, 0x23, 0x1e,
+	0x54, 0x66, 0x1e, 0xb6, 0xe4, 0x59, 0x9c, 0xea, 0x91, 0xe0, 0x99, 0x0e,
+	0x72, 0x9d, 0xb5, 0x91, 0xf7, 0xad, 0xfa, 0x98, 0xdc, 0xab, 0x77, 0xff,
+	0xd4, 0x61, 0x59, 0x2b, 0xae, 0xd4, 0x7d, 0xcf, 0x2a, 0x1e, 0x38, 0x88,
+	0xab, 0xad, 0x19, 0xfa, 0xff, 0xfe, 0xac, 0x7d, 0xee, 0xc7, 0xc3, 0xef,
+	0x57, 0xb0, 0xf6, 0x04, 0x71, 0x17, 0xfc, 0x5c, 0x5b, 0xd0, 0xf9, 0xee,
+	0xc3, 0xfc, 0x8c, 0xb5, 0xe4, 0x8a, 0xb0, 0xb9, 0xa1, 0x16, 0x21, 0x94,
+	0x13, 0xbb, 0x83, 0x99, 0xc0, 0xd9, 0x4d, 0xf4, 0x8d, 0x85, 0x61, 0x83,
+	0x7d, 0x7b, 0x10, 0xce, 0x08, 0x46, 0x1e, 0x5d, 0x3b, 0x17, 0xe6, 0xb2,
+	0x6a, 0x04, 0xb4, 0x0e, 0xe6, 0xb1, 0x4b, 0x75, 0x19, 0x5b, 0x23, 0x54,
+	0x92, 0x15, 0x10, 0xcb, 0xeb, 0x88, 0xc1, 0xff, 0x9e, 0xf8, 0xfa, 0x33,
+	0xe2, 0xeb, 0x9a, 0x7d, 0x12, 0x33, 0x58, 0x2a, 0x7c, 0xf7, 0xc5, 0x70,
+	0x30, 0xda, 0x4b, 0x2c, 0x9d, 0x5f, 0x28, 0xf2, 0x3e, 0x97, 0x2e, 0x78,
+	0x14, 0xc5, 0xa6, 0x94, 0xe0, 0x9b, 0x0f, 0x3a, 0xc7, 0x7a, 0x47, 0xaa,
+	0x11, 0x97, 0xb1, 0x1f, 0x7f, 0x41, 0xe3, 0xcb, 0x0b, 0xff, 0x78, 0x03,
+	0x5f, 0x7e, 0xbe, 0xe6, 0xf1, 0xa5, 0xf3, 0x9a, 0x0a, 0x63, 0x5c, 0x41,
+	0x70, 0x44, 0xf0, 0x61, 0x14, 0x0f, 0xd3, 0x9e, 0xda, 0x04, 0xf0, 0xee,
+	0x03, 0x06, 0xaa, 0x89, 0x1b, 0xf7, 0x67, 0x04, 0x63, 0x14, 0xac, 0x1d,
+	0x08, 0xa3, 0x8e, 0xf7, 0xec, 0xa1, 0xbf, 0x7e, 0x77, 0xaf, 0xde, 0x7d,
+	0xd4, 0x11, 0x4c, 0xbc, 0x42, 0x8c, 0xdb, 0x42, 0x1f, 0xbd, 0x65, 0x60,
+	0x09, 0x36, 0x19, 0x6d, 0xd8, 0x74, 0x70, 0x2b, 0xe3, 0x9b, 0x11, 0x1b,
+	0x16, 0xae, 0x2e, 0x18, 0x2c, 0x18, 0x2b, 0xf8, 0x1a, 0xc1, 0x6e, 0x62,
+	0x5a, 0xdb, 0x55, 0x27, 0x58, 0x33, 0x3e, 0x25, 0xeb, 0xa7, 0xfd, 0x50,
+	0xa3, 0x78, 0x98, 0x98, 0x96, 0x62, 0x0d, 0x71, 0x98, 0x75, 0x68, 0x1f,
+	0xb1, 0xec, 0x6f, 0xe9, 0x9f, 0x47, 0x1f, 0xd0, 0xfb, 0xae, 0xa7, 0x7f,
+	0xfe, 0x74, 0x44, 0xea, 0x5d, 0xc1, 0x98, 0x18, 0x6e, 0x23, 0x27, 0x78,
+	0x39, 0x12, 0xc3, 0x37, 0x89, 0xc9, 0x3b, 0x6c, 0x7d, 0xfc, 0x48, 0x26,
+	0xe3, 0xb4, 0xb9, 0x8e, 0x4c, 0xb2, 0x9d, 0xb6, 0x0e, 0x31, 0xe7, 0xd3,
+	0x37, 0x0b, 0xad, 0xd8, 0x93, 0x5c, 0x8d, 0xaa, 0x82, 0xed, 0x07, 0xc4,
+	0x9e, 0xee, 0x69, 0x4e, 0xb4, 0x0e, 0xc7, 0x87, 0x64, 0x0d, 0x53, 0xc7,
+	0xf5, 0xa9, 0x40, 0x5f, 0x87, 0xb2, 0x0e, 0x3f, 0x1d, 0x2d, 0x71, 0x27,
+	0x05, 0xbb, 0xed, 0x7c, 0x21, 0x7c, 0xcd, 0x8d, 0x3d, 0xb9, 0x1f, 0x13,
+	0xb7, 0xec, 0x9c, 0xe1, 0x77, 0x61, 0x98, 0x7e, 0x14, 0x30, 0x9e, 0xb1,
+	0xff, 0x97, 0xa1, 0xdb, 0xac, 0x8e, 0x95, 0xf6, 0x65, 0x4b, 0xfb, 0x35,
+	0x26, 0x9e, 0x58, 0xec, 0x93, 0xf3, 0x85, 0xca, 0xe1, 0xc5, 0x65, 0x58,
+	0xb5, 0xaf, 0x13, 0xe3, 0x7b, 0x7f, 0x8f, 0x8a, 0x01, 0xf5, 0xab, 0x1e,
+	0x34, 0x85, 0x6e, 0x57, 0xb6, 0x61, 0x59, 0x58, 0x9e, 0xdb, 0x93, 0xbd,
+	0x86, 0xc3, 0xe8, 0x2d, 0xd0, 0x57, 0x0a, 0x97, 0xe0, 0xa8, 0x66, 0x59,
+	0x8f, 0x19, 0xbf, 0x47, 0xd9, 0x80, 0x8b, 0x3c, 0xc9, 0xc2, 0x51, 0x63,
+	0x11, 0xd6, 0xd9, 0x6b, 0xf2, 0x15, 0x40, 0xc3, 0x85, 0x7b, 0x30, 0xf0,
+	0x54, 0x4f, 0xff, 0x1f, 0x94, 0xd2, 0xb3, 0x7a, 0xa9, 0x89, 0xdf, 0xd5,
+	0x15, 0xcf, 0x64, 0xfd, 0x39, 0xf7, 0xf6, 0xa0, 0x8b, 0xf5, 0xee, 0xda,
+	0x7d, 0xdf, 0xc1, 0x9a, 0xc1, 0xe6, 0x9e, 0xa8, 0x6a, 0x59, 0xa7, 0xc3,
+	0x93, 0x78, 0x26, 0x5c, 0x01, 0xd3, 0x4b, 0x9c, 0x5e, 0x78, 0x95, 0x3c,
+	0x1e, 0xce, 0xbf, 0x93, 0x96, 0xff, 0xab, 0x22, 0xef, 0xa7, 0xd3, 0x31,
+	0x74, 0xe7, 0x6c, 0x39, 0x07, 0xf5, 0x54, 0xe6, 0x7f, 0x92, 0xa7, 0xc9,
+	0xf7, 0xd2, 0xf5, 0x57, 0x59, 0x33, 0xc8, 0xf5, 0x79, 0xd3, 0xed, 0xbe,
+	0x83, 0x9b, 0x59, 0xe7, 0x9c, 0x5c, 0xf4, 0x1d, 0x2c, 0x1d, 0x2e, 0xb5,
+	0x79, 0x0b, 0x15, 0x7b, 0x65, 0x4f, 0x4f, 0x9e, 0xd7, 0x91, 0x35, 0x10,
+	0xd9, 0xe3, 0x93, 0x7d, 0xa7, 0x41, 0xf4, 0xee, 0x97, 0x35, 0x61, 0xcb,
+	0xba, 0x55, 0x97, 0xbd, 0xd1, 0x23, 0xca, 0xfd, 0xb2, 0xfe, 0x2e, 0xff,
+	0x90, 0x02, 0xa6, 0x62, 0xe6, 0xa4, 0xed, 0x0e, 0xa5, 0x3f, 0x37, 0x73,
+	0x4c, 0xb3, 0x12, 0xe5, 0x4c, 0x6b, 0x55, 0xb1, 0x99, 0x63, 0xeb, 0x53,
+	0x76, 0xe7, 0x8e, 0x28, 0x7b, 0x72, 0x17, 0xda, 0xe3, 0x71, 0x2b, 0xde,
+	0x29, 0x32, 0x44, 0xa7, 0xfd, 0xd4, 0x45, 0xf4, 0x2a, 0xfd, 0xf6, 0xe8,
+	0xb4, 0xde, 0xe5, 0xe4, 0xb9, 0x45, 0xbd, 0x37, 0x50, 0x6f, 0x63, 0x11,
+	0xd1, 0xe9, 0xca, 0x99, 0xba, 0x97, 0xc6, 0xf9, 0xb7, 0xe7, 0x65, 0x15,
+	0xef, 0x7b, 0x96, 0xbf, 0xcb, 0xbd, 0x52, 0x37, 0xfc, 0xbf, 0xfd, 0x25,
+	0xf1, 0x9f, 0x48, 0x57, 0x00, 0x00, 0x00 };
+
+static const u32 bnx2_CP_b09FwData[(0x84/4) + 1] = {
+	0x00000000, 0x0000001b, 0x0000000f, 0x0000000a, 0x00000008, 0x00000006,
+	0x00000005, 0x00000005, 0x00000004, 0x00000004, 0x00000003, 0x00000003,
+	0x00000003, 0x00000003, 0x00000003, 0x00000002, 0x00000002, 0x00000002,
+	0x00000002, 0x00000002, 0x00000002, 0x00000002, 0x00000002, 0x00000002,
+	0x00000002, 0x00000002, 0x00000002, 0x00000002, 0x00000002, 0x00000002,
+	0x00000001, 0x00000001, 0x00000001, 0x00000000 };
+static const u32 bnx2_CP_b09FwRodata[(0x1c0/4) + 1] = {
+	0x80080100, 0x80080080, 0x80080000, 0x00000c00, 0x00003080, 0x080011d0,
+	0x0800127c, 0x08001294, 0x080012a8, 0x080012bc, 0x080011d0, 0x080011d0,
+	0x080012f0, 0x0800132c, 0x08001340, 0x08001388, 0x08001a8c, 0x08001a8c,
+	0x08001ac4, 0x08001ac4, 0x08001ad8, 0x08001aa8, 0x08001d00, 0x08001ccc,
+	0x08001d58, 0x08001d58, 0x08001de0, 0x08001d10, 0x80080240, 0x08002734,
+	0x0800256c, 0x0800275c, 0x080027f4, 0x0800293c, 0x08002988, 0x08002aac,
+	0x080029b4, 0x08002a38, 0x080025dc, 0x08002edc, 0x08002ea4, 0x08002588,
+	0x08002588, 0x08002588, 0x08002b20, 0x08002b20, 0x08002588, 0x08002588,
+	0x08002dd0, 0x08002588, 0x08002588, 0x08002588, 0x08002588, 0x08002e0c,
+	0x08002588, 0x08002588, 0x08002588, 0x08002588, 0x08002588, 0x08002588,
+	0x08002588, 0x08002588, 0x08002588, 0x08002588, 0x08002588, 0x08002588,
+	0x08002588, 0x08002588, 0x080029a8, 0x08002588, 0x08002588, 0x08002e68,
+	0x08002588, 0x08002588, 0x08002588, 0x08002588, 0x08002588, 0x08002588,
+	0x08002588, 0x08002588, 0x08002588, 0x08002588, 0x08002588, 0x08002588,
+	0x08002588, 0x08002588, 0x08002588, 0x08002588, 0x08002588, 0x08002cf4,
+	0x08002588, 0x08002588, 0x08002c68, 0x08002bc4, 0x08003ce4, 0x08003cb8,
+	0x08003c84, 0x08003c58, 0x08003c38, 0x08003bec, 0x80080100, 0x80080080,
+	0x80080000, 0x80080080, 0x08004c64, 0x08004c9c, 0x08004be4, 0x08004c64,
+	0x08004c64, 0x080049b8, 0x08004c64, 0x08005050, 0x00000000 };
+
+static struct fw_info bnx2_cp_fw_09 = {
+	/* Firmware version: 6.2.1b */
+	.ver_major			= 0x6,
+	.ver_minor			= 0x2,
+	.ver_fix			= 0x1,
+
+	.start_addr			= 0x080000a0,
+
+	.text_addr			= 0x08000000,
+	.text_len			= 0x5744,
+	.text_index			= 0x0,
+	.gz_text			= bnx2_CP_b09FwText,
+	.gz_text_len			= sizeof(bnx2_CP_b09FwText),
+
+	.data_addr			= 0x08005920,
+	.data_len			= 0x84,
+	.data_index			= 0x0,
+	.data				= bnx2_CP_b09FwData,
+
+	.sbss_addr			= 0x080059b0,
+	.sbss_len			= 0xa8,
+	.sbss_index			= 0x0,
+
+	.bss_addr			= 0x08005a58,
+	.bss_len			= 0x19c,
+	.bss_index			= 0x0,
+
+	.rodata_addr			= 0x08005744,
+	.rodata_len			= 0x1c0,
+	.rodata_index			= 0x0,
+	.rodata				= bnx2_CP_b09FwRodata,
+};
+
+static u8 bnx2_RXP_b09FwText[] = {
+	0xec, 0x5b, 0x7b, 0x6c, 0x5c, 0x65, 0x76, 0xff, 0x7d, 0x77, 0xc6, 0xf6,
+	0xb5, 0x3d, 0x1e, 0xdf, 0x19, 0x3f, 0x32, 0x0e, 0x8f, 0xcc, 0xe0, 0x3b,
+	0xb6, 0x89, 0xd3, 0xe4, 0x8e, 0x33, 0x4e, 0x4c, 0x35, 0x2b, 0x6e, 0x13,
+	0x28, 0xa9, 0x16, 0x88, 0x03, 0x81, 0x1a, 0x09, 0x6d, 0xad, 0xc4, 0x81,
+	0x10, 0x1e, 0x1b, 0x56, 0xb4, 0x0d, 0x7d, 0xe5, 0x92, 0x17, 0x81, 0x8c,
+	0x33, 0xe3, 0x90, 0x07, 0x55, 0x91, 0x32, 0x71, 0xec, 0x24, 0x90, 0x71,
+	0x26, 0xd0, 0x10, 0x82, 0xb6, 0x90, 0xe9, 0x6e, 0x08, 0x29, 0x25, 0xed,
+	0x6e, 0xa1, 0xea, 0x56, 0x45, 0x5d, 0x97, 0x84, 0x90, 0xc0, 0x6e, 0x08,
+	0x14, 0x44, 0x10, 0xe0, 0xdb, 0xdf, 0x99, 0x89, 0xd9, 0x88, 0x5d, 0xad,
+	0xaa, 0x4a, 0xfd, 0xef, 0x1e, 0xc9, 0xba, 0x73, 0xef, 0xfd, 0xbe, 0xf3,
+	0x9d, 0xe7, 0xef, 0x9c, 0x73, 0x25, 0xaf, 0x0b, 0xa0, 0x06, 0x97, 0xa8,
+	0x8e, 0x7f, 0x73, 0x56, 0xae, 0xfa, 0x41, 0x62, 0x66, 0xd7, 0x4c, 0xfe,
+	0x5c, 0xe2, 0x53, 0x5a, 0xa5, 0x3c, 0x57, 0xf0, 0xc8, 0x23, 0x8f, 0x3c,
+	0xf2, 0xc8, 0x23, 0x8f, 0x3c, 0xf2, 0xc8, 0x23, 0x8f, 0x3c, 0xf2, 0xc8,
+	0x23, 0x8f, 0x3c, 0xf2, 0xc8, 0x23, 0x8f, 0x3c, 0xf2, 0xc8, 0x23, 0x8f,
+	0x3c, 0xf2, 0xc8, 0x23, 0x8f, 0x3c, 0xf2, 0xc8, 0x23, 0x8f, 0x3c, 0xf2,
+	0xc8, 0x23, 0x8f, 0x3c, 0xf2, 0xc8, 0x23, 0x8f, 0x3c, 0xf2, 0xc8, 0x23,
+	0x8f, 0x3c, 0xf2, 0xc8, 0x23, 0x8f, 0x3c, 0xf2, 0xe8, 0xff, 0x8b, 0x9c,
+	0xff, 0xc5, 0x9a, 0x9a, 0x6f, 0xdd, 0xfb, 0x00, 0x43, 0xae, 0x75, 0x97,
+	0xfe, 0x94, 0xae, 0xa5, 0x8a, 0xdb, 0xe6, 0x99, 0x4a, 0xf7, 0xa5, 0xbe,
+	0xda, 0xb1, 0xd4, 0x04, 0xec, 0x7c, 0x67, 0x74, 0x3e, 0xbe, 0x76, 0x9d,
+	0x46, 0x3f, 0xe6, 0x99, 0xd0, 0xaf, 0x4a, 0x7d, 0xb5, 0xf3, 0x95, 0xb9,
+	0xb1, 0x0b, 0x39, 0x1f, 0x74, 0x23, 0x65, 0x74, 0x19, 0x6d, 0x4a, 0xbf,
+	0x92, 0x7b, 0x9e, 0x69, 0x7f, 0x35, 0x8c, 0xe0, 0x24, 0x2f, 0x38, 0x5a,
+	0xca, 0x75, 0x47, 0x2d, 0x17, 0xc7, 0x2d, 0x47, 0xcd, 0x4f, 0xc2, 0xd1,
+	0x53, 0x47, 0x54, 0xf5, 0xe0, 0x84, 0x1b, 0xad, 0x28, 0x9f, 0x3c, 0x90,
+	0xd7, 0xe0, 0x37, 0x75, 0x2c, 0x1b, 0xa9, 0xc1, 0x3d, 0xb9, 0x5a, 0x0c,
+	0xe4, 0x22, 0xb8, 0x37, 0x0f, 0xc3, 0x97, 0xd2, 0x31, 0xee, 0x3b, 0xa2,
+	0x7c, 0x63, 0xe8, 0xaf, 0x48, 0x5d, 0x5c, 0x38, 0x9c, 0x9e, 0x70, 0x6d,
+	0xbf, 0xec, 0x28, 0x2e, 0x1c, 0x29, 0xbd, 0x87, 0xe6, 0x4f, 0x1d, 0xe3,
+	0x6f, 0x59, 0x77, 0x71, 0xe1, 0xee, 0x7c, 0x00, 0x1b, 0xb6, 0xc6, 0x7a,
+	0x73, 0x68, 0xc4, 0x46, 0x53, 0xeb, 0xac, 0x84, 0x63, 0x54, 0x20, 0xb6,
+	0xe0, 0x06, 0x74, 0x46, 0xaa, 0x55, 0x08, 0xfd, 0xc6, 0x25, 0x4d, 0x87,
+	0xaa, 0x31, 0x30, 0xa3, 0x1a, 0x4e, 0xaf, 0x42, 0xcb, 0x90, 0xd3, 0xef,
+	0xa3, 0xae, 0x75, 0xa9, 0xbe, 0x2d, 0x63, 0xf1, 0x58, 0xdf, 0xa0, 0x02,
+	0xee, 0x1d, 0x24, 0xbf, 0xd2, 0x4a, 0x79, 0x1f, 0xb3, 0x5b, 0x54, 0xa7,
+	0x55, 0xad, 0x3e, 0x71, 0x8b, 0x8b, 0x65, 0xaf, 0x9c, 0x15, 0x23, 0xa7,
+	0x37, 0x03, 0xa8, 0x51, 0xd0, 0xe3, 0x0a, 0xf5, 0x43, 0x35, 0x08, 0x9a,
+	0x36, 0xce, 0x37, 0xb5, 0x9e, 0xe8, 0x50, 0x35, 0xe8, 0x99, 0xf5, 0x1d,
+	0x60, 0x8a, 0x86, 0xba, 0x38, 0xd0, 0x37, 0x58, 0x89, 0xfa, 0x38, 0x54,
+	0x70, 0x2e, 0x70, 0xeb, 0x98, 0x86, 0xc0, 0x90, 0xc2, 0xfe, 0x21, 0x0d,
+	0x23, 0x43, 0x3e, 0xec, 0x19, 0xc2, 0xcc, 0x00, 0x90, 0xaa, 0x45, 0xdc,
+	0xd8, 0x0b, 0x4c, 0xf5, 0x23, 0x7e, 0x62, 0x3e, 0xe2, 0xc5, 0x36, 0x9f,
+	0x1f, 0x7d, 0x63, 0x95, 0x08, 0x72, 0xed, 0x2f, 0xb9, 0xf6, 0x7d, 0xae,
+	0x7d, 0x6f, 0x08, 0xdf, 0xa3, 0x49, 0x07, 0xea, 0x10, 0xb7, 0x1e, 0x50,
+	0xb8, 0xa6, 0x8a, 0x7b, 0x8e, 0x21, 0x1e, 0xb9, 0x91, 0x7e, 0xd4, 0xe3,
+	0x22, 0x8b, 0x8e, 0xf9, 0x63, 0x22, 0x0b, 0x6d, 0x19, 0xd7, 0xa0, 0x9b,
+	0x0a, 0x67, 0xef, 0x88, 0x45, 0xa3, 0x4a, 0xde, 0xc5, 0x6c, 0x87, 0xba,
+	0x04, 0xc8, 0xa7, 0xd6, 0x6c, 0xc6, 0xa6, 0xa6, 0xb2, 0x1d, 0xfa, 0x06,
+	0x35, 0x9e, 0x41, 0xe7, 0xc5, 0x75, 0xd4, 0xcd, 0x35, 0x70, 0xeb, 0xae,
+	0x37, 0x4b, 0xff, 0x17, 0x74, 0xcb, 0x98, 0xe8, 0xed, 0x47, 0xbd, 0x59,
+	0x8b, 0x59, 0x53, 0x64, 0xa5, 0x86, 0x2a, 0xae, 0xf3, 0x0f, 0x01, 0xf3,
+	0x07, 0x31, 0x5d, 0xce, 0x1e, 0x81, 0x1f, 0xf7, 0x24, 0xfd, 0xdc, 0x1b,
+	0xc0, 0xbc, 0xb1, 0xf2, 0xbe, 0xdf, 0x1f, 0x13, 0xdb, 0x28, 0x68, 0xe6,
+	0x59, 0xf7, 0x95, 0xf6, 0x46, 0x1c, 0x2d, 0x18, 0x38, 0x58, 0xb8, 0xb5,
+	0x19, 0xc1, 0x98, 0xe3, 0x40, 0x77, 0xfc, 0x29, 0x07, 0xeb, 0x93, 0x15,
+	0xd8, 0x93, 0x9d, 0x70, 0x7d, 0x66, 0x2c, 0xca, 0x85, 0xc6, 0x8f, 0xe9,
+	0xab, 0xa3, 0x19, 0xae, 0xcb, 0x54, 0x60, 0x38, 0xd7, 0xd7, 0x8c, 0x9a,
+	0x08, 0x5e, 0x69, 0x97, 0xfd, 0xb2, 0x57, 0x78, 0xbc, 0x5d, 0x3f, 0xb9,
+	0xbf, 0x92, 0xfb, 0x5f, 0x4b, 0x02, 0x23, 0xd9, 0x5e, 0x6e, 0x75, 0xb1,
+	0xd6, 0xaa, 0xc2, 0x12, 0x03, 0x4e, 0x75, 0x4a, 0x78, 0x4d, 0xf2, 0x71,
+	0x54, 0x74, 0x8c, 0x3f, 0x4a, 0x7c, 0xe8, 0x58, 0x13, 0x4e, 0xd5, 0xb7,
+	0xde, 0x9f, 0xcd, 0x4f, 0xbe, 0x5f, 0xc5, 0x73, 0x74, 0xa7, 0x82, 0x7c,
+	0x5f, 0x2d, 0xfc, 0x05, 0x5e, 0x2a, 0x3c, 0x80, 0xbf, 0x2d, 0x0c, 0xe0,
+	0xf9, 0xc2, 0x3a, 0x9e, 0xbb, 0x0a, 0x87, 0x0b, 0x8f, 0xe0, 0xc5, 0xc2,
+	0x4a, 0x1c, 0x2a, 0x2c, 0xc7, 0x0b, 0x85, 0x7e, 0xca, 0xe3, 0x60, 0x0f,
+	0xe3, 0xb7, 0x22, 0xd5, 0xa1, 0x5e, 0x48, 0x57, 0xe3, 0x58, 0xd6, 0xaf,
+	0xf6, 0xa6, 0xa9, 0x6f, 0xca, 0xc5, 0x90, 0x65, 0x46, 0xde, 0x45, 0xec,
+	0x08, 0x10, 0xbb, 0x00, 0x54, 0x31, 0xd6, 0x62, 0x4f, 0xd3, 0x70, 0x7a,
+	0x75, 0xea, 0x42, 0xe2, 0x5a, 0x06, 0x55, 0x03, 0xfd, 0xd1, 0x11, 0x87,
+	0xae, 0x78, 0xdf, 0x91, 0x5f, 0x87, 0x5c, 0xbe, 0x02, 0x6f, 0x66, 0xdb,
+	0xfb, 0x02, 0xf4, 0xcb, 0x8a, 0xc4, 0x0f, 0x60, 0x37, 0xf5, 0x22, 0x57,
+	0x00, 0x4e, 0x66, 0xa3, 0xa8, 0xa4, 0x6e, 0x23, 0x89, 0x08, 0x36, 0x18,
+	0xbd, 0x8c, 0xab, 0xa7, 0xb0, 0xb9, 0x1c, 0xb7, 0xcc, 0xb1, 0x77, 0x60,
+	0x6c, 0xa6, 0x8f, 0xdb, 0x84, 0xcf, 0x3b, 0x98, 0x95, 0x7f, 0xbd, 0xb9,
+	0x9c, 0x67, 0xb1, 0x88, 0x0d, 0xca, 0x9c, 0xa1, 0x1e, 0x19, 0xea, 0x91,
+	0xa1, 0xec, 0x19, 0xca, 0x9e, 0xa1, 0xec, 0x19, 0xea, 0x94, 0xa1, 0xfc,
+	0x19, 0xea, 0x95, 0xa1, 0x0e, 0x99, 0x98, 0xd1, 0x0f, 0xf1, 0xd3, 0x46,
+	0xea, 0x5f, 0xce, 0xcf, 0x69, 0x29, 0x8b, 0x67, 0x37, 0xab, 0xf7, 0x76,
+	0xf8, 0xd5, 0xbb, 0x99, 0x28, 0xfc, 0xcc, 0xd7, 0x97, 0x2d, 0xb3, 0x47,
+	0xf2, 0xa6, 0x0a, 0x76, 0xc2, 0x07, 0x0b, 0x7b, 0x0a, 0x7e, 0xf5, 0x59,
+	0x06, 0x81, 0x8b, 0x73, 0x6d, 0x34, 0xa7, 0x62, 0x4e, 0x8f, 0xcf, 0xcc,
+	0x1d, 0xd6, 0x6c, 0x1c, 0x4b, 0xde, 0x04, 0x27, 0x5c, 0x87, 0xa6, 0x2d,
+	0x51, 0xec, 0xeb, 0xd2, 0x80, 0x26, 0x07, 0x1b, 0x92, 0x31, 0xcb, 0xc1,
+	0x4e, 0x14, 0x1b, 0x65, 0x9f, 0xee, 0xd4, 0xd1, 0xbe, 0x7b, 0xba, 0x75,
+	0xea, 0x6b, 0x63, 0x53, 0xa2, 0x12, 0xfd, 0x8b, 0xc4, 0x97, 0x7e, 0xea,
+	0xb6, 0x0f, 0x33, 0xc3, 0x61, 0xc6, 0x59, 0x17, 0x66, 0x85, 0xe5, 0x19,
+	0xd4, 0xb1, 0xa4, 0xe0, 0xc5, 0x54, 0x75, 0xd3, 0xd6, 0x20, 0x5a, 0xb6,
+	0xeb, 0xd8, 0x99, 0xd5, 0x11, 0xd9, 0xec, 0xba, 0xa7, 0x2c, 0xff, 0xc1,
+	0x2f, 0x98, 0x17, 0x87, 0xba, 0xee, 0xa6, 0x5f, 0xfa, 0xb0, 0xbb, 0xe0,
+	0x47, 0xf3, 0xe6, 0x99, 0x3c, 0x7b, 0x31, 0x8e, 0xd0, 0x2f, 0x3f, 0x4e,
+	0xea, 0x58, 0x4e, 0xfe, 0x15, 0x89, 0x38, 0x72, 0x8d, 0xa2, 0x56, 0x2f,
+	0x56, 0xa6, 0x5b, 0xb3, 0x3f, 0xd1, 0x2a, 0x60, 0x97, 0xfe, 0x9f, 0x2d,
+	0x89, 0x87, 0xd3, 0xad, 0xfb, 0x7e, 0xaa, 0xdd, 0xab, 0x86, 0x2b, 0x75,
+	0xbc, 0xbb, 0x99, 0x72, 0x84, 0xb9, 0x3d, 0x05, 0xbd, 0x29, 0xf5, 0x69,
+	0xe2, 0x45, 0xda, 0xf5, 0x70, 0xc9, 0xae, 0x9f, 0x26, 0xe6, 0xe4, 0x6f,
+	0x80, 0x7d, 0x40, 0xc1, 0x67, 0xfe, 0x5f, 0x6c, 0xda, 0x51, 0xc7, 0x78,
+	0x8d, 0x02, 0x7f, 0x5c, 0xc7, 0xbc, 0xa3, 0x5f, 0xb6, 0xc9, 0x35, 0x5a,
+	0xc4, 0x94, 0x29, 0xf2, 0xbc, 0xa8, 0xfd, 0x97, 0x6b, 0x97, 0xe4, 0xd3,
+	0x9d, 0x5a, 0xda, 0x65, 0xa0, 0x3b, 0x89, 0x27, 0xd3, 0xad, 0x0b, 0xde,
+	0xd0, 0xae, 0xc2, 0x25, 0x3c, 0xd4, 0xaf, 0x4e, 0x21, 0xf1, 0x9f, 0x19,
+	0x85, 0x7f, 0x6b, 0x17, 0x79, 0x90, 0x98, 0x9b, 0x17, 0x59, 0x63, 0x51,
+	0x9b, 0x69, 0xdd, 0x48, 0xf9, 0xb6, 0x52, 0xd6, 0xec, 0x25, 0x59, 0xad,
+	0xbc, 0xe4, 0x97, 0xee, 0x5c, 0x4d, 0x5e, 0x27, 0xe7, 0xc6, 0xf1, 0xd2,
+	0x90, 0xac, 0xf3, 0xe3, 0xfc, 0x1c, 0xe6, 0x52, 0x30, 0x8e, 0x03, 0xbb,
+	0x08, 0x8a, 0x41, 0x79, 0xf6, 0x46, 0x9d, 0xe0, 0x95, 0x8f, 0x78, 0x3e,
+	0x25, 0x55, 0xdc, 0xfe, 0x79, 0xdb, 0x3a, 0xde, 0x97, 0x7d, 0xbf, 0x21,
+	0xdd, 0xda, 0x7f, 0x5c, 0x0b, 0xc0, 0x69, 0x09, 0xa0, 0xc5, 0x5c, 0x88,
+	0x4c, 0x56, 0xce, 0x01, 0xcf, 0xf9, 0x0a, 0x2f, 0x76, 0x11, 0x83, 0xba,
+	0x15, 0x36, 0xb7, 0x95, 0x65, 0x99, 0x99, 0x5f, 0x88, 0xc1, 0x5c, 0x1f,
+	0xe3, 0x45, 0xd6, 0x5a, 0x78, 0xb9, 0x60, 0xe1, 0xe9, 0x74, 0x6b, 0xae,
+	0xd9, 0x57, 0xab, 0x9c, 0xa9, 0xf4, 0x4b, 0x66, 0xfa, 0xc5, 0x47, 0xf0,
+	0x96, 0x3b, 0x5e, 0xc2, 0x8d, 0xe9, 0x78, 0xc4, 0xe8, 0xc3, 0x68, 0x26,
+	0x76, 0xf0, 0x6d, 0xad, 0xd5, 0x38, 0x04, 0xd7, 0xbd, 0xc1, 0xea, 0xc3,
+	0x48, 0x41, 0x63, 0xac, 0xcc, 0x04, 0x42, 0x06, 0xf6, 0x77, 0xe9, 0x4e,
+	0x13, 0x65, 0x3f, 0x38, 0x47, 0x47, 0xf3, 0x16, 0x1b, 0x6f, 0x75, 0x7d,
+	0x89, 0xfe, 0xdb, 0xc4, 0x3f, 0x25, 0xdc, 0xa0, 0xdc, 0x11, 0xd4, 0x98,
+	0xd5, 0xa8, 0x19, 0xae, 0x40, 0x68, 0xcb, 0x84, 0x5b, 0x6d, 0xca, 0x33,
+	0x33, 0x7b, 0xad, 0x26, 0xfa, 0x55, 0x20, 0x3c, 0x7c, 0x1d, 0x6b, 0x47,
+	0xac, 0x03, 0xf8, 0x84, 0xf7, 0x11, 0xe6, 0xce, 0xa4, 0x9e, 0x01, 0x4c,
+	0x6c, 0xd1, 0x9d, 0x1a, 0xf2, 0xfe, 0x83, 0x6e, 0xfc, 0xf0, 0x6a, 0xf4,
+	0xa0, 0x7d, 0xf0, 0x31, 0x7c, 0x3c, 0x47, 0xf6, 0x3f, 0x76, 0x21, 0xde,
+	0xf5, 0x37, 0xb4, 0x8b, 0xd4, 0xa4, 0xbf, 0xaf, 0x2b, 0x97, 0x42, 0x85,
+	0xbd, 0xbf, 0xab, 0x70, 0xca, 0x1a, 0x71, 0xfb, 0x1b, 0x45, 0xde, 0xab,
+	0x82, 0xe5, 0xe7, 0xb2, 0x3e, 0x29, 0xbe, 0xeb, 0x80, 0x36, 0xe9, 0xd3,
+	0x95, 0x6e, 0x7f, 0x48, 0x77, 0xea, 0x53, 0xe5, 0xd8, 0x3e, 0xdf, 0xdd,
+	0x83, 0x63, 0x83, 0x8b, 0xa9, 0xbb, 0x1f, 0x7b, 0x06, 0x5b, 0xfb, 0xef,
+	0xc1, 0x72, 0xd7, 0xb9, 0x4a, 0xf6, 0xb6, 0x16, 0x07, 0xc8, 0x57, 0xab,
+	0x5a, 0x4c, 0x9d, 0xa1, 0x4f, 0x4b, 0x9d, 0x4e, 0xb8, 0xf4, 0xeb, 0x17,
+	0xb3, 0x9b, 0x10, 0x6d, 0xe8, 0x43, 0x3e, 0x23, 0xd8, 0x34, 0x55, 0x9d,
+	0xda, 0x1a, 0x26, 0x5e, 0x48, 0xfc, 0xaf, 0x88, 0x95, 0x75, 0x96, 0x9a,
+	0xfb, 0xf1, 0xf6, 0xa5, 0x59, 0x0d, 0x03, 0xd6, 0x8d, 0xca, 0x29, 0xc5,
+	0x8b, 0x1f, 0x0f, 0x10, 0xef, 0x9c, 0x90, 0xec, 0xfb, 0x12, 0xf7, 0x58,
+	0x8a, 0xfe, 0xf8, 0x78, 0x7b, 0x5b, 0x4e, 0x7c, 0x24, 0xfe, 0x90, 0xe7,
+	0x65, 0x8c, 0x7c, 0x2b, 0x19, 0x21, 0x66, 0x19, 0xcc, 0x93, 0x46, 0xe4,
+	0x0b, 0x52, 0x6f, 0xa3, 0xaa, 0x76, 0x9b, 0x85, 0xef, 0x6f, 0xbe, 0x1b,
+	0x2b, 0xb6, 0xdf, 0x4d, 0x39, 0x2d, 0xc6, 0xb5, 0xeb, 0xde, 0x97, 0xa0,
+	0x3f, 0x12, 0x8b, 0x71, 0x80, 0xf1, 0x9b, 0x54, 0xb0, 0x2b, 0xba, 0x3b,
+	0x7b, 0x06, 0x10, 0x3b, 0x71, 0x23, 0x6b, 0xd0, 0xfb, 0xbe, 0x28, 0x7d,
+	0xdb, 0x81, 0x02, 0xfd, 0x7b, 0xa4, 0x60, 0xf2, 0x3a, 0x83, 0x67, 0x24,
+	0x71, 0xa0, 0xa0, 0xe3, 0xc1, 0x2d, 0x3a, 0x0e, 0x25, 0x7e, 0x08, 0xa7,
+	0x59, 0x70, 0xd5, 0x4f, 0x5f, 0x55, 0x5f, 0xb4, 0xd9, 0x3c, 0x8c, 0xb4,
+	0x5b, 0x28, 0x64, 0x34, 0xfc, 0x77, 0x42, 0xa1, 0xff, 0xce, 0x09, 0xca,
+	0x55, 0xc6, 0xfc, 0x9d, 0xcc, 0xcd, 0x2f, 0x9e, 0xb2, 0xd1, 0x33, 0xbb,
+	0x01, 0xb8, 0xdd, 0xc4, 0x08, 0xed, 0xb4, 0x3e, 0xbd, 0x18, 0x7b, 0x33,
+	0xff, 0x8a, 0xbd, 0x46, 0x23, 0xfd, 0xa7, 0x70, 0xb0, 0x8b, 0x95, 0x30,
+	0x2c, 0xef, 0x02, 0x68, 0x34, 0xa7, 0xaa, 0x24, 0x31, 0xe5, 0x77, 0xa6,
+	0x6b, 0x2a, 0x17, 0x0a, 0x12, 0x3b, 0xa5, 0xbe, 0x2a, 0xcc, 0x64, 0x5c,
+	0x5c, 0x6d, 0x52, 0x16, 0xda, 0xf0, 0x74, 0x9c, 0x6b, 0xa9, 0xdf, 0x73,
+	0x99, 0x72, 0x1e, 0x2d, 0xeb, 0x8e, 0x2d, 0x78, 0x92, 0x38, 0xf5, 0x7c,
+	0xda, 0xc2, 0xb3, 0xf9, 0x5b, 0x59, 0x23, 0x2c, 0xec, 0x4d, 0xbb, 0xae,
+	0x9e, 0xf4, 0x47, 0x36, 0x22, 0x76, 0xf1, 0x14, 0xf3, 0xff, 0x68, 0x9e,
+	0x78, 0x94, 0x59, 0x8c, 0x97, 0x33, 0x77, 0xe3, 0x48, 0x46, 0xc7, 0x8f,
+	0xac, 0x5a, 0xd8, 0xc4, 0xe9, 0x1e, 0xea, 0x9a, 0x4f, 0xbf, 0x85, 0xa7,
+	0x42, 0x12, 0x0f, 0x01, 0x9c, 0xdf, 0x92, 0xa4, 0x6c, 0xa5, 0x7c, 0xbb,
+	0x3f, 0xc8, 0x5e, 0xea, 0x50, 0xb7, 0xc4, 0x8a, 0x73, 0x61, 0x3d, 0xf5,
+	0xd1, 0x78, 0x56, 0x6f, 0xd2, 0x42, 0xfd, 0xe6, 0x56, 0xeb, 0x63, 0xb5,
+	0x03, 0xc5, 0x88, 0x83, 0x05, 0xcc, 0x8d, 0x2a, 0xfa, 0xf6, 0xfd, 0xb4,
+	0xe3, 0xfa, 0x4d, 0x33, 0xe2, 0x57, 0xab, 0x11, 0x49, 0x48, 0x6e, 0xf9,
+	0x9d, 0x96, 0x94, 0xc2, 0xc7, 0x56, 0x16, 0xa7, 0x0a, 0x95, 0x88, 0x86,
+	0x63, 0x1d, 0x2d, 0xbe, 0x49, 0xdf, 0xea, 0xb8, 0xcf, 0x3a, 0x8e, 0x68,
+	0xd3, 0xe7, 0x58, 0x61, 0xe9, 0x8e, 0x41, 0xbe, 0xfe, 0x39, 0x0b, 0x91,
+	0xce, 0x2a, 0x62, 0xe4, 0x3c, 0xf4, 0x97, 0x6b, 0xb4, 0x5e, 0x99, 0x7a,
+	0x3a, 0x71, 0x3c, 0x6d, 0xe0, 0x9f, 0xac, 0x79, 0x28, 0x2e, 0x62, 0xec,
+	0x58, 0xf7, 0xa3, 0x90, 0xbd, 0x1e, 0xe3, 0x77, 0xc8, 0x6f, 0x85, 0x88,
+	0x79, 0x3f, 0x8e, 0xe4, 0x18, 0x16, 0xa9, 0x3f, 0xc3, 0x35, 0xdb, 0x07,
+	0x70, 0x93, 0x19, 0xc6, 0xe3, 0x23, 0xe5, 0xb8, 0x1c, 0x25, 0xe6, 0x1e,
+	0x22, 0x26, 0x66, 0xbb, 0xd8, 0x34, 0x35, 0xeb, 0x8e, 0x8f, 0xb2, 0x1c,
+	0xe8, 0xda, 0x84, 0x62, 0x53, 0xb9, 0x47, 0x1c, 0x48, 0x46, 0x99, 0xfb,
+	0x35, 0x78, 0xcb, 0x80, 0x5a, 0xca, 0xba, 0x7a, 0x6f, 0xba, 0x75, 0xd5,
+	0xeb, 0xda, 0x0e, 0x8c, 0xb7, 0x2c, 0x66, 0x7c, 0x44, 0xf1, 0x54, 0x5e,
+	0xea, 0x16, 0xf0, 0x27, 0xf9, 0x5e, 0xd6, 0x45, 0x3f, 0x56, 0xd3, 0xae,
+	0xc5, 0x29, 0x65, 0x6c, 0x7d, 0x36, 0x53, 0x4b, 0xd9, 0x4b, 0x79, 0x73,
+	0x49, 0x1f, 0xd6, 0x31, 0x6b, 0x26, 0x6c, 0xc6, 0xe7, 0xfe, 0xcc, 0x04,
+	0xe3, 0xb6, 0x1c, 0x9f, 0x66, 0xae, 0x9c, 0x33, 0xc0, 0x24, 0x0e, 0x35,
+	0xd4, 0x97, 0xf3, 0x2a, 0xca, 0xfc, 0x8a, 0xe5, 0x00, 0x89, 0x9d, 0x29,
+	0x8c, 0x81, 0xc9, 0xbc, 0x95, 0xfb, 0xe6, 0xcb, 0xee, 0x17, 0x62, 0x2b,
+	0xfb, 0x85, 0x3a, 0xd3, 0xec, 0x18, 0xd4, 0x16, 0x62, 0x7d, 0x4e, 0xf4,
+	0xa6, 0x2d, 0x1b, 0x24, 0xb6, 0x26, 0xcf, 0x36, 0xb0, 0xda, 0x5a, 0x84,
+	0xf1, 0x29, 0x1f, 0x61, 0x39, 0x2b, 0x4f, 0x96, 0xc1, 0x5c, 0x53, 0xc2,
+	0x09, 0xc1, 0x90, 0x30, 0x6a, 0xf6, 0xc4, 0xe1, 0xdb, 0xa2, 0x50, 0x6d,
+	0x52, 0xee, 0x82, 0xc2, 0x92, 0xa4, 0xbc, 0x2b, 0xe3, 0xa3, 0x36, 0xfc,
+	0x05, 0xe5, 0x10, 0x7b, 0xad, 0x9d, 0xe8, 0x0f, 0x89, 0x9c, 0x16, 0xf1,
+	0xca, 0x8f, 0xbc, 0x35, 0x63, 0xc2, 0x09, 0x09, 0xfe, 0xff, 0xe3, 0x25,
+	0x39, 0x7a, 0x30, 0xda, 0x7e, 0x98, 0x3a, 0xf4, 0x30, 0x0f, 0xe6, 0xbb,
+	0xf6, 0x62, 0x89, 0xfb, 0x1e, 0xd6, 0x02, 0xa8, 0x6c, 0xd7, 0xf5, 0x2e,
+	0x6e, 0x93, 0xfb, 0x14, 0x73, 0xab, 0x0f, 0x0f, 0x6d, 0x6e, 0x5d, 0xfe,
+	0x10, 0xae, 0x73, 0x77, 0x57, 0xf4, 0x61, 0xe9, 0x01, 0x16, 0xb2, 0x1a,
+	0xff, 0x65, 0x78, 0x26, 0x7e, 0x70, 0xb0, 0xfc, 0x1b, 0x19, 0xaa, 0x71,
+	0xf5, 0xae, 0x98, 0x55, 0xf4, 0xcd, 0xa5, 0xce, 0x82, 0x61, 0x82, 0x65,
+	0x21, 0xda, 0x48, 0x6c, 0x1c, 0xa1, 0x2d, 0x07, 0xdd, 0xfe, 0xbb, 0x44,
+	0xbe, 0xc9, 0xfd, 0x71, 0x04, 0xa8, 0x4b, 0x05, 0x75, 0x19, 0xa5, 0x4f,
+	0xd6, 0x74, 0xff, 0x26, 0x5d, 0xee, 0x82, 0x19, 0x6e, 0x42, 0xeb, 0xf4,
+	0x5b, 0x88, 0x2b, 0xcd, 0xd4, 0x3b, 0xc0, 0x7e, 0xb0, 0xdd, 0xed, 0xb8,
+	0x53, 0xf2, 0x4c, 0x30, 0xf1, 0x0a, 0xdc, 0x3c, 0xf4, 0x8a, 0x5b, 0x69,
+	0x06, 0x25, 0x9f, 0xfa, 0x36, 0xa8, 0x2b, 0xf0, 0xdd, 0x5d, 0xa3, 0x41,
+	0xd1, 0xf3, 0x60, 0x57, 0xd9, 0x6f, 0x1d, 0xb9, 0x49, 0x5e, 0x16, 0x5e,
+	0x4c, 0xeb, 0x98, 0xd8, 0x1c, 0x29, 0xe5, 0xe9, 0xe1, 0xb6, 0xea, 0x8b,
+	0x45, 0x9f, 0x85, 0xc3, 0xf9, 0x5f, 0xf9, 0xfd, 0x4f, 0xad, 0xc7, 0xdc,
+	0xf1, 0x66, 0xf1, 0xbf, 0xc5, 0x9a, 0x28, 0xfe, 0xf6, 0x63, 0x7e, 0x17,
+	0x9b, 0x6f, 0x62, 0x5b, 0xc5, 0xf6, 0x4e, 0x37, 0xd7, 0x6b, 0xe0, 0x78,
+	0xf2, 0x04, 0xf9, 0x49, 0x6e, 0x01, 0x4b, 0xd2, 0x0f, 0xba, 0x77, 0x5e,
+	0xc2, 0xb4, 0x55, 0x69, 0xc9, 0xc7, 0xd6, 0x8d, 0x3d, 0xbe, 0xa5, 0x6e,
+	0xac, 0x52, 0xe2, 0x2e, 0x78, 0x29, 0x3e, 0xca, 0x72, 0x4c, 0xcf, 0x59,
+	0xf5, 0x22, 0xd7, 0x17, 0x96, 0xe6, 0xce, 0x6e, 0x96, 0xdc, 0x3f, 0x48,
+	0x3e, 0x06, 0xe5, 0xfe, 0x95, 0x3d, 0x25, 0xff, 0x97, 0x77, 0xc7, 0x51,
+	0x3d, 0x24, 0x7e, 0xef, 0xc5, 0x73, 0xb4, 0xcb, 0xec, 0xcb, 0xec, 0xd2,
+	0xb0, 0x4b, 0xe9, 0x15, 0xe4, 0x35, 0x9a, 0xfd, 0x1a, 0xc3, 0x97, 0xe2,
+	0xf2, 0x9a, 0xdc, 0x83, 0xc1, 0x32, 0x96, 0x07, 0x11, 0x32, 0x3f, 0x98,
+	0xf8, 0xe9, 0xed, 0xc2, 0xb3, 0xc0, 0x67, 0xcd, 0xbc, 0xbe, 0x33, 0x71,
+	0xed, 0xaf, 0xd9, 0xca, 0xf8, 0x0d, 0xb6, 0x1a, 0xe1, 0x35, 0xcc, 0xe7,
+	0xa0, 0x4f, 0x8f, 0xa8, 0x25, 0xe5, 0xf9, 0x44, 0xf7, 0x9b, 0x47, 0xd4,
+	0x40, 0x69, 0x26, 0x11, 0x3d, 0x4a, 0xb3, 0x8f, 0x7b, 0xdc, 0x12, 0xac,
+	0x3f, 0xa2, 0xde, 0x2d, 0xad, 0x71, 0xd4, 0x07, 0xcc, 0xb7, 0x1b, 0xc6,
+	0xa2, 0x38, 0x9d, 0x97, 0x38, 0x5e, 0x80, 0xb5, 0x5b, 0x5d, 0x77, 0xb9,
+	0xd5, 0x4c, 0xd7, 0xeb, 0xd8, 0x58, 0x08, 0x63, 0xbf, 0xd9, 0xb9, 0xa0,
+	0x56, 0x35, 0x20, 0xba, 0x08, 0x7c, 0x0f, 0xf5, 0x11, 0x73, 0xf5, 0xfc,
+	0x36, 0xe0, 0x89, 0xcc, 0x54, 0xd4, 0x99, 0xae, 0xfb, 0x66, 0x02, 0x76,
+	0x7b, 0xa2, 0x16, 0xb7, 0xec, 0x9a, 0x83, 0x71, 0x63, 0xc2, 0x5d, 0x1b,
+	0xef, 0x2c, 0xfa, 0x14, 0x99, 0x4e, 0xf1, 0xe3, 0xaf, 0x19, 0xbf, 0x1b,
+	0x33, 0x8d, 0x98, 0x3f, 0xaa, 0x50, 0xd5, 0xed, 0x33, 0xc4, 0x1f, 0x8f,
+	0x17, 0x84, 0x8f, 0x8f, 0x71, 0xec, 0xa8, 0x35, 0x49, 0xe1, 0xc3, 0x67,
+	0xcc, 0xe1, 0xf9, 0x39, 0xa9, 0x0f, 0x8e, 0x0a, 0x74, 0x07, 0xb1, 0x7e,
+	0x74, 0x2a, 0xff, 0x02, 0x58, 0xcf, 0xba, 0xf4, 0xa1, 0x65, 0xe0, 0x89,
+	0xd1, 0x0e, 0xac, 0x67, 0x4f, 0xbf, 0x61, 0xb4, 0x1e, 0xfd, 0xa1, 0x46,
+	0x79, 0xae, 0x5a, 0xba, 0x9b, 0x31, 0x7d, 0xc7, 0x57, 0x6e, 0x5f, 0x82,
+	0xf3, 0x41, 0x7b, 0x6c, 0xe5, 0x59, 0xd6, 0x8d, 0x93, 0x83, 0xae, 0xbb,
+	0x27, 0x51, 0xc5, 0x7e, 0xcf, 0x3d, 0xea, 0xa3, 0x6c, 0xec, 0x87, 0x57,
+	0x2f, 0x48, 0x9a, 0x3d, 0x67, 0x21, 0xe7, 0xca, 0x3e, 0x79, 0x2e, 0xe7,
+	0x9b, 0x7d, 0xa7, 0xe0, 0xa8, 0xb5, 0xc9, 0x36, 0xdc, 0x3f, 0x32, 0x03,
+	0xf7, 0xe5, 0x7d, 0xc8, 0x19, 0xda, 0xcd, 0x15, 0xac, 0x1d, 0xcb, 0x46,
+	0xda, 0x70, 0xdf, 0x08, 0x0c, 0xb1, 0xd1, 0xe3, 0xdf, 0xd8, 0x4e, 0x74,
+	0x99, 0x70, 0x6b, 0x4c, 0xb3, 0x67, 0xba, 0x6f, 0x52, 0x0f, 0x99, 0x0d,
+	0x3a, 0x30, 0x9c, 0x99, 0xb4, 0xab, 0xc1, 0x5e, 0x3d, 0x50, 0x3a, 0x67,
+	0x0d, 0xfd, 0xee, 0x14, 0xfe, 0xa3, 0x5e, 0x7a, 0x62, 0x87, 0xf5, 0xef,
+	0x68, 0x46, 0x7a, 0x7c, 0xe1, 0xd5, 0xc8, 0x7b, 0xb0, 0x36, 0xae, 0x64,
+	0xbf, 0x0a, 0xf5, 0x3a, 0xf5, 0x7f, 0x32, 0x1d, 0xc6, 0x7b, 0x59, 0x60,
+	0x5d, 0xe6, 0x02, 0xf9, 0xb9, 0xd8, 0x6d, 0xad, 0x89, 0xf0, 0x48, 0x7b,
+	0x8d, 0x35, 0x97, 0x35, 0xc1, 0x87, 0x65, 0xa6, 0x73, 0x82, 0xb3, 0x23,
+	0x67, 0x31, 0xd8, 0x41, 0xda, 0xea, 0xfb, 0xa6, 0xb3, 0xbc, 0x9e, 0x12,
+	0x1d, 0x28, 0xc4, 0xfa, 0xf7, 0x50, 0xe7, 0x4d, 0x83, 0x7e, 0xec, 0x2f,
+	0x34, 0xe3, 0xdc, 0xd6, 0xaf, 0xdc, 0x8e, 0x44, 0xac, 0xa7, 0x92, 0xcf,
+	0xce, 0x30, 0x4f, 0xd8, 0xef, 0x32, 0x6f, 0x63, 0x16, 0xfb, 0x86, 0x0e,
+	0xc1, 0xef, 0x2a, 0xfa, 0xee, 0x7d, 0xf3, 0x5e, 0x43, 0xe6, 0x33, 0xce,
+	0x22, 0xb8, 0x8b, 0xf9, 0x32, 0xca, 0x7c, 0xcc, 0xcf, 0x88, 0x15, 0x1f,
+	0x85, 0xb3, 0x2a, 0x82, 0xd8, 0xca, 0xf7, 0x39, 0x73, 0x9e, 0xe4, 0x9c,
+	0xe8, 0x84, 0xda, 0xac, 0x93, 0x88, 0x19, 0xa3, 0xbe, 0xcf, 0xdc, 0x7d,
+	0x8d, 0x98, 0x5a, 0x81, 0x4f, 0xdd, 0xe8, 0x1d, 0xb2, 0x47, 0x6c, 0xb7,
+	0x12, 0x8f, 0x27, 0xc1, 0x38, 0xf6, 0x27, 0x46, 0xd3, 0xc0, 0xa9, 0x74,
+	0x14, 0xc3, 0x9c, 0x61, 0x6d, 0xa3, 0xb5, 0x67, 0x05, 0x9c, 0x05, 0x6c,
+	0x1d, 0xf5, 0xda, 0x94, 0x9e, 0xb8, 0x3f, 0x1e, 0xb3, 0x3b, 0x95, 0xc2,
+	0x73, 0x3c, 0xab, 0x6a, 0x4c, 0x7a, 0x36, 0x7f, 0x62, 0x7a, 0x3e, 0x66,
+	0x14, 0x4b, 0xfd, 0xa9, 0x21, 0x33, 0x51, 0x74, 0x4d, 0xa9, 0xee, 0x39,
+	0x7d, 0x32, 0x1b, 0xdf, 0x43, 0xb9, 0x4d, 0xea, 0xb2, 0xdc, 0x74, 0x7a,
+	0x74, 0x0a, 0x3c, 0x52, 0x88, 0x45, 0xce, 0xd0, 0x0e, 0xcb, 0xa8, 0x4b,
+	0xae, 0xf0, 0x87, 0x25, 0x9b, 0x8f, 0x16, 0x64, 0x4e, 0xe8, 0x2b, 0xe9,
+	0xf0, 0x6c, 0x66, 0x9c, 0xf6, 0x92, 0x58, 0x86, 0x3a, 0x93, 0xbc, 0x92,
+	0xb6, 0x8f, 0x70, 0x36, 0x6a, 0xe4, 0xcc, 0x24, 0xf3, 0x5a, 0x10, 0xaf,
+	0x6d, 0x05, 0xe3, 0xca, 0x75, 0x47, 0x2c, 0x3f, 0xd6, 0x9a, 0xb0, 0xdf,
+	0xa5, 0x7f, 0x6c, 0xa3, 0x03, 0x6b, 0x0b, 0x51, 0x54, 0xa7, 0x4c, 0xfb,
+	0x9c, 0x7c, 0x13, 0x08, 0xc1, 0xf9, 0x05, 0xdf, 0x3f, 0xc9, 0xb8, 0xa8,
+	0xa5, 0x6f, 0x3f, 0x04, 0x8c, 0xf9, 0xdd, 0x90, 0x18, 0x8d, 0x7e, 0x22,
+	0xb2, 0x35, 0xfb, 0xd1, 0x92, 0x3a, 0xea, 0x4e, 0x33, 0x5f, 0xe2, 0x99,
+	0xa6, 0xb1, 0x1a, 0xb2, 0x7e, 0x1e, 0x9c, 0xa6, 0x28, 0x82, 0x29, 0x59,
+	0x73, 0xd1, 0xb5, 0xc3, 0xe4, 0x9f, 0x91, 0x75, 0x66, 0xf1, 0x0b, 0x7c,
+	0xe6, 0xa2, 0x41, 0xd6, 0xdb, 0xc4, 0x76, 0x62, 0x62, 0x01, 0xea, 0x5d,
+	0x2b, 0xc4, 0x73, 0x61, 0x5c, 0xb0, 0x66, 0x70, 0x5d, 0xa5, 0xcc, 0xfe,
+	0xec, 0xd7, 0xa2, 0xa8, 0x48, 0x99, 0xd1, 0xf7, 0x50, 0x84, 0x7c, 0xc3,
+	0xd0, 0x53, 0xf2, 0x0c, 0xea, 0x7c, 0xf7, 0xd5, 0x38, 0xb9, 0xed, 0x4a,
+	0xbc, 0xb9, 0xcd, 0x75, 0x9f, 0x4b, 0xe0, 0xee, 0x00, 0xe2, 0x0b, 0xbe,
+	0xab, 0x02, 0x78, 0xa2, 0x20, 0xfb, 0x69, 0x95, 0xb0, 0x22, 0x46, 0x44,
+	0x59, 0xc7, 0x37, 0x21, 0xda, 0x0c, 0x23, 0x92, 0x32, 0xb3, 0x17, 0xb1,
+	0x86, 0x72, 0x22, 0xc0, 0x1a, 0xc4, 0x77, 0x50, 0x67, 0x29, 0x37, 0x9a,
+	0x58, 0x63, 0x38, 0xd7, 0x30, 0x4f, 0xec, 0x67, 0xd9, 0xab, 0x45, 0x4b,
+	0xf7, 0x6a, 0x5a, 0x80, 0x71, 0xff, 0x0b, 0xea, 0x58, 0x93, 0x8a, 0xa8,
+	0x15, 0x21, 0xc1, 0x45, 0x79, 0x6e, 0x5a, 0xe7, 0x58, 0xf7, 0x8a, 0x94,
+	0xb1, 0x96, 0x33, 0x08, 0x79, 0x22, 0xc2, 0xde, 0xa9, 0x6a, 0xb6, 0xad,
+	0xc6, 0x1b, 0xa5, 0xde, 0x5c, 0x59, 0x8a, 0xdf, 0x17, 0x98, 0xc7, 0xcf,
+	0x97, 0xe6, 0xd6, 0xc9, 0x19, 0x23, 0x4a, 0x1f, 0x9a, 0xcb, 0xcf, 0xe3,
+	0x55, 0x37, 0x17, 0x12, 0x5b, 0xf8, 0x91, 0xa1, 0xbd, 0x43, 0xcc, 0x39,
+	0x6b, 0x8e, 0xd9, 0xc3, 0xe1, 0xd3, 0x39, 0xd5, 0xbd, 0xc7, 0x10, 0x0c,
+	0x7d, 0xbc, 0x60, 0x1a, 0x1f, 0x62, 0x19, 0xec, 0x5e, 0x26, 0x1f, 0xfb,
+	0xb7, 0x74, 0x06, 0xf5, 0x75, 0x29, 0x33, 0xf2, 0x4b, 0x6c, 0xa4, 0x2d,
+	0x0d, 0xfa, 0x44, 0xe4, 0xde, 0x50, 0xea, 0xc3, 0x33, 0x4f, 0x41, 0xab,
+	0x49, 0xad, 0xc5, 0x0a, 0xa3, 0x34, 0x13, 0xa9, 0xde, 0x39, 0x0d, 0xa8,
+	0xd8, 0x32, 0x1d, 0x4f, 0xec, 0xd0, 0xd0, 0x36, 0xc7, 0x45, 0x81, 0xe7,
+	0x9c, 0x8f, 0x17, 0x5b, 0x24, 0xb5, 0xfc, 0xcc, 0xd1, 0xa7, 0x89, 0x63,
+	0xa8, 0x72, 0xd4, 0x46, 0xe6, 0x92, 0x6f, 0x4c, 0x67, 0x9f, 0x13, 0xc5,
+	0xda, 0xfc, 0x02, 0x24, 0x76, 0xb8, 0x6e, 0xbc, 0xeb, 0x6e, 0x95, 0x33,
+	0x74, 0xac, 0x27, 0x8e, 0xb5, 0xc6, 0x3b, 0x2f, 0xee, 0xc6, 0x5d, 0x6a,
+	0xfc, 0xf6, 0x92, 0x5d, 0xd4, 0x20, 0x71, 0x2c, 0xbf, 0x6d, 0x2a, 0xe7,
+	0x77, 0xd8, 0xa7, 0x99, 0xbf, 0x9b, 0x88, 0x61, 0xda, 0xae, 0x2d, 0xca,
+	0x21, 0x86, 0x2d, 0x8d, 0x77, 0xf6, 0xee, 0x46, 0x56, 0xd9, 0x4d, 0xa2,
+	0x53, 0x23, 0x7c, 0xa3, 0x82, 0x63, 0xac, 0x75, 0xdd, 0xdc, 0x5b, 0x28,
+	0xe3, 0x54, 0x0b, 0x71, 0xea, 0xda, 0xbd, 0x53, 0xf9, 0x47, 0xff, 0x10,
+	0xa7, 0x9e, 0x67, 0x7c, 0xb5, 0xef, 0xed, 0xc0, 0xb5, 0xcc, 0xbb, 0xb6,
+	0xbd, 0x41, 0xf6, 0x58, 0x65, 0xbc, 0xd4, 0x88, 0x53, 0x37, 0x33, 0x37,
+	0x37, 0x11, 0xa7, 0x06, 0xe2, 0x31, 0xf6, 0x80, 0xb0, 0x57, 0xb3, 0x1f,
+	0x3c, 0x33, 0xbb, 0x82, 0x38, 0x25, 0x6b, 0x5c, 0xb7, 0x86, 0x36, 0xbb,
+	0xa5, 0xdb, 0xec, 0x18, 0x83, 0xf0, 0x77, 0x8f, 0x06, 0x4d, 0xd3, 0x3e,
+	0x40, 0x7c, 0x5a, 0x4f, 0x7c, 0xda, 0x47, 0x7c, 0xda, 0x9b, 0x9f, 0xc4,
+	0x23, 0xe9, 0x0b, 0x7e, 0x9b, 0x3f, 0xdc, 0x5a, 0x8d, 0x76, 0x3d, 0x4d,
+	0xac, 0xff, 0xa3, 0x64, 0xe7, 0x89, 0x53, 0xbe, 0x3f, 0x77, 0xa3, 0xb7,
+	0x97, 0xe2, 0x82, 0xfd, 0xdb, 0x0c, 0x1c, 0x4f, 0x2b, 0xbc, 0x66, 0x4a,
+	0x2e, 0xce, 0x40, 0x3c, 0xff, 0x36, 0x7d, 0xc3, 0x59, 0x86, 0x7d, 0xec,
+	0xfa, 0xcc, 0x2c, 0xe2, 0x9f, 0x21, 0xd8, 0x84, 0xdd, 0xd9, 0x47, 0xd1,
+	0xdf, 0xe8, 0xe3, 0x4c, 0x35, 0x9d, 0xcf, 0x98, 0x5b, 0xd6, 0x9b, 0x8c,
+	0x0d, 0x03, 0x1b, 0x18, 0x13, 0xd3, 0xcc, 0x7f, 0xc0, 0xcf, 0x8d, 0x00,
+	0x36, 0x65, 0x04, 0x4f, 0x7a, 0xf0, 0x3e, 0xf5, 0x38, 0x6d, 0x6a, 0x18,
+	0x6f, 0x34, 0x23, 0x03, 0x4a, 0x64, 0x83, 0x5e, 0xc7, 0xe7, 0x63, 0xf1,
+	0x98, 0xf1, 0x20, 0x75, 0xb9, 0x39, 0x4b, 0xdc, 0x66, 0x6e, 0xac, 0x8d,
+	0x17, 0x63, 0xbe, 0x52, 0xfd, 0x11, 0x1f, 0x96, 0x71, 0x11, 0xb8, 0x25,
+	0x54, 0xee, 0xc7, 0x4c, 0xeb, 0x2c, 0x6c, 0x57, 0x6c, 0x51, 0x9f, 0xfa,
+	0x8e, 0x51, 0x7e, 0x27, 0xb9, 0xfb, 0x86, 0x21, 0x75, 0x7a, 0x4d, 0x41,
+	0x62, 0x42, 0x31, 0x2e, 0xed, 0xed, 0x91, 0xf6, 0x62, 0xb6, 0x1e, 0x31,
+	0xa7, 0x8f, 0x4e, 0xcb, 0x16, 0x44, 0xee, 0xb7, 0xdc, 0x5c, 0x23, 0xdf,
+	0x97, 0x6a, 0x0a, 0xec, 0x0d, 0x69, 0xa8, 0xd7, 0xac, 0xbf, 0xa3, 0xdc,
+	0x7e, 0xb4, 0x76, 0x41, 0x67, 0xbc, 0x23, 0x4d, 0x4c, 0x09, 0x9b, 0x3f,
+	0x62, 0xde, 0xd5, 0x21, 0x9b, 0x28, 0xaf, 0x1b, 0xa4, 0xdc, 0x1a, 0xf1,
+	0x77, 0x38, 0xf4, 0xa5, 0x9b, 0xe8, 0x82, 0xbd, 0x91, 0xfb, 0x6a, 0x38,
+	0x2b, 0xd8, 0x77, 0x18, 0x25, 0x5b, 0x9d, 0xb7, 0x5e, 0x45, 0x91, 0xef,
+	0x5a, 0xcc, 0x0e, 0x3c, 0x9d, 0xf9, 0xc8, 0x57, 0x3f, 0x4b, 0x61, 0x7c,
+	0x91, 0xe9, 0xb4, 0x68, 0x50, 0xe7, 0xac, 0x46, 0x44, 0x43, 0x0a, 0x7a,
+	0xd7, 0x0c, 0xca, 0xf8, 0x25, 0x75, 0x0f, 0x48, 0x3c, 0x3b, 0x15, 0xf4,
+	0xf5, 0xfe, 0x64, 0x03, 0x56, 0x0f, 0xb9, 0x38, 0x35, 0xdb, 0x8f, 0x15,
+	0xa6, 0x7c, 0x5b, 0x32, 0x1d, 0x9f, 0x56, 0x8c, 0xd5, 0x40, 0x63, 0xee,
+	0xc6, 0xad, 0x2e, 0xcd, 0x75, 0xdb, 0xba, 0x44, 0xff, 0xe9, 0x58, 0xbf,
+	0xe3, 0x5a, 0x17, 0x61, 0xd1, 0x5f, 0x78, 0x09, 0x16, 0xf9, 0x11, 0xe1,
+	0x8c, 0x1b, 0xa4, 0x3d, 0x83, 0xdf, 0xac, 0x95, 0x75, 0xb2, 0x5e, 0xe6,
+	0xf8, 0x09, 0xb7, 0x9e, 0xfc, 0xea, 0xb5, 0x2b, 0x2e, 0xed, 0x93, 0xf5,
+	0x11, 0x17, 0xb7, 0x4b, 0x8e, 0xca, 0x7a, 0xd1, 0x53, 0x21, 0x7c, 0xe7,
+	0xe5, 0xfb, 0xa0, 0xfc, 0xa6, 0xe8, 0x61, 0x6e, 0x6c, 0xd1, 0xea, 0xdc,
+	0x68, 0x69, 0xdf, 0x39, 0xa3, 0xdc, 0x47, 0x3e, 0x83, 0x47, 0x0d, 0xa9,
+	0x0f, 0x0a, 0x63, 0x9c, 0xef, 0x34, 0xf3, 0x55, 0x0c, 0x87, 0x6c, 0x7c,
+	0xc0, 0x5e, 0xfe, 0xe5, 0xac, 0xf4, 0xf3, 0xab, 0xd1, 0xd3, 0x60, 0xe3,
+	0x1c, 0xf3, 0x6d, 0x4f, 0x5a, 0xf8, 0xc9, 0xb7, 0x03, 0xe1, 0x29, 0x3e,
+	0x8c, 0xd9, 0xf2, 0xad, 0x07, 0xea, 0xb7, 0xc5, 0x22, 0x54, 0xfd, 0x9c,
+	0x80, 0xf4, 0x0a, 0xda, 0xc9, 0xc4, 0x99, 0x89, 0x5c, 0x09, 0x83, 0x74,
+	0x27, 0xc2, 0x1e, 0x23, 0xbc, 0xe3, 0x9b, 0x7c, 0x76, 0x17, 0x74, 0x49,
+	0x9f, 0x51, 0xee, 0x5b, 0x1e, 0x66, 0x2e, 0x47, 0x2b, 0x1d, 0xb5, 0x82,
+	0xb9, 0x6c, 0x8f, 0x6d, 0x2e, 0xe1, 0x73, 0x7d, 0x2a, 0x8c, 0xeb, 0xe3,
+	0x9d, 0x27, 0xa6, 0x29, 0x62, 0x5e, 0x83, 0x8f, 0xf6, 0x81, 0x7a, 0x80,
+	0xb9, 0xbb, 0xe9, 0xb2, 0xdc, 0x5d, 0xca, 0xdc, 0x9d, 0xb7, 0x6b, 0x2f,
+	0x4a, 0xb9, 0x6b, 0x76, 0x2e, 0xf7, 0xa9, 0x51, 0xe4, 0x9a, 0x26, 0x5c,
+	0xf9, 0xf6, 0x38, 0x9a, 0x94, 0xfe, 0xa3, 0x9c, 0xb7, 0xcc, 0xb5, 0xa3,
+	0x61, 0xda, 0xf0, 0x85, 0x52, 0x6e, 0x05, 0xf1, 0xec, 0xc8, 0x54, 0xfe,
+	0xb1, 0x56, 0xb2, 0xe6, 0x1f, 0x1c, 0x31, 0xb0, 0xf7, 0x9b, 0xba, 0x3f,
+	0x19, 0x9b, 0x22, 0x17, 0xd4, 0x00, 0xd7, 0xee, 0xdc, 0x0a, 0xbd, 0x25,
+	0xf5, 0x33, 0x5c, 0x97, 0xe1, 0x7c, 0xc4, 0xde, 0xe2, 0xbd, 0xd9, 0x0a,
+	0x89, 0xd2, 0x77, 0x91, 0x9f, 0x21, 0x91, 0x17, 0xbb, 0xf8, 0x38, 0xf3,
+	0x4f, 0xee, 0xd3, 0x58, 0x2e, 0xee, 0xc2, 0x1b, 0x86, 0xc4, 0x3f, 0xd8,
+	0x9f, 0xfe, 0x04, 0x4b, 0xd3, 0xe2, 0xdb, 0xef, 0xe1, 0x21, 0xe6, 0xcf,
+	0x3f, 0xcf, 0xf8, 0xca, 0xfd, 0x17, 0xd3, 0x8f, 0xde, 0x99, 0x31, 0xce,
+	0x43, 0xe2, 0x5b, 0x8d, 0xf6, 0xbe, 0x02, 0xab, 0xf8, 0xee, 0xdf, 0x67,
+	0x5c, 0x74, 0x7f, 0xce, 0x77, 0xe7, 0x66, 0xcd, 0x76, 0xa3, 0x4d, 0xf2,
+	0x0e, 0xda, 0x87, 0xf4, 0x41, 0xff, 0xa2, 0x62, 0xac, 0x12, 0xd7, 0xa0,
+	0xb8, 0x58, 0xf2, 0x48, 0x7e, 0xcb, 0xf5, 0x2f, 0x79, 0x9e, 0xd8, 0x51,
+	0xbe, 0xef, 0x99, 0x90, 0xef, 0x7b, 0x56, 0xe2, 0xf3, 0x09, 0xdc, 0x26,
+	0x32, 0x88, 0xcf, 0x26, 0xf3, 0x4d, 0xf8, 0x4c, 0xca, 0xf6, 0x4c, 0x69,
+	0x4f, 0xd8, 0x3c, 0xe3, 0x46, 0x1b, 0xe4, 0x2c, 0x79, 0x77, 0x39, 0xaf,
+	0x3c, 0xaf, 0x12, 0xeb, 0x6b, 0xdc, 0xe8, 0x22, 0xf1, 0xbd, 0xf4, 0xac,
+	0xbf, 0xc7, 0x9e, 0xf5, 0xaf, 0xdc, 0x9c, 0xc1, 0x58, 0x35, 0x2f, 0x94,
+	0xf9, 0x28, 0xe1, 0xab, 0xd0, 0xd6, 0x25, 0xd8, 0x20, 0x7a, 0x2e, 0xe4,
+	0x80, 0x23, 0x72, 0x95, 0xf0, 0x95, 0x7e, 0xf6, 0xf1, 0x0c, 0x47, 0x19,
+	0x73, 0x6b, 0x11, 0x1e, 0x9e, 0x19, 0x92, 0x6f, 0x3c, 0x3a, 0xeb, 0xcd,
+	0xee, 0xac, 0xe0, 0xd1, 0x4a, 0xf7, 0xe1, 0x12, 0x2f, 0x8d, 0x33, 0x81,
+	0x1f, 0xf7, 0xf5, 0xda, 0x38, 0x63, 0x5d, 0xce, 0xfb, 0x6b, 0xb7, 0xd8,
+	0x2b, 0xf7, 0x70, 0x02, 0xb4, 0xff, 0xa6, 0x6e, 0x03, 0x4b, 0xb7, 0x69,
+	0x18, 0x61, 0x6f, 0xba, 0xda, 0x5a, 0xe2, 0xee, 0xec, 0x95, 0x35, 0xeb,
+	0xc2, 0xa5, 0xef, 0xde, 0xe6, 0x47, 0xbe, 0x7d, 0x33, 0x38, 0xe4, 0x87,
+	0x24, 0xa6, 0xaf, 0x0b, 0x97, 0x7b, 0x76, 0x89, 0x13, 0xf6, 0xb6, 0xdd,
+	0xb5, 0xb8, 0x75, 0xd7, 0x95, 0xf2, 0x8c, 0xbe, 0x1f, 0x76, 0xc7, 0x43,
+	0xdf, 0xb6, 0xdb, 0x28, 0xaf, 0x51, 0xca, 0x73, 0xdc, 0xb5, 0x43, 0x93,
+	0xf5, 0xc6, 0x40, 0xfd, 0x76, 0x0d, 0x07, 0xb6, 0xba, 0xf5, 0x67, 0x13,
+	0x45, 0xf7, 0x44, 0x69, 0xb6, 0x3c, 0x13, 0x92, 0xb3, 0x5e, 0xce, 0x0a,
+	0x8e, 0xf6, 0x10, 0x47, 0x5d, 0xf7, 0x18, 0x65, 0x2f, 0x12, 0xf7, 0xd6,
+	0xfd, 0x1a, 0xee, 0x1d, 0xfe, 0x9f, 0x4a, 0xbe, 0x05, 0xbc, 0xad, 0xf2,
+	0x4c, 0xf3, 0xfd, 0x75, 0xb1, 0xe5, 0x6b, 0x8e, 0x1d, 0xdb, 0xc8, 0x10,
+	0x12, 0x29, 0x3a, 0xb2, 0x05, 0x36, 0x44, 0x72, 0x1c, 0x30, 0x1d, 0xef,
+	0x46, 0x93, 0x04, 0x30, 0xd7, 0x3a, 0x69, 0x68, 0x43, 0x37, 0x33, 0xd5,
+	0xe4, 0x02, 0x21, 0x4d, 0x21, 0xa5, 0x61, 0xc6, 0x7d, 0xb6, 0x3b, 0x3e,
+	0x75, 0x9c, 0xc4, 0x10, 0x59, 0x92, 0x9d, 0xc4, 0x09, 0xb3, 0xbb, 0x83,
+	0x62, 0x3b, 0x4e, 0x02, 0xb2, 0x0d, 0x0c, 0x43, 0xc3, 0x3c, 0x6c, 0xe3,
+	0x21, 0x04, 0xcc, 0x9d, 0x76, 0x4d, 0x09, 0x3b, 0x6d, 0xf1, 0x40, 0x12,
+	0x08, 0x0d, 0x97, 0x61, 0xba, 0xad, 0xd3, 0x12, 0x9f, 0x7d, 0xbf, 0x73,
+	0xa4, 0x5c, 0x5a, 0x66, 0xe6, 0x59, 0x3f, 0x8f, 0x1f, 0x49, 0xe7, 0xf2,
+	0x5f, 0xbe, 0xeb, 0xfb, 0xfe, 0xff, 0x77, 0x4e, 0x99, 0xc5, 0x3b, 0x52,
+	0x92, 0x3b, 0xa6, 0xcd, 0x52, 0xbd, 0x5e, 0xe4, 0x19, 0xfa, 0x44, 0x89,
+	0x3d, 0x5e, 0x5a, 0x2e, 0xdf, 0x0f, 0x60, 0x3c, 0xbb, 0xae, 0xdc, 0x28,
+	0x98, 0x31, 0xa6, 0x91, 0xdb, 0xfc, 0x98, 0x79, 0xf1, 0x47, 0xa3, 0x21,
+	0x3c, 0xcd, 0xb8, 0xf6, 0xf7, 0xc4, 0x28, 0x4f, 0x8d, 0xce, 0x22, 0xd7,
+	0xcd, 0x61, 0x1a, 0xb4, 0x96, 0x26, 0xda, 0xe9, 0xff, 0x82, 0x1d, 0xf5,
+	0x75, 0x6f, 0xa8, 0xe2, 0xa6, 0xcc, 0x02, 0x59, 0x43, 0x47, 0x6b, 0xf1,
+	0x88, 0x07, 0xaf, 0x64, 0xc4, 0x0e, 0x7d, 0xf0, 0x65, 0xaa, 0xbd, 0x76,
+	0xfc, 0xa4, 0x8b, 0x37, 0x2f, 0x35, 0x6e, 0x5a, 0x50, 0x15, 0xcb, 0x6b,
+	0xfe, 0xc1, 0xd7, 0x0a, 0x46, 0x80, 0x17, 0xe3, 0x15, 0x31, 0x4f, 0x73,
+	0x1a, 0x6e, 0x62, 0x64, 0x27, 0xb1, 0xc7, 0xfb, 0xf8, 0xda, 0xd7, 0x1c,
+	0xcd, 0xcf, 0xcd, 0x71, 0x23, 0x0f, 0x1d, 0x15, 0xf8, 0xc1, 0xd1, 0x46,
+	0x23, 0xed, 0x84, 0x7f, 0xcf, 0x56, 0xc6, 0x91, 0xfb, 0x13, 0x84, 0xd9,
+	0xcd, 0xfe, 0xd0, 0x52, 0xc7, 0x0f, 0x70, 0x38, 0xde, 0x86, 0xfe, 0x38,
+	0x62, 0xb3, 0x9b, 0x7d, 0xbe, 0xe7, 0xaf, 0x15, 0x5b, 0xe8, 0xea, 0xdd,
+	0xa7, 0x7b, 0x19, 0x97, 0x67, 0xe1, 0x91, 0xd1, 0x5f, 0x90, 0xd7, 0x14,
+	0xd2, 0xee, 0x15, 0xf1, 0x4f, 0xb4, 0xef, 0x3a, 0xcb, 0x1f, 0x7e, 0x1e,
+	0xb9, 0x2e, 0xf3, 0x0b, 0x02, 0x24, 0xc1, 0xba, 0x1e, 0xcf, 0xdb, 0xc4,
+	0xb5, 0x5e, 0xbd, 0xe0, 0x1b, 0x95, 0xcd, 0xfa, 0xe3, 0x53, 0x8e, 0xff,
+	0xeb, 0x78, 0x8b, 0x18, 0xc6, 0xa5, 0xd7, 0x5b, 0x38, 0xb8, 0x82, 0x79,
+	0x74, 0xf7, 0x35, 0xca, 0x33, 0xbb, 0x79, 0x49, 0xdf, 0x2f, 0x19, 0x2f,
+	0x76, 0x5c, 0x03, 0xa4, 0x12, 0x4e, 0xb8, 0x1b, 0xce, 0x5a, 0xb6, 0x96,
+	0xdf, 0xd0, 0x45, 0x4e, 0xe1, 0x40, 0x5e, 0x43, 0x08, 0xdf, 0x4d, 0x88,
+	0x0e, 0x7d, 0xe8, 0x19, 0x71, 0x61, 0x2d, 0x43, 0xc3, 0x5d, 0x09, 0x7f,
+	0x53, 0x1a, 0xfe, 0xe8, 0x18, 0x0e, 0xa9, 0xcd, 0x8c, 0x1b, 0x31, 0x97,
+	0x06, 0xc1, 0x2f, 0xc4, 0xe8, 0x2d, 0x8f, 0xf1, 0xd8, 0x43, 0x99, 0x49,
+	0xf8, 0xee, 0x10, 0x5c, 0x57, 0x8a, 0x07, 0xfa, 0xe0, 0x29, 0xe7, 0xbd,
+	0xcb, 0x12, 0x88, 0x66, 0x18, 0x2f, 0x46, 0x19, 0x67, 0x6f, 0xaf, 0x71,
+	0xe1, 0xe3, 0xa0, 0x2d, 0xb7, 0xab, 0x33, 0x1f, 0x12, 0xf3, 0x86, 0xd0,
+	0x4d, 0xb9, 0x13, 0xff, 0x3c, 0x7e, 0x08, 0x44, 0x66, 0xcc, 0xdf, 0xcf,
+	0x84, 0xcd, 0xc3, 0x1e, 0xe2, 0xc2, 0x03, 0x14, 0xe8, 0x78, 0xa3, 0x8d,
+	0x0b, 0x4f, 0x12, 0x2d, 0x8d, 0x69, 0x87, 0x4d, 0xb1, 0x5b, 0xca, 0x31,
+	0xf4, 0x3e, 0x7d, 0x37, 0xad, 0xe9, 0x5a, 0x81, 0x8a, 0xc2, 0xb1, 0x00,
+	0xea, 0x23, 0xc1, 0x99, 0x65, 0x82, 0xfd, 0xea, 0x99, 0x27, 0xf3, 0x29,
+	0x48, 0x1f, 0x88, 0x75, 0x62, 0x1f, 0xd3, 0x2f, 0x0c, 0x1e, 0x9f, 0xd1,
+	0xac, 0x6f, 0xfc, 0x14, 0xd7, 0x39, 0xc6, 0xca, 0x44, 0x4f, 0xb3, 0xb1,
+	0xae, 0x6f, 0x16, 0xda, 0xfa, 0x4c, 0xb3, 0x32, 0x82, 0xa7, 0xbc, 0x08,
+	0xa6, 0x9e, 0x76, 0x14, 0xa3, 0x97, 0x78, 0xef, 0x4c, 0x98, 0x9c, 0x6b,
+	0xa6, 0x42, 0x25, 0xf1, 0x9e, 0x19, 0x2e, 0xc4, 0xe4, 0x25, 0xd0, 0xc8,
+	0x5b, 0xb4, 0xe3, 0xc4, 0xad, 0xc4, 0x93, 0xc5, 0xc4, 0x0c, 0x45, 0xf4,
+	0x79, 0xef, 0x47, 0xb4, 0xe7, 0xe0, 0x82, 0xba, 0xf0, 0x00, 0xe3, 0x2e,
+	0x31, 0x9c, 0xfa, 0x38, 0x2c, 0x79, 0x8f, 0x18, 0xab, 0xdb, 0xcd, 0x7b,
+	0x15, 0xb6, 0x07, 0xed, 0x7c, 0x5f, 0x97, 0x91, 0x73, 0x45, 0x90, 0x38,
+	0xec, 0xce, 0x62, 0xc3, 0x11, 0x62, 0xc3, 0xb1, 0x3b, 0xe4, 0xb7, 0x9a,
+	0x53, 0x45, 0x2c, 0xf9, 0x1b, 0xce, 0x73, 0x46, 0xf3, 0xeb, 0x8a, 0x9e,
+	0x6c, 0xad, 0x43, 0x12, 0xa3, 0x86, 0x4f, 0x60, 0xd4, 0xc2, 0x86, 0xf4,
+	0x43, 0xcf, 0x1c, 0xc6, 0x18, 0x93, 0x38, 0xe0, 0xd4, 0xfc, 0xef, 0x5a,
+	0x98, 0xd2, 0xa9, 0xdb, 0xf1, 0x9e, 0xe3, 0x91, 0x35, 0x73, 0xfa, 0x37,
+	0x94, 0x77, 0x81, 0x8e, 0x19, 0x49, 0x5f, 0xcc, 0xdd, 0x5c, 0x81, 0xd1,
+	0x8c, 0x95, 0xca, 0xe5, 0x5c, 0xb4, 0xba, 0xb9, 0x49, 0xbd, 0x63, 0xfd,
+	0xe6, 0xbc, 0x96, 0x89, 0x4e, 0xa3, 0xaa, 0xae, 0xc6, 0x40, 0x7d, 0x8d,
+	0x41, 0x1f, 0xd1, 0x7d, 0xf7, 0x2a, 0x7d, 0x5d, 0x42, 0x45, 0xab, 0x4b,
+	0xd0, 0x8e, 0x87, 0x22, 0xd1, 0x83, 0x2e, 0x7e, 0xde, 0x1f, 0x21, 0xcc,
+	0x6d, 0x76, 0xe0, 0xb9, 0x6b, 0x82, 0x2d, 0xeb, 0x11, 0x6c, 0x7a, 0xd2,
+	0x11, 0xec, 0x7a, 0x0f, 0xc1, 0xa9, 0xb9, 0x2a, 0xec, 0x79, 0x37, 0x13,
+	0xf6, 0xfc, 0x24, 0x23, 0xed, 0xdc, 0x6f, 0x72, 0x7c, 0x8c, 0x37, 0x51,
+	0xe5, 0xbe, 0x16, 0x38, 0x10, 0x8f, 0x42, 0xa3, 0xcc, 0x3c, 0xc4, 0x61,
+	0xa3, 0xa9, 0x8d, 0x78, 0x3f, 0x32, 0x81, 0x8d, 0xda, 0x9f, 0xe2, 0xfb,
+	0x21, 0x0f, 0x7c, 0x5f, 0x8b, 0xc1, 0xad, 0x8b, 0xbf, 0x97, 0xe2, 0xbb,
+	0x54, 0x53, 0x61, 0xb3, 0xec, 0xd9, 0xb4, 0xa9, 0x2b, 0x87, 0x5d, 0x33,
+	0xed, 0xb8, 0xf1, 0x7b, 0x73, 0x6d, 0x85, 0x1c, 0xff, 0xdd, 0x9c, 0x2c,
+	0x0e, 0xf9, 0x92, 0x6b, 0x0a, 0x70, 0x90, 0xbe, 0x3d, 0x87, 0xbc, 0x66,
+	0x7f, 0xdc, 0x44, 0x28, 0xf2, 0xa4, 0x9a, 0x53, 0xf6, 0x3b, 0xd3, 0x19,
+	0xcc, 0xc3, 0xfd, 0xf5, 0xbc, 0xb9, 0x1c, 0xd6, 0x9e, 0xc2, 0xc1, 0x78,
+	0xa1, 0xc4, 0x2b, 0xb8, 0x23, 0x8e, 0x3f, 0x2f, 0xa0, 0x8c, 0xd6, 0x5f,
+	0x65, 0x9a, 0x5b, 0x89, 0x7f, 0x04, 0x53, 0xde, 0x1d, 0x74, 0x22, 0x5f,
+	0x2f, 0x40, 0xb1, 0xfe, 0x3b, 0x95, 0xd1, 0x0a, 0x31, 0x1c, 0xfa, 0xa5,
+	0x4a, 0x97, 0x15, 0x72, 0xdc, 0x1e, 0xc6, 0xad, 0x10, 0x46, 0xb4, 0x31,
+	0xb2, 0x58, 0x7f, 0xd3, 0x98, 0x25, 0xbb, 0x43, 0xea, 0x2d, 0xda, 0x77,
+	0x9a, 0x79, 0xf1, 0xa7, 0xb4, 0xc1, 0x1b, 0x47, 0xa2, 0xea, 0x95, 0x46,
+	0x0f, 0xee, 0xed, 0x71, 0x50, 0xfe, 0x32, 0x3e, 0x13, 0xcf, 0x47, 0xb0,
+	0xde, 0x85, 0x60, 0xec, 0x80, 0xf2, 0xe0, 0xd6, 0x21, 0x72, 0xe9, 0xfe,
+	0x42, 0xac, 0xda, 0x05, 0xcd, 0x63, 0x8d, 0x5d, 0xc3, 0xa2, 0x21, 0xf6,
+	0xd9, 0xad, 0xf3, 0xde, 0x43, 0x6a, 0x3c, 0x73, 0xe1, 0x5c, 0x60, 0x70,
+	0x7e, 0x6a, 0x09, 0xb1, 0xec, 0x66, 0xe6, 0x37, 0x07, 0x73, 0xd9, 0xa2,
+	0xb8, 0x9d, 0xdf, 0xd6, 0x32, 0x1e, 0xdf, 0xa1, 0xdb, 0xf9, 0x6d, 0xc1,
+	0xb9, 0xfc, 0xb6, 0x71, 0x66, 0x36, 0xbf, 0x35, 0x14, 0xc0, 0xc4, 0x3b,
+	0xd6, 0xba, 0xdf, 0x5b, 0x66, 0xd3, 0x25, 0x32, 0x5e, 0xfa, 0x26, 0x31,
+	0xf2, 0xdc, 0x1a, 0x1f, 0x6d, 0x7f, 0x5c, 0xae, 0xe3, 0xf8, 0x75, 0xdf,
+	0x2b, 0xec, 0x64, 0x0b, 0x75, 0x61, 0x10, 0x93, 0x6d, 0x1d, 0x35, 0xb7,
+	0x95, 0xe8, 0x7a, 0xec, 0x35, 0xca, 0xc3, 0xa8, 0x8c, 0x91, 0x43, 0xe9,
+	0xe1, 0x11, 0xb8, 0xc5, 0xbe, 0xf8, 0xb7, 0xa8, 0xc4, 0x96, 0xf9, 0x77,
+	0xb3, 0x63, 0x73, 0x57, 0x5d, 0xfc, 0x5b, 0xfc, 0x71, 0x0e, 0xf1, 0xac,
+	0xb4, 0xe7, 0x03, 0x71, 0xee, 0x54, 0x3f, 0x2e, 0x33, 0x27, 0xad, 0xdf,
+	0xa6, 0x99, 0x4f, 0x0c, 0x7d, 0x9c, 0x5c, 0x7f, 0x10, 0x75, 0x72, 0xbd,
+	0x31, 0xde, 0x48, 0x30, 0x56, 0x28, 0x7e, 0x29, 0x9c, 0xe7, 0x9b, 0xcc,
+	0x9f, 0x36, 0xf7, 0xe8, 0x26, 0xf7, 0x60, 0xbf, 0xde, 0x4f, 0xf0, 0x00,
+	0x7d, 0xc1, 0xe6, 0x1e, 0x9f, 0x86, 0xbf, 0x87, 0x49, 0x72, 0x8f, 0x3d,
+	0xe4, 0x1e, 0xe5, 0xe4, 0xb7, 0xf7, 0xdb, 0xf6, 0xac, 0xde, 0x61, 0x13,
+	0xa1, 0x1d, 0x36, 0x56, 0x19, 0x22, 0xf7, 0xf0, 0x12, 0xc3, 0x57, 0xd5,
+	0x8e, 0x55, 0x57, 0x65, 0xb9, 0xc7, 0x16, 0xd1, 0x8b, 0xeb, 0x3c, 0xf7,
+	0xa8, 0xcc, 0x72, 0x8f, 0xc3, 0x7d, 0x82, 0x0f, 0x9e, 0xbd, 0x90, 0x7b,
+	0x68, 0x03, 0x78, 0x46, 0x45, 0x5b, 0x2f, 0xe6, 0x1e, 0x45, 0x59, 0xfc,
+	0xf2, 0x10, 0xf1, 0x4b, 0xd1, 0xde, 0x7f, 0xb0, 0xb8, 0xc7, 0xe2, 0x60,
+	0xdd, 0xc6, 0x01, 0xc6, 0xaf, 0x31, 0xda, 0x49, 0x5f, 0x32, 0xc7, 0x3f,
+	0x14, 0x4e, 0x5c, 0xc0, 0x3d, 0x2a, 0xa9, 0xaf, 0x83, 0x43, 0xc4, 0x2e,
+	0x43, 0x36, 0xf7, 0x38, 0xcc, 0x98, 0xb3, 0x7f, 0x28, 0x84, 0x83, 0xcc,
+	0x05, 0x43, 0x43, 0x33, 0x30, 0x39, 0xd3, 0xe6, 0x93, 0xc5, 0xe4, 0x1e,
+	0xdb, 0x77, 0x7d, 0x61, 0xae, 0xe7, 0xb8, 0x97, 0x64, 0xb9, 0xc7, 0x2a,
+	0xe6, 0xae, 0x1b, 0xc2, 0xf6, 0x1a, 0x49, 0x15, 0xf5, 0x5c, 0x4a, 0xb9,
+	0xbd, 0x76, 0x8e, 0x7b, 0xc8, 0x7d, 0x72, 0x5c, 0x4f, 0x3d, 0x4d, 0x8c,
+	0x74, 0x62, 0x41, 0x0d, 0x9e, 0xbc, 0x80, 0x7f, 0x7c, 0x30, 0x9c, 0xd3,
+	0xff, 0x9f, 0x55, 0xfd, 0xdb, 0xfe, 0x21, 0xb8, 0xbc, 0xf6, 0x02, 0x3e,
+	0xb1, 0x89, 0xd8, 0xdb, 0xc9, 0x3c, 0xaf, 0xd4, 0x3d, 0x59, 0xbc, 0x39,
+	0x42, 0xbc, 0x59, 0xa2, 0x2f, 0x52, 0xaf, 0x11, 0x6f, 0x7e, 0x4a, 0x1b,
+	0x3a, 0x48, 0x4c, 0x30, 0x87, 0xfe, 0xb0, 0x90, 0xbf, 0xdf, 0xfb, 0x12,
+	0xbc, 0x39, 0x64, 0xe1, 0xcd, 0x6c, 0xdf, 0x8a, 0x9c, 0xbb, 0xd5, 0xc6,
+	0x25, 0xf9, 0xc4, 0x25, 0x1f, 0xa4, 0x7e, 0x6d, 0x4e, 0x5a, 0x58, 0x22,
+	0x77, 0x5e, 0xf4, 0xa8, 0x18, 0xab, 0xa2, 0x7d, 0x66, 0xed, 0xd8, 0xb8,
+	0x97, 0x39, 0x62, 0x21, 0x1d, 0xa5, 0xcb, 0xe2, 0x0b, 0xff, 0x64, 0xf1,
+	0x85, 0x3d, 0x17, 0xf1, 0x85, 0x6d, 0x16, 0x5f, 0x78, 0xec, 0x02, 0xbe,
+	0x50, 0xa5, 0x3b, 0x11, 0xab, 0x2c, 0x41, 0x6f, 0xc4, 0xc1, 0xef, 0xf6,
+	0xb5, 0x09, 0xca, 0xad, 0xa4, 0x71, 0x26, 0xc7, 0xfc, 0x7b, 0xf3, 0xef,
+	0xc9, 0x19, 0xf6, 0xf0, 0xde, 0x19, 0xc4, 0x80, 0x93, 0xe4, 0x0c, 0x95,
+	0xf4, 0x93, 0x0f, 0xc3, 0x4d, 0xc4, 0xab, 0xbf, 0x67, 0x5e, 0x08, 0xe1,
+	0x11, 0x72, 0x86, 0x33, 0xe4, 0x0c, 0xbe, 0xaf, 0xe9, 0xa9, 0x9b, 0x1c,
+	0xb2, 0x06, 0xc0, 0xb8, 0xc0, 0x31, 0x7e, 0xcb, 0xe2, 0x0c, 0xa5, 0x2a,
+	0xc7, 0x19, 0x84, 0x1f, 0x6e, 0xa5, 0x8d, 0x1d, 0x4d, 0x99, 0x78, 0x94,
+	0xf3, 0x5e, 0x6c, 0xf1, 0xa4, 0x69, 0xc1, 0xeb, 0xa9, 0x3b, 0x1d, 0x8c,
+	0x15, 0xe4, 0x01, 0x4f, 0x93, 0x07, 0x0c, 0x9d, 0xe3, 0x0c, 0x03, 0xd3,
+	0xd1, 0x2c, 0x67, 0xf8, 0x16, 0x39, 0xc3, 0xe4, 0x4c, 0x17, 0x6e, 0x6c,
+	0x90, 0xf5, 0x64, 0x07, 0x6e, 0x3a, 0x77, 0xed, 0xc5, 0x9c, 0xc1, 0xc1,
+	0xb6, 0x16, 0x39, 0x76, 0x65, 0xef, 0x93, 0xeb, 0x7b, 0xa7, 0x27, 0x5b,
+	0x6d, 0xce, 0xf0, 0xb4, 0x43, 0xe6, 0xaa, 0xf0, 0xf5, 0xaf, 0x5f, 0x78,
+	0x9f, 0xcd, 0x19, 0xc8, 0x5d, 0x0e, 0x2c, 0x76, 0x6c, 0x9b, 0x4e, 0x5b,
+	0xf7, 0x89, 0x6c, 0xe5, 0x9e, 0x67, 0x2a, 0xe8, 0x53, 0x9c, 0xd3, 0xa8,
+	0x29, 0xdc, 0xf0, 0x44, 0xf8, 0x12, 0x4b, 0xcf, 0xc2, 0x0d, 0x9d, 0x7a,
+	0x05, 0x8e, 0x10, 0xbf, 0x76, 0x26, 0xcf, 0x63, 0xa4, 0x97, 0x6d, 0x8c,
+	0xa4, 0x3d, 0x04, 0xa9, 0x53, 0x80, 0xa7, 0x94, 0xc7, 0x5f, 0x0f, 0xfa,
+	0xd7, 0xdd, 0xce, 0x71, 0x64, 0x7a, 0x6c, 0x6e, 0xb8, 0x9d, 0x73, 0x2e,
+	0xca, 0x72, 0xc3, 0xa1, 0x73, 0xdc, 0xf0, 0x5c, 0x9c, 0xc1, 0x0c, 0xbd,
+	0x0b, 0x6f, 0x50, 0x76, 0xd4, 0x43, 0x16, 0x47, 0x77, 0xe3, 0x2f, 0x2d,
+	0x5c, 0xfd, 0x85, 0xf9, 0x0e, 0x73, 0x70, 0x68, 0xde, 0x6a, 0xa0, 0xd2,
+	0xc6, 0xd0, 0x73, 0xf4, 0x3f, 0x43, 0x3b, 0xc7, 0xf0, 0x12, 0x31, 0xf4,
+	0x11, 0x9e, 0x5b, 0x55, 0x7f, 0xca, 0x8c, 0x56, 0xd8, 0x18, 0xfa, 0x23,
+	0xca, 0x37, 0x6a, 0x61, 0x68, 0xf7, 0x1f, 0x60, 0x68, 0x57, 0xa5, 0x60,
+	0x41, 0xbb, 0x6f, 0x85, 0xa1, 0x73, 0x78, 0xd6, 0x57, 0x69, 0xe3, 0x59,
+	0x62, 0x0a, 0xda, 0xc5, 0xcd, 0xc4, 0xd6, 0xcb, 0x22, 0x8b, 0xa7, 0xa3,
+	0x17, 0x60, 0xeb, 0xa1, 0x73, 0xd8, 0x3a, 0x37, 0xde, 0x62, 0xe6, 0x73,
+	0x38, 0xbc, 0x91, 0xc8, 0x34, 0xbe, 0x21, 0xf9, 0xd3, 0x63, 0xcc, 0x21,
+	0xdf, 0x39, 0xb3, 0xfb, 0x5c, 0x0c, 0x31, 0x43, 0xf3, 0xcf, 0xf3, 0x9d,
+	0x07, 0xac, 0xb8, 0x2e, 0x76, 0x60, 0xaf, 0x85, 0x46, 0x33, 0x4f, 0xd3,
+	0x86, 0x9c, 0x8c, 0xa9, 0xe5, 0xb8, 0x32, 0x58, 0xe7, 0x2d, 0x54, 0x4f,
+	0x66, 0x6b, 0x45, 0x7c, 0xb8, 0xaf, 0x0f, 0x46, 0x69, 0xb3, 0xbd, 0xe6,
+	0x7a, 0x3a, 0x62, 0xa8, 0x97, 0x17, 0x20, 0xfa, 0xab, 0xb0, 0xac, 0xbb,
+	0x3e, 0x4e, 0x8c, 0x61, 0xad, 0xbb, 0xa6, 0x9c, 0x6a, 0x04, 0xd1, 0xaa,
+	0x69, 0xb3, 0xea, 0x22, 0xde, 0x63, 0x1e, 0xa6, 0x3d, 0x45, 0x9f, 0xa1,
+	0x60, 0x4f, 0x31, 0x66, 0x9c, 0x1a, 0xf2, 0xe0, 0xe4, 0x50, 0x0d, 0x3e,
+	0x1c, 0xd2, 0xf0, 0xc1, 0x50, 0x96, 0xef, 0x8c, 0xe4, 0xc6, 0x6f, 0xc7,
+	0xb5, 0x8e, 0xec, 0xda, 0x70, 0x5f, 0xe3, 0x2c, 0xb1, 0x6d, 0xbc, 0x38,
+	0x52, 0x84, 0xb7, 0xfa, 0x73, 0xdc, 0xe8, 0xcb, 0x7c, 0x7e, 0x90, 0x5c,
+	0x41, 0x64, 0x9e, 0xe3, 0x12, 0x39, 0x99, 0x5e, 0xc8, 0xe7, 0x6f, 0x98,
+	0x69, 0xf3, 0x79, 0x9b, 0x03, 0x54, 0xea, 0x45, 0xe6, 0x03, 0x59, 0x0e,
+	0x90, 0x47, 0x5d, 0xdd, 0xa5, 0x89, 0xef, 0x5f, 0xe8, 0xc7, 0x67, 0xe9,
+	0xe7, 0x17, 0x73, 0x80, 0xf5, 0x59, 0x0e, 0xb0, 0x38, 0xf2, 0xcf, 0x67,
+	0x37, 0x5b, 0x1c, 0x60, 0x4b, 0xa5, 0xcd, 0x01, 0x44, 0x5f, 0x9f, 0x3a,
+	0x9f, 0xac, 0xff, 0xa7, 0xb3, 0xd1, 0x72, 0xb1, 0xd3, 0xf3, 0x9c, 0xab,
+	0x4a, 0xff, 0x4b, 0xf3, 0x2f, 0x2b, 0xc4, 0x56, 0x8a, 0x71, 0xac, 0xfe,
+	0x7e, 0x13, 0x33, 0xff, 0x50, 0xef, 0xd7, 0xe2, 0x71, 0xad, 0x88, 0x76,
+	0x16, 0x98, 0x1e, 0xad, 0x90, 0x3c, 0x66, 0xa2, 0x26, 0x82, 0xaf, 0xe7,
+	0xc1, 0x79, 0x7b, 0x21, 0x6e, 0xc4, 0x5c, 0x77, 0x3b, 0x5e, 0x08, 0x8f,
+	0x4d, 0xe5, 0x41, 0x79, 0xaa, 0x18, 0x53, 0x7e, 0x56, 0xe3, 0x37, 0x7e,
+	0xe3, 0x54, 0x40, 0x3f, 0xe4, 0x3f, 0x36, 0xa3, 0xd9, 0xe7, 0x3d, 0xd3,
+	0x2d, 0xfb, 0x20, 0xae, 0xae, 0xa3, 0xa8, 0x0d, 0x97, 0x41, 0x1f, 0xab,
+	0x71, 0xe6, 0xf2, 0xb7, 0xcf, 0x3b, 0x35, 0x2c, 0xb9, 0x90, 0xfc, 0x7f,
+	0xc8, 0xc7, 0x31, 0x5a, 0xed, 0x9b, 0xfd, 0xfa, 0x6f, 0x66, 0x0a, 0xef,
+	0xe8, 0x18, 0x7d, 0xb2, 0x42, 0x3e, 0x2b, 0xf5, 0x57, 0xa7, 0x27, 0xc9,
+	0x3f, 0xaa, 0x39, 0xcf, 0xd0, 0xb5, 0x1a, 0xbc, 0x9c, 0xe7, 0xd3, 0xe4,
+	0x1f, 0xe5, 0xf3, 0x5f, 0x98, 0xfe, 0x69, 0x95, 0x48, 0x8f, 0x08, 0xbd,
+	0x50, 0xe2, 0xa4, 0xac, 0xad, 0x36, 0xe1, 0xdb, 0xc4, 0xf0, 0xdf, 0x09,
+	0x3a, 0x18, 0xa3, 0x74, 0xad, 0x5b, 0xd9, 0xbe, 0xe5, 0xe1, 0x71, 0x4f,
+	0xd0, 0x3f, 0xd6, 0x42, 0xdf, 0x9a, 0xb1, 0x43, 0xd6, 0xc8, 0x8e, 0x56,
+	0x88, 0xfd, 0x96, 0xc2, 0xb1, 0x8c, 0xf3, 0xa5, 0x6f, 0xfc, 0xea, 0xec,
+	0xb7, 0xca, 0xa4, 0xff, 0x31, 0x5f, 0x21, 0xe7, 0x52, 0xca, 0xb9, 0xd0,
+	0x17, 0x0f, 0x24, 0xe0, 0x8f, 0xfd, 0x2d, 0x1c, 0x2b, 0x0b, 0x18, 0x53,
+	0x4a, 0x74, 0xc4, 0xf2, 0x9b, 0x81, 0x61, 0xce, 0x6d, 0xeb, 0xb0, 0xc2,
+	0x63, 0xfd, 0x3e, 0xef, 0xe7, 0x71, 0x91, 0xa7, 0x4b, 0x5b, 0xac, 0x82,
+	0x8f, 0x2f, 0x72, 0xf8, 0xbc, 0xbf, 0xc9, 0xc8, 0xbc, 0xec, 0x39, 0x1d,
+	0x1c, 0x7a, 0xb4, 0x52, 0xc6, 0x6f, 0x8c, 0x9a, 0xe4, 0x35, 0xf5, 0xe8,
+	0x1c, 0xb5, 0xb9, 0x5f, 0x35, 0xb9, 0x9f, 0x87, 0xfc, 0xab, 0x89, 0xdc,
+	0xcf, 0x33, 0x70, 0x5b, 0x85, 0xcd, 0xfd, 0x8a, 0x30, 0xd5, 0xff, 0x4d,
+	0x5e, 0x2f, 0xf6, 0x28, 0xb9, 0x6d, 0xda, 0x2c, 0xd7, 0x6f, 0x91, 0x78,
+	0x12, 0xfa, 0xa9, 0x43, 0x6c, 0x76, 0x45, 0xa5, 0x7c, 0x7f, 0xfa, 0x1c,
+	0xe7, 0x66, 0x5e, 0x8f, 0xff, 0x67, 0xf4, 0x87, 0x89, 0x2f, 0xad, 0x3d,
+	0x9a, 0x16, 0xc4, 0x88, 0x1f, 0xb7, 0xc5, 0xc7, 0xf2, 0x4f, 0x86, 0x73,
+	0x98, 0xe1, 0x56, 0x1e, 0x6b, 0xe5, 0x7f, 0xae, 0xde, 0x67, 0x39, 0xbf,
+	0x47, 0xad, 0xeb, 0xba, 0xe2, 0x68, 0x72, 0x45, 0xce, 0x98, 0x86, 0x66,
+	0x63, 0x59, 0x87, 0x2e, 0xd7, 0x2c, 0x91, 0x73, 0x17, 0xec, 0x91, 0x18,
+	0xea, 0x6e, 0xf6, 0x73, 0x3c, 0x23, 0x36, 0xe4, 0xc2, 0x24, 0xdb, 0x39,
+	0x31, 0xe8, 0xa0, 0x2e, 0x0b, 0xf1, 0x61, 0x3a, 0xca, 0x31, 0x14, 0xe1,
+	0x44, 0xba, 0x90, 0xd8, 0x88, 0xd8, 0x9a, 0x79, 0xe3, 0xfd, 0x41, 0x9d,
+	0xd7, 0xc8, 0x9a, 0xb3, 0xa1, 0x4e, 0x35, 0x0a, 0x1e, 0x0f, 0xc1, 0x37,
+	0x6c, 0xd7, 0x86, 0x1d, 0xcf, 0x10, 0xdf, 0xc4, 0x2d, 0x8c, 0x8e, 0x93,
+	0xe7, 0xae, 0xb9, 0xf0, 0xbc, 0x8d, 0xe5, 0x9e, 0xcb, 0xf6, 0xfb, 0x62,
+	0xa3, 0x70, 0x5f, 0xe9, 0xdb, 0x25, 0x7b, 0x2f, 0xec, 0xb7, 0x10, 0xa7,
+	0xd8, 0xe7, 0x51, 0xf6, 0x79, 0x8a, 0x7d, 0x1e, 0xd8, 0x29, 0x6d, 0x69,
+	0xf8, 0xd0, 0xea, 0xd3, 0x85, 0x81, 0x78, 0x08, 0xef, 0x67, 0xec, 0xb6,
+	0x9e, 0xcf, 0x20, 0x25, 0x7b, 0xa8, 0xab, 0x1a, 0x83, 0xbe, 0x0e, 0x4b,
+	0x5e, 0x3e, 0xac, 0xc9, 0xf8, 0xb0, 0xd6, 0xc2, 0x23, 0xd6, 0x76, 0x6d,
+	0x76, 0xdf, 0x42, 0x6a, 0x58, 0x14, 0x16, 0xf3, 0xba, 0xcd, 0xd9, 0x75,
+	0x99, 0x25, 0x19, 0x7b, 0xdd, 0xbc, 0xa0, 0xd9, 0x4b, 0xee, 0x99, 0x5b,
+	0x2f, 0x8f, 0xaa, 0xd0, 0x02, 0x82, 0xff, 0xee, 0x02, 0xb8, 0x7a, 0x3c,
+	0xc8, 0xe7, 0xbf, 0xbb, 0xc7, 0x44, 0x67, 0xd8, 0x24, 0x2f, 0xc7, 0xa5,
+	0x79, 0xf8, 0x21, 0x3a, 0xea, 0x83, 0xe1, 0xcd, 0x8c, 0x7b, 0x51, 0xcd,
+	0xc0, 0xbe, 0xb0, 0x11, 0x73, 0x59, 0xb5, 0x6a, 0x8f, 0x9f, 0xab, 0x55,
+	0x5b, 0xdf, 0x4d, 0x3d, 0xd9, 0xaf, 0x6a, 0xe6, 0x78, 0xa2, 0x6a, 0x55,
+	0x63, 0x21, 0xae, 0xdf, 0x39, 0x1b, 0xe9, 0x8a, 0xb1, 0x2f, 0x7a, 0x92,
+	0x6e, 0xd4, 0xf6, 0xba, 0xd8, 0xd6, 0xa5, 0xb2, 0xe6, 0xc9, 0x3f, 0x7b,
+	0xcf, 0x0c, 0x0e, 0x37, 0xae, 0xec, 0xf5, 0x5b, 0x7b, 0xf7, 0x37, 0x2d,
+	0xb0, 0xeb, 0x28, 0xae, 0xe8, 0x77, 0x23, 0xc4, 0x6b, 0x5d, 0xcc, 0xbd,
+	0x76, 0xbd, 0x81, 0x55, 0x1b, 0x84, 0xab, 0x7a, 0x7d, 0xc4, 0x4b, 0x26,
+	0x32, 0x91, 0x02, 0xa9, 0x1b, 0x33, 0xdc, 0x94, 0xe5, 0x08, 0xe7, 0x3b,
+	0xe6, 0x36, 0xd4, 0x13, 0xd4, 0x21, 0x81, 0x24, 0xb9, 0x8b, 0x9b, 0x18,
+	0xba, 0x08, 0xe1, 0xfe, 0x43, 0x6a, 0x34, 0x23, 0xf7, 0x71, 0x8e, 0xe7,
+	0xd6, 0xa6, 0x72, 0xeb, 0x52, 0xd2, 0x9f, 0x3f, 0x34, 0x76, 0xd1, 0x39,
+	0xc5, 0x18, 0x74, 0x79, 0x95, 0xd8, 0xb2, 0x5d, 0x8b, 0xf4, 0x65, 0xd7,
+	0x08, 0x76, 0xc9, 0x5d, 0xf3, 0xa1, 0x69, 0xd7, 0xf6, 0xc8, 0x75, 0x17,
+	0x5d, 0xc3, 0x7b, 0xfe, 0x24, 0x7b, 0x8d, 0xbd, 0xcf, 0xf6, 0x49, 0x76,
+	0x8c, 0x9f, 0x35, 0x4a, 0x7e, 0x2a, 0xc2, 0x9c, 0xfe, 0xa8, 0x9a, 0x22,
+	0x7e, 0xcf, 0x1b, 0x2a, 0x44, 0xf5, 0x6e, 0x19, 0xb3, 0x86, 0x6a, 0xe2,
+	0xf3, 0xb2, 0x64, 0x39, 0xca, 0x86, 0x0e, 0xa9, 0x4f, 0x33, 0x0f, 0x5b,
+	0xb5, 0x67, 0x87, 0x93, 0x76, 0xed, 0x99, 0x5d, 0x77, 0x96, 0xd3, 0xa5,
+	0xec, 0x25, 0x49, 0x8c, 0x35, 0x54, 0xf4, 0x5c, 0xed, 0x98, 0x69, 0x52,
+	0x4f, 0x8c, 0x67, 0xf9, 0xc4, 0xd8, 0x36, 0x36, 0xe8, 0x10, 0x9e, 0xa1,
+	0x2d, 0xf2, 0xb9, 0xe0, 0xf7, 0xae, 0x25, 0xa7, 0x31, 0x2a, 0xa2, 0x21,
+	0x37, 0xec, 0x7a, 0xc1, 0x18, 0xf2, 0xb3, 0xbe, 0xc3, 0xf0, 0xc5, 0x1c,
+	0xfd, 0x02, 0xed, 0x7e, 0x1f, 0xed, 0xb0, 0x23, 0xf3, 0x7b, 0x73, 0xac,
+	0xc2, 0x85, 0x4e, 0x3d, 0x67, 0x3b, 0x1e, 0xe6, 0x76, 0xd3, 0x1c, 0xe0,
+	0xb9, 0xad, 0x36, 0x8f, 0x83, 0xc4, 0x76, 0x07, 0xf3, 0xcf, 0x6a, 0xfd,
+	0x77, 0xe6, 0xaa, 0x8b, 0xae, 0x15, 0x9d, 0x4f, 0x71, 0xbc, 0x06, 0xf5,
+	0xce, 0x76, 0x47, 0x4d, 0xc4, 0x69, 0x3b, 0xc3, 0xfc, 0x7f, 0x3d, 0x0c,
+	0xa3, 0x88, 0x72, 0x58, 0xd3, 0x3d, 0x6d, 0x1a, 0x2e, 0xbb, 0x95, 0x83,
+	0xc9, 0x90, 0x5a, 0xd7, 0x0d, 0x3c, 0x9a, 0x24, 0x87, 0xe2, 0xff, 0xa0,
+	0xac, 0xad, 0xeb, 0xb2, 0x06, 0x59, 0x88, 0x2d, 0x69, 0x62, 0x46, 0x72,
+	0xd3, 0x87, 0x17, 0x40, 0x73, 0x33, 0x66, 0xac, 0xe2, 0xef, 0x43, 0xbc,
+	0x26, 0xc3, 0xff, 0x21, 0xfe, 0x8f, 0x52, 0x8f, 0x94, 0x2d, 0x42, 0xc3,
+	0xcc, 0xe7, 0xc3, 0x4c, 0x0e, 0xc3, 0x21, 0x8c, 0xd1, 0x2f, 0xce, 0x0c,
+	0x6a, 0x28, 0xd9, 0x5f, 0x8e, 0x4f, 0xf6, 0xd9, 0x3e, 0xb2, 0x76, 0x58,
+	0x6a, 0x50, 0x44, 0x86, 0x52, 0xab, 0x27, 0x72, 0x2c, 0xc0, 0xfe, 0x54,
+	0xb9, 0x55, 0xaf, 0xf7, 0x3e, 0xf3, 0xe6, 0x2a, 0x4d, 0x6a, 0xc3, 0x5a,
+	0xc9, 0x17, 0x03, 0xbe, 0x2e, 0xe1, 0x23, 0x2e, 0x91, 0x6d, 0x23, 0x1e,
+	0x8d, 0xe7, 0xea, 0x78, 0x02, 0x2d, 0x2f, 0x13, 0x2b, 0xf8, 0xdc, 0xe5,
+	0x90, 0x3d, 0xd7, 0xc3, 0xc9, 0x5c, 0x0c, 0x11, 0x99, 0x7f, 0x5e, 0x95,
+	0x5b, 0x67, 0xb9, 0xf8, 0xb8, 0xac, 0xeb, 0x84, 0xf1, 0xe4, 0x68, 0x28,
+	0xbb, 0xb6, 0x53, 0x4f, 0xff, 0xf2, 0x1b, 0x69, 0xda, 0xf0, 0xbe, 0x94,
+	0x86, 0x21, 0xe2, 0xf4, 0x31, 0xcd, 0x9f, 0x92, 0x1a, 0x42, 0x07, 0x39,
+	0xe2, 0x92, 0xb8, 0x07, 0xce, 0x44, 0x31, 0xd6, 0x68, 0x6e, 0xec, 0x67,
+	0x4c, 0x1b, 0x0a, 0xef, 0xe0, 0x79, 0x59, 0x1f, 0xe1, 0xbd, 0x49, 0xd9,
+	0xc3, 0xe6, 0xfd, 0xc4, 0x22, 0xb2, 0xae, 0x6a, 0x58, 0xfa, 0x6b, 0x62,
+	0x1f, 0x72, 0x2d, 0x31, 0xbe, 0x56, 0x8e, 0xc7, 0xc2, 0x79, 0xd9, 0xeb,
+	0x3d, 0xf4, 0x67, 0x0f, 0x3c, 0x09, 0xb2, 0xc0, 0xee, 0xff, 0x01, 0xf7,
+	0xd2, 0xa6, 0xff, 0xa0, 0x0d, 0x59, 0x86, 0x3a, 0x69, 0xae, 0xaf, 0x94,
+	0x7b, 0xc5, 0x86, 0xb5, 0x6c, 0x4d, 0x81, 0x86, 0xf4, 0xe8, 0x0f, 0x18,
+	0x6f, 0x65, 0x1f, 0xc5, 0x80, 0x7e, 0xad, 0x07, 0x7b, 0x52, 0x1e, 0x94,
+	0xcd, 0x2f, 0x84, 0xaf, 0x5c, 0x13, 0x5d, 0x29, 0x33, 0x3c, 0x48, 0xdc,
+	0x59, 0x61, 0xd5, 0x17, 0x6c, 0x8d, 0x07, 0xb4, 0xbb, 0x98, 0x6f, 0xa2,
+	0x2e, 0xd9, 0x9f, 0x5e, 0x41, 0xee, 0x23, 0xd7, 0xd8, 0xb5, 0x4e, 0x2d,
+	0x0b, 0x3c, 0x28, 0x60, 0x1c, 0xd1, 0x2d, 0x3f, 0x96, 0x7c, 0x20, 0x18,
+	0x5e, 0xf0, 0x50, 0x19, 0xfe, 0x65, 0x47, 0x39, 0xce, 0xec, 0x30, 0x70,
+	0xf2, 0xda, 0xe5, 0x78, 0x95, 0x1c, 0xba, 0x69, 0xbe, 0xbf, 0xcd, 0xe3,
+	0x34, 0x71, 0x55, 0x83, 0xb1, 0x71, 0x06, 0xfc, 0xa1, 0x11, 0x55, 0xb7,
+	0x22, 0x83, 0xfb, 0x88, 0x6b, 0x44, 0xc6, 0x2b, 0xf1, 0xf2, 0xce, 0xe5,
+	0x78, 0x29, 0x2e, 0x35, 0x42, 0x01, 0x2d, 0xa8, 0xea, 0xbc, 0x1d, 0x58,
+	0x87, 0x98, 0xe5, 0x7f, 0xcb, 0xf1, 0x4a, 0x3c, 0xe0, 0x5d, 0xab, 0x5c,
+	0x38, 0x1d, 0xde, 0x00, 0xa3, 0xcc, 0x60, 0xb6, 0x98, 0x85, 0x03, 0xc9,
+	0x3a, 0x6d, 0x1d, 0x56, 0xd1, 0x07, 0x5c, 0xf8, 0x38, 0x2c, 0x63, 0x34,
+	0x70, 0x43, 0xbd, 0x43, 0x64, 0xdf, 0x15, 0xe5, 0xf7, 0xb2, 0x0b, 0xf6,
+	0xec, 0xed, 0x9a, 0x40, 0x45, 0x3e, 0x5e, 0x8c, 0x17, 0x69, 0x47, 0xe3,
+	0xa9, 0x68, 0x0b, 0xbb, 0x55, 0xfb, 0x17, 0xb4, 0xa3, 0x38, 0xe2, 0xc1,
+	0xab, 0x0c, 0xa8, 0xee, 0x04, 0x73, 0xa1, 0x1e, 0xc6, 0x2b, 0x99, 0x95,
+	0xf8, 0xc9, 0x60, 0x33, 0x5e, 0x8e, 0x33, 0xab, 0xf6, 0xf9, 0x7d, 0x8b,
+	0x94, 0x0f, 0xcf, 0x67, 0x9a, 0x71, 0x24, 0xee, 0x9f, 0xba, 0x87, 0xfd,
+	0xbe, 0xcb, 0x38, 0x5d, 0x9d, 0x00, 0xce, 0x64, 0xa4, 0x56, 0xd0, 0x85,
+	0x29, 0xca, 0xe3, 0x09, 0xda, 0xeb, 0xbc, 0x86, 0x1b, 0xc9, 0x13, 0x7c,
+	0x18, 0xda, 0x71, 0x3b, 0xc6, 0xd2, 0xb7, 0xe3, 0x58, 0xea, 0x5d, 0xb3,
+	0x8c, 0x36, 0x33, 0x95, 0xf6, 0xe0, 0x8d, 0x94, 0xbe, 0xf1, 0x5f, 0xc8,
+	0xdb, 0x5f, 0xe7, 0x77, 0x77, 0xc2, 0xae, 0x21, 0xb8, 0x67, 0x41, 0x13,
+	0x82, 0xc3, 0x15, 0x8c, 0xa9, 0x61, 0xcc, 0xed, 0x6e, 0x45, 0xb5, 0x2e,
+	0x7d, 0x35, 0x42, 0x1f, 0xa6, 0x55, 0x32, 0x2e, 0xb7, 0x87, 0xaf, 0xc1,
+	0x99, 0x99, 0x50, 0x5f, 0xad, 0x59, 0x91, 0x9d, 0x47, 0xd3, 0x05, 0xb5,
+	0x67, 0xb2, 0x1e, 0xf7, 0x8d, 0x4b, 0x04, 0x2f, 0xb8, 0xf4, 0x5c, 0x0d,
+	0xe0, 0x1f, 0xd9, 0x82, 0x2f, 0x8a, 0x0b, 0xed, 0xc1, 0x83, 0xd2, 0x84,
+	0xd4, 0x91, 0x19, 0xf8, 0x6c, 0xc1, 0x72, 0x94, 0x8e, 0x48, 0x9b, 0x0c,
+	0x77, 0x23, 0xb7, 0x67, 0xed, 0x3c, 0x88, 0x92, 0x5e, 0x39, 0x46, 0xde,
+	0xba, 0xc0, 0xae, 0x65, 0x28, 0xee, 0xcf, 0xd5, 0xd1, 0x48, 0xdf, 0xdd,
+	0xf4, 0xdf, 0xcf, 0xad, 0x1a, 0x97, 0xf3, 0x7d, 0xaf, 0xc4, 0xd1, 0x9d,
+	0xbd, 0xfc, 0xce, 0x18, 0x12, 0xf6, 0x3a, 0xf2, 0xf5, 0xbf, 0x35, 0xd3,
+	0x65, 0x01, 0xed, 0x24, 0xe5, 0x34, 0x92, 0xfc, 0x1b, 0x1e, 0x0f, 0x68,
+	0x2f, 0xa8, 0xdd, 0xfc, 0xf4, 0x3a, 0x56, 0xd5, 0x13, 0x93, 0xa6, 0x9f,
+	0xbf, 0x44, 0xf6, 0x75, 0xdd, 0x09, 0xc3, 0xcc, 0xd3, 0xf5, 0xb1, 0x93,
+	0x4a, 0x6a, 0x89, 0x42, 0x68, 0x22, 0xa7, 0x2d, 0x49, 0xb4, 0xe3, 0x83,
+	0x48, 0x31, 0xf1, 0xaf, 0x3f, 0xf6, 0x09, 0x26, 0xd1, 0x3d, 0x2c, 0xb6,
+	0xde, 0x84, 0xf8, 0xe8, 0x9b, 0xbc, 0xe7, 0x38, 0xba, 0x86, 0x57, 0xc0,
+	0xa0, 0xcc, 0xb7, 0xa4, 0x7e, 0x2b, 0xbc, 0xa5, 0x49, 0xd6, 0xc2, 0xb6,
+	0xa5, 0x1f, 0xb8, 0x44, 0xea, 0x33, 0x68, 0xb3, 0x1e, 0x77, 0xf3, 0x81,
+	0x18, 0x63, 0x9c, 0xc7, 0xd5, 0xfc, 0xeb, 0xfb, 0x3a, 0x75, 0x59, 0xe7,
+	0x78, 0x3c, 0xb6, 0x48, 0xcf, 0xb3, 0x6a, 0x10, 0x55, 0xf3, 0x58, 0x5f,
+	0x30, 0x23, 0x9f, 0xcf, 0xf7, 0xe9, 0xd6, 0xe7, 0x78, 0xdf, 0x5c, 0xeb,
+	0xf3, 0xd5, 0xbe, 0x40, 0xfa, 0x7c, 0x2c, 0xb4, 0xf1, 0x85, 0x55, 0x43,
+	0x8e, 0xae, 0xb0, 0xa1, 0x6e, 0x6c, 0xb4, 0xf3, 0xf9, 0x11, 0x6b, 0xed,
+	0x51, 0xae, 0x09, 0xa9, 0xa3, 0x71, 0xc3, 0xf4, 0xea, 0x85, 0xb4, 0x29,
+	0xa8, 0x51, 0x5d, 0xdf, 0x38, 0xa5, 0xda, 0x71, 0x3a, 0xa2, 0xe3, 0xf5,
+	0x8c, 0xdf, 0x27, 0x39, 0xf2, 0x44, 0xe6, 0x23, 0x6c, 0xdf, 0x89, 0x58,
+	0xc1, 0x02, 0xa9, 0x8b, 0x36, 0x2d, 0x5e, 0xfe, 0x51, 0xc6, 0x8e, 0x1f,
+	0xa7, 0x06, 0x8b, 0x88, 0x39, 0x2c, 0x7c, 0x61, 0xe1, 0xec, 0x17, 0x33,
+	0x4d, 0xc4, 0x53, 0xd2, 0xef, 0x06, 0x62, 0xf8, 0x16, 0x74, 0xed, 0x88,
+	0x91, 0xeb, 0x37, 0xa1, 0x23, 0x29, 0xb5, 0x61, 0x81, 0xa6, 0x02, 0x65,
+	0xe2, 0x54, 0xd8, 0xef, 0x9d, 0xcb, 0xcf, 0x7d, 0xe1, 0x2e, 0xac, 0xd3,
+	0x2d, 0xfb, 0x6e, 0xd2, 0x95, 0xbf, 0xc9, 0x80, 0x13, 0xc7, 0xc3, 0x4e,
+	0xcb, 0xef, 0x1e, 0x0d, 0x97, 0x20, 0x4a, 0x4e, 0x51, 0xc7, 0xbc, 0x99,
+	0xd6, 0x2c, 0xac, 0x88, 0x8f, 0x89, 0xbf, 0x6f, 0x67, 0x1c, 0x7c, 0x2e,
+	0x52, 0x17, 0xbb, 0x5e, 0x32, 0xec, 0x5e, 0x85, 0x0f, 0x74, 0x62, 0xa5,
+	0x4a, 0x65, 0xd5, 0x60, 0xdb, 0x73, 0xfe, 0x57, 0xd3, 0xae, 0xfd, 0xfa,
+	0xbd, 0x99, 0xbb, 0x6f, 0x2a, 0xee, 0xc2, 0x9d, 0xbc, 0x6f, 0xee, 0xfc,
+	0xba, 0x36, 0xb9, 0xcf, 0xcb, 0x18, 0x2c, 0xf7, 0x4d, 0x56, 0xba, 0x2e,
+	0xb8, 0xaf, 0x05, 0x5b, 0x76, 0xac, 0xb0, 0xc6, 0xbb, 0x2d, 0x89, 0x06,
+	0x59, 0xc7, 0x73, 0x46, 0xea, 0xb4, 0x13, 0x40, 0xfb, 0xf3, 0x8c, 0x5b,
+	0x51, 0x2d, 0x18, 0x5a, 0x83, 0x26, 0xe1, 0x89, 0x8c, 0x59, 0xa7, 0xf1,
+	0x50, 0x7c, 0x10, 0x57, 0x0e, 0x4b, 0xfe, 0x08, 0xae, 0x18, 0x40, 0x1a,
+	0xdf, 0xce, 0xa4, 0xb1, 0x81, 0x32, 0x35, 0xac, 0x1a, 0xd4, 0x0c, 0xbe,
+	0x13, 0x3f, 0x8d, 0x6e, 0x0b, 0xf7, 0x1c, 0xc0, 0xaa, 0x78, 0x87, 0x17,
+	0x85, 0x72, 0xef, 0x9d, 0x6c, 0x5f, 0x74, 0xe1, 0x6f, 0x35, 0x30, 0xcd,
+	0xf6, 0xef, 0xc4, 0xe6, 0x01, 0xd3, 0x7c, 0x8c, 0xf9, 0xe6, 0x55, 0xe6,
+	0xc2, 0x0f, 0xa8, 0x9f, 0x96, 0x46, 0x69, 0xff, 0x90, 0xd2, 0xad, 0xbc,
+	0xb3, 0x01, 0xdd, 0xc9, 0x2a, 0xf2, 0x2a, 0xce, 0x75, 0x58, 0x57, 0x73,
+	0xbb, 0x9b, 0xf8, 0xdb, 0x05, 0xc7, 0xb0, 0x0f, 0x77, 0x12, 0xb7, 0xe4,
+	0xef, 0x7b, 0x5e, 0x49, 0xee, 0xa9, 0xde, 0x5b, 0x04, 0xef, 0x5e, 0x9f,
+	0x9a, 0xb7, 0xcb, 0x83, 0xdb, 0xbb, 0xc9, 0x95, 0xbb, 0x57, 0x62, 0xf3,
+	0x6e, 0x9d, 0xd7, 0xf8, 0xc3, 0x6f, 0x28, 0x7f, 0xe8, 0x45, 0x04, 0x7c,
+	0x03, 0xcc, 0x81, 0x5e, 0xc6, 0x0a, 0xd7, 0xbe, 0x52, 0x14, 0xed, 0xd3,
+	0xe0, 0xd8, 0x57, 0x8e, 0xe2, 0x7d, 0x5e, 0x54, 0x33, 0x17, 0x79, 0x87,
+	0x3f, 0xc4, 0xe8, 0x2e, 0xd9, 0x47, 0xff, 0xad, 0x99, 0x4f, 0xfd, 0x7e,
+	0x12, 0x09, 0xa1, 0x74, 0xb8, 0x13, 0x99, 0xee, 0x7a, 0x14, 0x0f, 0x1f,
+	0x52, 0x75, 0xec, 0xef, 0x86, 0x6e, 0x9d, 0xed, 0xd8, 0x58, 0xe4, 0xfa,
+	0xe1, 0x26, 0x74, 0x25, 0xfd, 0x2b, 0x0c, 0xc8, 0x98, 0x7f, 0xc6, 0x78,
+	0x79, 0xfe, 0x19, 0x05, 0x3d, 0x62, 0xd5, 0xe1, 0xb7, 0xde, 0x0d, 0xfb,
+	0x79, 0x85, 0x1b, 0xb3, 0xf3, 0xa9, 0x97, 0xf9, 0xb8, 0x37, 0xd0, 0x0e,
+	0x2e, 0x21, 0x67, 0x01, 0xde, 0xcb, 0xe8, 0xea, 0x3a, 0x8e, 0xf5, 0x0c,
+	0xf1, 0x5f, 0x1b, 0xe7, 0xf2, 0xd1, 0xe0, 0xf3, 0xaa, 0x9a, 0x73, 0x99,
+	0x4a, 0x17, 0xe1, 0xd3, 0xb4, 0x4f, 0x05, 0x38, 0x97, 0x7b, 0x79, 0xfe,
+	0x3b, 0x9c, 0x4b, 0xe7, 0x6e, 0x7f, 0xeb, 0x11, 0xe5, 0x8f, 0xdd, 0xa6,
+	0x02, 0x5a, 0xa7, 0x2a, 0xc6, 0x7b, 0x83, 0xa5, 0xc4, 0x9d, 0x1a, 0x73,
+	0x67, 0x39, 0x4e, 0x0e, 0x56, 0xd0, 0xf6, 0x74, 0xb6, 0x61, 0x9a, 0x25,
+	0xba, 0x97, 0xb1, 0xeb, 0x07, 0x98, 0xd1, 0x3d, 0x0b, 0x9f, 0x66, 0xda,
+	0x50, 0xda, 0x2d, 0x38, 0xc5, 0x87, 0x4f, 0x78, 0xfe, 0xe3, 0xcc, 0x8f,
+	0x51, 0xb8, 0xeb, 0xb7, 0xa6, 0xf0, 0xd0, 0x1b, 0x38, 0xbf, 0x93, 0x19,
+	0x03, 0xc5, 0xbb, 0x3a, 0xe0, 0xda, 0x65, 0xb6, 0x6f, 0x8e, 0xe0, 0x65,
+	0xd9, 0xe7, 0xed, 0x08, 0xfb, 0xc7, 0xe6, 0x3a, 0xeb, 0xd9, 0xc6, 0x21,
+	0x35, 0x6f, 0xb8, 0x03, 0xa5, 0xbb, 0x7c, 0x8c, 0x65, 0x7e, 0x42, 0x34,
+	0x3d, 0x74, 0x9b, 0xea, 0x40, 0xde, 0x3e, 0x7b, 0xfe, 0x6b, 0x87, 0x65,
+	0xbe, 0x86, 0xba, 0xbe, 0xd1, 0xe6, 0x9d, 0xf6, 0x3a, 0xfe, 0x12, 0x3c,
+	0x94, 0xac, 0x66, 0x1c, 0x99, 0x85, 0x9b, 0x76, 0x91, 0x2f, 0x47, 0xc6,
+	0xae, 0x93, 0x7a, 0x90, 0xfd, 0x99, 0x22, 0x0c, 0xa5, 0x05, 0x13, 0xd8,
+	0xf9, 0x7d, 0x4b, 0xe6, 0x56, 0xda, 0x97, 0x3c, 0x4f, 0x60, 0xe2, 0xf9,
+	0xf0, 0x85, 0xd8, 0x7a, 0x03, 0xfd, 0x64, 0x1d, 0x36, 0xef, 0x40, 0xec,
+	0x61, 0x62, 0x91, 0x83, 0x19, 0x37, 0x06, 0xd2, 0x1a, 0xde, 0x8b, 0xcb,
+	0x5a, 0x82, 0xc4, 0x87, 0x3c, 0xf4, 0x0f, 0x7a, 0xf0, 0xcc, 0xa0, 0x0f,
+	0xde, 0xee, 0x42, 0x1c, 0xa2, 0x9c, 0x46, 0x89, 0x31, 0x3e, 0x89, 0x6b,
+	0x18, 0x61, 0xfc, 0xfe, 0x38, 0x5e, 0x81, 0xe1, 0xcc, 0x2c, 0x9c, 0x8e,
+	0xeb, 0xc8, 0x50, 0xa6, 0xbf, 0x22, 0xee, 0x7e, 0x2c, 0x53, 0x8f, 0x8f,
+	0xe2, 0xe2, 0x97, 0xf5, 0x78, 0x94, 0x32, 0x28, 0xe8, 0xf6, 0xb2, 0x5d,
+	0xf1, 0x51, 0x1f, 0xdc, 0xdd, 0xba, 0x6f, 0x20, 0xab, 0x4f, 0x17, 0xf5,
+	0xb9, 0xd5, 0xaa, 0x4b, 0x11, 0x5c, 0xed, 0xcd, 0x3e, 0x77, 0x30, 0x81,
+	0x23, 0x29, 0xf1, 0x51, 0x1f, 0x56, 0x09, 0x97, 0x61, 0x0e, 0x32, 0xf0,
+	0x26, 0xf3, 0xd6, 0xbb, 0x66, 0x01, 0x79, 0xfa, 0xfa, 0xe0, 0x9b, 0x78,
+	0x39, 0x33, 0xc1, 0xbc, 0xa3, 0xd3, 0xa7, 0x27, 0xf0, 0x62, 0x3a, 0x2a,
+	0x75, 0xe3, 0xe4, 0xbc, 0x62, 0xe7, 0x13, 0xd8, 0x96, 0x3a, 0x4c, 0x7b,
+	0xfb, 0x94, 0x31, 0xb1, 0x9d, 0xb8, 0x65, 0x02, 0x9b, 0xd3, 0x2b, 0xf1,
+	0xc8, 0xee, 0x18, 0xf5, 0x2f, 0x36, 0x1c, 0x18, 0x7f, 0xcf, 0xb9, 0x12,
+	0x0f, 0xef, 0x7f, 0x16, 0xe9, 0x7d, 0x13, 0x18, 0xed, 0x91, 0x98, 0x33,
+	0x81, 0x91, 0xbd, 0x8c, 0x8d, 0xc9, 0xb7, 0x61, 0xf0, 0xf3, 0xa1, 0x64,
+	0x07, 0xa2, 0xfb, 0x4e, 0x13, 0x2b, 0x4d, 0xe0, 0xfa, 0x1e, 0x7d, 0xc5,
+	0x10, 0x26, 0x70, 0xcb, 0xde, 0x46, 0xa4, 0x92, 0x31, 0xb6, 0xbf, 0x12,
+	0x5b, 0x77, 0xfb, 0x43, 0x2e, 0xc7, 0x0c, 0xc6, 0x8e, 0x46, 0xc6, 0x19,
+	0xc6, 0xd1, 0x01, 0xc1, 0xad, 0x1e, 0xd4, 0x27, 0x7c, 0xea, 0xe3, 0x9d,
+	0x2e, 0xd4, 0x25, 0xfc, 0xad, 0xe4, 0x98, 0xc6, 0x2d, 0x2a, 0xe0, 0xcb,
+	0x73, 0xc8, 0x1a, 0xf6, 0x0c, 0x8c, 0x93, 0xa7, 0x17, 0x5c, 0xa7, 0x10,
+	0x61, 0x4c, 0xf1, 0x55, 0xd1, 0xd7, 0x07, 0x5a, 0xb0, 0x75, 0xc7, 0x85,
+	0x38, 0x58, 0xf0, 0xef, 0x1a, 0x6b, 0xdd, 0x77, 0xd2, 0x19, 0xc3, 0xd6,
+	0xd1, 0xc0, 0xc6, 0x71, 0x0b, 0x4b, 0xcb, 0x75, 0xb9, 0x6b, 0x50, 0xfc,
+	0x69, 0xa3, 0x3f, 0x34, 0x43, 0xc9, 0xb5, 0x9d, 0xb4, 0xad, 0x0b, 0xaf,
+	0x37, 0x54, 0x6a, 0x81, 0xd4, 0x39, 0xcf, 0xa8, 0x46, 0x29, 0xed, 0x45,
+	0xb7, 0x65, 0xb1, 0x35, 0x15, 0xc5, 0xd1, 0xf0, 0x3f, 0x98, 0xe9, 0xd6,
+	0x75, 0x1c, 0xe7, 0xad, 0x16, 0xd7, 0x14, 0xbd, 0xbf, 0x26, 0xbc, 0xc7,
+	0x2d, 0x7a, 0xef, 0x88, 0xc9, 0x7a, 0x42, 0x3e, 0xfd, 0xa2, 0x80, 0x79,
+	0xc3, 0x33, 0x54, 0x84, 0xfc, 0x7e, 0x0f, 0xb9, 0x13, 0xb4, 0x52, 0x62,
+	0x67, 0xe7, 0x48, 0x31, 0x31, 0x6f, 0x05, 0x1c, 0x23, 0x15, 0x38, 0x1c,
+	0xf7, 0x62, 0xce, 0x88, 0x17, 0xcf, 0x50, 0xcf, 0xd5, 0x23, 0x3a, 0x0e,
+	0x51, 0xcf, 0xde, 0x91, 0x10, 0x46, 0xe3, 0xf5, 0x98, 0x31, 0x72, 0x48,
+	0xbd, 0x9e, 0x69, 0xa9, 0x46, 0xa1, 0xf4, 0x23, 0x32, 0xcc, 0xe9, 0x54,
+	0xf4, 0x19, 0xa3, 0xcf, 0x8a, 0x6e, 0x9b, 0xf1, 0xe0, 0x8e, 0x67, 0xb1,
+	0x68, 0x97, 0x89, 0x9f, 0x84, 0xe5, 0xb9, 0x1e, 0x79, 0x36, 0x84, 0xfc,
+	0x84, 0xf1, 0xe7, 0xc6, 0xb0, 0x7f, 0x85, 0xec, 0x41, 0xc6, 0x2a, 0x4c,
+	0xe4, 0x45, 0xfc, 0x61, 0x7a, 0xe1, 0x8a, 0x02, 0x25, 0xb1, 0xa4, 0xce,
+	0xb7, 0x0e, 0xb5, 0x59, 0x5e, 0xf3, 0x75, 0xac, 0x23, 0x76, 0xab, 0xd6,
+	0x57, 0xe3, 0xe1, 0x32, 0xc3, 0xf3, 0x41, 0xa3, 0x69, 0xae, 0x8d, 0x8c,
+	0x79, 0x6d, 0x5e, 0xb4, 0x01, 0x9b, 0x93, 0x36, 0x87, 0x3c, 0xd9, 0x68,
+	0x73, 0x9d, 0xc7, 0xc4, 0x37, 0xdc, 0x52, 0x83, 0x6e, 0xc5, 0x4e, 0x1c,
+	0xa1, 0x3f, 0xbc, 0x9c, 0xfe, 0x31, 0x1e, 0xdc, 0x29, 0xeb, 0xfc, 0x1a,
+	0x5e, 0x1a, 0x0c, 0x13, 0x07, 0x1f, 0x52, 0x07, 0xe8, 0x8f, 0x1d, 0x3b,
+	0xc9, 0xf9, 0x74, 0x03, 0x9b, 0x07, 0x0d, 0x6b, 0xdf, 0x3a, 0xaf, 0xb9,
+	0x2b, 0xf2, 0x42, 0xdc, 0x6c, 0x3f, 0x3d, 0xff, 0xcf, 0xb1, 0xb5, 0x2c,
+	0xc7, 0x5b, 0xfc, 0x21, 0xdf, 0x45, 0xdc, 0xa5, 0xb1, 0xda, 0xe6, 0x2d,
+	0x13, 0x58, 0xd2, 0x63, 0xd0, 0x4f, 0x82, 0x5d, 0x9b, 0x69, 0x2b, 0x4b,
+	0xf7, 0x4a, 0xdc, 0x30, 0xcd, 0xae, 0x70, 0x00, 0x58, 0xda, 0x8c, 0xf8,
+	0x8e, 0x26, 0xa9, 0xa3, 0xfb, 0xd4, 0xa1, 0x07, 0xda, 0xb6, 0xe3, 0x59,
+	0x8c, 0xec, 0xac, 0x6b, 0x5d, 0x27, 0xb9, 0x28, 0xa2, 0xaf, 0x7b, 0x4e,
+	0x3d, 0x8b, 0xe1, 0xc1, 0xeb, 0x10, 0x5d, 0xca, 0xf9, 0x2b, 0xa9, 0x3b,
+	0x86, 0x3a, 0x79, 0xad, 0x0b, 0xc7, 0xe2, 0xb2, 0x3f, 0xa8, 0x47, 0xab,
+	0x65, 0xdd, 0xe4, 0x0e, 0x44, 0x3f, 0x68, 0xf4, 0xa1, 0x30, 0x21, 0x6b,
+	0x8c, 0xb2, 0x17, 0xac, 0xfb, 0x16, 0xd3, 0x06, 0x5c, 0x23, 0x57, 0xa1,
+	0xa7, 0x0c, 0xc6, 0x07, 0x8d, 0xd6, 0xd8, 0x28, 0x33, 0x91, 0x85, 0xc8,
+	0x64, 0x25, 0xb6, 0xed, 0x96, 0xdc, 0xb7, 0x12, 0xc6, 0xfe, 0x80, 0x51,
+	0xab, 0x62, 0x48, 0x8d, 0xda, 0xe3, 0xd8, 0x9e, 0xfc, 0x43, 0x9b, 0x13,
+	0xfb, 0x79, 0x1b, 0x1b, 0xf6, 0xc2, 0xca, 0xc1, 0x8f, 0x2e, 0x70, 0xa1,
+	0xa5, 0xdb, 0xaa, 0x71, 0x0a, 0x15, 0x28, 0x85, 0xf4, 0x72, 0xbb, 0xef,
+	0x19, 0xec, 0x9b, 0xb9, 0x80, 0x7d, 0x89, 0xbf, 0x88, 0x0e, 0x7c, 0xc4,
+	0x3c, 0x8f, 0x98, 0x0f, 0x57, 0x8a, 0x1e, 0xa4, 0xff, 0x44, 0xb6, 0xef,
+	0x7f, 0x4f, 0x4e, 0xbf, 0xe5, 0xa7, 0xbf, 0x25, 0x2b, 0x4b, 0x8e, 0x37,
+	0xf1, 0x6f, 0x8c, 0xb7, 0xf4, 0x52, 0x14, 0xca, 0x98, 0x0d, 0xc4, 0x77,
+	0x52, 0x26, 0xba, 0x1e, 0x7e, 0x44, 0x19, 0xd8, 0x4a, 0xdd, 0x6c, 0x27,
+	0x13, 0x48, 0x32, 0x36, 0xdc, 0x1d, 0x79, 0xee, 0xa5, 0x7c, 0xd4, 0x8e,
+	0x55, 0x63, 0xec, 0xbb, 0x5e, 0xe6, 0xcb, 0x8f, 0x23, 0x41, 0x62, 0x60,
+	0x83, 0x5c, 0xe8, 0x5d, 0xe9, 0x83, 0xed, 0xaf, 0x63, 0x4e, 0x95, 0x75,
+	0x18, 0xe1, 0x33, 0xae, 0xf0, 0x00, 0xa4, 0xe6, 0x2e, 0xf7, 0x5c, 0x92,
+	0xdf, 0x3b, 0x86, 0x99, 0x8c, 0x2b, 0xd3, 0xa6, 0xa6, 0x4b, 0x5d, 0x4e,
+	0x2a, 0xf2, 0x41, 0x5c, 0x27, 0xce, 0xb2, 0xf7, 0x0a, 0xdc, 0x0b, 0xdc,
+	0xc4, 0xf3, 0x9d, 0x96, 0x0f, 0x49, 0xad, 0x65, 0x21, 0xe3, 0xb6, 0xa6,
+	0x7f, 0x81, 0x2b, 0xf7, 0x8a, 0x6f, 0x59, 0xb6, 0xa0, 0x9d, 0x7f, 0x26,
+	0x29, 0xc7, 0x63, 0xc4, 0x66, 0x76, 0xd2, 0x66, 0xbe, 0x71, 0xa9, 0xec,
+	0xa1, 0x1c, 0xc1, 0x12, 0xc6, 0x5a, 0xf1, 0x81, 0x0b, 0x6b, 0xec, 0xa4,
+	0xe6, 0xce, 0xc4, 0x9b, 0xc4, 0x17, 0x27, 0x53, 0xfe, 0xae, 0x34, 0x84,
+	0xd7, 0xb4, 0xd3, 0x3f, 0x4b, 0x70, 0x22, 0x2d, 0x36, 0xe2, 0x45, 0x20,
+	0xf1, 0x26, 0xfd, 0xed, 0x6a, 0x72, 0xad, 0x52, 0x36, 0x73, 0xf3, 0xa5,
+	0x28, 0x5d, 0x87, 0x87, 0x98, 0xa7, 0x0b, 0xf4, 0xb9, 0xb8, 0x89, 0xdc,
+	0xd2, 0x45, 0xb9, 0x63, 0x99, 0xe0, 0x53, 0xa0, 0x26, 0xa1, 0x41, 0xea,
+	0xd3, 0x5e, 0xc5, 0x75, 0x88, 0x55, 0x7a, 0x64, 0x6f, 0x68, 0xdd, 0xeb,
+	0x58, 0x88, 0xf4, 0x1d, 0x82, 0x31, 0x1d, 0xb2, 0x2f, 0x6b, 0x1c, 0xc3,
+	0x1c, 0xa0, 0x9c, 0x73, 0x68, 0x96, 0xf1, 0x54, 0x30, 0xa6, 0x6b, 0x78,
+	0x9f, 0xfe, 0x7c, 0x22, 0x1e, 0x98, 0x5a, 0x8c, 0xba, 0xf1, 0x13, 0x4e,
+	0xf2, 0xb5, 0x99, 0x72, 0x7d, 0x3d, 0x74, 0xb6, 0xf7, 0x2f, 0xf1, 0x08,
+	0x7a, 0x34, 0xf9, 0x2d, 0xbc, 0x6f, 0x1d, 0x3a, 0x06, 0x64, 0x0c, 0xa6,
+	0x59, 0xce, 0x18, 0xb1, 0xcc, 0xea, 0x5f, 0xfa, 0xfe, 0xe3, 0x1a, 0x16,
+	0xe3, 0x5c, 0x0d, 0xcb, 0x04, 0x0e, 0xa4, 0x68, 0x9b, 0x0b, 0x0c, 0xca,
+	0x61, 0x02, 0x83, 0x69, 0x9d, 0x9c, 0x50, 0xea, 0xcd, 0x97, 0xd0, 0xf6,
+	0x96, 0x30, 0xfe, 0x6a, 0xcc, 0xed, 0x45, 0x30, 0x2a, 0xed, 0x3e, 0xaf,
+	0x4e, 0x9c, 0x36, 0xc7, 0x96, 0x4a, 0x9b, 0xf2, 0xfb, 0xbf, 0xf3, 0x9e,
+	0x4b, 0xe4, 0xd1, 0x32, 0xdc, 0xd5, 0x7d, 0xd2, 0x1c, 0x6b, 0xbd, 0xf0,
+	0x78, 0x19, 0x8f, 0xcb, 0xf7, 0x4a, 0x7e, 0xda, 0x72, 0xe9, 0xa0, 0x5c,
+	0x66, 0xe8, 0x3f, 0x37, 0xbf, 0x6a, 0x8d, 0xeb, 0xa1, 0x4b, 0x65, 0x5d,
+	0xb5, 0x26, 0xf1, 0x8f, 0xfc, 0x64, 0xbc, 0xd2, 0xa5, 0x46, 0x50, 0x6f,
+	0x1a, 0xc7, 0x84, 0x39, 0x79, 0x51, 0x3b, 0x33, 0x79, 0x4e, 0x64, 0x7d,
+	0x8c, 0xba, 0xb9, 0xb0, 0x5e, 0x40, 0xf4, 0xe3, 0x93, 0xb5, 0x03, 0x72,
+	0xde, 0x5b, 0x19, 0xeb, 0x65, 0xce, 0x51, 0xbc, 0xc7, 0x7c, 0x98, 0xd7,
+	0x3b, 0x81, 0x7e, 0xe6, 0x43, 0x67, 0xc2, 0xbf, 0xc7, 0x40, 0x1e, 0xee,
+	0xd7, 0x16, 0x32, 0x7e, 0x95, 0x10, 0x8f, 0xda, 0xe3, 0xe8, 0x1a, 0x08,
+	0x66, 0x65, 0x23, 0x71, 0xcf, 0x8b, 0x02, 0xea, 0x70, 0x49, 0x77, 0x3e,
+	0xf4, 0x32, 0xbf, 0x2f, 0xe6, 0x28, 0x45, 0x71, 0xf6, 0xba, 0x38, 0xc7,
+	0x5b, 0xa4, 0x5f, 0x8a, 0x5b, 0xb2, 0x7a, 0x74, 0x71, 0x8c, 0x7a, 0xb9,
+	0xe4, 0x24, 0xc9, 0x43, 0xc4, 0x0a, 0x0b, 0x24, 0x0f, 0x2d, 0xe7, 0xd8,
+	0xaa, 0xa5, 0x8e, 0x8c, 0x7f, 0x37, 0x5b, 0xe7, 0xf7, 0x24, 0xc7, 0xbe,
+	0xe8, 0x4d, 0x1a, 0xd0, 0x76, 0x17, 0x62, 0x69, 0x5f, 0x0b, 0xc2, 0xcb,
+	0xa2, 0xd8, 0x91, 0x94, 0xbd, 0xe5, 0x78, 0xc4, 0x4c, 0x8a, 0x0e, 0x67,
+	0xc3, 0x77, 0x89, 0xf4, 0x25, 0x7c, 0xe6, 0x60, 0xb5, 0xac, 0xc9, 0xe7,
+	0x59, 0x7a, 0xe2, 0x7c, 0x92, 0x9c, 0xe3, 0x97, 0xea, 0x2a, 0x44, 0x5d,
+	0x5d, 0x09, 0x7d, 0x59, 0x05, 0xf9, 0x83, 0xc4, 0x47, 0x03, 0x0f, 0x31,
+	0x06, 0xde, 0x14, 0x34, 0xf0, 0x20, 0xfd, 0xac, 0xcb, 0xda, 0xdb, 0xec,
+	0x8a, 0x2c, 0x62, 0x0c, 0xcc, 0x8f, 0x94, 0xe2, 0x3d, 0xcd, 0x8e, 0x81,
+	0x31, 0x47, 0xa3, 0xd5, 0xbe, 0x5b, 0x2f, 0xba, 0xcc, 0xf2, 0x33, 0x5c,
+	0x75, 0x91, 0x3e, 0x9c, 0xfa, 0x3f, 0x9b, 0x8b, 0x2b, 0x64, 0x7e, 0xc5,
+	0x97, 0x89, 0xcf, 0xcb, 0x33, 0x58, 0x0f, 0x5b, 0x3e, 0x2c, 0xf7, 0xe8,
+	0x63, 0x0b, 0x9d, 0x06, 0xf6, 0xb0, 0xfd, 0x5e, 0x5a, 0x7e, 0x82, 0x7e,
+	0xbc, 0xb4, 0xe1, 0xb9, 0x1f, 0x96, 0xa1, 0xb6, 0x8d, 0x2c, 0xff, 0x9e,
+	0x19, 0xf4, 0x85, 0x57, 0x23, 0xc1, 0x15, 0xdd, 0xf4, 0xe3, 0xed, 0x69,
+	0xe9, 0x47, 0xfa, 0xcb, 0xf5, 0x63, 0x32, 0x9f, 0xff, 0xcc, 0x1c, 0x5a,
+	0x2e, 0x63, 0xfd, 0xb2, 0x71, 0xc8, 0xb1, 0x20, 0xbf, 0x17, 0x72, 0x3c,
+	0x67, 0xd9, 0xbf, 0x1c, 0x8f, 0x61, 0xc7, 0xa8, 0xe0, 0xc5, 0x8b, 0x9e,
+	0x49, 0x44, 0x61, 0x8f, 0x85, 0x83, 0x98, 0x7b, 0xa2, 0xb8, 0x69, 0x81,
+	0x86, 0x93, 0xf1, 0x09, 0x14, 0xec, 0xb5, 0x38, 0x8e, 0xcc, 0x77, 0xe1,
+	0x51, 0xe6, 0xa6, 0x7e, 0xeb, 0x39, 0xc0, 0x56, 0xea, 0xc2, 0x20, 0x6e,
+	0x2b, 0xc1, 0x48, 0x4a, 0x8f, 0x8d, 0x30, 0x66, 0x6f, 0x27, 0xbf, 0x8d,
+	0x55, 0x76, 0x1c, 0xc9, 0xb3, 0x62, 0x58, 0x89, 0xb5, 0x87, 0x63, 0xc7,
+	0x01, 0x89, 0x01, 0x94, 0x03, 0xf3, 0xdf, 0xe6, 0x01, 0x27, 0xf2, 0xe6,
+	0xdb, 0xd8, 0xe9, 0x8d, 0xe5, 0x72, 0xdd, 0x2c, 0xf4, 0xef, 0x14, 0x9b,
+	0x0b, 0x30, 0x6e, 0x7e, 0x48, 0x2c, 0x05, 0x7c, 0x18, 0x77, 0xcc, 0xf6,
+	0xd0, 0x57, 0xdb, 0xc3, 0x0b, 0xc8, 0x4b, 0x37, 0xd3, 0x3f, 0xbd, 0x3c,
+	0xf6, 0x26, 0x86, 0xe2, 0x1e, 0xe4, 0x59, 0xf9, 0xa6, 0x94, 0x73, 0xb3,
+	0xe5, 0xba, 0x85, 0x72, 0xcd, 0x27, 0xbe, 0xbc, 0x31, 0x6b, 0x63, 0x5b,
+	0x68, 0x2f, 0x07, 0xe9, 0x63, 0xfa, 0x02, 0xf1, 0xaf, 0x25, 0xc4, 0x2d,
+	0x25, 0x48, 0xf4, 0xb4, 0xe3, 0xb5, 0x48, 0x09, 0xba, 0x69, 0x3f, 0x9b,
+	0xa9, 0xf3, 0x98, 0x26, 0xfd, 0xb6, 0x52, 0x56, 0x1a, 0xf6, 0xc4, 0xeb,
+	0xda, 0x9c, 0xce, 0x12, 0x4c, 0x96, 0x79, 0x2d, 0x5e, 0x2c, 0xb1, 0xf1,
+	0xe1, 0xac, 0x5f, 0x6b, 0xf4, 0xeb, 0xd6, 0x73, 0x7e, 0x9d, 0x9b, 0x4b,
+	0xce, 0x46, 0x64, 0x4e, 0x1a, 0xb6, 0xc6, 0x97, 0xe0, 0x11, 0x59, 0x43,
+	0x73, 0x04, 0x18, 0xd7, 0x88, 0x0b, 0x47, 0x45, 0xee, 0x39, 0x3b, 0xdb,
+	0x9d, 0x95, 0x7f, 0x4e, 0x1f, 0xb9, 0xdf, 0xfa, 0x8a, 0x42, 0xf5, 0x8e,
+	0xb9, 0xbe, 0x52, 0xc6, 0xf7, 0x05, 0x71, 0x68, 0x27, 0x8f, 0x7f, 0x13,
+	0x5b, 0x07, 0x04, 0xd7, 0x29, 0xab, 0xfe, 0xe5, 0xa0, 0x5e, 0xa7, 0xbd,
+	0x84, 0x62, 0xc1, 0x77, 0x51, 0x59, 0x83, 0x2b, 0xd4, 0x03, 0xde, 0x21,
+	0x7e, 0x6e, 0xe7, 0xf9, 0x17, 0x74, 0x57, 0xd3, 0x7a, 0xc8, 0x7a, 0x9c,
+	0x03, 0xb1, 0xb2, 0x3a, 0xef, 0x4b, 0x08, 0x46, 0xf3, 0xd5, 0x94, 0x19,
+	0xab, 0x90, 0x6b, 0xb2, 0xcf, 0xf1, 0xaa, 0x63, 0x56, 0x7c, 0x7d, 0x7c,
+	0x54, 0xfc, 0x75, 0x16, 0x7d, 0x58, 0xfc, 0x57, 0x6c, 0x70, 0x1e, 0x73,
+	0xa4, 0x86, 0x81, 0x51, 0xf1, 0x5d, 0xf2, 0x63, 0xf6, 0xa5, 0xd5, 0xd4,
+	0xf8, 0xee, 0xc2, 0xe3, 0x97, 0xc9, 0x73, 0x63, 0x9d, 0x61, 0xcc, 0x76,
+	0xe0, 0xe7, 0xb3, 0x1d, 0xcd, 0x7f, 0x7a, 0xdf, 0x0d, 0x8d, 0xc7, 0x64,
+	0xbc, 0x9a, 0xd4, 0x28, 0x90, 0xb3, 0x79, 0xe5, 0x59, 0xdb, 0xeb, 0x19,
+	0xef, 0x65, 0x0d, 0xfd, 0xfa, 0xfa, 0xdf, 0x99, 0x7f, 0xe1, 0x8a, 0xfa,
+	0x9c, 0xa8, 0xf1, 0x6d, 0xc5, 0x19, 0x33, 0x5d, 0x21, 0xe7, 0xa5, 0x0d,
+	0x62, 0x58, 0x69, 0x9f, 0x31, 0xe2, 0x8a, 0x1a, 0x93, 0x98, 0xce, 0xb1,
+	0x88, 0x18, 0x9e, 0x18, 0xea, 0x3d, 0xb3, 0xb6, 0xaa, 0xc6, 0xeb, 0x50,
+	0xb5, 0xad, 0x4e, 0xca, 0xf2, 0x51, 0xc6, 0x94, 0x47, 0x47, 0x65, 0x0d,
+	0x54, 0xc3, 0x01, 0x62, 0xa1, 0xfd, 0xb5, 0x81, 0xb6, 0x93, 0xc4, 0x38,
+	0x1f, 0xf7, 0x28, 0xbc, 0xae, 0xfb, 0x63, 0xe3, 0xc2, 0x53, 0xc8, 0x67,
+	0x5f, 0xa9, 0x3f, 0x63, 0xf1, 0xc6, 0xee, 0xbd, 0x1a, 0xfa, 0x93, 0xb6,
+	0xcf, 0x3e, 0x41, 0x7b, 0xb2, 0x73, 0x8b, 0xf8, 0xe9, 0x9b, 0xd9, 0x58,
+	0x25, 0x36, 0x1c, 0xe2, 0x1c, 0x73, 0xf5, 0x4e, 0xe7, 0x6a, 0x9d, 0x88,
+	0x7d, 0x43, 0xaa, 0xab, 0xdb, 0x60, 0x3c, 0x2c, 0xb4, 0xf6, 0xe1, 0x35,
+	0xfa, 0x71, 0x51, 0x50, 0x5f, 0x37, 0xc3, 0xd1, 0x0e, 0x77, 0x83, 0xbe,
+	0xf1, 0x3e, 0x95, 0x42, 0x62, 0xd8, 0x1f, 0x1a, 0x82, 0x8e, 0xee, 0x61,
+	0xea, 0x23, 0xd5, 0x8e, 0x7b, 0x22, 0x2e, 0xa3, 0xb0, 0xd9, 0xef, 0xbd,
+	0x52, 0x89, 0x5e, 0x7e, 0x80, 0xbb, 0x53, 0x12, 0xdf, 0xc2, 0xd8, 0x3c,
+	0xea, 0xc0, 0x7b, 0xe1, 0x0d, 0xe8, 0xa2, 0xef, 0x6c, 0x61, 0xae, 0x4c,
+	0x53, 0x07, 0xd1, 0x8a, 0x46, 0xc6, 0xab, 0x30, 0xff, 0x5b, 0xd0, 0x39,
+	0xf0, 0x73, 0xdc, 0x1f, 0x17, 0x0c, 0xe7, 0xe2, 0xef, 0x18, 0x7a, 0x47,
+	0x25, 0x8e, 0x09, 0xee, 0x73, 0x61, 0x53, 0x62, 0x36, 0x8c, 0x2a, 0xc9,
+	0xa3, 0x77, 0x12, 0xb7, 0x2a, 0xbc, 0x68, 0xad, 0xbb, 0xd1, 0x0f, 0x93,
+	0x9d, 0x78, 0x3c, 0xde, 0x89, 0x03, 0xf6, 0x73, 0x56, 0x9a, 0xcb, 0x11,
+	0x3d, 0xe3, 0xa0, 0xbf, 0x17, 0x46, 0x82, 0x2d, 0x1f, 0x39, 0xe1, 0x2b,
+	0x6e, 0x0e, 0xa6, 0xea, 0xd5, 0x34, 0x5e, 0x0b, 0x0b, 0xaf, 0x0d, 0x7b,
+	0xee, 0xcf, 0xdc, 0x89, 0xee, 0x01, 0xb9, 0x8f, 0xf3, 0x4d, 0x72, 0xbe,
+	0xc9, 0x9f, 0xe3, 0xef, 0xc8, 0x1d, 0x9e, 0xfa, 0xa3, 0x78, 0x96, 0x5b,
+	0x4b, 0x0c, 0x5b, 0x58, 0xa6, 0x9d, 0x18, 0xdc, 0xb1, 0x4b, 0xc3, 0xdd,
+	0x09, 0x3f, 0x71, 0xbe, 0x69, 0xd6, 0xcc, 0x9f, 0x81, 0x63, 0xb4, 0xa7,
+	0xca, 0xf9, 0x8d, 0xd8, 0x46, 0xac, 0x9e, 0x26, 0xf6, 0xde, 0x33, 0x80,
+	0xe2, 0x82, 0x05, 0xfe, 0xa6, 0x02, 0x67, 0xc0, 0x7b, 0x0c, 0x9d, 0x70,
+	0x0e, 0xaf, 0xe1, 0x39, 0x17, 0xd6, 0x27, 0x4c, 0xb3, 0x25, 0xf2, 0xd7,
+	0x40, 0xd9, 0x4a, 0x3c, 0xb4, 0x7f, 0x02, 0x99, 0x94, 0x41, 0xbf, 0xd3,
+	0xc3, 0xa7, 0xa9, 0xa7, 0x57, 0xc2, 0xb7, 0xd0, 0xef, 0x05, 0xfb, 0x7f,
+	0x13, 0x89, 0x1d, 0x0e, 0x6b, 0x4f, 0xf1, 0xad, 0x70, 0xbf, 0xe3, 0xb5,
+	0x32, 0x79, 0x0e, 0x2a, 0x46, 0x9f, 0xac, 0x33, 0xf6, 0x39, 0x9e, 0x05,
+	0xaa, 0x5a, 0x2c, 0x9e, 0x5d, 0xd6, 0xec, 0x53, 0x7a, 0x9f, 0x09, 0x57,
+	0xa4, 0x0b, 0x5b, 0x2a, 0xd6, 0xd0, 0x0f, 0x1b, 0x19, 0xc7, 0x9d, 0x28,
+	0x9f, 0xbf, 0x05, 0xd1, 0xaf, 0x8b, 0x0f, 0xac, 0x91, 0x1c, 0x83, 0xe2,
+	0x48, 0x23, 0x7d, 0x61, 0x17, 0x31, 0x26, 0x6d, 0x98, 0x63, 0x70, 0xf5,
+	0x7a, 0x95, 0x51, 0xd1, 0x84, 0x44, 0xb2, 0xd9, 0x92, 0x67, 0x49, 0xe2,
+	0x18, 0xc6, 0xbb, 0x89, 0x89, 0xc9, 0x71, 0x5f, 0x6d, 0xd4, 0xc3, 0x19,
+	0x55, 0xe7, 0xcd, 0x53, 0x3e, 0x15, 0xab, 0x58, 0x4e, 0xcc, 0x2f, 0xeb,
+	0x05, 0x2b, 0xb1, 0x67, 0x77, 0x94, 0xe3, 0x0f, 0x44, 0xf3, 0x9d, 0x2f,
+	0x92, 0x93, 0xac, 0x44, 0xd7, 0xfe, 0x30, 0x7a, 0xd8, 0xd7, 0x91, 0x70,
+	0x60, 0x85, 0x13, 0x3f, 0xc0, 0x95, 0xbd, 0x4e, 0x7c, 0x37, 0xe2, 0xd7,
+	0x6a, 0x1c, 0x1d, 0xb2, 0x8f, 0x85, 0xde, 0xb0, 0xd1, 0x52, 0x0e, 0x7f,
+	0xe8, 0x26, 0xc6, 0xd4, 0x39, 0x11, 0xc9, 0x1f, 0x3e, 0xe5, 0x9b, 0x29,
+	0x71, 0x92, 0x7c, 0x26, 0xb9, 0x86, 0x9f, 0xdf, 0x74, 0xb8, 0xcb, 0xd4,
+	0xc2, 0xd2, 0x66, 0xfa, 0x4f, 0x02, 0xc1, 0x62, 0x0b, 0x57, 0xac, 0x56,
+	0x19, 0x8e, 0xb1, 0x93, 0x63, 0x3e, 0x11, 0xbe, 0x59, 0x30, 0x37, 0xed,
+	0x5a, 0xee, 0x91, 0x31, 0xc8, 0x7d, 0x3f, 0xba, 0x1c, 0x85, 0x1c, 0x53,
+	0xf2, 0xeb, 0xb3, 0x50, 0x28, 0xf2, 0x64, 0x6c, 0x4a, 0xe9, 0xc6, 0x71,
+	0xca, 0xce, 0xd1, 0x50, 0x45, 0x1f, 0x17, 0x7b, 0xe8, 0xa2, 0xdd, 0xbd,
+	0xcd, 0x58, 0xda, 0x85, 0x03, 0xfa, 0x42, 0x4c, 0x84, 0x27, 0xcd, 0xad,
+	0x35, 0x3e, 0xfc, 0xa4, 0xbe, 0x19, 0x89, 0x81, 0x62, 0xf8, 0xca, 0x6f,
+	0xa5, 0xcd, 0x29, 0x14, 0xe9, 0x2e, 0xdf, 0x2b, 0xa8, 0xc6, 0xae, 0x70,
+	0x9d, 0x4a, 0x57, 0x09, 0x5f, 0x71, 0xe0, 0x8d, 0x46, 0x7d, 0x2c, 0x89,
+	0xab, 0x1d, 0xb8, 0xc4, 0x87, 0x87, 0xc3, 0x8d, 0x0e, 0x9f, 0xf5, 0x2c,
+	0x9b, 0x6d, 0x63, 0xaf, 0x84, 0xe5, 0x19, 0x17, 0xce, 0x7b, 0x77, 0x27,
+	0x39, 0x4a, 0x27, 0x0e, 0xd2, 0xc6, 0x0a, 0x75, 0x3d, 0xf6, 0x91, 0x33,
+	0x5a, 0x5d, 0x4c, 0x1b, 0x6b, 0x88, 0x04, 0x9b, 0xee, 0x67, 0x32, 0x2c,
+	0x69, 0x0e, 0x8e, 0x7f, 0x8c, 0x69, 0xda, 0x83, 0xd4, 0x6c, 0x84, 0x3d,
+	0x67, 0x86, 0xef, 0xa4, 0x2d, 0x58, 0xf7, 0x99, 0xb0, 0xd6, 0x6d, 0x7c,
+	0x58, 0x9d, 0x70, 0x91, 0x73, 0x2e, 0x35, 0xed, 0xf1, 0xfe, 0x5e, 0x6c,
+	0xd5, 0x58, 0x93, 0xdd, 0x2f, 0xda, 0x38, 0x62, 0xa8, 0xbb, 0x1a, 0x0f,
+	0xa9, 0xef, 0x09, 0xaf, 0xc8, 0xdb, 0x40, 0x7d, 0x42, 0x3d, 0xd0, 0xa8,
+	0x50, 0x41, 0x39, 0x1d, 0xcb, 0xe8, 0xea, 0xdb, 0xf1, 0x2d, 0xb1, 0x7c,
+	0xe6, 0xf4, 0x57, 0xc8, 0x89, 0x47, 0x12, 0x7a, 0xd7, 0x04, 0x71, 0xb2,
+	0x6f, 0xd9, 0x66, 0x1e, 0x73, 0x30, 0xee, 0x7a, 0xf0, 0xe2, 0xa0, 0xac,
+	0x09, 0x14, 0xe1, 0x9d, 0xb4, 0xcd, 0xc1, 0xde, 0xc8, 0xd4, 0x51, 0x56,
+	0xd2, 0x8f, 0xd8, 0x83, 0xc8, 0x54, 0xe2, 0x22, 0xfd, 0xce, 0xae, 0x8d,
+	0x2e, 0x38, 0xd8, 0xd8, 0xa5, 0x1c, 0x41, 0xb1, 0xa7, 0x7c, 0xdc, 0x1c,
+	0x6e, 0xc3, 0x2d, 0x61, 0x23, 0xea, 0x6c, 0x16, 0x9b, 0x0c, 0x8e, 0xaf,
+	0x26, 0x77, 0xba, 0x49, 0xe9, 0x53, 0x37, 0x22, 0x67, 0x43, 0xf0, 0x1c,
+	0xce, 0x88, 0x0d, 0x69, 0x9e, 0x67, 0x32, 0xf7, 0x9a, 0x5b, 0xef, 0x10,
+	0x5b, 0x92, 0x5c, 0x19, 0x46, 0x59, 0x62, 0x82, 0xb9, 0x56, 0x63, 0x7e,
+	0xd0, 0x90, 0xae, 0x8c, 0x31, 0x3f, 0xb8, 0x71, 0x5f, 0xfd, 0x71, 0x4c,
+	0x5a, 0x73, 0x9e, 0xc0, 0x9e, 0xd4, 0x17, 0xe6, 0x5a, 0xc6, 0xb3, 0xf2,
+	0xf9, 0xe4, 0xda, 0x55, 0x26, 0x06, 0x69, 0x9b, 0x8f, 0x50, 0xa7, 0xf2,
+	0x2c, 0xd2, 0x99, 0x99, 0x0a, 0xdb, 0x9a, 0x14, 0xe3, 0xc1, 0xb8, 0xb2,
+	0xf7, 0x14, 0x8f, 0x5c, 0x66, 0x63, 0xe0, 0xa9, 0xcb, 0xed, 0x7d, 0xec,
+	0x35, 0x96, 0x4d, 0x1c, 0x3d, 0x37, 0xfe, 0x16, 0xec, 0xd9, 0xd1, 0x48,
+	0x1d, 0xa6, 0x51, 0x34, 0x53, 0x72, 0x15, 0xb9, 0x69, 0x52, 0x78, 0x9c,
+	0x69, 0xde, 0x1b, 0x0e, 0x74, 0xbd, 0x4e, 0x5f, 0xe9, 0x19, 0x15, 0x9c,
+	0x9f, 0x32, 0x8d, 0x72, 0xc6, 0x53, 0xc7, 0x59, 0xb3, 0x42, 0xef, 0x37,
+	0x37, 0x2d, 0xb7, 0x65, 0xbf, 0x3e, 0x71, 0x98, 0xf1, 0xfb, 0x53, 0xd3,
+	0xa3, 0x07, 0xa6, 0xee, 0x50, 0x2e, 0xb4, 0x8f, 0x88, 0x1f, 0xb6, 0xe3,
+	0xc1, 0x08, 0x73, 0x5e, 0xda, 0x87, 0xfb, 0x89, 0x55, 0x92, 0x16, 0x4f,
+	0x70, 0xe0, 0xb6, 0x6b, 0x7c, 0xf8, 0xce, 0xc8, 0xb3, 0x98, 0x24, 0x8f,
+	0x3f, 0xd1, 0xa3, 0x8f, 0x0f, 0x70, 0x2e, 0x67, 0xc8, 0xdf, 0x77, 0x25,
+	0x4f, 0x23, 0xcd, 0xfb, 0x0e, 0xf5, 0xea, 0x2b, 0x3c, 0xce, 0x09, 0x3c,
+	0xd6, 0xff, 0xf6, 0x2c, 0x59, 0x03, 0xdb, 0xc2, 0x39, 0xf5, 0x70, 0x3c,
+	0xc6, 0xa8, 0x7f, 0x45, 0xad, 0xa3, 0x11, 0xdb, 0x47, 0x6d, 0x5c, 0xe1,
+	0xd4, 0x9f, 0x52, 0x9b, 0x35, 0x39, 0x4f, 0x3c, 0x9d, 0x90, 0xba, 0xd4,
+	0xc7, 0x23, 0xc3, 0xdd, 0x80, 0xa7, 0xd7, 0x5c, 0xd8, 0x19, 0xa9, 0x33,
+	0xba, 0x41, 0x1e, 0x57, 0xbe, 0x10, 0x25, 0x11, 0xa9, 0x67, 0x3e, 0x10,
+	0xb9, 0x2e, 0xb9, 0x81, 0xf2, 0x31, 0xbe, 0xef, 0x82, 0xc1, 0x71, 0xfa,
+	0x7d, 0x0b, 0x9d, 0xfe, 0xf1, 0x24, 0x6d, 0x71, 0xcb, 0x0e, 0x7d, 0x2a,
+	0x44, 0x7c, 0x93, 0x67, 0x3d, 0x9b, 0xa2, 0x70, 0xac, 0x31, 0xda, 0x33,
+	0x87, 0xf6, 0x17, 0x99, 0x2f, 0x6b, 0x1c, 0xc1, 0xd6, 0xa5, 0x8e, 0x68,
+	0xc1, 0x27, 0x0b, 0xda, 0x50, 0x37, 0x3f, 0x1f, 0xe1, 0xf9, 0xf2, 0x0e,
+	0x8c, 0x62, 0xc3, 0xc1, 0xb8, 0xd7, 0xa6, 0xfc, 0x2d, 0xa5, 0x8e, 0xe0,
+	0xd8, 0x62, 0xe5, 0x6f, 0x9a, 0xeb, 0x50, 0x18, 0x69, 0x74, 0x79, 0xcc,
+	0xe1, 0x56, 0x3c, 0x38, 0x5a, 0xe1, 0xf9, 0x7c, 0x98, 0xb8, 0x9d, 0x31,
+	0xdf, 0x1c, 0xee, 0xc4, 0x3b, 0x99, 0xb0, 0x67, 0x8a, 0x36, 0x9b, 0x18,
+	0xf8, 0x26, 0x36, 0xef, 0x90, 0x7a, 0xb8, 0x5a, 0xdc, 0x2d, 0x35, 0x9f,
+	0x7a, 0xc6, 0xbc, 0xbb, 0xc2, 0xc6, 0x17, 0x65, 0xfa, 0x16, 0x3c, 0x61,
+	0xe1, 0x87, 0x22, 0x94, 0xea, 0x82, 0x89, 0x6c, 0x0c, 0x91, 0x18, 0xf0,
+	0xa7, 0xa3, 0x68, 0xb8, 0xdc, 0x96, 0x83, 0x1c, 0x2f, 0xa6, 0x8e, 0xec,
+	0x73, 0xdb, 0x89, 0x2f, 0x0a, 0xf5, 0xff, 0x65, 0xde, 0x9c, 0xc5, 0x17,
+	0xff, 0x7e, 0xec, 0x79, 0x6f, 0x3a, 0xa6, 0x49, 0xec, 0x91, 0x36, 0xaa,
+	0x51, 0x9e, 0x6d, 0xa3, 0xd7, 0xc2, 0xe2, 0x99, 0x2c, 0x16, 0xdf, 0x3c,
+	0xcb, 0x8e, 0x05, 0x93, 0xe6, 0x40, 0xd0, 0x87, 0x4d, 0xf5, 0xbf, 0xa0,
+	0xae, 0x65, 0x3c, 0x46, 0x48, 0xde, 0xd7, 0x51, 0xd6, 0xfc, 0xd4, 0xce,
+	0x48, 0x8d, 0xbf, 0xe5, 0x09, 0x8e, 0xf2, 0xaa, 0x6e, 0x0f, 0xd2, 0xd6,
+	0x1e, 0xa8, 0xc4, 0x10, 0xbf, 0xb6, 0x1f, 0xcd, 0x94, 0x63, 0x23, 0x3a,
+	0x98, 0x77, 0x82, 0x8e, 0x66, 0x62, 0xa9, 0x67, 0x31, 0x67, 0x97, 0x3f,
+	0x54, 0xe3, 0x80, 0x76, 0xe6, 0xda, 0x67, 0x51, 0xbd, 0xaf, 0xd7, 0x8c,
+	0x2e, 0x63, 0xbc, 0x95, 0x78, 0xad, 0x37, 0x93, 0x1b, 0x3d, 0x8b, 0x82,
+	0x5d, 0x2e, 0x0c, 0x32, 0x0f, 0x75, 0x8e, 0xc2, 0xd7, 0xb0, 0xe0, 0x59,
+	0x94, 0xef, 0x5b, 0x7e, 0xb9, 0x8d, 0x41, 0xc4, 0xf6, 0xdc, 0x18, 0xaf,
+	0x8f, 0xd1, 0xbf, 0x6d, 0x1b, 0x5c, 0x1b, 0x0e, 0x8c, 0x1f, 0x85, 0x1b,
+	0xf3, 0xe6, 0x39, 0x89, 0x87, 0x4c, 0xac, 0x09, 0x7f, 0x61, 0xbe, 0x66,
+	0xbd, 0xb3, 0x61, 0x0d, 0xb9, 0x5e, 0x23, 0x7a, 0x69, 0xf3, 0x0d, 0x65,
+	0x0a, 0x8f, 0xd0, 0xe6, 0x4f, 0xcf, 0x6f, 0x52, 0x86, 0xe5, 0x23, 0xb9,
+	0x75, 0x25, 0x62, 0xc5, 0xc6, 0x09, 0x6c, 0x4d, 0x5f, 0x68, 0xd7, 0xb4,
+	0xb5, 0xcc, 0xbc, 0xcb, 0x65, 0xcd, 0xfe, 0xde, 0x70, 0x27, 0xfe, 0x9e,
+	0xf1, 0xe7, 0x29, 0x7b, 0x4f, 0x3b, 0xbc, 0xdf, 0x11, 0x7d, 0x30, 0x8f,
+	0xfa, 0x4f, 0x34, 0x04, 0x8d, 0xab, 0x1d, 0x41, 0xe6, 0x3c, 0xbb, 0x9e,
+	0xdb, 0x6d, 0xe9, 0x45, 0x7c, 0x45, 0x30, 0x54, 0xd8, 0xe3, 0x18, 0x3e,
+	0x92, 0xb5, 0xcf, 0xd3, 0xe8, 0x88, 0xff, 0xf5, 0xf4, 0xdc, 0x72, 0x39,
+	0xef, 0x46, 0x01, 0xf9, 0xd7, 0x83, 0x59, 0x9c, 0x56, 0xa6, 0xb7, 0x4d,
+	0x2f, 0xb5, 0x70, 0xf5, 0x1d, 0x56, 0x5f, 0x4e, 0xfd, 0x56, 0xfa, 0x81,
+	0xc4, 0x5f, 0x7a, 0x62, 0x77, 0x17, 0xbc, 0xc3, 0x1a, 0x3e, 0xe8, 0xde,
+	0x83, 0xfc, 0x61, 0x89, 0xc7, 0xb9, 0x58, 0x2c, 0x98, 0xd9, 0x9d, 0x5d,
+	0xbf, 0xb8, 0xf5, 0x32, 0x1b, 0x4f, 0x27, 0x45, 0x36, 0xb4, 0x85, 0x9f,
+	0x5c, 0x7a, 0xf1, 0x6f, 0xc1, 0x50, 0x39, 0x0c, 0xac, 0x31, 0x66, 0x98,
+	0x0b, 0xeb, 0x1b, 0xea, 0x42, 0x1d, 0xaa, 0x98, 0xb8, 0xc8, 0x20, 0x6f,
+	0x11, 0x2c, 0x5c, 0x82, 0x81, 0x94, 0xbe, 0x71, 0x35, 0x71, 0xf0, 0xcb,
+	0x91, 0x7c, 0x44, 0x2d, 0x7e, 0xd3, 0xb1, 0xb8, 0x8c, 0x98, 0x26, 0x2f,
+	0x22, 0x75, 0x8d, 0x79, 0xea, 0xd8, 0x39, 0x9e, 0x20, 0xd8, 0xd8, 0xb6,
+	0x8d, 0xcd, 0x03, 0xb2, 0x77, 0x22, 0xf3, 0x6b, 0xb0, 0xfa, 0x32, 0xb2,
+	0x7d, 0x15, 0xb2, 0xaf, 0x9b, 0xbb, 0x5b, 0x2d, 0xbf, 0x73, 0x25, 0x24,
+	0x8f, 0x32, 0xa7, 0x13, 0x7f, 0x77, 0x84, 0xeb, 0x62, 0x37, 0x33, 0x16,
+	0x3f, 0x19, 0xff, 0xc4, 0x34, 0x96, 0xda, 0x6d, 0x1d, 0x4a, 0xc9, 0x18,
+	0xf4, 0x8d, 0x6d, 0xec, 0xfb, 0x48, 0xe4, 0x43, 0x33, 0xd6, 0x6a, 0xf7,
+	0xed, 0xb2, 0xfa, 0x3e, 0x6e, 0x8e, 0x55, 0xc8, 0x6f, 0xf2, 0x52, 0xe2,
+	0xec, 0x87, 0x89, 0x19, 0xf2, 0x12, 0x1f, 0x62, 0xe1, 0x7e, 0x0d, 0xa3,
+	0xf1, 0x80, 0x6f, 0x9e, 0xe3, 0x2b, 0xea, 0x79, 0xeb, 0xbc, 0x60, 0x63,
+	0xff, 0xba, 0x23, 0xa8, 0x6b, 0xba, 0xca, 0x71, 0x8d, 0x9a, 0xac, 0xf0,
+	0x12, 0x3b, 0xc8, 0xda, 0x69, 0x18, 0x1d, 0x49, 0x7f, 0x6a, 0xb1, 0x43,
+	0xc3, 0x2d, 0xdd, 0x01, 0xce, 0x4f, 0xc3, 0xed, 0xc3, 0x3e, 0x2c, 0x1b,
+	0xde, 0x84, 0x5b, 0xe3, 0x75, 0xa1, 0x5e, 0xf5, 0x2d, 0x95, 0xb6, 0xee,
+	0x17, 0x3c, 0xcd, 0x40, 0x9b, 0xd0, 0x89, 0x89, 0xf3, 0x89, 0xd3, 0xed,
+	0x3e, 0xab, 0xb3, 0xf3, 0x7c, 0xd8, 0xf2, 0x81, 0xa3, 0x59, 0x1f, 0x58,
+	0x62, 0x5d, 0xbb, 0x2d, 0xae, 0x60, 0xea, 0x3a, 0x1e, 0xc9, 0xcc, 0x53,
+	0x4b, 0xcb, 0xc3, 0xe4, 0x7a, 0x9b, 0xf0, 0x44, 0x77, 0xbd, 0x6a, 0x28,
+	0x37, 0xa4, 0xf6, 0x1a, 0xa5, 0x09, 0xbd, 0xf5, 0x15, 0xf5, 0x00, 0xa2,
+	0x96, 0x9d, 0x55, 0x90, 0x63, 0x8a, 0xae, 0xf3, 0xa5, 0xd6, 0xd6, 0xe3,
+	0x69, 0x96, 0x35, 0x85, 0x54, 0xe4, 0x85, 0xb8, 0x3e, 0x36, 0x8e, 0x65,
+	0x0a, 0x33, 0xa5, 0x3f, 0xc1, 0x59, 0xe0, 0x75, 0xd6, 0xfa, 0x90, 0xef,
+	0xfb, 0x98, 0x09, 0x83, 0x68, 0x7d, 0x4e, 0xb3, 0x9e, 0x6e, 0x27, 0x86,
+	0x35, 0xaa, 0x64, 0x0d, 0x50, 0xae, 0xbb, 0x94, 0xb1, 0xc0, 0x1e, 0x57,
+	0x8f, 0xc5, 0x1f, 0x1e, 0x31, 0x6d, 0xfe, 0x90, 0x3b, 0xbf, 0xfe, 0x52,
+	0x3b, 0x5e, 0x0b, 0x07, 0xd8, 0x63, 0xda, 0x1c, 0x80, 0xb9, 0x4c, 0x17,
+	0x8e, 0x6e, 0x71, 0xc9, 0xb0, 0xc1, 0x18, 0x79, 0x70, 0x97, 0xb2, 0xf0,
+	0x73, 0x43, 0x50, 0x6c, 0xb5, 0x11, 0x4f, 0xee, 0x13, 0xbf, 0xfa, 0x63,
+	0x5d, 0x56, 0x50, 0x97, 0x3b, 0x13, 0x1a, 0xf2, 0x69, 0x37, 0x27, 0xc2,
+	0x75, 0xe3, 0x4f, 0xe1, 0x2f, 0xe0, 0x9b, 0xd9, 0x4a, 0x1b, 0x34, 0xc8,
+	0xa3, 0x4b, 0xf0, 0x52, 0x4a, 0x5f, 0x77, 0x93, 0x43, 0xfc, 0x8c, 0xb1,
+	0xbb, 0xd5, 0xd6, 0x45, 0x3c, 0x29, 0xef, 0x44, 0xe8, 0xd8, 0x9e, 0x6f,
+	0xb5, 0x37, 0xf6, 0x45, 0x07, 0xb9, 0xe2, 0xe1, 0x9d, 0x85, 0xb8, 0x79,
+	0xe7, 0x6f, 0xf1, 0xad, 0xa5, 0x51, 0xde, 0xeb, 0x44, 0x6d, 0xc3, 0x1a,
+	0x4c, 0x5a, 0x79, 0xc7, 0x81, 0xd2, 0xde, 0x63, 0xb0, 0x6b, 0xc0, 0x75,
+	0x14, 0x25, 0xde, 0x21, 0x1e, 0x93, 0x76, 0x9c, 0xcc, 0x73, 0x92, 0x5f,
+	0x4d, 0x6c, 0x09, 0xbb, 0xf1, 0x4c, 0x85, 0x89, 0x07, 0xc3, 0xcb, 0xb1,
+	0x33, 0xf9, 0x11, 0x8c, 0xf2, 0x7a, 0xc1, 0x69, 0xfc, 0xad, 0xa1, 0xfe,
+	0x3a, 0x85, 0xce, 0xab, 0x38, 0x8f, 0xab, 0x82, 0xe1, 0x25, 0xc2, 0x93,
+	0xad, 0xf9, 0xcb, 0xfd, 0x32, 0xff, 0xc3, 0xe4, 0x40, 0x32, 0x06, 0xb1,
+	0x8f, 0xff, 0x4d, 0xee, 0x24, 0x73, 0x16, 0xfb, 0x8c, 0xd3, 0x3e, 0xeb,
+	0xa6, 0x16, 0xab, 0x27, 0x31, 0x79, 0xc9, 0x55, 0xd6, 0xfa, 0xc3, 0xc5,
+	0x1c, 0xdb, 0x8a, 0xa5, 0x5e, 0xc0, 0x96, 0x45, 0x0c, 0x0f, 0x78, 0x2f,
+	0xce, 0x8d, 0x3e, 0x18, 0x99, 0xb6, 0xd9, 0xb2, 0x1e, 0xe1, 0x4c, 0xc8,
+	0x7d, 0x72, 0x7f, 0xee, 0xde, 0x9c, 0xcf, 0xff, 0xc8, 0x8a, 0xc9, 0x5d,
+	0xc4, 0xc7, 0x8f, 0x32, 0x76, 0x64, 0xe2, 0x92, 0x17, 0x98, 0xd7, 0x95,
+	0x9d, 0x3b, 0x1e, 0x8c, 0x04, 0x29, 0xb7, 0x60, 0x68, 0x40, 0x85, 0x3d,
+	0x47, 0x33, 0x8c, 0xf5, 0x3d, 0xb9, 0xf8, 0x61, 0xb7, 0x73, 0x32, 0x9c,
+	0x6b, 0xa7, 0x05, 0xc9, 0x1d, 0x67, 0x19, 0x17, 0x1a, 0x2f, 0x17, 0xde,
+	0x9b, 0x1c, 0x6d, 0xcc, 0xc6, 0x09, 0xdb, 0x7f, 0xb4, 0xac, 0x2d, 0xa4,
+	0x06, 0xe4, 0xb9, 0xe9, 0xf3, 0xfa, 0x3b, 0x3f, 0x66, 0x89, 0x65, 0x12,
+	0xd3, 0xc4, 0x57, 0x4d, 0x73, 0x63, 0x38, 0xa0, 0xbd, 0xc9, 0x38, 0x79,
+	0x73, 0x7d, 0xd9, 0x74, 0xb4, 0xcc, 0x8e, 0x4d, 0x83, 0xe7, 0xe2, 0x5c,
+	0x09, 0xde, 0x48, 0x79, 0xf0, 0x7e, 0x64, 0xaf, 0x19, 0x5b, 0x2e, 0xf2,
+	0x97, 0x3e, 0xb4, 0x3f, 0x58, 0x07, 0xf8, 0x1b, 0x73, 0xb1, 0x75, 0xae,
+	0x7c, 0x8e, 0x3d, 0xbe, 0x12, 0xe2, 0x41, 0x0f, 0x92, 0xe1, 0x5d, 0x8c,
+	0xbb, 0xcb, 0xe9, 0xa3, 0x43, 0xf0, 0x7d, 0xc3, 0xce, 0x43, 0x73, 0x12,
+	0xc4, 0xf5, 0x71, 0x37, 0x7e, 0x6d, 0xfd, 0x96, 0xbd, 0x4b, 0x1d, 0xfb,
+	0xe3, 0x5f, 0xc1, 0x7e, 0xcb, 0xbf, 0x7c, 0x7f, 0xb0, 0x0e, 0xf5, 0xf1,
+	0xf4, 0xb2, 0xac, 0x7f, 0x3d, 0x92, 0xfc, 0xad, 0xe9, 0xd0, 0x4b, 0x8d,
+	0x8a, 0xe6, 0x12, 0x7c, 0xb4, 0xc3, 0x30, 0xab, 0xad, 0x67, 0xb9, 0xf5,
+	0xa6, 0x45, 0xaa, 0x04, 0x1f, 0x0c, 0x84, 0x79, 0x5e, 0x9e, 0xf1, 0xc9,
+	0x44, 0xae, 0xe8, 0xde, 0x40, 0x5b, 0x6b, 0xc3, 0xe7, 0xbb, 0x65, 0x0d,
+	0xcc, 0x1f, 0xae, 0x57, 0x66, 0xfb, 0x6d, 0x0d, 0x51, 0x5f, 0x09, 0xfc,
+	0x6d, 0xcf, 0x53, 0xc6, 0x27, 0x22, 0xfe, 0xb1, 0xa7, 0xa0, 0x47, 0xcf,
+	0xa8, 0x7a, 0xac, 0xcb, 0x10, 0xfe, 0xef, 0x0f, 0xe1, 0x57, 0xf4, 0xdb,
+	0x7b, 0x83, 0x21, 0x7c, 0x62, 0xed, 0x63, 0xd4, 0xc3, 0x91, 0xf0, 0xc7,
+	0x16, 0xf1, 0xfc, 0x69, 0xfe, 0x2e, 0x48, 0x84, 0x71, 0x2a, 0x53, 0x81,
+	0xf2, 0x44, 0x23, 0x3e, 0xcf, 0x7c, 0x05, 0x1f, 0xef, 0x54, 0x18, 0x0c,
+	0x7e, 0x05, 0xc7, 0x07, 0xdb, 0x70, 0x72, 0x37, 0x98, 0xdf, 0x1e, 0x8f,
+	0x44, 0xe8, 0x9f, 0x47, 0x74, 0xb3, 0x7d, 0x63, 0x78, 0x25, 0xca, 0xca,
+	0xfd, 0xe1, 0x18, 0x79, 0x55, 0x32, 0x69, 0xc7, 0x7d, 0xb7, 0x2e, 0x5c,
+	0x99, 0xd7, 0xee, 0xdb, 0x3b, 0xdb, 0xce, 0x53, 0x15, 0x6c, 0x53, 0xe6,
+	0xf6, 0x6d, 0xe6, 0x1e, 0x7b, 0x0d, 0xc9, 0x91, 0x78, 0x13, 0xb7, 0x76,
+	0xaf, 0xc5, 0xad, 0x56, 0xdc, 0x11, 0x7b, 0x0f, 0x61, 0x24, 0xfe, 0x5f,
+	0x70, 0x6f, 0x99, 0xff, 0x02, 0x39, 0xff, 0xd8, 0x5c, 0x56, 0x91, 0x5b,
+	0x13, 0xc8, 0xf9, 0xe3, 0x9c, 0x8b, 0xf4, 0x50, 0xa0, 0xef, 0x9d, 0xb6,
+	0xd7, 0x0d, 0x97, 0xcf, 0x96, 0x9c, 0xb0, 0x39, 0x79, 0x1e, 0x13, 0x74,
+	0x0c, 0xb4, 0x9a, 0xad, 0x16, 0x6e, 0x10, 0x7d, 0xe5, 0xec, 0x41, 0xc7,
+	0xb1, 0xb8, 0xc4, 0xb8, 0x2b, 0x4c, 0xaf, 0x25, 0xff, 0x5a, 0xea, 0x6f,
+	0x86, 0xec, 0xe3, 0x72, 0x8c, 0x86, 0x3c, 0xdf, 0x90, 0x0a, 0xaa, 0x9b,
+	0xcc, 0x68, 0xd5, 0xa5, 0x59, 0x7f, 0x38, 0xdf, 0x57, 0xb1, 0xfe, 0xc6,
+	0xf4, 0xad, 0x7f, 0x34, 0x9e, 0xdc, 0x3a, 0x8e, 0x1c, 0x3b, 0x31, 0xdb,
+	0xae, 0x99, 0x14, 0x3b, 0x95, 0xbe, 0x1a, 0x2c, 0x5b, 0xb5, 0xb1, 0x84,
+	0xdd, 0x4e, 0xb7, 0x65, 0x3b, 0x2b, 0xcc, 0xc5, 0x96, 0x3f, 0xbe, 0xca,
+	0xeb, 0xc5, 0x86, 0x2e, 0x67, 0x6e, 0xb1, 0xcf, 0xef, 0xb1, 0xce, 0xff,
+	0xcf, 0xe9, 0xc5, 0x7f, 0xd4, 0x8f, 0xb4, 0xf1, 0x9f, 0x38, 0x56, 0xdd,
+	0xda, 0x73, 0xf6, 0xe8, 0xfa, 0xd8, 0x3a, 0xda, 0x71, 0xd1, 0xfc, 0xe7,
+	0xbe, 0x57, 0x44, 0x8c, 0xfc, 0x66, 0xa4, 0xb6, 0x4b, 0xc3, 0xbd, 0x3c,
+	0x3f, 0x36, 0xbf, 0x0c, 0x97, 0x61, 0x46, 0xb6, 0xbd, 0xe4, 0x40, 0x26,
+	0x9b, 0x57, 0x2f, 0x6c, 0x4b, 0xda, 0xa9, 0x65, 0x3b, 0x92, 0x47, 0xea,
+	0x31, 0x10, 0xf7, 0xe0, 0x88, 0x26, 0xed, 0xff, 0x90, 0xc7, 0x45, 0xbe,
+	0xf2, 0x59, 0x9a, 0x9d, 0xbf, 0x7c, 0x0f, 0xf2, 0x7b, 0x3d, 0x73, 0x58,
+	0x09, 0x63, 0xb1, 0xe8, 0x79, 0x13, 0x3e, 0xec, 0xae, 0x1b, 0x73, 0x31,
+	0x77, 0xc2, 0xb2, 0xe9, 0x0a, 0x3c, 0x13, 0xf7, 0xa7, 0xb7, 0xa2, 0x2e,
+	0xd4, 0xe8, 0x5c, 0x66, 0xa6, 0x35, 0x7b, 0x3d, 0xc5, 0xbe, 0x77, 0xee,
+	0x05, 0xed, 0x04, 0xb2, 0x6d, 0xd7, 0xf0, 0x33, 0xb7, 0x3e, 0x59, 0x91,
+	0x5d, 0xd7, 0x10, 0xae, 0x2f, 0xfc, 0x5f, 0xf6, 0xff, 0xa2, 0x6a, 0x59,
+	0xbc, 0x45, 0xdd, 0x12, 0x97, 0x3d, 0x40, 0x47, 0x5c, 0xe6, 0x17, 0x68,
+	0x30, 0xf1, 0xbd, 0xc8, 0xf9, 0xfa, 0xfa, 0x54, 0x23, 0x21, 0xeb, 0xc8,
+	0x12, 0xb5, 0x2d, 0xfe, 0x99, 0xb9, 0xc6, 0xaa, 0x17, 0x9d, 0x89, 0xcd,
+	0xf5, 0x2e, 0xe4, 0x8f, 0x78, 0x50, 0x36, 0x54, 0x84, 0xbc, 0x7e, 0x1d,
+	0x33, 0x47, 0xbe, 0xca, 0x58, 0x67, 0xad, 0xd1, 0xb5, 0x48, 0x6d, 0x5a,
+	0x61, 0x73, 0xe3, 0xae, 0x9b, 0x83, 0xfe, 0xe8, 0x95, 0xc4, 0x63, 0x2e,
+	0xe2, 0x32, 0x03, 0xd6, 0x9f, 0xc7, 0x49, 0xcc, 0xbb, 0x9a, 0x79, 0xf9,
+	0x9e, 0x88, 0xf1, 0x70, 0x01, 0xfc, 0xc6, 0xfd, 0xf0, 0x6f, 0x9c, 0xe9,
+	0x30, 0x4c, 0xc6, 0x48, 0x75, 0x5b, 0x0d, 0x33, 0x40, 0x8d, 0x8c, 0xa9,
+	0x1d, 0x4f, 0x44, 0xda, 0xb1, 0x87, 0xff, 0x2f, 0x47, 0x0a, 0xb3, 0xef,
+	0x4f, 0x29, 0x26, 0x0e, 0xd6, 0x7d, 0x47, 0x95, 0x1e, 0xde, 0xa7, 0xf4,
+	0xa6, 0x2d, 0xca, 0xef, 0xfd, 0xaa, 0xd2, 0x71, 0x43, 0xc6, 0x1f, 0x5d,
+	0xe8, 0xf0, 0xb7, 0x54, 0x3b, 0x53, 0xb8, 0x31, 0x13, 0xc2, 0x92, 0xcc,
+	0x12, 0x6c, 0x96, 0x75, 0xba, 0xd1, 0xb0, 0x3c, 0xb7, 0x2d, 0xf6, 0x62,
+	0xc4, 0x94, 0x5d, 0x73, 0xf8, 0x6d, 0x6b, 0x0f, 0x47, 0xfc, 0x56, 0x30,
+	0xb4, 0xa1, 0xd6, 0x36, 0x96, 0xe0, 0xc3, 0x14, 0xf0, 0x64, 0x26, 0x0f,
+	0x8f, 0x0f, 0xa2, 0xc6, 0x03, 0x67, 0x95, 0x0b, 0xb5, 0x29, 0x07, 0x9e,
+	0xab, 0x2d, 0xc7, 0x0f, 0x29, 0xff, 0x2e, 0x3c, 0xa7, 0x77, 0xc4, 0xe6,
+	0x90, 0x6f, 0x1d, 0x1e, 0x74, 0x23, 0x9d, 0x96, 0x1a, 0xa9, 0x22, 0xf4,
+	0xa7, 0xc3, 0xf2, 0x0c, 0x2e, 0xd9, 0x19, 0x6a, 0x3d, 0xc4, 0xdc, 0x5d,
+	0xd0, 0xd8, 0x46, 0x05, 0xb1, 0x9b, 0xce, 0xff, 0x10, 0xff, 0xeb, 0xf9,
+	0xdf, 0x84, 0x7b, 0xba, 0x0d, 0x73, 0xa6, 0x2e, 0x7b, 0x95, 0x25, 0x78,
+	0x9f, 0xfc, 0x75, 0x35, 0x73, 0x96, 0xbb, 0x81, 0xed, 0x58, 0x72, 0x2a,
+	0xc1, 0xc7, 0xe4, 0x22, 0x99, 0x48, 0x09, 0x4e, 0xa7, 0xbf, 0x6c, 0x6d,
+	0x55, 0x9e, 0x13, 0x97, 0x9a, 0xe3, 0x50, 0x76, 0x5f, 0xe5, 0x90, 0x7a,
+	0x79, 0x18, 0xea, 0x5b, 0x35, 0x22, 0xab, 0x76, 0x4c, 0xcd, 0xb7, 0x9e,
+	0x45, 0x6b, 0x3b, 0xe1, 0x2c, 0xa4, 0x6c, 0xfc, 0xbe, 0x6a, 0xa7, 0x8e,
+	0x37, 0x32, 0xc2, 0xcd, 0xf4, 0x75, 0x23, 0xb2, 0x0f, 0x16, 0xa1, 0xe1,
+	0x96, 0x49, 0x0d, 0x43, 0x17, 0x12, 0x7a, 0x39, 0x5e, 0xdb, 0x25, 0xf5,
+	0xf5, 0x07, 0x22, 0xf1, 0x6e, 0x73, 0xe1, 0x63, 0x11, 0x7f, 0x4b, 0xaf,
+	0x32, 0x96, 0x16, 0x41, 0xf4, 0xa3, 0xfb, 0xdc, 0x2a, 0x84, 0xe7, 0x33,
+	0xed, 0xc8, 0x8f, 0x14, 0xb3, 0x4d, 0xbf, 0xef, 0x24, 0x4a, 0xb0, 0x39,
+	0xa5, 0x6b, 0x03, 0x6c, 0xe7, 0xfa, 0xf0, 0x31, 0xcb, 0xc6, 0x3a, 0x47,
+	0x4b, 0xc8, 0xed, 0x34, 0xcc, 0x98, 0xff, 0x96, 0x39, 0x59, 0x29, 0xe3,
+	0x45, 0x75, 0xae, 0x2e, 0x4e, 0x64, 0xfb, 0x7d, 0x79, 0x76, 0x34, 0xdf,
+	0x56, 0xb2, 0xd8, 0x4a, 0x7b, 0xdc, 0x85, 0x39, 0x96, 0x7d, 0x38, 0x88,
+	0x1d, 0x8a, 0x50, 0x66, 0xd9, 0x88, 0xf2, 0xcc, 0x6c, 0xfe, 0xac, 0xef,
+	0x7b, 0xbd, 0x0a, 0x1b, 0x1b, 0x8e, 0x98, 0x58, 0x26, 0xed, 0xdc, 0x90,
+	0x7d, 0xd7, 0xd1, 0x6a, 0x9f, 0xbd, 0xc6, 0x8b, 0x58, 0x79, 0xb3, 0xa7,
+	0xfe, 0xfa, 0x84, 0xf3, 0x33, 0x27, 0xb9, 0xc2, 0xaa, 0x46, 0x79, 0xce,
+	0xc4, 0x53, 0xff, 0xad, 0x11, 0x4f, 0xfd, 0x8a, 0xc4, 0x98, 0xaa, 0x6e,
+	0x0e, 0xee, 0xa9, 0x76, 0x7a, 0xea, 0xbf, 0x36, 0x72, 0xee, 0x7a, 0xda,
+	0x4d, 0x3b, 0x46, 0x69, 0x27, 0x5a, 0xb3, 0x3c, 0xcb, 0xe4, 0x0f, 0x7d,
+	0xa6, 0x64, 0x7d, 0x55, 0xea, 0xde, 0x74, 0x6c, 0x18, 0x3e, 0x60, 0xc6,
+	0xaa, 0x64, 0xed, 0xc9, 0xc9, 0x71, 0x7c, 0x81, 0x27, 0xd2, 0xe7, 0xef,
+	0x6b, 0xa9, 0x91, 0x35, 0xa3, 0x42, 0xa9, 0xf9, 0x91, 0xf7, 0x49, 0x85,
+	0x6f, 0xa1, 0x2c, 0x0a, 0x94, 0xec, 0xfb, 0xe9, 0x38, 0x9e, 0x59, 0xe5,
+	0x93, 0x5c, 0xb3, 0x75, 0xb4, 0x1c, 0xb7, 0xef, 0x34, 0x17, 0x16, 0x37,
+	0x98, 0x0b, 0x5f, 0x8b, 0xfc, 0x37, 0x33, 0x53, 0x29, 0xf6, 0x30, 0x81,
+	0x77, 0x52, 0x52, 0x6b, 0xa2, 0xb7, 0x55, 0x3b, 0x4d, 0x7c, 0x14, 0xf9,
+	0x2b, 0x79, 0x7e, 0x11, 0x52, 0xdf, 0x9f, 0xcf, 0x3e, 0x5e, 0x4c, 0x8b,
+	0x8d, 0x75, 0xc6, 0xca, 0x88, 0x55, 0xf2, 0x68, 0x3b, 0x4f, 0xd0, 0x76,
+	0x86, 0xd2, 0xb7, 0xf9, 0xa4, 0x66, 0xd7, 0x41, 0xfc, 0xe3, 0x6a, 0xfe,
+	0x79, 0x5f, 0xa7, 0xce, 0x3c, 0xae, 0x4f, 0x4b, 0x7c, 0xf1, 0xa8, 0xe6,
+	0xd3, 0x11, 0xdd, 0x7a, 0x86, 0xf0, 0xc3, 0x48, 0xc0, 0xaa, 0x7d, 0x99,
+	0xea, 0x9b, 0x3b, 0xa8, 0x3c, 0x2e, 0x7e, 0x76, 0xea, 0x12, 0xe3, 0xfc,
+	0x64, 0xd1, 0x2e, 0x1c, 0x21, 0xb9, 0x59, 0x4d, 0x0c, 0xb2, 0xb6, 0xfe,
+	0x0b, 0x33, 0xbd, 0x5c, 0x8e, 0xe5, 0xde, 0x2b, 0x21, 0xf6, 0xd1, 0x46,
+	0x6e, 0xe7, 0x5f, 0x91, 0x86, 0xbf, 0xc5, 0xb0, 0xea, 0xfd, 0xcb, 0x41,
+	0x9c, 0xd9, 0x0a, 0x2c, 0xf2, 0x9f, 0x7f, 0x8f, 0xca, 0x54, 0x9f, 0x6f,
+	0x50, 0x9e, 0x21, 0x9c, 0xea, 0xdb, 0xb7, 0xb3, 0x8d, 0x38, 0x55, 0xd1,
+	0x26, 0xa6, 0xfa, 0xe2, 0x41, 0xbf, 0xbc, 0xb3, 0xce, 0x97, 0x41, 0x1d,
+	0x65, 0xe0, 0xc2, 0x83, 0x69, 0xb9, 0xdf, 0x83, 0xd8, 0xe0, 0x75, 0x52,
+	0xd3, 0xd2, 0x02, 0xd5, 0x46, 0x7f, 0x89, 0x36, 0xd1, 0x5f, 0xa3, 0xa7,
+	0x20, 0xef, 0x87, 0xf0, 0x87, 0x4e, 0x92, 0x13, 0x1e, 0x48, 0x15, 0xe2,
+	0x99, 0x54, 0xd4, 0xc7, 0xdf, 0xf4, 0x14, 0xc3, 0xeb, 0x80, 0x7f, 0xec,
+	0x2e, 0x76, 0x56, 0x3d, 0xd0, 0x26, 0x58, 0xa6, 0xed, 0x04, 0xbf, 0x7f,
+	0xd2, 0x53, 0x84, 0x93, 0x3d, 0xd1, 0x75, 0xa5, 0xf0, 0x53, 0x27, 0x86,
+	0xaf, 0x98, 0xd7, 0x6e, 0xe1, 0xbd, 0x37, 0xa4, 0xe5, 0xbd, 0x31, 0x9f,
+	0xf7, 0xad, 0x4e, 0xcd, 0x65, 0xdc, 0xa0, 0x9e, 0x19, 0x33, 0x37, 0x27,
+	0x65, 0x8c, 0x9f, 0xf7, 0xcd, 0x4d, 0x9b, 0xd8, 0x90, 0x92, 0xe7, 0xf5,
+	0x64, 0xdc, 0x26, 0xee, 0x4d, 0x99, 0xe6, 0x6b, 0x41, 0x13, 0xdf, 0xe1,
+	0x3d, 0xd5, 0x1c, 0xef, 0x75, 0xbb, 0x15, 0x02, 0xb5, 0xa6, 0xd9, 0x16,
+	0x36, 0x31, 0x63, 0xde, 0x4b, 0xe6, 0x24, 0x39, 0xd6, 0xcd, 0x41, 0x7b,
+	0x7e, 0x81, 0xff, 0xaf, 0xf9, 0xbd, 0x24, 0x58, 0x9f, 0xf3, 0xbb, 0xb0,
+	0xce, 0x48, 0x74, 0x64, 0xd5, 0xe8, 0xaa, 0x2d, 0xba, 0xac, 0x8f, 0x48,
+	0x9c, 0xcc, 0xd5, 0xea, 0xea, 0xde, 0xfd, 0x90, 0xf7, 0x36, 0xb4, 0x63,
+	0x30, 0x2c, 0x6b, 0xa3, 0xfe, 0xd0, 0x56, 0xe6, 0xb8, 0x32, 0x62, 0x0c,
+	0xe7, 0x88, 0x89, 0xfe, 0x94, 0xd4, 0x4a, 0x8b, 0xad, 0x15, 0x30, 0x56,
+	0x78, 0xad, 0xb5, 0xc6, 0xb2, 0x91, 0x3f, 0xac, 0x7f, 0x3d, 0x8b, 0x83,
+	0x29, 0x93, 0xb2, 0x93, 0x1a, 0x93, 0x5f, 0xfb, 0x64, 0x0d, 0xd9, 0x1d,
+	0xb1, 0xf7, 0xeb, 0x0e, 0x27, 0xe5, 0xbe, 0x2f, 0xbb, 0x47, 0xd6, 0x6c,
+	0xc9, 0x61, 0x46, 0x67, 0x59, 0x75, 0x0d, 0x8f, 0x8f, 0xd6, 0x73, 0x3c,
+	0x21, 0x3c, 0x35, 0xaa, 0x33, 0xa6, 0x4b, 0x5d, 0x4a, 0x95, 0x9a, 0xbf,
+	0x0b, 0xc5, 0x0d, 0x0b, 0x2e, 0x55, 0xf3, 0x76, 0x99, 0xe6, 0x77, 0x1b,
+	0xfc, 0x86, 0x3c, 0x8f, 0xee, 0x49, 0x48, 0x0d, 0x0c, 0xd4, 0x76, 0xdd,
+	0xbf, 0xae, 0x54, 0x19, 0xcc, 0xa9, 0xa6, 0xb9, 0x2f, 0xa8, 0xb7, 0x6e,
+	0x50, 0xed, 0xb8, 0x8b, 0x76, 0x2f, 0x76, 0x7e, 0xe5, 0xb0, 0x3f, 0xfc,
+	0x22, 0x36, 0x71, 0xcc, 0x1b, 0x65, 0xbd, 0xcc, 0x7a, 0x27, 0x8e, 0x2f,
+	0x5d, 0x80, 0x23, 0x29, 0xff, 0x9b, 0xc4, 0xf6, 0x7b, 0x64, 0x4f, 0x7d,
+	0x35, 0xb1, 0xf0, 0xaa, 0x50, 0x0b, 0xa2, 0x9a, 0xf8, 0x83, 0x03, 0x6b,
+	0x42, 0x09, 0x18, 0x15, 0x82, 0xef, 0xdd, 0xc4, 0xc4, 0x72, 0xcf, 0x5b,
+	0x7d, 0x57, 0xa5, 0xcf, 0xe2, 0xd5, 0x94, 0x7c, 0xff, 0x19, 0xef, 0x97,
+	0xcf, 0xb7, 0xf9, 0x59, 0x88, 0x57, 0x52, 0xb2, 0x7e, 0x46, 0x3c, 0x1d,
+	0xd1, 0x5b, 0x6e, 0x21, 0xdf, 0xaa, 0x8d, 0x14, 0x63, 0x52, 0x93, 0xfd,
+	0x79, 0x8f, 0x51, 0xde, 0x6c, 0x60, 0xe9, 0x35, 0x61, 0xcc, 0x4b, 0xac,
+	0xc4, 0x9b, 0xf1, 0xc0, 0xc6, 0xcf, 0x54, 0x42, 0x8d, 0xb9, 0x37, 0xd2,
+	0x77, 0x0a, 0x31, 0xc1, 0xd8, 0xd8, 0xd9, 0x50, 0x88, 0xe7, 0xd3, 0x12,
+	0xab, 0x3d, 0x46, 0x19, 0xaf, 0x0d, 0x5f, 0x23, 0xef, 0xdb, 0x92, 0xf3,
+	0x81, 0x8d, 0x9f, 0xe2, 0x13, 0x8c, 0x55, 0x8b, 0xce, 0x0a, 0x78, 0xad,
+	0x3c, 0x4f, 0x6d, 0xf2, 0xfa, 0x1b, 0x1d, 0xbd, 0x16, 0x67, 0x5c, 0x81,
+	0xe7, 0xe2, 0x81, 0xa9, 0xf7, 0x98, 0xb3, 0xcf, 0xd4, 0x86, 0x95, 0xef,
+	0x32, 0xfb, 0xba, 0xa3, 0xb4, 0x29, 0x8f, 0x2e, 0xef, 0x78, 0xf9, 0x86,
+	0xb5, 0xf7, 0x5f, 0x98, 0x1d, 0xfb, 0x95, 0xb4, 0xb7, 0x97, 0x52, 0x0a,
+	0xb5, 0x96, 0x0d, 0x4d, 0xf4, 0xd5, 0x5a, 0xb6, 0xf9, 0x16, 0x6d, 0xd3,
+	0x4d, 0xff, 0x5d, 0x8f, 0xbb, 0x34, 0x37, 0xda, 0xea, 0x9f, 0x07, 0x39,
+	0x13, 0xb3, 0x85, 0x31, 0x25, 0xeb, 0x0e, 0xae, 0x66, 0x63, 0x17, 0x7d,
+	0x73, 0xfc, 0x38, 0xed, 0x26, 0x48, 0x3d, 0xa5, 0x61, 0xdb, 0xaa, 0x57,
+	0x5f, 0x89, 0x36, 0x6b, 0x0c, 0x85, 0x94, 0x47, 0x01, 0x5e, 0xa6, 0x4c,
+	0x3c, 0x94, 0xa9, 0xa7, 0xc7, 0xc0, 0x36, 0x59, 0x9f, 0xb6, 0xfc, 0xf0,
+	0xe7, 0x7d, 0x57, 0x50, 0x5e, 0x47, 0x79, 0xae, 0x82, 0xf6, 0xbe, 0x93,
+	0xf1, 0xb0, 0x2c, 0x22, 0xc7, 0x7f, 0xd1, 0x17, 0x4c, 0x4f, 0xe3, 0x5d,
+	0x4b, 0x8e, 0xbf, 0xec, 0x5b, 0xc8, 0x71, 0xfd, 0xd4, 0xfa, 0xfe, 0x6e,
+	0x5f, 0x43, 0x7a, 0x39, 0xde, 0x89, 0xcb, 0xf7, 0xc9, 0xbe, 0xeb, 0x32,
+	0x2b, 0x28, 0x2f, 0xf9, 0x7e, 0xbc, 0x2f, 0x9c, 0x59, 0x89, 0x23, 0xd6,
+	0xf7, 0xd3, 0x7d, 0x8d, 0x56, 0xec, 0xf8, 0xb0, 0x2f, 0x90, 0xf1, 0xc0,
+	0x57, 0x45, 0x1b, 0x21, 0x77, 0x7d, 0x8a, 0x36, 0xf8, 0x77, 0x49, 0xda,
+	0xce, 0x45, 0xfb, 0x00, 0x61, 0xab, 0x3e, 0xba, 0xac, 0xb9, 0x54, 0xe9,
+	0x7d, 0x52, 0xdf, 0x6c, 0x9a, 0x3b, 0xc3, 0xca, 0x53, 0xd4, 0xfc, 0xeb,
+	0xbe, 0x6f, 0x77, 0xfb, 0x9b, 0x84, 0x97, 0x18, 0x0e, 0x43, 0xd5, 0x59,
+	0xf1, 0x7a, 0xa2, 0xef, 0x7b, 0x09, 0x62, 0x0a, 0xb5, 0x99, 0xb2, 0x98,
+	0xa7, 0x49, 0x8d, 0xea, 0xdf, 0x8d, 0xfe, 0x87, 0x6d, 0x7b, 0xbc, 0xcd,
+	0x5f, 0x44, 0xbc, 0x49, 0x85, 0x19, 0xd6, 0x33, 0xc9, 0x5f, 0x44, 0xe6,
+	0x65, 0xde, 0xce, 0xc6, 0xa1, 0x67, 0xcc, 0x4d, 0x15, 0xb6, 0xac, 0xc6,
+	0xd2, 0x52, 0x1b, 0x78, 0x5c, 0xde, 0x63, 0x43, 0x79, 0x4f, 0x12, 0x17,
+	0xc8, 0x9a, 0x81, 0xab, 0x61, 0x51, 0x5c, 0x78, 0xb7, 0xc2, 0x01, 0xab,
+	0x66, 0x5b, 0xe6, 0xf4, 0xeb, 0x3e, 0x3b, 0x2e, 0x7e, 0xd6, 0x17, 0xb2,
+	0x6c, 0xeb, 0x5f, 0x19, 0x23, 0x0a, 0xb0, 0x70, 0x20, 0xe5, 0xb7, 0x62,
+	0xb4, 0x95, 0x43, 0xa4, 0xcd, 0xb7, 0xb3, 0xbf, 0xe5, 0xf9, 0xb3, 0x89,
+	0x3e, 0x73, 0x87, 0xd4, 0x16, 0x5c, 0xe1, 0x38, 0x33, 0x53, 0x6c, 0x46,
+	0x79, 0xb4, 0xe6, 0x63, 0x7d, 0x5a, 0xaf, 0x22, 0x0f, 0xfe, 0x59, 0xdf,
+	0x0b, 0x29, 0x79, 0x86, 0xc1, 0x9f, 0x86, 0x43, 0x74, 0xf9, 0x4e, 0x5f,
+	0x67, 0xea, 0xb8, 0x4a, 0x69, 0x8c, 0xa1, 0xc9, 0x28, 0xb1, 0x5d, 0x9b,
+	0x60, 0xaa, 0x96, 0xb0, 0xc3, 0x18, 0x67, 0xcc, 0xdb, 0xb8, 0xd0, 0xe9,
+	0xc1, 0xb1, 0x5d, 0x32, 0x17, 0x0f, 0xde, 0xd8, 0x97, 0xbb, 0x5e, 0xe2,
+	0xcc, 0xcf, 0xfa, 0xf6, 0xa5, 0xc4, 0x87, 0xa5, 0x6f, 0xb9, 0xd7, 0xef,
+	0xe3, 0x3d, 0x61, 0x17, 0x63, 0xcd, 0x8b, 0xf2, 0x3c, 0x5f, 0x7c, 0x13,
+	0x63, 0x50, 0x20, 0xda, 0x8f, 0x3c, 0x38, 0xdc, 0x2e, 0x74, 0x64, 0xe4,
+	0x7d, 0x43, 0x1b, 0x19, 0xe7, 0x02, 0xda, 0x62, 0xa5, 0x10, 0x5d, 0x09,
+	0x6c, 0xce, 0xc8, 0x78, 0x4d, 0xfa, 0x89, 0x03, 0x1b, 0xae, 0xba, 0x0a,
+	0xc6, 0x1d, 0xe2, 0x57, 0xfe, 0x29, 0xb6, 0x13, 0x9d, 0xc3, 0x38, 0x9b,
+	0xaf, 0x8a, 0x18, 0x63, 0x5d, 0xc4, 0xeb, 0x51, 0x9a, 0xbb, 0x9f, 0xf9,
+	0xc6, 0xf0, 0xce, 0x60, 0x0c, 0xbd, 0x9b, 0x3d, 0xde, 0x16, 0x0f, 0x74,
+	0x8d, 0x28, 0xd3, 0x0c, 0xd7, 0xcc, 0x01, 0xfe, 0x5c, 0xee, 0x93, 0x9a,
+	0x66, 0x90, 0xfb, 0x05, 0x5a, 0x1e, 0x62, 0x7a, 0xf6, 0x55, 0xcb, 0xbb,
+	0x35, 0x6d, 0x1b, 0xbf, 0x3a, 0x5d, 0x84, 0x61, 0xb6, 0xf3, 0x58, 0x3c,
+	0xda, 0x45, 0xae, 0x62, 0x5c, 0xe5, 0x30, 0x34, 0x8d, 0xed, 0xdc, 0x08,
+	0xb9, 0x27, 0x10, 0x5b, 0xa3, 0xe0, 0xe8, 0x70, 0x7b, 0xb0, 0x78, 0xa7,
+	0xd8, 0x9f, 0xf4, 0x69, 0xe2, 0xc4, 0x7c, 0x17, 0x9e, 0x59, 0xee, 0x4f,
+	0xe7, 0xab, 0x69, 0x4c, 0xa4, 0xad, 0xf9, 0xa5, 0x65, 0x3c, 0x9d, 0xbd,
+	0x32, 0x67, 0xe1, 0x1e, 0x96, 0xac, 0xd9, 0x6f, 0x1f, 0x96, 0x97, 0x2b,
+	0xb4, 0x5e, 0xbd, 0x08, 0xa8, 0x32, 0x4d, 0x4f, 0xb3, 0x70, 0xe8, 0x85,
+	0xe6, 0x9d, 0x55, 0x39, 0x3d, 0xcb, 0x75, 0x05, 0xf8, 0x69, 0x3a, 0xa7,
+	0x9f, 0x02, 0xbc, 0x98, 0x92, 0x77, 0xfd, 0x4a, 0x2d, 0xf8, 0x7d, 0x6a,
+	0x8d, 0xe6, 0x42, 0x81, 0xbe, 0x4c, 0xdd, 0xa3, 0x6d, 0x22, 0x77, 0x5d,
+	0x8e, 0xd7, 0xe3, 0x01, 0xc6, 0x2b, 0x85, 0x27, 0x82, 0x0f, 0x28, 0x5f,
+	0x9e, 0x8b, 0x3e, 0x65, 0xcf, 0xa1, 0x29, 0x6d, 0xfb, 0xa7, 0x8f, 0xbe,
+	0x33, 0x91, 0x12, 0xdf, 0x70, 0xe0, 0xab, 0x57, 0x57, 0x10, 0x8f, 0x88,
+	0xef, 0x47, 0x9b, 0x5c, 0xd4, 0xc1, 0x83, 0x94, 0xe5, 0xbb, 0x29, 0xbf,
+	0x76, 0x1c, 0x86, 0x8f, 0xf9, 0x68, 0xfc, 0x41, 0x72, 0xfd, 0x13, 0xf3,
+	0x8a, 0xa0, 0xef, 0x28, 0x34, 0xd3, 0x15, 0x52, 0x9b, 0x14, 0xf5, 0x52,
+	0x3f, 0xc6, 0x1a, 0x18, 0x2b, 0x38, 0xff, 0xd0, 0x3d, 0xcc, 0x07, 0x99,
+	0x78, 0xa0, 0xb5, 0x58, 0x39, 0xcc, 0xa8, 0xdb, 0xce, 0x93, 0x4e, 0xea,
+	0x55, 0x7c, 0x3f, 0xc6, 0x18, 0x77, 0x9f, 0xd5, 0xf7, 0x3b, 0x7d, 0x7a,
+	0x36, 0xa6, 0xd5, 0xa6, 0xed, 0x18, 0x37, 0x8f, 0xbe, 0xf9, 0x7a, 0x4a,
+	0xea, 0x36, 0x4d, 0xbc, 0x16, 0xa9, 0xeb, 0xda, 0xaf, 0x4e, 0x99, 0xbe,
+	0xf2, 0x22, 0xf2, 0xd2, 0x17, 0xce, 0xe5, 0x5b, 0x37, 0xc7, 0xba, 0x8f,
+	0x38, 0xa8, 0x9c, 0x1c, 0xfc, 0x00, 0x6d, 0xe0, 0xf3, 0x99, 0x6e, 0xc9,
+	0xff, 0xe4, 0x91, 0x6f, 0xf5, 0x5d, 0xd1, 0xe3, 0x80, 0xaf, 0xd2, 0xc9,
+	0xdf, 0xf6, 0x31, 0xfb, 0x5d, 0x64, 0x26, 0xe5, 0xe2, 0x53, 0x93, 0x15,
+	0x92, 0x83, 0x0a, 0xf0, 0xdc, 0x39, 0x79, 0x99, 0x8c, 0x25, 0xff, 0x67,
+	0xda, 0x28, 0x93, 0x98, 0xb5, 0xc9, 0xe2, 0x9f, 0x0f, 0x26, 0x9d, 0xe4,
+	0x1d, 0xfe, 0x75, 0x86, 0x9a, 0x8d, 0x58, 0x99, 0x43, 0xde, 0x3b, 0xcc,
+	0xe1, 0xfb, 0xd3, 0x6e, 0xe6, 0xd8, 0x0a, 0xf8, 0x53, 0x0f, 0x52, 0xaf,
+	0x4b, 0x13, 0x01, 0xa3, 0x47, 0xbd, 0x3a, 0x8d, 0x3c, 0x7b, 0x3c, 0x0e,
+	0x8e, 0x7b, 0x51, 0x4a, 0xea, 0x51, 0x14, 0x56, 0xe8, 0xf6, 0x7c, 0xae,
+	0x4c, 0xdb, 0xf3, 0x0b, 0x66, 0xe7, 0xd5, 0x94, 0xb6, 0xe5, 0xc7, 0x76,
+	0xc6, 0x1d, 0x10, 0x1b, 0x90, 0xdc, 0xea, 0xf7, 0x5d, 0xe1, 0xac, 0x8b,
+	0x3e, 0x8a, 0x67, 0xa6, 0x51, 0x59, 0x84, 0x2d, 0xa9, 0x13, 0x66, 0xac,
+	0x52, 0xfa, 0xb3, 0xfa, 0xf4, 0xf2, 0x5a, 0xcd, 0x09, 0x5b, 0x37, 0x76,
+	0x7b, 0xc7, 0xd8, 0x9e, 0xdf, 0x7b, 0x13, 0xc7, 0xb0, 0x86, 0x71, 0xf8,
+	0xb8, 0x15, 0x87, 0x29, 0x9f, 0x39, 0x36, 0x3e, 0x5c, 0x1d, 0x0f, 0xac,
+	0x78, 0x1f, 0x5f, 0x51, 0x31, 0x77, 0xa0, 0x6b, 0x40, 0x5d, 0xa2, 0xde,
+	0xd7, 0x02, 0x63, 0x9d, 0xaa, 0x7f, 0x1a, 0x97, 0xe5, 0x70, 0x8a, 0xd8,
+	0xab, 0x3b, 0x20, 0x75, 0xcc, 0x45, 0xba, 0xd8, 0x70, 0x01, 0x5e, 0x4f,
+	0xcb, 0x5a, 0xfa, 0x54, 0x64, 0xb8, 0xdb, 0xb6, 0xb9, 0x7e, 0xeb, 0xb9,
+	0xfa, 0xa9, 0xc8, 0xdc, 0x73, 0x71, 0x65, 0x25, 0xe3, 0x63, 0x60, 0xec,
+	0x0c, 0xfe, 0xeb, 0x34, 0xe6, 0xd8, 0xbf, 0xdf, 0x8d, 0xaf, 0x35, 0x4d,
+	0xda, 0x94, 0xd4, 0xd9, 0x1d, 0x89, 0x07, 0xa2, 0x9b, 0xe5, 0x39, 0xa4,
+	0x60, 0xcc, 0x8c, 0xce, 0xb2, 0xcf, 0xbf, 0x44, 0x5e, 0xbe, 0x4d, 0xaf,
+	0x0b, 0x9d, 0xc2, 0xce, 0xe9, 0xb4, 0x26, 0x35, 0x4b, 0x2e, 0xf5, 0x58,
+	0xb7, 0x92, 0x3a, 0x18, 0xe6, 0xc8, 0xe4, 0x74, 0xb4, 0x4c, 0xbb, 0x40,
+	0x37, 0xb9, 0x7e, 0x36, 0xa1, 0x27, 0x69, 0x8f, 0x61, 0x6e, 0xcd, 0x4a,
+	0x3c, 0x97, 0xe9, 0x9d, 0x2b, 0xe3, 0xac, 0xa0, 0x2f, 0x6c, 0x4b, 0xca,
+	0x7e, 0xa4, 0xbf, 0x4b, 0x62, 0xff, 0xa9, 0x94, 0x1c, 0x0b, 0x86, 0x75,
+	0x55, 0x88, 0x93, 0xe9, 0x5c, 0xac, 0xc8, 0xc5, 0x8e, 0x5c, 0xcc, 0x90,
+	0x76, 0x04, 0x2b, 0x9d, 0xc5, 0x38, 0xed, 0x39, 0x3f, 0x12, 0x8d, 0xe6,
+	0xc3, 0x3f, 0x95, 0xaf, 0x8c, 0x31, 0xfa, 0xfe, 0xb8, 0xdb, 0x59, 0x84,
+	0xc0, 0x8e, 0xb3, 0xc4, 0x7d, 0x72, 0x8d, 0x5c, 0xeb, 0x8f, 0xc9, 0xb1,
+	0x64, 0x4f, 0x54, 0xea, 0xf4, 0xd7, 0xbd, 0xa1, 0x0c, 0x83, 0xbe, 0xac,
+	0xb9, 0x1d, 0xc0, 0x2d, 0xf1, 0xe5, 0xd6, 0x5e, 0x51, 0x67, 0xf7, 0x26,
+	0x89, 0x2f, 0xad, 0x6b, 0x64, 0x9f, 0xb5, 0x5a, 0xa1, 0x83, 0x78, 0x73,
+	0x95, 0xee, 0x6f, 0xc9, 0x57, 0x32, 0x56, 0x23, 0x2c, 0x18, 0xee, 0x28,
+	0xe3, 0xd3, 0xa4, 0xbc, 0x5f, 0x40, 0x97, 0x71, 0x14, 0x41, 0xeb, 0xb1,
+	0x6d, 0xec, 0x68, 0xaa, 0x98, 0x58, 0x3f, 0xba, 0x51, 0xe2, 0x1f, 0xf1,
+	0xdb, 0xba, 0x37, 0xa9, 0x57, 0xb6, 0xbf, 0x42, 0x6a, 0x8d, 0xd7, 0x74,
+	0x8b, 0xdd, 0x05, 0x5a, 0x3b, 0xe9, 0x97, 0x37, 0x06, 0x1d, 0xe6, 0xa4,
+	0x4b, 0x21, 0x52, 0x93, 0xf3, 0x15, 0x07, 0xe6, 0x5d, 0xad, 0xd0, 0xa6,
+	0xe7, 0x6c, 0xc8, 0xb6, 0xad, 0xc6, 0xf4, 0xd4, 0xf4, 0x64, 0x99, 0xbf,
+	0x09, 0x8e, 0xb5, 0xd4, 0xa5, 0xcc, 0x4d, 0xd6, 0xbe, 0x65, 0x7c, 0x2b,
+	0x18, 0x1b, 0x03, 0xd1, 0x01, 0xfc, 0xcd, 0xb4, 0xc3, 0x2d, 0xcf, 0x2d,
+	0xfc, 0xc9, 0xdc, 0x9c, 0xcf, 0xe4, 0x33, 0x1f, 0x7e, 0x40, 0x59, 0xc8,
+	0xfb, 0x70, 0xde, 0xd3, 0xec, 0x58, 0x5e, 0xd6, 0xfc, 0xbb, 0xbe, 0x48,
+	0x9f, 0xf4, 0x35, 0xd5, 0xb7, 0x9a, 0xf3, 0x09, 0xd6, 0x30, 0xe6, 0x35,
+	0x48, 0xbd, 0xb1, 0x3f, 0xe6, 0x24, 0xa7, 0x5a, 0x7f, 0x55, 0xb7, 0xf5,
+	0x5c, 0xff, 0xb6, 0x1e, 0xe9, 0xf7, 0x77, 0xc4, 0xb8, 0xb2, 0x06, 0x16,
+	0x6d, 0xa1, 0x2c, 0x43, 0xb5, 0xc4, 0x1c, 0xde, 0x1e, 0x83, 0x08, 0xc6,
+	0x5e, 0x7b, 0xac, 0xa8, 0x35, 0x51, 0xb1, 0x57, 0x79, 0xca, 0xd9, 0xcf,
+	0xb2, 0xde, 0x36, 0x5e, 0xb7, 0x11, 0x09, 0xea, 0xf2, 0xab, 0x35, 0x7e,
+	0xdf, 0x38, 0x6c, 0xfc, 0x39, 0x8f, 0xc9, 0x3c, 0x91, 0xd9, 0x84, 0x6e,
+	0xe6, 0xb3, 0x2d, 0x83, 0x2e, 0x74, 0x5b, 0xef, 0x38, 0x9c, 0xe0, 0x3c,
+	0xff, 0x8a, 0x31, 0x41, 0x30, 0x80, 0x6d, 0xeb, 0x41, 0xc6, 0xd4, 0x6d,
+	0xd4, 0x4d, 0x3c, 0xe9, 0x6f, 0x7d, 0x95, 0x13, 0xb8, 0x71, 0xaf, 0xd4,
+	0x87, 0x9f, 0xc5, 0x8d, 0x69, 0x99, 0xe7, 0x34, 0xcf, 0xc9, 0xf8, 0x37,
+	0x32, 0x97, 0x2c, 0xc7, 0xbb, 0x6c, 0xef, 0x61, 0xce, 0xfb, 0x9d, 0x4c,
+	0x9b, 0xac, 0x89, 0x8e, 0xd5, 0x2a, 0x63, 0x85, 0x97, 0xfe, 0xfa, 0x1d,
+	0xda, 0x47, 0xb2, 0xd7, 0xd2, 0xa7, 0x97, 0xfa, 0xec, 0x72, 0x5a, 0xb1,
+	0x59, 0xea, 0x26, 0xdb, 0x2c, 0x7d, 0xdf, 0xc5, 0x78, 0xfb, 0x50, 0x4f,
+	0x54, 0x2b, 0xa4, 0xce, 0x6e, 0x86, 0x11, 0x62, 0xec, 0x8a, 0x0e, 0xb1,
+	0xaf, 0xfc, 0xbd, 0x1e, 0xa9, 0x4f, 0xc4, 0xa9, 0x46, 0x79, 0x46, 0xa1,
+	0xc9, 0xda, 0x3f, 0x38, 0x6f, 0x8b, 0x26, 0x71, 0xc7, 0xf0, 0x74, 0xb4,
+	0x52, 0xe2, 0x69, 0x01, 0x31, 0x54, 0x2e, 0x8e, 0x9c, 0xb5, 0x62, 0xf1,
+	0x1e, 0xeb, 0x79, 0xab, 0x69, 0x60, 0xc0, 0xf6, 0xb5, 0x9a, 0x73, 0x71,
+	0x35, 0x17, 0xbb, 0x24, 0x1f, 0x89, 0xad, 0xfe, 0x2b, 0x6d, 0x95, 0x58,
+	0x3c, 0x52, 0x47, 0xbd, 0xcf, 0xa0, 0x8c, 0x9d, 0x56, 0x2d, 0xd4, 0xc5,
+	0xb1, 0xa9, 0x90, 0x58, 0xd1, 0x30, 0x35, 0x5d, 0x5f, 0x21, 0xba, 0xd8,
+	0x10, 0xf9, 0xc7, 0xb3, 0x36, 0x6e, 0xb7, 0xdb, 0x3e, 0xdf, 0xe6, 0xc5,
+	0xf7, 0x4c, 0xa4, 0x64, 0x2d, 0x57, 0x6f, 0x59, 0xee, 0x90, 0x77, 0x38,
+	0xfc, 0xda, 0x44, 0xa5, 0xe7, 0x4b, 0x7c, 0x4d, 0x72, 0xf1, 0x46, 0x72,
+	0x6d, 0xbf, 0x97, 0xf9, 0x70, 0x1d, 0x65, 0xe3, 0xdb, 0xaf, 0x80, 0xed,
+	0x94, 0xe5, 0x43, 0x9c, 0x43, 0x31, 0x79, 0x4f, 0x9c, 0xfa, 0x79, 0x28,
+	0x73, 0xce, 0xbf, 0xd8, 0xc6, 0xec, 0xe9, 0x7e, 0xf2, 0x89, 0x7d, 0xfa,
+	0x52, 0xca, 0x82, 0xb9, 0x2a, 0x15, 0x48, 0x77, 0xaa, 0xed, 0x67, 0x8d,
+	0x4b, 0xbf, 0x2c, 0xb6, 0xd8, 0xf6, 0x12, 0x1c, 0xfc, 0x51, 0xc0, 0x5e,
+	0x37, 0x95, 0x63, 0x73, 0xf1, 0x6d, 0x4d, 0x64, 0x64, 0xad, 0x65, 0xe1,
+	0x30, 0xe7, 0x7f, 0x66, 0x7e, 0x1d, 0xbe, 0x6f, 0x3f, 0xc7, 0x48, 0x5c,
+	0x71, 0x8c, 0xb8, 0x22, 0x3a, 0x4e, 0xff, 0x94, 0xfa, 0x23, 0xa2, 0x7c,
+	0x7f, 0x5b, 0x97, 0x43, 0x78, 0x4e, 0x21, 0x12, 0x69, 0xd1, 0xad, 0xd8,
+	0xca, 0x31, 0xda, 0x8a, 0xbf, 0xeb, 0x35, 0xfc, 0x22, 0x20, 0x63, 0x08,
+	0xf4, 0x2b, 0x84, 0x6b, 0x22, 0x40, 0x5e, 0x20, 0x35, 0xa8, 0xea, 0x10,
+	0xcd, 0x73, 0x66, 0xe7, 0xfa, 0x16, 0x6d, 0x2d, 0x37, 0x16, 0xa9, 0x0f,
+	0x14, 0x3f, 0x58, 0x8e, 0xda, 0xe1, 0x1e, 0x4b, 0x8f, 0xe5, 0xfa, 0x59,
+	0x54, 0xec, 0x28, 0xc2, 0xce, 0xb4, 0x8c, 0xad, 0x4d, 0xde, 0x67, 0x83,
+	0xd2, 0x1e, 0xfa, 0x3d, 0x85, 0x23, 0x35, 0xc6, 0x3d, 0xd4, 0x67, 0x6d,
+	0xbf, 0xe0, 0x89, 0x26, 0xa4, 0x68, 0x63, 0xce, 0x91, 0x5f, 0xb2, 0x2d,
+	0x19, 0xc3, 0x34, 0x1e, 0x27, 0x37, 0x4b, 0xa5, 0xa5, 0x46, 0x53, 0xec,
+	0xf3, 0x2c, 0xd6, 0xf7, 0xf8, 0xb5, 0x57, 0xc9, 0xbb, 0x6e, 0x3e, 0x67,
+	0x9b, 0x9b, 0xa8, 0x07, 0x99, 0xe3, 0x0a, 0x0c, 0x65, 0x72, 0xf7, 0x79,
+	0x70, 0x68, 0xa7, 0x0b, 0x83, 0x19, 0x7f, 0x9b, 0xd3, 0xb9, 0x65, 0xae,
+	0x3c, 0x0f, 0x32, 0x3a, 0x68, 0x8f, 0x73, 0xee, 0x05, 0x7a, 0x7c, 0x83,
+	0x38, 0x42, 0xd6, 0xc2, 0x3f, 0x89, 0x6c, 0x39, 0xfb, 0x5a, 0x99, 0x3a,
+	0x37, 0x97, 0xf3, 0xd7, 0xc8, 0xdf, 0xff, 0x03, 0x3a, 0x15, 0xe7, 0x82,
+	0x5c, 0x92, 0x00, 0x00, 0x00 };
+
+static const u32 bnx2_RXP_b09FwData[(0x0/4) + 1] = { 0x0 };
+static const u32 bnx2_RXP_b09FwRodata[(0x33c/4) + 1] = {
+	0x08003344, 0x08003344, 0x08003420, 0x080033f4, 0x080033d8, 0x08003328,
+	0x08003328, 0x08003328, 0x0800334c, 0x80080100, 0x80080080, 0x80080000,
+	0x5f865437, 0xe4ac62cc, 0x50103a45, 0x36621985, 0xbf14c0e8, 0x1bc27a1e,
+	0x84f4b556, 0x094ea6fe, 0x7dda01e7, 0xc04d7481, 0x08005a74, 0x08005ab8,
+	0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a74, 0x08005a5c,
+	0x08005a5c, 0x08005ac0, 0x08005a5c, 0x080059d4, 0x08005a5c, 0x08005a5c,
+	0x08005ac0, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c,
+	0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a94,
+	0x08005a5c, 0x08005a94, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a98,
+	0x08005a94, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c,
+	0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c,
+	0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c,
+	0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a98, 0x08005a98, 0x08005a5c,
+	0x08005a98, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c,
+	0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c,
+	0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c,
+	0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c,
+	0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c,
+	0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c,
+	0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c,
+	0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c,
+	0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c,
+	0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c,
+	0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c,
+	0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c, 0x08005a5c,
+	0x08005adc, 0x0800782c, 0x08007a90, 0x08007838, 0x08007628, 0x08007838,
+	0x080078c4, 0x08007838, 0x08007628, 0x08007628, 0x08007628, 0x08007628,
+	0x08007628, 0x08007628, 0x08007628, 0x08007628, 0x08007628, 0x08007628,
+	0x08007858, 0x08007848, 0x08007628, 0x08007628, 0x08007628, 0x08007628,
+	0x08007628, 0x08007628, 0x08007628, 0x08007628, 0x08007628, 0x08007628,
+	0x08007628, 0x08007628, 0x08007848, 0x080082fc, 0x08008188, 0x080082c4,
+	0x08008188, 0x08008294, 0x08008070, 0x08008188, 0x08008188, 0x08008188,
+	0x08008188, 0x08008188, 0x08008188, 0x08008188, 0x08008188, 0x08008188,
+	0x08008188, 0x08008188, 0x08008188, 0x080081b0, 0x08008d34, 0x08008e90,
+	0x08008e70, 0x080088d8, 0x08008d4c, 0x00000000 };
+
+static struct fw_info bnx2_rxp_fw_09 = {
+	/* Firmware version: 6.2.1b */
+	.ver_major			= 0x6,
+	.ver_minor			= 0x2,
+	.ver_fix			= 0x1,
+
+	.start_addr			= 0x08003210,
+
+	.text_addr			= 0x08000000,
+	.text_len			= 0x9258,
+	.text_index			= 0x0,
+	.gz_text			= bnx2_RXP_b09FwText,
+	.gz_text_len			= sizeof(bnx2_RXP_b09FwText),
+
+	.data_addr			= 0x00000000,
+	.data_len			= 0x0,
+	.data_index			= 0x0,
+	.data				= bnx2_RXP_b09FwData,
+
+	.sbss_addr			= 0x080095c0,
+	.sbss_len			= 0x7c,
+	.sbss_index			= 0x0,
+
+	.bss_addr			= 0x08009640,
+	.bss_len			= 0x1bc,
+	.bss_index			= 0x0,
+
+	.rodata_addr			= 0x08009258,
+	.rodata_len			= 0x33c,
+	.rodata_index			= 0x0,
+	.rodata				= bnx2_RXP_b09FwRodata,
+};
+
+static u8 bnx2_xi_rv2p_proc1[] = {
+	/* Date:        09/14/2010 09:02 */
+#define XI_RV2P_PROC1_MAX_BD_PAGE_LOC   9
+#define XI_RV2P_PROC1_BD_PAGE_SIZE_MSK	0xffff
+#define XI_RV2P_PROC1_BD_PAGE_SIZE	((BCM_PAGE_SIZE / 16) - 1)
+	0xad, 0x56, 0x3d, 0x68, 0x13, 0x61, 0x18, 0x7e, 0x73, 0x97, 0xdc, 0x5d,
+	0xd3, 0xfc, 0x9c, 0xd8, 0x86, 0x58, 0x0b, 0x89, 0x45, 0x87, 0xb6, 0x17,
+	0x9a, 0xa8, 0x9b, 0x85, 0x42, 0x11, 0x0a, 0xb6, 0x53, 0x41, 0x14, 0x11,
+	0x8c, 0x87, 0xb8, 0xe8, 0xe2, 0xea, 0xe2, 0x51, 0xec, 0xa0, 0xa0, 0x25,
+	0x83, 0x85, 0x76, 0x69, 0x27, 0x7f, 0x8a, 0x43, 0x6f, 0xb1, 0xd0, 0xc5,
+	0xc1, 0x8e, 0x0e, 0x0e, 0x2e, 0x2a, 0x58, 0xa3, 0x28, 0x22, 0x88, 0x8b,
+	0x8b, 0x83, 0xc6, 0xef, 0xfd, 0xf9, 0x9a, 0xbb, 0xc3, 0xd6, 0x41, 0x03,
+	0xe1, 0xc9, 0xfb, 0xdd, 0xfb, 0xff, 0x3e, 0xef, 0x77, 0x71, 0x01, 0xc0,
+	0x82, 0x20, 0xac, 0x28, 0xdc, 0x07, 0x56, 0xc6, 0x51, 0xd8, 0xe9, 0x40,
+	0xa6, 0x0c, 0xf8, 0x31, 0x80, 0x64, 0x88, 0xcb, 0x29, 0x80, 0xc7, 0x0e,
+	0xc9, 0x81, 0x9d, 0x23, 0x39, 0x18, 0x03, 0xfe, 0x8c, 0x32, 0x04, 0xa3,
+	0x2e, 0x69, 0xb7, 0x5b, 0x5a, 0x1f, 0xe5, 0x13, 0x30, 0x51, 0x45, 0x34,
+	0x61, 0xe2, 0x10, 0x62, 0x3f, 0x3c, 0xad, 0xa2, 0xdf, 0x9f, 0x1d, 0x08,
+	0x72, 0xa4, 0x1f, 0x54, 0x50, 0xfe, 0xa1, 0x64, 0xb1, 0x0b, 0x11, 0x73,
+	0xa9, 0xc0, 0x43, 0x54, 0xdf, 0x1a, 0x9f, 0x07, 0x35, 0xd4, 0x1b, 0x57,
+	0x81, 0x7a, 0xc9, 0x6e, 0x7b, 0x4c, 0xdb, 0x73, 0x7c, 0xdb, 0x73, 0x09,
+	0xdf, 0xb6, 0x50, 0xef, 0x5b, 0x27, 0xae, 0x07, 0xbb, 0xe8, 0x7d, 0x49,
+	0xe4, 0xf1, 0x59, 0xf2, 0x38, 0x02, 0x87, 0x0d, 0xae, 0x3f, 0x0d, 0x65,
+	0x29, 0x10, 0xf1, 0xa0, 0xe0, 0xa4, 0x20, 0xfc, 0x67, 0xbc, 0xfb, 0x8f,
+	0xf6, 0x77, 0x04, 0x37, 0x04, 0x6f, 0x0a, 0xbe, 0x16, 0x1c, 0x4d, 0xe8,
+	0x5f, 0x51, 0xc8, 0xfd, 0x78, 0xd9, 0x92, 0xb9, 0x0e, 0x0b, 0x56, 0x1c,
+	0xea, 0x0b, 0x8c, 0xe8, 0xb9, 0xa3, 0xfe, 0x96, 0xf4, 0x07, 0x52, 0x81,
+	0x49, 0x76, 0x85, 0xf1, 0x8d, 0x78, 0x1e, 0x06, 0x4b, 0x30, 0x67, 0xb9,
+	0xd4, 0xbd, 0x85, 0x90, 0xe6, 0xdf, 0xb7, 0x10, 0xca, 0x7c, 0x47, 0x74,
+	0x3c, 0x82, 0x3e, 0xf6, 0x0b, 0x90, 0x17, 0x3b, 0x23, 0x13, 0x9d, 0x0f,
+	0x40, 0x36, 0xe6, 0x0f, 0xcf, 0x7b, 0x00, 0xf9, 0x7a, 0x31, 0xc3, 0x7c,
+	0xbb, 0xdd, 0x62, 0xfe, 0xb6, 0xeb, 0xa8, 0xff, 0x48, 0xe5, 0x97, 0x22,
+	0xbf, 0xf1, 0xe7, 0x29, 0x68, 0xaf, 0xc7, 0xe3, 0x24, 0xfd, 0xf9, 0x09,
+	0x7f, 0x7e, 0x03, 0xf5, 0x57, 0x76, 0xfc, 0xf9, 0x09, 0x7f, 0x7e, 0xa8,
+	0xfd, 0xe1, 0xf9, 0xfe, 0xf5, 0xd5, 0x50, 0xf3, 0x8d, 0xfd, 0x57, 0x3d,
+	0xe9, 0x9b, 0x20, 0xd4, 0x74, 0xdd, 0x28, 0x9f, 0x96, 0xfd, 0x7a, 0x23,
+	0xfd, 0x1c, 0x4c, 0x05, 0xf2, 0xbc, 0x42, 0x7c, 0x7b, 0xaf, 0xce, 0x8b,
+	0x80, 0xfc, 0x6f, 0x4e, 0x15, 0x29, 0x5e, 0xc1, 0x62, 0x37, 0x67, 0x8b,
+	0x8c, 0x97, 0xa4, 0x31, 0x1f, 0xb3, 0x9c, 0xff, 0xe5, 0x5e, 0x96, 0x2f,
+	0xe6, 0xd1, 0xbe, 0x1f, 0xba, 0xf6, 0x3a, 0xaf, 0xbd, 0xf2, 0xc1, 0xf8,
+	0x3a, 0x8e, 0xce, 0x43, 0xc7, 0x43, 0x7f, 0x2f, 0x54, 0x3e, 0x7f, 0x8b,
+	0xcb, 0xe8, 0x0b, 0x01, 0xde, 0x19, 0xf1, 0x7e, 0x64, 0xea, 0x8c, 0xe9,
+	0x06, 0xe3, 0x72, 0x1d, 0xe3, 0x64, 0xa1, 0x29, 0xf7, 0x4b, 0x29, 0xc3,
+	0x3c, 0x59, 0xde, 0x94, 0xc0, 0x26, 0xc6, 0xb5, 0x84, 0x57, 0x57, 0x3b,
+	0xcc, 0xd3, 0x74, 0x9f, 0xf5, 0x84, 0xf5, 0x2d, 0x53, 0xf3, 0x09, 0x9f,
+	0x5f, 0xd3, 0xf9, 0x95, 0x17, 0x73, 0x9c, 0xd7, 0x52, 0x2e, 0x8d, 0xf2,
+	0xf1, 0xa5, 0xe7, 0x34, 0x37, 0x6f, 0x69, 0x53, 0xea, 0x2f, 0xc6, 0x79,
+	0x3e, 0x3b, 0xcc, 0xf7, 0xc3, 0xec, 0x30, 0xf3, 0x3d, 0x18, 0x42, 0x2c,
+	0xa8, 0x9f, 0x88, 0x03, 0x10, 0x18, 0x64, 0x9f, 0xdd, 0x22, 0xfe, 0x9a,
+	0xea, 0xa7, 0xde, 0x0f, 0x4e, 0x73, 0x7b, 0x84, 0xc0, 0xe1, 0x3c, 0x9a,
+	0x91, 0x7b, 0x27, 0xda, 0x5f, 0xcc, 0x93, 0xf5, 0xab, 0x5e, 0xf4, 0x3c,
+	0x3a, 0x0f, 0x3d, 0x07, 0xcd, 0x3b, 0x87, 0xea, 0xe7, 0xe7, 0xaa, 0x0f,
+	0x35, 0x56, 0x0b, 0xa4, 0x8f, 0xd0, 0x90, 0xe7, 0xb5, 0xe4, 0xde, 0x6a,
+	0x5e, 0xeb, 0xfc, 0x50, 0xcf, 0x4d, 0xec, 0xf1, 0x74, 0xa7, 0xbb, 0xf7,
+	0x78, 0xbe, 0x26, 0x7c, 0xbc, 0x25, 0xf7, 0x61, 0xf2, 0x1e, 0xe8, 0x91,
+	0x3e, 0x9f, 0x4c, 0xd8, 0x69, 0x1e, 0xcf, 0xc9, 0xb9, 0xb1, 0xbe, 0xda,
+	0x42, 0xb4, 0xfd, 0x4f, 0x89, 0x7d, 0x68, 0x78, 0x38, 0x97, 0x1b, 0x10,
+	0x4a, 0xbd, 0xaf, 0x62, 0x75, 0xe7, 0x85, 0xff, 0x16, 0x3c, 0x0c, 0xd9,
+	0xff, 0x85, 0xaa, 0xee, 0x17, 0xe3, 0x03, 0x4f, 0xea, 0x20, 0x7d, 0x47,
+	0xfa, 0x74, 0x5d, 0xe2, 0xba, 0x70, 0x3f, 0xd4, 0xbc, 0x45, 0x1e, 0xdb,
+	0x50, 0x97, 0x3d, 0x69, 0x0a, 0x5f, 0xdb, 0x59, 0xde, 0x07, 0x7f, 0x9a,
+	0xf8, 0x01, 0x25, 0xe1, 0xad, 0x9f, 0x67, 0x79, 0x20, 0xcf, 0xef, 0xa9,
+	0x3a, 0xbd, 0xdf, 0x1c, 0x25, 0x33, 0x96, 0x7a, 0xd1, 0xae, 0x0c, 0x1f,
+	0x66, 0x48, 0xdd, 0xeb, 0xf2, 0x2a, 0xc9, 0x27, 0xa9, 0xf3, 0x18, 0x9e,
+	0x97, 0x00, 0x86, 0xa2, 0xfd, 0xcf, 0xed, 0xdc, 0x7b, 0x2b, 0xa0, 0xeb,
+	0xd2, 0xfd, 0xc5, 0x3a, 0x0e, 0xec, 0x32, 0x8f, 0x33, 0x3b, 0xf7, 0xc0,
+	0xd0, 0x14, 0xe6, 0x59, 0x84, 0x82, 0xcd, 0xef, 0x45, 0x46, 0x65, 0x6f,
+	0xd8, 0x68, 0x36, 0x38, 0x6f, 0xb0, 0x3c, 0x3f, 0x47, 0x6e, 0x66, 0xe6,
+	0xf5, 0xf9, 0xa4, 0x89, 0x38, 0xbb, 0xf6, 0x8c, 0xce, 0x0b, 0xa1, 0xc9,
+	0xe7, 0xf6, 0xb4, 0xee, 0x53, 0x91, 0xea, 0x5e, 0xe4, 0x3e, 0x9d, 0xbf,
+	0xc7, 0x78, 0x0e, 0x4e, 0x11, 0x66, 0xbb, 0xfb, 0x24, 0xff, 0x13, 0xf2,
+	0xd1, 0x7d, 0xca, 0xa8, 0xf4, 0x5c, 0xca, 0xa7, 0x3b, 0xb7, 0xe4, 0x3d,
+	0xb8, 0xd7, 0xfc, 0x26, 0x23, 0x7c, 0xd3, 0xf3, 0x4b, 0xee, 0x17, 0xf1,
+	0x43, 0xf8, 0xf7, 0xfd, 0xd7, 0x9f, 0xf9, 0x77, 0x74, 0x17, 0xde, 0xda,
+	0x62, 0xf7, 0x55, 0xd9, 0xfd, 0x06, 0x3e, 0x89, 0x79, 0x63, 0xf8, 0x08,
+	0x00, 0x00, 0x00 };
+
+static u8 bnx2_xi90_rv2p_proc1[] = {
+	/* Date:        09/14/2010 09:02 */
+#define XI90_RV2P_PROC1_MAX_BD_PAGE_LOC   9
+#define XI90_RV2P_PROC1_BD_PAGE_SIZE_MSK	0xffff
+#define XI90_RV2P_PROC1_BD_PAGE_SIZE	((BCM_PAGE_SIZE / 16) - 1)
+	0xad, 0x56, 0xcb, 0x6b, 0x13, 0x61, 0x10, 0x9f, 0xec, 0x26, 0xbb, 0xdb,
+	0x74, 0xf3, 0x10, 0xdb, 0x10, 0x6a, 0x21, 0xb1, 0xe8, 0xa1, 0xed, 0x86,
+	0x26, 0xf8, 0xb8, 0x58, 0x2c, 0x78, 0xb0, 0x60, 0x0b, 0x62, 0xa1, 0xe2,
+	0xa3, 0x68, 0xbb, 0x88, 0x17, 0xff, 0x03, 0x0f, 0xba, 0x14, 0xea, 0x41,
+	0x5a, 0x4a, 0x10, 0x03, 0x09, 0x8a, 0x05, 0x41, 0xa5, 0x78, 0xe8, 0x5e,
+	0x14, 0x7a, 0xf1, 0x60, 0xe9, 0xa9, 0x82, 0x07, 0x41, 0x44, 0x68, 0x8d,
+	0x52, 0x51, 0x2f, 0x5e, 0xbc, 0x08, 0xea, 0xba, 0xf3, 0xcd, 0x7c, 0xc9,
+	0x66, 0x35, 0xbd, 0xe8, 0x42, 0xf9, 0x65, 0x66, 0xe7, 0xf1, 0xcd, 0x7c,
+	0xbf, 0x99, 0x6d, 0x1a, 0x00, 0x34, 0x70, 0xdc, 0x9c, 0x8f, 0xbb, 0x40,
+	0x53, 0x0d, 0x1f, 0x3d, 0x0f, 0x62, 0x59, 0xc0, 0x47, 0x01, 0x21, 0x43,
+	0xab, 0x1c, 0x01, 0x78, 0x6c, 0x08, 0xd9, 0xd1, 0x4d, 0x21, 0x3b, 0x43,
+	0x40, 0xcf, 0x20, 0x81, 0x33, 0x98, 0x16, 0xd6, 0xf5, 0xb2, 0xb4, 0x47,
+	0xf9, 0x08, 0x8c, 0xe4, 0x11, 0x55, 0x18, 0xd9, 0x8b, 0xd8, 0x0d, 0xcf,
+	0xf2, 0x18, 0xf7, 0xa7, 0x07, 0x8e, 0x29, 0xec, 0x9d, 0x1c, 0xca, 0xdf,
+	0x7d, 0x99, 0xfd, 0x5c, 0x44, 0x33, 0xe2, 0x58, 0x88, 0xfe, 0x5f, 0x81,
+	0xf4, 0x4e, 0x01, 0xed, 0x4e, 0xfa, 0x89, 0x3a, 0x85, 0xdf, 0xd6, 0x90,
+	0xf4, 0xa7, 0xfc, 0xba, 0x95, 0x16, 0xb8, 0x59, 0x46, 0xbb, 0xaf, 0x5e,
+	0xab, 0x1d, 0xb4, 0xb1, 0xfb, 0x12, 0x3a, 0xc7, 0x27, 0x3e, 0xc7, 0x7e,
+	0xd8, 0xa7, 0x50, 0xfd, 0x51, 0xc8, 0x72, 0x81, 0x88, 0x7b, 0x18, 0x27,
+	0x19, 0xe1, 0x3f, 0xe3, 0xdd, 0x7f, 0xf4, 0xbf, 0xc3, 0xb8, 0xce, 0x78,
+	0x8b, 0xf1, 0x33, 0xe3, 0xd1, 0x90, 0xfd, 0x55, 0x1f, 0xa9, 0x1f, 0xaf,
+	0xca, 0x7c, 0xaf, 0xfd, 0x8c, 0x39, 0x43, 0xf4, 0x05, 0x06, 0xe4, 0xbd,
+	0xa3, 0xfd, 0x1a, 0xf7, 0x07, 0x22, 0x8e, 0x2a, 0xfc, 0x92, 0xc3, 0x4f,
+	0x65, 0x3c, 0x02, 0x45, 0x21, 0xac, 0x11, 0x5a, 0xa6, 0x16, 0x45, 0x3c,
+	0x68, 0xae, 0x53, 0x9e, 0x1c, 0x20, 0x9a, 0xd6, 0xfc, 0xaa, 0x21, 0xba,
+	0x5b, 0xd1, 0x3a, 0x7c, 0xfc, 0xe1, 0x2d, 0x90, 0x5d, 0x4f, 0xec, 0x85,
+	0xc0, 0x6c, 0x6d, 0x83, 0xec, 0x5f, 0xe7, 0xe9, 0xfe, 0x4e, 0x33, 0xcf,
+	0x9a, 0x8f, 0x7c, 0xcf, 0xfc, 0x48, 0xa1, 0xfc, 0x2d, 0xe2, 0xb8, 0x32,
+	0x0f, 0xfb, 0x5d, 0x91, 0xf7, 0x48, 0xcf, 0xac, 0x96, 0x16, 0xd2, 0xa2,
+	0xb0, 0x53, 0xbb, 0x16, 0x5d, 0xe6, 0xdd, 0x80, 0xec, 0x83, 0x80, 0x2e,
+	0xaa, 0x17, 0x20, 0xc1, 0x7e, 0x4a, 0x2c, 0xc8, 0x1b, 0x80, 0x78, 0x4b,
+	0x3c, 0xd4, 0x63, 0x1d, 0x9e, 0x37, 0x13, 0xa3, 0x39, 0xb8, 0x59, 0xa6,
+	0xb9, 0xaa, 0x17, 0xd1, 0xbe, 0xe2, 0xf7, 0x2d, 0x22, 0xe2, 0xb6, 0xbe,
+	0x8f, 0x40, 0x7d, 0xa5, 0x35, 0x4f, 0x38, 0x9e, 0x1d, 0x8a, 0x67, 0x97,
+	0xd0, 0x7e, 0xbe, 0x11, 0xcf, 0x0e, 0xc5, 0xb3, 0x5d, 0x19, 0x0f, 0xf5,
+	0xbb, 0x57, 0x96, 0x5c, 0x39, 0x07, 0x14, 0x3f, 0x6f, 0xf1, 0x7d, 0x32,
+	0x42, 0x41, 0xd6, 0x8d, 0xf2, 0x24, 0xcf, 0xfd, 0x5b, 0xbe, 0xe7, 0xde,
+	0x88, 0x53, 0x90, 0xfd, 0x44, 0xfd, 0x7b, 0x5f, 0x9f, 0x02, 0x9c, 0xcb,
+	0xe9, 0xd1, 0x94, 0xc8, 0x97, 0xd4, 0x28, 0xcc, 0x99, 0x14, 0xe1, 0x25,
+	0x6e, 0xcc, 0x76, 0x9c, 0xce, 0x7f, 0xb9, 0x93, 0xe4, 0x99, 0x04, 0xfa,
+	0x77, 0x43, 0xd3, 0x5f, 0x9e, 0x6b, 0xa7, 0xf3, 0x60, 0x7e, 0x99, 0x47,
+	0x9e, 0x43, 0xe6, 0xc3, 0x78, 0x2f, 0x3d, 0xc9, 0xbb, 0xf6, 0x79, 0x09,
+	0x6d, 0xe6, 0xe5, 0x3b, 0xa5, 0xb5, 0x1f, 0xb1, 0x22, 0x61, 0xb4, 0x44,
+	0x58, 0x2b, 0x62, 0x9e, 0x38, 0x4c, 0xf3, 0xde, 0xcb, 0xc4, 0x88, 0x27,
+	0xb5, 0x55, 0x4e, 0xac, 0x62, 0x5e, 0x8d, 0xe7, 0xe7, 0xac, 0x47, 0xf3,
+	0x13, 0xed, 0xd2, 0x9e, 0x90, 0x3d, 0xed, 0x53, 0xe4, 0x13, 0xbe, 0xbf,
+	0xe0, 0xf1, 0x5c, 0xf3, 0x9e, 0x69, 0xce, 0xd7, 0x44, 0x3f, 0xf1, 0x73,
+	0xa2, 0x9f, 0xe6, 0xcc, 0xe9, 0x43, 0x4c, 0xfa, 0x3f, 0x11, 0x7b, 0xc0,
+	0x51, 0xc4, 0xbd, 0xc6, 0xd7, 0x04, 0x3f, 0x55, 0xff, 0xa7, 0x9c, 0x4b,
+	0x3a, 0xc6, 0xd6, 0x80, 0x00, 0x83, 0xf2, 0x9c, 0x0a, 0xec, 0xbb, 0x60,
+	0xff, 0xf0, 0x1c, 0x64, 0x9f, 0xb7, 0x82, 0xfa, 0x60, 0xbf, 0x65, 0x9f,
+	0x31, 0xce, 0x7d, 0xbe, 0x77, 0x8d, 0xdf, 0xfb, 0x75, 0x16, 0xc8, 0xcc,
+	0xe1, 0x3e, 0x41, 0x89, 0xdf, 0x17, 0xc2, 0xfb, 0x42, 0xf2, 0x56, 0x9e,
+	0x0f, 0xed, 0xd2, 0xa1, 0xfd, 0x31, 0xec, 0x35, 0xf7, 0x0d, 0xea, 0x97,
+	0x99, 0x6f, 0x0b, 0x7f, 0xf4, 0x87, 0xf6, 0x4f, 0x07, 0xf7, 0xf1, 0x50,
+	0xc8, 0x4f, 0xf2, 0xf4, 0x06, 0xeb, 0x95, 0x95, 0xa5, 0x32, 0xa2, 0x6e,
+	0x7f, 0x0c, 0xf1, 0xbd, 0x64, 0x21, 0x1f, 0xae, 0x83, 0xcb, 0xf5, 0xbe,
+	0x69, 0xa9, 0x3b, 0xc1, 0xfc, 0xd6, 0xe0, 0x11, 0xef, 0x8d, 0x8b, 0x79,
+	0xd9, 0x2f, 0xc2, 0x87, 0x16, 0xd7, 0x21, 0xec, 0x0d, 0xee, 0xd3, 0x35,
+	0xce, 0x9b, 0x86, 0x07, 0x8d, 0x7d, 0x83, 0x3c, 0xd5, 0xa1, 0xc8, 0x73,
+	0x30, 0xcd, 0x7c, 0xac, 0xc7, 0x89, 0xef, 0xf6, 0x98, 0xe0, 0x25, 0x64,
+	0x98, 0x97, 0x76, 0x82, 0xe4, 0x9e, 0x04, 0x7d, 0x1f, 0x8b, 0xe2, 0xbb,
+	0x6a, 0xf8, 0x32, 0x61, 0xa6, 0x13, 0xfd, 0xb2, 0xf0, 0x61, 0x5c, 0x98,
+	0x5b, 0x55, 0x93, 0xf6, 0x68, 0x75, 0x83, 0xfb, 0x99, 0x92, 0xfd, 0xe2,
+	0x3a, 0x0f, 0xa0, 0x3e, 0x03, 0xd0, 0x17, 0xec, 0xbf, 0xd9, 0xd8, 0x6b,
+	0xf7, 0x40, 0xd6, 0x25, 0xfb, 0x8b, 0x75, 0xc4, 0xdb, 0xdc, 0xc7, 0xf9,
+	0xc6, 0x9c, 0xf7, 0x8d, 0xe2, 0x39, 0x53, 0x90, 0xd4, 0xe9, 0x7b, 0x4c,
+	0xe8, 0xfb, 0x2b, 0x3a, 0xba, 0xf5, 0xce, 0x29, 0x24, 0xcf, 0xcd, 0x8a,
+	0x30, 0xe3, 0x73, 0x52, 0x7f, 0x4c, 0x45, 0x9c, 0x58, 0x7e, 0x2e, 0xf4,
+	0x49, 0x57, 0x25, 0xbd, 0x3e, 0x26, 0xfb, 0x94, 0x12, 0x75, 0x57, 0xa8,
+	0x4f, 0x53, 0xb7, 0x09, 0xcf, 0xc1, 0x09, 0x81, 0xf1, 0x8a, 0x49, 0x73,
+	0x5c, 0x35, 0xf9, 0xff, 0x13, 0xd1, 0x27, 0xc5, 0xaa, 0x8a, 0xef, 0x46,
+	0x8c, 0xf7, 0xbd, 0x11, 0xb8, 0xb7, 0xf0, 0x9e, 0xdb, 0xe9, 0xfe, 0x8e,
+	0x07, 0xf8, 0x16, 0xfc, 0x5e, 0x04, 0xe7, 0x4b, 0xf0, 0x83, 0xf9, 0xb7,
+	0xfd, 0xeb, 0xef, 0xfc, 0x3b, 0xdc, 0x86, 0xb7, 0x3a, 0xfb, 0x6d, 0xfa,
+	0x7e, 0xbf, 0x01, 0x03, 0x07, 0xbc, 0xf9, 0x70, 0x09, 0x00, 0x00, 0x00 };
+
+static u8 bnx2_xi_rv2p_proc2[] = {
+	/* Date:        09/14/2010 09:02 */
+#define XI_RV2P_PROC2_MAX_BD_PAGE_LOC   5
+#define XI_RV2P_PROC2_BD_PAGE_SIZE_MSK	0xffff
+#define XI_RV2P_PROC2_BD_PAGE_SIZE	((BCM_PAGE_SIZE / 16) - 1)
+	0xad, 0x56, 0x4b, 0x68, 0x5c, 0x55, 0x18, 0xfe, 0xe7, 0x66, 0xde, 0x8f,
+	0xdc, 0xc9, 0xc3, 0x49, 0x9a, 0x54, 0x3b, 0xc9, 0xa4, 0xb1, 0x53, 0xee,
+	0xd4, 0xbc, 0xac, 0x2e, 0x84, 0x96, 0x59, 0xb4, 0xa9, 0x0a, 0x4d, 0x53,
+	0x41, 0x70, 0xa3, 0x19, 0xec, 0x60, 0xb4, 0x14, 0x31, 0xae, 0xba, 0xe9,
+	0xc5, 0xd6, 0x16, 0xca, 0x80, 0xa6, 0x1a, 0x13, 0xa2, 0x50, 0xe9, 0xd2,
+	0xdd, 0x80, 0xa5, 0xb6, 0x1b, 0xa1, 0x98, 0x41, 0xb4, 0x50, 0x05, 0x17,
+	0xba, 0x11, 0x6b, 0xd5, 0x90, 0x82, 0x0b, 0x51, 0x8a, 0x0b, 0xed, 0x78,
+	0xfe, 0xd7, 0xcc, 0xbd, 0x93, 0xc4, 0x60, 0x71, 0x16, 0xf3, 0x71, 0xee,
+	0xf9, 0xcf, 0x77, 0xfe, 0xc7, 0x77, 0xfe, 0x73, 0xd2, 0x00, 0x10, 0x04,
+	0xb7, 0xba, 0xc3, 0x60, 0x07, 0x84, 0x43, 0x51, 0x83, 0x75, 0x80, 0x50,
+	0x2f, 0xe0, 0xcf, 0x02, 0xf9, 0xed, 0x4e, 0x13, 0x7c, 0x53, 0x65, 0xfc,
+	0x7e, 0x9e, 0xf1, 0x68, 0x96, 0x71, 0x07, 0x5b, 0x7d, 0xe4, 0x3e, 0x92,
+	0x34, 0x10, 0x00, 0x37, 0x8f, 0x3c, 0x36, 0x3c, 0x23, 0x04, 0xfb, 0x1d,
+	0x41, 0x3b, 0x66, 0xfe, 0xf7, 0xc1, 0x74, 0x9e, 0xf9, 0x83, 0xd0, 0x4b,
+	0xfb, 0x82, 0x8b, 0xd8, 0x29, 0xf8, 0xb8, 0x60, 0x47, 0x80, 0x31, 0x2d,
+	0x68, 0xb7, 0x20, 0x88, 0xdd, 0x2e, 0x19, 0x27, 0x5a, 0xbe, 0x3b, 0x32,
+	0x3e, 0x29, 0xf8, 0x9c, 0x7c, 0xff, 0x4c, 0x70, 0x45, 0x30, 0x68, 0xe6,
+	0x35, 0x4e, 0x1c, 0xdf, 0xae, 0x37, 0xc7, 0x49, 0xa6, 0x23, 0x7f, 0x7f,
+	0xa8, 0x2b, 0xbf, 0xe6, 0xc5, 0x0a, 0x61, 0xfc, 0x03, 0xce, 0xf2, 0x55,
+	0xce, 0xc3, 0xf3, 0x59, 0xfe, 0xfe, 0x90, 0x83, 0xf1, 0x87, 0xc1, 0x15,
+	0x84, 0x02, 0xa2, 0x15, 0x70, 0x0b, 0x9a, 0x50, 0xcd, 0x23, 0x8f, 0x66,
+	0x52, 0xcc, 0x1b, 0xf7, 0xf1, 0x66, 0xd6, 0xf1, 0x7e, 0x1b, 0xf3, 0xf2,
+	0xb7, 0x07, 0x98, 0x3f, 0xbe, 0x25, 0x7f, 0x29, 0xc5, 0xd8, 0xe5, 0x6c,
+	0xb4, 0x4f, 0x6c, 0x0b, 0xff, 0x5f, 0xde, 0x92, 0xff, 0x64, 0x8b, 0xff,
+	0xb0, 0x1b, 0xed, 0x03, 0x00, 0x83, 0x1a, 0x1f, 0xda, 0x0f, 0xc1, 0xf5,
+	0x81, 0x34, 0x65, 0xaf, 0x46, 0x3a, 0xba, 0x04, 0xc5, 0x1c, 0x06, 0x54,
+	0xaf, 0x97, 0x13, 0x38, 0xce, 0x3a, 0xcb, 0xd7, 0xd8, 0xfe, 0x45, 0x21,
+	0xfa, 0x59, 0x09, 0xb9, 0x0c, 0xe0, 0x26, 0x90, 0xb7, 0x13, 0x6a, 0x49,
+	0xdc, 0xef, 0x2b, 0x53, 0x0f, 0x1c, 0xb7, 0x81, 0x6b, 0xfb, 0xfd, 0xba,
+	0x08, 0x6c, 0xd7, 0xf1, 0x30, 0x7f, 0x7d, 0xbb, 0x9c, 0x26, 0xbb, 0xa5,
+	0xaa, 0xea, 0x15, 0xe7, 0x8d, 0xee, 0x6d, 0x5e, 0x0f, 0x83, 0x51, 0xda,
+	0x84, 0xe3, 0x35, 0x9b, 0x15, 0x94, 0x07, 0x31, 0x04, 0xb5, 0x79, 0x5d,
+	0x47, 0x3c, 0xc6, 0x4f, 0x5d, 0x8f, 0x7e, 0xfc, 0xdd, 0xd0, 0xcb, 0x7b,
+	0x3b, 0x55, 0x2f, 0x3c, 0xee, 0x1e, 0x63, 0x5c, 0x18, 0x0b, 0x21, 0x38,
+	0xe5, 0x39, 0x1a, 0xee, 0xb9, 0x3d, 0x1a, 0x25, 0x5f, 0xdd, 0x02, 0xae,
+	0x5f, 0x68, 0xea, 0x4d, 0xf2, 0xf1, 0xcb, 0x4e, 0x9c, 0x4f, 0x18, 0xbf,
+	0x98, 0x6f, 0x7a, 0xd6, 0xab, 0xc3, 0xb7, 0x3c, 0xfa, 0x44, 0xbb, 0xfd,
+	0xe2, 0x77, 0x56, 0xea, 0xb4, 0xdd, 0xd4, 0x49, 0xf3, 0xaf, 0x75, 0xb2,
+	0x69, 0xbf, 0x3b, 0xc5, 0x34, 0xf9, 0x7d, 0x98, 0xf3, 0x74, 0xe1, 0xc0,
+	0x15, 0xce, 0xd3, 0x21, 0x8b, 0xc6, 0xf1, 0x33, 0x97, 0xbd, 0xf5, 0x7a,
+	0x76, 0xa2, 0x7c, 0x8d, 0xe7, 0x43, 0xa7, 0xb9, 0x6e, 0x87, 0x65, 0xdb,
+	0x43, 0x6d, 0x01, 0x84, 0x4a, 0xf8, 0x34, 0x57, 0xa7, 0x46, 0xf3, 0x5d,
+	0x70, 0xae, 0xca, 0xf3, 0x27, 0x12, 0x1c, 0xc7, 0x6c, 0x88, 0xd7, 0x9d,
+	0x9f, 0xa7, 0xbe, 0x52, 0x5f, 0x9b, 0x40, 0xff, 0x5f, 0x37, 0xfe, 0xd3,
+	0xfa, 0x6e, 0xff, 0x7c, 0x00, 0xd6, 0x3e, 0xc6, 0xf1, 0xa4, 0xb3, 0xc6,
+	0x3a, 0x70, 0x66, 0xcf, 0xca, 0x86, 0x16, 0xf3, 0xdd, 0xb1, 0xd8, 0x5e,
+	0xe4, 0x10, 0x0f, 0x5a, 0x36, 0xad, 0x4b, 0x1e, 0x60, 0x7c, 0x93, 0xe6,
+	0xff, 0x0a, 0x54, 0xa8, 0x5e, 0xfb, 0xda, 0x83, 0x57, 0x34, 0x1e, 0xc6,
+	0xa6, 0xae, 0x54, 0x77, 0xc2, 0xdf, 0xa2, 0xaf, 0xb3, 0x49, 0xd5, 0x95,
+	0xe4, 0x3f, 0xbf, 0x99, 0xae, 0x18, 0xc3, 0x39, 0xd6, 0xc9, 0x7a, 0x7d,
+	0x09, 0x3f, 0xf8, 0xfa, 0xa4, 0x47, 0x17, 0x04, 0x46, 0x0f, 0x3e, 0x7d,
+	0x18, 0x1d, 0xd1, 0xf9, 0x37, 0xf9, 0xd4, 0xba, 0x23, 0x51, 0x04, 0x5e,
+	0x11, 0xbe, 0x59, 0x89, 0xe7, 0xb8, 0xc4, 0xf3, 0x6b, 0x5c, 0xf3, 0xae,
+	0x71, 0x30, 0x9e, 0x6b, 0xc4, 0xa1, 0xfd, 0x9a, 0xfb, 0xf3, 0xf4, 0xac,
+	0xcf, 0x9f, 0xca, 0x8a, 0x9c, 0xd3, 0xfe, 0x1c, 0x63, 0x23, 0xbe, 0x61,
+	0xd2, 0x7b, 0x7b, 0xcf, 0x27, 0x5e, 0xfd, 0xdd, 0x35, 0xf5, 0xe3, 0x3a,
+	0x2c, 0x55, 0xbd, 0xe7, 0xa8, 0x6f, 0x83, 0x73, 0xa4, 0x3a, 0xf7, 0xc7,
+	0x7f, 0x22, 0xd5, 0x86, 0x30, 0x71, 0x73, 0x55, 0x79, 0xbd, 0xf7, 0x4a,
+	0xa4, 0xa1, 0xa3, 0xee, 0xbd, 0x92, 0x27, 0xc1, 0xcc, 0x63, 0xc8, 0x37,
+	0x25, 0xfc, 0x23, 0xc2, 0x9f, 0x94, 0x73, 0xe4, 0x6c, 0x70, 0x8e, 0x34,
+	0x2f, 0xb4, 0x9f, 0x73, 0x73, 0x15, 0xed, 0xfb, 0x37, 0x39, 0x57, 0x43,
+	0x75, 0xff, 0x3d, 0x30, 0xb8, 0xc1, 0x3d, 0xa0, 0x7e, 0x72, 0xbc, 0xec,
+	0x87, 0x89, 0xbb, 0x40, 0xf5, 0x83, 0xf2, 0x1c, 0xf5, 0x49, 0xd0, 0x3e,
+	0xe9, 0x8e, 0x7a, 0xed, 0x5b, 0xf3, 0x12, 0x14, 0xbf, 0x1f, 0x90, 0x3e,
+	0x16, 0x80, 0x72, 0x18, 0xed, 0x4f, 0x6d, 0x5b, 0xdf, 0x07, 0xff, 0x5d,
+	0xaf, 0xdc, 0x0f, 0xf7, 0xfc, 0xc7, 0x7e, 0x08, 0x63, 0xef, 0x4b, 0x5f,
+	0x7b, 0xc7, 0xda, 0xac, 0x3f, 0xfa, 0xe3, 0xe6, 0xfe, 0x07, 0xda, 0xa7,
+	0x8d, 0x6e, 0xd5, 0x0f, 0x82, 0xca, 0x8d, 0x0a, 0xe9, 0xa2, 0x72, 0xe3,
+	0x32, 0xc7, 0xe3, 0x92, 0x5f, 0xfd, 0x1e, 0xbf, 0x5a, 0x75, 0xc8, 0xeb,
+	0x56, 0x06, 0xd5, 0x4f, 0xfe, 0x35, 0xf5, 0xc7, 0xd8, 0x9f, 0xbb, 0xdf,
+	0xfe, 0xcd, 0xbf, 0xfb, 0xeb, 0xcb, 0x3f, 0xde, 0xe3, 0xfb, 0xfe, 0xd6,
+	0xbd, 0xa6, 0x0e, 0x7c, 0x3a, 0x76, 0x81, 0xf6, 0x8f, 0xc8, 0x3d, 0xd0,
+	0x0f, 0x6a, 0x17, 0xdf, 0xc5, 0x68, 0xd1, 0x7b, 0x2a, 0xd6, 0xb8, 0x07,
+	0x21, 0xcf, 0x7d, 0xf8, 0xa5, 0x63, 0x3c, 0x3c, 0x3f, 0x44, 0xba, 0x7c,
+	0xf7, 0xf8, 0x5d, 0xea, 0xcb, 0x1f, 0xbe, 0x76, 0x15, 0xfd, 0xdc, 0x06,
+	0xab, 0x73, 0x49, 0x8a, 0xaf, 0x38, 0xc0, 0x76, 0x7f, 0x3e, 0xe1, 0xaf,
+	0xc3, 0xd1, 0x2c, 0xf2, 0x46, 0x45, 0xc7, 0xc6, 0x6e, 0xa6, 0xf5, 0x5e,
+	0x67, 0xfb, 0xe2, 0x0c, 0xe7, 0xad, 0x18, 0xc0, 0xf1, 0x83, 0xb0, 0x3a,
+	0x8e, 0x68, 0xad, 0xb3, 0x6f, 0xc6, 0xc5, 0x7d, 0xe6, 0xa0, 0xcd, 0xfc,
+	0xad, 0xf5, 0xbf, 0x48, 0xef, 0xb5, 0x4f, 0x1b, 0xf9, 0x38, 0x32, 0xee,
+	0x5d, 0x9f, 0x33, 0xf7, 0x3a, 0xaf, 0x9f, 0x12, 0xfd, 0xbd, 0x20, 0x1b,
+	0xdc, 0x8a, 0xdb, 0xc4, 0x57, 0x7a, 0x8a, 0x74, 0x0c, 0x99, 0x04, 0xe7,
+	0xa1, 0xf4, 0x34, 0xcf, 0x97, 0x52, 0xfc, 0xbd, 0x2f, 0xc5, 0xfe, 0x4e,
+	0x45, 0x92, 0x64, 0xdf, 0x97, 0x62, 0xcc, 0x88, 0xee, 0x6b, 0x0d, 0xdd,
+	0x33, 0x2e, 0x85, 0xbd, 0xba, 0x0a, 0xc2, 0xf5, 0x30, 0xc7, 0x07, 0x79,
+	0xee, 0x4f, 0xc5, 0xe1, 0x24, 0xcd, 0x4f, 0xe7, 0xfd, 0xf7, 0xa1, 0xea,
+	0x42, 0xfa, 0x5d, 0x5f, 0xf3, 0x5c, 0x78, 0xfb, 0x7d, 0x6c, 0x6c, 0xb1,
+	0xea, 0xd7, 0xcd, 0x52, 0xd8, 0xab, 0x5f, 0xe4, 0xa5, 0x61, 0x43, 0xbf,
+	0xac, 0xcb, 0x36, 0xd1, 0xc3, 0xef, 0xd2, 0x27, 0xbb, 0xe0, 0xf3, 0x2a,
+	0xc7, 0x55, 0xab, 0xb6, 0xd6, 0x51, 0xf7, 0x53, 0x3e, 0xf6, 0x5b, 0xe3,
+	0x68, 0xf2, 0xf3, 0xfe, 0xc7, 0xc4, 0xcf, 0x9f, 0x86, 0x71, 0x9f, 0x8c,
+	0xc4, 0x83, 0xbc, 0xfc, 0x7d, 0x52, 0xee, 0x21, 0xb7, 0x31, 0xf6, 0xdf,
+	0x1f, 0x53, 0xb6, 0xbe, 0xb3, 0x75, 0x7d, 0xcb, 0xb9, 0x18, 0x61, 0x5c,
+	0x18, 0xd1, 0x3a, 0x68, 0xbd, 0xb4, 0x3e, 0x5c, 0xc7, 0x0c, 0x9f, 0xfb,
+	0x89, 0xd2, 0x28, 0xe9, 0x77, 0xa4, 0xf4, 0x9b, 0xff, 0xfd, 0x78, 0xc4,
+	0x41, 0xfb, 0x53, 0xf0, 0x35, 0x9d, 0x47, 0x80, 0xef, 0x04, 0x9b, 0xfd,
+	0x5a, 0x0a, 0xd0, 0x78, 0x47, 0x4a, 0xfd, 0x42, 0x7a, 0x9e, 0x64, 0x7a,
+	0xdc, 0xab, 0xbb, 0x57, 0x3d, 0xe7, 0x50, 0xe3, 0xc1, 0xf9, 0x82, 0xe8,
+	0x2e, 0x0a, 0xc5, 0x83, 0xb8, 0xaf, 0x0d, 0xed, 0x11, 0xd6, 0x6f, 0x7b,
+	0xc4, 0x5b, 0x17, 0x53, 0xff, 0x58, 0x04, 0x87, 0xdb, 0x3b, 0x63, 0xe4,
+	0xf7, 0x85, 0x2f, 0xbe, 0xa4, 0xe9, 0x4b, 0x8b, 0x09, 0xfe, 0xde, 0x53,
+	0x64, 0xfa, 0x20, 0xe9, 0xb3, 0x0d, 0xce, 0xb0, 0x7e, 0x3f, 0x58, 0x60,
+	0x5c, 0x86, 0x27, 0x99, 0xa7, 0xf3, 0x0d, 0x7a, 0xbf, 0x44, 0x7b, 0x38,
+	0x7d, 0x95, 0x45, 0xd1, 0x65, 0xaf, 0xc5, 0xef, 0x1c, 0x48, 0xc9, 0xfb,
+	0x59, 0xce, 0x0f, 0xeb, 0x31, 0xe8, 0xa9, 0xeb, 0x56, 0xfa, 0x44, 0x4c,
+	0x1a, 0xfd, 0xf1, 0x72, 0xd1, 0x69, 0xb4, 0x55, 0xa7, 0x5a, 0xb7, 0x5e,
+	0x6b, 0x43, 0x5d, 0xee, 0xf5, 0xeb, 0x32, 0x2c, 0xba, 0xfc, 0xa3, 0x71,
+	0xaf, 0xad, 0xe7, 0x45, 0xfb, 0x84, 0xd1, 0xeb, 0xff, 0xa5, 0x53, 0xc6,
+	0xc9, 0x1c, 0xee, 0xdf, 0xe3, 0xd1, 0x9b, 0xfa, 0x85, 0xfe, 0x3c, 0x6a,
+	0xea, 0xfa, 0x0f, 0x61, 0xed, 0xc1, 0xd0, 0x88, 0x0e, 0x00, 0x00, 0x00 };
+
+static u8 bnx2_xi90_rv2p_proc2[] = {
+	/* Date:        09/14/2010 09:02 */
+#define XI90_RV2P_PROC2_MAX_BD_PAGE_LOC   5
+#define XI90_RV2P_PROC2_BD_PAGE_SIZE_MSK	0xffff
+#define XI90_RV2P_PROC2_BD_PAGE_SIZE	((BCM_PAGE_SIZE / 16) - 1)
+	0xad, 0x57, 0x4b, 0x6c, 0x54, 0x65, 0x14, 0x3e, 0x73, 0xe7, 0xfd, 0x2e,
+	0xd3, 0x66, 0xfa, 0x44, 0xfa, 0xa0, 0x95, 0x69, 0xa6, 0xd2, 0x97, 0x65,
+	0x63, 0x22, 0x19, 0x13, 0x0a, 0x4a, 0xd2, 0x52, 0x64, 0x2d, 0x9d, 0xc0,
+	0xc4, 0x0a, 0xb2, 0xa0, 0x3b, 0x5d, 0x78, 0x2d, 0x48, 0x13, 0x32, 0x0b,
+	0x8b, 0xf6, 0x61, 0x75, 0x61, 0x34, 0x71, 0xe1, 0x6e, 0xa2, 0x04, 0xa9,
+	0xbb, 0x26, 0x34, 0x46, 0x49, 0xd0, 0xc4, 0xc4, 0xc7, 0x02, 0xa3, 0x82,
+	0x4d, 0x49, 0x58, 0xa0, 0xc6, 0xb8, 0x20, 0x1d, 0xff, 0xf3, 0xf8, 0x67,
+	0xee, 0xbd, 0x73, 0xdb, 0x12, 0xe2, 0x2c, 0xe6, 0xcb, 0xf9, 0xff, 0x73,
+	0xcf, 0xf9, 0xcf, 0x39, 0xdf, 0xf9, 0xcf, 0xbd, 0x75, 0x00, 0xe0, 0x03,
+	0xb3, 0xb4, 0x47, 0xe1, 0x2e, 0x08, 0x78, 0x43, 0x0a, 0xcb, 0x00, 0xfe,
+	0x26, 0xc0, 0x9f, 0x01, 0xf2, 0xeb, 0xad, 0x23, 0xf8, 0xbe, 0xc4, 0x78,
+	0x7b, 0x8e, 0xf1, 0x78, 0x3b, 0xe3, 0x1e, 0x88, 0xa9, 0x7f, 0x0f, 0xfc,
+	0x70, 0x86, 0xc4, 0x4f, 0xcd, 0xfd, 0x2c, 0x9b, 0x19, 0xb4, 0x57, 0x07,
+	0x2f, 0x8a, 0xa1, 0x83, 0x59, 0xc1, 0x64, 0x58, 0xfd, 0x3f, 0x0b, 0x13,
+	0x19, 0xf6, 0xe3, 0x83, 0x26, 0xf2, 0x0f, 0x26, 0x62, 0x4a, 0x70, 0x54,
+	0xf0, 0x80, 0x87, 0x71, 0x44, 0xf0, 0x69, 0x07, 0x82, 0xe8, 0x8d, 0x89,
+	0x3c, 0xe0, 0x58, 0x3f, 0x21, 0xf2, 0x27, 0x82, 0xaf, 0xca, 0xfa, 0x1d,
+	0xc1, 0xbb, 0x82, 0xbd, 0x6a, 0x5f, 0xc7, 0x8b, 0xf2, 0x6f, 0xe5, 0xaa,
+	0x1c, 0x63, 0x73, 0x74, 0xde, 0x5f, 0x2a, 0xeb, 0x33, 0x5e, 0x94, 0x7f,
+	0x56, 0xb2, 0x07, 0xc5, 0x86, 0x34, 0xab, 0x35, 0x34, 0x15, 0x31, 0x2f,
+	0x5e, 0x58, 0x9a, 0x0b, 0x51, 0x16, 0x17, 0x62, 0x2c, 0x9b, 0xa5, 0x10,
+	0xe5, 0x65, 0x21, 0x26, 0x76, 0x05, 0x9b, 0xe3, 0xbc, 0x6e, 0x26, 0x75,
+	0xc2, 0x9d, 0x79, 0x45, 0xf9, 0x2f, 0x4f, 0xbd, 0x87, 0xe3, 0x0a, 0x8a,
+	0x96, 0xe1, 0xc7, 0xf5, 0x8e, 0xec, 0xf2, 0x75, 0xd6, 0x7f, 0xa9, 0x9d,
+	0xd7, 0x9f, 0xc8, 0xa2, 0xbd, 0x00, 0x98, 0x82, 0xd0, 0x47, 0xe7, 0xf0,
+	0x98, 0x7d, 0x76, 0xfb, 0xb7, 0xe7, 0x58, 0x9a, 0x8c, 0xb3, 0xdd, 0x88,
+	0xcd, 0x6e, 0xba, 0xc6, 0xee, 0x8f, 0x61, 0xab, 0xfd, 0x84, 0x87, 0xed,
+	0x47, 0x76, 0xb4, 0x9f, 0x8f, 0x33, 0xd6, 0x67, 0xdd, 0xfc, 0x84, 0x77,
+	0x38, 0xff, 0x2b, 0x3b, 0xda, 0x7f, 0xcd, 0x71, 0x7e, 0xe8, 0xe5, 0x7c,
+	0x42, 0xa7, 0x8e, 0x0f, 0xf5, 0xf7, 0xc1, 0x6a, 0x07, 0xa2, 0x01, 0x6b,
+	0xc4, 0xe3, 0xcf, 0x20, 0xd7, 0x85, 0x01, 0x95, 0xcb, 0x85, 0x28, 0xca,
+	0x7b, 0xb3, 0xcb, 0x2b, 0xac, 0x7f, 0x4a, 0x0c, 0xdd, 0xd5, 0x06, 0xa5,
+	0x4e, 0x66, 0x14, 0xed, 0xa6, 0x60, 0x2d, 0x86, 0xfe, 0xbe, 0x55, 0x75,
+	0x47, 0xd9, 0xbb, 0x4d, 0xdd, 0x58, 0x7f, 0xd7, 0x93, 0xbc, 0xfb, 0x76,
+	0x01, 0xf7, 0x7d, 0xb0, 0x54, 0x72, 0xd3, 0x53, 0x7d, 0x98, 0x64, 0x7b,
+	0xd0, 0x19, 0x22, 0xa7, 0x1c, 0xbf, 0xd2, 0xe9, 0x73, 0xe3, 0x43, 0x00,
+	0xd6, 0xe6, 0xdc, 0xd6, 0xbd, 0x2a, 0x0e, 0x6d, 0x0f, 0xcf, 0xf9, 0xb0,
+	0xc2, 0xd7, 0x85, 0x6e, 0xcd, 0x63, 0x96, 0x1b, 0x06, 0x19, 0xe7, 0x07,
+	0xfd, 0x08, 0xd9, 0xc2, 0x34, 0x89, 0x4f, 0xfd, 0x3e, 0xc0, 0x7d, 0x6b,
+	0xf6, 0xe1, 0xf3, 0x6f, 0x56, 0xfb, 0x40, 0xf2, 0xf5, 0x47, 0x37, 0xee,
+	0x47, 0xd5, 0x39, 0xd9, 0xde, 0xc4, 0x94, 0xb5, 0x3f, 0x5e, 0xb7, 0xf4,
+	0x0d, 0xea, 0x1d, 0x94, 0x38, 0xda, 0xa5, 0x8e, 0x6d, 0xaa, 0x8e, 0xba,
+	0x3e, 0xba, 0x8e, 0x49, 0xf2, 0x77, 0x2f, 0xc7, 0xf9, 0x19, 0xe3, 0x3c,
+	0x5e, 0x39, 0x74, 0x8d, 0xf3, 0x77, 0xc4, 0x20, 0x39, 0x72, 0xf1, 0xaa,
+	0xb5, 0x9e, 0xa7, 0x86, 0x0b, 0x2b, 0xbc, 0xef, 0xbf, 0xc0, 0x75, 0x1d,
+	0x13, 0xb7, 0x47, 0xbc, 0xd4, 0x8f, 0xc5, 0xc0, 0x05, 0xae, 0xde, 0x1a,
+	0xed, 0xd7, 0xc3, 0x6c, 0x89, 0xf7, 0xcf, 0x45, 0x39, 0x8e, 0x29, 0x3f,
+	0x3f, 0x77, 0x99, 0xfa, 0xb4, 0x5c, 0xde, 0x18, 0xc6, 0xf3, 0x9f, 0xac,
+	0xf4, 0xb3, 0x7d, 0xdf, 0x03, 0x1b, 0x9f, 0xa3, 0x7c, 0x22, 0xbb, 0xc1,
+	0x3c, 0xc9, 0x4e, 0x5d, 0x12, 0x87, 0x06, 0xdb, 0xbb, 0x67, 0xb0, 0xbe,
+	0xd0, 0x25, 0xe2, 0x33, 0x92, 0xf4, 0x5c, 0xec, 0x10, 0xe3, 0x5b, 0xb4,
+	0xff, 0xd0, 0x53, 0xa4, 0xba, 0x1d, 0x4d, 0xf8, 0xae, 0xe9, 0x78, 0x18,
+	0xab, 0xbc, 0xd3, 0xbc, 0x14, 0xfb, 0x0e, 0xfe, 0x5d, 0x8a, 0x69, 0xde,
+	0x49, 0xfe, 0x33, 0x3b, 0xf1, 0x8e, 0x31, 0xd0, 0x85, 0x7a, 0xc1, 0x6d,
+	0xf8, 0x27, 0xfe, 0x6a, 0x78, 0xcc, 0xab, 0x55, 0xbe, 0x10, 0x28, 0x9e,
+	0xd8, 0x78, 0xa3, 0xf8, 0x55, 0x47, 0x4f, 0xcd, 0x96, 0x34, 0x1f, 0x92,
+	0xe4, 0xef, 0x8c, 0xd8, 0x9d, 0x92, 0x38, 0xcf, 0x4a, 0x9c, 0xf7, 0x23,
+	0xba, 0x1e, 0x3a, 0x3e, 0xc6, 0x59, 0xea, 0xaf, 0xfd, 0x2e, 0xf7, 0xaa,
+	0xbe, 0x3f, 0x39, 0xcf, 0x4b, 0x52, 0x97, 0xf7, 0x2a, 0xf7, 0xa8, 0xce,
+	0x97, 0xbe, 0x4f, 0xf5, 0x9c, 0xe2, 0x38, 0x26, 0xa6, 0x5c, 0xe3, 0x2a,
+	0xde, 0x90, 0x7b, 0x22, 0xd5, 0xc5, 0x58, 0xc9, 0x5b, 0x0f, 0xf5, 0x53,
+	0xa2, 0xf1, 0x0b, 0x2b, 0xbf, 0xef, 0x6b, 0x7e, 0x27, 0x16, 0x67, 0x08,
+	0x23, 0xa9, 0x8f, 0xd1, 0x5f, 0x8b, 0x4b, 0xdf, 0xea, 0x3e, 0x72, 0xcf,
+	0xe7, 0xb9, 0xb8, 0x17, 0x61, 0xf8, 0xd6, 0xba, 0xb6, 0x6f, 0x9d, 0xaf,
+	0xc1, 0x0a, 0x5f, 0x1b, 0x46, 0x24, 0xef, 0x82, 0xe9, 0x03, 0x68, 0x77,
+	0x5c, 0xfc, 0xf4, 0x8b, 0x9f, 0x98, 0xf4, 0x6b, 0xd4, 0xa5, 0x5f, 0x75,
+	0x9e, 0xc9, 0x5f, 0xf6, 0xd6, 0x3a, 0xea, 0xb7, 0x6e, 0xd1, 0xbf, 0xde,
+	0xb2, 0x7d, 0x0e, 0x7a, 0x5c, 0xe6, 0xa0, 0x3e, 0x27, 0xc7, 0xcd, 0xe7,
+	0x50, 0xf1, 0xf7, 0x11, 0x1f, 0xa0, 0x30, 0xcd, 0x73, 0x4f, 0xdf, 0xd7,
+	0xe6, 0x80, 0x55, 0xdf, 0x99, 0x1f, 0x9f, 0x9c, 0xfb, 0xef, 0x4d, 0xbe,
+	0x4f, 0x3d, 0x50, 0x08, 0xa0, 0xfe, 0xf9, 0xe6, 0xda, 0xfb, 0x78, 0xfb,
+	0xbe, 0xe0, 0x7b, 0x79, 0xf7, 0x63, 0xde, 0xcb, 0x30, 0xf8, 0xbe, 0xdc,
+	0xa7, 0xef, 0x18, 0x32, 0xbf, 0xb7, 0xec, 0x13, 0x7b, 0x1e, 0xec, 0xf7,
+	0x2f, 0xe8, 0x39, 0xa2, 0xfa, 0x43, 0x9f, 0x8f, 0xa0, 0x78, 0x93, 0xde,
+	0x0b, 0x8c, 0xe2, 0xcd, 0xab, 0xc2, 0x4f, 0x3a, 0x6f, 0xd0, 0x72, 0x5e,
+	0x27, 0x5f, 0xf9, 0xb9, 0x1b, 0x9d, 0xee, 0xfc, 0xa9, 0xf2, 0x94, 0xb1,
+	0xb5, 0x6b, 0xa7, 0x73, 0x3f, 0xea, 0x7c, 0x61, 0x7b, 0x8f, 0x37, 0x2f,
+	0xbe, 0xdc, 0xe4, 0xf7, 0xa9, 0x95, 0xcd, 0x2a, 0x6f, 0x5c, 0xed, 0x9b,
+	0x40, 0xe7, 0x09, 0xca, 0x9c, 0x6a, 0x03, 0xad, 0x1f, 0xd9, 0xc7, 0x68,
+	0xf8, 0x71, 0x3f, 0x5c, 0x99, 0xe3, 0x90, 0xe1, 0x39, 0xf1, 0xf2, 0x69,
+	0x16, 0x2f, 0xef, 0x25, 0x3e, 0xbf, 0x7b, 0xf6, 0x1f, 0x9a, 0x1b, 0x1f,
+	0x9e, 0xbf, 0x8e, 0xf6, 0x9b, 0x61, 0x7d, 0x3a, 0x46, 0xf1, 0xe6, 0x3a,
+	0x58, 0xef, 0xdf, 0x67, 0xec, 0xf5, 0x3a, 0xde, 0x8e, 0x76, 0x43, 0xc2,
+	0x7f, 0xa5, 0x37, 0xe9, 0x7c, 0x2f, 0x61, 0xfd, 0xdc, 0x24, 0xe7, 0x33,
+	0xe7, 0x41, 0x79, 0x37, 0xac, 0x0f, 0x21, 0x1a, 0x35, 0xfa, 0xb5, 0xf1,
+	0xf1, 0xbd, 0x37, 0x9a, 0x64, 0x3f, 0x5b, 0xf3, 0x05, 0xed, 0xcc, 0x57,
+	0xf2, 0x74, 0x6c, 0xc8, 0x6a, 0xaf, 0x5b, 0xbd, 0xa7, 0xb0, 0x9d, 0x71,
+	0xe1, 0xf1, 0x49, 0x71, 0xf8, 0x6b, 0x24, 0x49, 0x76, 0xf3, 0x2f, 0x50,
+	0x3f, 0x40, 0x3a, 0xca, 0x79, 0xc9, 0x1f, 0xe5, 0xfd, 0x7c, 0x9c, 0xd7,
+	0x5b, 0xe2, 0x7c, 0xfe, 0xf1, 0x60, 0x8c, 0xf4, 0x5b, 0xe2, 0x8c, 0x69,
+	0xe9, 0x9f, 0xb5, 0x4a, 0xff, 0x30, 0x2e, 0x05, 0xac, 0x3c, 0xf4, 0xc1,
+	0x6a, 0x80, 0xe3, 0x85, 0x0c, 0xdf, 0xb7, 0xb9, 0x9e, 0x18, 0xed, 0x4f,
+	0x64, 0xec, 0xf3, 0xdb, 0xc9, 0x9b, 0x56, 0xbe, 0x47, 0x5b, 0xaa, 0xfd,
+	0x65, 0x9d, 0x53, 0x91, 0xc1, 0xc5, 0x92, 0x9d, 0x57, 0x4b, 0x01, 0x2b,
+	0xef, 0xd1, 0x3e, 0x89, 0x2e, 0xbc, 0xd7, 0xe7, 0xc3, 0xbc, 0x3d, 0x50,
+	0x7d, 0xc3, 0x73, 0xfd, 0xab, 0x12, 0xc7, 0xb9, 0x56, 0x72, 0xd6, 0x59,
+	0xfb, 0xd5, 0x76, 0x39, 0x0e, 0x1d, 0x57, 0xd5, 0x0f, 0x9f, 0xe3, 0xb4,
+	0x9c, 0xf7, 0x4e, 0x0f, 0xfa, 0x49, 0x4b, 0x7c, 0x68, 0x97, 0xd7, 0x0f,
+	0x53, 0x7f, 0xf9, 0xd5, 0x7b, 0xbc, 0x96, 0xed, 0x73, 0x6e, 0x3c, 0xa9,
+	0xbf, 0x5f, 0xf4, 0xf3, 0x8e, 0xfe, 0xe9, 0x67, 0x9c, 0xef, 0xd7, 0x75,
+	0xd1, 0xf5, 0xd3, 0xf5, 0xe2, 0xba, 0xa6, 0xf9, 0xde, 0x18, 0xce, 0x0f,
+	0x10, 0xbf, 0xfb, 0xf3, 0x0f, 0xec, 0xef, 0xc7, 0xc7, 0xb2, 0xa8, 0xff,
+	0x06, 0x7c, 0x47, 0xfd, 0x0b, 0xf0, 0x93, 0x60, 0x75, 0x0e, 0x80, 0xfc,
+	0xac, 0xf3, 0xc4, 0x0f, 0xab, 0x7e, 0xdd, 0x6f, 0xb2, 0x3d, 0xe4, 0xc6,
+	0xc7, 0xe7, 0x2c, 0x7d, 0xab, 0xe3, 0x42, 0xbd, 0x7e, 0xe1, 0x63, 0x08,
+	0x72, 0xa3, 0xe8, 0x3f, 0x09, 0x89, 0x20, 0xf3, 0x3b, 0x11, 0x74, 0xab,
+	0x93, 0xe2, 0x47, 0x98, 0xbe, 0x54, 0xda, 0x52, 0x61, 0x8a, 0xe3, 0xca,
+	0xd7, 0xdf, 0x90, 0xda, 0x47, 0x8b, 0x51, 0x5e, 0x6f, 0xcc, 0xb1, 0x1b,
+	0x1f, 0xf1, 0xd7, 0x0b, 0x17, 0x99, 0xdf, 0x1f, 0xcc, 0x33, 0x2e, 0xc3,
+	0xf3, 0x6c, 0x27, 0x35, 0x43, 0xef, 0x01, 0xa1, 0x46, 0x4e, 0x67, 0x71,
+	0x51, 0x78, 0xdb, 0x64, 0xf0, 0x7b, 0x1b, 0xc4, 0xe5, 0x7b, 0x41, 0xfa,
+	0x8c, 0xf9, 0xea, 0xb3, 0xd4, 0xf9, 0x51, 0xf9, 0x8b, 0x72, 0x5c, 0xf1,
+	0x93, 0xcd, 0x08, 0x8f, 0x43, 0x4e, 0x1e, 0xeb, 0x7a, 0x36, 0x19, 0xae,
+	0xbc, 0x1d, 0x71, 0xe7, 0x6d, 0x40, 0x78, 0xfb, 0x67, 0x65, 0x9e, 0xd6,
+	0xda, 0xc7, 0xe7, 0xa2, 0x8a, 0xcf, 0xff, 0x17, 0x8f, 0x19, 0x0f, 0x77,
+	0xa1, 0xff, 0x46, 0x0b, 0x1f, 0xdd, 0xea, 0xee, 0x53, 0x75, 0xff, 0x0f,
+	0x89, 0x63, 0x27, 0x7c, 0x10, 0x10, 0x00, 0x00, 0x00 };
+
+static u8 bnx2_TPAT_b09FwText[] = {
+	0xc5, 0x57, 0x51, 0x6f, 0x1c, 0x57, 0x15, 0x3e, 0x73, 0x67, 0x76, 0x77,
+	0xbc, 0xb5, 0xe3, 0xeb, 0x32, 0x4d, 0x37, 0x60, 0x94, 0x19, 0xfb, 0xda,
+	0x5e, 0xb0, 0x15, 0x26, 0x65, 0x93, 0x2c, 0x62, 0x81, 0x61, 0x76, 0xed,
+	0x58, 0x51, 0x1e, 0x5c, 0x29, 0xa2, 0x48, 0x2d, 0x92, 0x59, 0xc7, 0x84,
+	0xc7, 0x54, 0xea, 0x43, 0xa5, 0x3e, 0x64, 0x59, 0x3b, 0x89, 0x85, 0x96,
+	0x6c, 0x71, 0x91, 0xf3, 0xc2, 0x43, 0x70, 0x93, 0x18, 0xa9, 0x8b, 0x37,
+	0xfd, 0x01, 0x51, 0x91, 0x03, 0x51, 0xfb, 0x07, 0x2a, 0x24, 0xfa, 0x10,
+	0xa9, 0x0f, 0x14, 0xa9, 0x42, 0x16, 0x12, 0x6d, 0x05, 0x21, 0x97, 0xef,
+	0xdc, 0x9d, 0x71, 0x36, 0x71, 0x02, 0x8f, 0xac, 0xb4, 0xba, 0x33, 0x73,
+	0xef, 0x39, 0xf7, 0xdc, 0x73, 0xbe, 0xef, 0x9c, 0x73, 0x95, 0x45, 0x79,
+	0x4a, 0x7e, 0x43, 0xf8, 0x1f, 0xff, 0xf1, 0xf9, 0xd7, 0x8e, 0x1e, 0x79,
+	0xe1, 0x08, 0x1e, 0xeb, 0x96, 0x25, 0xb2, 0xf4, 0x7f, 0xf8, 0xd9, 0x44,
+	0x32, 0xb5, 0x87, 0xff, 0xe4, 0x8a, 0x8a, 0xff, 0x7c, 0xac, 0xc8, 0xb5,
+	0x2b, 0xf2, 0xeb, 0x4b, 0x8a, 0x28, 0xea, 0x4c, 0xfb, 0x55, 0xfa, 0xb7,
+	0x6e, 0x78, 0x0e, 0xf1, 0xf7, 0xaf, 0x56, 0xee, 0x7f, 0xe3, 0xf6, 0x89,
+	0x60, 0xf7, 0x9a, 0x4d, 0xae, 0xac, 0xbc, 0xe9, 0xc8, 0x49, 0x72, 0x47,
+	0x21, 0xf3, 0xeb, 0xa9, 0xba, 0xa0, 0x03, 0xa9, 0xae, 0x86, 0x16, 0xea,
+	0x9e, 0xbe, 0x3d, 0xa5, 0x64, 0x13, 0x1b, 0xdc, 0xea, 0xfa, 0x14, 0x77,
+	0x0b, 0xf4, 0x5e, 0xd7, 0xa3, 0x77, 0xbb, 0x0e, 0x2d, 0xbf, 0x75, 0x81,
+	0x56, 0xc3, 0xa0, 0x50, 0xb3, 0x5d, 0x12, 0x95, 0xa0, 0x50, 0x27, 0x9f,
+	0x6e, 0x84, 0x41, 0x63, 0xd1, 0x1e, 0xb1, 0xdc, 0x8a, 0x4b, 0x6f, 0x4c,
+	0x09, 0xba, 0xe6, 0xbd, 0x42, 0x3f, 0x51, 0x3f, 0xc4, 0xdf, 0x21, 0xb1,
+	0xee, 0x58, 0xd5, 0xab, 0x0e, 0x39, 0xeb, 0xc3, 0x74, 0x32, 0xd4, 0x7a,
+	0x29, 0x8c, 0x20, 0x3f, 0x5e, 0x3c, 0x47, 0x03, 0xd4, 0x90, 0xc1, 0x3c,
+	0x51, 0x86, 0xd7, 0x50, 0x1c, 0x66, 0x28, 0x92, 0xbd, 0x73, 0x5d, 0x33,
+	0xe3, 0x7d, 0x7d, 0x03, 0xf2, 0x03, 0x2a, 0x9d, 0x7f, 0x36, 0x99, 0x97,
+	0xc9, 0xbc, 0x20, 0xb1, 0x11, 0xf8, 0x5b, 0x34, 0x11, 0x39, 0xd6, 0x03,
+	0x1d, 0xab, 0x83, 0x32, 0xde, 0x72, 0xc8, 0x5e, 0x67, 0xfb, 0x95, 0xac,
+	0x92, 0x86, 0x8c, 0xcd, 0x32, 0x8e, 0xa8, 0xbc, 0x86, 0xf8, 0x4d, 0x44,
+	0xc2, 0x22, 0xda, 0x69, 0x15, 0x64, 0xdc, 0x7d, 0xdd, 0x8a, 0xdb, 0x0f,
+	0x74, 0xe4, 0xe4, 0x49, 0xa8, 0xc8, 0x8a, 0xb7, 0x58, 0xd7, 0x00, 0x39,
+	0x2a, 0x07, 0x99, 0x71, 0x29, 0x88, 0xc7, 0x38, 0xf9, 0xce, 0xba, 0x6b,
+	0x78, 0x9e, 0xb3, 0xa2, 0x2d, 0xc7, 0x8a, 0xaf, 0xce, 0xe3, 0xd9, 0x85,
+	0x3c, 0xfc, 0x12, 0x5a, 0x14, 0x2d, 0x58, 0x90, 0xe3, 0x73, 0x4a, 0xbc,
+	0x0b, 0x8a, 0x3c, 0x49, 0x2b, 0xa5, 0xa0, 0xd0, 0xa0, 0x53, 0x56, 0x75,
+	0x6b, 0x5f, 0xd0, 0xe4, 0x7c, 0x77, 0xff, 0x37, 0xb6, 0xe5, 0xfb, 0x8e,
+	0xd6, 0xe2, 0x68, 0x2e, 0x39, 0x23, 0xeb, 0x8b, 0x7a, 0xf6, 0x7b, 0xfc,
+	0x0e, 0x9b, 0xdb, 0xb0, 0xbd, 0x93, 0x85, 0x3d, 0x5a, 0xf3, 0x3e, 0xb1,
+	0xaa, 0xc2, 0xce, 0x08, 0xff, 0x60, 0xad, 0x0e, 0x28, 0x8c, 0x6d, 0x0c,
+	0x91, 0x3f, 0xa2, 0x75, 0x2d, 0x0c, 0xe4, 0x16, 0x95, 0x69, 0xa5, 0x3d,
+	0x2a, 0x67, 0xdb, 0x4d, 0xcc, 0x37, 0x78, 0x0d, 0xfc, 0x41, 0x34, 0xdb,
+	0xd1, 0xfa, 0x66, 0xf8, 0x8b, 0x0c, 0x1d, 0x10, 0x33, 0x19, 0x0a, 0xfc,
+	0x08, 0xdf, 0xc6, 0x6e, 0x3e, 0xee, 0xb3, 0xc3, 0x89, 0x0d, 0xec, 0x77,
+	0xec, 0x13, 0x7e, 0x25, 0x79, 0x1f, 0x94, 0xf1, 0xd5, 0xd4, 0xcf, 0xc6,
+	0x6e, 0xf8, 0x35, 0xa4, 0xb8, 0x04, 0xfb, 0x9f, 0x7a, 0xa6, 0x54, 0x8e,
+	0x6d, 0x61, 0xbb, 0xb1, 0x5e, 0x3d, 0xb4, 0xe9, 0xe5, 0x7d, 0x36, 0xb1,
+	0x3d, 0x82, 0x9c, 0x0d, 0x97, 0x56, 0xd5, 0x5f, 0x2d, 0x3a, 0xa0, 0xf5,
+	0x6a, 0xe8, 0x58, 0xb5, 0xab, 0x9f, 0x27, 0xcf, 0xc0, 0x61, 0x1b, 0x38,
+	0x6c, 0x03, 0x97, 0x6d, 0x92, 0xc0, 0x3b, 0xdd, 0x9e, 0x72, 0xe9, 0x9e,
+	0x8d, 0x78, 0x76, 0x79, 0x3e, 0x47, 0xcd, 0x50, 0xd1, 0xc5, 0x36, 0x7b,
+	0x26, 0x47, 0x2b, 0xea, 0x0b, 0x7d, 0x16, 0xfe, 0xb8, 0x4e, 0xfa, 0x70,
+	0x0c, 0xcc, 0xc6, 0x70, 0xe7, 0x1b, 0xaa, 0x48, 0x17, 0xbb, 0x8a, 0x9a,
+	0x5d, 0x96, 0x5b, 0xa5, 0x9e, 0xdc, 0x30, 0xe4, 0x66, 0x20, 0x57, 0xa2,
+	0x4b, 0x46, 0x76, 0x18, 0xb2, 0xbb, 0x89, 0xec, 0x74, 0x61, 0x8e, 0x42,
+	0xc8, 0x8c, 0xfb, 0x73, 0xc0, 0xdc, 0xa2, 0x37, 0x03, 0xd9, 0x19, 0x5a,
+	0xc5, 0xbf, 0xd9, 0xa6, 0x86, 0x53, 0x62, 0xbd, 0x41, 0xe1, 0x2c, 0xfb,
+	0xdc, 0xe8, 0x6c, 0x40, 0xa7, 0x87, 0x39, 0x17, 0x7a, 0x1c, 0x8c, 0x1f,
+	0xe9, 0x66, 0x1b, 0xd8, 0xf6, 0xf8, 0xf9, 0x3d, 0x2d, 0x2a, 0xf0, 0x43,
+	0x49, 0xf9, 0x4d, 0xe2, 0xf7, 0x2c, 0x55, 0x11, 0x4b, 0xa1, 0x86, 0xa9,
+	0x2e, 0x91, 0x47, 0x2a, 0x36, 0xd5, 0xe1, 0x85, 0x68, 0xc1, 0x31, 0xdf,
+	0x16, 0xa5, 0x05, 0x8e, 0x61, 0x41, 0xbe, 0x17, 0x8f, 0xba, 0x44, 0xfc,
+	0xd5, 0x20, 0xd5, 0xbd, 0x11, 0xac, 0xfd, 0x1a, 0xbe, 0x4f, 0x80, 0xa3,
+	0x23, 0x58, 0xc3, 0x23, 0xc7, 0x01, 0xeb, 0x15, 0xaf, 0x1f, 0x84, 0x8d,
+	0xe9, 0xb7, 0x41, 0x6a, 0x3c, 0x12, 0x1f, 0xb6, 0xd1, 0xc4, 0x05, 0xfb,
+	0x3b, 0x49, 0x6c, 0xfb, 0xe3, 0x95, 0xce, 0x4b, 0x3e, 0xdf, 0x17, 0x55,
+	0xb5, 0x73, 0x54, 0xd0, 0xae, 0xde, 0x51, 0x96, 0xbd, 0x34, 0x63, 0xc3,
+	0xa6, 0x18, 0xb1, 0x7b, 0xc9, 0xd8, 0xd4, 0xec, 0x14, 0xe0, 0xb3, 0x69,
+	0xf9, 0x47, 0x7a, 0x06, 0xe7, 0x0b, 0x0a, 0x44, 0xe3, 0x78, 0xb6, 0xe8,
+	0xa4, 0x1a, 0x85, 0x6c, 0x20, 0x37, 0x09, 0x67, 0x55, 0xd3, 0x72, 0x0e,
+	0x67, 0x8d, 0xce, 0x00, 0xdf, 0xaa, 0x27, 0x77, 0xb9, 0xc3, 0xcf, 0x8b,
+	0x89, 0x0e, 0xfc, 0x5b, 0xd1, 0x21, 0xe0, 0x01, 0xb9, 0xa4, 0x51, 0xb0,
+	0xf7, 0x46, 0xce, 0x67, 0xaf, 0x20, 0x9f, 0xf1, 0x3b, 0xdb, 0x14, 0xc8,
+	0x45, 0xfa, 0x13, 0xf2, 0x92, 0x8f, 0x5c, 0x34, 0x8a, 0x5c, 0x54, 0x40,
+	0x6e, 0x72, 0x17, 0x9d, 0x0a, 0x2d, 0x34, 0x5b, 0x17, 0xb4, 0xad, 0x68,
+	0x31, 0x5b, 0x61, 0x0c, 0x0f, 0x96, 0x81, 0xc9, 0x85, 0x66, 0x67, 0xf4,
+	0xf4, 0x4e, 0x8b, 0x1a, 0x5f, 0xae, 0x88, 0x83, 0x82, 0x86, 0x81, 0x63,
+	0xe6, 0x16, 0xec, 0xea, 0x8e, 0x9e, 0xbe, 0xd3, 0x3a, 0x0c, 0x9f, 0xd1,
+	0x7d, 0xc4, 0x01, 0xba, 0x77, 0x0e, 0xd9, 0x54, 0x30, 0xb1, 0x03, 0xc7,
+	0xa2, 0x97, 0xa7, 0x2c, 0x60, 0x1a, 0xcf, 0xc0, 0x48, 0xa3, 0x3b, 0xba,
+	0x28, 0x2a, 0x0d, 0x8a, 0xba, 0xab, 0xf8, 0xbb, 0x34, 0xdb, 0x72, 0xdd,
+	0x3b, 0xd0, 0x29, 0x4a, 0x81, 0x1f, 0xdb, 0xbb, 0xcc, 0x19, 0xb6, 0x95,
+	0x75, 0xb9, 0x56, 0xc5, 0x77, 0xc6, 0x3a, 0x03, 0x2f, 0x89, 0x4a, 0x19,
+	0xd8, 0x70, 0x10, 0xa3, 0x12, 0x30, 0xc3, 0xf1, 0x00, 0x89, 0xf2, 0xc0,
+	0x03, 0x30, 0xc1, 0x71, 0x88, 0xdb, 0xd0, 0x5f, 0xc6, 0x3f, 0xbc, 0xaf,
+	0x23, 0x8f, 0x71, 0x72, 0x30, 0xe5, 0x3c, 0x72, 0x4b, 0x2f, 0x07, 0xae,
+	0xb4, 0x73, 0xc0, 0x99, 0xd6, 0x75, 0x85, 0x04, 0x94, 0xcf, 0x03, 0x13,
+	0x12, 0x7f, 0xf8, 0x70, 0x81, 0xe7, 0x2c, 0xaa, 0x23, 0xb7, 0x37, 0xbb,
+	0xfc, 0xcc, 0x73, 0x9c, 0x23, 0x72, 0x18, 0xb7, 0xb1, 0xf6, 0x23, 0xdd,
+	0xe8, 0x32, 0x7e, 0x79, 0x5f, 0xe0, 0xae, 0xeb, 0x5a, 0xd5, 0x36, 0x59,
+	0xb5, 0x36, 0xf9, 0xf5, 0xd0, 0x31, 0x67, 0x8c, 0xa4, 0x84, 0x7d, 0xec,
+	0xdb, 0x19, 0x27, 0x6e, 0x59, 0xa6, 0x2e, 0x58, 0x78, 0x1e, 0xeb, 0xfc,
+	0x3c, 0x83, 0x78, 0x44, 0x38, 0x8b, 0x58, 0x46, 0xde, 0xb9, 0xe6, 0xd1,
+	0x30, 0xc7, 0xa8, 0xe9, 0xd1, 0x90, 0x50, 0x6c, 0xdb, 0xfb, 0x02, 0xb6,
+	0xf1, 0x7c, 0x54, 0x0f, 0x7f, 0x87, 0x3d, 0xcb, 0x06, 0xe3, 0xb5, 0x56,
+	0x9a, 0x4b, 0xa1, 0x53, 0x31, 0x0f, 0xdd, 0x24, 0xa7, 0xc6, 0x49, 0xbe,
+	0x74, 0x68, 0x15, 0xdc, 0x7f, 0x11, 0xb9, 0xb2, 0x69, 0x62, 0x10, 0x34,
+	0x7c, 0xf1, 0x40, 0x8f, 0x4f, 0x32, 0xee, 0xb5, 0x3e, 0x1f, 0xce, 0x61,
+	0xed, 0x9f, 0x61, 0xfb, 0x3c, 0xf2, 0x25, 0xe7, 0x58, 0xb6, 0xad, 0x02,
+	0xdb, 0x86, 0x7a, 0xb9, 0x14, 0x79, 0xb6, 0x69, 0xf2, 0xea, 0x00, 0xd9,
+	0xca, 0xc2, 0x3f, 0xf0, 0x17, 0x89, 0xbf, 0xd3, 0x80, 0xc0, 0x7b, 0x1d,
+	0x5c, 0x59, 0x2d, 0x9d, 0xb2, 0x6a, 0x5b, 0x9f, 0x25, 0x3c, 0x61, 0xbb,
+	0xc1, 0x15, 0x8f, 0xe5, 0xb2, 0x90, 0x1b, 0x82, 0xcc, 0x3f, 0x30, 0x97,
+	0xc1, 0xd8, 0xaf, 0xc7, 0xe4, 0x67, 0xae, 0x99, 0xd8, 0x6b, 0x9e, 0x9c,
+	0xca, 0x20, 0x6a, 0xe0, 0x84, 0x5f, 0xa3, 0x63, 0x49, 0x2d, 0x64, 0x7e,
+	0x7c, 0xb7, 0x8f, 0x1f, 0x3e, 0xd9, 0x06, 0x5f, 0xdf, 0x4a, 0x78, 0xcd,
+	0xb9, 0xf1, 0x78, 0x32, 0xef, 0x21, 0xc7, 0x7d, 0x33, 0xc9, 0xd5, 0x2e,
+	0x9e, 0xcb, 0xb4, 0x66, 0xf2, 0x5d, 0x96, 0xf3, 0x5d, 0x01, 0xf9, 0xae,
+	0x0c, 0x5c, 0x87, 0x9f, 0x80, 0x1b, 0xd5, 0x90, 0xe8, 0x0f, 0x2d, 0x07,
+	0x3c, 0xb2, 0x21, 0xcf, 0xf5, 0xf6, 0x84, 0x4d, 0xf9, 0x40, 0x7e, 0x82,
+	0x33, 0x31, 0x47, 0x56, 0x51, 0x23, 0x33, 0x15, 0xe5, 0x5f, 0xa4, 0xc9,
+	0xc2, 0x45, 0xe4, 0x1e, 0x9b, 0xa6, 0xb1, 0x1b, 0xef, 0x9b, 0xd6, 0xc7,
+	0xb4, 0x4e, 0xf3, 0x6f, 0x4c, 0x90, 0xe2, 0x9a, 0x76, 0x1c, 0x3a, 0x26,
+	0xfc, 0x59, 0xf0, 0x6d, 0xa5, 0xfc, 0xbf, 0x64, 0xa6, 0x13, 0x19, 0xd4,
+	0x8a, 0x12, 0xef, 0x4b, 0x54, 0xeb, 0xb0, 0x1f, 0xc2, 0x3e, 0x3c, 0x84,
+	0xc0, 0x03, 0x5a, 0x9b, 0x36, 0xb0, 0x8c, 0x18, 0x1b, 0xac, 0x61, 0xbd,
+	0x28, 0x21, 0x4f, 0x79, 0x01, 0x6b, 0x74, 0x33, 0x95, 0x33, 0xce, 0x8d,
+	0x16, 0xb9, 0x4e, 0x65, 0xc1, 0x59, 0x6d, 0x05, 0xc5, 0x5b, 0x34, 0x1d,
+	0xde, 0x42, 0x4d, 0x69, 0xe2, 0x7f, 0x89, 0x58, 0xc7, 0x19, 0x67, 0xa2,
+	0xc3, 0xe3, 0x82, 0xa3, 0x3a, 0x0d, 0x60, 0xcb, 0x45, 0x9d, 0x64, 0xae,
+	0x93, 0x15, 0x23, 0xdf, 0x02, 0x07, 0x89, 0x9e, 0xd3, 0x89, 0x9e, 0xf9,
+	0xa7, 0xe8, 0x39, 0x9d, 0xe8, 0x99, 0xef, 0xd7, 0x03, 0xb9, 0x5a, 0x22,
+	0x17, 0x3d, 0x45, 0xae, 0x96, 0xc8, 0x45, 0x7d, 0x72, 0x2e, 0xce, 0xc4,
+	0xe7, 0xe2, 0x9c, 0xb0, 0x8b, 0x58, 0x84, 0x64, 0xb0, 0x22, 0x23, 0x8c,
+	0xf7, 0x30, 0x02, 0x33, 0xed, 0x35, 0xac, 0x65, 0x3f, 0x64, 0x98, 0x03,
+	0x8f, 0xf9, 0xee, 0x07, 0xf0, 0xdd, 0x1e, 0xde, 0xf1, 0xfb, 0x0e, 0xb0,
+	0x22, 0xe9, 0xfa, 0x14, 0xe7, 0xf7, 0xa0, 0x11, 0x3d, 0xb2, 0xf6, 0x47,
+	0xc6, 0xcf, 0xe2, 0xca, 0x93, 0x62, 0x80, 0xdc, 0xc7, 0x79, 0xbc, 0x6d,
+	0x53, 0xd5, 0x61, 0xae, 0x1e, 0x71, 0x0c, 0x76, 0xb7, 0xb1, 0x7e, 0xbb,
+	0xc7, 0xab, 0xf9, 0x56, 0x8e, 0x68, 0x73, 0x90, 0x96, 0x91, 0xa3, 0xcf,
+	0x02, 0x4b, 0x6f, 0x87, 0x60, 0x21, 0x8d, 0x03, 0x17, 0x1a, 0xb8, 0x0e,
+	0x4c, 0x6c, 0x63, 0xb5, 0x02, 0x66, 0xfc, 0x8c, 0x76, 0x66, 0xf2, 0x94,
+	0xb9, 0xd9, 0xab, 0x31, 0xce, 0x66, 0xff, 0x3e, 0xaf, 0x63, 0x9f, 0x32,
+	0x72, 0xf4, 0x3b, 0xa8, 0xaf, 0x1e, 0x39, 0x93, 0xc8, 0x4b, 0x6d, 0xce,
+	0x09, 0xe0, 0xe8, 0x4d, 0xae, 0x9f, 0xca, 0xe4, 0xd6, 0xc5, 0xbd, 0xfc,
+	0x93, 0x43, 0x2f, 0xf0, 0x29, 0x72, 0xb6, 0xa0, 0xa5, 0x92, 0xd6, 0xb3,
+	0xe1, 0x1d, 0xe0, 0x0a, 0xdf, 0x36, 0x79, 0x6e, 0x17, 0xdf, 0xf9, 0x9b,
+	0x4b, 0xd9, 0x8d, 0x2f, 0x61, 0x4f, 0xec, 0x77, 0x86, 0xd7, 0xe7, 0xd0,
+	0x27, 0x70, 0xce, 0xc4, 0xb8, 0xc9, 0xef, 0x56, 0xe2, 0x53, 0x1b, 0xe3,
+	0x33, 0x18, 0xf9, 0x3c, 0xa8, 0x28, 0x79, 0xad, 0xef, 0x86, 0xfc, 0xac,
+	0x35, 0xb8, 0x46, 0xd5, 0x96, 0x42, 0xcd, 0x9c, 0x28, 0x2c, 0x83, 0x67,
+	0xd5, 0x4e, 0x3a, 0xcf, 0x73, 0xb2, 0x6f, 0x0e, 0xcf, 0x1d, 0xfe, 0x2e,
+	0x68, 0x47, 0xad, 0xa0, 0xee, 0xa0, 0x27, 0xd9, 0xe4, 0xde, 0x86, 0xfb,
+	0x14, 0xd3, 0x43, 0x14, 0xb9, 0xaf, 0xf9, 0x6d, 0x0b, 0xae, 0x02, 0xa7,
+	0xc0, 0xef, 0xe7, 0x05, 0x3d, 0x4b, 0x55, 0x2f, 0x3d, 0x8f, 0xd6, 0xe0,
+	0x6c, 0xc1, 0xb6, 0x98, 0x8b, 0xe3, 0xa8, 0x43, 0xdc, 0xbf, 0x4c, 0x44,
+	0x75, 0x96, 0xe9, 0x20, 0x1f, 0xac, 0x6b, 0xaa, 0xf7, 0xf4, 0xc8, 0x05,
+	0xf2, 0x28, 0x7e, 0x93, 0xeb, 0x04, 0xfb, 0xf6, 0x39, 0xc4, 0x03, 0xb5,
+	0x76, 0xd3, 0xa1, 0xeb, 0x2d, 0xd6, 0x93, 0x27, 0x1b, 0x7d, 0xd7, 0x5a,
+	0x98, 0xea, 0xf9, 0x10, 0x7a, 0xc8, 0x13, 0xc4, 0x3d, 0xa5, 0x03, 0x5d,
+	0xec, 0x83, 0x0c, 0x7a, 0xdc, 0x22, 0x2d, 0xa9, 0x15, 0x53, 0xc3, 0xce,
+	0xa2, 0xe6, 0xc5, 0xa5, 0x2c, 0x7c, 0x97, 0x33, 0x7a, 0x9a, 0xed, 0x7f,
+	0x69, 0xce, 0x3f, 0xa8, 0x39, 0xd0, 0x8f, 0xf7, 0x2e, 0xe6, 0xd6, 0xcb,
+	0x74, 0xb9, 0x6d, 0x6a, 0x9e, 0x3c, 0x8f, 0x3e, 0xba, 0xd6, 0xfa, 0x2c,
+	0xed, 0x0f, 0x22, 0xe0, 0xb8, 0x70, 0x0e, 0xbe, 0x71, 0xb6, 0x07, 0xe9,
+	0xa7, 0xe8, 0xfb, 0x32, 0xeb, 0xa8, 0x71, 0xf0, 0x9b, 0xb8, 0xd2, 0x28,
+	0x72, 0xef, 0x76, 0x0b, 0x5c, 0x5f, 0x2a, 0xa9, 0xd0, 0xb6, 0x26, 0x69,
+	0xed, 0x57, 0x41, 0x71, 0xcb, 0xf0, 0x1d, 0xf3, 0xdb, 0x3e, 0x5d, 0xea,
+	0x28, 0x5a, 0xeb, 0x48, 0xd8, 0x25, 0x1f, 0xf6, 0xb7, 0x8a, 0xf3, 0x71,
+	0x0d, 0x7f, 0xce, 0xb7, 0x7c, 0x26, 0xf0, 0xa1, 0xc2, 0xfe, 0xe0, 0x7e,
+	0x96, 0x63, 0xc6, 0xf9, 0xef, 0x14, 0x9e, 0xf9, 0xac, 0xdc, 0x7f, 0xb2,
+	0x1f, 0xb8, 0xcf, 0xec, 0xef, 0x89, 0x8f, 0x19, 0xbc, 0x8b, 0x6d, 0xe6,
+	0x10, 0xdf, 0x33, 0x6a, 0xce, 0x52, 0x4b, 0x1a, 0x5e, 0x35, 0xbb, 0x3d,
+	0x7f, 0xc7, 0x21, 0xeb, 0x0c, 0xca, 0x11, 0xdd, 0x39, 0x21, 0x4c, 0x0d,
+	0x8f, 0x90, 0x57, 0xf8, 0x2c, 0xd3, 0xe8, 0xf9, 0x03, 0xf8, 0x2e, 0x90,
+	0xb3, 0x09, 0x3f, 0xc7, 0x13, 0x7e, 0x8e, 0x75, 0x9e, 0xcb, 0xa4, 0x3d,
+	0xce, 0x7e, 0xce, 0xe5, 0xed, 0xfd, 0x9c, 0xf3, 0x9e, 0xc2, 0xb9, 0x11,
+	0xbb, 0xc7, 0xb9, 0xac, 0xc1, 0xa6, 0x58, 0xef, 0x9f, 0x1b, 0xc5, 0x5c,
+	0xae, 0xef, 0xae, 0xf1, 0xa4, 0x98, 0x18, 0x7e, 0x80, 0x93, 0xbc, 0x0e,
+	0xf1, 0x5f, 0x1f, 0x24, 0xfb, 0x0a, 0xf3, 0x32, 0xc5, 0x88, 0x0f, 0x3c,
+	0xa6, 0x3a, 0x06, 0xb0, 0x07, 0xee, 0x0f, 0x1b, 0x19, 0x83, 0x7f, 0xbb,
+	0x92, 0xae, 0x29, 0xd0, 0x5c, 0x2b, 0x08, 0xef, 0xf0, 0xd8, 0xe1, 0x79,
+	0x87, 0xb2, 0xeb, 0x2e, 0xbd, 0x3a, 0x15, 0xf8, 0xbe, 0x08, 0xc2, 0x1d,
+	0x9c, 0xf1, 0xae, 0xf2, 0x28, 0x33, 0xc9, 0x9c, 0xe4, 0x0a, 0x95, 0x05,
+	0x6e, 0x70, 0xaf, 0x6a, 0xeb, 0x0b, 0xe8, 0x35, 0x7c, 0x07, 0xb1, 0xfd,
+	0x25, 0x6c, 0xe1, 0x7c, 0x0b, 0xbb, 0x8a, 0x9b, 0xc0, 0xc1, 0x32, 0xbf,
+	0xef, 0x61, 0x8c, 0xfb, 0x75, 0xde, 0xdf, 0xc3, 0x19, 0x5c, 0xca, 0x6d,
+	0x68, 0xdc, 0xa7, 0x1e, 0xca, 0x5d, 0x4a, 0xf0, 0x9a, 0xc1, 0xf7, 0x25,
+	0x83, 0x57, 0x8e, 0x23, 0xfb, 0x5c, 0xeb, 0x8f, 0x11, 0xc7, 0x2a, 0x7a,
+	0x28, 0xe6, 0xf1, 0xdd, 0xd0, 0xe0, 0x17, 0xf6, 0x40, 0xa6, 0xf3, 0x81,
+	0x63, 0x78, 0x0e, 0x3e, 0x5c, 0x0c, 0x0d, 0xbe, 0x8a, 0xef, 0xe2, 0xd8,
+	0x3d, 0xec, 0xf7, 0xeb, 0x19, 0x97, 0x27, 0xc9, 0x70, 0xca, 0x5f, 0xe1,
+	0xde, 0x2e, 0x9c, 0x40, 0xbe, 0xc5, 0xba, 0x4e, 0xca, 0xfb, 0x2c, 0xf8,
+	0xce, 0xbe, 0x66, 0xee, 0x8f, 0x24, 0xcf, 0x9f, 0x42, 0xb7, 0x84, 0x1f,
+	0x7b, 0xbd, 0x80, 0xbd, 0xce, 0xb6, 0x0d, 0x92, 0xba, 0x92, 0xda, 0xf5,
+	0x77, 0x63, 0xcf, 0xa3, 0x3a, 0x31, 0xbf, 0xfd, 0x24, 0x39, 0xd9, 0x27,
+	0xf7, 0xb7, 0x27, 0xc8, 0x61, 0x7e, 0x9b, 0x65, 0xf2, 0x7b, 0x3d, 0x48,
+	0x75, 0x0f, 0xcf, 0x11, 0xf0, 0xce, 0xb2, 0x8f, 0xdf, 0xe5, 0xfa, 0xb1,
+	0x9f, 0xd6, 0x7e, 0xc6, 0x37, 0xef, 0x19, 0xf8, 0xdc, 0x0f, 0xf7, 0xb0,
+	0x9d, 0x47, 0xde, 0x33, 0x7e, 0x40, 0xce, 0x0c, 0x8a, 0x8b, 0x94, 0xe2,
+	0xff, 0x21, 0xc6, 0x97, 0x61, 0x57, 0x8d, 0xa6, 0xcb, 0x3c, 0x9e, 0xdc,
+	0x87, 0x71, 0xbe, 0x03, 0x73, 0x6d, 0xca, 0xe3, 0x6e, 0xc3, 0x75, 0x9e,
+	0xef, 0x37, 0xbd, 0x3c, 0x55, 0xbb, 0xca, 0xef, 0x9f, 0x27, 0xef, 0x9c,
+	0x97, 0xb9, 0x8f, 0xba, 0x0c, 0x4e, 0x70, 0x3d, 0x9a, 0xa2, 0xa6, 0x07,
+	0xbf, 0x86, 0x6c, 0xc3, 0x39, 0x7a, 0xd8, 0x83, 0x3d, 0xa9, 0xae, 0x00,
+	0x06, 0xea, 0xbf, 0xf6, 0x63, 0xdc, 0xf3, 0xe3, 0x3e, 0x6e, 0x25, 0xfd,
+	0x30, 0xf7, 0x5f, 0x0f, 0xb4, 0x6d, 0x7a, 0x31, 0xce, 0x0b, 0xdc, 0x83,
+	0x7d, 0x0f, 0xfb, 0x0e, 0x99, 0xf7, 0x68, 0x8b, 0x47, 0xf6, 0x0b, 0x19,
+	0x5e, 0xf4, 0x78, 0x9e, 0xda, 0x7d, 0x08, 0xeb, 0xe0, 0x1f, 0x11, 0xa7,
+	0x36, 0x51, 0xfd, 0x2d, 0xae, 0xa9, 0x32, 0xc9, 0xff, 0xe7, 0x31, 0x1e,
+	0x7b, 0xac, 0xa6, 0x1a, 0xbf, 0x62, 0x7f, 0xad, 0x17, 0x80, 0xa9, 0x57,
+	0xc3, 0xd4, 0x56, 0x60, 0xfb, 0x85, 0x34, 0xc7, 0x20, 0x5e, 0xea, 0x81,
+	0x76, 0x26, 0x23, 0xd8, 0xc2, 0x77, 0xf0, 0x1a, 0x7a, 0x3b, 0xb6, 0x65,
+	0xde, 0x7a, 0x71, 0xef, 0xde, 0xfd, 0x78, 0x1f, 0xc7, 0xf1, 0xe3, 0xf8,
+	0xee, 0xc5, 0xcf, 0xcd, 0xc1, 0xf7, 0x7f, 0x69, 0x05, 0x72, 0x44, 0x70,
+	0x3e, 0x22, 0x37, 0x8b, 0x18, 0xdc, 0x45, 0x8c, 0x22, 0x0a, 0xca, 0x1f,
+	0x93, 0xe9, 0x3d, 0xc0, 0xb9, 0xe9, 0x08, 0xcf, 0xe0, 0x00, 0xce, 0x36,
+	0x19, 0x84, 0xef, 0x13, 0xc7, 0xc1, 0x45, 0xdf, 0xde, 0x8b, 0xdd, 0x54,
+	0x12, 0xbb, 0xc9, 0xce, 0xa3, 0x67, 0xf6, 0xc5, 0xb7, 0x93, 0x77, 0x3e,
+	0x1b, 0x9f, 0xcb, 0xe7, 0x1e, 0x09, 0x3e, 0x28, 0xc3, 0xdf, 0xeb, 0x49,
+	0x1f, 0xda, 0xeb, 0xe5, 0xc0, 0x33, 0x54, 0xca, 0x89, 0xe2, 0x4d, 0xbc,
+	0x37, 0xcb, 0x8c, 0xdb, 0xe9, 0xe2, 0xac, 0xc1, 0xaf, 0x18, 0x15, 0x94,
+	0xf2, 0xaa, 0xff, 0x19, 0x63, 0x99, 0xef, 0x3b, 0xfc, 0xde, 0xd3, 0x71,
+	0x23, 0xe4, 0xbb, 0x55, 0x0e, 0xb7, 0x66, 0xd6, 0x6b, 0xf5, 0xfa, 0x61,
+	0x19, 0x33, 0xe7, 0x81, 0xb9, 0xdf, 0xc0, 0xa6, 0x08, 0x9c, 0x4d, 0xef,
+	0x48, 0x59, 0xfa, 0x3d, 0xe2, 0x7a, 0x57, 0xf5, 0x6a, 0xe2, 0x0d, 0xee,
+	0xb9, 0x3a, 0xc8, 0x35, 0x79, 0xf4, 0xc9, 0x2a, 0xbd, 0xdb, 0xb9, 0x74,
+	0x0d, 0x6b, 0xde, 0xc6, 0xdc, 0xa5, 0x4e, 0x8a, 0x21, 0xbe, 0x93, 0xa1,
+	0xa6, 0xa8, 0x7f, 0xea, 0xba, 0xd7, 0xbf, 0x96, 0x7f, 0xff, 0x01, 0x0e,
+	0x04, 0xd7, 0xa3, 0x00, 0x13, 0x00, 0x00, 0x00 };
+
+static const u32 bnx2_TPAT_b09FwData[(0x0/4) + 1] = { 0x0 };
+static const u32 bnx2_TPAT_b09FwRodata[(0x4/4) + 1] = {
+	0x00000001, 0x00000000 };
+
+static struct fw_info bnx2_tpat_fw_09 = {
+	/* Firmware version: 6.2.1b */
+	.ver_major			= 0x6,
+	.ver_minor			= 0x2,
+	.ver_fix			= 0x1,
+
+	.start_addr			= 0x08000490,
+
+	.text_addr			= 0x08000400,
+	.text_len			= 0x12fc,
+	.text_index			= 0x0,
+	.gz_text			= bnx2_TPAT_b09FwText,
+	.gz_text_len			= sizeof(bnx2_TPAT_b09FwText),
+
+	.data_addr			= 0x00000000,
+	.data_len			= 0x0,
+	.data_index			= 0x0,
+	.data				= bnx2_TPAT_b09FwData,
+
+	.sbss_addr			= 0x08001720,
+	.sbss_len			= 0x3c,
+	.sbss_index			= 0x0,
+
+	.bss_addr			= 0x0800175c,
+	.bss_len			= 0x12b4,
+	.bss_index			= 0x0,
+
+	.rodata_addr			= 0x080016fc,
+	.rodata_len			= 0x4,
+	.rodata_index			= 0x0,
+	.rodata				= bnx2_TPAT_b09FwRodata,
+};
+
+static u8 bnx2_TXP_b09FwText[] = {
+	0xc5, 0x7b, 0x0b, 0x70, 0x5c, 0xd5, 0x99, 0xe6, 0x77, 0x6f, 0x77, 0x4b,
+	0xb7, 0x5b, 0xaf, 0x96, 0xdc, 0x86, 0x16, 0x28, 0xb8, 0x2f, 0xba, 0x2d,
+	0x37, 0x48, 0xc0, 0x6d, 0xa9, 0x25, 0x8b, 0xd9, 0xce, 0x74, 0xc7, 0xd8,
+	0x58, 0x60, 0x27, 0x88, 0xc4, 0x64, 0xcd, 0x2c, 0x5b, 0xf4, 0x1a, 0x81,
+	0x65, 0x63, 0x40, 0x49, 0xc8, 0x94, 0x98, 0xb0, 0xf1, 0x8d, 0xfc, 0xc0,
+	0x8f, 0x6e, 0x75, 0xcb, 0xb2, 0x63, 0x33, 0x95, 0x1a, 0xda, 0x96, 0xe4,
+	0x07, 0xb4, 0xd4, 0xe6, 0x95, 0x40, 0x15, 0xb3, 0xa8, 0x8c, 0x0d, 0xe6,
+	0xed, 0x30, 0xd9, 0x2d, 0xc8, 0x66, 0x2a, 0x2a, 0xde, 0x10, 0x9e, 0x33,
+	0x93, 0x19, 0x3b, 0x01, 0xee, 0x7e, 0xff, 0xbd, 0x12, 0x18, 0x8a, 0xad,
+	0xda, 0x9d, 0xda, 0xaa, 0x55, 0x95, 0xaa, 0xa5, 0x7b, 0xcf, 0x3d, 0xe7,
+	0x3f, 0xff, 0xf9, 0xff, 0xef, 0xfb, 0xfe, 0x73, 0x4f, 0x5f, 0x08, 0x04,
+	0x30, 0xfb, 0x53, 0xc3, 0xdf, 0xae, 0x81, 0xc1, 0xdb, 0xe3, 0x17, 0xb7,
+	0x5f, 0xcc, 0x3f, 0x57, 0x43, 0x51, 0x2b, 0xe4, 0x7a, 0x97, 0x02, 0x64,
+	0xde, 0xc5, 0xbf, 0xeb, 0xe7, 0xac, 0x7f, 0xdf, 0x63, 0xd8, 0x3a, 0xcf,
+	0xfd, 0xfc, 0x9d, 0xef, 0x8b, 0x6b, 0x1e, 0x20, 0x38, 0x67, 0xa7, 0xfc,
+	0x42, 0x53, 0x93, 0xfd, 0xdf, 0x5c, 0x6c, 0x40, 0xf3, 0x24, 0x9b, 0xd2,
+	0x37, 0x18, 0x40, 0xba, 0xd4, 0x1a, 0xb9, 0x0c, 0x9f, 0xda, 0x56, 0xc8,
+	0x0b, 0xb9, 0xfe, 0x8d, 0xe4, 0x27, 0x1b, 0xfe, 0x7e, 0x91, 0xfe, 0x51,
+	0xd1, 0x03, 0x2d, 0x98, 0x3c, 0x84, 0x60, 0x0b, 0xb4, 0x26, 0x3e, 0xf3,
+	0x8b, 0x85, 0xdf, 0xf1, 0xa2, 0x76, 0xae, 0xaf, 0x87, 0xec, 0xbf, 0x5f,
+	0x08, 0xec, 0x2b, 0x7b, 0xb1, 0xbf, 0xac, 0x61, 0xac, 0x5c, 0x8d, 0xf1,
+	0x72, 0x10, 0x13, 0xe5, 0x10, 0x0e, 0x94, 0xc3, 0x38, 0x58, 0x6e, 0xc2,
+	0xa1, 0x72, 0x04, 0x87, 0xcb, 0x06, 0xee, 0x2d, 0xc7, 0x70, 0x5f, 0xb9,
+	0x0d, 0xa5, 0xb2, 0x89, 0xc9, 0x72, 0x02, 0x53, 0xe5, 0x6e, 0x94, 0xcb,
+	0x49, 0x3c, 0x52, 0x4e, 0xe3, 0xd1, 0xf2, 0x12, 0x3c, 0x56, 0xee, 0xc1,
+	0xe3, 0xe5, 0x11, 0x9f, 0xdb, 0x37, 0xff, 0xce, 0xf3, 0x5a, 0x9e, 0xf7,
+	0xf2, 0x6c, 0x93, 0x67, 0xdb, 0x3c, 0x9f, 0xc9, 0xf3, 0xd9, 0x3c, 0xfb,
+	0xc8, 0xb3, 0xaf, 0x3c, 0xfb, 0xcc, 0xb3, 0xef, 0x3c, 0xc7, 0xc8, 0x73,
+	0xac, 0x3c, 0xc7, 0xcc, 0x73, 0xec, 0x3c, 0x6d, 0xc8, 0xd3, 0x96, 0x3c,
+	0x6d, 0xca, 0xd3, 0xb6, 0xfc, 0x0a, 0xfc, 0xfd, 0x42, 0x6f, 0xe6, 0xdc,
+	0xa4, 0xd9, 0xfb, 0x37, 0xf9, 0x58, 0xef, 0x4f, 0x16, 0x69, 0x48, 0xd3,
+	0x1d, 0x7f, 0xc3, 0xb1, 0xb7, 0xe4, 0x51, 0xf0, 0x24, 0x61, 0xa9, 0xc9,
+	0x68, 0x6c, 0x0b, 0xa2, 0x91, 0x31, 0x44, 0xb0, 0xa4, 0x04, 0xcb, 0x93,
+	0x8c, 0x60, 0x4d, 0xf6, 0x33, 0x7b, 0xc6, 0xeb, 0xb8, 0x0a, 0x33, 0x1e,
+	0xf9, 0x1c, 0xe0, 0x7a, 0x2b, 0xf0, 0x1a, 0x49, 0x6c, 0xce, 0xc3, 0xf2,
+	0x26, 0x15, 0x6c, 0x4c, 0x44, 0x83, 0x63, 0xce, 0xfd, 0x08, 0x86, 0x4a,
+	0xf2, 0xa9, 0xd3, 0xcb, 0xb6, 0xbd, 0xc9, 0xb4, 0xed, 0x09, 0xb3, 0x12,
+	0x56, 0x50, 0x0f, 0x03, 0x0a, 0x86, 0x4c, 0x15, 0xe9, 0xe0, 0xe2, 0x88,
+	0x17, 0x7a, 0xf8, 0x46, 0xfc, 0x99, 0x3e, 0x4e, 0xc7, 0x7c, 0x70, 0xdb,
+	0x67, 0x50, 0x89, 0xe9, 0xa0, 0xbb, 0x4a, 0xfb, 0xb3, 0xb6, 0xfd, 0xa4,
+	0xe1, 0xc5, 0x04, 0xd7, 0x63, 0xa8, 0xf4, 0x67, 0x7b, 0x9a, 0x6b, 0xb1,
+	0xc9, 0x98, 0x1b, 0x5f, 0x43, 0x31, 0x68, 0xdb, 0x63, 0xbc, 0xb7, 0xa5,
+	0x34, 0xb7, 0xae, 0xb6, 0xad, 0x1a, 0xb6, 0x7d, 0x83, 0xf1, 0x27, 0x7b,
+	0xf5, 0x97, 0xda, 0xc6, 0x71, 0x6f, 0x21, 0x48, 0x1f, 0xa5, 0x51, 0xca,
+	0xda, 0xf0, 0x24, 0xbd, 0xe8, 0xcf, 0x45, 0xb0, 0x7e, 0x72, 0x09, 0x26,
+	0xb3, 0x7a, 0x66, 0x86, 0xcf, 0xad, 0x4e, 0x18, 0xb8, 0x65, 0xb2, 0x07,
+	0x07, 0xb3, 0xb0, 0xfd, 0x49, 0x63, 0xda, 0xaf, 0xc4, 0xb0, 0x66, 0x72,
+	0x05, 0xa6, 0xb2, 0xc6, 0x89, 0x21, 0x25, 0x3a, 0xd8, 0xe8, 0xf1, 0xe2,
+	0xb6, 0xc9, 0x36, 0xdc, 0x3a, 0xd9, 0xcd, 0x67, 0x6c, 0x5c, 0x19, 0x6f,
+	0x62, 0xfb, 0x76, 0x1c, 0xde, 0x65, 0xdb, 0xb1, 0x78, 0x10, 0xfd, 0x93,
+	0x26, 0x0e, 0x16, 0x54, 0x64, 0x26, 0xbc, 0xc8, 0xec, 0x03, 0xd6, 0xec,
+	0x6b, 0xc7, 0x58, 0xc1, 0xc6, 0x6a, 0x73, 0xa8, 0x51, 0x85, 0x0f, 0x99,
+	0xa0, 0x02, 0x9f, 0x51, 0x8b, 0x1b, 0x83, 0x73, 0x3e, 0x54, 0xb0, 0x6e,
+	0x5f, 0x0c, 0x2f, 0x67, 0x2d, 0x5c, 0xd9, 0x19, 0xc6, 0xe0, 0x64, 0x08,
+	0x2f, 0x66, 0x43, 0x1c, 0xc3, 0xc4, 0x0b, 0x59, 0x8d, 0xe3, 0xb4, 0xe1,
+	0x58, 0x56, 0xda, 0x48, 0xdb, 0x6a, 0xf4, 0x4d, 0x36, 0xe1, 0xf9, 0x6c,
+	0x98, 0x63, 0x86, 0xf0, 0x34, 0xdb, 0xad, 0x9d, 0x34, 0x70, 0x82, 0xed,
+	0xfa, 0x27, 0x23, 0x78, 0x2a, 0x5b, 0x4d, 0x5b, 0x43, 0x38, 0x9a, 0x1d,
+	0xc0, 0xc6, 0x6c, 0xeb, 0x89, 0xcb, 0xe8, 0xc3, 0x88, 0x13, 0xf5, 0x72,
+	0xed, 0x75, 0x7b, 0x45, 0x48, 0xfe, 0x96, 0x71, 0xe6, 0xc6, 0x1d, 0xc0,
+	0x50, 0xf6, 0xcd, 0xd9, 0x7c, 0x35, 0xb1, 0xad, 0x70, 0x8a, 0x71, 0x2b,
+	0x71, 0x03, 0x1c, 0x1e, 0x03, 0x63, 0xc5, 0xb2, 0x6b, 0x92, 0xb6, 0xbd,
+	0xbf, 0x93, 0xb1, 0x95, 0x35, 0x56, 0xad, 0x66, 0xab, 0xfb, 0x18, 0xd3,
+	0xd8, 0xa7, 0xaf, 0x9a, 0x86, 0x8a, 0xe2, 0x41, 0x2f, 0x2a, 0x72, 0x7a,
+	0x4f, 0x11, 0xfa, 0x89, 0x35, 0xcc, 0xe8, 0x89, 0xbc, 0xde, 0x6b, 0x61,
+	0x83, 0x1d, 0x4e, 0xb6, 0x44, 0xda, 0x3c, 0x36, 0x6a, 0x19, 0x0b, 0xd9,
+	0x36, 0xdb, 0xae, 0x5b, 0x64, 0xdb, 0xcf, 0x77, 0xc2, 0x56, 0x93, 0xc6,
+	0x89, 0x32, 0x8c, 0xe9, 0xf7, 0x61, 0x0c, 0x1e, 0xc5, 0xf4, 0x37, 0xaa,
+	0x11, 0xed, 0x6f, 0xf6, 0x44, 0x07, 0x4e, 0xf1, 0xd9, 0x9a, 0x49, 0xa6,
+	0x0f, 0xe7, 0x62, 0xe4, 0xc0, 0x3c, 0xd0, 0xe0, 0xe5, 0x7c, 0xda, 0x72,
+	0xb6, 0xed, 0x35, 0xaa, 0x51, 0x4d, 0xff, 0x2e, 0xdb, 0x6d, 0xdb, 0x6f,
+	0x9a, 0x41, 0x54, 0x70, 0x6d, 0x96, 0x8e, 0xd8, 0xd8, 0x6f, 0x1e, 0xa5,
+	0x3f, 0x15, 0x64, 0x7a, 0x13, 0x7c, 0x26, 0xc4, 0xf6, 0xdd, 0x58, 0x96,
+	0x0b, 0x33, 0xf6, 0x35, 0xc6, 0x75, 0x0c, 0x55, 0xec, 0x2b, 0x40, 0x5f,
+	0x55, 0xd2, 0x7f, 0x98, 0x64, 0xb8, 0x4d, 0xba, 0xf1, 0x88, 0xc9, 0x19,
+	0xce, 0x31, 0x8c, 0x07, 0x98, 0x8b, 0xf7, 0x33, 0x27, 0x8f, 0x30, 0x17,
+	0x1f, 0x67, 0xee, 0xed, 0x2d, 0xe8, 0x5b, 0xa7, 0x61, 0xa3, 0x26, 0xb9,
+	0x01, 0x75, 0x1d, 0xc0, 0x8b, 0xc5, 0x38, 0x86, 0x0b, 0xb6, 0x5d, 0xa2,
+	0xdd, 0x01, 0xce, 0xe3, 0x85, 0xe2, 0x79, 0x38, 0xb0, 0xcb, 0x8b, 0xc8,
+	0xfe, 0x10, 0xee, 0xcb, 0x7a, 0x71, 0xc1, 0xb0, 0x6e, 0x15, 0x61, 0xc4,
+	0xd6, 0x2b, 0x46, 0xfa, 0x42, 0x45, 0x2f, 0x58, 0xcc, 0x13, 0x9f, 0xa2,
+	0xa2, 0xe5, 0x80, 0x17, 0xc6, 0x54, 0x04, 0xbe, 0x16, 0x0d, 0x46, 0xcb,
+	0x4e, 0xa0, 0x56, 0x45, 0x85, 0x61, 0x62, 0xd9, 0xce, 0x18, 0xaf, 0x85,
+	0x78, 0x0d, 0xe7, 0x55, 0xc2, 0x73, 0x96, 0x07, 0xf4, 0x9d, 0xe1, 0x41,
+	0xda, 0x6b, 0xdb, 0x1e, 0xa3, 0x1d, 0xd7, 0xfe, 0xdc, 0xb6, 0x9b, 0x3b,
+	0xa4, 0x7d, 0x10, 0xcd, 0x53, 0xf4, 0x43, 0x0b, 0xed, 0x62, 0xfe, 0x3e,
+	0xc0, 0xfc, 0xbd, 0x9f, 0xf9, 0x7b, 0x24, 0xef, 0x61, 0xdc, 0xe8, 0x26,
+	0xf0, 0x0b, 0xae, 0x57, 0x84, 0x73, 0x7c, 0xd9, 0x59, 0xab, 0xfb, 0x89,
+	0x27, 0x47, 0x88, 0x25, 0x32, 0x87, 0xc3, 0x05, 0x05, 0xaa, 0xa1, 0xf7,
+	0xce, 0x20, 0x85, 0xe6, 0xb8, 0x9e, 0x2e, 0x22, 0xcd, 0xe7, 0xf4, 0xad,
+	0x16, 0xf4, 0x9e, 0x69, 0xc6, 0xc0, 0xea, 0x60, 0x37, 0xf1, 0xc0, 0x87,
+	0x2a, 0x43, 0x8f, 0x70, 0xcd, 0x62, 0xd3, 0x98, 0x87, 0x9b, 0x83, 0xec,
+	0x53, 0x8d, 0x29, 0x2e, 0xbe, 0xdc, 0x89, 0xe8, 0x4e, 0x15, 0xe3, 0xa6,
+	0x87, 0x39, 0x6a, 0xc2, 0xd3, 0xc2, 0xe1, 0xa6, 0x12, 0xfc, 0x64, 0xff,
+	0xc4, 0x93, 0xfb, 0x69, 0x0f, 0xfb, 0x63, 0x6e, 0x8a, 0x2f, 0x63, 0xb4,
+	0xe1, 0xa0, 0x63, 0xef, 0x91, 0xf2, 0x6d, 0x8a, 0x1b, 0x43, 0x49, 0xc6,
+	0x8c, 0x1e, 0x81, 0xa2, 0xc7, 0x22, 0x8a, 0x6e, 0xa6, 0x95, 0x20, 0xb1,
+	0xef, 0x03, 0xb6, 0x09, 0x9d, 0xd1, 0x06, 0x56, 0x45, 0x12, 0xb5, 0x47,
+	0x13, 0x41, 0x2c, 0xc9, 0x2e, 0x21, 0x66, 0x44, 0x30, 0x5e, 0x0a, 0xe3,
+	0xb2, 0xac, 0xf4, 0x69, 0x60, 0xac, 0x34, 0x77, 0x3f, 0x74, 0xc6, 0xfd,
+	0xa6, 0x33, 0xee, 0x57, 0x63, 0x68, 0xf4, 0x5c, 0xe2, 0x46, 0x1d, 0x36,
+	0x1a, 0x1f, 0x31, 0x3e, 0x8c, 0xee, 0x3e, 0x34, 0x62, 0x26, 0x18, 0xc4,
+	0x8e, 0x3d, 0xb5, 0xd8, 0xb4, 0xa7, 0x06, 0xdb, 0x46, 0x9b, 0x32, 0x81,
+	0x64, 0x89, 0xe3, 0x35, 0xa7, 0xfb, 0x14, 0x7d, 0xc0, 0xa3, 0x34, 0xc7,
+	0xfa, 0x18, 0xaf, 0x2d, 0xf5, 0xb6, 0x7d, 0x34, 0xce, 0x78, 0x36, 0x5b,
+	0xcd, 0x65, 0x9c, 0xf0, 0x74, 0xaf, 0xde, 0xf3, 0x3a, 0xaa, 0xf1, 0x6d,
+	0xc6, 0xd9, 0x58, 0x1c, 0x7d, 0x1e, 0x78, 0xda, 0xaa, 0xf1, 0xcf, 0xf6,
+	0x3e, 0xaf, 0xf8, 0xd9, 0xde, 0x70, 0x83, 0x39, 0xae, 0x08, 0xb6, 0x55,
+	0x7c, 0x8e, 0x1f, 0xd2, 0xbf, 0x3c, 0xc3, 0xb5, 0x62, 0x3f, 0xfd, 0xf1,
+	0xd6, 0xee, 0x7e, 0x9c, 0xb2, 0x67, 0x56, 0xd6, 0x62, 0xe3, 0xc1, 0x1a,
+	0x6c, 0x1f, 0xf5, 0x21, 0x5d, 0xaf, 0xa0, 0xce, 0x68, 0x9e, 0xbe, 0x99,
+	0x3c, 0x60, 0x8d, 0xc9, 0x73, 0xb5, 0xd8, 0x7b, 0xd0, 0xfd, 0x3f, 0xff,
+	0xf9, 0xff, 0x73, 0xfd, 0xbd, 0xcd, 0x35, 0x14, 0xff, 0xd1, 0xdd, 0xc9,
+	0xb4, 0xe2, 0xe9, 0xb2, 0xed, 0x1d, 0x66, 0x2b, 0xee, 0x1d, 0x0d, 0x71,
+	0x3d, 0xbd, 0xb8, 0x79, 0x1c, 0xb5, 0xde, 0xae, 0xb3, 0xb0, 0x75, 0x97,
+	0x8d, 0x27, 0x4d, 0xae, 0x6f, 0xbe, 0x02, 0xfd, 0xe3, 0x1a, 0x6e, 0x2c,
+	0x35, 0xe0, 0xa6, 0xe2, 0x39, 0x58, 0x37, 0x4e, 0x3c, 0x2e, 0xb5, 0x31,
+	0xef, 0xc2, 0x58, 0x3b, 0xae, 0x47, 0x22, 0xca, 0x5e, 0x45, 0x7c, 0x7d,
+	0x63, 0x09, 0x41, 0x35, 0x39, 0xa8, 0xa8, 0x53, 0xec, 0xc7, 0x89, 0x1d,
+	0x19, 0x2f, 0x0c, 0xe1, 0xa4, 0xcd, 0xf9, 0x4a, 0xe2, 0xa1, 0xe4, 0xf9,
+	0x29, 0xe2, 0xb1, 0xf8, 0x7a, 0x3b, 0x9e, 0x25, 0x76, 0xad, 0x8b, 0x83,
+	0x5c, 0xc4, 0xbc, 0xcf, 0x37, 0xa7, 0xa3, 0x8a, 0x6d, 0x57, 0x46, 0xed,
+	0x05, 0xaf, 0x99, 0xad, 0xc1, 0x3e, 0xfc, 0x9b, 0x9d, 0x0e, 0x0d, 0xf5,
+	0xfb, 0x60, 0xc5, 0xc8, 0x6c, 0xe9, 0xe7, 0x12, 0x7a, 0xb0, 0xe4, 0xac,
+	0xbf, 0xe6, 0xf4, 0x37, 0xc4, 0xfe, 0xb6, 0xb0, 0xbf, 0xe3, 0xa6, 0x1e,
+	0xde, 0x0f, 0x7b, 0x41, 0x9f, 0xe9, 0xce, 0x6d, 0x13, 0x79, 0xe4, 0x2e,
+	0x72, 0xd5, 0xa6, 0xfc, 0x11, 0x8e, 0xb5, 0x04, 0xbf, 0x22, 0xaf, 0x3d,
+	0x44, 0x9e, 0xbb, 0xdf, 0xe1, 0xb3, 0x34, 0x7e, 0xc9, 0xfb, 0x0f, 0x93,
+	0xef, 0x1e, 0x64, 0xdc, 0x3e, 0x40, 0x0e, 0x14, 0x1f, 0x54, 0x25, 0x0d,
+	0x6c, 0x21, 0x0e, 0xae, 0x61, 0xee, 0x6f, 0xcf, 0xa2, 0x76, 0x4d, 0x27,
+	0x94, 0xb5, 0x9d, 0x41, 0xbc, 0x5b, 0x32, 0xb0, 0x95, 0x39, 0x17, 0xcd,
+	0xe9, 0x8f, 0x00, 0x61, 0xbc, 0x5d, 0x0a, 0xe2, 0xb5, 0x6c, 0xf3, 0xd6,
+	0x03, 0xd0, 0x8b, 0x82, 0x6d, 0xaf, 0x31, 0x7e, 0x5e, 0xcd, 0x36, 0xe1,
+	0xd5, 0xd2, 0x67, 0x88, 0x34, 0xe8, 0x47, 0x66, 0x68, 0xdf, 0xfa, 0xd1,
+	0x7f, 0x81, 0x55, 0x2f, 0x3e, 0x0e, 0xe2, 0xb6, 0x3d, 0xb6, 0xfd, 0x41,
+	0xbc, 0xb5, 0xff, 0x62, 0xf5, 0x43, 0x14, 0xe7, 0xbb, 0xd7, 0x7e, 0xc8,
+	0x6b, 0xbd, 0xed, 0xc0, 0xc9, 0x29, 0xe1, 0x35, 0xe0, 0x76, 0xc6, 0xd7,
+	0x68, 0xfb, 0xa7, 0x76, 0xa6, 0xc1, 0xc5, 0xe5, 0x97, 0x7f, 0xee, 0xc5,
+	0x53, 0xc3, 0xb6, 0xed, 0xeb, 0x50, 0xf0, 0xb0, 0xf9, 0x3a, 0x8a, 0x0d,
+	0x73, 0xdc, 0x9e, 0x2e, 0x3e, 0x6e, 0xa6, 0xd1, 0x68, 0x9c, 0xab, 0x9c,
+	0x9e, 0x87, 0xe2, 0x43, 0xe6, 0xef, 0x61, 0xcd, 0x3e, 0xf3, 0xa3, 0x51,
+	0x0d, 0xee, 0xf3, 0x41, 0xdc, 0xc2, 0xfe, 0x4b, 0xf1, 0xd6, 0xc8, 0x7b,
+	0x90, 0x5c, 0x4a, 0x63, 0xca, 0xfc, 0xef, 0x98, 0x76, 0xec, 0x49, 0x63,
+	0xf3, 0xc1, 0x6e, 0xdc, 0x45, 0x8c, 0xbb, 0x61, 0x94, 0x79, 0xa2, 0x46,
+	0xe8, 0x93, 0x3f, 0x22, 0x13, 0x8a, 0xe0, 0xa1, 0x85, 0xd5, 0xc8, 0xd0,
+	0x37, 0xf9, 0x3d, 0x48, 0x7f, 0x1c, 0x57, 0x11, 0x39, 0xeb, 0x2c, 0x78,
+	0xc8, 0x15, 0x1e, 0xa3, 0x32, 0xed, 0x33, 0x02, 0xb8, 0x61, 0x8c, 0x6b,
+	0x5b, 0x5e, 0xcc, 0x38, 0x0b, 0x61, 0x20, 0xaf, 0xe0, 0x9a, 0x78, 0xba,
+	0x61, 0x3e, 0xa2, 0x3d, 0xaa, 0x4a, 0x1e, 0xe0, 0x73, 0xf7, 0xec, 0x09,
+	0x61, 0x90, 0xeb, 0x7d, 0xba, 0x23, 0x9a, 0x6e, 0xf4, 0x84, 0xd0, 0xcf,
+	0x6b, 0x3b, 0xf7, 0x68, 0x58, 0xd6, 0x7e, 0xab, 0x32, 0x13, 0x74, 0x79,
+	0x60, 0x4d, 0x1e, 0xc1, 0x06, 0x72, 0x7b, 0x7d, 0x32, 0x3a, 0xf8, 0x4f,
+	0xfc, 0xff, 0xb6, 0x32, 0x6a, 0x9b, 0xbb, 0x02, 0xb8, 0x75, 0x17, 0x7e,
+	0x56, 0x93, 0xac, 0x65, 0xac, 0xdb, 0xf6, 0x73, 0xf1, 0x68, 0x24, 0xa7,
+	0x78, 0xd1, 0x57, 0x56, 0x71, 0xd3, 0x58, 0x80, 0xf3, 0xfa, 0xc4, 0xae,
+	0x48, 0x30, 0x1e, 0x5b, 0x02, 0xb8, 0x79, 0x2c, 0x8d, 0xbd, 0x7b, 0x10,
+	0xd1, 0x3a, 0xae, 0x57, 0x50, 0xef, 0xe6, 0xb3, 0x8f, 0xf9, 0x7a, 0x38,
+	0x91, 0xc6, 0xdd, 0x7b, 0xaa, 0xd1, 0xbd, 0x3b, 0x8d, 0xbb, 0xf6, 0x2c,
+	0x4e, 0x37, 0x02, 0xd3, 0x0d, 0x1d, 0xcc, 0xa8, 0xb8, 0xe7, 0x27, 0x74,
+	0x49, 0xf0, 0x63, 0x33, 0xda, 0x7f, 0x1b, 0x3c, 0x3f, 0xac, 0x47, 0x34,
+	0x33, 0xa5, 0x4c, 0x47, 0xaa, 0xd1, 0x80, 0xbe, 0x83, 0x69, 0x8c, 0xee,
+	0x09, 0x60, 0xdd, 0xe8, 0xd0, 0xb5, 0xf3, 0x88, 0x1d, 0x3f, 0x8e, 0xeb,
+	0xc1, 0x7b, 0xd5, 0x24, 0x7a, 0x0d, 0x3f, 0x06, 0xc6, 0xaa, 0x91, 0xda,
+	0x6d, 0xa7, 0x4e, 0x77, 0x04, 0x71, 0xc7, 0xc1, 0x06, 0x0c, 0xec, 0xf1,
+	0x63, 0xed, 0xa8, 0x7e, 0xca, 0x24, 0xc6, 0xbe, 0xb1, 0xb0, 0x12, 0x8f,
+	0x9a, 0xcd, 0xd3, 0x8d, 0xe4, 0x37, 0xad, 0xa3, 0x0a, 0xfd, 0x63, 0x7e,
+	0xfc, 0x60, 0xb4, 0x81, 0x6b, 0xea, 0xac, 0x35, 0x16, 0xb6, 0x77, 0x63,
+	0x84, 0x1c, 0x9f, 0xdb, 0xa3, 0x87, 0xff, 0x09, 0xfa, 0xc0, 0x6d, 0xd0,
+	0x33, 0x4f, 0x2a, 0x69, 0x1c, 0x88, 0xfb, 0xa8, 0x29, 0x6c, 0x7b, 0x73,
+	0xbc, 0x35, 0x78, 0x3f, 0xed, 0x6e, 0x48, 0x9e, 0x4d, 0x1c, 0xd1, 0xf7,
+	0x02, 0xad, 0x87, 0xa2, 0xea, 0x5f, 0x2a, 0xc5, 0xef, 0x47, 0x98, 0x4b,
+	0xa2, 0x61, 0x50, 0xbb, 0x9d, 0xf8, 0xf3, 0xbd, 0x9c, 0xe4, 0x47, 0x10,
+	0xdf, 0x23, 0x8f, 0x2c, 0x27, 0xb7, 0x2c, 0x9f, 0x04, 0x96, 0xf2, 0xf7,
+	0x79, 0xc6, 0x4a, 0x29, 0x4e, 0x4d, 0x58, 0x8f, 0xda, 0x17, 0x12, 0x1a,
+	0x9e, 0xd8, 0xad, 0x6f, 0x25, 0x9e, 0x16, 0x64, 0x6d, 0x37, 0x92, 0x13,
+	0x9f, 0xcc, 0x29, 0x98, 0x67, 0x74, 0x63, 0x4b, 0xd9, 0x8d, 0xbd, 0x3f,
+	0x32, 0xb7, 0xee, 0x19, 0x6e, 0x8e, 0x7d, 0xec, 0x59, 0xa0, 0x14, 0xb9,
+	0x0e, 0x9b, 0xa7, 0x34, 0xac, 0x1e, 0xfd, 0x47, 0xa4, 0x1d, 0x3e, 0x7e,
+	0x4b, 0x11, 0x0c, 0xf5, 0x1a, 0x3d, 0x28, 0xe4, 0xf5, 0x58, 0x1a, 0x68,
+	0x57, 0x93, 0x36, 0x2a, 0xda, 0xb1, 0xb2, 0x02, 0xd1, 0x53, 0x8b, 0x15,
+	0x05, 0xfe, 0x96, 0x1e, 0x6c, 0x63, 0x6e, 0x3e, 0x5e, 0xf2, 0xe3, 0x0e,
+	0xce, 0x73, 0x90, 0x3e, 0xbb, 0x6d, 0xd4, 0x46, 0xac, 0x83, 0xdc, 0xd1,
+	0xa1, 0x77, 0x93, 0xca, 0xd7, 0x57, 0x92, 0xbb, 0x3e, 0x88, 0x8b, 0x6f,
+	0xbd, 0x28, 0x95, 0x7a, 0x98, 0x77, 0x69, 0xe2, 0x21, 0x22, 0xeb, 0xe2,
+	0x01, 0x25, 0x5d, 0xaf, 0x11, 0x43, 0xe9, 0xef, 0x3d, 0x82, 0x2f, 0x9a,
+	0x92, 0xae, 0xa8, 0xc6, 0x7d, 0xa5, 0x34, 0x86, 0x19, 0x1b, 0xc7, 0x19,
+	0x67, 0xc5, 0x50, 0x05, 0x62, 0x2d, 0x2a, 0x7f, 0x61, 0x2d, 0xe0, 0xdc,
+	0xdf, 0x5a, 0x14, 0xc2, 0xe9, 0x5d, 0x4d, 0x78, 0x83, 0x39, 0xb7, 0x26,
+	0xaf, 0x62, 0x70, 0xd4, 0xb6, 0x8d, 0x0e, 0xea, 0xa5, 0x0e, 0xc1, 0x73,
+	0xc6, 0x0c, 0xf1, 0xe6, 0x50, 0xf9, 0x59, 0x07, 0x6b, 0xca, 0x65, 0xb1,
+	0xfd, 0xcf, 0xb3, 0xfc, 0x01, 0xec, 0x1c, 0x26, 0x06, 0x9e, 0xe5, 0xc6,
+	0xda, 0x60, 0xfe, 0x71, 0x72, 0x9b, 0x51, 0xf4, 0x30, 0x16, 0x6f, 0xa7,
+	0x06, 0x5e, 0x93, 0xd7, 0x4f, 0xfc, 0x91, 0x78, 0x7b, 0x07, 0x63, 0xff,
+	0xc7, 0xcc, 0x95, 0xa2, 0xd3, 0xae, 0x62, 0x36, 0x67, 0x18, 0xaf, 0x79,
+	0xfb, 0xc3, 0x40, 0xf2, 0x33, 0xfb, 0x8a, 0x4e, 0xe3, 0x94, 0x5f, 0x09,
+	0x61, 0x03, 0xdb, 0xfd, 0x68, 0x4c, 0xd6, 0xe4, 0x2a, 0x0f, 0x02, 0xc4,
+	0x37, 0x15, 0xf8, 0xf5, 0xd4, 0x45, 0x2a, 0x79, 0x84, 0x39, 0x7b, 0x9e,
+	0x3d, 0x13, 0x92, 0x5c, 0x24, 0xe9, 0xd5, 0x0a, 0x0e, 0x28, 0x18, 0xb9,
+	0x38, 0x7a, 0x64, 0x91, 0x1a, 0x66, 0xe0, 0x89, 0x4e, 0x16, 0xfc, 0x41,
+	0xdd, 0xd9, 0xc6, 0x6f, 0xf0, 0x6f, 0x41, 0x59, 0xc7, 0x41, 0xe5, 0x15,
+	0x6a, 0xd7, 0x48, 0x25, 0xea, 0x16, 0x18, 0xff, 0x0a, 0x3b, 0x88, 0xda,
+	0x67, 0xb8, 0xc6, 0xdf, 0xcf, 0xa5, 0x95, 0xa7, 0x12, 0x69, 0x55, 0xa3,
+	0xbe, 0xfc, 0x57, 0xf2, 0xcc, 0x15, 0x39, 0x04, 0x43, 0x49, 0x0d, 0xef,
+	0xd0, 0x5f, 0x33, 0xc4, 0xd8, 0x19, 0x62, 0xec, 0x0c, 0xf1, 0x65, 0x66,
+	0x3c, 0x44, 0xdc, 0x19, 0x54, 0x7e, 0x53, 0x72, 0x35, 0xf8, 0xaf, 0xe8,
+	0xdf, 0x5f, 0x72, 0x8c, 0x87, 0xa9, 0xc1, 0x1f, 0xa2, 0x06, 0x7f, 0x90,
+	0x1a, 0xfc, 0x01, 0x6a, 0xf0, 0xfb, 0xa9, 0xc1, 0x5d, 0xbc, 0xed, 0x25,
+	0x3e, 0xba, 0x71, 0xb8, 0x75, 0x8f, 0xc4, 0x9a, 0x7e, 0x28, 0xa2, 0xa6,
+	0x51, 0x19, 0xbf, 0x93, 0x76, 0x4b, 0xcc, 0x31, 0xae, 0xf7, 0x74, 0x63,
+	0x67, 0xde, 0xb6, 0xbb, 0x3b, 0x0e, 0xa1, 0x61, 0x1e, 0x79, 0x93, 0x78,
+	0x66, 0xe1, 0x9f, 0x45, 0x1f, 0x33, 0x9e, 0x5e, 0xf8, 0x2c, 0xe2, 0xf8,
+	0x67, 0x81, 0x47, 0x38, 0x68, 0xe4, 0x62, 0x99, 0xf3, 0xa0, 0xb2, 0x9a,
+	0x73, 0x48, 0x7b, 0xa1, 0x69, 0xa2, 0x77, 0xf3, 0x83, 0x4a, 0xbf, 0xa3,
+	0xcb, 0xb7, 0xe3, 0x96, 0x5d, 0x82, 0x37, 0xcd, 0xab, 0xb6, 0x10, 0xbb,
+	0xd7, 0x11, 0xbb, 0x97, 0xc4, 0x35, 0x6c, 0x6b, 0x3b, 0x6d, 0x47, 0xe6,
+	0xbb, 0x75, 0x43, 0x3e, 0x8f, 0xf4, 0x40, 0x22, 0x89, 0x8d, 0x79, 0xbd,
+	0x38, 0x03, 0xd4, 0xd5, 0x1a, 0x0a, 0xde, 0x8a, 0xf6, 0x10, 0x87, 0x74,
+	0xf3, 0x24, 0x9a, 0xb7, 0x26, 0x54, 0x58, 0x1a, 0xe3, 0xee, 0x8f, 0xcc,
+	0x91, 0x5b, 0xa9, 0x51, 0x2b, 0x8d, 0xc5, 0xd8, 0x3b, 0xca, 0x38, 0xee,
+	0x48, 0xef, 0x9c, 0x47, 0xdf, 0x2e, 0xeb, 0x82, 0xc1, 0xae, 0x94, 0x40,
+	0x32, 0xda, 0xb3, 0x9d, 0x3d, 0x3e, 0x4d, 0x3f, 0x0c, 0xe5, 0xbb, 0xf0,
+	0x38, 0xf1, 0xfe, 0x51, 0xd3, 0x8b, 0xa3, 0xa5, 0xbb, 0xa9, 0x35, 0xa3,
+	0x7b, 0x6d, 0x92, 0x64, 0x43, 0x67, 0x00, 0xbd, 0x3f, 0x87, 0xf8, 0xff,
+	0x67, 0x75, 0xd4, 0x8f, 0x9e, 0x76, 0x0d, 0xef, 0x1b, 0x69, 0xa5, 0xa2,
+	0x33, 0x9a, 0xb9, 0x8d, 0x13, 0xaf, 0x4d, 0xda, 0x0b, 0xee, 0x8b, 0x57,
+	0x60, 0x67, 0x4b, 0x2d, 0x35, 0x4d, 0x04, 0xcf, 0x95, 0xa2, 0x7b, 0x6f,
+	0x55, 0xcf, 0xc1, 0xf1, 0x71, 0x60, 0x07, 0xf5, 0xcc, 0x4b, 0xe4, 0x38,
+	0xce, 0x9d, 0x9c, 0x98, 0xc4, 0x36, 0xae, 0xa1, 0x6a, 0xa8, 0x38, 0xff,
+	0x6a, 0x05, 0x67, 0x1b, 0x69, 0xfc, 0xa8, 0x6b, 0xab, 0xc4, 0x1a, 0xef,
+	0xa1, 0xb6, 0xa2, 0x2b, 0x84, 0x67, 0xb3, 0x69, 0x25, 0xd0, 0xa5, 0x47,
+	0xd2, 0xaa, 0x97, 0xf9, 0xd9, 0x84, 0xe3, 0xcc, 0xcd, 0xa5, 0x93, 0x0d,
+	0xb8, 0x66, 0x1f, 0xf3, 0x77, 0x52, 0xf8, 0x10, 0xc1, 0xf9, 0xf4, 0xdb,
+	0xfc, 0xa9, 0xef, 0x7a, 0x5c, 0xfd, 0xe1, 0x67, 0xee, 0x34, 0xe0, 0xd6,
+	0x3d, 0x55, 0xb8, 0x85, 0x39, 0xf4, 0x46, 0x5c, 0x8f, 0x4c, 0x31, 0x77,
+	0x4a, 0x71, 0xdd, 0xca, 0xb2, 0x81, 0xda, 0x42, 0x5e, 0x30, 0x25, 0x27,
+	0xb9, 0x1e, 0x6a, 0x8f, 0xd4, 0x42, 0xdf, 0x92, 0x5a, 0xc8, 0x47, 0x0d,
+	0xf8, 0x2c, 0x73, 0x74, 0x47, 0xd9, 0x4f, 0xbc, 0x6a, 0xc0, 0xda, 0x3d,
+	0xc2, 0xc9, 0x36, 0xae, 0x8f, 0x8b, 0xee, 0xd7, 0xbb, 0xdf, 0xf6, 0xa8,
+	0x38, 0x6d, 0xe0, 0x18, 0x73, 0x96, 0x35, 0x42, 0x74, 0xe0, 0x35, 0x6a,
+	0xda, 0xef, 0x50, 0xab, 0xdc, 0x92, 0x47, 0xed, 0x38, 0xe3, 0x6c, 0xc7,
+	0xae, 0x68, 0xe6, 0x01, 0xe6, 0xe6, 0x0a, 0xc6, 0xd8, 0xe6, 0xd9, 0xbc,
+	0x5a, 0xc7, 0xbc, 0xea, 0x8b, 0xdb, 0xb8, 0x82, 0x75, 0xc3, 0xe1, 0xb2,
+	0xc4, 0x7f, 0x98, 0x5c, 0xe0, 0xe6, 0xd5, 0xa1, 0xf2, 0xa7, 0xaa, 0xc4,
+	0x3c, 0x38, 0xaf, 0x0c, 0x71, 0x38, 0xf3, 0x39, 0xee, 0x8e, 0x7d, 0x86,
+	0xf9, 0xa2, 0x4f, 0x1a, 0x90, 0x21, 0x7e, 0x6e, 0x22, 0x16, 0xdc, 0x3c,
+	0xea, 0xf8, 0x63, 0xc1, 0xa8, 0xb9, 0xf1, 0xea, 0x79, 0xd0, 0x0f, 0x2d,
+	0x67, 0xcd, 0xb2, 0xbf, 0xc5, 0x8f, 0xd5, 0x63, 0xa8, 0xf5, 0x77, 0x09,
+	0x8e, 0xee, 0x66, 0x5f, 0x41, 0x6c, 0x38, 0x28, 0xbc, 0x91, 0x86, 0xdf,
+	0xf1, 0xa1, 0x70, 0xc6, 0xd3, 0xaa, 0xeb, 0x13, 0x37, 0xbf, 0x80, 0x3f,
+	0x7d, 0xf6, 0x2d, 0x62, 0x43, 0x91, 0x76, 0x97, 0xb2, 0xb0, 0x6a, 0x92,
+	0xd1, 0x42, 0x4e, 0x79, 0x97, 0x6d, 0xaa, 0xf1, 0x40, 0x49, 0xf0, 0xed,
+	0xb8, 0x2a, 0xb1, 0x38, 0xcf, 0xa8, 0x14, 0xce, 0x63, 0x7d, 0x88, 0xda,
+	0xe5, 0xc4, 0xbf, 0x9b, 0x88, 0xf9, 0xff, 0x60, 0x5e, 0x31, 0x9b, 0xc7,
+	0x6e, 0xae, 0x9d, 0x64, 0x9c, 0x32, 0xb5, 0x6b, 0x8f, 0x53, 0xe7, 0x3d,
+	0xbc, 0x0b, 0x3e, 0x0f, 0xf5, 0xcd, 0x73, 0x09, 0xdb, 0x7e, 0xa4, 0x3d,
+	0x5a, 0xf0, 0xb0, 0x8e, 0xd9, 0xc9, 0x3a, 0xa5, 0x9c, 0x45, 0xa4, 0xc6,
+	0x40, 0xd0, 0xcb, 0x3a, 0x2c, 0xcf, 0xb5, 0x9b, 0xe2, 0xda, 0x0d, 0x73,
+	0xed, 0xac, 0x7d, 0xe7, 0xc0, 0x9a, 0x88, 0xc0, 0xa2, 0x6e, 0xb7, 0x26,
+	0x42, 0xc8, 0x4d, 0x0e, 0x2a, 0xc7, 0x4a, 0x2d, 0xb2, 0x7e, 0xa2, 0x0d,
+	0x71, 0x4f, 0x3e, 0xad, 0x84, 0x3b, 0x55, 0xc6, 0x8f, 0x86, 0xd3, 0x0b,
+	0xed, 0x05, 0xb1, 0x8e, 0x30, 0x1a, 0x0e, 0x8e, 0x38, 0xeb, 0xbb, 0xb5,
+	0x2c, 0x76, 0xa5, 0x95, 0xa5, 0x09, 0x99, 0xc7, 0xb9, 0x62, 0x67, 0xed,
+	0xf7, 0x12, 0xa8, 0xbd, 0x9a, 0x76, 0x2c, 0x1a, 0xf6, 0xe2, 0x57, 0xcc,
+	0x65, 0x63, 0x58, 0xb4, 0x86, 0x60, 0x62, 0x5a, 0x19, 0xe8, 0x4c, 0x13,
+	0xbf, 0x68, 0xf8, 0x7e, 0xc9, 0xeb, 0x73, 0x80, 0x03, 0x92, 0xdb, 0x74,
+	0xc5, 0x94, 0xe4, 0x37, 0xeb, 0x86, 0x03, 0x92, 0xe3, 0xac, 0x2f, 0xa6,
+	0xbe, 0x2e, 0xcf, 0x45, 0x67, 0x49, 0x9e, 0x4b, 0xbe, 0x33, 0x37, 0x39,
+	0xa7, 0x9b, 0x38, 0xc6, 0x01, 0xae, 0x71, 0xdf, 0xf0, 0x85, 0x5e, 0xb1,
+	0xb7, 0x2a, 0x29, 0xf8, 0x24, 0xf9, 0x1b, 0xa1, 0x7d, 0x82, 0x4f, 0x73,
+	0x3a, 0x42, 0x7e, 0xd6, 0x7a, 0x60, 0x28, 0x5e, 0x77, 0x5e, 0xa2, 0xe7,
+	0x45, 0xc7, 0xc3, 0xf2, 0x27, 0xed, 0xc8, 0x82, 0xa4, 0xd4, 0x28, 0xc8,
+	0x54, 0xd2, 0xc7, 0xed, 0xd4, 0x40, 0xaa, 0xf1, 0xa9, 0x7d, 0x7a, 0x91,
+	0x66, 0xbe, 0xca, 0xbe, 0x1f, 0xfc, 0xbc, 0x76, 0x01, 0xae, 0x9d, 0xc2,
+	0xd7, 0xfc, 0xd8, 0x08, 0x27, 0x3f, 0xb5, 0xe7, 0x2d, 0x02, 0xbe, 0x37,
+	0xe5, 0xcd, 0x54, 0x91, 0x52, 0x07, 0x72, 0x1b, 0xec, 0x7a, 0xe6, 0x51,
+	0x6d, 0xd2, 0x18, 0xac, 0x57, 0xab, 0xbb, 0xdf, 0xeb, 0xf4, 0x2b, 0xcf,
+	0x77, 0x86, 0x57, 0xbc, 0x4f, 0x4e, 0x09, 0x18, 0xe8, 0x5d, 0x3f, 0xd9,
+	0xed, 0x7d, 0x9b, 0xfe, 0xbf, 0x90, 0x73, 0x88, 0x4c, 0x36, 0xad, 0x78,
+	0x83, 0x35, 0x77, 0x45, 0xfc, 0x07, 0x97, 0x1c, 0xeb, 0x56, 0xcf, 0xf3,
+	0xa1, 0x8e, 0xf5, 0xeb, 0x83, 0xd3, 0x5b, 0xb8, 0xee, 0xe9, 0xa0, 0x86,
+	0xa1, 0xb2, 0xdc, 0x5f, 0x00, 0x7f, 0x12, 0x9f, 0xc4, 0x3a, 0x8d, 0xf0,
+	0x21, 0x1c, 0xd5, 0xa5, 0x9e, 0xd9, 0x54, 0xd6, 0xb4, 0x8f, 0xb3, 0xfe,
+	0xff, 0x58, 0x97, 0xc4, 0x47, 0x0d, 0x86, 0x31, 0xd0, 0xae, 0x06, 0xf1,
+	0x51, 0x67, 0x4b, 0xe6, 0xa4, 0xd2, 0xd2, 0xff, 0x22, 0x79, 0xec, 0xde,
+	0x8b, 0x14, 0xec, 0xb8, 0x28, 0xda, 0xbd, 0x5c, 0xf1, 0x63, 0xa6, 0xb7,
+	0x9a, 0xfa, 0xb8, 0x29, 0xb3, 0x80, 0xeb, 0x70, 0x8a, 0x5a, 0xa6, 0x91,
+	0x75, 0xde, 0xdd, 0x63, 0xb8, 0x73, 0x1e, 0x39, 0x66, 0xf4, 0x20, 0x13,
+	0xfc, 0xa0, 0xe8, 0xe7, 0x1e, 0x58, 0x65, 0x0f, 0xa6, 0xc9, 0x93, 0x16,
+	0x7d, 0x51, 0x91, 0x6c, 0x5b, 0x32, 0x5d, 0x7a, 0xd4, 0xe7, 0xe6, 0xff,
+	0x39, 0x75, 0xfc, 0x54, 0xea, 0xbb, 0xa0, 0x35, 0x24, 0x4f, 0x7e, 0xf3,
+	0xbb, 0x2d, 0xd0, 0xe6, 0x25, 0x7b, 0xff, 0xf2, 0x47, 0x2d, 0x80, 0x67,
+	0x58, 0x41, 0x5f, 0xb7, 0xec, 0x2f, 0x7c, 0x42, 0xed, 0x1a, 0xe0, 0x1a,
+	0x00, 0x2d, 0xc3, 0x96, 0x5d, 0x69, 0xa4, 0xd5, 0xa7, 0x8d, 0x0d, 0xb8,
+	0x90, 0xb5, 0xd1, 0x72, 0xc5, 0x88, 0x2d, 0x54, 0x22, 0xa8, 0x98, 0x5a,
+	0xc2, 0x98, 0x31, 0xe0, 0x9b, 0x12, 0xde, 0x4f, 0x92, 0xb3, 0x07, 0x95,
+	0x2c, 0x63, 0xd7, 0xf2, 0x41, 0x0b, 0x53, 0xf7, 0x5f, 0xb2, 0x73, 0x50,
+	0xd9, 0x5b, 0x5a, 0x4c, 0xed, 0xbe, 0x18, 0xc3, 0xc4, 0xc3, 0xe7, 0xe3,
+	0x75, 0x28, 0xd6, 0xa3, 0xc6, 0x67, 0xe0, 0xd4, 0xef, 0x0d, 0xc5, 0x73,
+	0xfa, 0x92, 0x26, 0xe2, 0xde, 0xd1, 0x0b, 0x2a, 0xf0, 0x91, 0x3d, 0x6e,
+	0x2c, 0x0e, 0x7a, 0x91, 0x26, 0xa3, 0xaa, 0x74, 0xb4, 0xfe, 0xf2, 0x4b,
+	0x14, 0x04, 0xcc, 0x11, 0xae, 0x6d, 0xb7, 0x72, 0xb4, 0x54, 0xf4, 0xba,
+	0xb9, 0xd6, 0x8c, 0xe3, 0x41, 0xd4, 0xd5, 0x18, 0x0b, 0xf1, 0x7c, 0x50,
+	0x23, 0xdf, 0x5a, 0x38, 0xcd, 0x75, 0xea, 0x1e, 0xed, 0x45, 0xad, 0x61,
+	0xb3, 0xf6, 0xfc, 0x67, 0xfb, 0x83, 0xf9, 0xf2, 0x1c, 0x45, 0x99, 0xcb,
+	0xa9, 0x5f, 0xd3, 0x87, 0x97, 0x38, 0xde, 0x9a, 0x1e, 0x43, 0x15, 0x30,
+	0x5f, 0xc3, 0x0e, 0xd6, 0xdd, 0x37, 0xb3, 0x26, 0x59, 0x16, 0x6d, 0xed,
+	0x79, 0x83, 0x49, 0x17, 0x99, 0xdf, 0x9c, 0x19, 0x43, 0xba, 0xb1, 0x7a,
+	0xd6, 0x8e, 0x1f, 0xe1, 0x98, 0x3c, 0xc7, 0x7e, 0x24, 0xee, 0xe4, 0x9a,
+	0xf4, 0x31, 0x77, 0x0d, 0xda, 0xb9, 0xc9, 0xde, 0xd4, 0x4f, 0x16, 0x7e,
+	0xdd, 0xf5, 0x81, 0xaf, 0xb9, 0xee, 0xe5, 0x3a, 0x40, 0xf3, 0x27, 0xbd,
+	0xca, 0x05, 0xd1, 0xb6, 0xde, 0xa7, 0x4b, 0xe8, 0x3d, 0x91, 0x15, 0x7c,
+	0xe4, 0xac, 0x39, 0x97, 0xca, 0x4e, 0xf4, 0x3e, 0xc5, 0x02, 0xc1, 0x9b,
+	0x1c, 0x9f, 0xbf, 0xc9, 0xd9, 0x47, 0xbb, 0x6e, 0xfe, 0x0d, 0xf4, 0xe3,
+	0x04, 0x31, 0x65, 0x3f, 0xaf, 0x2b, 0xc9, 0xcc, 0x37, 0x0d, 0xe7, 0xb3,
+	0xef, 0x9b, 0xcd, 0x25, 0x77, 0x1f, 0x82, 0x35, 0xab, 0x49, 0x02, 0x9f,
+	0xdd, 0x47, 0x83, 0xb7, 0x9a, 0x7d, 0x55, 0x25, 0x5b, 0xba, 0x77, 0xa0,
+	0x25, 0x9d, 0x25, 0xf7, 0xbc, 0xda, 0xd6, 0xda, 0x5b, 0xc9, 0x4f, 0xdf,
+	0x45, 0x56, 0x0f, 0xa7, 0xcf, 0x3e, 0x33, 0xdf, 0xbc, 0xc1, 0x88, 0x46,
+	0x96, 0x42, 0x0f, 0x37, 0x2b, 0xa2, 0xaf, 0x75, 0x47, 0xdd, 0xde, 0x54,
+	0x92, 0xbe, 0xe6, 0x6a, 0xab, 0x2f, 0xfa, 0xab, 0x62, 0x7f, 0x81, 0x64,
+	0x8b, 0xb9, 0x1d, 0xd2, 0xa7, 0x82, 0xa3, 0x6d, 0xad, 0x3d, 0x15, 0xfc,
+	0x7c, 0xa3, 0xcd, 0x4a, 0xfb, 0xbf, 0xd2, 0x9f, 0x47, 0xf1, 0xcd, 0xf5,
+	0xa7, 0x55, 0xd3, 0xf6, 0x6c, 0x14, 0x58, 0xff, 0xa5, 0x7e, 0x55, 0x89,
+	0x7b, 0xaf, 0xc6, 0xfe, 0xb6, 0xb2, 0xbf, 0x6d, 0xec, 0xe7, 0x89, 0x36,
+	0x3d, 0x66, 0xf1, 0xf3, 0xf5, 0xb6, 0x68, 0x70, 0x23, 0xd7, 0x24, 0x2d,
+	0x35, 0xf5, 0x17, 0xe3, 0x5b, 0x01, 0xc6, 0xf8, 0x77, 0x72, 0x52, 0x47,
+	0x46, 0xfb, 0x9f, 0x51, 0x34, 0x7c, 0x7b, 0xb2, 0x1a, 0x2b, 0x72, 0xd1,
+	0x55, 0x9b, 0x95, 0x6a, 0x72, 0x96, 0xbb, 0xdf, 0x35, 0x7d, 0x46, 0x7b,
+	0x5f, 0xb2, 0x1a, 0x07, 0xb2, 0x0b, 0x23, 0x5e, 0xc8, 0xb8, 0x46, 0xf8,
+	0x18, 0xdc, 0xbd, 0x9f, 0xb1, 0x92, 0xf8, 0xb8, 0x0a, 0x43, 0x41, 0x64,
+	0xa8, 0xb9, 0xbd, 0x95, 0x49, 0x0f, 0xee, 0xfa, 0x7c, 0x1f, 0x49, 0x3e,
+	0x4f, 0x6a, 0x87, 0xb3, 0x9f, 0xda, 0x01, 0x43, 0xf6, 0x24, 0xe4, 0xda,
+	0x49, 0xed, 0x50, 0xe9, 0xa4, 0x36, 0xce, 0x78, 0xae, 0x60, 0x3f, 0x5b,
+	0xe0, 0x5e, 0x1b, 0x2b, 0x9d, 0xc3, 0xe7, 0x83, 0x38, 0x90, 0xb0, 0xf0,
+	0x44, 0x56, 0x6a, 0xc1, 0x4d, 0xe4, 0x4d, 0x50, 0xdb, 0x01, 0xe3, 0xa3,
+	0x32, 0xa6, 0x87, 0x63, 0x78, 0x31, 0x51, 0x9e, 0xab, 0xf3, 0x14, 0x1c,
+	0x64, 0xcd, 0x31, 0x13, 0x52, 0x51, 0xda, 0xa3, 0xe2, 0x11, 0xea, 0x99,
+	0xba, 0xe4, 0x27, 0x76, 0x6d, 0x87, 0xce, 0xbc, 0x06, 0x26, 0xa8, 0x89,
+	0x8b, 0x63, 0x92, 0x9f, 0x27, 0xb5, 0xa7, 0x38, 0x96, 0x66, 0x9c, 0x93,
+	0xf1, 0x26, 0x8d, 0xd8, 0xdb, 0xb4, 0xe7, 0x78, 0xc9, 0x8b, 0xb1, 0x3c,
+	0xe1, 0x95, 0x75, 0xc9, 0xdd, 0x09, 0xe9, 0xcb, 0xc2, 0xf9, 0x4e, 0xbf,
+	0x9b, 0xd0, 0xec, 0xd4, 0x7c, 0x9f, 0xd8, 0xdb, 0xe3, 0x7a, 0xcf, 0x72,
+	0xf6, 0x13, 0xcb, 0xfd, 0x57, 0x1f, 0x02, 0x5e, 0x72, 0x9f, 0x5b, 0x17,
+	0x13, 0x0b, 0xbf, 0xe4, 0x93, 0x71, 0xf2, 0xe6, 0xfe, 0xac, 0x0a, 0x0f,
+	0xfb, 0x5e, 0xc2, 0x60, 0x2c, 0x06, 0x8d, 0xf0, 0x18, 0x93, 0xa1, 0x82,
+	0xeb, 0xeb, 0x4d, 0xfa, 0x59, 0x43, 0x19, 0xc1, 0x03, 0xc4, 0x2a, 0xea,
+	0x6a, 0xaf, 0x37, 0x59, 0x73, 0x46, 0x0c, 0xb0, 0xaf, 0x2f, 0x6a, 0x60,
+	0x4d, 0xe5, 0x7a, 0x2f, 0xce, 0xfa, 0x4f, 0xa5, 0x71, 0x66, 0x9c, 0x1c,
+	0xf0, 0x09, 0x47, 0x3e, 0x9e, 0x97, 0xfb, 0x7d, 0x67, 0xdc, 0x2f, 0xf9,
+	0xdc, 0x9c, 0x9b, 0xae, 0xf7, 0x3a, 0xfe, 0x4b, 0xab, 0xb2, 0x0f, 0xec,
+	0x4d, 0x3e, 0x94, 0xda, 0x64, 0x9c, 0x43, 0xfd, 0x22, 0xfb, 0x31, 0xb2,
+	0xde, 0x33, 0x67, 0xd4, 0xf2, 0x61, 0xda, 0x2e, 0x18, 0x2d, 0xf8, 0xe4,
+	0xc7, 0xf9, 0x3b, 0x7f, 0x49, 0xcc, 0xda, 0x80, 0x25, 0x6c, 0x95, 0x1a,
+	0x16, 0x4d, 0x63, 0xa1, 0x2e, 0xa9, 0x67, 0x5e, 0xf5, 0x50, 0x1b, 0x46,
+	0xf5, 0x53, 0x57, 0xc0, 0xb2, 0x6b, 0x8c, 0x41, 0xd4, 0xc6, 0x07, 0xb1,
+	0x37, 0xae, 0xe0, 0x34, 0xb9, 0xed, 0xe3, 0xce, 0x68, 0x37, 0x75, 0x44,
+	0xcf, 0xaf, 0x15, 0xc3, 0xac, 0x51, 0x8c, 0x55, 0xef, 0x7b, 0x8c, 0x58,
+	0x8e, 0x35, 0x4c, 0xc0, 0xb0, 0xc8, 0x57, 0xd3, 0xac, 0x09, 0x0d, 0x54,
+	0x4d, 0x11, 0x8c, 0xa7, 0x42, 0x5a, 0x60, 0x2a, 0xac, 0x79, 0xa7, 0x9a,
+	0x34, 0xcf, 0x94, 0x57, 0xf3, 0x4d, 0x45, 0xb4, 0xca, 0x29, 0x4d, 0xab,
+	0x98, 0x32, 0x34, 0xff, 0x14, 0xfc, 0xc2, 0xff, 0x97, 0xee, 0xb6, 0xfc,
+	0xbe, 0xae, 0x0d, 0x78, 0xbf, 0x43, 0xb4, 0xe6, 0xf4, 0x36, 0xb2, 0x9a,
+	0x56, 0x3f, 0x15, 0xd3, 0xea, 0xa6, 0xaa, 0xd1, 0xb6, 0x9b, 0xb6, 0x3a,
+	0x7b, 0x4c, 0xac, 0x0d, 0xe2, 0xd3, 0x57, 0x57, 0xa1, 0x0d, 0x81, 0xa9,
+	0x5e, 0xfa, 0x5a, 0xf6, 0x0d, 0x92, 0x18, 0xa3, 0xcf, 0x17, 0xe6, 0x9a,
+	0x70, 0x28, 0xdb, 0xcd, 0x98, 0x0c, 0x58, 0xb5, 0x49, 0x3d, 0x38, 0xa5,
+	0xc8, 0xfe, 0xd3, 0x12, 0xf2, 0x40, 0x2f, 0x31, 0x7f, 0x25, 0x36, 0x96,
+	0x57, 0x50, 0x47, 0x5e, 0x47, 0x1c, 0x15, 0xff, 0x64, 0x88, 0xa1, 0x82,
+	0x0f, 0xaf, 0xa4, 0x2e, 0x18, 0x51, 0x71, 0xc8, 0x40, 0x3d, 0x63, 0x95,
+	0xab, 0x13, 0x35, 0xdf, 0x46, 0x34, 0x7c, 0x9c, 0x3e, 0x1c, 0xa2, 0x76,
+	0xdd, 0xe8, 0xe4, 0xbe, 0x17, 0x56, 0x49, 0xf8, 0x0e, 0xfe, 0xe6, 0xce,
+	0x2a, 0x25, 0x36, 0x52, 0x8f, 0x75, 0x85, 0x98, 0xe0, 0x41, 0x8f, 0x45,
+	0x0e, 0x5b, 0x16, 0xd7, 0x07, 0x58, 0x57, 0xf5, 0x4f, 0xb3, 0xae, 0xd2,
+	0x88, 0xaa, 0xaf, 0x06, 0xff, 0x71, 0x4b, 0x75, 0x82, 0x79, 0x69, 0x48,
+	0x4e, 0xfd, 0x6d, 0x60, 0x71, 0x27, 0xb0, 0x6c, 0xd7, 0x2f, 0x02, 0xcb,
+	0x3b, 0x8b, 0x81, 0xcb, 0x3b, 0x6d, 0xfb, 0x34, 0xfd, 0x7b, 0x29, 0x63,
+	0x71, 0x30, 0x67, 0xf1, 0x9a, 0xec, 0x49, 0x7b, 0xd1, 0xcd, 0xff, 0x5f,
+	0x24, 0xaf, 0x5d, 0x32, 0xd9, 0x88, 0x1b, 0x29, 0x11, 0xc6, 0xcc, 0x02,
+	0xfa, 0x82, 0x2a, 0xfa, 0x62, 0x5c, 0x28, 0xc6, 0xb3, 0xcf, 0xf8, 0x3b,
+	0xdc, 0x18, 0xf4, 0xa0, 0xce, 0x78, 0x08, 0xb7, 0x05, 0xc7, 0x03, 0x4b,
+	0x3b, 0xa1, 0x05, 0xa8, 0xf3, 0xb6, 0x3b, 0xb5, 0xed, 0x37, 0x81, 0xab,
+	0x25, 0x46, 0x9d, 0x9a, 0xd0, 0xbf, 0x31, 0xd1, 0x80, 0x35, 0x05, 0x1b,
+	0xaf, 0x9a, 0xfa, 0xe0, 0xb7, 0x61, 0x9d, 0xa8, 0x63, 0x7e, 0x1a, 0x4e,
+	0x7e, 0xc3, 0x7f, 0x55, 0x67, 0x23, 0xde, 0x18, 0xb1, 0xfc, 0x2b, 0x3a,
+	0x63, 0xb8, 0x2b, 0x67, 0x73, 0x1c, 0xcc, 0xf7, 0x20, 0xba, 0x6a, 0x99,
+	0x03, 0x9c, 0xc8, 0x34, 0x26, 0xa3, 0xe6, 0x1d, 0x8a, 0x5d, 0xa1, 0x11,
+	0xeb, 0x5b, 0x26, 0xbd, 0x88, 0x4d, 0xb6, 0xe1, 0xdd, 0x5c, 0x0c, 0xb1,
+	0xa8, 0x70, 0xae, 0x89, 0xf7, 0x72, 0x5c, 0x8b, 0xc9, 0x04, 0xde, 0xc8,
+	0x05, 0x11, 0x9d, 0xec, 0xc6, 0xeb, 0x39, 0x89, 0xf9, 0xa4, 0xbf, 0x44,
+	0xed, 0x68, 0x50, 0x1b, 0xbd, 0xc6, 0xfa, 0xb3, 0x79, 0x32, 0x82, 0xb7,
+	0xb8, 0x16, 0x0b, 0x27, 0x0d, 0xbc, 0x9a, 0x8b, 0xe0, 0xfc, 0xc9, 0x18,
+	0x4e, 0xe7, 0xa0, 0xec, 0x4f, 0x18, 0xce, 0xbc, 0x37, 0xe6, 0x64, 0x0f,
+	0x15, 0xfe, 0x47, 0x13, 0xe4, 0x40, 0x62, 0xcc, 0xb2, 0x6c, 0x08, 0x2a,
+	0xfb, 0xaf, 0xa4, 0xa6, 0x6a, 0x1d, 0x95, 0x98, 0x7d, 0x39, 0xb5, 0xa9,
+	0x40, 0xc0, 0x98, 0xb4, 0x31, 0x18, 0xd7, 0xcd, 0x1a, 0x0f, 0xae, 0xaa,
+	0x00, 0xee, 0xf4, 0x22, 0x3a, 0x70, 0x89, 0xf2, 0x89, 0xfd, 0x7c, 0xa7,
+	0x8b, 0x33, 0x35, 0xec, 0x63, 0xb0, 0xb3, 0x01, 0x15, 0x7c, 0xc6, 0x97,
+	0x3c, 0x91, 0x9a, 0xd8, 0x65, 0xe3, 0x84, 0xa9, 0xf7, 0xd6, 0x28, 0x56,
+	0x26, 0x80, 0x64, 0x85, 0x68, 0xc5, 0xcd, 0xca, 0x7f, 0x22, 0xf7, 0xb8,
+	0xf9, 0xa3, 0x25, 0x5f, 0x48, 0x69, 0xbb, 0xa1, 0x55, 0xb0, 0xed, 0x93,
+	0xbb, 0xf4, 0x60, 0x85, 0xe2, 0xf8, 0xcc, 0x7f, 0x47, 0x67, 0x3d, 0x79,
+	0xad, 0x11, 0x17, 0x8e, 0x5a, 0x81, 0x9b, 0x3a, 0x6d, 0xd6, 0xea, 0x17,
+	0xe2, 0xc5, 0x5d, 0x43, 0x19, 0x8d, 0x6b, 0xbb, 0x34, 0xbe, 0x0a, 0xdb,
+	0xf7, 0xe0, 0xbc, 0x6a, 0xc0, 0xf0, 0x09, 0x77, 0x99, 0xd1, 0x60, 0x1f,
+	0xa2, 0xd3, 0xcb, 0xa0, 0x9b, 0xef, 0x2a, 0x48, 0x57, 0x25, 0xa3, 0xe9,
+	0x2a, 0x0f, 0xfa, 0xe4, 0x75, 0x51, 0x8c, 0xfe, 0x6a, 0xa3, 0x16, 0x8c,
+	0x8e, 0x56, 0x30, 0xf7, 0x43, 0xf4, 0x19, 0xfe, 0xd2, 0x87, 0x68, 0xf0,
+	0x35, 0xc6, 0xd2, 0xf9, 0xf4, 0xa3, 0x91, 0x9f, 0xf3, 0x55, 0xb5, 0xe3,
+	0xab, 0xee, 0xbc, 0xf8, 0x44, 0xc1, 0x55, 0xd1, 0xa0, 0xb3, 0xfe, 0xae,
+	0x5f, 0xec, 0x0d, 0x7f, 0x88, 0xcf, 0xf9, 0x45, 0x7c, 0xb4, 0x0a, 0x3b,
+	0x0e, 0x7e, 0xd5, 0x37, 0xe2, 0xaf, 0xff, 0x9d, 0x6f, 0x82, 0xb3, 0x7b,
+	0xc8, 0x8e, 0x7f, 0x88, 0x11, 0x2f, 0xa5, 0x16, 0xef, 0x9a, 0xf3, 0xcf,
+	0x78, 0x60, 0x09, 0xe3, 0xa6, 0x32, 0x79, 0x2c, 0xf5, 0xd6, 0x2e, 0xd6,
+	0x30, 0xbb, 0xf4, 0x13, 0x4b, 0xd1, 0x3c, 0xbd, 0xd0, 0x83, 0xa6, 0x2a,
+	0xfc, 0x93, 0x5d, 0xb1, 0x30, 0xda, 0x7b, 0x13, 0xeb, 0xde, 0x0b, 0x27,
+	0x83, 0xd4, 0x56, 0x21, 0xce, 0xc5, 0xa4, 0x0f, 0xc3, 0xb8, 0x20, 0x3a,
+	0x1e, 0xb8, 0x8a, 0x31, 0xfc, 0xc6, 0xee, 0x18, 0xfa, 0x76, 0x23, 0xe4,
+	0x03, 0xa8, 0x84, 0xf1, 0xb3, 0x6b, 0x13, 0xd1, 0x55, 0xef, 0xb1, 0xfd,
+	0xa5, 0x6c, 0xdf, 0xea, 0xb4, 0x0d, 0xb1, 0xad, 0xf0, 0xd1, 0x0b, 0xa9,
+	0xec, 0xee, 0x9f, 0x55, 0x88, 0x06, 0x1f, 0x8a, 0x7e, 0xdf, 0xce, 0xac,
+	0x94, 0x58, 0x1d, 0x0f, 0xac, 0x62, 0x1f, 0x15, 0x7b, 0xd0, 0xc4, 0xda,
+	0xa3, 0x77, 0xbd, 0x33, 0x8e, 0x3c, 0x13, 0x74, 0x9e, 0xf1, 0xd0, 0xce,
+	0x1b, 0x76, 0x89, 0x6d, 0x27, 0xc4, 0x36, 0xad, 0x8e, 0x36, 0x7e, 0xb8,
+	0x9b, 0x38, 0xbf, 0x2b, 0x86, 0x3b, 0x76, 0xeb, 0xc1, 0x35, 0x68, 0x5e,
+	0x75, 0x15, 0xd0, 0xc4, 0x71, 0x13, 0x8d, 0xf8, 0xc0, 0x1e, 0x8c, 0x46,
+	0x07, 0x5f, 0xa6, 0x0d, 0xeb, 0x12, 0xae, 0xbd, 0x97, 0x38, 0x7a, 0x30,
+	0x3c, 0x6b, 0x73, 0x13, 0xfb, 0x74, 0x38, 0xa4, 0x52, 0x35, 0xbe, 0x6e,
+	0x1f, 0xfd, 0x4e, 0x56, 0x7f, 0xb2, 0xdf, 0xbc, 0x12, 0x5b, 0xf3, 0xc4,
+	0x84, 0xbc, 0xc6, 0x75, 0xb1, 0xf0, 0x40, 0x42, 0x8f, 0xd5, 0x2b, 0x82,
+	0x8b, 0x16, 0x73, 0x5b, 0xb0, 0xab, 0x39, 0x72, 0x10, 0x61, 0x4d, 0x9d,
+	0xd2, 0xa8, 0x6b, 0x1c, 0xdc, 0x82, 0x15, 0x5e, 0x89, 0xcd, 0x65, 0x2f,
+	0x84, 0x2f, 0x9e, 0xce, 0xae, 0xc0, 0x36, 0xd6, 0x59, 0x91, 0x06, 0xcb,
+	0xef, 0xed, 0x3a, 0x55, 0xe1, 0xea, 0x8f, 0x85, 0x58, 0xb1, 0xf3, 0x76,
+	0x54, 0x0d, 0x7b, 0x7b, 0x87, 0x14, 0xdd, 0x5c, 0x4e, 0xee, 0xbc, 0x7c,
+	0x4a, 0xee, 0x37, 0x61, 0x38, 0x7b, 0x1d, 0xeb, 0xdb, 0x66, 0x72, 0x91,
+	0x17, 0xc5, 0xc6, 0x26, 0x67, 0xaf, 0xba, 0xc0, 0x6b, 0x85, 0xf2, 0x57,
+	0xf7, 0xd0, 0x7f, 0x3a, 0xbb, 0x77, 0xde, 0xcb, 0xba, 0x8e, 0xb8, 0x45,
+	0x1b, 0x87, 0x66, 0x6d, 0x1c, 0x4f, 0xf0, 0x5a, 0x29, 0xf9, 0x39, 0x2e,
+	0x89, 0x56, 0xf1, 0x24, 0x57, 0xe2, 0x06, 0x87, 0x1f, 0x6d, 0x6c, 0x32,
+	0x15, 0xac, 0xa6, 0x3e, 0x9b, 0x30, 0x45, 0xbb, 0xac, 0xc4, 0xf9, 0x25,
+	0xa9, 0xff, 0x60, 0x55, 0xb2, 0xd6, 0x79, 0x5b, 0x6a, 0x1d, 0x9f, 0xbd,
+	0xa1, 0x9a, 0x7c, 0x3c, 0x4e, 0x42, 0xba, 0x57, 0xb0, 0xb4, 0xd3, 0x20,
+	0xa7, 0x4d, 0x2f, 0xe4, 0x9a, 0xa4, 0x59, 0x6a, 0x93, 0xd3, 0xa0, 0xbc,
+	0x9a, 0x08, 0xe0, 0xb2, 0x82, 0x4a, 0xae, 0xb4, 0xad, 0x46, 0xd6, 0x93,
+	0x63, 0x6c, 0x5b, 0xce, 0x6f, 0xc0, 0x94, 0x49, 0x5c, 0x5e, 0x64, 0x64,
+	0x4e, 0x29, 0xb8, 0xb5, 0x16, 0x11, 0x6a, 0x95, 0xb4, 0xf2, 0x06, 0x63,
+	0x80, 0x92, 0x21, 0x72, 0x45, 0xa7, 0x45, 0xee, 0x96, 0x1a, 0x49, 0xb8,
+	0x53, 0xf6, 0x6d, 0x42, 0x38, 0xcc, 0x1a, 0xa6, 0x38, 0xde, 0x80, 0x03,
+	0x45, 0xb7, 0xee, 0x78, 0x9d, 0xb6, 0x6c, 0x65, 0x2d, 0x7a, 0xd0, 0xfc,
+	0xd2, 0x1e, 0x81, 0x55, 0x9d, 0x44, 0x60, 0x7b, 0x67, 0x04, 0xcb, 0x73,
+	0x69, 0x65, 0x53, 0xa7, 0xe5, 0xdf, 0xdc, 0xe9, 0xc5, 0x8e, 0x92, 0x81,
+	0x2b, 0x72, 0xad, 0x26, 0x95, 0xfc, 0xfc, 0x0a, 0xe6, 0xcf, 0xb6, 0x52,
+	0x10, 0x5b, 0x8b, 0x2b, 0x30, 0x56, 0xb8, 0x08, 0x1b, 0x8b, 0x2e, 0x47,
+	0x5a, 0xe3, 0x6f, 0xcf, 0xce, 0x59, 0x38, 0xf8, 0x3f, 0x57, 0xa2, 0x56,
+	0xe6, 0x2d, 0xfe, 0x72, 0xf8, 0x91, 0x6b, 0x96, 0x56, 0x8e, 0x27, 0xd2,
+	0x58, 0x96, 0x28, 0xd8, 0x5e, 0x43, 0x6a, 0xa0, 0xb0, 0x63, 0xdb, 0x58,
+	0xa9, 0x01, 0xe3, 0xc5, 0x10, 0x0e, 0x96, 0x5c, 0xbb, 0x8e, 0x96, 0x24,
+	0x46, 0x34, 0x4b, 0x4b, 0x4a, 0x6c, 0x9c, 0x19, 0x2b, 0x16, 0x82, 0x9d,
+	0x61, 0x54, 0x0c, 0x8b, 0xff, 0x6c, 0xec, 0x34, 0xa3, 0x91, 0xa7, 0x10,
+	0x66, 0x8d, 0x25, 0xf1, 0x63, 0xe3, 0x7e, 0xd3, 0x07, 0xcf, 0x4e, 0x0d,
+	0xab, 0x13, 0x5c, 0xaf, 0x5a, 0x1f, 0xd4, 0xfd, 0x52, 0xdf, 0xff, 0x80,
+	0x76, 0xc8, 0x7e, 0xa9, 0xfc, 0xfd, 0xd5, 0x75, 0xf5, 0x11, 0xc7, 0x45,
+	0x5f, 0xb5, 0x57, 0xba, 0xeb, 0x2b, 0x78, 0x60, 0xf9, 0xc7, 0xa4, 0x36,
+	0x2d, 0x68, 0x38, 0x6a, 0x52, 0x13, 0x04, 0x15, 0x25, 0x90, 0x0c, 0x68,
+	0x57, 0x30, 0x57, 0xb6, 0x95, 0x6e, 0x27, 0x9f, 0x79, 0xb1, 0xb5, 0x24,
+	0x79, 0xf1, 0x72, 0xea, 0x2d, 0x62, 0xe2, 0x1b, 0xa6, 0x86, 0x62, 0xaf,
+	0x46, 0x3e, 0xd2, 0x58, 0xf7, 0x5a, 0x28, 0x75, 0x12, 0x1f, 0x72, 0xd4,
+	0xd6, 0xd4, 0xad, 0xee, 0xfb, 0x43, 0x3d, 0x68, 0xe1, 0xe1, 0x4a, 0xa9,
+	0x85, 0x37, 0x19, 0xe2, 0x1f, 0xe1, 0x2d, 0x99, 0x8b, 0xec, 0xd5, 0x5b,
+	0xfe, 0x96, 0x4e, 0x3f, 0x4e, 0x14, 0x2a, 0x84, 0xbb, 0x56, 0x15, 0x89,
+	0x6f, 0x9e, 0x38, 0xfc, 0x0b, 0x3b, 0x75, 0x8b, 0x6c, 0x4d, 0xdb, 0x7e,
+	0x82, 0xd5, 0xe4, 0x1c, 0xcd, 0xb8, 0x8e, 0xf8, 0xe7, 0x55, 0x6b, 0x93,
+	0xb6, 0xfd, 0xbe, 0xb3, 0x57, 0x07, 0x54, 0x4f, 0x69, 0x78, 0xa6, 0x10,
+	0x81, 0xec, 0xd7, 0x58, 0x8e, 0x96, 0xfb, 0x0e, 0x8e, 0x16, 0x3c, 0xca,
+	0x82, 0x24, 0x3c, 0xa7, 0x17, 0xd9, 0x58, 0x65, 0x46, 0xcd, 0x46, 0x6a,
+	0x30, 0x1f, 0xb9, 0xac, 0x62, 0xaa, 0x1e, 0xa7, 0x0b, 0x0d, 0x78, 0xb3,
+	0x50, 0x8f, 0xd7, 0xc9, 0x43, 0xdd, 0x1d, 0x43, 0x03, 0x61, 0x8e, 0xf5,
+	0x22, 0xb1, 0xf9, 0x45, 0x45, 0xef, 0x5f, 0xae, 0xd8, 0xd8, 0xc6, 0x58,
+	0xba, 0x37, 0x1e, 0x43, 0xf3, 0xa5, 0x82, 0xd5, 0x6d, 0xd4, 0x44, 0xcd,
+	0x3d, 0xd5, 0x6a, 0x03, 0xdb, 0x83, 0x31, 0x07, 0xe5, 0x12, 0xf6, 0x99,
+	0x35, 0xf5, 0xf0, 0x0e, 0xc5, 0x22, 0xeb, 0xe9, 0xa7, 0x96, 0x02, 0x9b,
+	0x16, 0xc0, 0xae, 0xa8, 0xec, 0x22, 0xcf, 0x13, 0xf7, 0x53, 0x8b, 0xea,
+	0xf1, 0xde, 0x68, 0x03, 0x3e, 0x18, 0xe5, 0x9c, 0x16, 0x0d, 0x4d, 0xfb,
+	0x88, 0x27, 0xaf, 0xe7, 0x12, 0xd4, 0x87, 0x36, 0x6b, 0x1f, 0x3d, 0x78,
+	0x9f, 0xa2, 0x87, 0x57, 0xa1, 0xf9, 0xd4, 0x38, 0x9f, 0xd3, 0x28, 0x67,
+	0xc8, 0x71, 0xe6, 0x47, 0xc4, 0xef, 0xd3, 0x1d, 0x9f, 0x20, 0x1f, 0x8f,
+	0x0e, 0xbc, 0x02, 0x3d, 0xb2, 0x8a, 0xb6, 0xbc, 0xa3, 0x58, 0xbd, 0x5e,
+	0x3e, 0x3b, 0x35, 0xe9, 0x60, 0x82, 0x45, 0x3d, 0xca, 0x38, 0xf0, 0xa2,
+	0x8a, 0xfa, 0xc5, 0xd7, 0x29, 0xeb, 0xea, 0xc7, 0x7d, 0x45, 0xea, 0x6c,
+	0xf5, 0xab, 0xef, 0x28, 0x38, 0x7e, 0xa1, 0x11, 0xaf, 0x15, 0x58, 0x7f,
+	0x11, 0xef, 0xc2, 0x7b, 0x6c, 0x0c, 0xc5, 0x87, 0x4e, 0xa9, 0x9c, 0xe7,
+	0x80, 0x89, 0x17, 0x16, 0x10, 0x23, 0xc9, 0x90, 0xe6, 0x42, 0x4f, 0x74,
+	0x80, 0x38, 0x95, 0xae, 0x4b, 0x46, 0x45, 0x83, 0xca, 0xdc, 0x70, 0xd1,
+	0x97, 0xec, 0x97, 0xb9, 0xfe, 0xff, 0x9a, 0xc3, 0x53, 0x8c, 0x93, 0x06,
+	0xae, 0xf7, 0x49, 0x27, 0x4e, 0x3c, 0xc9, 0x18, 0x7e, 0xc9, 0x1a, 0xf3,
+	0xe1, 0x72, 0x04, 0x0f, 0x39, 0x39, 0xd0, 0xc6, 0x98, 0x91, 0x3a, 0x5e,
+	0x72, 0xc2, 0xd1, 0x8c, 0xca, 0x9a, 0x44, 0x15, 0xd7, 0xd5, 0xc6, 0x2e,
+	0xe6, 0xf1, 0xc3, 0xa6, 0xc9, 0x98, 0xd5, 0x8f, 0x00, 0x77, 0x4b, 0x2d,
+	0xb1, 0x95, 0xd5, 0xaf, 0xbf, 0x8f, 0xb1, 0xbc, 0xb5, 0x80, 0x8b, 0x35,
+	0x78, 0x58, 0x8f, 0x4f, 0x23, 0xe3, 0xf5, 0x52, 0xdf, 0xac, 0x94, 0xfd,
+	0x29, 0xe2, 0xd1, 0xcb, 0x29, 0xa3, 0x28, 0xf9, 0xce, 0x7a, 0x79, 0xd2,
+	0xd1, 0x2a, 0xca, 0x30, 0xfb, 0x7b, 0x7e, 0x24, 0x82, 0x89, 0x78, 0x25,
+	0x75, 0xb2, 0xe4, 0x99, 0xe5, 0x1f, 0x65, 0x1f, 0x3f, 0xdc, 0x89, 0x2d,
+	0x0d, 0xf0, 0xfc, 0x34, 0x88, 0x63, 0x98, 0xf1, 0x49, 0xfd, 0x09, 0xe5,
+	0x3d, 0xb6, 0xdd, 0x4e, 0xed, 0xf2, 0x07, 0xde, 0x5f, 0x3b, 0x92, 0x66,
+	0x2c, 0xb6, 0xca, 0x16, 0x23, 0x9a, 0xe3, 0xcd, 0x7b, 0x4f, 0xb0, 0xde,
+	0xc9, 0x84, 0x3c, 0x68, 0x30, 0x64, 0xff, 0xc7, 0xc1, 0xf0, 0x40, 0xb8,
+	0x0b, 0xc4, 0xdd, 0x36, 0xd4, 0xee, 0xa9, 0xc7, 0x46, 0xc6, 0xe3, 0xb6,
+	0x42, 0x18, 0xbe, 0x51, 0x1b, 0x1b, 0x68, 0x7b, 0x8c, 0xfe, 0xed, 0x51,
+	0xad, 0x13, 0x2a, 0xf3, 0xb9, 0x66, 0x54, 0x1f, 0x4c, 0x79, 0x74, 0xf3,
+	0x63, 0x45, 0x72, 0x5a, 0x0f, 0xff, 0x1a, 0xab, 0x30, 0x7c, 0x50, 0xec,
+	0x7d, 0x21, 0xd5, 0x32, 0x2e, 0x9f, 0x27, 0x53, 0xcd, 0xe3, 0xea, 0xec,
+	0x3b, 0x19, 0xd1, 0xeb, 0x55, 0x4a, 0xd5, 0x4e, 0xdb, 0xbe, 0xd1, 0xc1,
+	0xd8, 0x97, 0x78, 0x2f, 0x8d, 0x75, 0x71, 0xf9, 0xfb, 0x44, 0x2a, 0xe2,
+	0xb4, 0x3f, 0xc6, 0x4f, 0x15, 0xe9, 0xfa, 0x00, 0xc6, 0x8d, 0x2a, 0xfe,
+	0xda, 0xf6, 0xc8, 0xec, 0x5e, 0x5d, 0x44, 0xad, 0x52, 0x2a, 0x76, 0x0a,
+	0x47, 0xbe, 0x44, 0x8e, 0x24, 0x46, 0x60, 0x68, 0xad, 0xd4, 0x78, 0x07,
+	0xe3, 0x4a, 0x85, 0xe0, 0xc6, 0x5d, 0x8a, 0x5c, 0xd3, 0x63, 0x19, 0xb5,
+	0x5a, 0xfe, 0x37, 0xd3, 0xea, 0x3e, 0xc1, 0x13, 0x5e, 0x5b, 0x8b, 0xe9,
+	0xb3, 0xe4, 0xb3, 0x4a, 0x69, 0xd8, 0x99, 0xc6, 0xf7, 0xdb, 0xe9, 0xdd,
+	0x06, 0xc2, 0x39, 0xe3, 0x69, 0x34, 0x6b, 0xdb, 0x53, 0x09, 0xc3, 0xba,
+	0x55, 0x05, 0x0a, 0xa5, 0x3f, 0xcf, 0x8e, 0x23, 0x1c, 0xfa, 0x72, 0xea,
+	0x43, 0x6a, 0xc9, 0x8f, 0xe3, 0x67, 0x91, 0xa3, 0x34, 0x6b, 0x1e, 0xf9,
+	0x40, 0x78, 0xc4, 0x4f, 0xdc, 0x88, 0x51, 0x77, 0x5e, 0x6f, 0x24, 0xb1,
+	0x60, 0x52, 0x78, 0xc5, 0x8b, 0x47, 0xb3, 0x7a, 0x64, 0xc6, 0xd3, 0x3c,
+	0x9d, 0xf2, 0xb0, 0x93, 0x73, 0x57, 0xe2, 0x1e, 0x72, 0xdc, 0x78, 0x56,
+	0x38, 0x8d, 0x9f, 0x25, 0x59, 0x97, 0xdb, 0xf1, 0x87, 0xac, 0xc6, 0x35,
+	0xb3, 0xb0, 0x31, 0xa1, 0xf7, 0x2e, 0x67, 0xbc, 0xad, 0x2b, 0x49, 0x9f,
+	0x16, 0x06, 0xba, 0xf4, 0x88, 0xa5, 0xea, 0xb1, 0xa2, 0x7a, 0x33, 0x0b,
+	0x28, 0xc1, 0x61, 0x4a, 0x56, 0x8e, 0xb5, 0x33, 0x9f, 0x56, 0xb2, 0x5d,
+	0xb2, 0x87, 0xe6, 0xec, 0x4f, 0x06, 0xe7, 0x53, 0x92, 0x7d, 0x9b, 0x7a,
+	0xe7, 0x7f, 0x50, 0xb7, 0xfe, 0x5c, 0x62, 0x2b, 0xdf, 0x80, 0x2d, 0xfb,
+	0x18, 0x73, 0x79, 0xd9, 0x3b, 0x63, 0x9c, 0xe5, 0x07, 0x95, 0xdd, 0x53,
+	0x82, 0x97, 0x8c, 0xc1, 0x3c, 0x63, 0xf0, 0x73, 0xdc, 0x94, 0x78, 0x35,
+	0xa5, 0x26, 0x73, 0xe2, 0x2b, 0x5f, 0xc0, 0x5f, 0xd7, 0xc1, 0x43, 0x0e,
+	0xea, 0x40, 0xd1, 0x07, 0xff, 0x86, 0xc4, 0xb9, 0x38, 0x35, 0x1a, 0x44,
+	0xa3, 0xe1, 0xc6, 0xd8, 0xa5, 0x45, 0x15, 0xf3, 0x3a, 0xd6, 0xd8, 0x99,
+	0x06, 0x89, 0xbb, 0x0c, 0xe7, 0x7c, 0xa3, 0x7d, 0x79, 0x48, 0xe2, 0x4d,
+	0xf2, 0xc3, 0x91, 0x82, 0xce, 0x3c, 0x36, 0x27, 0xfc, 0x38, 0x54, 0x38,
+	0x4b, 0xde, 0x25, 0x11, 0x07, 0x6b, 0x70, 0x53, 0xd0, 0xdd, 0x77, 0xbd,
+	0xaf, 0x30, 0x87, 0xb7, 0x1a, 0xfc, 0xbc, 0xd7, 0xc7, 0x5a, 0xe7, 0xdd,
+	0x84, 0xdb, 0xf7, 0x85, 0xc5, 0x4b, 0xb0, 0x2d, 0x18, 0x40, 0xb5, 0x11,
+	0x43, 0x36, 0x58, 0x4d, 0x1c, 0xfd, 0xe9, 0x6c, 0x9f, 0x94, 0x8b, 0x01,
+	0x19, 0xef, 0x51, 0x07, 0xff, 0xd3, 0x14, 0x0d, 0xa2, 0x3f, 0x59, 0x11,
+	0x50, 0x63, 0x5a, 0x58, 0xd7, 0xb9, 0x12, 0x97, 0x53, 0x3b, 0xbf, 0x93,
+	0xfd, 0xa6, 0x1d, 0xa9, 0x67, 0x3b, 0xe6, 0x57, 0xe5, 0xac, 0xbd, 0x0b,
+	0x8b, 0xd7, 0x6b, 0xb2, 0xb7, 0x56, 0x4d, 0xee, 0x1c, 0x21, 0xef, 0x36,
+	0xcc, 0x5e, 0x6f, 0x2f, 0x46, 0x60, 0xb6, 0x57, 0x01, 0x0d, 0x0a, 0xce,
+	0x72, 0x72, 0x48, 0xc6, 0xd0, 0x50, 0xcf, 0xbc, 0x3e, 0xb5, 0xa8, 0x1b,
+	0x6a, 0xde, 0x8b, 0x57, 0xb9, 0x4e, 0xa7, 0x59, 0xff, 0x34, 0x96, 0xd7,
+	0x3b, 0x7d, 0x54, 0x26, 0xe7, 0xda, 0x79, 0xd9, 0xce, 0x8f, 0xfd, 0xc5,
+	0xaf, 0xda, 0x47, 0xed, 0x68, 0xfc, 0x85, 0x1f, 0x01, 0xb9, 0x77, 0xe6,
+	0x7b, 0x5d, 0xe1, 0x07, 0x28, 0x2a, 0xeb, 0xc0, 0x25, 0x05, 0x59, 0x43,
+	0x39, 0xff, 0x21, 0x7e, 0xaa, 0xc5, 0xdd, 0x05, 0x59, 0xf3, 0x3a, 0xdc,
+	0x53, 0x68, 0xc1, 0x6d, 0x85, 0x00, 0xf3, 0xc8, 0xc6, 0xa9, 0x0e, 0xdc,
+	0xda, 0x08, 0xdc, 0x2e, 0xb8, 0xfe, 0x5e, 0x3c, 0xda, 0x4b, 0x8e, 0xf8,
+	0xab, 0x6a, 0xc8, 0x9e, 0x99, 0xe4, 0x96, 0xbc, 0x23, 0x46, 0x66, 0x69,
+	0x42, 0x6a, 0xa9, 0x9f, 0xd9, 0xaa, 0xa3, 0x0b, 0xaa, 0x71, 0x53, 0x29,
+	0xe4, 0xd4, 0x70, 0xf2, 0x5e, 0x78, 0x75, 0x71, 0x50, 0xf1, 0x4e, 0x9d,
+	0x89, 0x45, 0x5f, 0xc7, 0xe5, 0xc2, 0x8f, 0x69, 0x65, 0xdc, 0xe1, 0xf0,
+	0x9d, 0xd4, 0x17, 0x21, 0xdc, 0xc5, 0x67, 0xb7, 0x14, 0x3f, 0xe7, 0xf8,
+	0xcf, 0x39, 0x7d, 0xe3, 0x2c, 0x97, 0xef, 0x2f, 0xbd, 0x3c, 0x3b, 0x27,
+	0xe9, 0xcb, 0xc6, 0x11, 0xa7, 0x0f, 0xc1, 0xb2, 0xc8, 0x19, 0x58, 0x76,
+	0x34, 0x48, 0x1d, 0xa9, 0x1c, 0x48, 0xb0, 0x46, 0x6f, 0x57, 0x70, 0x35,
+	0x55, 0x46, 0x26, 0xe4, 0xc7, 0x4b, 0x05, 0x37, 0x37, 0x3a, 0x3a, 0x7d,
+	0xe8, 0x27, 0xaf, 0x57, 0xc6, 0xab, 0x9d, 0xf7, 0xf5, 0xdb, 0x4d, 0xe1,
+	0xf2, 0x8d, 0xb3, 0xbc, 0x2e, 0xfb, 0x0e, 0xee, 0x39, 0x83, 0x07, 0xbf,
+	0xc4, 0xed, 0x73, 0x67, 0x0d, 0x12, 0x54, 0x2c, 0x08, 0x4c, 0xb0, 0xd6,
+	0x79, 0x84, 0xf5, 0x5c, 0x39, 0xbb, 0x1c, 0x75, 0xf3, 0xf4, 0x6e, 0x89,
+	0x39, 0xe1, 0xeb, 0x07, 0x3b, 0xfb, 0xb1, 0x7e, 0xa7, 0xea, 0xc4, 0xdc,
+	0x8e, 0xf8, 0x26, 0xdc, 0x54, 0xef, 0xec, 0x15, 0x2b, 0x47, 0x13, 0x2b,
+	0x70, 0xc3, 0x4e, 0x3f, 0xae, 0x2d, 0x08, 0x3e, 0x71, 0x4d, 0xbf, 0x77,
+	0x27, 0xe6, 0xb5, 0xaf, 0x85, 0xfb, 0x3e, 0x54, 0xfe, 0xbe, 0x0e, 0x99,
+	0xef, 0x8b, 0x1d, 0xd4, 0x9b, 0x67, 0x29, 0xa8, 0x69, 0x77, 0x74, 0x13,
+	0xf5, 0x12, 0x02, 0xd4, 0x70, 0xb8, 0x91, 0xb5, 0xc3, 0x96, 0xec, 0x2b,
+	0xf6, 0x81, 0x90, 0xec, 0x09, 0xc9, 0xfd, 0x5a, 0x14, 0xeb, 0xa5, 0x3d,
+	0x25, 0x2b, 0xdb, 0x05, 0x17, 0x55, 0xa3, 0x6e, 0xb8, 0x17, 0xc3, 0xb4,
+	0xf3, 0x03, 0xa7, 0x66, 0xbc, 0x4c, 0x73, 0xe7, 0x53, 0x8d, 0xc6, 0x61,
+	0x77, 0x7f, 0xef, 0xa3, 0x45, 0xbd, 0x68, 0x9c, 0x3a, 0x53, 0xc3, 0xe4,
+	0xfd, 0xa2, 0xe1, 0xb9, 0x7e, 0xac, 0x1f, 0xfa, 0x30, 0x91, 0x55, 0x88,
+	0x65, 0xce, 0x9e, 0x18, 0x8c, 0x52, 0xcd, 0xec, 0x11, 0x37, 0x69, 0xf7,
+	0x03, 0x17, 0xa3, 0xd4, 0x7e, 0xdc, 0xca, 0xb9, 0x55, 0x1b, 0xc2, 0x5f,
+	0xe7, 0xa3, 0xe4, 0x8c, 0xff, 0x2d, 0xbf, 0x1b, 0x7f, 0x73, 0x7d, 0x0d,
+	0x40, 0x62, 0xcb, 0x6b, 0x44, 0x71, 0xf3, 0xce, 0xa8, 0x59, 0xa5, 0x4a,
+	0x7c, 0x46, 0x71, 0xd3, 0xfe, 0x7f, 0xe0, 0x7d, 0xe9, 0x2b, 0x8c, 0xd5,
+	0xc3, 0x5e, 0xfc, 0x3e, 0x6b, 0x10, 0x93, 0xd4, 0xf3, 0x54, 0xdc, 0x6f,
+	0x9f, 0x3e, 0x7b, 0x03, 0x6e, 0x34, 0x57, 0x70, 0x4d, 0x14, 0x2c, 0x69,
+	0xd9, 0x80, 0x51, 0x33, 0x8d, 0x1b, 0x1b, 0x24, 0x67, 0xef, 0xb3, 0xfb,
+	0x42, 0xe2, 0x57, 0x05, 0xcb, 0x78, 0xfd, 0x63, 0x53, 0x6a, 0xde, 0x2a,
+	0x44, 0x1b, 0xe4, 0xbd, 0x90, 0x5e, 0x48, 0xe3, 0x17, 0xce, 0x98, 0xf5,
+	0x86, 0x68, 0x9b, 0x76, 0x27, 0xa6, 0x2b, 0x8c, 0xaf, 0xda, 0x63, 0xd9,
+	0x3e, 0xc3, 0x88, 0x2c, 0x55, 0x5b, 0x0a, 0x9b, 0x19, 0xcb, 0x8b, 0xdb,
+	0xcf, 0x7c, 0x6e, 0xce, 0x47, 0x26, 0x2a, 0xdb, 0xf7, 0xd9, 0x33, 0xc1,
+	0x21, 0x04, 0xdb, 0xcf, 0x8c, 0x85, 0xb9, 0x3e, 0xc2, 0x58, 0x3b, 0x2c,
+	0xd7, 0xe5, 0x5a, 0x34, 0xdd, 0xa2, 0xf4, 0x71, 0x8c, 0x30, 0xfa, 0xa7,
+	0x56, 0xa0, 0x6f, 0xa7, 0xe7, 0x0b, 0xcd, 0x57, 0x2b, 0x31, 0xf9, 0xc5,
+	0xfc, 0x7f, 0xb0, 0x33, 0xda, 0x5b, 0x3f, 0x3b, 0xff, 0x75, 0xfb, 0xbf,
+	0xe8, 0xeb, 0xb6, 0x61, 0x59, 0x33, 0xe9, 0x4f, 0xce, 0x1c, 0xcd, 0xf9,
+	0x37, 0x8c, 0x5b, 0x9d, 0xfe, 0xce, 0x0d, 0x48, 0x6e, 0xfb, 0x88, 0x01,
+	0x57, 0xb6, 0x5b, 0xb8, 0xe2, 0xd2, 0x75, 0xf6, 0x5a, 0xc7, 0x07, 0xff,
+	0xe2, 0x3c, 0xbf, 0xac, 0x65, 0xda, 0xa9, 0x77, 0xdc, 0x9c, 0xee, 0x66,
+	0xcc, 0x27, 0xf0, 0xab, 0xb2, 0x49, 0x5e, 0x6f, 0x23, 0xaf, 0xc7, 0xc8,
+	0xeb, 0x06, 0x73, 0x20, 0xc2, 0x1c, 0xf8, 0x6f, 0x3e, 0xd4, 0x36, 0x39,
+	0x7b, 0x3f, 0x6a, 0x57, 0x15, 0x96, 0x16, 0xfe, 0x9a, 0x36, 0x6b, 0xcc,
+	0xfd, 0xb7, 0x90, 0x0e, 0x75, 0xcb, 0x3e, 0x14, 0x35, 0x84, 0xec, 0x93,
+	0xde, 0x8c, 0x99, 0xa2, 0xe5, 0xaf, 0xe8, 0x02, 0x8e, 0x17, 0x7a, 0x59,
+	0x13, 0x41, 0x3b, 0x3b, 0x59, 0x48, 0xfd, 0x5b, 0x8b, 0x8d, 0x71, 0x53,
+	0xf6, 0xb2, 0x8b, 0xa9, 0x1f, 0xb5, 0x78, 0xb0, 0x31, 0x28, 0xe3, 0xc9,
+	0xb9, 0x07, 0xf7, 0x9d, 0xe1, 0x02, 0xc3, 0xd9, 0xf3, 0x0e, 0x34, 0x74,
+	0x59, 0xfe, 0xf9, 0x5d, 0x06, 0x56, 0x71, 0x4d, 0x13, 0xc3, 0x11, 0x94,
+	0x87, 0x57, 0x22, 0x3b, 0xab, 0x05, 0x52, 0x45, 0x2b, 0xd0, 0x48, 0x7e,
+	0x6e, 0xdd, 0x03, 0xfc, 0xeb, 0x70, 0x98, 0xf5, 0x77, 0xf3, 0xc0, 0x5e,
+	0xb5, 0xb9, 0xff, 0x3d, 0x45, 0xee, 0x3f, 0x94, 0xba, 0xd8, 0xd9, 0x7f,
+	0x7d, 0x24, 0x75, 0x91, 0xf3, 0xf9, 0xbb, 0x54, 0x5b, 0x49, 0x6a, 0x61,
+	0xff, 0xa9, 0x69, 0xd5, 0xc6, 0xca, 0xb8, 0x8a, 0x2b, 0xcc, 0x77, 0x10,
+	0x99, 0xaf, 0x60, 0xb1, 0x79, 0x0c, 0xe9, 0x5e, 0x3f, 0x16, 0x32, 0x67,
+	0x0f, 0xf3, 0x37, 0xc6, 0x7b, 0xb2, 0xab, 0x31, 0xdf, 0xd0, 0x0f, 0x89,
+	0x16, 0x90, 0x7d, 0x8f, 0xcb, 0x98, 0x27, 0x4b, 0x98, 0x27, 0xb9, 0x6c,
+	0x3d, 0x7e, 0x48, 0x2d, 0x30, 0x40, 0x6d, 0xba, 0x81, 0xb9, 0x76, 0x6d,
+	0xbb, 0x8d, 0xfa, 0x76, 0x3d, 0x78, 0xbf, 0x6a, 0x4d, 0x8b, 0x76, 0xfb,
+	0xb0, 0x43, 0x3f, 0xd2, 0xe8, 0xd1, 0x07, 0xf2, 0xaa, 0x9e, 0xf9, 0x8d,
+	0x1a, 0xc4, 0xb3, 0x51, 0x57, 0x07, 0x74, 0x39, 0xbc, 0x3e, 0x33, 0x6b,
+	0xcb, 0xc9, 0x54, 0x9b, 0xf3, 0xff, 0x73, 0xa9, 0xd6, 0x71, 0x28, 0xdf,
+	0x67, 0xcd, 0xb2, 0xb2, 0x13, 0xb5, 0x57, 0x13, 0xe3, 0xef, 0xca, 0x5f,
+	0x87, 0x6d, 0xe4, 0xae, 0xcd, 0xc3, 0xac, 0x5a, 0x8c, 0x66, 0x73, 0xa1,
+	0x33, 0x97, 0xdf, 0xa4, 0x62, 0xa5, 0xe6, 0xd8, 0x41, 0x3c, 0x8c, 0x69,
+	0xaf, 0xe8, 0x93, 0x07, 0x51, 0xf4, 0xb6, 0xf6, 0x1e, 0xe7, 0xff, 0x69,
+	0xf7, 0x6c, 0x82, 0x33, 0xcf, 0x96, 0x12, 0x18, 0xfb, 0x73, 0xfb, 0x79,
+	0x2a, 0x2e, 0x37, 0x6f, 0xc7, 0x74, 0x48, 0xb7, 0xd2, 0xcc, 0xe7, 0xe5,
+	0x66, 0x3d, 0x32, 0xd7, 0x78, 0x79, 0x1f, 0x5a, 0x4d, 0xf2, 0xb1, 0xd4,
+	0x64, 0x0e, 0xd3, 0xb5, 0xce, 0x7e, 0x8f, 0xab, 0xcf, 0xdb, 0xa6, 0x80,
+	0xbd, 0xc4, 0x9b, 0xba, 0x8e, 0x4f, 0xed, 0x99, 0x7a, 0x77, 0xaf, 0x35,
+	0xf5, 0x73, 0x85, 0x5c, 0x92, 0xc6, 0x3d, 0x07, 0xbd, 0xb8, 0x74, 0xb8,
+	0x1b, 0x77, 0x97, 0xbd, 0x67, 0xf4, 0x1f, 0xb5, 0x54, 0x55, 0xf0, 0xef,
+	0x41, 0x62, 0x9f, 0x6b, 0x83, 0x9f, 0xba, 0xe5, 0x02, 0x67, 0x7f, 0xe4,
+	0x64, 0xea, 0x49, 0xd6, 0xe0, 0x81, 0xe4, 0x93, 0xa9, 0x2b, 0x77, 0x0b,
+	0x17, 0x3e, 0x96, 0x7a, 0x2b, 0xab, 0x0f, 0xb4, 0x28, 0x52, 0x6b, 0xce,
+	0xa4, 0x6e, 0xc8, 0xca, 0x5e, 0xca, 0x6f, 0x53, 0x1a, 0xf5, 0xcb, 0x33,
+	0xac, 0x6f, 0x5f, 0x19, 0xd6, 0x63, 0xef, 0xd0, 0xde, 0x7b, 0x0c, 0x7d,
+	0xf0, 0x10, 0xf4, 0xe9, 0x35, 0xd4, 0xa8, 0xaf, 0x77, 0xf4, 0x72, 0x3c,
+	0xd7, 0x67, 0xdd, 0x25, 0x57, 0x1b, 0x5d, 0x32, 0xee, 0xea, 0xa5, 0x8b,
+	0xc7, 0xdf, 0x52, 0xe6, 0xce, 0x89, 0xe6, 0xf2, 0xc2, 0x91, 0x72, 0xfd,
+	0x95, 0xd4, 0x45, 0xac, 0xeb, 0x56, 0x0f, 0x2b, 0x28, 0x45, 0x7b, 0x90,
+	0x2d, 0xcf, 0xd9, 0xc9, 0x7a, 0x3b, 0xaf, 0x9b, 0x45, 0x57, 0x0f, 0xb1,
+	0xed, 0x9c, 0x1e, 0xaa, 0xc6, 0xcd, 0x9c, 0x4b, 0x46, 0x71, 0x9f, 0x0f,
+	0xb0, 0xdf, 0x2b, 0x1d, 0xdb, 0x9f, 0x94, 0xbd, 0x9d, 0x9e, 0xcb, 0x15,
+	0x15, 0xb1, 0xa8, 0x68, 0x21, 0xdb, 0xf6, 0xc6, 0x05, 0xbf, 0x1e, 0x4a,
+	0x4d, 0x64, 0xe7, 0xe6, 0x22, 0x75, 0xbd, 0x1b, 0x63, 0x46, 0xa9, 0x82,
+	0x62, 0xc5, 0x9d, 0xbf, 0xca, 0x75, 0x5a, 0x9c, 0x4d, 0x63, 0x79, 0xc2,
+	0x5d, 0xb3, 0xd6, 0xd2, 0x65, 0x48, 0x37, 0x2c, 0x21, 0x66, 0x06, 0x71,
+	0xd1, 0xf0, 0x12, 0xea, 0x99, 0x08, 0xbe, 0x4d, 0x7d, 0xd2, 0x36, 0x6c,
+	0x60, 0xc5, 0x94, 0xec, 0xc5, 0x9c, 0x48, 0x6d, 0xda, 0xf5, 0xa7, 0xd9,
+	0xba, 0x9f, 0x9a, 0x89, 0xed, 0xd6, 0x0c, 0xbb, 0xb1, 0x9a, 0x2a, 0xf9,
+	0x4f, 0xcd, 0xcc, 0xee, 0xdb, 0x36, 0x72, 0x9c, 0x4b, 0xf3, 0x77, 0xd8,
+	0x91, 0xb3, 0x25, 0x3e, 0x56, 0x61, 0x74, 0x4f, 0xad, 0x55, 0x4f, 0x4c,
+	0x3e, 0xab, 0xfd, 0x02, 0xce, 0xa5, 0x0d, 0x1d, 0x07, 0x96, 0x52, 0xdb,
+	0x05, 0xb9, 0x16, 0x2b, 0x90, 0x59, 0xe9, 0xc5, 0x1b, 0xc3, 0x54, 0x0d,
+	0xed, 0xdf, 0x00, 0xae, 0xd1, 0xf0, 0xd1, 0x30, 0x6b, 0x02, 0xce, 0xd3,
+	0x72, 0xba, 0x92, 0xbc, 0x64, 0x3e, 0xe7, 0x99, 0xcf, 0x79, 0xe6, 0x73,
+	0x9e, 0xf9, 0x4c, 0xad, 0xf4, 0x20, 0xed, 0x7a, 0xe0, 0xf3, 0x73, 0x6f,
+	0xce, 0xde, 0x2f, 0x79, 0xc8, 0x39, 0x1f, 0x5b, 0xcb, 0x1c, 0xbc, 0xb8,
+	0x12, 0xd1, 0xc8, 0x01, 0xb0, 0xc2, 0x9b, 0x8a, 0xe0, 0x32, 0xda, 0xde,
+	0x3b, 0xec, 0x9e, 0x8f, 0x68, 0x26, 0xff, 0x3e, 0x40, 0x9b, 0xdb, 0xa7,
+	0x9a, 0x60, 0x4e, 0xfd, 0x38, 0x20, 0x7b, 0x3d, 0xe6, 0x94, 0xff, 0x14,
+	0x9c, 0x77, 0x7f, 0x67, 0x8e, 0x7b, 0x71, 0x15, 0x02, 0x32, 0xb6, 0x82,
+	0xb0, 0x21, 0xe7, 0xc6, 0x22, 0x98, 0x9e, 0x38, 0x1f, 0x2f, 0x4f, 0x04,
+	0xab, 0xe4, 0xa5, 0xdc, 0x8b, 0x93, 0x6e, 0xfc, 0x46, 0x4a, 0x07, 0x02,
+	0xb2, 0x07, 0xbd, 0x7a, 0xd8, 0xfd, 0x3f, 0xfa, 0xf9, 0xff, 0x7e, 0x18,
+	0x3b, 0x5d, 0x4e, 0xf9, 0xbf, 0x9b, 0x83, 0xe8, 0x48, 0xbf, 0xb2, 0x7b,
+	0xa7, 0x3c, 0x27, 0x58, 0x4c, 0xcc, 0x69, 0x17, 0x3f, 0x3d, 0x62, 0x67,
+	0x7a, 0xc5, 0x47, 0xe2, 0x2b, 0xff, 0xa9, 0xa2, 0x63, 0x63, 0x8c, 0xb6,
+	0xc8, 0xb5, 0x43, 0x76, 0xfa, 0xbb, 0xe2, 0xe3, 0x10, 0xf1, 0x66, 0x09,
+	0x46, 0xd9, 0xef, 0xed, 0x9c, 0x5f, 0x27, 0xe7, 0xfd, 0xe3, 0xa9, 0x05,
+	0x6c, 0xe3, 0xde, 0x1b, 0xca, 0x5b, 0xba, 0x77, 0xf6, 0x0c, 0xef, 0x10,
+	0xb9, 0x99, 0x75, 0x07, 0x5e, 0x4d, 0xac, 0xc5, 0x65, 0x05, 0x3d, 0x6d,
+	0x51, 0x03, 0x66, 0x82, 0x50, 0x58, 0x9f, 0x30, 0x5e, 0x7e, 0xc7, 0x78,
+	0x31, 0xa9, 0x37, 0x9a, 0x23, 0xb2, 0x8f, 0x67, 0x79, 0x9b, 0xb0, 0x6d,
+	0xd4, 0x83, 0xd7, 0x42, 0x7a, 0x04, 0xca, 0x5c, 0xbd, 0x2d, 0x6d, 0xe7,
+	0xfe, 0xae, 0x42, 0xa4, 0xbe, 0xb9, 0x7b, 0x0d, 0xe4, 0xbd, 0xb4, 0xe5,
+	0x2f, 0x75, 0xde, 0x89, 0x1d, 0x23, 0x2a, 0xeb, 0x83, 0x08, 0x73, 0x3d,
+	0x41, 0x3d, 0xd9, 0x3a, 0xf0, 0x0e, 0x3e, 0xb6, 0xa7, 0xe7, 0xcb, 0xf3,
+	0xcd, 0xdd, 0xef, 0xe0, 0x13, 0x39, 0x7b, 0x72, 0x62, 0x0c, 0xc6, 0xf4,
+	0x6b, 0x68, 0x1d, 0x3c, 0x8d, 0x77, 0xed, 0x19, 0xde, 0xd3, 0x3c, 0x1e,
+	0x1c, 0x33, 0x9b, 0xa9, 0x53, 0x42, 0xc4, 0x00, 0x0f, 0xb1, 0x4e, 0xf6,
+	0xee, 0xf5, 0xc1, 0xc3, 0xd0, 0x07, 0xde, 0x54, 0x5a, 0xfb, 0x3f, 0xc0,
+	0x8c, 0x5d, 0xac, 0x97, 0x71, 0x15, 0x74, 0x5f, 0xd4, 0x7a, 0xa2, 0x02,
+	0x7a, 0x8f, 0x4f, 0x31, 0xba, 0x1b, 0x3d, 0xbf, 0xb5, 0x67, 0x42, 0x9f,
+	0xd8, 0x46, 0xf4, 0x13, 0x5b, 0xde, 0xc9, 0xec, 0x67, 0x8d, 0xd8, 0x8f,
+	0x39, 0xdb, 0xfe, 0x8e, 0xf3, 0x37, 0x69, 0x83, 0x68, 0x07, 0xcb, 0xbf,
+	0x85, 0xb6, 0x3d, 0x5b, 0xf0, 0xd2, 0xb6, 0x77, 0xec, 0xf4, 0x7c, 0x39,
+	0xe7, 0x39, 0x59, 0xe5, 0xbe, 0x23, 0x70, 0xde, 0x87, 0xe1, 0x86, 0x6c,
+	0x98, 0x7e, 0x72, 0xf7, 0xcf, 0xdc, 0xf7, 0x04, 0x3e, 0xac, 0x0e, 0x8a,
+	0xb6, 0x9a, 0xbe, 0xc0, 0x03, 0x4b, 0x1d, 0xa7, 0x1e, 0xdb, 0x44, 0x3d,
+	0xb5, 0xd1, 0xe1, 0x1a, 0x04, 0xd4, 0xae, 0x76, 0x2c, 0xdd, 0x25, 0xb8,
+	0xbf, 0xa1, 0x8a, 0x6b, 0x95, 0x22, 0x3f, 0xc0, 0x18, 0xb6, 0xec, 0x05,
+	0xe4, 0xaa, 0xfa, 0xa4, 0x3e, 0x3d, 0x04, 0x23, 0xb3, 0xc0, 0xb3, 0x01,
+	0xfe, 0x8e, 0xf4, 0xd3, 0xd4, 0x8a, 0xe9, 0x0b, 0x3c, 0x83, 0xa8, 0xed,
+	0xf0, 0xe0, 0x92, 0x2e, 0x04, 0x6b, 0x92, 0xd1, 0xde, 0x1a, 0x25, 0xba,
+	0xea, 0x45, 0x25, 0x86, 0xea, 0x29, 0xcb, 0xaf, 0x75, 0x55, 0x6b, 0xd5,
+	0x53, 0x6d, 0x5a, 0xd5, 0x94, 0xa9, 0x05, 0xa6, 0xd6, 0xc2, 0x33, 0x52,
+	0x4d, 0x9d, 0xa4, 0x77, 0xb7, 0xb0, 0x4c, 0xca, 0x04, 0x13, 0xb8, 0xab,
+	0x4c, 0x50, 0xcf, 0xad, 0x87, 0x27, 0xd7, 0xdc, 0xdd, 0xac, 0x0c, 0x61,
+	0x26, 0xec, 0xea, 0x7a, 0x57, 0x6b, 0x8b, 0x3d, 0x6b, 0x91, 0xde, 0x27,
+	0xbc, 0xd5, 0x8d, 0xa3, 0x59, 0x47, 0x63, 0x05, 0x8e, 0x27, 0x92, 0xd4,
+	0xfb, 0x11, 0x54, 0xc7, 0xcf, 0x81, 0x55, 0x6f, 0x62, 0xa8, 0x4c, 0x9d,
+	0x44, 0x5f, 0x10, 0x47, 0x03, 0xbf, 0xee, 0x6c, 0x42, 0x6e, 0x8c, 0xff,
+	0x90, 0x1f, 0x0d, 0xc6, 0xca, 0x66, 0xc6, 0x60, 0x0d, 0xe3, 0xdc, 0x22,
+	0x67, 0x5a, 0x0e, 0x8e, 0x3d, 0x99, 0xba, 0xc8, 0xc1, 0xaf, 0xdf, 0xb2,
+	0xb6, 0xdb, 0x58, 0x25, 0xb5, 0x99, 0x9c, 0x23, 0x8d, 0xed, 0x9c, 0x7b,
+	0x2f, 0x21, 0x1a, 0x70, 0xf1, 0x7f, 0xd1, 0xd0, 0xc6, 0x7e, 0x23, 0xb3,
+	0xef, 0xda, 0x15, 0x0c, 0xc5, 0xdb, 0xf1, 0x88, 0xbc, 0x5a, 0x77, 0xde,
+	0x99, 0x0e, 0xe9, 0x75, 0xf8, 0x16, 0x86, 0x83, 0x2a, 0x6b, 0x95, 0x3e,
+	0xdc, 0x1d, 0x9c, 0x0e, 0x1c, 0x4b, 0x38, 0xe7, 0xfa, 0x02, 0x7d, 0xd4,
+	0x8b, 0xf9, 0xec, 0x79, 0x98, 0x99, 0x0f, 0xff, 0x4d, 0x09, 0x93, 0x5a,
+	0xdb, 0xc7, 0x5c, 0x4b, 0xe1, 0x74, 0xc7, 0x77, 0xd0, 0x3d, 0x4f, 0x21,
+	0xef, 0x46, 0x98, 0xcf, 0x4d, 0xd8, 0x38, 0x16, 0x63, 0xed, 0x60, 0xc8,
+	0xbb, 0x8b, 0x59, 0xbb, 0xcf, 0xb4, 0xf7, 0xeb, 0xec, 0x14, 0xbf, 0xfc,
+	0x9f, 0xd8, 0xa9, 0x61, 0x3b, 0x35, 0xd7, 0x8e, 0x6c, 0x1f, 0x4e, 0x66,
+	0xe7, 0xfa, 0x6e, 0x8e, 0x2d, 0x57, 0x0c, 0x67, 0x7f, 0xd2, 0xe2, 0xb8,
+	0x9b, 0x1d, 0xdf, 0x88, 0x1d, 0xff, 0x2f, 0xc6, 0x33, 0xb1, 0xbf, 0x90,
+	0xa2, 0xf6, 0x8e, 0xc1, 0xf8, 0xee, 0x34, 0xd7, 0xc6, 0xc0, 0x91, 0xec,
+	0xf9, 0xa2, 0x29, 0xfd, 0xcf, 0x26, 0x7a, 0x70, 0x20, 0x6b, 0x6f, 0x08,
+	0x24, 0x6d, 0x7b, 0x69, 0xa7, 0x11, 0x3c, 0x0e, 0xb1, 0x27, 0xc2, 0xe7,
+	0xe1, 0x3f, 0xde, 0x19, 0xc1, 0x56, 0xd6, 0x74, 0x93, 0xd9, 0xd6, 0x4c,
+	0x0d, 0x31, 0xde, 0x72, 0xf2, 0x28, 0xc3, 0x5a, 0xf5, 0xfc, 0x6a, 0xd9,
+	0x53, 0xdb, 0x54, 0x5e, 0x0f, 0x35, 0xf7, 0x49, 0x95, 0x7b, 0x56, 0xa1,
+	0x07, 0x43, 0x59, 0xb1, 0xd7, 0xde, 0xe0, 0x67, 0x5f, 0x0b, 0x3b, 0x8d,
+	0xad, 0xcb, 0x9c, 0xda, 0x4f, 0xfc, 0x19, 0xc3, 0x08, 0xdb, 0x5a, 0x25,
+	0xf1, 0xa9, 0x59, 0x2d, 0x38, 0x26, 0x35, 0xd9, 0x3d, 0xb3, 0xfd, 0xdc,
+	0x53, 0xee, 0xc7, 0xea, 0xdc, 0xfa, 0x6a, 0xe9, 0xa7, 0x96, 0xb9, 0x72,
+	0x2c, 0x31, 0x80, 0x6d, 0xd9, 0x10, 0xc6, 0xb2, 0xad, 0x8c, 0x37, 0xef,
+	0xac, 0x2e, 0x97, 0x73, 0xe9, 0x73, 0x6d, 0x42, 0xd8, 0xff, 0xf9, 0xdf,
+	0xe2, 0x9f, 0x33, 0xf3, 0x46, 0x43, 0x31, 0xe4, 0xd6, 0x59, 0xc4, 0x94,
+	0xc0, 0x5d, 0x5c, 0xdf, 0x37, 0xb9, 0xbe, 0x2a, 0xd7, 0xf7, 0x09, 0xf3,
+	0x51, 0xe6, 0x14, 0xfc, 0x9b, 0x12, 0x11, 0x8c, 0xe4, 0xe5, 0xac, 0xb6,
+	0xdb, 0x66, 0x38, 0xe1, 0xc5, 0xf3, 0x39, 0xe1, 0xb3, 0x47, 0x52, 0x4f,
+	0x66, 0xed, 0xd4, 0xc1, 0x78, 0x6b, 0xe6, 0x4d, 0xea, 0x00, 0xeb, 0x1a,
+	0xdd, 0x9c, 0x41, 0x13, 0xf2, 0xa3, 0x83, 0x98, 0xa9, 0x6f, 0x8d, 0x9d,
+	0x84, 0xe5, 0xbf, 0x27, 0x71, 0x27, 0x4e, 0x8f, 0xaa, 0xe8, 0xee, 0xb8,
+	0x03, 0x98, 0x97, 0xe0, 0xdc, 0x5a, 0x83, 0x4f, 0xe0, 0x95, 0xd9, 0x73,
+	0x7b, 0xcd, 0xe6, 0x13, 0x90, 0x76, 0xee, 0xbe, 0x44, 0xf3, 0xf8, 0xad,
+	0xb4, 0x45, 0x0f, 0x13, 0xe3, 0xdd, 0x77, 0x83, 0xd9, 0xd6, 0x74, 0x1f,
+	0xfb, 0xc5, 0x35, 0x7a, 0x24, 0xe3, 0x9e, 0x91, 0x0c, 0x1c, 0x66, 0x9e,
+	0x5c, 0x38, 0x22, 0xed, 0x1f, 0x23, 0x3f, 0x92, 0x33, 0xe2, 0x1e, 0x6a,
+	0x04, 0xbd, 0x87, 0x9d, 0xd5, 0xde, 0x97, 0xa0, 0xd6, 0xcd, 0xb5, 0x71,
+	0x0d, 0x5a, 0x23, 0x31, 0xe5, 0xfa, 0xd9, 0xbd, 0x40, 0xe1, 0xd7, 0xc7,
+	0xc8, 0xaf, 0x7a, 0xff, 0x61, 0xc8, 0xba, 0x5c, 0xc7, 0xfc, 0x6a, 0x1d,
+	0x38, 0x82, 0xe6, 0x6e, 0x3f, 0xf5, 0xeb, 0x0c, 0xdc, 0xbe, 0x16, 0x96,
+	0x3c, 0xac, 0x65, 0x3f, 0xb1, 0x03, 0x46, 0x0e, 0x47, 0x82, 0x1e, 0x18,
+	0xed, 0x46, 0xf8, 0x5e, 0xcc, 0xc5, 0x8e, 0xdb, 0xa6, 0xb9, 0xa4, 0xc7,
+	0x32, 0x30, 0xb0, 0x29, 0x5f, 0x01, 0x6f, 0x83, 0xe4, 0xf3, 0x7a, 0xac,
+	0xcf, 0x71, 0x8d, 0x55, 0xfa, 0x87, 0xf9, 0x5a, 0x88, 0xae, 0xc7, 0xc0,
+	0x64, 0x8c, 0xba, 0xa1, 0x79, 0xeb, 0x66, 0xb6, 0x1b, 0x29, 0x37, 0x47,
+	0x26, 0x88, 0x19, 0x9b, 0xca, 0x2a, 0x22, 0x0d, 0x61, 0xea, 0xfe, 0x20,
+	0x7f, 0x35, 0xea, 0x67, 0x0b, 0x15, 0x8b, 0xfa, 0xf1, 0x62, 0x61, 0xae,
+	0xc6, 0x96, 0x9a, 0x40, 0xce, 0x1e, 0x2e, 0xc3, 0x53, 0x8e, 0x3e, 0x0a,
+	0x93, 0x5c, 0x84, 0x57, 0x24, 0x4e, 0x2c, 0xff, 0xaf, 0x13, 0x50, 0x9e,
+	0x4f, 0xf8, 0x71, 0x60, 0x44, 0xf8, 0x5d, 0xc1, 0x31, 0x43, 0xdd, 0x52,
+	0x8d, 0x0d, 0xf0, 0xb5, 0x6f, 0xc0, 0x0e, 0x93, 0xf5, 0x47, 0xbd, 0x9c,
+	0xcb, 0xd0, 0xac, 0x46, 0xf6, 0x7b, 0xc1, 0xa2, 0x15, 0x30, 0xf6, 0x89,
+	0x06, 0xfa, 0x4d, 0x4a, 0xcb, 0xa9, 0xcc, 0x53, 0x19, 0xa3, 0x31, 0xdd,
+	0x4d, 0xfd, 0x52, 0xd7, 0xe9, 0x6a, 0x87, 0x4b, 0x4a, 0x41, 0x6a, 0x74,
+	0xe7, 0xec, 0x51, 0x60, 0x89, 0x9c, 0x67, 0x23, 0xee, 0x6c, 0x30, 0x7d,
+	0x98, 0x99, 0x27, 0x67, 0xda, 0x15, 0x09, 0x37, 0x67, 0xbe, 0x17, 0x96,
+	0x58, 0x53, 0x25, 0xce, 0xcc, 0x15, 0xc1, 0x69, 0xf7, 0x3b, 0x00, 0xf2,
+	0x0e, 0xd8, 0xdd, 0x4b, 0xda, 0x65, 0x17, 0xe5, 0xbb, 0x28, 0xea, 0x34,
+	0xe3, 0x4b, 0x0f, 0x4f, 0xe3, 0x57, 0xd5, 0x82, 0xe3, 0x1e, 0x63, 0xce,
+	0xef, 0xe2, 0xeb, 0x43, 0xf6, 0x74, 0xfd, 0x9c, 0xde, 0x38, 0x96, 0xba,
+	0x74, 0x8f, 0x3e, 0x1d, 0xf5, 0xb4, 0x0e, 0x56, 0x7a, 0x2a, 0x19, 0x27,
+	0x5e, 0xdc, 0xdb, 0x86, 0x8c, 0x27, 0xe9, 0x5d, 0xb9, 0x3a, 0x9b, 0xc2,
+	0xf5, 0xe6, 0x6b, 0xf6, 0xcc, 0xd9, 0x8b, 0x9d, 0xf7, 0x8e, 0xf7, 0xb6,
+	0xfd, 0xad, 0x9d, 0xae, 0x97, 0xbf, 0x8d, 0x1a, 0xe1, 0xff, 0xc7, 0xf3,
+	0x8f, 0xda, 0xb1, 0xf9, 0xae, 0x7f, 0x9e, 0xc9, 0xca, 0x39, 0x4b, 0x95,
+	0x71, 0x1a, 0x0d, 0x5f, 0xaf, 0x84, 0xf1, 0x44, 0x09, 0x81, 0xd3, 0xf4,
+	0xe9, 0xd1, 0x62, 0x12, 0x17, 0x8c, 0xca, 0xbe, 0x9e, 0x1e, 0x2c, 0x22,
+	0x42, 0xbd, 0xed, 0xce, 0xdf, 0x28, 0x52, 0x38, 0xd4, 0x07, 0x9d, 0x7a,
+	0x47, 0x35, 0x5c, 0x7d, 0x75, 0x7e, 0xe9, 0x9c, 0x1a, 0xc9, 0x09, 0x35,
+	0x19, 0x73, 0xf2, 0x76, 0x5b, 0xb6, 0x35, 0xe6, 0x57, 0xe4, 0x2c, 0xa7,
+	0xbe, 0x55, 0xf2, 0x76, 0x24, 0xeb, 0x9e, 0x63, 0xdd, 0x41, 0x1f, 0xf4,
+	0xe5, 0xc4, 0x2f, 0xce, 0xde, 0xb9, 0x19, 0x51, 0x9b, 0xb0, 0x7d, 0xcc,
+	0xc1, 0x59, 0x2b, 0xa2, 0x1e, 0xe0, 0x7c, 0x05, 0x3f, 0x9a, 0x57, 0x79,
+	0xe5, 0xbb, 0x22, 0x0d, 0x1e, 0xf4, 0xc5, 0xdd, 0xbc, 0x7c, 0x8a, 0x1c,
+	0xf6, 0x3e, 0x39, 0xac, 0x14, 0x6f, 0x24, 0x16, 0x78, 0x91, 0x37, 0xdc,
+	0x78, 0x32, 0x18, 0x4f, 0x0b, 0xf8, 0x69, 0xef, 0xd1, 0x4f, 0xbc, 0xe1,
+	0x69, 0x9d, 0x7e, 0x05, 0x37, 0xdb, 0x98, 0x27, 0x71, 0xe5, 0xc3, 0x81,
+	0xb6, 0x31, 0x7b, 0x3a, 0x24, 0x73, 0xf6, 0x60, 0xbf, 0x7c, 0xb7, 0x27,
+	0xd4, 0x4c, 0x9e, 0xfc, 0x44, 0xbe, 0x9b, 0x33, 0x1b, 0x83, 0x73, 0x31,
+	0xf9, 0x96, 0xf8, 0x5b, 0xe2, 0x71, 0xe0, 0x29, 0xd4, 0x70, 0x1e, 0x2d,
+	0x91, 0xa7, 0x14, 0xf7, 0xde, 0x25, 0xe3, 0x83, 0x35, 0xb3, 0xdf, 0x13,
+	0x70, 0x9e, 0x89, 0x94, 0x9a, 0xf9, 0xbf, 0xf4, 0x19, 0xa3, 0x56, 0x70,
+	0xf3, 0xe8, 0xde, 0x44, 0x85, 0xe4, 0x4d, 0x50, 0xbe, 0xb3, 0xb2, 0x6c,
+	0xc4, 0xe7, 0xd4, 0xfc, 0xaf, 0x9b, 0x1e, 0x6c, 0xf9, 0xd2, 0x59, 0x88,
+	0x1e, 0x2c, 0x1f, 0xb1, 0xb1, 0x36, 0x7e, 0x94, 0x85, 0xe9, 0x9f, 0x6c,
+	0xcc, 0x97, 0x77, 0x4d, 0x92, 0x9b, 0xc7, 0xa8, 0x2d, 0x85, 0x87, 0x7f,
+	0xe7, 0xe8, 0xed, 0x46, 0x8e, 0x71, 0x69, 0x5e, 0xf6, 0xf4, 0x7e, 0x9b,
+	0xfa, 0x70, 0xb7, 0x3e, 0xdd, 0x07, 0xe2, 0x03, 0x35, 0x39, 0x6b, 0x95,
+	0xcc, 0x8b, 0x8a, 0xe4, 0x65, 0x73, 0x2c, 0xa7, 0x7c, 0x03, 0x45, 0x87,
+	0x07, 0x57, 0xe0, 0xaa, 0x91, 0x04, 0xeb, 0xac, 0x20, 0x6e, 0xd9, 0x2d,
+	0x31, 0xef, 0xc5, 0xb6, 0x5c, 0xb3, 0x29, 0x75, 0xc2, 0xf6, 0x9c, 0x6d,
+	0xbf, 0x60, 0xe2, 0x82, 0x5a, 0xe8, 0x27, 0xa2, 0x8a, 0xec, 0x4b, 0xe8,
+	0x91, 0x65, 0x4a, 0x6b, 0x38, 0xea, 0xd1, 0xa7, 0x37, 0xb2, 0xcf, 0xbb,
+	0x27, 0x59, 0x47, 0x4c, 0x06, 0x90, 0x1f, 0x91, 0x33, 0x13, 0x01, 0xe4,
+	0xf6, 0x35, 0xe0, 0xc6, 0xdd, 0x09, 0x6c, 0x27, 0xde, 0x2f, 0x9d, 0xe8,
+	0xc6, 0xf2, 0xdd, 0x0a, 0xd6, 0x46, 0xbb, 0x71, 0xc5, 0x44, 0x0d, 0x7a,
+	0x46, 0x34, 0xd6, 0x87, 0x35, 0x58, 0xb6, 0x6f, 0x6e, 0x2e, 0x2f, 0xcf,
+	0xd6, 0x9e, 0x4d, 0xd8, 0x3a, 0x1a, 0x92, 0x73, 0x67, 0xac, 0xbd, 0xec,
+	0x0d, 0x8d, 0xc4, 0xc3, 0xbb, 0xe4, 0xfc, 0xe8, 0x22, 0x77, 0x0f, 0x86,
+	0x35, 0x67, 0xe0, 0xfa, 0x4e, 0x23, 0x1c, 0x66, 0x72, 0xfc, 0x61, 0x74,
+	0x7a, 0x83, 0x06, 0xfb, 0x71, 0x35, 0x29, 0x67, 0x2e, 0x15, 0x7c, 0xd4,
+	0x66, 0xdb, 0x57, 0x24, 0x64, 0xed, 0x7e, 0x97, 0xb2, 0xa9, 0x11, 0xef,
+	0xce, 0xcb, 0xfe, 0xfa, 0x4b, 0xa9, 0xf0, 0x1e, 0x63, 0x70, 0x9b, 0x62,
+	0x2d, 0x0b, 0xc2, 0xfe, 0xb0, 0x32, 0x69, 0x7f, 0xe4, 0x4b, 0x46, 0xc3,
+	0x6f, 0x2b, 0x72, 0x3e, 0x3c, 0x42, 0xdf, 0xd9, 0xf6, 0xab, 0x09, 0xdb,
+	0x9e, 0x4c, 0x58, 0xfe, 0x8b, 0xbb, 0x82, 0x98, 0x58, 0x28, 0xfb, 0x2b,
+	0xcd, 0x99, 0xd3, 0x1e, 0x15, 0x55, 0x0b, 0x51, 0x7b, 0x25, 0xc7, 0x5a,
+	0x0d, 0x79, 0xc7, 0x41, 0x8c, 0x98, 0xaf, 0xb3, 0x5c, 0x68, 0x42, 0x4f,
+	0xae, 0x01, 0xf7, 0x1d, 0xbc, 0x94, 0x0b, 0x05, 0x07, 0x17, 0xde, 0x36,
+	0x91, 0xd2, 0x10, 0x5d, 0xb5, 0x86, 0xfc, 0xa0, 0x12, 0xcb, 0xef, 0x2b,
+	0x5b, 0xb8, 0x2a, 0xd1, 0x8f, 0x77, 0x47, 0x24, 0xcf, 0x5f, 0x49, 0x69,
+	0x23, 0xf6, 0xef, 0x85, 0x43, 0xda, 0x3a, 0x5b, 0x4f, 0x05, 0x9c, 0x5a,
+	0xe1, 0xb9, 0xd4, 0xe2, 0x5d, 0xf5, 0x38, 0x34, 0x66, 0x4c, 0xaf, 0x57,
+	0xd2, 0x2f, 0x2e, 0x40, 0x34, 0xdc, 0xe8, 0x09, 0x3a, 0xdf, 0x63, 0x1b,
+	0x2b, 0xcb, 0xfe, 0xee, 0xff, 0x4c, 0x65, 0x47, 0xce, 0xc2, 0xfe, 0x83,
+	0x21, 0xf9, 0xae, 0x5b, 0xcf, 0xfb, 0xd4, 0x88, 0x75, 0x49, 0xbb, 0x2e,
+	0x90, 0x8c, 0x9e, 0xb8, 0x44, 0xf1, 0x60, 0x2f, 0x6d, 0xa6, 0x0f, 0xd2,
+	0xb7, 0x28, 0x18, 0x50, 0x93, 0x46, 0x77, 0xca, 0x83, 0xf3, 0xc2, 0x88,
+	0xf6, 0xbc, 0x8a, 0xe8, 0xa0, 0x47, 0x71, 0xcf, 0x2b, 0x1f, 0x2e, 0xdf,
+	0x89, 0xe7, 0x46, 0xe4, 0xbb, 0x36, 0xf3, 0x51, 0x1a, 0x43, 0xe0, 0xa2,
+	0xae, 0x24, 0xf1, 0x29, 0x42, 0x5d, 0xc8, 0x9a, 0x25, 0xa8, 0x41, 0x6d,
+	0x81, 0x56, 0xcf, 0x1a, 0x24, 0xfe, 0x73, 0xdb, 0xbe, 0xb8, 0xc5, 0xad,
+	0xb1, 0x2e, 0x1e, 0x3f, 0xf3, 0x3b, 0x30, 0x73, 0x7b, 0x52, 0x6d, 0xd8,
+	0x91, 0x6f, 0xed, 0xad, 0x52, 0x8e, 0xdb, 0xe9, 0x6b, 0x04, 0x07, 0xbd,
+	0xb5, 0x08, 0xc8, 0x9c, 0xc9, 0x7d, 0xa3, 0x92, 0x9b, 0xb2, 0x6e, 0x08,
+	0xf4, 0x24, 0xe4, 0x7b, 0x51, 0xb2, 0x46, 0xd3, 0x81, 0xcb, 0x13, 0xc4,
+	0x46, 0xa5, 0x96, 0x5a, 0xcb, 0xf2, 0x2f, 0x21, 0x5f, 0x55, 0x8e, 0xc8,
+	0xf7, 0x71, 0x22, 0xac, 0x6d, 0x53, 0x78, 0xcf, 0xac, 0xc2, 0x8e, 0x7a,
+	0x89, 0x1d, 0xb1, 0xd1, 0xc5, 0xe8, 0xb5, 0xf2, 0x9d, 0xa6, 0xf2, 0x5f,
+	0x39, 0xe7, 0x35, 0x0f, 0x3b, 0x7a, 0x21, 0x32, 0x7b, 0x96, 0x45, 0xc6,
+	0xef, 0xc1, 0x82, 0x9c, 0xac, 0xe3, 0x63, 0xa9, 0x30, 0xf5, 0xfe, 0xdd,
+	0xe4, 0x63, 0x35, 0xb9, 0x04, 0x1a, 0x63, 0xf1, 0xb2, 0xc4, 0x99, 0x7d,
+	0x18, 0x03, 0xaf, 0x79, 0xf4, 0xc1, 0x46, 0x8f, 0xbc, 0x23, 0xd5, 0xbb,
+	0x0f, 0x29, 0x67, 0xf6, 0xb9, 0xaa, 0x56, 0xde, 0xeb, 0x5a, 0x63, 0x6e,
+	0x6e, 0x1d, 0x20, 0xa6, 0x3e, 0x55, 0x10, 0x7e, 0xfc, 0xad, 0x53, 0xab,
+	0xba, 0xb5, 0x5b, 0x04, 0xaf, 0x99, 0x30, 0x2a, 0x70, 0x1e, 0xed, 0x8e,
+	0x76, 0x73, 0x04, 0x67, 0x0f, 0xc3, 0xd7, 0xd9, 0x8f, 0xb1, 0x82, 0xf0,
+	0x17, 0x93, 0xd7, 0x10, 0xcc, 0x97, 0xfd, 0x17, 0xf7, 0xfc, 0xe7, 0xf3,
+	0xd9, 0xcf, 0xec, 0xa2, 0x2f, 0xad, 0xbc, 0x98, 0xd0, 0xf0, 0xb6, 0xf3,
+	0xbe, 0xfc, 0x77, 0xec, 0x87, 0x75, 0xc5, 0x44, 0x05, 0x5e, 0x9f, 0xa8,
+	0xc6, 0xab, 0x93, 0x92, 0x8b, 0xaf, 0xa4, 0x36, 0x15, 0x34, 0xea, 0x34,
+	0x0b, 0x77, 0x24, 0x1a, 0xf0, 0xfa, 0xbe, 0x10, 0xde, 0x9a, 0x0c, 0xe3,
+	0x9d, 0x89, 0x15, 0xe8, 0x1e, 0x95, 0x73, 0xc2, 0x17, 0xe1, 0xd4, 0x3e,
+	0x77, 0xff, 0xf1, 0x85, 0x92, 0x7c, 0xc7, 0xa0, 0x09, 0xb1, 0x9c, 0xc4,
+	0xc0, 0x63, 0xa9, 0x6c, 0xee, 0x2c, 0xb4, 0xee, 0x0e, 0xe1, 0xc2, 0xdd,
+	0x7a, 0x8f, 0x9c, 0x79, 0xee, 0x8b, 0x5b, 0xe2, 0x7b, 0x7b, 0x69, 0xdc,
+	0xe5, 0xf9, 0x8d, 0x9c, 0xc7, 0x8d, 0xe4, 0x86, 0xfd, 0x66, 0x23, 0xd2,
+	0x41, 0xd4, 0xde, 0x95, 0x90, 0xf8, 0x74, 0xf3, 0x12, 0xb3, 0x67, 0x54,
+	0x9f, 0x96, 0xf3, 0xe0, 0xb4, 0xf1, 0x19, 0x72, 0xd4, 0x8b, 0xe4, 0xa8,
+	0x3f, 0x30, 0xef, 0x7a, 0x68, 0x57, 0x2d, 0x6d, 0x7d, 0x21, 0x37, 0x62,
+	0xd7, 0xb0, 0xc6, 0xaf, 0x36, 0x10, 0x94, 0x77, 0x3e, 0x4b, 0x68, 0xf7,
+	0x32, 0xda, 0xfd, 0x9d, 0xc9, 0x06, 0x7c, 0x9b, 0x76, 0xae, 0xa0, 0x9d,
+	0xe9, 0x89, 0x8b, 0xb0, 0x7c, 0xd6, 0xbe, 0x13, 0xa5, 0x30, 0xde, 0xce,
+	0x36, 0xe0, 0xcd, 0x5d, 0x41, 0xbc, 0xbe, 0xcb, 0xb6, 0x9f, 0x32, 0x0f,
+	0x3b, 0xf6, 0xc8, 0x77, 0x6c, 0xbe, 0x6c, 0xcf, 0x42, 0xda, 0x23, 0xef,
+	0x94, 0x15, 0xd6, 0x0b, 0x62, 0x8f, 0xf8, 0xce, 0xb5, 0xe7, 0x19, 0x79,
+	0x6f, 0xeb, 0xb3, 0x85, 0xdb, 0x94, 0x63, 0xb4, 0x27, 0x57, 0x90, 0xb9,
+	0x36, 0xa6, 0xb3, 0x23, 0x1e, 0x4c, 0x8e, 0x81, 0xf1, 0xbe, 0x01, 0x9b,
+	0x19, 0xdf, 0xd7, 0x26, 0xa2, 0xbd, 0x37, 0x29, 0xf2, 0x7d, 0x9d, 0x00,
+	0xf9, 0x4f, 0xde, 0x27, 0xe3, 0xa7, 0x3e, 0xb8, 0xef, 0x93, 0x1f, 0xc9,
+	0xa7, 0x95, 0x67, 0x13, 0x30, 0xab, 0x0d, 0x83, 0x18, 0x26, 0xef, 0xc6,
+	0xaa, 0x71, 0xcb, 0xa4, 0xbc, 0x3b, 0x0e, 0x61, 0x3d, 0x6d, 0xce, 0x4c,
+	0x68, 0x58, 0x3b, 0xe9, 0xc5, 0x9a, 0x09, 0xcb, 0xf6, 0x73, 0x45, 0xfb,
+	0x27, 0x64, 0x7e, 0x0d, 0x58, 0xfb, 0xf9, 0x3c, 0xc4, 0x57, 0x5c, 0x83,
+	0x33, 0xe6, 0x72, 0xc2, 0x7c, 0xde, 0x99, 0xcb, 0x5d, 0xa6, 0x68, 0x2f,
+	0xe7, 0x5c, 0x13, 0xf1, 0x41, 0x74, 0x97, 0xe8, 0x30, 0x56, 0xb0, 0xac,
+	0x4f, 0xea, 0xf6, 0x40, 0x31, 0x67, 0xeb, 0x93, 0xd7, 0xe3, 0x4c, 0xad,
+	0x61, 0x39, 0xd3, 0x84, 0x88, 0x37, 0xa9, 0xaf, 0x3a, 0xaa, 0x18, 0x99,
+	0x5b, 0x94, 0xf4, 0x15, 0xc2, 0xfb, 0xeb, 0xe2, 0xd1, 0xf4, 0x85, 0x4a,
+	0xb4, 0xdb, 0xab, 0x88, 0x5e, 0x34, 0xb5, 0x85, 0x53, 0x16, 0xb6, 0x10,
+	0x0f, 0x8e, 0x73, 0x1e, 0x1e, 0x43, 0xbe, 0xd7, 0xe7, 0xc5, 0x65, 0x41,
+	0xea, 0x44, 0x12, 0xce, 0xdd, 0xf9, 0x7e, 0xdc, 0x53, 0xa2, 0x9e, 0x2f,
+	0x9d, 0xc9, 0xe3, 0x5f, 0x70, 0x78, 0x20, 0x69, 0xfd, 0xc5, 0x95, 0x51,
+	0xd9, 0x5f, 0x09, 0xfe, 0x07, 0x39, 0xeb, 0xa0, 0x25, 0x9b, 0x2e, 0xd1,
+	0xa2, 0x4e, 0x6d, 0xf9, 0x1f, 0xde, 0x32, 0x24, 0x86, 0xbd, 0x97, 0x3e,
+	0xe9, 0x70, 0xf9, 0xaa, 0xae, 0x09, 0xe7, 0xcc, 0xd6, 0x75, 0xed, 0xee,
+	0x99, 0xc4, 0x47, 0x2e, 0xbd, 0xc1, 0x90, 0x98, 0x5c, 0xb9, 0x68, 0xb1,
+	0xc3, 0x4d, 0x7b, 0xa9, 0x17, 0xe4, 0x73, 0x57, 0xea, 0x02, 0xe7, 0xb3,
+	0x90, 0x8a, 0x39, 0x9f, 0xbf, 0xa0, 0xb6, 0x92, 0xcf, 0x92, 0xec, 0x21,
+	0xf1, 0x73, 0x9c, 0xb5, 0xb7, 0x7c, 0x16, 0x53, 0xee, 0x19, 0xc6, 0x23,
+	0xb3, 0x9c, 0x76, 0x88, 0x7c, 0xfc, 0xf9, 0xb9, 0x43, 0xfe, 0xfc, 0x2f,
+	0xf2, 0xf0, 0xe4, 0xcf, 0x04, 0x3d, 0x00, 0x00, 0x00 };
+
+static const u32 bnx2_TXP_b09FwData[(0x0/4) + 1] = { 0x0 };
+static const u32 bnx2_TXP_b09FwRodata[(0x30/4) + 1] = {
+	0x80000940, 0x80000900, 0x80080100, 0x80080080, 0x80080000, 0x800e0000,
+	0x80080080, 0x80080000, 0x80000a80, 0x80000a00, 0x80000980, 0x80000900,
+	0x00000000 };
+
+static struct fw_info bnx2_txp_fw_09 = {
+	/* Firmware version: 6.2.1b */
+	.ver_major			= 0x6,
+	.ver_minor			= 0x2,
+	.ver_fix			= 0x1,
+
+	.start_addr			= 0x080000a8,
+
+	.text_addr			= 0x08000000,
+	.text_len			= 0x3d00,
+	.text_index			= 0x0,
+	.gz_text			= bnx2_TXP_b09FwText,
+	.gz_text_len			= sizeof(bnx2_TXP_b09FwText),
+
+	.data_addr			= 0x00000000,
+	.data_len			= 0x0,
+	.data_index			= 0x0,
+	.data				= bnx2_TXP_b09FwData,
+
+	.sbss_addr			= 0x08003d68,
+	.sbss_len			= 0x64,
+	.sbss_index			= 0x0,
+
+	.bss_addr			= 0x08003dd0,
+	.bss_len			= 0x24c,
+	.bss_index			= 0x0,
+
+	.rodata_addr			= 0x08003d00,
+	.rodata_len			= 0x30,
+	.rodata_index			= 0x0,
+	.rodata				= bnx2_TXP_b09FwRodata,
+};
+
diff -r 2e9e6572f41c drivers/net/bnx2/bnx2fc_constants.h
--- /dev/null
+++ b/drivers/net/bnx2/bnx2fc_constants.h
@@ -0,0 +1,274 @@
+#ifndef __BNX2FC_CONSTANTS_H_
+#define __BNX2FC_CONSTANTS_H_
+
+/**
+ * This file defines HSI constants for the FCoE flows
+ */
+
+/* Current FCoE HSI version number composed of two fields (16 bit) */
+/* Implies on a change broken previous HSI */
+#define FCOE_HSI_MAJOR_VERSION (2)
+/* Implies on a change which does not broken previous HSI */
+#define FCOE_HSI_MINOR_VERSION (1)
+
+/* KWQ/KCQ FCoE layer code */
+#define FCOE_KWQE_LAYER_CODE   (7)
+
+/* KWQ (kernel work queue) request op codes */
+#define FCOE_KWQE_OPCODE_INIT1			(0)
+#define FCOE_KWQE_OPCODE_INIT2			(1)
+#define FCOE_KWQE_OPCODE_INIT3			(2)
+#define FCOE_KWQE_OPCODE_OFFLOAD_CONN1	(3)
+#define FCOE_KWQE_OPCODE_OFFLOAD_CONN2	(4)
+#define FCOE_KWQE_OPCODE_OFFLOAD_CONN3	(5)
+#define FCOE_KWQE_OPCODE_OFFLOAD_CONN4	(6)
+#define FCOE_KWQE_OPCODE_ENABLE_CONN	(7)
+#define FCOE_KWQE_OPCODE_DISABLE_CONN	(8)
+#define FCOE_KWQE_OPCODE_DESTROY_CONN	(9)
+#define FCOE_KWQE_OPCODE_DESTROY		(10)
+#define FCOE_KWQE_OPCODE_STAT			(11)
+
+/* KCQ (kernel completion queue) response op codes */
+#define FCOE_KCQE_OPCODE_INIT_FUNC				(0x10)
+#define FCOE_KCQE_OPCODE_DESTROY_FUNC			(0x11)
+#define FCOE_KCQE_OPCODE_STAT_FUNC				(0x12)
+#define FCOE_KCQE_OPCODE_OFFLOAD_CONN			(0x15)
+#define FCOE_KCQE_OPCODE_ENABLE_CONN			(0x16)
+#define FCOE_KCQE_OPCODE_DISABLE_CONN			(0x17)
+#define FCOE_KCQE_OPCODE_DESTROY_CONN			(0x18)
+#define FCOE_KCQE_OPCODE_CQ_EVENT_NOTIFICATION  (0x20)
+#define FCOE_KCQE_OPCODE_FCOE_ERROR				(0x21)
+
+/* KCQ (kernel completion queue) completion status */
+#define FCOE_KCQE_COMPLETION_STATUS_SUCCESS				(0x0)
+#define FCOE_KCQE_COMPLETION_STATUS_ERROR				(0x1)
+#define FCOE_KCQE_COMPLETION_STATUS_INVALID_OPCODE		(0x2)
+#define FCOE_KCQE_COMPLETION_STATUS_CTX_ALLOC_FAILURE	(0x3)
+#define FCOE_KCQE_COMPLETION_STATUS_CTX_FREE_FAILURE	(0x4)
+#define FCOE_KCQE_COMPLETION_STATUS_NIC_ERROR			(0x5)
+#define FCOE_KCQE_COMPLETION_STATUS_WRONG_HSI_VERSION   (0x6)
+#define FCOE_KCQE_COMPLETION_STATUS_PARITY_ERROR	(0x81)
+
+/* CQE type */
+#define FCOE_PENDING_CQE_TYPE			0
+#define FCOE_UNSOLIC_CQE_TYPE			1
+
+/* Unsolicited CQE type */
+#define FCOE_UNSOLICITED_FRAME_CQE_TYPE			0
+#define FCOE_ERROR_DETECTION_CQE_TYPE			1
+#define FCOE_WARNING_DETECTION_CQE_TYPE			2
+
+/* E_D_TOV timer resolution in ms */
+#define FCOE_E_D_TOV_TIMER_RESOLUTION_MS (20)
+
+/* E_D_TOV timer resolution for SDM (4 micro) */
+#define FCOE_E_D_TOV_SDM_TIMER_RESOLUTION				\
+	(FCOE_E_D_TOV_TIMER_RESOLUTION_MS * 1000 / 4)
+
+/* REC timer resolution in ms */
+#define FCOE_REC_TIMER_RESOLUTION_MS (20)
+
+/* REC timer resolution for SDM (4 micro) */
+#define FCOE_REC_SDM_TIMER_RESOLUTION (FCOE_REC_TIMER_RESOLUTION_MS * 1000 / 4)
+
+/* E_D_TOV timer default wraparound value (2 sec) in 20 ms resolution */
+#define FCOE_E_D_TOV_DEFAULT_WRAPAROUND_VAL			\
+			(2000 / FCOE_E_D_TOV_TIMER_RESOLUTION_MS)
+
+/* REC_TOV timer default wraparound value (3 sec) in 20 ms resolution */
+#define FCOE_REC_TOV_DEFAULT_WRAPAROUND_VAL			\
+			(3000 / FCOE_REC_TIMER_RESOLUTION_MS)
+
+#define FCOE_NUM_OF_TIMER_TASKS  (8 * 1024)
+
+#define FCOE_NUM_OF_CACHED_TASKS_TIMER (8)
+
+/* Task context constants */
+/******** Remove FCP_CMD write tce sleep ***********************/
+/* In case timer services are required then shall be updated by Xstorm after
+ * start processing the task. In case no timer facilities are required then the
+ * driver would initialize the state to this value
+ *
+#define	FCOE_TASK_TX_STATE_NORMAL				0
+ * After driver has initialize the task in case timer services required *
+#define	FCOE_TASK_TX_STATE_INIT					1
+******** Remove FCP_CMD write tce sleep ***********************/
+/* After driver has initialize the task in case timer services required */
+#define	FCOE_TASK_TX_STATE_INIT					0
+/* In case timer services are required then shall be updated by Xstorm after
+ * start processing the task. In case no timer facilities are required then the
+ * driver would initialize the state to this value
+ */
+#define	FCOE_TASK_TX_STATE_NORMAL				1
+/* Task is under abort procedure. Updated in order to stop processing of
+ * pending WQEs on this task
+ */
+#define	FCOE_TASK_TX_STATE_ABORT				2
+/* For E_D_T_TOV timer expiration in Xstorm (Class 2 only) */
+#define	FCOE_TASK_TX_STATE_ERROR				3
+/* For REC_TOV timer expiration indication received from Xstorm */
+#define	FCOE_TASK_TX_STATE_WARNING				4
+/* For completed unsolicited task */
+#define	FCOE_TASK_TX_STATE_UNSOLICITED_COMPLETED		5
+/* For exchange cleanup request task */
+#define	FCOE_TASK_TX_STATE_EXCHANGE_CLEANUP			6
+/* For sequence cleanup request task */
+#define	FCOE_TASK_TX_STATE_SEQUENCE_CLEANUP			7
+/* For completion the ABTS task. */
+#define	FCOE_TASK_TX_STATE_ABTS_TX				8
+
+#define	FCOE_TASK_RX_STATE_NORMAL				0
+#define	FCOE_TASK_RX_STATE_COMPLETED				1
+/* Obsolete: Intermediate completion (middle path with local completion) */
+#define	FCOE_TASK_RX_STATE_INTER_COMP				2
+/* For REC_TOV timer expiration indication received from Xstorm */
+#define	FCOE_TASK_RX_STATE_WARNING				3
+/* For E_D_T_TOV timer expiration in Ustorm */
+#define	FCOE_TASK_RX_STATE_ERROR				4
+/* FW only: First visit at rx-path, part of the abts round trip */
+#define	FCOE_TASK_RX_STATE_ABTS_IN_PROCESS			5
+/* FW only: Second visit at rx-path, after ABTS frame transmitted */
+#define	FCOE_TASK_RX_STATE_ABTS_TRANSMITTED			6
+/* Special completion indication in case of task was aborted. */
+#define FCOE_TASK_RX_STATE_ABTS_COMPLETED			7
+/* FW only: First visit at rx-path, part of the cleanup round trip */
+#define	FCOE_TASK_RX_STATE_EXCHANGE_CLEANUP_IN_PROCESS		8
+/* FW only: Special completion indication in case of task was cleaned. */
+#define FCOE_TASK_RX_STATE_EXCHANGE_CLEANUP_COMPLETED		9
+/* Not in used: Special completion indication (in task requested the exchange
+ * cleanup) in case cleaned task is in non-valid.
+ */
+#define FCOE_TASK_RX_STATE_ABORT_CLEANUP_COMPLETED		10
+/* Special completion indication (in task requested the sequence cleanup) in
+ * case cleaned task was already returned to normal.
+ */
+#define FCOE_TASK_RX_STATE_IGNORED_SEQUENCE_CLEANUP		11
+
+
+#define	FCOE_TASK_TYPE_WRITE			0
+#define	FCOE_TASK_TYPE_READ				1
+#define	FCOE_TASK_TYPE_MIDPATH			2
+#define	FCOE_TASK_TYPE_UNSOLICITED		3
+#define	FCOE_TASK_TYPE_ABTS				4
+#define	FCOE_TASK_TYPE_EXCHANGE_CLEANUP	5
+#define	FCOE_TASK_TYPE_SEQUENCE_CLEANUP	6
+
+#define FCOE_TASK_DEV_TYPE_DISK			0
+#define FCOE_TASK_DEV_TYPE_TAPE			1
+
+#define FCOE_TASK_CLASS_TYPE_3			0
+#define FCOE_TASK_CLASS_TYPE_2			1
+
+/* FCoE/FC packet fields  */
+#define	FCOE_ETH_TYPE					0x8906
+
+/* FCoE maximum elements in hash table */
+#define FCOE_MAX_ELEMENTS_IN_HASH_TABLE_ROW	8
+
+/* FCoE half of the elements in hash table */
+#define FCOE_HALF_ELEMENTS_IN_HASH_TABLE_ROW			\
+			(FCOE_MAX_ELEMENTS_IN_HASH_TABLE_ROW / 2)
+
+/* FcoE number of cached T2 entries */
+#define T_FCOE_NUMBER_OF_CACHED_T2_ENTRIES (4)
+
+/* FCoE maximum elements in hash table */
+#define FCOE_HASH_TBL_CHUNK_SIZE	16384
+
+/* Everest FCoE connection type */
+#define B577XX_FCOE_CONNECTION_TYPE		4
+
+/* FCoE number of rows (in log). This number derives
+ * from the maximum connections supported which is 2048.
+ * TBA: Need a different constant for E2
+ */
+#define FCOE_MAX_NUM_SESSIONS_LOG		11
+
+#define FC_ABTS_REPLY_MAX_PAYLOAD_LEN	12
+
+/* Error codes for Error Reporting in slow path flows */
+#define FCOE_SLOW_PATH_ERROR_CODE_TOO_MANY_FUNCS			0
+#define FCOE_SLOW_PATH_ERROR_CODE_NO_LICENSE				1
+
+/* Error codes for Error Reporting in fast path flows
+ * XFER error codes
+ */
+#define FCOE_ERROR_CODE_XFER_OOO_RO					0
+#define FCOE_ERROR_CODE_XFER_RO_NOT_ALIGNED				1
+#define FCOE_ERROR_CODE_XFER_NULL_BURST_LEN				2
+#define FCOE_ERROR_CODE_XFER_RO_GREATER_THAN_DATA2TRNS			3
+#define FCOE_ERROR_CODE_XFER_INVALID_PAYLOAD_SIZE			4
+#define FCOE_ERROR_CODE_XFER_TASK_TYPE_NOT_WRITE			5
+#define FCOE_ERROR_CODE_XFER_PEND_XFER_SET				6
+#define FCOE_ERROR_CODE_XFER_OPENED_SEQ					7
+#define FCOE_ERROR_CODE_XFER_FCTL					8
+
+/* FCP RSP error codes */
+#define FCOE_ERROR_CODE_FCP_RSP_BIDI_FLAGS_SET				9
+#define FCOE_ERROR_CODE_FCP_RSP_UNDERFLOW				10
+#define FCOE_ERROR_CODE_FCP_RSP_OVERFLOW				11
+#define FCOE_ERROR_CODE_FCP_RSP_INVALID_LENGTH_FIELD			12
+#define FCOE_ERROR_CODE_FCP_RSP_INVALID_SNS_FIELD			13
+#define FCOE_ERROR_CODE_FCP_RSP_INVALID_PAYLOAD_SIZE			14
+#define FCOE_ERROR_CODE_FCP_RSP_PEND_XFER_SET				15
+#define FCOE_ERROR_CODE_FCP_RSP_OPENED_SEQ				16
+#define FCOE_ERROR_CODE_FCP_RSP_FCTL					17
+#define FCOE_ERROR_CODE_FCP_RSP_LAST_SEQ_RESET				18
+#define FCOE_ERROR_CODE_FCP_RSP_CONF_REQ_NOT_SUPPORTED_YET		19
+
+/* FCP DATA error codes */
+#define FCOE_ERROR_CODE_DATA_OOO_RO					20
+#define FCOE_ERROR_CODE_DATA_EXCEEDS_DEFINED_MAX_FRAME_SIZE		21
+#define FCOE_ERROR_CODE_DATA_EXCEEDS_DATA2TRNS				22
+#define FCOE_ERROR_CODE_DATA_SOFI3_SEQ_ACTIVE_SET			23
+#define FCOE_ERROR_CODE_DATA_SOFN_SEQ_ACTIVE_RESET			24
+#define FCOE_ERROR_CODE_DATA_EOFN_END_SEQ_SET				25
+#define FCOE_ERROR_CODE_DATA_EOFT_END_SEQ_RESET				26
+#define FCOE_ERROR_CODE_DATA_TASK_TYPE_NOT_READ				27
+#define FCOE_ERROR_CODE_DATA_FCTL					28
+
+/* Middle path error codes */
+#define FCOE_ERROR_CODE_MIDPATH_INVALID_TYPE				29
+#define FCOE_ERROR_CODE_MIDPATH_SOFI3_SEQ_ACTIVE_SET			30
+#define FCOE_ERROR_CODE_MIDPATH_SOFN_SEQ_ACTIVE_RESET			31
+#define FCOE_ERROR_CODE_MIDPATH_EOFN_END_SEQ_SET			32
+#define FCOE_ERROR_CODE_MIDPATH_EOFT_END_SEQ_RESET			33
+#define FCOE_ERROR_CODE_MIDPATH_REPLY_FCTL				34
+#define FCOE_ERROR_CODE_MIDPATH_INVALID_REPLY				35
+#define FCOE_ERROR_CODE_MIDPATH_ELS_REPLY_RCTL				36
+
+/* ABTS error codes */
+#define FCOE_ERROR_CODE_ABTS_REPLY_F_CTL				37
+#define FCOE_ERROR_CODE_ABTS_REPLY_DDF_RCTL_FIELD			38
+#define FCOE_ERROR_CODE_ABTS_REPLY_INVALID_BLS_RCTL			39
+#define FCOE_ERROR_CODE_ABTS_REPLY_INVALID_RCTL				40
+#define FCOE_ERROR_CODE_ABTS_REPLY_RCTL_GENERAL_MISMATCH		41
+
+/* Common error codes */
+#define FCOE_ERROR_CODE_COMMON_MIDDLE_FRAME_WITH_PAD			42
+#define FCOE_ERROR_CODE_COMMON_SEQ_INIT_IN_TCE				43
+#define FCOE_ERROR_CODE_COMMON_FC_HDR_RX_ID_MISMATCH			44
+#define FCOE_ERROR_CODE_COMMON_INCORRECT_SEQ_CNT			45
+#define FCOE_ERROR_CODE_COMMON_DATA_FC_HDR_FCP_TYPE_MISMATCH		46
+#define FCOE_ERROR_CODE_COMMON_DATA_NO_MORE_SGES			47
+#define FCOE_ERROR_CODE_COMMON_OPTIONAL_FC_HDR				48
+#define FCOE_ERROR_CODE_COMMON_READ_TCE_OX_ID_TOO_BIG			49
+#define FCOE_ERROR_CODE_COMMON_DATA_WAS_NOT_TRANSMITTED			50
+
+/* Unsolicited Rx error codes */
+#define FCOE_ERROR_CODE_UNSOLICITED_TYPE_NOT_ELS			51
+#define FCOE_ERROR_CODE_UNSOLICITED_TYPE_NOT_BLS			52
+#define FCOE_ERROR_CODE_UNSOLICITED_FCTL_ELS				53
+#define FCOE_ERROR_CODE_UNSOLICITED_FCTL_BLS				54
+#define FCOE_ERROR_CODE_UNSOLICITED_R_CTL				55
+
+#define FCOE_ERROR_CODE_RW_TASK_DDF_RCTL_INFO_FIELD			56
+#define FCOE_ERROR_CODE_RW_TASK_INVALID_RCTL				57
+#define FCOE_ERROR_CODE_RW_TASK_RCTL_GENERAL_MISMATCH			58
+
+/* Timer error codes */
+#define FCOE_ERROR_CODE_E_D_TOV_TIMER_EXPIRATION			60
+#define FCOE_ERROR_CODE_REC_TOV_TIMER_EXPIRATION			61
+
+
+#endif /* BNX2FC_CONSTANTS_H_ */
diff -r 2e9e6572f41c drivers/net/bnx2/bnx2x_57710_int_offsets.h
--- /dev/null
+++ b/drivers/net/bnx2/bnx2x_57710_int_offsets.h
@@ -0,0 +1,380 @@
+static const struct iro e1_iro_arr[378] = {
+	{     0x40,      0x0,      0x0,      0x0,      0x0},	// COMMON_SB_SIZE
+	{     0x40,      0x0,      0x0,      0x0,      0x0},	// COMMON_SB_DATA_SIZE
+	{     0x28,      0x0,      0x0,      0x0,      0x0},	// COMMON_SP_SB_SIZE
+	{     0x10,      0x0,      0x0,      0x0,      0x0},	// COMMON_SP_SB_DATA_SIZE
+	{     0x40,      0x0,      0x0,      0x0,      0x0},	// COMMON_DYNAMIC_HC_CONFIG_SIZE
+	{     0x10,      0x0,      0x0,      0x0,      0x0},	// COMMON_ASM_ASSERT_MSG_SIZE
+	{      0x8,      0x0,      0x0,      0x0,      0x0},	// COMMON_ASM_ASSERT_INDEX_SIZE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_ASM_INVALID_ASSERT_OPCODE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_RAM1_TEST_EVENT_ID
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_INBOUND_INTERRUPT_TEST_AGG_INT_EVENT_ID
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_INBOUND_INTERRUPT_TEST_AGG_INT_1_OFFSET
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_INBOUND_INTERRUPT_TEST_AGG_INT_2_OFFSET
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_INBOUND_INTERRUPT_TEST_AGG_INT_3_OFFSET
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_INBOUND_INTERRUPT_TEST_AGG_INT_1_RESULT_OFFSET
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_INBOUND_INTERRUPT_TEST_AGG_INT_2_RESULT_OFFSET
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_INBOUND_INTERRUPT_TEST_AGG_INT_3_RESULT_OFFSET
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_INBOUND_INTERRUPT_TEST_AGG_INT_1_MASK
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_INBOUND_INTERRUPT_TEST_AGG_INT_2_MASK
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_INBOUND_INTERRUPT_TEST_AGG_INT_3_MASK
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_KUKU_TEST_AGG_INT
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_KUKU_TEST_EVENTID
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_KUKU_PCI_READ_OPCODE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_KUKU_LOAD_CONTEXT_OPCODE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_KUKU_LOAD_CONTEXT_INCVAL
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_KUKU_LOAD_CONTEXT_REGION
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_KUKU_LOAD_CONTEXT_CID
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_KUKU_LOAD_CONTEXT_RUN_PBF_ECHO_TEST
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_KUKU_QM_PAUSE_OPCODE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_KUKU_TEST_UNUSED_FOCS_SUCCESS_OPCODE_VALUE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_KUKU_TEST_UNUSED_FOCS_OPCODE_VALUE
+	{   0x3320,     0x10,      0x0,      0x0,      0x8},	// XSTORM_SPQ_PAGE_BASE_OFFSET(funcId)
+	{   0x3328,     0x10,      0x0,      0x0,      0x2},	// XSTORM_SPQ_PROD_OFFSET(funcId)
+	{   0x3320,     0x10,      0x0,      0x0,     0x10},	// XSTORM_SPQ_DATA_OFFSET(funcId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_HIGIG_HDR_LENGTH_OFFSET(portId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_VF_SPQ_PAGE_BASE_OFFSET(vfId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_VF_SPQ_PROD_OFFSET(vfId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_VF_SPQ_DATA_OFFSET(vfId)
+	{   0x3358,      0x1,      0x4,      0x0,      0x1},	// XSTORM_JUMBO_SUPPORT_OFFSET(pfId)
+	{   0x3360,      0x0,      0x0,      0x0,      0x2},	// XSTORM_COMMON_IP_ID_MASK_OFFSET
+	{   0x3368,      0x0,      0x0,      0x0,      0x8},	// XSTORM_COMMON_RTC_PARAMS_OFFSET
+	{   0x336c,      0x0,      0x0,      0x0,      0x2},	// XSTORM_COMMON_RTC_RESOLUTION_OFFSET
+	{   0x3920,      0x0,      0x0,      0x0,      0x8},	// XSTORM_FW_VERSION_OFFSET
+	{   0x3af8,     0x40,      0x0,      0x0,     0x40},	// XSTORM_LICENSE_VALUES_OFFSET(pfId)
+	{   0x3938,     0x80,      0x0,      0x0,     0x48},	// XSTORM_CMNG_PER_PORT_VARS_OFFSET(portId)
+	{   0x3a38,     0x40,      0x0,      0x0,      0x8},	// XSTORM_RATE_SHAPING_PER_VN_VARS_OFFSET(pfId)
+	{   0x3a48,     0x40,      0x0,      0x0,     0x18},	// XSTORM_FAIRNESS_PER_VN_VARS_OFFSET(pfId)
+	{   0x3370,     0x28,      0x0,      0x0,     0x28},	// XSTORM_PER_QUEUE_STATS_OFFSET(xStatQueueId)
+	{   0x3c20,      0x8,      0x0,      0x0,      0x1},	// XSTORM_FUNC_EN_OFFSET(funcId)
+	{   0x3c21,      0x8,      0x0,      0x0,      0x1},	// XSTORM_VF_TO_PF_OFFSET(funcId)
+	{   0x3c22,      0x8,      0x0,      0x0,      0x1},	// XSTORM_RECORD_SLOW_PATH_OFFSET(funcId)
+	{   0x2008,     0x10,      0x0,      0x0,     0x10},	// XSTORM_ASSERT_LIST_OFFSET(assertListEntry)
+	{   0x2000,      0x0,      0x0,      0x0,      0x8},	// XSTORM_ASSERT_LIST_INDEX_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_TIME_SYNC_TEST_ADDRESS_OFFSET
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// PCI_READ_KUKUE_CODE_OPPCOE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// LOAD_CONTEXT_KUKUE_CODE_OPPCOE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// QM_PAUSE_KUKUE_CODE_OPPCOE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// PAUSE_TEST_XOFF_PORT0_KUKUE_CODE_OPPCOE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// PAUSE_TEST_XON_PORT0_KUKUE_CODE_OPPCOE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// PAUSE_TEST_XOFF_PORT1_KUKUE_CODE_OPPCOE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// PAUSE_TEST_XON_PORT1_KUKUE_CODE_OPPCOE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// TEST_UNUSED_FOCS_KUKUE_CODE_OPPCOE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// PBF_ECHO_KUKUE_CODE_OPPCOE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// TIME_SYNC_PORT0_KUKUE_CODE_OPPCOE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// TIME_SYNC_PORT1_KUKUE_CODE_OPPCOE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// IGU_TEST_KUKUE_CODE_OPPCOE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_AGG_INT_INITIAL_CLEANUP_INDEX
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_AGG_INT_FINAL_CLEANUP_INDEX
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_AGG_INT_FINAL_CLEANUP_COMP_TYPE
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_ERROR_HANDLER_STATISTICS_RAM_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_LB_PHYSICAL_QUEUES_INFO_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_QUEUE_ZONE_OFFSET(queueId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_VF_ZONE_OFFSET(vfId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_FIVE_TUPLE_SRC_EN_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_E2_INTEG_RAM_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_QM_OPPORTUNISTIC_RAM_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_SIDE_INFO_INPUT_LSB_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_E2_INTEG_VLAN_ID_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_E2_INTEG_VLAN_ID_EN_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_VFC_TEST_LINE_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_VFC_TEST_RESULT_OFFSET
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_VFC_OP_GEN_VALUE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_INBOUND_INTERRUPT_TEST_VF_INFO_SIZE_IN_BYTES
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_INBOUND_INTERRUPT_TEST_AGG_INT_1_INDEX
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_INBOUND_INTERRUPT_TEST_AGG_INT_2_INDEX
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_INBOUND_INTERRUPT_TEST_AGG_INT_3_INDEX
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_DPM_BUFFER_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_KUKU_TEST_OPCODE_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_KUKU_LOAD_CONTEXT_TEST_OFFSET
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_KUKU_OP_GEN_VALUE
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_QM_PAUSE_TEST_QUEUE_MASK_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_QM_PAUSE_TEST_GROUP_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_QM_PAUSE_TEST_PORT_OFFSET
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_KUKU_PBF_ECHO_OPCODE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_KUKU_PBF_ECHO_INCVAL
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_KUKU_PBF_ECHO_REGION
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_KUKU_PBF_ECHO_RUN_PBF_ECHO_TEST
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_KUKU_PBF_ECHO_CID
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_KUKU_PBF_ECHO_SUCCESS_VALUE
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_KUKU_TIME_SYNC_FLG_OFFSET(funcId)
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// TSTORM_INDIRECTION_TABLE_ENTRY_SIZE
+	{   0x19c8,      0x0,      0x0,      0x0,      0x8},	// TSTORM_COMMON_RTC_PARAMS_OFFSET
+	{   0x2008,     0x10,      0x0,      0x0,     0x10},	// TSTORM_ASSERT_LIST_OFFSET(assertListEntry)
+	{   0x2000,      0x0,      0x0,      0x0,      0x8},	// TSTORM_ASSERT_LIST_INDEX_OFFSET
+	{   0x4870,      0x8,      0x0,      0x0,      0x1},	// TSTORM_FUNC_EN_OFFSET(funcId)
+	{   0x4871,      0x8,      0x0,      0x0,      0x1},	// TSTORM_VF_TO_PF_OFFSET(funcId)
+	{   0x4872,      0x8,      0x0,      0x0,      0x1},	// TSTORM_RECORD_SLOW_PATH_OFFSET(funcId)
+	{   0x4040,     0x38,      0x0,      0x0,     0x38},	// TSTORM_PER_QUEUE_STATS_OFFSET(tStatQueueId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_COMMON_SAFC_WORKAROUND_ENABLE_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_COMMON_SAFC_WORKAROUND_TIMEOUT_10USEC_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_ERROR_HANDLER_STATISTICS_RAM_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_VFC_TEST_RSS_KEY_OFFSET(portId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_QUEUE_ZONE_OFFSET(queueId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_VF_ZONE_OFFSET(vfId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_E2_INTEG_RAM_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_LSB_SIDE_BAND_INFO_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_MSB_SIDE_BAND_INFO_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_VFC_TEST_LINE_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_VFC_TEST_RESULT_OFFSET
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// TSTORM_VFC_OP_GEN_VALUE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// TSTORM_INBOUND_INTERRUPT_TEST_VF_INFO_SIZE_IN_BYTES
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// TSTORM_INBOUND_INTERRUPT_TEST_AGG_INT_1_INDEX
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// TSTORM_INBOUND_INTERRUPT_TEST_AGG_INT_2_INDEX
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// TSTORM_INBOUND_INTERRUPT_TEST_AGG_INT_3_INDEX
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_KUKU_TEST_OPCODE_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_KUKU_LOAD_CONTEXT_TEST_OFFSET
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// TSTORM_KUKU_OP_GEN_VALUE
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_PCI_READ_TEST_ADDRESS_LO_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_PCI_READ_TEST_ADDRESS_HI_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_PCI_READ_TEST_RAM_ADDRESS_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_PCI_READ_TEST_PCI_ENTITY_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_TIME_SYNC_TEST_ADDRESS_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_KUKU_NIG_PAUSE_TEST_MASK_OFFSET
+	{   0x4000,     0x40,      0x0,      0x0,     0x40},	// CSTORM_STATUS_BLOCK_OFFSET(sbId)
+	{   0x4800,     0x40,      0x0,      0x0,     0x40},	// CSTORM_STATUS_BLOCK_DATA_OFFSET(sbId)
+	{   0x482e,     0x40,      0x0,      0x0,      0x1},	// CSTORM_STATUS_BLOCK_DATA_STATE_OFFSET(sbId)
+	{   0x4800,     0x40,      0x2,      0x0,      0x1},	// CSTORM_STATUS_BLOCK_DATA_TIMEOUT_OFFSET(sbId,hcIndex)
+	{   0x4801,     0x40,      0x2,      0x0,      0x0},	// CSTORM_STATUS_BLOCK_DATA_FLAGS_OFFSET(sbId,hcIndex)
+	{   0x3000,     0x40,      0x0,      0x0,     0x40},	// CSTORM_SYNC_BLOCK_OFFSET(sbId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// CSTORM_HC_SYNC_LINE_INDEX_E2_OFFSET(hcIndex,sbId)
+	{   0x3000,      0x8,     0x40,      0x0,      0x4},	// CSTORM_HC_SYNC_LINE_INDEX_E1X_OFFSET(hcIndex,sbId)
+	{   0x3004,      0x8,     0x40,      0x0,      0x4},	// CSTORM_HC_SYNC_LINE_DHC_OFFSET(sbSyncLines,sbId)
+	{   0x3b80,     0x28,      0x0,      0x0,     0x28},	// CSTORM_SP_STATUS_BLOCK_OFFSET(pfId)
+	{   0x3bd0,     0x10,      0x0,      0x0,     0x10},	// CSTORM_SP_STATUS_BLOCK_DATA_OFFSET(pfId)
+	{   0x3bda,     0x10,      0x0,      0x0,      0x1},	// CSTORM_SP_STATUS_BLOCK_DATA_STATE_OFFSET(pfId)
+	{   0x3800,     0x80,      0x0,      0x0,     0x80},	// CSTORM_SP_SYNC_BLOCK_OFFSET(pfId)
+	{   0x3800,      0x8,     0x80,      0x0,      0x2},	// CSTORM_SP_HC_SYNC_LINE_INDEX_OFFSET(hcSpIndex,pfId)
+	{   0x3900,     0x40,      0x0,      0x0,     0x40},	// CSTORM_DYNAMIC_HC_CONFIG_OFFSET(pfId)
+	{   0x2008,     0x10,      0x0,      0x0,     0x10},	// CSTORM_ASSERT_LIST_OFFSET(assertListEntry)
+	{   0x2000,      0x0,      0x0,      0x0,      0x8},	// CSTORM_ASSERT_LIST_INDEX_OFFSET
+	{   0x5198,      0x8,      0x0,      0x0,      0x1},	// CSTORM_FUNC_EN_OFFSET(funcId)
+	{   0x5199,      0x8,      0x0,      0x0,      0x1},	// CSTORM_VF_TO_PF_OFFSET(funcId)
+	{   0x519a,      0x8,      0x0,      0x0,      0x1},	// CSTORM_RECORD_SLOW_PATH_OFFSET(funcId)
+	{   0x3980,     0x10,      0x4,      0x0,      0x4},	// CSTORM_BYTE_COUNTER_OFFSET(sbId,dhcIndex)
+	{   0x51a8,     0x30,     0x18,      0x0,     0x10},	// CSTORM_EVENT_RING_DATA_OFFSET(pfId)
+	{   0x51b0,     0x30,     0x18,      0x0,      0x2},	// CSTORM_EVENT_RING_PROD_OFFSET(pfId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// CSTORM_VF_PF_CHANNEL_STATE_OFFSET(vfId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// CSTORM_VF_PF_CHANNEL_VALID_OFFSET(vfId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// CSTORM_IGU_MODE_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// CSTORM_ERROR_HANDLER_STATISTICS_RAM_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// CSTORM_FINAL_CLEANUP_COMPLETE_OFFSET(funcId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// CSTORM_QUEUE_ZONE_OFFSET(queueId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// CSTORM_VF_ZONE_OFFSET(vfId)
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// CSTORM_INBOUND_INTERRUPT_TEST_VF_INFO_SIZE_IN_BYTES
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// CSTORM_INBOUND_INTERRUPT_TEST_AGG_INT_1_INDEX
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// CSTORM_INBOUND_INTERRUPT_TEST_AGG_INT_2_INDEX
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// CSTORM_INBOUND_INTERRUPT_TEST_AGG_INT_3_INDEX
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// CSTORM_KUKU_TEST_OPCODE_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// CSTORM_KUKU_LOAD_CONTEXT_TEST_OFFSET
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// CSTORM_KUKU_OP_GEN_VALUE
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// CSTORM_IGU_TEST_PF_ID_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// CSTORM_IGU_TEST_VF_ID_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// CSTORM_IGU_TEST_VF_VALID_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// CSTORM_IGU_TEST_ADDRESS_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// CSTORM_IGU_TEST_IGU_COMMAND_OFFSET
+	{   0x23e8,     0x80,      0x0,      0x0,     0x80},	// USTORM_INDIRECTION_TABLE_OFFSET(portId)
+	{      0x1,      0x0,      0x0,      0x0,      0x0},	// USTORM_INDIRECTION_TABLE_ENTRY_SIZE
+	{   0x2008,     0x10,      0x0,      0x0,     0x10},	// USTORM_ASSERT_LIST_OFFSET(assertListEntry)
+	{   0x2000,      0x0,      0x0,      0x0,      0x8},	// USTORM_ASSERT_LIST_INDEX_OFFSET
+	{   0x2e70,      0x8,      0x0,      0x0,      0x1},	// USTORM_FUNC_EN_OFFSET(funcId)
+	{   0x2e71,      0x8,      0x0,      0x0,      0x1},	// USTORM_VF_TO_PF_OFFSET(funcId)
+	{   0x2e72,      0x8,      0x0,      0x0,      0x1},	// USTORM_RECORD_SLOW_PATH_OFFSET(funcId)
+	{   0x24e8,     0x38,      0x0,      0x0,     0x38},	// USTORM_PER_QUEUE_STATS_OFFSET(uStatQueueId)
+	{   0x2dd0,      0x8,      0x0,      0x0,      0x8},	// USTORM_MEM_WORKAROUND_ADDRESS_OFFSET(pfId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_ETH_PAUSE_ENABLED_OFFSET(portId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_TOE_PAUSE_ENABLED_OFFSET(portId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_MAX_PAUSE_TIME_USEC_OFFSET(portId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_ERROR_HANDLER_STATISTICS_RAM_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_QUEUE_ZONE_OFFSET(queueId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_VF_ZONE_OFFSET(vfId)
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// USTORM_INBOUND_INTERRUPT_TEST_VF_INFO_SIZE_IN_BYTES
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// USTORM_INBOUND_INTERRUPT_TEST_AGG_INT_1_INDEX
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// USTORM_INBOUND_INTERRUPT_TEST_AGG_INT_2_INDEX
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// USTORM_INBOUND_INTERRUPT_TEST_AGG_INT_3_INDEX
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_KUKU_TEST_OPCODE_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_KUKU_LOAD_CONTEXT_TEST_OFFSET
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// USTORM_KUKU_OP_GEN_VALUE
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_PCI_READ_TEST_ADDRESS_LO_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_PCI_READ_TEST_ADDRESS_HI_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_PCI_READ_TEST_RAM_ADDRESS_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_PCI_READ_TEST_PCI_ENTITY_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_KUKU_NIG_PAUSE_TEST_MASK_OFFSET
+	{   0x2500,     0x40,      0x0,      0x0,      0x8},	// TSTORM_FUNCTION_COMMON_CONFIG_OFFSET(pfId)
+	{   0x2508,     0x40,      0x0,      0x0,     0x20},	// TSTORM_MAC_FILTER_CONFIG_OFFSET(pfId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_APPROXIMATE_MATCH_MULTICAST_FILTERING_OFFSET(pfId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_ACCEPT_CLASSIFY_FAILED_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_CQE_PAGE_NEXT_OFFSET(portId,clientId)
+	{   0x3000,      0x0,      0x0,      0x0,   0x1000},	// USTORM_AGG_DATA_OFFSET
+	{   0x50a1,      0x0,      0x0,      0x0,      0x1},	// USTORM_TPA_BTR_OFFSET
+	{   0x50b8,      0x0,      0x0,      0x0,      0x2},	// USTORM_ETH_DYNAMIC_HC_PARAM_OFFSET
+	{   0x50c8,     0x90,      0x8,      0x0,      0x8},	// USTORM_RX_PRODS_E1X_OFFSET(portId,clientId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_RX_PRODS_E2_OFFSET(qzoneId)
+	{   0x2960,      0x8,      0x0,      0x0,      0x1},	// XSTORM_TCP_GLOBAL_DEL_ACK_COUNTER_ENABLED_OFFSET(portId)
+	{   0x2961,      0x8,      0x0,      0x0,      0x1},	// XSTORM_TCP_GLOBAL_DEL_ACK_COUNTER_MAX_COUNT_OFFSET(portId)
+	{   0x2970,      0x8,      0x4,      0x0,      0x2},	// XSTORM_TCP_IPID_OFFSET(pfId)
+	{   0x2978,      0x8,      0x4,      0x0,      0x4},	// XSTORM_TCP_TX_SWS_TIMER_VAL_OFFSET(pfId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_TCP_TX_SWITCHING_EN_OFFSET(portId)
+	{   0x2fb0,      0x8,      0x0,      0x0,      0x4},	// TSTORM_TCP_DUPLICATE_ACK_THRESHOLD_OFFSET(pfId)
+	{   0x2fb4,      0x8,      0x0,      0x0,      0x4},	// TSTORM_TCP_MAX_CWND_OFFSET(pfId)
+	{   0x2fc0,      0x0,      0x0,      0x0,      0x8},	// TSTORM_TCP_GLOBAL_PARAMS_OFFSET
+	{   0x2fc8,      0x0,      0x0,      0x0,      0x8},	// TSTORM_TCP_ISLES_ARRAY_DESCRIPTOR_OFFSET
+	{   0x3000,      0x0,      0x0,      0x0,     0x10},	// TSTORM_TCP_ISLES_ARRAY_OFFSET
+	{   0x5040,      0x1,      0x1,      0x0,      0x1},	// XSTORM_TOE_LLC_SNAP_ENABLED_OFFSET(pfId)
+	{   0x5000,      0x0,      0x0,      0x0,     0x20},	// XSTORM_OUT_OCTETS_OFFSET
+	{    0x808,     0x10,      0x0,      0x0,      0x4},	// TSTORM_TOE_MAX_SEG_RETRANSMIT_OFFSET(pfId)
+	{    0x80c,     0x10,      0x0,      0x0,      0x1},	// TSTORM_TOE_DOUBT_REACHABILITY_OFFSET(pfId)
+	{    0x8b7,      0x0,      0x0,      0x0,      0x1},	// TSTORM_TOE_MAX_DOMINANCE_VALUE_OFFSET
+	{    0x8b6,      0x0,      0x0,      0x0,      0x1},	// TSTORM_TOE_DOMINANCE_THRESHOLD_OFFSET
+	{   0x1000,     0x40,     0x20,      0x0,      0x4},	// CSTORM_TOE_CQ_CONS_PTR_LO_OFFSET(rssId,portId)
+	{   0x1004,     0x40,     0x20,      0x0,      0x4},	// CSTORM_TOE_CQ_CONS_PTR_HI_OFFSET(rssId,portId)
+	{   0x1008,     0x40,     0x20,      0x0,      0x2},	// CSTORM_TOE_CQ_PROD_OFFSET(rssId,portId)
+	{   0x100a,     0x40,     0x20,      0x0,      0x2},	// CSTORM_TOE_CQ_CONS_OFFSET(rssId,portId)
+	{   0x100c,     0x40,     0x20,      0x0,      0x1},	// CSTORM_TOE_CQ_NXT_PAGE_ADDR_VALID_OFFSET(rssId,portId)
+	{   0x100d,     0x40,     0x20,      0x0,      0x1},	// CSTORM_TOE_STATUS_BLOCK_ID_OFFSET(rssId,portId)
+	{   0x100e,     0x40,     0x20,      0x0,      0x1},	// CSTORM_TOE_STATUS_BLOCK_INDEX_OFFSET(rssId,portId)
+	{   0x1010,     0x40,     0x20,      0x0,      0x4},	// CSTORM_TOE_CQ_NEXT_PAGE_BASE_ADDR_LO_OFFSET(rssId,portId)
+	{   0x1014,     0x40,     0x20,      0x0,      0x4},	// CSTORM_TOE_CQ_NEXT_PAGE_BASE_ADDR_HI_OFFSET(rssId,portId)
+	{   0x1018,     0x40,     0x20,      0x0,      0x4},	// CSTORM_TOE_DYNAMIC_HC_PROD_OFFSET(rssId,portId)
+	{   0x101c,     0x40,     0x20,      0x0,      0x4},	// CSTORM_TOE_DYNAMIC_HC_CONS_OFFSET(rssId,portId)
+	{   0x3000,    0x100,     0x80,      0x8,      0x4},	// USTORM_GRQ_CACHE_BD_LO_OFFSET(rssId,portId,grqBdId)
+	{   0x3004,    0x100,     0x80,      0x8,      0x4},	// USTORM_GRQ_CACHE_BD_HI_OFFSET(rssId,portId,grqBdId)
+	{      0xa,      0x0,      0x0,      0x0,      0x0},	// USTORM_TOE_GRQ_CACHE_NUM_BDS
+	{   0x3068,    0x100,     0x80,      0x0,      0x1},	// USTORM_TOE_GRQ_LOCAL_PROD_OFFSET(rssId,portId)
+	{   0x3069,    0x100,     0x80,      0x0,      0x1},	// USTORM_TOE_GRQ_LOCAL_CONS_OFFSET(rssId,portId)
+	{   0x306c,    0x100,     0x80,      0x0,      0x2},	// USTORM_TOE_GRQ_CONS_OFFSET(rssId,portId)
+	{   0x306e,    0x100,     0x80,      0x0,      0x2},	// USTORM_TOE_GRQ_PROD_OFFSET(rssId,portId)
+	{   0x3070,    0x100,     0x80,      0x0,      0x4},	// USTORM_TOE_GRQ_CONS_PTR_LO_OFFSET(rssId,portId)
+	{   0x3074,    0x100,     0x80,      0x0,      0x4},	// USTORM_TOE_GRQ_CONS_PTR_HI_OFFSET(rssId,portId)
+	{   0x3066,    0x100,     0x80,      0x0,      0x2},	// USTORM_TOE_GRQ_BUF_SIZE_OFFSET(rssId,portId)
+	{   0x3064,    0x100,     0x80,      0x0,      0x1},	// USTORM_TOE_CQ_NXT_PAGE_ADDR_VALID_OFFSET(rssId,portId)
+	{   0x3060,    0x100,     0x80,      0x0,      0x2},	// USTORM_TOE_CQ_CONS_OFFSET(rssId,portId)
+	{   0x3062,    0x100,     0x80,      0x0,      0x2},	// USTORM_TOE_CQ_PROD_OFFSET(rssId,portId)
+	{   0x3050,    0x100,     0x80,      0x0,      0x4},	// USTORM_TOE_CQ_NEXT_PAGE_BASE_ADDR_LO_OFFSET(rssId,portId)
+	{   0x3054,    0x100,     0x80,      0x0,      0x4},	// USTORM_TOE_CQ_NEXT_PAGE_BASE_ADDR_HI_OFFSET(rssId,portId)
+	{   0x3058,    0x100,     0x80,      0x0,      0x4},	// USTORM_TOE_CQ_CONS_PTR_LO_OFFSET(rssId,portId)
+	{   0x305c,    0x100,     0x80,      0x0,      0x4},	// USTORM_TOE_CQ_CONS_PTR_HI_OFFSET(rssId,portId)
+	{   0x307c,    0x100,     0x80,      0x0,      0x1},	// USTORM_TOE_STATUS_BLOCK_ID_OFFSET(rssId,portId)
+	{   0x307d,    0x100,     0x80,      0x0,      0x1},	// USTORM_TOE_STATUS_BLOCK_INDEX_OFFSET(rssId,portId)
+	{   0x1c18,     0x10,      0x0,      0x0,      0x4},	// USTORM_TOE_TCP_PUSH_TIMER_TICKS_OFFSET(pfId)
+	{   0x1c30,     0x10,      0x0,      0x0,      0x4},	// USTORM_TOE_GRQ_XOFF_COUNTER_OFFSET(pfId)
+	{   0x1c38,     0x10,      0x0,      0x0,      0x4},	// USTORM_TOE_RCQ_XOFF_COUNTER_OFFSET(pfId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_TOE_CQ_THR_LOW_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_TOE_GRQ_THR_LOW_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_TOE_CQ_THR_HIGH_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_TOE_GRQ_THR_HIGH_OFFSET
+	{   0x4c10,      0x8,      0x0,      0x0,      0x2},	// TSTORM_ISCSI_TCP_VARS_FLAGS_OFFSET(pfId)
+	{   0x4c12,      0x8,      0x0,      0x0,      0x2},	// TSTORM_ISCSI_TCP_VARS_LSB_LOCAL_MAC_ADDR_OFFSET(pfId)
+	{   0x4c14,      0x8,      0x0,      0x0,      0x2},	// TSTORM_ISCSI_TCP_VARS_MID_LOCAL_MAC_ADDR_OFFSET(pfId)
+	{   0x4c16,      0x8,      0x0,      0x0,      0x2},	// TSTORM_ISCSI_TCP_VARS_MSB_LOCAL_MAC_ADDR_OFFSET(pfId)
+	{   0x4c20,      0x8,      0x0,      0x0,      0x8},	// TSTORM_ISCSI_RQ_SIZE_OFFSET(pfId)
+	{   0x4c00,      0x8,      0x0,      0x0,      0x2},	// TSTORM_ISCSI_PAGE_SIZE_OFFSET(pfId)
+	{   0x4c02,      0x8,      0x0,      0x0,      0x1},	// TSTORM_ISCSI_PAGE_SIZE_LOG_OFFSET(pfId)
+	{   0x4c04,      0x8,      0x0,      0x0,      0x2},	// TSTORM_ISCSI_NUM_OF_TASKS_OFFSET(pfId)
+	{   0x4c30,      0x8,      0x0,      0x0,      0x8},	// TSTORM_ISCSI_ERROR_BITMAP_OFFSET(pfId)
+	{   0x4c40,      0x8,      0x0,      0x0,      0x4},	// TSTORM_ISCSI_L2_ISCSI_OOO_CID_TABLE_OFFSET(pfId)
+	{   0x4c44,      0x8,      0x0,      0x0,      0x1},	// TSTORM_ISCSI_L2_ISCSI_OOO_CLIENT_ID_TABLE_OFFSET(pfId)
+	{   0x4c50,      0x8,      0x0,      0x0,      0x2},	// TSTORM_ISCSI_L2_ISCSI_OOO_PROD_OFFSET(pfId)
+	{   0x4c54,      0x8,      0x0,      0x0,      0x2},	// TSTORM_ISCSI_L2_ISCSI_OOO_RX_BDS_THRSHLD_OFFSET(pfId)
+	{   0x4c60,      0x8,      0x0,      0x0,      0x4},	// TSTORM_ISCSI_TCP_LOCAL_ADV_WND_OFFSET(pfId)
+	{   0x1400,      0x8,      0x0,      0x0,      0x2},	// USTORM_ISCSI_PAGE_SIZE_OFFSET(pfId)
+	{   0x1402,      0x8,      0x0,      0x0,      0x1},	// USTORM_ISCSI_PAGE_SIZE_LOG_OFFSET(pfId)
+	{   0x1404,      0x8,      0x0,      0x0,      0x2},	// USTORM_ISCSI_NUM_OF_TASKS_OFFSET(pfId)
+	{   0x1410,      0x8,      0x0,      0x0,      0x2},	// USTORM_ISCSI_R2TQ_SIZE_OFFSET(pfId)
+	{   0x1414,      0x8,      0x0,      0x0,      0x2},	// USTORM_ISCSI_CQ_SIZE_OFFSET(pfId)
+	{   0x1416,      0x8,      0x0,      0x0,      0x2},	// USTORM_ISCSI_CQ_SQN_SIZE_OFFSET(pfId)
+	{   0x19b8,      0x8,      0x0,      0x0,      0x8},	// USTORM_ISCSI_GLOBAL_BUF_PHYS_ADDR_OFFSET(pfId)
+	{   0x1420,      0x8,      0x0,      0x0,      0x2},	// USTORM_ISCSI_RQ_BUFFER_SIZE_OFFSET(pfId)
+	{   0x1424,      0x8,      0x0,      0x0,      0x2},	// USTORM_ISCSI_RQ_SIZE_OFFSET(pfId)
+	{   0x19c8,      0x8,      0x0,      0x0,      0x8},	// USTORM_ISCSI_ERROR_BITMAP_OFFSET(pfId)
+	{   0x2c10,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_TCP_VARS_TTL_OFFSET(pfId)
+	{   0x2c11,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_TCP_VARS_TOS_OFFSET(pfId)
+	{   0x2c12,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_TCP_VARS_FLAGS_OFFSET(pfId)
+	{   0x2c13,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_TCP_VARS_ADV_WND_SCL_OFFSET(pfId)
+	{   0x2c00,      0x8,      0x0,      0x0,      0x2},	// XSTORM_ISCSI_PAGE_SIZE_OFFSET(pfId)
+	{   0x2c02,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_PAGE_SIZE_LOG_OFFSET(pfId)
+	{   0x2c04,      0x8,      0x0,      0x0,      0x2},	// XSTORM_ISCSI_NUM_OF_TASKS_OFFSET(pfId)
+	{   0x2c30,      0x8,      0x0,      0x0,      0x2},	// XSTORM_ISCSI_HQ_SIZE_OFFSET(pfId)
+	{   0x2c32,      0x8,      0x0,      0x0,      0x2},	// XSTORM_ISCSI_SQ_SIZE_OFFSET(pfId)
+	{   0x2c34,      0x8,      0x0,      0x0,      0x2},	// XSTORM_ISCSI_R2TQ_SIZE_OFFSET(pfId)
+	{   0x2c20,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_LOCAL_MAC_ADDR0_OFFSET(pfId)
+	{   0x2c21,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_LOCAL_MAC_ADDR1_OFFSET(pfId)
+	{   0x2c22,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_LOCAL_MAC_ADDR2_OFFSET(pfId)
+	{   0x2c23,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_LOCAL_MAC_ADDR3_OFFSET(pfId)
+	{   0x2c24,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_LOCAL_MAC_ADDR4_OFFSET(pfId)
+	{   0x2c25,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_LOCAL_MAC_ADDR5_OFFSET(pfId)
+	{   0x2c26,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_LOCAL_VLAN_OFFSET(pfId)
+	{   0x1480,      0x8,      0x0,      0x0,      0x2},	// CSTORM_ISCSI_PAGE_SIZE_OFFSET(pfId)
+	{   0x1482,      0x8,      0x0,      0x0,      0x1},	// CSTORM_ISCSI_PAGE_SIZE_LOG_OFFSET(pfId)
+	{   0x1484,      0x8,      0x0,      0x0,      0x2},	// CSTORM_ISCSI_NUM_OF_TASKS_OFFSET(pfId)
+	{   0x1492,     0xc0,     0x18,      0x0,      0x2},	// CSTORM_ISCSI_EQ_PROD_OFFSET(pfId,iscsiEqId)
+	{   0x1490,     0xc0,     0x18,      0x0,      0x2},	// CSTORM_ISCSI_EQ_CONS_OFFSET(pfId,iscsiEqId)
+	{   0x149c,     0xc0,     0x18,      0x0,      0x8},	// CSTORM_ISCSI_EQ_NEXT_PAGE_ADDR_OFFSET(pfId,iscsiEqId)
+	{   0x1494,     0xc0,     0x18,      0x0,      0x8},	// CSTORM_ISCSI_EQ_NEXT_EQE_ADDR_OFFSET(pfId,iscsiEqId)
+	{   0x14a7,     0xc0,     0x18,      0x0,      0x1},	// CSTORM_ISCSI_EQ_NEXT_PAGE_ADDR_VALID_OFFSET(pfId,iscsiEqId)
+	{   0x14a4,     0xc0,     0x18,      0x0,      0x2},	// CSTORM_ISCSI_EQ_SB_NUM_OFFSET(pfId,iscsiEqId)
+	{   0x14a6,     0xc0,     0x18,      0x0,      0x1},	// CSTORM_ISCSI_EQ_SB_INDEX_OFFSET(pfId,iscsiEqId)
+	{   0x1610,      0x8,      0x0,      0x0,      0x8},	// CSTORM_ISCSI_HQ_SIZE_OFFSET(pfId)
+	{   0x1620,      0x8,      0x0,      0x0,      0x8},	// CSTORM_ISCSI_CQ_SIZE_OFFSET(pfId)
+	{   0x1630,      0x8,      0x0,      0x0,      0x8},	// CSTORM_ISCSI_CQ_SQN_SIZE_OFFSET(pfId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_FCOE_EQ_PROD_OFFSET(pfId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_FCOE_TIMER_PARAM_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_TIMER_ARRAY_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_STAT_FC_CRC_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_STAT_EOFA_DEL_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_STAT_MISS_FRAME_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_STAT_SEQ_TIMEOUT_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_STAT_DROP_SEQ_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_STAT_FCOE_RX_DROP_PKT_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_STAT_FCP_RX_PKT_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_STAT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_DEBUG_DROP_PKT_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_DEBUG_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_CACHED_TCE_MNG_INFO_DWORD_ONE_OFFSET(cached_tbl_size)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_CACHED_TCE_MNG_INFO_DWORD_TWO_OFFSET(cached_tbl_size)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_CACHED_TCE_ENTRY_TCE_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_CACHED_TCE_ENTRY_MNG_INFO_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_FCOE_CACHED_TCE_TBL_BIT_MAP_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_DEBUG_CACHED_TCE_WAIT_4_BD_READ_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_DEBUG_CACHED_TCE_WAKE_ANOTHER_THREAD_DATA_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_DEBUG_CACHED_TCE_WAKE_ANOTHER_THREAD_NON_DATA_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_DEBUG_CACHED_TCE_WAKE_ANOTHER_THREAD_ERR_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_DEBUG_CACHED_TCE_GLOBAL_TIMER_TASK_IN_USE_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_DEBUG_CACHED_TCE_DEL_CACHED_TASK_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_DEBUG_CACHED_TCE_SILENT_DROP_CACHED_TASK_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_DEBUG_CACHED_TCE_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_FCOE_DEBUG_CACHED_TCE_SEQ_CNT_ON_DROP_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_FCOE_DEBUG_CACHED_TCE_SEQ_CNT_ON_CRC_ERROR_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_FCOE_DEBUG_CACHED_TCE_SEQ_CNT_ON_ERROR_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_FCOE_DEBUG_CACHED_TCE_PREVIOUS_THREAD_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_FCOE_DEBUG_CACHED_TCE_CRC_ERR_DETECT_DATA_IN_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_FCOE_DEBUG_CACHED_TCE_CRC_ERR_DETECT_READ_TCE_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_FCOE_DEBUG_CACHED_TCE_CRC_ERR_DETECT_DROP_ERR_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_FCOE_DEBUG_PARAMS_ERRORS_NUMBER_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_FCOE_DEBUG_PARAMS_SILENT_DROP_NUMBER_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_FCOE_DEBUG_PARAMS_SILENT_DROP_BITMAP_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_FCOE_DEBUG_PARAMS_ENABLE_CONN_RACE_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_FCOE_DEBUG_PARAMS_TASK_IN_USE_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_FCOE_DEBUG_PARAMS_CRC_ERROR_TASK_IN_USE_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_FCOE_TIMER_PARAM_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_TIMER_ARRAY_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_STAT_FCOE_TX_PKT_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_STAT_FCOE_TX_BYTE_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_STAT_FCP_TX_PKT_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_STAT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_DEBUG_ABTS_BLOCK_SQ_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_DEBUG_CLEANUP_BLOCK_SQ_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_DEBUG_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_STAT_FCOE_VER_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_STAT_FCOE_RX_PKT_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_STAT_FCOE_RX_BYTE_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_STAT_FCOE_RX_DROP_PKT_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_STAT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_PORT_DEBUG_WAIT_FOR_YOUR_TURN_SP_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_PORT_DEBUG_VNTAG_ERROR_PACKETS_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_PORT_DEBUG_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_REORDER_DATA_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_REORDER_WAITING_TABLE_OFFSET
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// TSTORM_WAITING_LIST_SIZE
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_REORDER_WAITING_ENTRY_OFFSET
+};
diff -r 2e9e6572f41c drivers/net/bnx2/bnx2x_57711_int_offsets.h
--- /dev/null
+++ b/drivers/net/bnx2/bnx2x_57711_int_offsets.h
@@ -0,0 +1,380 @@
+static const struct iro e1h_iro_arr[378] = {
+	{     0x40,      0x0,      0x0,      0x0,      0x0},	// COMMON_SB_SIZE
+	{     0x40,      0x0,      0x0,      0x0,      0x0},	// COMMON_SB_DATA_SIZE
+	{     0x28,      0x0,      0x0,      0x0,      0x0},	// COMMON_SP_SB_SIZE
+	{     0x10,      0x0,      0x0,      0x0,      0x0},	// COMMON_SP_SB_DATA_SIZE
+	{     0x40,      0x0,      0x0,      0x0,      0x0},	// COMMON_DYNAMIC_HC_CONFIG_SIZE
+	{     0x10,      0x0,      0x0,      0x0,      0x0},	// COMMON_ASM_ASSERT_MSG_SIZE
+	{      0x8,      0x0,      0x0,      0x0,      0x0},	// COMMON_ASM_ASSERT_INDEX_SIZE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_ASM_INVALID_ASSERT_OPCODE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_RAM1_TEST_EVENT_ID
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_INBOUND_INTERRUPT_TEST_AGG_INT_EVENT_ID
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_INBOUND_INTERRUPT_TEST_AGG_INT_1_OFFSET
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_INBOUND_INTERRUPT_TEST_AGG_INT_2_OFFSET
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_INBOUND_INTERRUPT_TEST_AGG_INT_3_OFFSET
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_INBOUND_INTERRUPT_TEST_AGG_INT_1_RESULT_OFFSET
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_INBOUND_INTERRUPT_TEST_AGG_INT_2_RESULT_OFFSET
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_INBOUND_INTERRUPT_TEST_AGG_INT_3_RESULT_OFFSET
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_INBOUND_INTERRUPT_TEST_AGG_INT_1_MASK
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_INBOUND_INTERRUPT_TEST_AGG_INT_2_MASK
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_INBOUND_INTERRUPT_TEST_AGG_INT_3_MASK
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_KUKU_TEST_AGG_INT
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_KUKU_TEST_EVENTID
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_KUKU_PCI_READ_OPCODE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_KUKU_LOAD_CONTEXT_OPCODE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_KUKU_LOAD_CONTEXT_INCVAL
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_KUKU_LOAD_CONTEXT_REGION
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_KUKU_LOAD_CONTEXT_CID
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_KUKU_LOAD_CONTEXT_RUN_PBF_ECHO_TEST
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_KUKU_QM_PAUSE_OPCODE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_KUKU_TEST_UNUSED_FOCS_SUCCESS_OPCODE_VALUE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_KUKU_TEST_UNUSED_FOCS_OPCODE_VALUE
+	{   0x9000,     0x10,      0x0,      0x0,      0x8},	// XSTORM_SPQ_PAGE_BASE_OFFSET(funcId)
+	{   0x9008,     0x10,      0x0,      0x0,      0x2},	// XSTORM_SPQ_PROD_OFFSET(funcId)
+	{   0x9000,     0x10,      0x0,      0x0,     0x10},	// XSTORM_SPQ_DATA_OFFSET(funcId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_HIGIG_HDR_LENGTH_OFFSET(portId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_VF_SPQ_PAGE_BASE_OFFSET(vfId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_VF_SPQ_PROD_OFFSET(vfId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_VF_SPQ_DATA_OFFSET(vfId)
+	{   0x93b8,      0x1,      0x4,      0x0,      0x1},	// XSTORM_JUMBO_SUPPORT_OFFSET(pfId)
+	{   0x93c0,      0x0,      0x0,      0x0,      0x2},	// XSTORM_COMMON_IP_ID_MASK_OFFSET
+	{   0x93c8,      0x0,      0x0,      0x0,      0x8},	// XSTORM_COMMON_RTC_PARAMS_OFFSET
+	{   0x93cc,      0x0,      0x0,      0x0,      0x2},	// XSTORM_COMMON_RTC_RESOLUTION_OFFSET
+	{   0x93d0,      0x0,      0x0,      0x0,      0x8},	// XSTORM_FW_VERSION_OFFSET
+	{   0x9720,     0x40,      0x0,      0x0,     0x40},	// XSTORM_LICENSE_VALUES_OFFSET(pfId)
+	{   0x93e0,     0x80,      0x0,      0x0,     0x48},	// XSTORM_CMNG_PER_PORT_VARS_OFFSET(portId)
+	{   0x94e0,     0x40,      0x0,      0x0,      0x8},	// XSTORM_RATE_SHAPING_PER_VN_VARS_OFFSET(pfId)
+	{   0x94f0,     0x40,      0x0,      0x0,     0x18},	// XSTORM_FAIRNESS_PER_VN_VARS_OFFSET(pfId)
+	{   0xa000,     0x28,      0x0,      0x0,     0x28},	// XSTORM_PER_QUEUE_STATS_OFFSET(xStatQueueId)
+	{   0xc0c0,      0x8,      0x0,      0x0,      0x1},	// XSTORM_FUNC_EN_OFFSET(funcId)
+	{   0xc0c1,      0x8,      0x0,      0x0,      0x1},	// XSTORM_VF_TO_PF_OFFSET(funcId)
+	{   0xc0c2,      0x8,      0x0,      0x0,      0x1},	// XSTORM_RECORD_SLOW_PATH_OFFSET(funcId)
+	{   0x2008,     0x10,      0x0,      0x0,     0x10},	// XSTORM_ASSERT_LIST_OFFSET(assertListEntry)
+	{   0x2000,      0x0,      0x0,      0x0,      0x8},	// XSTORM_ASSERT_LIST_INDEX_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_TIME_SYNC_TEST_ADDRESS_OFFSET
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// PCI_READ_KUKUE_CODE_OPPCOE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// LOAD_CONTEXT_KUKUE_CODE_OPPCOE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// QM_PAUSE_KUKUE_CODE_OPPCOE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// PAUSE_TEST_XOFF_PORT0_KUKUE_CODE_OPPCOE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// PAUSE_TEST_XON_PORT0_KUKUE_CODE_OPPCOE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// PAUSE_TEST_XOFF_PORT1_KUKUE_CODE_OPPCOE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// PAUSE_TEST_XON_PORT1_KUKUE_CODE_OPPCOE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// TEST_UNUSED_FOCS_KUKUE_CODE_OPPCOE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// PBF_ECHO_KUKUE_CODE_OPPCOE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// TIME_SYNC_PORT0_KUKUE_CODE_OPPCOE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// TIME_SYNC_PORT1_KUKUE_CODE_OPPCOE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// IGU_TEST_KUKUE_CODE_OPPCOE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_AGG_INT_INITIAL_CLEANUP_INDEX
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_AGG_INT_FINAL_CLEANUP_INDEX
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_AGG_INT_FINAL_CLEANUP_COMP_TYPE
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_ERROR_HANDLER_STATISTICS_RAM_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_LB_PHYSICAL_QUEUES_INFO_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_QUEUE_ZONE_OFFSET(queueId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_VF_ZONE_OFFSET(vfId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_FIVE_TUPLE_SRC_EN_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_E2_INTEG_RAM_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_QM_OPPORTUNISTIC_RAM_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_SIDE_INFO_INPUT_LSB_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_E2_INTEG_VLAN_ID_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_E2_INTEG_VLAN_ID_EN_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_VFC_TEST_LINE_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_VFC_TEST_RESULT_OFFSET
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_VFC_OP_GEN_VALUE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_INBOUND_INTERRUPT_TEST_VF_INFO_SIZE_IN_BYTES
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_INBOUND_INTERRUPT_TEST_AGG_INT_1_INDEX
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_INBOUND_INTERRUPT_TEST_AGG_INT_2_INDEX
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_INBOUND_INTERRUPT_TEST_AGG_INT_3_INDEX
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_DPM_BUFFER_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_KUKU_TEST_OPCODE_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_KUKU_LOAD_CONTEXT_TEST_OFFSET
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_KUKU_OP_GEN_VALUE
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_QM_PAUSE_TEST_QUEUE_MASK_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_QM_PAUSE_TEST_GROUP_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_QM_PAUSE_TEST_PORT_OFFSET
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_KUKU_PBF_ECHO_OPCODE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_KUKU_PBF_ECHO_INCVAL
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_KUKU_PBF_ECHO_REGION
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_KUKU_PBF_ECHO_RUN_PBF_ECHO_TEST
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_KUKU_PBF_ECHO_CID
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_KUKU_PBF_ECHO_SUCCESS_VALUE
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_KUKU_TIME_SYNC_FLG_OFFSET(funcId)
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// TSTORM_INDIRECTION_TABLE_ENTRY_SIZE
+	{   0x1ec8,      0x0,      0x0,      0x0,      0x8},	// TSTORM_COMMON_RTC_PARAMS_OFFSET
+	{   0x2008,     0x10,      0x0,      0x0,     0x10},	// TSTORM_ASSERT_LIST_OFFSET(assertListEntry)
+	{   0x2000,      0x0,      0x0,      0x0,      0x8},	// TSTORM_ASSERT_LIST_INDEX_OFFSET
+	{   0xa080,      0x8,      0x0,      0x0,      0x1},	// TSTORM_FUNC_EN_OFFSET(funcId)
+	{   0xa081,      0x8,      0x0,      0x0,      0x1},	// TSTORM_VF_TO_PF_OFFSET(funcId)
+	{   0xa082,      0x8,      0x0,      0x0,      0x1},	// TSTORM_RECORD_SLOW_PATH_OFFSET(funcId)
+	{   0x9070,     0x38,      0x0,      0x0,     0x38},	// TSTORM_PER_QUEUE_STATS_OFFSET(tStatQueueId)
+	{   0x1ed8,      0x0,      0x0,      0x0,      0x2},	// TSTORM_COMMON_SAFC_WORKAROUND_ENABLE_OFFSET
+	{   0x1eda,      0x0,      0x0,      0x0,      0x2},	// TSTORM_COMMON_SAFC_WORKAROUND_TIMEOUT_10USEC_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_ERROR_HANDLER_STATISTICS_RAM_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_VFC_TEST_RSS_KEY_OFFSET(portId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_QUEUE_ZONE_OFFSET(queueId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_VF_ZONE_OFFSET(vfId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_E2_INTEG_RAM_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_LSB_SIDE_BAND_INFO_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_MSB_SIDE_BAND_INFO_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_VFC_TEST_LINE_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_VFC_TEST_RESULT_OFFSET
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// TSTORM_VFC_OP_GEN_VALUE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// TSTORM_INBOUND_INTERRUPT_TEST_VF_INFO_SIZE_IN_BYTES
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// TSTORM_INBOUND_INTERRUPT_TEST_AGG_INT_1_INDEX
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// TSTORM_INBOUND_INTERRUPT_TEST_AGG_INT_2_INDEX
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// TSTORM_INBOUND_INTERRUPT_TEST_AGG_INT_3_INDEX
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_KUKU_TEST_OPCODE_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_KUKU_LOAD_CONTEXT_TEST_OFFSET
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// TSTORM_KUKU_OP_GEN_VALUE
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_PCI_READ_TEST_ADDRESS_LO_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_PCI_READ_TEST_ADDRESS_HI_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_PCI_READ_TEST_RAM_ADDRESS_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_PCI_READ_TEST_PCI_ENTITY_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_TIME_SYNC_TEST_ADDRESS_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_KUKU_NIG_PAUSE_TEST_MASK_OFFSET
+	{   0xc000,     0x40,      0x0,      0x0,     0x40},	// CSTORM_STATUS_BLOCK_OFFSET(sbId)
+	{   0xc800,     0x40,      0x0,      0x0,     0x40},	// CSTORM_STATUS_BLOCK_DATA_OFFSET(sbId)
+	{   0xc82e,     0x40,      0x0,      0x0,      0x1},	// CSTORM_STATUS_BLOCK_DATA_STATE_OFFSET(sbId)
+	{   0xc800,     0x40,      0x2,      0x0,      0x1},	// CSTORM_STATUS_BLOCK_DATA_TIMEOUT_OFFSET(sbId,hcIndex)
+	{   0xc801,     0x40,      0x2,      0x0,      0x0},	// CSTORM_STATUS_BLOCK_DATA_FLAGS_OFFSET(sbId,hcIndex)
+	{   0x8000,     0x40,      0x0,      0x0,     0x40},	// CSTORM_SYNC_BLOCK_OFFSET(sbId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// CSTORM_HC_SYNC_LINE_INDEX_E2_OFFSET(hcIndex,sbId)
+	{   0x8000,      0x8,     0x40,      0x0,      0x4},	// CSTORM_HC_SYNC_LINE_INDEX_E1X_OFFSET(hcIndex,sbId)
+	{   0x8004,      0x8,     0x40,      0x0,      0x4},	// CSTORM_HC_SYNC_LINE_DHC_OFFSET(sbSyncLines,sbId)
+	{   0xb000,     0x28,      0x0,      0x0,     0x28},	// CSTORM_SP_STATUS_BLOCK_OFFSET(pfId)
+	{   0xb140,     0x10,      0x0,      0x0,     0x10},	// CSTORM_SP_STATUS_BLOCK_DATA_OFFSET(pfId)
+	{   0xb14a,     0x10,      0x0,      0x0,      0x1},	// CSTORM_SP_STATUS_BLOCK_DATA_STATE_OFFSET(pfId)
+	{   0x8800,     0x80,      0x0,      0x0,     0x80},	// CSTORM_SP_SYNC_BLOCK_OFFSET(pfId)
+	{   0x8800,      0x8,     0x80,      0x0,      0x2},	// CSTORM_SP_HC_SYNC_LINE_INDEX_OFFSET(hcSpIndex,pfId)
+	{   0x8c00,     0x40,      0x0,      0x0,     0x40},	// CSTORM_DYNAMIC_HC_CONFIG_OFFSET(pfId)
+	{   0x2008,     0x10,      0x0,      0x0,     0x10},	// CSTORM_ASSERT_LIST_OFFSET(assertListEntry)
+	{   0x2000,      0x0,      0x0,      0x0,      0x8},	// CSTORM_ASSERT_LIST_INDEX_OFFSET
+	{   0x1250,      0x8,      0x0,      0x0,      0x1},	// CSTORM_FUNC_EN_OFFSET(funcId)
+	{   0x1251,      0x8,      0x0,      0x0,      0x1},	// CSTORM_VF_TO_PF_OFFSET(funcId)
+	{   0x1252,      0x8,      0x0,      0x0,      0x1},	// CSTORM_RECORD_SLOW_PATH_OFFSET(funcId)
+	{   0x8e00,     0x10,      0x4,      0x0,      0x4},	// CSTORM_BYTE_COUNTER_OFFSET(sbId,dhcIndex)
+	{   0x1290,     0x30,     0x18,      0x0,     0x10},	// CSTORM_EVENT_RING_DATA_OFFSET(pfId)
+	{   0x1298,     0x30,     0x18,      0x0,      0x2},	// CSTORM_EVENT_RING_PROD_OFFSET(pfId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// CSTORM_VF_PF_CHANNEL_STATE_OFFSET(vfId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// CSTORM_VF_PF_CHANNEL_VALID_OFFSET(vfId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// CSTORM_IGU_MODE_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// CSTORM_ERROR_HANDLER_STATISTICS_RAM_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// CSTORM_FINAL_CLEANUP_COMPLETE_OFFSET(funcId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// CSTORM_QUEUE_ZONE_OFFSET(queueId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// CSTORM_VF_ZONE_OFFSET(vfId)
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// CSTORM_INBOUND_INTERRUPT_TEST_VF_INFO_SIZE_IN_BYTES
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// CSTORM_INBOUND_INTERRUPT_TEST_AGG_INT_1_INDEX
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// CSTORM_INBOUND_INTERRUPT_TEST_AGG_INT_2_INDEX
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// CSTORM_INBOUND_INTERRUPT_TEST_AGG_INT_3_INDEX
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// CSTORM_KUKU_TEST_OPCODE_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// CSTORM_KUKU_LOAD_CONTEXT_TEST_OFFSET
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// CSTORM_KUKU_OP_GEN_VALUE
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// CSTORM_IGU_TEST_PF_ID_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// CSTORM_IGU_TEST_VF_ID_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// CSTORM_IGU_TEST_VF_VALID_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// CSTORM_IGU_TEST_ADDRESS_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// CSTORM_IGU_TEST_IGU_COMMAND_OFFSET
+	{   0x8308,     0x80,      0x0,      0x0,     0x80},	// USTORM_INDIRECTION_TABLE_OFFSET(portId)
+	{      0x1,      0x0,      0x0,      0x0,      0x0},	// USTORM_INDIRECTION_TABLE_ENTRY_SIZE
+	{   0x2008,     0x10,      0x0,      0x0,     0x10},	// USTORM_ASSERT_LIST_OFFSET(assertListEntry)
+	{   0x2000,      0x0,      0x0,      0x0,      0x8},	// USTORM_ASSERT_LIST_INDEX_OFFSET
+	{   0x8500,      0x8,      0x0,      0x0,      0x1},	// USTORM_FUNC_EN_OFFSET(funcId)
+	{   0x8501,      0x8,      0x0,      0x0,      0x1},	// USTORM_VF_TO_PF_OFFSET(funcId)
+	{   0x8502,      0x8,      0x0,      0x0,      0x1},	// USTORM_RECORD_SLOW_PATH_OFFSET(funcId)
+	{   0x6000,     0x38,      0x0,      0x0,     0x38},	// USTORM_PER_QUEUE_STATS_OFFSET(uStatQueueId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_MEM_WORKAROUND_ADDRESS_OFFSET(pfId)
+	{   0x8454,      0x8,      0x0,      0x0,      0x2},	// USTORM_ETH_PAUSE_ENABLED_OFFSET(portId)
+	{   0x8456,      0x8,      0x0,      0x0,      0x2},	// USTORM_TOE_PAUSE_ENABLED_OFFSET(portId)
+	{   0x8464,     0x10,      0x0,      0x0,      0x4},	// USTORM_MAX_PAUSE_TIME_USEC_OFFSET(portId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_ERROR_HANDLER_STATISTICS_RAM_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_QUEUE_ZONE_OFFSET(queueId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_VF_ZONE_OFFSET(vfId)
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// USTORM_INBOUND_INTERRUPT_TEST_VF_INFO_SIZE_IN_BYTES
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// USTORM_INBOUND_INTERRUPT_TEST_AGG_INT_1_INDEX
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// USTORM_INBOUND_INTERRUPT_TEST_AGG_INT_2_INDEX
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// USTORM_INBOUND_INTERRUPT_TEST_AGG_INT_3_INDEX
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_KUKU_TEST_OPCODE_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_KUKU_LOAD_CONTEXT_TEST_OFFSET
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// USTORM_KUKU_OP_GEN_VALUE
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_PCI_READ_TEST_ADDRESS_LO_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_PCI_READ_TEST_ADDRESS_HI_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_PCI_READ_TEST_RAM_ADDRESS_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_PCI_READ_TEST_PCI_ENTITY_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_KUKU_NIG_PAUSE_TEST_MASK_OFFSET
+	{   0x3000,     0x40,      0x0,      0x0,      0x8},	// TSTORM_FUNCTION_COMMON_CONFIG_OFFSET(pfId)
+	{   0x3008,     0x40,      0x0,      0x0,     0x20},	// TSTORM_MAC_FILTER_CONFIG_OFFSET(pfId)
+	{   0x3200,     0x20,      0x0,      0x0,     0x20},	// TSTORM_APPROXIMATE_MATCH_MULTICAST_FILTERING_OFFSET(pfId)
+	{   0x37a8,      0x0,      0x0,      0x0,      0x8},	// TSTORM_ACCEPT_CLASSIFY_FAILED_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_CQE_PAGE_NEXT_OFFSET(portId,clientId)
+	{   0xa000,      0x0,      0x0,      0x0,   0x2000},	// USTORM_AGG_DATA_OFFSET
+	{   0x3ec1,      0x0,      0x0,      0x0,      0x1},	// USTORM_TPA_BTR_OFFSET
+	{   0x3ee0,      0x0,      0x0,      0x0,      0x2},	// USTORM_ETH_DYNAMIC_HC_PARAM_OFFSET
+	{   0x1e00,     0xe0,      0x8,      0x0,      0x8},	// USTORM_RX_PRODS_E1X_OFFSET(portId,clientId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_RX_PRODS_E2_OFFSET(qzoneId)
+	{   0x4000,      0x8,      0x0,      0x0,      0x1},	// XSTORM_TCP_GLOBAL_DEL_ACK_COUNTER_ENABLED_OFFSET(portId)
+	{   0x4001,      0x8,      0x0,      0x0,      0x1},	// XSTORM_TCP_GLOBAL_DEL_ACK_COUNTER_MAX_COUNT_OFFSET(portId)
+	{   0x4040,      0x8,      0x4,      0x0,      0x2},	// XSTORM_TCP_IPID_OFFSET(pfId)
+	{   0x4060,      0x8,      0x4,      0x0,      0x4},	// XSTORM_TCP_TX_SWS_TIMER_VAL_OFFSET(pfId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_TCP_TX_SWITCHING_EN_OFFSET(portId)
+	{   0x4000,      0x8,      0x0,      0x0,      0x4},	// TSTORM_TCP_DUPLICATE_ACK_THRESHOLD_OFFSET(pfId)
+	{   0x4004,      0x8,      0x0,      0x0,      0x4},	// TSTORM_TCP_MAX_CWND_OFFSET(pfId)
+	{   0x4040,      0x0,      0x0,      0x0,      0x8},	// TSTORM_TCP_GLOBAL_PARAMS_OFFSET
+	{   0x4048,      0x0,      0x0,      0x0,      0x8},	// TSTORM_TCP_ISLES_ARRAY_DESCRIPTOR_OFFSET
+	{   0x8000,      0x0,      0x0,      0x0,     0x10},	// TSTORM_TCP_ISLES_ARRAY_OFFSET
+	{   0x5040,      0x1,      0x4,      0x0,      0x1},	// XSTORM_TOE_LLC_SNAP_ENABLED_OFFSET(pfId)
+	{   0x5000,      0x0,      0x0,      0x0,     0x20},	// XSTORM_OUT_OCTETS_OFFSET
+	{   0x5008,     0x10,      0x0,      0x0,      0x4},	// TSTORM_TOE_MAX_SEG_RETRANSMIT_OFFSET(pfId)
+	{   0x500c,     0x10,      0x0,      0x0,      0x1},	// TSTORM_TOE_DOUBT_REACHABILITY_OFFSET(pfId)
+	{   0x52c7,      0x0,      0x0,      0x0,      0x1},	// TSTORM_TOE_MAX_DOMINANCE_VALUE_OFFSET
+	{   0x52c6,      0x0,      0x0,      0x0,      0x1},	// TSTORM_TOE_DOMINANCE_THRESHOLD_OFFSET
+	{   0x3000,     0x40,     0x20,      0x0,      0x4},	// CSTORM_TOE_CQ_CONS_PTR_LO_OFFSET(rssId,portId)
+	{   0x3004,     0x40,     0x20,      0x0,      0x4},	// CSTORM_TOE_CQ_CONS_PTR_HI_OFFSET(rssId,portId)
+	{   0x3008,     0x40,     0x20,      0x0,      0x2},	// CSTORM_TOE_CQ_PROD_OFFSET(rssId,portId)
+	{   0x300a,     0x40,     0x20,      0x0,      0x2},	// CSTORM_TOE_CQ_CONS_OFFSET(rssId,portId)
+	{   0x300c,     0x40,     0x20,      0x0,      0x1},	// CSTORM_TOE_CQ_NXT_PAGE_ADDR_VALID_OFFSET(rssId,portId)
+	{   0x300d,     0x40,     0x20,      0x0,      0x1},	// CSTORM_TOE_STATUS_BLOCK_ID_OFFSET(rssId,portId)
+	{   0x300e,     0x40,     0x20,      0x0,      0x1},	// CSTORM_TOE_STATUS_BLOCK_INDEX_OFFSET(rssId,portId)
+	{   0x3010,     0x40,     0x20,      0x0,      0x4},	// CSTORM_TOE_CQ_NEXT_PAGE_BASE_ADDR_LO_OFFSET(rssId,portId)
+	{   0x3014,     0x40,     0x20,      0x0,      0x4},	// CSTORM_TOE_CQ_NEXT_PAGE_BASE_ADDR_HI_OFFSET(rssId,portId)
+	{   0x3018,     0x40,     0x20,      0x0,      0x4},	// CSTORM_TOE_DYNAMIC_HC_PROD_OFFSET(rssId,portId)
+	{   0x301c,     0x40,     0x20,      0x0,      0x4},	// CSTORM_TOE_DYNAMIC_HC_CONS_OFFSET(rssId,portId)
+	{   0x5000,    0x100,     0x80,      0x8,      0x4},	// USTORM_GRQ_CACHE_BD_LO_OFFSET(rssId,portId,grqBdId)
+	{   0x5004,    0x100,     0x80,      0x8,      0x4},	// USTORM_GRQ_CACHE_BD_HI_OFFSET(rssId,portId,grqBdId)
+	{      0xa,      0x0,      0x0,      0x0,      0x0},	// USTORM_TOE_GRQ_CACHE_NUM_BDS
+	{   0x5068,    0x100,     0x80,      0x0,      0x1},	// USTORM_TOE_GRQ_LOCAL_PROD_OFFSET(rssId,portId)
+	{   0x5069,    0x100,     0x80,      0x0,      0x1},	// USTORM_TOE_GRQ_LOCAL_CONS_OFFSET(rssId,portId)
+	{   0x506c,    0x100,     0x80,      0x0,      0x2},	// USTORM_TOE_GRQ_CONS_OFFSET(rssId,portId)
+	{   0x506e,    0x100,     0x80,      0x0,      0x2},	// USTORM_TOE_GRQ_PROD_OFFSET(rssId,portId)
+	{   0x5070,    0x100,     0x80,      0x0,      0x4},	// USTORM_TOE_GRQ_CONS_PTR_LO_OFFSET(rssId,portId)
+	{   0x5074,    0x100,     0x80,      0x0,      0x4},	// USTORM_TOE_GRQ_CONS_PTR_HI_OFFSET(rssId,portId)
+	{   0x5066,    0x100,     0x80,      0x0,      0x2},	// USTORM_TOE_GRQ_BUF_SIZE_OFFSET(rssId,portId)
+	{   0x5064,    0x100,     0x80,      0x0,      0x1},	// USTORM_TOE_CQ_NXT_PAGE_ADDR_VALID_OFFSET(rssId,portId)
+	{   0x5060,    0x100,     0x80,      0x0,      0x2},	// USTORM_TOE_CQ_CONS_OFFSET(rssId,portId)
+	{   0x5062,    0x100,     0x80,      0x0,      0x2},	// USTORM_TOE_CQ_PROD_OFFSET(rssId,portId)
+	{   0x5050,    0x100,     0x80,      0x0,      0x4},	// USTORM_TOE_CQ_NEXT_PAGE_BASE_ADDR_LO_OFFSET(rssId,portId)
+	{   0x5054,    0x100,     0x80,      0x0,      0x4},	// USTORM_TOE_CQ_NEXT_PAGE_BASE_ADDR_HI_OFFSET(rssId,portId)
+	{   0x5058,    0x100,     0x80,      0x0,      0x4},	// USTORM_TOE_CQ_CONS_PTR_LO_OFFSET(rssId,portId)
+	{   0x505c,    0x100,     0x80,      0x0,      0x4},	// USTORM_TOE_CQ_CONS_PTR_HI_OFFSET(rssId,portId)
+	{   0x507c,    0x100,     0x80,      0x0,      0x1},	// USTORM_TOE_STATUS_BLOCK_ID_OFFSET(rssId,portId)
+	{   0x507d,    0x100,     0x80,      0x0,      0x1},	// USTORM_TOE_STATUS_BLOCK_INDEX_OFFSET(rssId,portId)
+	{   0x4018,     0x10,      0x0,      0x0,      0x4},	// USTORM_TOE_TCP_PUSH_TIMER_TICKS_OFFSET(pfId)
+	{   0x4090,     0x10,      0x0,      0x0,      0x4},	// USTORM_TOE_GRQ_XOFF_COUNTER_OFFSET(pfId)
+	{   0x4098,     0x10,      0x0,      0x0,      0x4},	// USTORM_TOE_RCQ_XOFF_COUNTER_OFFSET(pfId)
+	{   0x4110,      0x0,      0x0,      0x0,      0x2},	// USTORM_TOE_CQ_THR_LOW_OFFSET
+	{   0x4112,      0x0,      0x0,      0x0,      0x2},	// USTORM_TOE_GRQ_THR_LOW_OFFSET
+	{   0x4114,      0x0,      0x0,      0x0,      0x2},	// USTORM_TOE_CQ_THR_HIGH_OFFSET
+	{   0x4116,      0x0,      0x0,      0x0,      0x2},	// USTORM_TOE_GRQ_THR_HIGH_OFFSET
+	{   0x6040,      0x8,      0x0,      0x0,      0x2},	// TSTORM_ISCSI_TCP_VARS_FLAGS_OFFSET(pfId)
+	{   0x6042,      0x8,      0x0,      0x0,      0x2},	// TSTORM_ISCSI_TCP_VARS_LSB_LOCAL_MAC_ADDR_OFFSET(pfId)
+	{   0x6044,      0x8,      0x0,      0x0,      0x2},	// TSTORM_ISCSI_TCP_VARS_MID_LOCAL_MAC_ADDR_OFFSET(pfId)
+	{   0x6046,      0x8,      0x0,      0x0,      0x2},	// TSTORM_ISCSI_TCP_VARS_MSB_LOCAL_MAC_ADDR_OFFSET(pfId)
+	{   0x6080,      0x8,      0x0,      0x0,      0x8},	// TSTORM_ISCSI_RQ_SIZE_OFFSET(pfId)
+	{   0x6000,      0x8,      0x0,      0x0,      0x2},	// TSTORM_ISCSI_PAGE_SIZE_OFFSET(pfId)
+	{   0x6002,      0x8,      0x0,      0x0,      0x1},	// TSTORM_ISCSI_PAGE_SIZE_LOG_OFFSET(pfId)
+	{   0x6004,      0x8,      0x0,      0x0,      0x2},	// TSTORM_ISCSI_NUM_OF_TASKS_OFFSET(pfId)
+	{   0x60c0,      0x8,      0x0,      0x0,      0x8},	// TSTORM_ISCSI_ERROR_BITMAP_OFFSET(pfId)
+	{   0x6100,      0x8,      0x0,      0x0,      0x4},	// TSTORM_ISCSI_L2_ISCSI_OOO_CID_TABLE_OFFSET(pfId)
+	{   0x6104,      0x8,      0x0,      0x0,      0x1},	// TSTORM_ISCSI_L2_ISCSI_OOO_CLIENT_ID_TABLE_OFFSET(pfId)
+	{   0x6140,      0x8,      0x0,      0x0,      0x2},	// TSTORM_ISCSI_L2_ISCSI_OOO_PROD_OFFSET(pfId)
+	{   0x6144,      0x8,      0x0,      0x0,      0x2},	// TSTORM_ISCSI_L2_ISCSI_OOO_RX_BDS_THRSHLD_OFFSET(pfId)
+	{   0x6180,      0x8,      0x0,      0x0,      0x4},	// TSTORM_ISCSI_TCP_LOCAL_ADV_WND_OFFSET(pfId)
+	{   0x7000,      0x8,      0x0,      0x0,      0x2},	// USTORM_ISCSI_PAGE_SIZE_OFFSET(pfId)
+	{   0x7002,      0x8,      0x0,      0x0,      0x1},	// USTORM_ISCSI_PAGE_SIZE_LOG_OFFSET(pfId)
+	{   0x7004,      0x8,      0x0,      0x0,      0x2},	// USTORM_ISCSI_NUM_OF_TASKS_OFFSET(pfId)
+	{   0x7040,      0x8,      0x0,      0x0,      0x2},	// USTORM_ISCSI_R2TQ_SIZE_OFFSET(pfId)
+	{   0x7044,      0x8,      0x0,      0x0,      0x2},	// USTORM_ISCSI_CQ_SIZE_OFFSET(pfId)
+	{   0x7046,      0x8,      0x0,      0x0,      0x2},	// USTORM_ISCSI_CQ_SQN_SIZE_OFFSET(pfId)
+	{   0x7660,      0x8,      0x0,      0x0,      0x8},	// USTORM_ISCSI_GLOBAL_BUF_PHYS_ADDR_OFFSET(pfId)
+	{   0x7080,      0x8,      0x0,      0x0,      0x2},	// USTORM_ISCSI_RQ_BUFFER_SIZE_OFFSET(pfId)
+	{   0x7084,      0x8,      0x0,      0x0,      0x2},	// USTORM_ISCSI_RQ_SIZE_OFFSET(pfId)
+	{   0x76a0,      0x8,      0x0,      0x0,      0x8},	// USTORM_ISCSI_ERROR_BITMAP_OFFSET(pfId)
+	{   0x8040,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_TCP_VARS_TTL_OFFSET(pfId)
+	{   0x8041,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_TCP_VARS_TOS_OFFSET(pfId)
+	{   0x8042,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_TCP_VARS_FLAGS_OFFSET(pfId)
+	{   0x8043,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_TCP_VARS_ADV_WND_SCL_OFFSET(pfId)
+	{   0x8000,      0x8,      0x0,      0x0,      0x2},	// XSTORM_ISCSI_PAGE_SIZE_OFFSET(pfId)
+	{   0x8002,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_PAGE_SIZE_LOG_OFFSET(pfId)
+	{   0x8004,      0x8,      0x0,      0x0,      0x2},	// XSTORM_ISCSI_NUM_OF_TASKS_OFFSET(pfId)
+	{   0x80c0,      0x8,      0x0,      0x0,      0x2},	// XSTORM_ISCSI_HQ_SIZE_OFFSET(pfId)
+	{   0x80c2,      0x8,      0x0,      0x0,      0x2},	// XSTORM_ISCSI_SQ_SIZE_OFFSET(pfId)
+	{   0x80c4,      0x8,      0x0,      0x0,      0x2},	// XSTORM_ISCSI_R2TQ_SIZE_OFFSET(pfId)
+	{   0x8080,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_LOCAL_MAC_ADDR0_OFFSET(pfId)
+	{   0x8081,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_LOCAL_MAC_ADDR1_OFFSET(pfId)
+	{   0x8082,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_LOCAL_MAC_ADDR2_OFFSET(pfId)
+	{   0x8083,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_LOCAL_MAC_ADDR3_OFFSET(pfId)
+	{   0x8084,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_LOCAL_MAC_ADDR4_OFFSET(pfId)
+	{   0x8085,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_LOCAL_MAC_ADDR5_OFFSET(pfId)
+	{   0x8086,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_LOCAL_VLAN_OFFSET(pfId)
+	{   0x6000,      0x8,      0x0,      0x0,      0x2},	// CSTORM_ISCSI_PAGE_SIZE_OFFSET(pfId)
+	{   0x6002,      0x8,      0x0,      0x0,      0x1},	// CSTORM_ISCSI_PAGE_SIZE_LOG_OFFSET(pfId)
+	{   0x6004,      0x8,      0x0,      0x0,      0x2},	// CSTORM_ISCSI_NUM_OF_TASKS_OFFSET(pfId)
+	{   0x6042,     0xc0,     0x18,      0x0,      0x2},	// CSTORM_ISCSI_EQ_PROD_OFFSET(pfId,iscsiEqId)
+	{   0x6040,     0xc0,     0x18,      0x0,      0x2},	// CSTORM_ISCSI_EQ_CONS_OFFSET(pfId,iscsiEqId)
+	{   0x604c,     0xc0,     0x18,      0x0,      0x8},	// CSTORM_ISCSI_EQ_NEXT_PAGE_ADDR_OFFSET(pfId,iscsiEqId)
+	{   0x6044,     0xc0,     0x18,      0x0,      0x8},	// CSTORM_ISCSI_EQ_NEXT_EQE_ADDR_OFFSET(pfId,iscsiEqId)
+	{   0x6057,     0xc0,     0x18,      0x0,      0x1},	// CSTORM_ISCSI_EQ_NEXT_PAGE_ADDR_VALID_OFFSET(pfId,iscsiEqId)
+	{   0x6054,     0xc0,     0x18,      0x0,      0x2},	// CSTORM_ISCSI_EQ_SB_NUM_OFFSET(pfId,iscsiEqId)
+	{   0x6056,     0xc0,     0x18,      0x0,      0x1},	// CSTORM_ISCSI_EQ_SB_INDEX_OFFSET(pfId,iscsiEqId)
+	{   0x6640,      0x8,      0x0,      0x0,      0x8},	// CSTORM_ISCSI_HQ_SIZE_OFFSET(pfId)
+	{   0x6680,      0x8,      0x0,      0x0,      0x8},	// CSTORM_ISCSI_CQ_SIZE_OFFSET(pfId)
+	{   0x66c0,      0x8,      0x0,      0x0,      0x8},	// CSTORM_ISCSI_CQ_SQN_SIZE_OFFSET(pfId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_FCOE_EQ_PROD_OFFSET(pfId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_FCOE_TIMER_PARAM_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_TIMER_ARRAY_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_STAT_FC_CRC_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_STAT_EOFA_DEL_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_STAT_MISS_FRAME_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_STAT_SEQ_TIMEOUT_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_STAT_DROP_SEQ_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_STAT_FCOE_RX_DROP_PKT_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_STAT_FCP_RX_PKT_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_STAT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_DEBUG_DROP_PKT_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_DEBUG_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_CACHED_TCE_MNG_INFO_DWORD_ONE_OFFSET(cached_tbl_size)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_CACHED_TCE_MNG_INFO_DWORD_TWO_OFFSET(cached_tbl_size)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_CACHED_TCE_ENTRY_TCE_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_CACHED_TCE_ENTRY_MNG_INFO_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_FCOE_CACHED_TCE_TBL_BIT_MAP_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_DEBUG_CACHED_TCE_WAIT_4_BD_READ_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_DEBUG_CACHED_TCE_WAKE_ANOTHER_THREAD_DATA_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_DEBUG_CACHED_TCE_WAKE_ANOTHER_THREAD_NON_DATA_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_DEBUG_CACHED_TCE_WAKE_ANOTHER_THREAD_ERR_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_DEBUG_CACHED_TCE_GLOBAL_TIMER_TASK_IN_USE_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_DEBUG_CACHED_TCE_DEL_CACHED_TASK_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_DEBUG_CACHED_TCE_SILENT_DROP_CACHED_TASK_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_DEBUG_CACHED_TCE_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_FCOE_DEBUG_CACHED_TCE_SEQ_CNT_ON_DROP_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_FCOE_DEBUG_CACHED_TCE_SEQ_CNT_ON_CRC_ERROR_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_FCOE_DEBUG_CACHED_TCE_SEQ_CNT_ON_ERROR_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_FCOE_DEBUG_CACHED_TCE_PREVIOUS_THREAD_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_FCOE_DEBUG_CACHED_TCE_CRC_ERR_DETECT_DATA_IN_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_FCOE_DEBUG_CACHED_TCE_CRC_ERR_DETECT_READ_TCE_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_FCOE_DEBUG_CACHED_TCE_CRC_ERR_DETECT_DROP_ERR_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_FCOE_DEBUG_PARAMS_ERRORS_NUMBER_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_FCOE_DEBUG_PARAMS_SILENT_DROP_NUMBER_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_FCOE_DEBUG_PARAMS_SILENT_DROP_BITMAP_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_FCOE_DEBUG_PARAMS_ENABLE_CONN_RACE_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_FCOE_DEBUG_PARAMS_TASK_IN_USE_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_FCOE_DEBUG_PARAMS_CRC_ERROR_TASK_IN_USE_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_FCOE_TIMER_PARAM_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_TIMER_ARRAY_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_STAT_FCOE_TX_PKT_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_STAT_FCOE_TX_BYTE_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_STAT_FCP_TX_PKT_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_STAT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_DEBUG_ABTS_BLOCK_SQ_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_DEBUG_CLEANUP_BLOCK_SQ_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_DEBUG_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_STAT_FCOE_VER_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_STAT_FCOE_RX_PKT_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_STAT_FCOE_RX_BYTE_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_STAT_FCOE_RX_DROP_PKT_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_STAT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_PORT_DEBUG_WAIT_FOR_YOUR_TURN_SP_CNT_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_PORT_DEBUG_VNTAG_ERROR_PACKETS_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_PORT_DEBUG_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_REORDER_DATA_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_REORDER_WAITING_TABLE_OFFSET
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// TSTORM_WAITING_LIST_SIZE
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_REORDER_WAITING_ENTRY_OFFSET
+};
diff -r 2e9e6572f41c drivers/net/bnx2/bnx2x_57712_int_offsets.h
--- /dev/null
+++ b/drivers/net/bnx2/bnx2x_57712_int_offsets.h
@@ -0,0 +1,380 @@
+static const struct iro e2_iro_arr[378] = {
+	{     0x40,      0x0,      0x0,      0x0,      0x0},	// COMMON_SB_SIZE
+	{     0x40,      0x0,      0x0,      0x0,      0x0},	// COMMON_SB_DATA_SIZE
+	{     0x28,      0x0,      0x0,      0x0,      0x0},	// COMMON_SP_SB_SIZE
+	{     0x10,      0x0,      0x0,      0x0,      0x0},	// COMMON_SP_SB_DATA_SIZE
+	{     0x40,      0x0,      0x0,      0x0,      0x0},	// COMMON_DYNAMIC_HC_CONFIG_SIZE
+	{     0x10,      0x0,      0x0,      0x0,      0x0},	// COMMON_ASM_ASSERT_MSG_SIZE
+	{      0x8,      0x0,      0x0,      0x0,      0x0},	// COMMON_ASM_ASSERT_INDEX_SIZE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_ASM_INVALID_ASSERT_OPCODE
+	{     0x3d,      0x0,      0x0,      0x0,      0x0},	// COMMON_RAM1_TEST_EVENT_ID
+	{     0x3c,      0x0,      0x0,      0x0,      0x0},	// COMMON_INBOUND_INTERRUPT_TEST_AGG_INT_EVENT_ID
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_INBOUND_INTERRUPT_TEST_AGG_INT_1_OFFSET
+	{      0x8,      0x0,      0x0,      0x0,      0x0},	// COMMON_INBOUND_INTERRUPT_TEST_AGG_INT_2_OFFSET
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_INBOUND_INTERRUPT_TEST_AGG_INT_3_OFFSET
+	{      0xc,      0x0,      0x0,      0x0,      0x0},	// COMMON_INBOUND_INTERRUPT_TEST_AGG_INT_1_RESULT_OFFSET
+	{      0xe,      0x0,      0x0,      0x0,      0x0},	// COMMON_INBOUND_INTERRUPT_TEST_AGG_INT_2_RESULT_OFFSET
+	{      0x4,      0x0,      0x0,      0x0,      0x0},	// COMMON_INBOUND_INTERRUPT_TEST_AGG_INT_3_RESULT_OFFSET
+	{     0x18,      0x0,      0x0,      0x0,      0x0},	// COMMON_INBOUND_INTERRUPT_TEST_AGG_INT_1_MASK
+	{     0x1c,      0x0,      0x0,      0x0,      0x0},	// COMMON_INBOUND_INTERRUPT_TEST_AGG_INT_2_MASK
+	{     0x1c,      0x0,      0x0,      0x0,      0x0},	// COMMON_INBOUND_INTERRUPT_TEST_AGG_INT_3_MASK
+	{     0x13,      0x0,      0x0,      0x0,      0x0},	// COMMON_KUKU_TEST_AGG_INT
+	{     0x3e,      0x0,      0x0,      0x0,      0x0},	// COMMON_KUKU_TEST_EVENTID
+	{      0x1,      0x0,      0x0,      0x0,      0x0},	// COMMON_KUKU_PCI_READ_OPCODE
+	{      0x2,      0x0,      0x0,      0x0,      0x0},	// COMMON_KUKU_LOAD_CONTEXT_OPCODE
+	{      0x1,      0x0,      0x0,      0x0,      0x0},	// COMMON_KUKU_LOAD_CONTEXT_INCVAL
+	{     0x10,      0x0,      0x0,      0x0,      0x0},	// COMMON_KUKU_LOAD_CONTEXT_REGION
+	{     0x50,      0x0,      0x0,      0x0,      0x0},	// COMMON_KUKU_LOAD_CONTEXT_CID
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// COMMON_KUKU_LOAD_CONTEXT_RUN_PBF_ECHO_TEST
+	{      0x3,      0x0,      0x0,      0x0,      0x0},	// COMMON_KUKU_QM_PAUSE_OPCODE
+	{     0xab,      0x0,      0x0,      0x0,      0x0},	// COMMON_KUKU_TEST_UNUSED_FOCS_SUCCESS_OPCODE_VALUE
+	{      0x8,      0x0,      0x0,      0x0,      0x0},	// COMMON_KUKU_TEST_UNUSED_FOCS_OPCODE_VALUE
+	{   0xc000,     0x10,      0x0,      0x0,      0x8},	// XSTORM_SPQ_PAGE_BASE_OFFSET(funcId)
+	{   0xc008,     0x10,      0x0,      0x0,      0x2},	// XSTORM_SPQ_PROD_OFFSET(funcId)
+	{   0xc000,     0x10,      0x0,      0x0,     0x10},	// XSTORM_SPQ_DATA_OFFSET(funcId)
+	{   0x9c08,      0x4,      0x0,      0x0,      0x4},	// XSTORM_HIGIG_HDR_LENGTH_OFFSET(portId)
+	{   0xc080,     0x10,      0x0,      0x0,      0x4},	// XSTORM_VF_SPQ_PAGE_BASE_OFFSET(vfId)
+	{   0xc088,     0x10,      0x0,      0x0,      0x2},	// XSTORM_VF_SPQ_PROD_OFFSET(vfId)
+	{   0xc080,     0x10,      0x0,      0x0,     0x10},	// XSTORM_VF_SPQ_DATA_OFFSET(vfId)
+	{   0x9338,      0x1,      0x4,      0x0,      0x1},	// XSTORM_JUMBO_SUPPORT_OFFSET(pfId)
+	{   0x9340,      0x0,      0x0,      0x0,      0x2},	// XSTORM_COMMON_IP_ID_MASK_OFFSET
+	{   0x9348,      0x0,      0x0,      0x0,      0x8},	// XSTORM_COMMON_RTC_PARAMS_OFFSET
+	{   0x934c,      0x0,      0x0,      0x0,      0x2},	// XSTORM_COMMON_RTC_RESOLUTION_OFFSET
+	{   0x9350,      0x0,      0x0,      0x0,      0x8},	// XSTORM_FW_VERSION_OFFSET
+	{   0x9698,     0x40,      0x0,      0x0,     0x40},	// XSTORM_LICENSE_VALUES_OFFSET(pfId)
+	{   0x9358,     0x80,      0x0,      0x0,     0x48},	// XSTORM_CMNG_PER_PORT_VARS_OFFSET(portId)
+	{   0x9458,     0x40,      0x0,      0x0,      0x8},	// XSTORM_RATE_SHAPING_PER_VN_VARS_OFFSET(pfId)
+	{   0x9468,     0x40,      0x0,      0x0,     0x18},	// XSTORM_FAIRNESS_PER_VN_VARS_OFFSET(pfId)
+	{  0x63010,     0x28,      0x0,      0x0,     0x28},	// XSTORM_PER_QUEUE_STATS_OFFSET(xStatQueueId)
+	{   0x9950,      0x8,      0x0,      0x0,      0x1},	// XSTORM_FUNC_EN_OFFSET(funcId)
+	{   0x9951,      0x8,      0x0,      0x0,      0x1},	// XSTORM_VF_TO_PF_OFFSET(funcId)
+	{   0x9952,      0x8,      0x0,      0x0,      0x1},	// XSTORM_RECORD_SLOW_PATH_OFFSET(funcId)
+	{   0x2008,     0x10,      0x0,      0x0,     0x10},	// XSTORM_ASSERT_LIST_OFFSET(assertListEntry)
+	{   0x2000,      0x0,      0x0,      0x0,      0x8},	// XSTORM_ASSERT_LIST_INDEX_OFFSET
+	{   0x9bb8,      0x0,      0x0,      0x0,      0x8},	// XSTORM_TIME_SYNC_TEST_ADDRESS_OFFSET
+	{      0x1,      0x0,      0x0,      0x0,      0x0},	// PCI_READ_KUKUE_CODE_OPPCOE
+	{      0x2,      0x0,      0x0,      0x0,      0x0},	// LOAD_CONTEXT_KUKUE_CODE_OPPCOE
+	{      0x3,      0x0,      0x0,      0x0,      0x0},	// QM_PAUSE_KUKUE_CODE_OPPCOE
+	{      0x4,      0x0,      0x0,      0x0,      0x0},	// PAUSE_TEST_XOFF_PORT0_KUKUE_CODE_OPPCOE
+	{      0x5,      0x0,      0x0,      0x0,      0x0},	// PAUSE_TEST_XON_PORT0_KUKUE_CODE_OPPCOE
+	{      0x6,      0x0,      0x0,      0x0,      0x0},	// PAUSE_TEST_XOFF_PORT1_KUKUE_CODE_OPPCOE
+	{      0x7,      0x0,      0x0,      0x0,      0x0},	// PAUSE_TEST_XON_PORT1_KUKUE_CODE_OPPCOE
+	{      0x8,      0x0,      0x0,      0x0,      0x0},	// TEST_UNUSED_FOCS_KUKUE_CODE_OPPCOE
+	{      0x9,      0x0,      0x0,      0x0,      0x0},	// PBF_ECHO_KUKUE_CODE_OPPCOE
+	{      0xa,      0x0,      0x0,      0x0,      0x0},	// TIME_SYNC_PORT0_KUKUE_CODE_OPPCOE
+	{      0xb,      0x0,      0x0,      0x0,      0x0},	// TIME_SYNC_PORT1_KUKUE_CODE_OPPCOE
+	{      0xc,      0x0,      0x0,      0x0,      0x0},	// IGU_TEST_KUKUE_CODE_OPPCOE
+	{      0x1,      0x0,      0x0,      0x0,      0x0},	// XSTORM_AGG_INT_INITIAL_CLEANUP_INDEX
+	{      0x9,      0x0,      0x0,      0x0,      0x0},	// XSTORM_AGG_INT_FINAL_CLEANUP_INDEX
+	{      0x2,      0x0,      0x0,      0x0,      0x0},	// XSTORM_AGG_INT_FINAL_CLEANUP_COMP_TYPE
+	{   0xc4c0,      0x0,      0x0,      0x0,     0x20},	// XSTORM_ERROR_HANDLER_STATISTICS_RAM_OFFSET
+	{   0xc4e6,      0x0,      0x0,      0x0,      0x1},	// XSTORM_LB_PHYSICAL_QUEUES_INFO_OFFSET
+	{   0x6000,     0x20,      0x0,      0x0,     0x20},	// XSTORM_QUEUE_ZONE_OFFSET(queueId)
+	{   0x7300,      0x8,      0x0,      0x0,      0x8},	// XSTORM_VF_ZONE_OFFSET(vfId)
+	{   0x9bf0,      0x0,      0x0,      0x0,      0x1},	// XSTORM_FIVE_TUPLE_SRC_EN_OFFSET
+	{   0x9b90,      0x0,      0x0,      0x0,      0x8},	// XSTORM_E2_INTEG_RAM_OFFSET
+	{   0x9b93,      0x0,      0x0,      0x0,      0x1},	// XSTORM_QM_OPPORTUNISTIC_RAM_OFFSET
+	{   0x9b91,      0x0,      0x0,      0x0,      0x1},	// XSTORM_SIDE_INFO_INPUT_LSB_OFFSET
+	{   0x9b96,      0x0,      0x0,      0x0,      0x1},	// XSTORM_E2_INTEG_VLAN_ID_OFFSET
+	{   0x9b97,      0x0,      0x0,      0x0,      0x0},	// XSTORM_E2_INTEG_VLAN_ID_EN_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_VFC_TEST_LINE_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// XSTORM_VFC_TEST_RESULT_OFFSET
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_VFC_OP_GEN_VALUE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_INBOUND_INTERRUPT_TEST_VF_INFO_SIZE_IN_BYTES
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_INBOUND_INTERRUPT_TEST_AGG_INT_1_INDEX
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_INBOUND_INTERRUPT_TEST_AGG_INT_2_INDEX
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// XSTORM_INBOUND_INTERRUPT_TEST_AGG_INT_3_INDEX
+	{  0x60000,      0x0,      0x0,      0x0,     0x20},	// XSTORM_DPM_BUFFER_OFFSET
+	{   0x9b98,      0x0,      0x0,      0x0,      0x1},	// XSTORM_KUKU_TEST_OPCODE_OFFSET
+	{   0x9bd8,      0x0,      0x0,      0x0,      0x8},	// XSTORM_KUKU_LOAD_CONTEXT_TEST_OFFSET
+	{     0x53,      0x0,      0x0,      0x0,      0x0},	// XSTORM_KUKU_OP_GEN_VALUE
+	{   0x9be0,      0x0,      0x0,      0x0,      0x2},	// XSTORM_QM_PAUSE_TEST_QUEUE_MASK_OFFSET
+	{   0x9be4,      0x0,      0x0,      0x0,      0x1},	// XSTORM_QM_PAUSE_TEST_GROUP_OFFSET
+	{   0x9be5,      0x0,      0x0,      0x0,      0x1},	// XSTORM_QM_PAUSE_TEST_PORT_OFFSET
+	{      0x9,      0x0,      0x0,      0x0,      0x0},	// XSTORM_KUKU_PBF_ECHO_OPCODE
+	{      0x1,      0x0,      0x0,      0x0,      0x0},	// XSTORM_KUKU_PBF_ECHO_INCVAL
+	{     0x44,      0x0,      0x0,      0x0,      0x0},	// XSTORM_KUKU_PBF_ECHO_REGION
+	{      0x1,      0x0,      0x0,      0x0,      0x0},	// XSTORM_KUKU_PBF_ECHO_RUN_PBF_ECHO_TEST
+	{     0x50,      0x0,      0x0,      0x0,      0x0},	// XSTORM_KUKU_PBF_ECHO_CID
+	{     0x89,      0x0,      0x0,      0x0,      0x0},	// XSTORM_KUKU_PBF_ECHO_SUCCESS_VALUE
+	{   0x9953,      0x8,      0x0,      0x0,      0x1},	// XSTORM_KUKU_TIME_SYNC_FLG_OFFSET(funcId)
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// TSTORM_INDIRECTION_TABLE_ENTRY_SIZE
+	{   0x16c8,      0x0,      0x0,      0x0,      0x8},	// TSTORM_COMMON_RTC_PARAMS_OFFSET
+	{   0x2008,     0x10,      0x0,      0x0,     0x10},	// TSTORM_ASSERT_LIST_OFFSET(assertListEntry)
+	{   0x2000,      0x0,      0x0,      0x0,      0x8},	// TSTORM_ASSERT_LIST_INDEX_OFFSET
+	{   0x17d0,      0x8,      0x0,      0x0,      0x1},	// TSTORM_FUNC_EN_OFFSET(funcId)
+	{   0x17d1,      0x8,      0x0,      0x0,      0x1},	// TSTORM_VF_TO_PF_OFFSET(funcId)
+	{   0x17d2,      0x8,      0x0,      0x0,      0x1},	// TSTORM_RECORD_SLOW_PATH_OFFSET(funcId)
+	{  0x62078,     0x38,      0x0,      0x0,     0x38},	// TSTORM_PER_QUEUE_STATS_OFFSET(tStatQueueId)
+	{   0x16e0,      0x0,      0x0,      0x0,      0x2},	// TSTORM_COMMON_SAFC_WORKAROUND_ENABLE_OFFSET
+	{   0x16e2,      0x0,      0x0,      0x0,      0x2},	// TSTORM_COMMON_SAFC_WORKAROUND_TIMEOUT_10USEC_OFFSET
+	{   0xa040,      0x0,      0x0,      0x0,     0x20},	// TSTORM_ERROR_HANDLER_STATISTICS_RAM_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_VFC_TEST_RSS_KEY_OFFSET(portId)
+	{   0xe000,     0x20,      0x0,      0x0,     0x20},	// TSTORM_QUEUE_ZONE_OFFSET(queueId)
+	{   0xf300,      0x8,      0x0,      0x0,      0x8},	// TSTORM_VF_ZONE_OFFSET(vfId)
+	{   0x16f8,      0x0,      0x0,      0x0,     0xd8},	// TSTORM_E2_INTEG_RAM_OFFSET
+	{   0x173f,      0x0,      0x0,      0x0,      0x1},	// TSTORM_LSB_SIDE_BAND_INFO_OFFSET
+	{   0x1717,      0x0,      0x0,      0x0,      0x1},	// TSTORM_MSB_SIDE_BAND_INFO_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_VFC_TEST_LINE_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_VFC_TEST_RESULT_OFFSET
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// TSTORM_VFC_OP_GEN_VALUE
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// TSTORM_INBOUND_INTERRUPT_TEST_VF_INFO_SIZE_IN_BYTES
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// TSTORM_INBOUND_INTERRUPT_TEST_AGG_INT_1_INDEX
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// TSTORM_INBOUND_INTERRUPT_TEST_AGG_INT_2_INDEX
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// TSTORM_INBOUND_INTERRUPT_TEST_AGG_INT_3_INDEX
+	{   0x1778,      0x0,      0x0,      0x0,      0x1},	// TSTORM_KUKU_TEST_OPCODE_OFFSET
+	{   0x17b8,      0x0,      0x0,      0x0,      0x8},	// TSTORM_KUKU_LOAD_CONTEXT_TEST_OFFSET
+	{     0x51,      0x0,      0x0,      0x0,      0x0},	// TSTORM_KUKU_OP_GEN_VALUE
+	{   0x17a0,      0x0,      0x0,      0x0,      0x4},	// TSTORM_PCI_READ_TEST_ADDRESS_LO_OFFSET
+	{   0x17a4,      0x0,      0x0,      0x0,      0x4},	// TSTORM_PCI_READ_TEST_ADDRESS_HI_OFFSET
+	{   0x17a8,      0x0,      0x0,      0x0,      0x4},	// TSTORM_PCI_READ_TEST_RAM_ADDRESS_OFFSET
+	{   0x17ac,      0x0,      0x0,      0x0,      0x8},	// TSTORM_PCI_READ_TEST_PCI_ENTITY_OFFSET
+	{   0x1798,      0x0,      0x0,      0x0,      0x8},	// TSTORM_TIME_SYNC_TEST_ADDRESS_OFFSET
+	{   0x17c8,      0x0,      0x0,      0x0,      0x2},	// TSTORM_KUKU_NIG_PAUSE_TEST_MASK_OFFSET
+	{  0x60000,     0x40,      0x0,      0x0,     0x40},	// CSTORM_STATUS_BLOCK_OFFSET(sbId)
+	{   0xc000,     0x40,      0x0,      0x0,     0x40},	// CSTORM_STATUS_BLOCK_DATA_OFFSET(sbId)
+	{   0xc02e,     0x40,      0x0,      0x0,      0x1},	// CSTORM_STATUS_BLOCK_DATA_STATE_OFFSET(sbId)
+	{   0xc000,     0x40,      0x2,      0x0,      0x1},	// CSTORM_STATUS_BLOCK_DATA_TIMEOUT_OFFSET(sbId,hcIndex)
+	{   0xc001,     0x40,      0x2,      0x0,      0x0},	// CSTORM_STATUS_BLOCK_DATA_FLAGS_OFFSET(sbId,hcIndex)
+	{   0xe200,     0x20,      0x0,      0x0,     0x20},	// CSTORM_SYNC_BLOCK_OFFSET(sbId)
+	{   0xe204,      0x2,      0x8,     0x20,      0x2},	// CSTORM_HC_SYNC_LINE_INDEX_E2_OFFSET(hcIndex,sbId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// CSTORM_HC_SYNC_LINE_INDEX_E1X_OFFSET(hcIndex,sbId)
+	{   0xe200,      0x8,     0x20,      0x0,      0x4},	// CSTORM_HC_SYNC_LINE_DHC_OFFSET(sbSyncLines,sbId)
+	{   0xf500,     0x28,      0x0,      0x0,     0x28},	// CSTORM_SP_STATUS_BLOCK_OFFSET(pfId)
+	{   0xf640,     0x10,      0x0,      0x0,     0x10},	// CSTORM_SP_STATUS_BLOCK_DATA_OFFSET(pfId)
+	{   0xf64a,     0x10,      0x0,      0x0,      0x1},	// CSTORM_SP_STATUS_BLOCK_DATA_STATE_OFFSET(pfId)
+	{   0xf6c0,     0x20,      0x0,      0x0,     0x20},	// CSTORM_SP_SYNC_BLOCK_OFFSET(pfId)
+	{   0xf6c0,      0x2,     0x20,      0x0,      0x2},	// CSTORM_SP_HC_SYNC_LINE_INDEX_OFFSET(hcSpIndex,pfId)
+	{   0xf300,     0x40,      0x0,      0x0,     0x40},	// CSTORM_DYNAMIC_HC_CONFIG_OFFSET(pfId)
+	{   0x2008,     0x10,      0x0,      0x0,     0x10},	// CSTORM_ASSERT_LIST_OFFSET(assertListEntry)
+	{   0x2000,      0x0,      0x0,      0x0,      0x8},	// CSTORM_ASSERT_LIST_INDEX_OFFSET
+	{   0x11a8,      0x8,      0x0,      0x0,      0x1},	// CSTORM_FUNC_EN_OFFSET(funcId)
+	{   0x11a9,      0x8,      0x0,      0x0,      0x1},	// CSTORM_VF_TO_PF_OFFSET(funcId)
+	{   0x11aa,      0x8,      0x0,      0x0,      0x1},	// CSTORM_RECORD_SLOW_PATH_OFFSET(funcId)
+	{   0x4000,     0x20,      0x4,      0x0,     0x10},	// CSTORM_BYTE_COUNTER_OFFSET(sbId,dhcIndex)
+	{   0x5900,     0x30,     0x18,      0x0,     0x10},	// CSTORM_EVENT_RING_DATA_OFFSET(pfId)
+	{   0x5908,     0x30,     0x18,      0x0,      0x2},	// CSTORM_EVENT_RING_PROD_OFFSET(pfId)
+	{   0x5700,      0x8,      0x0,      0x0,      0x1},	// CSTORM_VF_PF_CHANNEL_STATE_OFFSET(vfId)
+	{   0x5701,      0x8,      0x0,      0x0,      0x1},	// CSTORM_VF_PF_CHANNEL_VALID_OFFSET(vfId)
+	{   0x1158,      0x0,      0x0,      0x0,      0x1},	// CSTORM_IGU_MODE_OFFSET
+	{   0x1160,      0x0,      0x0,      0x0,     0x10},	// CSTORM_ERROR_HANDLER_STATISTICS_RAM_OFFSET
+	{   0x11ac,      0x8,      0x0,      0x0,      0x4},	// CSTORM_FINAL_CLEANUP_COMPLETE_OFFSET(funcId)
+	{   0x4000,     0x20,      0x0,      0x0,     0x20},	// CSTORM_QUEUE_ZONE_OFFSET(queueId)
+	{   0x5300,     0x10,      0x0,      0x0,     0x10},	// CSTORM_VF_ZONE_OFFSET(vfId)
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// CSTORM_INBOUND_INTERRUPT_TEST_VF_INFO_SIZE_IN_BYTES
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// CSTORM_INBOUND_INTERRUPT_TEST_AGG_INT_1_INDEX
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// CSTORM_INBOUND_INTERRUPT_TEST_AGG_INT_2_INDEX
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// CSTORM_INBOUND_INTERRUPT_TEST_AGG_INT_3_INDEX
+	{   0x1470,      0x0,      0x0,      0x0,      0x1},	// CSTORM_KUKU_TEST_OPCODE_OFFSET
+	{   0x14b0,      0x0,      0x0,      0x0,      0x8},	// CSTORM_KUKU_LOAD_CONTEXT_TEST_OFFSET
+	{     0x50,      0x0,      0x0,      0x0,      0x0},	// CSTORM_KUKU_OP_GEN_VALUE
+	{   0x1478,      0x0,      0x0,      0x0,      0x4},	// CSTORM_IGU_TEST_PF_ID_OFFSET
+	{   0x147c,      0x0,      0x0,      0x0,      0x4},	// CSTORM_IGU_TEST_VF_ID_OFFSET
+	{   0x1480,      0x0,      0x0,      0x0,      0x4},	// CSTORM_IGU_TEST_VF_VALID_OFFSET
+	{   0x1484,      0x0,      0x0,      0x0,      0x4},	// CSTORM_IGU_TEST_ADDRESS_OFFSET
+	{   0x1488,      0x0,      0x0,      0x0,      0x8},	// CSTORM_IGU_TEST_IGU_COMMAND_OFFSET
+	{   0x2af0,     0x80,      0x0,      0x0,     0x80},	// USTORM_INDIRECTION_TABLE_OFFSET(portId)
+	{      0x1,      0x0,      0x0,      0x0,      0x0},	// USTORM_INDIRECTION_TABLE_ENTRY_SIZE
+	{   0x2008,     0x10,      0x0,      0x0,     0x10},	// USTORM_ASSERT_LIST_OFFSET(assertListEntry)
+	{   0x2000,      0x0,      0x0,      0x0,      0x8},	// USTORM_ASSERT_LIST_INDEX_OFFSET
+	{   0x2c70,      0x8,      0x0,      0x0,      0x1},	// USTORM_FUNC_EN_OFFSET(funcId)
+	{   0x2c71,      0x8,      0x0,      0x0,      0x1},	// USTORM_VF_TO_PF_OFFSET(funcId)
+	{   0x2c72,      0x8,      0x0,      0x0,      0x1},	// USTORM_RECORD_SLOW_PATH_OFFSET(funcId)
+	{   0x4158,     0x38,      0x0,      0x0,     0x38},	// USTORM_PER_QUEUE_STATS_OFFSET(uStatQueueId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_MEM_WORKAROUND_ADDRESS_OFFSET(pfId)
+	{   0x2c44,      0x8,      0x0,      0x0,      0x2},	// USTORM_ETH_PAUSE_ENABLED_OFFSET(portId)
+	{   0x2c46,      0x8,      0x0,      0x0,      0x2},	// USTORM_TOE_PAUSE_ENABLED_OFFSET(portId)
+	{   0x2c54,     0x10,      0x0,      0x0,      0x4},	// USTORM_MAX_PAUSE_TIME_USEC_OFFSET(portId)
+	{   0x2eb0,      0x0,      0x0,      0x0,     0x20},	// USTORM_ERROR_HANDLER_STATISTICS_RAM_OFFSET
+	{   0x6000,     0x20,      0x0,      0x0,     0x20},	// USTORM_QUEUE_ZONE_OFFSET(queueId)
+	{   0x7300,      0x8,      0x0,      0x0,      0x8},	// USTORM_VF_ZONE_OFFSET(vfId)
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// USTORM_INBOUND_INTERRUPT_TEST_VF_INFO_SIZE_IN_BYTES
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// USTORM_INBOUND_INTERRUPT_TEST_AGG_INT_1_INDEX
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// USTORM_INBOUND_INTERRUPT_TEST_AGG_INT_2_INDEX
+	{      0x0,      0x0,      0x0,      0x0,      0x0},	// USTORM_INBOUND_INTERRUPT_TEST_AGG_INT_3_INDEX
+	{   0x2f58,      0x0,      0x0,      0x0,      0x1},	// USTORM_KUKU_TEST_OPCODE_OFFSET
+	{   0x2f98,      0x0,      0x0,      0x0,      0x8},	// USTORM_KUKU_LOAD_CONTEXT_TEST_OFFSET
+	{     0x50,      0x0,      0x0,      0x0,      0x0},	// USTORM_KUKU_OP_GEN_VALUE
+	{   0x2f80,      0x0,      0x0,      0x0,      0x4},	// USTORM_PCI_READ_TEST_ADDRESS_LO_OFFSET
+	{   0x2f84,      0x0,      0x0,      0x0,      0x4},	// USTORM_PCI_READ_TEST_ADDRESS_HI_OFFSET
+	{   0x2f88,      0x0,      0x0,      0x0,      0x4},	// USTORM_PCI_READ_TEST_RAM_ADDRESS_OFFSET
+	{   0x2f8c,      0x0,      0x0,      0x0,      0x8},	// USTORM_PCI_READ_TEST_PCI_ENTITY_OFFSET
+	{   0x2fa8,      0x0,      0x0,      0x0,      0x2},	// USTORM_KUKU_NIG_PAUSE_TEST_MASK_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_FUNCTION_COMMON_CONFIG_OFFSET(pfId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_MAC_FILTER_CONFIG_OFFSET(pfId)
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// TSTORM_APPROXIMATE_MATCH_MULTICAST_FILTERING_OFFSET(pfId)
+	{   0x3128,      0x0,      0x0,      0x0,      0x8},	// TSTORM_ACCEPT_CLASSIFY_FAILED_OFFSET
+	{  0x62a20,   0x2600,     0x40,      0x0,      0x8},	// USTORM_CQE_PAGE_NEXT_OFFSET(portId,clientId)
+	{   0xa000,      0x0,      0x0,      0x0,   0x2000},	// USTORM_AGG_DATA_OFFSET
+	{   0x40c1,      0x0,      0x0,      0x0,      0x1},	// USTORM_TPA_BTR_OFFSET
+	{   0x40f0,      0x0,      0x0,      0x0,      0x2},	// USTORM_ETH_DYNAMIC_HC_PARAM_OFFSET
+	{UNDEF_IRO,      0x0,      0x0,      0x0,      0x0},	// USTORM_RX_PRODS_E1X_OFFSET(portId,clientId)
+	{   0x6000,     0x20,      0x0,      0x0,      0x8},	// USTORM_RX_PRODS_E2_OFFSET(qzoneId)
+	{   0x4000,      0x8,      0x0,      0x0,      0x1},	// XSTORM_TCP_GLOBAL_DEL_ACK_COUNTER_ENABLED_OFFSET(portId)
+	{   0x4001,      0x8,      0x0,      0x0,      0x1},	// XSTORM_TCP_GLOBAL_DEL_ACK_COUNTER_MAX_COUNT_OFFSET(portId)
+	{   0x4040,      0x8,      0x4,      0x0,      0x2},	// XSTORM_TCP_IPID_OFFSET(pfId)
+	{   0x4060,      0x8,      0x4,      0x0,      0x4},	// XSTORM_TCP_TX_SWS_TIMER_VAL_OFFSET(pfId)
+	{   0x4080,      0x8,      0x0,      0x0,      0x4},	// XSTORM_TCP_TX_SWITCHING_EN_OFFSET(portId)
+	{   0x4000,      0x8,      0x0,      0x0,      0x4},	// TSTORM_TCP_DUPLICATE_ACK_THRESHOLD_OFFSET(pfId)
+	{   0x4004,      0x8,      0x0,      0x0,      0x4},	// TSTORM_TCP_MAX_CWND_OFFSET(pfId)
+	{   0x4040,      0x0,      0x0,      0x0,      0x8},	// TSTORM_TCP_GLOBAL_PARAMS_OFFSET
+	{   0x4048,      0x0,      0x0,      0x0,      0x8},	// TSTORM_TCP_ISLES_ARRAY_DESCRIPTOR_OFFSET
+	{   0x8000,      0x0,      0x0,      0x0,     0x10},	// TSTORM_TCP_ISLES_ARRAY_OFFSET
+	{   0x5040,      0x1,      0x4,      0x0,      0x1},	// XSTORM_TOE_LLC_SNAP_ENABLED_OFFSET(pfId)
+	{   0x5000,      0x0,      0x0,      0x0,     0x20},	// XSTORM_OUT_OCTETS_OFFSET
+	{   0x5008,     0x10,      0x0,      0x0,      0x4},	// TSTORM_TOE_MAX_SEG_RETRANSMIT_OFFSET(pfId)
+	{   0x500c,     0x10,      0x0,      0x0,      0x1},	// TSTORM_TOE_DOUBT_REACHABILITY_OFFSET(pfId)
+	{   0x52c7,      0x0,      0x0,      0x0,      0x1},	// TSTORM_TOE_MAX_DOMINANCE_VALUE_OFFSET
+	{   0x52c6,      0x0,      0x0,      0x0,      0x1},	// TSTORM_TOE_DOMINANCE_THRESHOLD_OFFSET
+	{   0x3000,     0x40,     0x20,      0x0,      0x4},	// CSTORM_TOE_CQ_CONS_PTR_LO_OFFSET(rssId,portId)
+	{   0x3004,     0x40,     0x20,      0x0,      0x4},	// CSTORM_TOE_CQ_CONS_PTR_HI_OFFSET(rssId,portId)
+	{   0x3008,     0x40,     0x20,      0x0,      0x2},	// CSTORM_TOE_CQ_PROD_OFFSET(rssId,portId)
+	{   0x300a,     0x40,     0x20,      0x0,      0x2},	// CSTORM_TOE_CQ_CONS_OFFSET(rssId,portId)
+	{   0x300c,     0x40,     0x20,      0x0,      0x1},	// CSTORM_TOE_CQ_NXT_PAGE_ADDR_VALID_OFFSET(rssId,portId)
+	{   0x300d,     0x40,     0x20,      0x0,      0x1},	// CSTORM_TOE_STATUS_BLOCK_ID_OFFSET(rssId,portId)
+	{   0x300e,     0x40,     0x20,      0x0,      0x1},	// CSTORM_TOE_STATUS_BLOCK_INDEX_OFFSET(rssId,portId)
+	{   0x3010,     0x40,     0x20,      0x0,      0x4},	// CSTORM_TOE_CQ_NEXT_PAGE_BASE_ADDR_LO_OFFSET(rssId,portId)
+	{   0x3014,     0x40,     0x20,      0x0,      0x4},	// CSTORM_TOE_CQ_NEXT_PAGE_BASE_ADDR_HI_OFFSET(rssId,portId)
+	{   0x3018,     0x40,     0x20,      0x0,      0x4},	// CSTORM_TOE_DYNAMIC_HC_PROD_OFFSET(rssId,portId)
+	{   0x301c,     0x40,     0x20,      0x0,      0x4},	// CSTORM_TOE_DYNAMIC_HC_CONS_OFFSET(rssId,portId)
+	{   0xc000,    0x100,     0x80,      0x8,      0x4},	// USTORM_GRQ_CACHE_BD_LO_OFFSET(rssId,portId,grqBdId)
+	{   0xc004,    0x100,     0x80,      0x8,      0x4},	// USTORM_GRQ_CACHE_BD_HI_OFFSET(rssId,portId,grqBdId)
+	{      0xa,      0x0,      0x0,      0x0,      0x0},	// USTORM_TOE_GRQ_CACHE_NUM_BDS
+	{   0xc068,    0x100,     0x80,      0x0,      0x1},	// USTORM_TOE_GRQ_LOCAL_PROD_OFFSET(rssId,portId)
+	{   0xc069,    0x100,     0x80,      0x0,      0x1},	// USTORM_TOE_GRQ_LOCAL_CONS_OFFSET(rssId,portId)
+	{   0xc06c,    0x100,     0x80,      0x0,      0x2},	// USTORM_TOE_GRQ_CONS_OFFSET(rssId,portId)
+	{   0xc06e,    0x100,     0x80,      0x0,      0x2},	// USTORM_TOE_GRQ_PROD_OFFSET(rssId,portId)
+	{   0xc070,    0x100,     0x80,      0x0,      0x4},	// USTORM_TOE_GRQ_CONS_PTR_LO_OFFSET(rssId,portId)
+	{   0xc074,    0x100,     0x80,      0x0,      0x4},	// USTORM_TOE_GRQ_CONS_PTR_HI_OFFSET(rssId,portId)
+	{   0xc066,    0x100,     0x80,      0x0,      0x2},	// USTORM_TOE_GRQ_BUF_SIZE_OFFSET(rssId,portId)
+	{   0xc064,    0x100,     0x80,      0x0,      0x1},	// USTORM_TOE_CQ_NXT_PAGE_ADDR_VALID_OFFSET(rssId,portId)
+	{   0xc060,    0x100,     0x80,      0x0,      0x2},	// USTORM_TOE_CQ_CONS_OFFSET(rssId,portId)
+	{   0xc062,    0x100,     0x80,      0x0,      0x2},	// USTORM_TOE_CQ_PROD_OFFSET(rssId,portId)
+	{   0xc050,    0x100,     0x80,      0x0,      0x4},	// USTORM_TOE_CQ_NEXT_PAGE_BASE_ADDR_LO_OFFSET(rssId,portId)
+	{   0xc054,    0x100,     0x80,      0x0,      0x4},	// USTORM_TOE_CQ_NEXT_PAGE_BASE_ADDR_HI_OFFSET(rssId,portId)
+	{   0xc058,    0x100,     0x80,      0x0,      0x4},	// USTORM_TOE_CQ_CONS_PTR_LO_OFFSET(rssId,portId)
+	{   0xc05c,    0x100,     0x80,      0x0,      0x4},	// USTORM_TOE_CQ_CONS_PTR_HI_OFFSET(rssId,portId)
+	{   0xc07c,    0x100,     0x80,      0x0,      0x1},	// USTORM_TOE_STATUS_BLOCK_ID_OFFSET(rssId,portId)
+	{   0xc07d,    0x100,     0x80,      0x0,      0x1},	// USTORM_TOE_STATUS_BLOCK_INDEX_OFFSET(rssId,portId)
+	{   0x1018,     0x10,      0x0,      0x0,      0x4},	// USTORM_TOE_TCP_PUSH_TIMER_TICKS_OFFSET(pfId)
+	{   0x1090,     0x10,      0x0,      0x0,      0x4},	// USTORM_TOE_GRQ_XOFF_COUNTER_OFFSET(pfId)
+	{   0x1098,     0x10,      0x0,      0x0,      0x4},	// USTORM_TOE_RCQ_XOFF_COUNTER_OFFSET(pfId)
+	{   0x1110,      0x0,      0x0,      0x0,      0x2},	// USTORM_TOE_CQ_THR_LOW_OFFSET
+	{   0x1112,      0x0,      0x0,      0x0,      0x2},	// USTORM_TOE_GRQ_THR_LOW_OFFSET
+	{   0x1114,      0x0,      0x0,      0x0,      0x2},	// USTORM_TOE_CQ_THR_HIGH_OFFSET
+	{   0x1116,      0x0,      0x0,      0x0,      0x2},	// USTORM_TOE_GRQ_THR_HIGH_OFFSET
+	{   0x6040,      0x8,      0x0,      0x0,      0x2},	// TSTORM_ISCSI_TCP_VARS_FLAGS_OFFSET(pfId)
+	{   0x6042,      0x8,      0x0,      0x0,      0x2},	// TSTORM_ISCSI_TCP_VARS_LSB_LOCAL_MAC_ADDR_OFFSET(pfId)
+	{   0x6044,      0x8,      0x0,      0x0,      0x2},	// TSTORM_ISCSI_TCP_VARS_MID_LOCAL_MAC_ADDR_OFFSET(pfId)
+	{   0x6046,      0x8,      0x0,      0x0,      0x2},	// TSTORM_ISCSI_TCP_VARS_MSB_LOCAL_MAC_ADDR_OFFSET(pfId)
+	{   0x6080,      0x8,      0x0,      0x0,      0x8},	// TSTORM_ISCSI_RQ_SIZE_OFFSET(pfId)
+	{   0x6000,      0x8,      0x0,      0x0,      0x2},	// TSTORM_ISCSI_PAGE_SIZE_OFFSET(pfId)
+	{   0x6002,      0x8,      0x0,      0x0,      0x1},	// TSTORM_ISCSI_PAGE_SIZE_LOG_OFFSET(pfId)
+	{   0x6004,      0x8,      0x0,      0x0,      0x2},	// TSTORM_ISCSI_NUM_OF_TASKS_OFFSET(pfId)
+	{   0x60c0,      0x8,      0x0,      0x0,      0x8},	// TSTORM_ISCSI_ERROR_BITMAP_OFFSET(pfId)
+	{   0x6100,      0x8,      0x0,      0x0,      0x4},	// TSTORM_ISCSI_L2_ISCSI_OOO_CID_TABLE_OFFSET(pfId)
+	{   0x6104,      0x8,      0x0,      0x0,      0x1},	// TSTORM_ISCSI_L2_ISCSI_OOO_CLIENT_ID_TABLE_OFFSET(pfId)
+	{   0x6140,      0x8,      0x0,      0x0,      0x2},	// TSTORM_ISCSI_L2_ISCSI_OOO_PROD_OFFSET(pfId)
+	{   0x6144,      0x8,      0x0,      0x0,      0x2},	// TSTORM_ISCSI_L2_ISCSI_OOO_RX_BDS_THRSHLD_OFFSET(pfId)
+	{   0x6180,      0x8,      0x0,      0x0,      0x4},	// TSTORM_ISCSI_TCP_LOCAL_ADV_WND_OFFSET(pfId)
+	{   0x3000,      0x8,      0x0,      0x0,      0x2},	// USTORM_ISCSI_PAGE_SIZE_OFFSET(pfId)
+	{   0x3002,      0x8,      0x0,      0x0,      0x1},	// USTORM_ISCSI_PAGE_SIZE_LOG_OFFSET(pfId)
+	{   0x3004,      0x8,      0x0,      0x0,      0x2},	// USTORM_ISCSI_NUM_OF_TASKS_OFFSET(pfId)
+	{   0x3040,      0x8,      0x0,      0x0,      0x2},	// USTORM_ISCSI_R2TQ_SIZE_OFFSET(pfId)
+	{   0x3044,      0x8,      0x0,      0x0,      0x2},	// USTORM_ISCSI_CQ_SIZE_OFFSET(pfId)
+	{   0x3046,      0x8,      0x0,      0x0,      0x2},	// USTORM_ISCSI_CQ_SQN_SIZE_OFFSET(pfId)
+	{   0x3660,      0x8,      0x0,      0x0,      0x8},	// USTORM_ISCSI_GLOBAL_BUF_PHYS_ADDR_OFFSET(pfId)
+	{   0x3080,      0x8,      0x0,      0x0,      0x2},	// USTORM_ISCSI_RQ_BUFFER_SIZE_OFFSET(pfId)
+	{   0x3084,      0x8,      0x0,      0x0,      0x2},	// USTORM_ISCSI_RQ_SIZE_OFFSET(pfId)
+	{   0x36a0,      0x8,      0x0,      0x0,      0x8},	// USTORM_ISCSI_ERROR_BITMAP_OFFSET(pfId)
+	{   0x8040,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_TCP_VARS_TTL_OFFSET(pfId)
+	{   0x8041,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_TCP_VARS_TOS_OFFSET(pfId)
+	{   0x8042,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_TCP_VARS_FLAGS_OFFSET(pfId)
+	{   0x8043,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_TCP_VARS_ADV_WND_SCL_OFFSET(pfId)
+	{   0x8000,      0x8,      0x0,      0x0,      0x2},	// XSTORM_ISCSI_PAGE_SIZE_OFFSET(pfId)
+	{   0x8002,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_PAGE_SIZE_LOG_OFFSET(pfId)
+	{   0x8004,      0x8,      0x0,      0x0,      0x2},	// XSTORM_ISCSI_NUM_OF_TASKS_OFFSET(pfId)
+	{   0x80c0,      0x8,      0x0,      0x0,      0x2},	// XSTORM_ISCSI_HQ_SIZE_OFFSET(pfId)
+	{   0x80c2,      0x8,      0x0,      0x0,      0x2},	// XSTORM_ISCSI_SQ_SIZE_OFFSET(pfId)
+	{   0x80c4,      0x8,      0x0,      0x0,      0x2},	// XSTORM_ISCSI_R2TQ_SIZE_OFFSET(pfId)
+	{   0x8080,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_LOCAL_MAC_ADDR0_OFFSET(pfId)
+	{   0x8081,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_LOCAL_MAC_ADDR1_OFFSET(pfId)
+	{   0x8082,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_LOCAL_MAC_ADDR2_OFFSET(pfId)
+	{   0x8083,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_LOCAL_MAC_ADDR3_OFFSET(pfId)
+	{   0x8084,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_LOCAL_MAC_ADDR4_OFFSET(pfId)
+	{   0x8085,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_LOCAL_MAC_ADDR5_OFFSET(pfId)
+	{   0x8086,      0x8,      0x0,      0x0,      0x1},	// XSTORM_ISCSI_LOCAL_VLAN_OFFSET(pfId)
+	{   0x6000,      0x8,      0x0,      0x0,      0x2},	// CSTORM_ISCSI_PAGE_SIZE_OFFSET(pfId)
+	{   0x6002,      0x8,      0x0,      0x0,      0x1},	// CSTORM_ISCSI_PAGE_SIZE_LOG_OFFSET(pfId)
+	{   0x6004,      0x8,      0x0,      0x0,      0x2},	// CSTORM_ISCSI_NUM_OF_TASKS_OFFSET(pfId)
+	{   0x6042,     0xc0,     0x18,      0x0,      0x2},	// CSTORM_ISCSI_EQ_PROD_OFFSET(pfId,iscsiEqId)
+	{   0x6040,     0xc0,     0x18,      0x0,      0x2},	// CSTORM_ISCSI_EQ_CONS_OFFSET(pfId,iscsiEqId)
+	{   0x604c,     0xc0,     0x18,      0x0,      0x8},	// CSTORM_ISCSI_EQ_NEXT_PAGE_ADDR_OFFSET(pfId,iscsiEqId)
+	{   0x6044,     0xc0,     0x18,      0x0,      0x8},	// CSTORM_ISCSI_EQ_NEXT_EQE_ADDR_OFFSET(pfId,iscsiEqId)
+	{   0x6057,     0xc0,     0x18,      0x0,      0x1},	// CSTORM_ISCSI_EQ_NEXT_PAGE_ADDR_VALID_OFFSET(pfId,iscsiEqId)
+	{   0x6054,     0xc0,     0x18,      0x0,      0x2},	// CSTORM_ISCSI_EQ_SB_NUM_OFFSET(pfId,iscsiEqId)
+	{   0x6056,     0xc0,     0x18,      0x0,      0x1},	// CSTORM_ISCSI_EQ_SB_INDEX_OFFSET(pfId,iscsiEqId)
+	{   0x6640,      0x8,      0x0,      0x0,      0x8},	// CSTORM_ISCSI_HQ_SIZE_OFFSET(pfId)
+	{   0x6680,      0x8,      0x0,      0x0,      0x8},	// CSTORM_ISCSI_CQ_SIZE_OFFSET(pfId)
+	{   0x66c0,      0x8,      0x0,      0x0,      0x8},	// CSTORM_ISCSI_CQ_SQN_SIZE_OFFSET(pfId)
+	{   0xda82,     0x18,      0x0,      0x0,      0x2},	// USTORM_FCOE_EQ_PROD_OFFSET(pfId)
+	{   0xdba0,      0x0,      0x0,      0x0,      0x0},	// USTORM_FCOE_TIMER_PARAM_OFFSET
+	{   0xe000,      0x0,      0x0,      0x0,      0x4},	// USTORM_TIMER_ARRAY_OFFSET
+	{   0xd100,      0x0,      0x0,      0x0,      0x4},	// USTORM_STAT_FC_CRC_CNT_OFFSET
+	{   0xd104,      0x0,      0x0,      0x0,      0x4},	// USTORM_STAT_EOFA_DEL_CNT_OFFSET
+	{   0xd108,      0x0,      0x0,      0x0,      0x4},	// USTORM_STAT_MISS_FRAME_CNT_OFFSET
+	{   0xd10c,      0x0,      0x0,      0x0,      0x4},	// USTORM_STAT_SEQ_TIMEOUT_CNT_OFFSET
+	{   0xd110,      0x0,      0x0,      0x0,      0x4},	// USTORM_STAT_DROP_SEQ_CNT_OFFSET
+	{   0xd114,      0x0,      0x0,      0x0,      0x4},	// USTORM_STAT_FCOE_RX_DROP_PKT_CNT_OFFSET
+	{   0xd118,      0x0,      0x0,      0x0,      0x4},	// USTORM_STAT_FCP_RX_PKT_CNT_OFFSET
+	{   0xd100,      0x0,      0x0,      0x0,     0x20},	// USTORM_STAT_OFFSET
+	{   0x9280,      0x0,      0x0,      0x0,      0x4},	// USTORM_DEBUG_DROP_PKT_CNT_OFFSET
+	{   0x9280,      0x0,      0x0,      0x0,     0x28},	// USTORM_DEBUG_OFFSET
+	{   0x8050,     0xa8,      0x0,      0x0,      0x1},	// USTORM_CACHED_TCE_MNG_INFO_DWORD_ONE_OFFSET(cached_tbl_size)
+	{   0x8054,     0xa8,      0x0,      0x0,      0x1},	// USTORM_CACHED_TCE_MNG_INFO_DWORD_TWO_OFFSET(cached_tbl_size)
+	{   0x8000,      0x0,      0x0,      0x0,     0x50},	// USTORM_CACHED_TCE_ENTRY_TCE_OFFSET
+	{   0x8050,      0x0,      0x0,      0x0,     0x10},	// USTORM_CACHED_TCE_ENTRY_MNG_INFO_OFFSET
+	{   0x9600,      0x0,      0x0,      0x0,      0x4},	// USTORM_FCOE_CACHED_TCE_TBL_BIT_MAP_OFFSET
+	{   0x9400,      0x0,      0x0,      0x0,      0x4},	// USTORM_DEBUG_CACHED_TCE_WAIT_4_BD_READ_OFFSET
+	{   0x9404,      0x0,      0x0,      0x0,      0x4},	// USTORM_DEBUG_CACHED_TCE_WAKE_ANOTHER_THREAD_DATA_OFFSET
+	{   0x9408,      0x0,      0x0,      0x0,      0x4},	// USTORM_DEBUG_CACHED_TCE_WAKE_ANOTHER_THREAD_NON_DATA_OFFSET
+	{   0x940c,      0x0,      0x0,      0x0,      0x4},	// USTORM_DEBUG_CACHED_TCE_WAKE_ANOTHER_THREAD_ERR_OFFSET
+	{   0x9410,      0x0,      0x0,      0x0,      0x4},	// USTORM_DEBUG_CACHED_TCE_GLOBAL_TIMER_TASK_IN_USE_OFFSET
+	{   0x9414,      0x0,      0x0,      0x0,      0x4},	// USTORM_DEBUG_CACHED_TCE_DEL_CACHED_TASK_OFFSET
+	{   0x9418,      0x0,      0x0,      0x0,      0x4},	// USTORM_DEBUG_CACHED_TCE_SILENT_DROP_CACHED_TASK_OFFSET
+	{   0x9400,      0x0,      0x0,      0x0,     0x40},	// USTORM_DEBUG_CACHED_TCE_OFFSET
+	{   0x9420,      0x0,      0x0,      0x0,      0x4},	// USTORM_FCOE_DEBUG_CACHED_TCE_SEQ_CNT_ON_DROP_OFFSET
+	{   0x9424,      0x0,      0x0,      0x0,      0x4},	// USTORM_FCOE_DEBUG_CACHED_TCE_SEQ_CNT_ON_CRC_ERROR_OFFSET
+	{   0x9428,      0x0,      0x0,      0x0,      0x4},	// USTORM_FCOE_DEBUG_CACHED_TCE_SEQ_CNT_ON_ERROR_OFFSET
+	{   0x941c,      0x0,      0x0,      0x0,      0x4},	// USTORM_FCOE_DEBUG_CACHED_TCE_PREVIOUS_THREAD_OFFSET
+	{   0x9430,      0x0,      0x0,      0x0,      0x4},	// USTORM_FCOE_DEBUG_CACHED_TCE_CRC_ERR_DETECT_DATA_IN_OFFSET
+	{   0x942c,      0x0,      0x0,      0x0,      0x4},	// USTORM_FCOE_DEBUG_CACHED_TCE_CRC_ERR_DETECT_READ_TCE_OFFSET
+	{   0x9434,      0x0,      0x0,      0x0,      0x4},	// USTORM_FCOE_DEBUG_CACHED_TCE_CRC_ERR_DETECT_DROP_ERR_OFFSET
+	{   0x9284,      0x0,      0x0,      0x0,      0x4},	// USTORM_FCOE_DEBUG_PARAMS_ERRORS_NUMBER_OFFSET
+	{   0x9280,      0x0,      0x0,      0x0,      0x4},	// USTORM_FCOE_DEBUG_PARAMS_SILENT_DROP_NUMBER_OFFSET
+	{   0x9290,      0x0,      0x0,      0x0,      0x4},	// USTORM_FCOE_DEBUG_PARAMS_SILENT_DROP_BITMAP_OFFSET
+	{   0x92a4,      0x0,      0x0,      0x0,      0x4},	// USTORM_FCOE_DEBUG_PARAMS_ENABLE_CONN_RACE_OFFSET
+	{   0x9438,      0x0,      0x0,      0x0,      0x4},	// USTORM_FCOE_DEBUG_PARAMS_TASK_IN_USE_OFFSET
+	{   0x943c,      0x0,      0x0,      0x0,      0x4},	// USTORM_FCOE_DEBUG_PARAMS_CRC_ERROR_TASK_IN_USE_OFFSET
+	{   0xb988,      0x0,      0x0,      0x0,      0x0},	// XSTORM_FCOE_TIMER_PARAM_OFFSET
+	{   0xd000,      0x0,      0x0,      0x0,      0x4},	// XSTORM_TIMER_ARRAY_OFFSET
+	{   0xb100,      0x0,      0x0,      0x0,      0x4},	// XSTORM_STAT_FCOE_TX_PKT_CNT_OFFSET
+	{   0xb104,      0x0,      0x0,      0x0,      0x4},	// XSTORM_STAT_FCOE_TX_BYTE_CNT_OFFSET
+	{   0xb108,      0x0,      0x0,      0x0,      0x4},	// XSTORM_STAT_FCP_TX_PKT_CNT_OFFSET
+	{   0xb100,      0x0,      0x0,      0x0,     0x10},	// XSTORM_STAT_OFFSET
+	{   0xbcb0,      0x0,      0x0,      0x0,      0x4},	// XSTORM_DEBUG_ABTS_BLOCK_SQ_CNT_OFFSET
+	{   0xbcb4,      0x0,      0x0,      0x0,      0x4},	// XSTORM_DEBUG_CLEANUP_BLOCK_SQ_CNT_OFFSET
+	{   0xbcb0,      0x0,      0x0,      0x0,     0x48},	// XSTORM_DEBUG_OFFSET
+	{   0xd858,      0x0,      0x0,      0x0,      0x4},	// TSTORM_STAT_FCOE_VER_CNT_OFFSET
+	{   0xd850,      0x0,      0x0,      0x0,      0x4},	// TSTORM_STAT_FCOE_RX_PKT_CNT_OFFSET
+	{   0xd854,      0x0,      0x0,      0x0,      0x4},	// TSTORM_STAT_FCOE_RX_BYTE_CNT_OFFSET
+	{   0xd85c,      0x0,      0x0,      0x0,      0x4},	// TSTORM_STAT_FCOE_RX_DROP_PKT_CNT_OFFSET
+	{   0xd850,      0x0,      0x0,      0x0,     0x10},	// TSTORM_STAT_OFFSET
+	{   0xd840,      0x0,      0x0,      0x0,      0x4},	// TSTORM_PORT_DEBUG_WAIT_FOR_YOUR_TURN_SP_CNT_OFFSET
+	{   0xd844,      0x0,      0x0,      0x0,      0x4},	// TSTORM_PORT_DEBUG_VNTAG_ERROR_PACKETS_OFFSET
+	{   0xd840,      0x0,      0x0,      0x0,      0x8},	// TSTORM_PORT_DEBUG_OFFSET
+	{   0xd4c8,      0x0,      0x0,      0x0,      0x8},	// TSTORM_REORDER_DATA_OFFSET
+	{   0xd4d8,      0x0,      0x0,      0x0,     0x80},	// TSTORM_REORDER_WAITING_TABLE_OFFSET
+	{     0x10,      0x0,      0x0,      0x0,      0x0},	// TSTORM_WAITING_LIST_SIZE
+	{   0xd4d8,      0x0,      0x0,      0x0,      0x8},	// TSTORM_REORDER_WAITING_ENTRY_OFFSET
+};
diff -r 2e9e6572f41c drivers/net/bnx2/bnx2x_fw_defs.h
--- /dev/null
+++ b/drivers/net/bnx2/bnx2x_fw_defs.h
@@ -0,0 +1,410 @@
+/* bnx2x_fw_defs.h: Broadcom Everest network driver.
+ *
+ * Copyright (c) 2007-2012 Broadcom Corporation
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation.
+ */
+
+#ifndef BNX2X_FW_DEFS_H
+#define BNX2X_FW_DEFS_H
+
+#define CSTORM_ASSERT_LIST_INDEX_OFFSET	(IRO[148].base)
+#define CSTORM_ASSERT_LIST_OFFSET(assertListEntry) \
+	(IRO[147].base + ((assertListEntry) * IRO[147].m1))
+#define CSTORM_EVENT_RING_DATA_OFFSET(pfId) \
+	(IRO[153].base + (((pfId)>>1) * IRO[153].m1) + (((pfId)&1) * \
+	IRO[153].m2))
+#define CSTORM_EVENT_RING_PROD_OFFSET(pfId) \
+	(IRO[154].base + (((pfId)>>1) * IRO[154].m1) + (((pfId)&1) * \
+	IRO[154].m2))
+#define CSTORM_FINAL_CLEANUP_COMPLETE_OFFSET(funcId) \
+	(IRO[159].base + ((funcId) * IRO[159].m1))
+#define CSTORM_FUNC_EN_OFFSET(funcId) \
+	(IRO[149].base + ((funcId) * IRO[149].m1))
+#define CSTORM_IGU_MODE_OFFSET (IRO[157].base)
+#define CSTORM_ISCSI_CQ_SIZE_OFFSET(pfId) \
+	(IRO[316].base + ((pfId) * IRO[316].m1))
+#define CSTORM_ISCSI_CQ_SQN_SIZE_OFFSET(pfId) \
+	(IRO[317].base + ((pfId) * IRO[317].m1))
+#define CSTORM_ISCSI_EQ_CONS_OFFSET(pfId, iscsiEqId) \
+	(IRO[309].base + ((pfId) * IRO[309].m1) + ((iscsiEqId) * IRO[309].m2))
+#define CSTORM_ISCSI_EQ_NEXT_EQE_ADDR_OFFSET(pfId, iscsiEqId) \
+	(IRO[311].base + ((pfId) * IRO[311].m1) + ((iscsiEqId) * IRO[311].m2))
+#define CSTORM_ISCSI_EQ_NEXT_PAGE_ADDR_OFFSET(pfId, iscsiEqId) \
+	(IRO[310].base + ((pfId) * IRO[310].m1) + ((iscsiEqId) * IRO[310].m2))
+#define CSTORM_ISCSI_EQ_NEXT_PAGE_ADDR_VALID_OFFSET(pfId, iscsiEqId) \
+	(IRO[312].base + ((pfId) * IRO[312].m1) + ((iscsiEqId) * IRO[312].m2))
+#define CSTORM_ISCSI_EQ_PROD_OFFSET(pfId, iscsiEqId) \
+	(IRO[308].base + ((pfId) * IRO[308].m1) + ((iscsiEqId) * IRO[308].m2))
+#define CSTORM_ISCSI_EQ_SB_INDEX_OFFSET(pfId, iscsiEqId) \
+	(IRO[314].base + ((pfId) * IRO[314].m1) + ((iscsiEqId) * IRO[314].m2))
+#define CSTORM_ISCSI_EQ_SB_NUM_OFFSET(pfId, iscsiEqId) \
+	(IRO[313].base + ((pfId) * IRO[313].m1) + ((iscsiEqId) * IRO[313].m2))
+#define CSTORM_ISCSI_HQ_SIZE_OFFSET(pfId) \
+	(IRO[315].base + ((pfId) * IRO[315].m1))
+#define CSTORM_ISCSI_NUM_OF_TASKS_OFFSET(pfId) \
+	(IRO[307].base + ((pfId) * IRO[307].m1))
+#define CSTORM_ISCSI_PAGE_SIZE_LOG_OFFSET(pfId) \
+	(IRO[306].base + ((pfId) * IRO[306].m1))
+#define CSTORM_ISCSI_PAGE_SIZE_OFFSET(pfId) \
+	(IRO[305].base + ((pfId) * IRO[305].m1))
+#define CSTORM_RECORD_SLOW_PATH_OFFSET(funcId) \
+	(IRO[151].base + ((funcId) * IRO[151].m1))
+#define CSTORM_SP_STATUS_BLOCK_DATA_OFFSET(pfId) \
+	(IRO[142].base + ((pfId) * IRO[142].m1))
+#define CSTORM_SP_STATUS_BLOCK_DATA_STATE_OFFSET(pfId) \
+	(IRO[143].base + ((pfId) * IRO[143].m1))
+#define CSTORM_SP_STATUS_BLOCK_OFFSET(pfId) \
+	(IRO[141].base + ((pfId) * IRO[141].m1))
+#define CSTORM_SP_STATUS_BLOCK_SIZE (IRO[141].size)
+#define CSTORM_SP_SYNC_BLOCK_OFFSET(pfId) \
+	(IRO[144].base + ((pfId) * IRO[144].m1))
+#define CSTORM_SP_SYNC_BLOCK_SIZE (IRO[144].size)
+#define CSTORM_STATUS_BLOCK_DATA_FLAGS_OFFSET(sbId, hcIndex) \
+	(IRO[136].base + ((sbId) * IRO[136].m1) + ((hcIndex) * IRO[136].m2))
+#define CSTORM_STATUS_BLOCK_DATA_OFFSET(sbId) \
+	(IRO[133].base + ((sbId) * IRO[133].m1))
+#define CSTORM_STATUS_BLOCK_DATA_STATE_OFFSET(sbId) \
+	(IRO[134].base + ((sbId) * IRO[134].m1))
+#define CSTORM_STATUS_BLOCK_DATA_TIMEOUT_OFFSET(sbId, hcIndex) \
+	(IRO[135].base + ((sbId) * IRO[135].m1) + ((hcIndex) * IRO[135].m2))
+#define CSTORM_STATUS_BLOCK_OFFSET(sbId) \
+	(IRO[132].base + ((sbId) * IRO[132].m1))
+#define CSTORM_STATUS_BLOCK_SIZE (IRO[132].size)
+#define CSTORM_SYNC_BLOCK_OFFSET(sbId) \
+	(IRO[137].base + ((sbId) * IRO[137].m1))
+#define CSTORM_SYNC_BLOCK_SIZE (IRO[137].size)
+#define CSTORM_VF_PF_CHANNEL_STATE_OFFSET(vfId) \
+	(IRO[155].base + ((vfId) * IRO[155].m1))
+#define CSTORM_VF_PF_CHANNEL_VALID_OFFSET(vfId) \
+	(IRO[156].base + ((vfId) * IRO[156].m1))
+#define CSTORM_VF_TO_PF_OFFSET(funcId) \
+	(IRO[150].base + ((funcId) * IRO[150].m1))
+#define TSTORM_ACCEPT_CLASSIFY_FAILED_OFFSET (IRO[204].base)
+#define TSTORM_APPROXIMATE_MATCH_MULTICAST_FILTERING_OFFSET(pfId) \
+	(IRO[203].base + ((pfId) * IRO[203].m1))
+#define TSTORM_ASSERT_LIST_INDEX_OFFSET	(IRO[102].base)
+#define TSTORM_ASSERT_LIST_OFFSET(assertListEntry) \
+	(IRO[101].base + ((assertListEntry) * IRO[101].m1))
+#define TSTORM_COMMON_SAFC_WORKAROUND_ENABLE_OFFSET (IRO[107].base)
+#define TSTORM_COMMON_SAFC_WORKAROUND_TIMEOUT_10USEC_OFFSET \
+	(IRO[108].base)
+#define TSTORM_FUNCTION_COMMON_CONFIG_OFFSET(pfId) \
+	(IRO[201].base + ((pfId) * IRO[201].m1))
+#define TSTORM_FUNC_EN_OFFSET(funcId) \
+	(IRO[103].base + ((funcId) * IRO[103].m1))
+#define TSTORM_ISCSI_ERROR_BITMAP_OFFSET(pfId) \
+	(IRO[272].base + ((pfId) * IRO[272].m1))
+#define TSTORM_ISCSI_L2_ISCSI_OOO_CID_TABLE_OFFSET(pfId) \
+	(IRO[273].base + ((pfId) * IRO[273].m1))
+#define TSTORM_ISCSI_L2_ISCSI_OOO_CLIENT_ID_TABLE_OFFSET(pfId) \
+	(IRO[274].base + ((pfId) * IRO[274].m1))
+#define TSTORM_ISCSI_L2_ISCSI_OOO_PROD_OFFSET(pfId) \
+	(IRO[275].base + ((pfId) * IRO[275].m1))
+#define TSTORM_ISCSI_NUM_OF_TASKS_OFFSET(pfId) \
+	(IRO[271].base + ((pfId) * IRO[271].m1))
+#define TSTORM_ISCSI_PAGE_SIZE_LOG_OFFSET(pfId) \
+	(IRO[270].base + ((pfId) * IRO[270].m1))
+#define TSTORM_ISCSI_PAGE_SIZE_OFFSET(pfId) \
+	(IRO[269].base + ((pfId) * IRO[269].m1))
+#define TSTORM_ISCSI_RQ_SIZE_OFFSET(pfId) \
+	(IRO[268].base + ((pfId) * IRO[268].m1))
+#define TSTORM_ISCSI_TCP_LOCAL_ADV_WND_OFFSET(pfId) \
+	(IRO[277].base + ((pfId) * IRO[277].m1))
+#define TSTORM_ISCSI_TCP_VARS_FLAGS_OFFSET(pfId) \
+	(IRO[264].base + ((pfId) * IRO[264].m1))
+#define TSTORM_ISCSI_TCP_VARS_LSB_LOCAL_MAC_ADDR_OFFSET(pfId) \
+	(IRO[265].base + ((pfId) * IRO[265].m1))
+#define TSTORM_ISCSI_TCP_VARS_MID_LOCAL_MAC_ADDR_OFFSET(pfId) \
+	(IRO[266].base + ((pfId) * IRO[266].m1))
+#define TSTORM_ISCSI_TCP_VARS_MSB_LOCAL_MAC_ADDR_OFFSET(pfId) \
+	(IRO[267].base + ((pfId) * IRO[267].m1))
+#define TSTORM_MAC_FILTER_CONFIG_OFFSET(pfId) \
+	(IRO[202].base + ((pfId) * IRO[202].m1))
+#define TSTORM_RECORD_SLOW_PATH_OFFSET(funcId) \
+	(IRO[105].base + ((funcId) * IRO[105].m1))
+#define TSTORM_TCP_MAX_CWND_OFFSET(pfId) \
+	(IRO[217].base + ((pfId) * IRO[217].m1))
+#define TSTORM_VF_TO_PF_OFFSET(funcId) \
+	(IRO[104].base + ((funcId) * IRO[104].m1))
+#define USTORM_AGG_DATA_OFFSET (IRO[206].base)
+#define USTORM_AGG_DATA_SIZE (IRO[206].size)
+#define USTORM_ASSERT_LIST_INDEX_OFFSET	(IRO[177].base)
+#define USTORM_ASSERT_LIST_OFFSET(assertListEntry) \
+	(IRO[176].base + ((assertListEntry) * IRO[176].m1))
+#define USTORM_CQE_PAGE_NEXT_OFFSET(portId, clientId) \
+	(IRO[205].base + ((portId) * IRO[205].m1) + ((clientId) * \
+	IRO[205].m2))
+#define USTORM_ETH_PAUSE_ENABLED_OFFSET(portId) \
+	(IRO[183].base + ((portId) * IRO[183].m1))
+#define USTORM_FCOE_EQ_PROD_OFFSET(pfId) \
+	(IRO[318].base + ((pfId) * IRO[318].m1))
+#define USTORM_FUNC_EN_OFFSET(funcId) \
+	(IRO[178].base + ((funcId) * IRO[178].m1))
+#define USTORM_ISCSI_CQ_SIZE_OFFSET(pfId) \
+	(IRO[282].base + ((pfId) * IRO[282].m1))
+#define USTORM_ISCSI_CQ_SQN_SIZE_OFFSET(pfId) \
+	(IRO[283].base + ((pfId) * IRO[283].m1))
+#define USTORM_ISCSI_ERROR_BITMAP_OFFSET(pfId) \
+	(IRO[287].base + ((pfId) * IRO[287].m1))
+#define USTORM_ISCSI_GLOBAL_BUF_PHYS_ADDR_OFFSET(pfId) \
+	(IRO[284].base + ((pfId) * IRO[284].m1))
+#define USTORM_ISCSI_NUM_OF_TASKS_OFFSET(pfId) \
+	(IRO[280].base + ((pfId) * IRO[280].m1))
+#define USTORM_ISCSI_PAGE_SIZE_LOG_OFFSET(pfId) \
+	(IRO[279].base + ((pfId) * IRO[279].m1))
+#define USTORM_ISCSI_PAGE_SIZE_OFFSET(pfId) \
+	(IRO[278].base + ((pfId) * IRO[278].m1))
+#define USTORM_ISCSI_R2TQ_SIZE_OFFSET(pfId) \
+	(IRO[281].base + ((pfId) * IRO[281].m1))
+#define USTORM_ISCSI_RQ_BUFFER_SIZE_OFFSET(pfId) \
+	(IRO[285].base + ((pfId) * IRO[285].m1))
+#define USTORM_ISCSI_RQ_SIZE_OFFSET(pfId) \
+	(IRO[286].base + ((pfId) * IRO[286].m1))
+#define USTORM_MEM_WORKAROUND_ADDRESS_OFFSET(pfId) \
+	(IRO[182].base + ((pfId) * IRO[182].m1))
+#define USTORM_RECORD_SLOW_PATH_OFFSET(funcId) \
+	(IRO[180].base + ((funcId) * IRO[180].m1))
+#define USTORM_RX_PRODS_E1X_OFFSET(portId, clientId) \
+	(IRO[209].base + ((portId) * IRO[209].m1) + ((clientId) * \
+	IRO[209].m2))
+#define USTORM_RX_PRODS_E2_OFFSET(qzoneId) \
+	(IRO[210].base + ((qzoneId) * IRO[210].m1))
+#define USTORM_TPA_BTR_OFFSET (IRO[207].base)
+#define USTORM_TPA_BTR_SIZE (IRO[207].size)
+#define USTORM_VF_TO_PF_OFFSET(funcId) \
+	(IRO[179].base + ((funcId) * IRO[179].m1))
+#define XSTORM_AGG_INT_FINAL_CLEANUP_COMP_TYPE (IRO[67].base)
+#define XSTORM_AGG_INT_FINAL_CLEANUP_INDEX (IRO[66].base)
+#define XSTORM_ASSERT_LIST_INDEX_OFFSET	(IRO[51].base)
+#define XSTORM_ASSERT_LIST_OFFSET(assertListEntry) \
+	(IRO[50].base + ((assertListEntry) * IRO[50].m1))
+#define XSTORM_CMNG_PER_PORT_VARS_OFFSET(portId) \
+	(IRO[43].base + ((portId) * IRO[43].m1))
+#define XSTORM_FAIRNESS_PER_VN_VARS_OFFSET(pfId) \
+	(IRO[45].base + ((pfId) * IRO[45].m1))
+#define XSTORM_FUNC_EN_OFFSET(funcId) \
+	(IRO[47].base + ((funcId) * IRO[47].m1))
+#define XSTORM_ISCSI_HQ_SIZE_OFFSET(pfId) \
+	(IRO[295].base + ((pfId) * IRO[295].m1))
+#define XSTORM_ISCSI_LOCAL_MAC_ADDR0_OFFSET(pfId) \
+	(IRO[298].base + ((pfId) * IRO[298].m1))
+#define XSTORM_ISCSI_LOCAL_MAC_ADDR1_OFFSET(pfId) \
+	(IRO[299].base + ((pfId) * IRO[299].m1))
+#define XSTORM_ISCSI_LOCAL_MAC_ADDR2_OFFSET(pfId) \
+	(IRO[300].base + ((pfId) * IRO[300].m1))
+#define XSTORM_ISCSI_LOCAL_MAC_ADDR3_OFFSET(pfId) \
+	(IRO[301].base + ((pfId) * IRO[301].m1))
+#define XSTORM_ISCSI_LOCAL_MAC_ADDR4_OFFSET(pfId) \
+	(IRO[302].base + ((pfId) * IRO[302].m1))
+#define XSTORM_ISCSI_LOCAL_MAC_ADDR5_OFFSET(pfId) \
+	(IRO[303].base + ((pfId) * IRO[303].m1))
+#define XSTORM_ISCSI_LOCAL_VLAN_OFFSET(pfId) \
+	(IRO[304].base + ((pfId) * IRO[304].m1))
+#define XSTORM_ISCSI_NUM_OF_TASKS_OFFSET(pfId) \
+	(IRO[294].base + ((pfId) * IRO[294].m1))
+#define XSTORM_ISCSI_PAGE_SIZE_LOG_OFFSET(pfId) \
+	(IRO[293].base + ((pfId) * IRO[293].m1))
+#define XSTORM_ISCSI_PAGE_SIZE_OFFSET(pfId) \
+	(IRO[292].base + ((pfId) * IRO[292].m1))
+#define XSTORM_ISCSI_R2TQ_SIZE_OFFSET(pfId) \
+	(IRO[297].base + ((pfId) * IRO[297].m1))
+#define XSTORM_ISCSI_SQ_SIZE_OFFSET(pfId) \
+	(IRO[296].base + ((pfId) * IRO[296].m1))
+#define XSTORM_ISCSI_TCP_VARS_ADV_WND_SCL_OFFSET(pfId) \
+	(IRO[291].base + ((pfId) * IRO[291].m1))
+#define XSTORM_ISCSI_TCP_VARS_FLAGS_OFFSET(pfId) \
+	(IRO[290].base + ((pfId) * IRO[290].m1))
+#define XSTORM_ISCSI_TCP_VARS_TOS_OFFSET(pfId) \
+	(IRO[289].base + ((pfId) * IRO[289].m1))
+#define XSTORM_ISCSI_TCP_VARS_TTL_OFFSET(pfId) \
+	(IRO[288].base + ((pfId) * IRO[288].m1))
+#define XSTORM_RATE_SHAPING_PER_VN_VARS_OFFSET(pfId) \
+	(IRO[44].base + ((pfId) * IRO[44].m1))
+#define XSTORM_RECORD_SLOW_PATH_OFFSET(funcId) \
+	(IRO[49].base + ((funcId) * IRO[49].m1))
+#define XSTORM_SPQ_DATA_OFFSET(funcId) \
+	(IRO[32].base + ((funcId) * IRO[32].m1))
+#define XSTORM_SPQ_DATA_SIZE (IRO[32].size)
+#define XSTORM_SPQ_PAGE_BASE_OFFSET(funcId) \
+	(IRO[30].base + ((funcId) * IRO[30].m1))
+#define XSTORM_SPQ_PROD_OFFSET(funcId) \
+	(IRO[31].base + ((funcId) * IRO[31].m1))
+#define XSTORM_TCP_GLOBAL_DEL_ACK_COUNTER_ENABLED_OFFSET(portId) \
+	(IRO[211].base + ((portId) * IRO[211].m1))
+#define XSTORM_TCP_GLOBAL_DEL_ACK_COUNTER_MAX_COUNT_OFFSET(portId) \
+	(IRO[212].base + ((portId) * IRO[212].m1))
+#define XSTORM_TCP_TX_SWS_TIMER_VAL_OFFSET(pfId) \
+	(IRO[214].base + (((pfId)>>1) * IRO[214].m1) + (((pfId)&1) * \
+	IRO[214].m2))
+#define XSTORM_VF_TO_PF_OFFSET(funcId) \
+	(IRO[48].base + ((funcId) * IRO[48].m1))
+#define COMMON_ASM_INVALID_ASSERT_OPCODE 0x0
+
+/**
+* This file defines HSI constants for the ETH flow
+*/
+#ifdef _EVEREST_MICROCODE
+#include "Microcode\Generated\DataTypes\eth_rx_bd.h"
+#include "Microcode\Generated\DataTypes\eth_tx_bd.h"
+#include "Microcode\Generated\DataTypes\eth_rx_cqe.h"
+#include "Microcode\Generated\DataTypes\eth_rx_sge.h"
+#include "Microcode\Generated\DataTypes\eth_rx_cqe_next_page.h"
+#endif
+
+
+/* Ethernet Ring parameters */
+#define X_ETH_LOCAL_RING_SIZE 13
+#define FIRST_BD_IN_PKT	0
+#define PARSE_BD_INDEX 1
+#define NUM_OF_ETH_BDS_IN_PAGE ((PAGE_SIZE)/(STRUCT_SIZE(eth_tx_bd)/8))
+#define U_ETH_NUM_OF_SGES_TO_FETCH 8
+#define U_ETH_MAX_SGES_FOR_PACKET 3
+
+/* Rx ring params */
+#define U_ETH_LOCAL_BD_RING_SIZE 8
+#define U_ETH_LOCAL_SGE_RING_SIZE 10
+#define U_ETH_SGL_SIZE 8
+	/* The fw will padd the buffer with this value, so the IP header \
+	will be align to 4 Byte */
+#define IP_HEADER_ALIGNMENT_PADDING 2
+
+#define U_ETH_SGES_PER_PAGE_INVERSE_MASK \
+	(0xFFFF - ((PAGE_SIZE/((STRUCT_SIZE(eth_rx_sge))/8))-1))
+
+#define TU_ETH_CQES_PER_PAGE (PAGE_SIZE/(STRUCT_SIZE(eth_rx_cqe)/8))
+#define U_ETH_BDS_PER_PAGE (PAGE_SIZE/(STRUCT_SIZE(eth_rx_bd)/8))
+#define U_ETH_SGES_PER_PAGE (PAGE_SIZE/(STRUCT_SIZE(eth_rx_sge)/8))
+
+#define U_ETH_BDS_PER_PAGE_MASK	(U_ETH_BDS_PER_PAGE-1)
+#define U_ETH_CQE_PER_PAGE_MASK	(TU_ETH_CQES_PER_PAGE-1)
+#define U_ETH_SGES_PER_PAGE_MASK (U_ETH_SGES_PER_PAGE-1)
+
+#define U_ETH_UNDEFINED_Q 0xFF
+
+#define T_ETH_INDIRECTION_TABLE_SIZE 128
+#define T_ETH_RSS_KEY 10
+#define ETH_NUM_OF_RSS_ENGINES_E2 72
+
+#define FILTER_RULES_COUNT 16
+#define MULTICAST_RULES_COUNT 16
+#define CLASSIFY_RULES_COUNT 16
+
+/*The CRC32 seed, that is used for the hash(reduction) multicast address */
+#define ETH_CRC32_HASH_SEED 0x00000000
+
+#define ETH_CRC32_HASH_BIT_SIZE	(8)
+#define ETH_CRC32_HASH_MASK EVAL((1<<ETH_CRC32_HASH_BIT_SIZE)-1)
+
+/* Maximal L2 clients supported */
+#define ETH_MAX_RX_CLIENTS_E1 18
+#define ETH_MAX_RX_CLIENTS_E1H 28
+#define ETH_MAX_RX_CLIENTS_E2 152
+
+/* Maximal statistics client Ids */
+#define MAX_STAT_COUNTER_ID_E1 36
+#define MAX_STAT_COUNTER_ID_E1H	56
+#define MAX_STAT_COUNTER_ID_E2 140
+
+#define MAX_MAC_CREDIT_E1 192 /* Per Chip */
+#define MAX_MAC_CREDIT_E1H 256 /* Per Chip */
+#define MAX_MAC_CREDIT_E2 272 /* Per Path */
+#define MAX_VLAN_CREDIT_E1 0 /* Per Chip */
+#define MAX_VLAN_CREDIT_E1H 0 /* Per Chip */
+#define MAX_VLAN_CREDIT_E2 272 /* Per Path */
+
+
+/* Maximal aggregation queues supported */
+#define ETH_MAX_AGGREGATION_QUEUES_E1 32
+#define ETH_MAX_AGGREGATION_QUEUES_E1H_E2 64
+
+
+#define ETH_NUM_OF_MCAST_BINS 256
+#define ETH_NUM_OF_MCAST_ENGINES_E2 72
+
+#define ETH_MIN_RX_CQES_WITHOUT_TPA (MAX_RAMRODS_PER_PORT + 3)
+#define ETH_MIN_RX_CQES_WITH_TPA_E1 \
+	(ETH_MAX_AGGREGATION_QUEUES_E1 + ETH_MIN_RX_CQES_WITHOUT_TPA)
+#define ETH_MIN_RX_CQES_WITH_TPA_E1H_E2 \
+	(ETH_MAX_AGGREGATION_QUEUES_E1H_E2 + ETH_MIN_RX_CQES_WITHOUT_TPA)
+
+#define DISABLE_STATISTIC_COUNTER_ID_VALUE 0
+
+
+/**
+ * This file defines HSI constants common to all microcode flows
+ */
+
+#define PROTOCOL_STATE_BIT_OFFSET 6
+
+#define ETH_STATE (ETH_CONNECTION_TYPE << PROTOCOL_STATE_BIT_OFFSET)
+#define TOE_STATE (TOE_CONNECTION_TYPE << PROTOCOL_STATE_BIT_OFFSET)
+#define RDMA_STATE (RDMA_CONNECTION_TYPE << PROTOCOL_STATE_BIT_OFFSET)
+
+/* microcode fixed page page size 4K (chains and ring segments) */
+#define MC_PAGE_SIZE 4096
+
+/* Number of indices per slow-path SB */
+#define HC_SP_SB_MAX_INDICES 16
+
+/* Number of indices per SB */
+#define HC_SB_MAX_INDICES_E1X 8
+#define HC_SB_MAX_INDICES_E2 8
+
+#define HC_SB_MAX_SB_E1X 32
+#define HC_SB_MAX_SB_E2	136
+
+#define HC_SP_SB_ID 0xde
+
+#define HC_SB_MAX_SM 2
+
+#define HC_SB_MAX_DYNAMIC_INDICES 4
+
+/* max number of slow path commands per port */
+#define MAX_RAMRODS_PER_PORT 8
+
+
+/**** DEFINES FOR TIMERS/CLOCKS RESOLUTIONS ****/
+
+#define TIMERS_TICK_SIZE_CHIP (1e-3)
+
+#define TSEMI_CLK1_RESUL_CHIP (1e-3)
+
+#define XSEMI_CLK1_RESUL_CHIP (1e-3)
+
+#define SDM_TIMER_TICK_RESUL_CHIP (4 * (1e-6))
+
+/**** END DEFINES FOR TIMERS/CLOCKS RESOLUTIONS ****/
+
+#define XSTORM_IP_ID_ROLL_HALF 0x8000
+#define XSTORM_IP_ID_ROLL_ALL 0
+
+#define FW_LOG_LIST_SIZE 50
+
+#define NUM_OF_SAFC_BITS 16
+#define MAX_COS_NUMBER 4
+#define MAX_TRAFFIC_TYPES 8
+#define MAX_PFC_PRIORITIES 8
+
+	/* used by array traffic_type_to_priority[] to mark traffic type \
+	that is not mapped to priority*/
+#define LLFC_TRAFFIC_TYPE_TO_PRIORITY_UNMAPPED 0xFF
+
+
+#define C_ERES_PER_PAGE \
+	(PAGE_SIZE / BITS_TO_BYTES(STRUCT_SIZE(event_ring_elem)))
+#define C_ERE_PER_PAGE_MASK (C_ERES_PER_PAGE - 1)
+
+#define STATS_QUERY_CMD_COUNT 16
+
+#define NIV_LIST_TABLE_SIZE 4096
+
+#define INVALID_VNIC_ID	0xFF
+
+
+#define UNDEF_IRO 0x80000000
+
+
+#endif /* BNX2X_FW_DEFS_H */
diff -r 2e9e6572f41c drivers/net/bnx2/bnx2x_hsi.h
--- /dev/null
+++ b/drivers/net/bnx2/bnx2x_hsi.h
@@ -0,0 +1,5580 @@
+/* bnx2x_hsi.h: Broadcom Everest network driver.
+ *
+ * Copyright (c) 2007-2012 Broadcom Corporation
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation.
+ */
+#ifndef BNX2X_HSI_H
+#define BNX2X_HSI_H
+
+#include "bnx2x_fw_defs.h"
+#include "bnx2x_mfw_req.h"
+
+#define FW_ENCODE_32BIT_PATTERN         0x1e1e1e1e
+
+struct license_key {
+	u32 reserved[6];
+
+	u32 max_iscsi_conn;
+#define BNX2X_MAX_ISCSI_TRGT_CONN_MASK	0xFFFF
+#define BNX2X_MAX_ISCSI_TRGT_CONN_SHIFT	0
+#define BNX2X_MAX_ISCSI_INIT_CONN_MASK	0xFFFF0000
+#define BNX2X_MAX_ISCSI_INIT_CONN_SHIFT	16
+
+	u32 reserved_a;
+
+	u32 max_fcoe_conn;
+#define BNX2X_MAX_FCOE_TRGT_CONN_MASK	0xFFFF
+#define BNX2X_MAX_FCOE_TRGT_CONN_SHIFT	0
+#define BNX2X_MAX_FCOE_INIT_CONN_MASK	0xFFFF0000
+#define BNX2X_MAX_FCOE_INIT_CONN_SHIFT	16
+
+	u32 reserved_b[4];
+};
+
+
+
+/****************************************************************************
+ * Shared HW configuration                                                  *
+ ****************************************************************************/
+#define PIN_CFG_NA                          0x00000000
+#define PIN_CFG_GPIO0_P0                    0x00000001
+#define PIN_CFG_GPIO1_P0                    0x00000002
+#define PIN_CFG_GPIO2_P0                    0x00000003
+#define PIN_CFG_GPIO3_P0                    0x00000004
+#define PIN_CFG_GPIO0_P1                    0x00000005
+#define PIN_CFG_GPIO1_P1                    0x00000006
+#define PIN_CFG_GPIO2_P1                    0x00000007
+#define PIN_CFG_GPIO3_P1                    0x00000008
+#define PIN_CFG_EPIO0                       0x00000009
+#define PIN_CFG_EPIO1                       0x0000000a
+#define PIN_CFG_EPIO2                       0x0000000b
+#define PIN_CFG_EPIO3                       0x0000000c
+#define PIN_CFG_EPIO4                       0x0000000d
+#define PIN_CFG_EPIO5                       0x0000000e
+#define PIN_CFG_EPIO6                       0x0000000f
+#define PIN_CFG_EPIO7                       0x00000010
+#define PIN_CFG_EPIO8                       0x00000011
+#define PIN_CFG_EPIO9                       0x00000012
+#define PIN_CFG_EPIO10                      0x00000013
+#define PIN_CFG_EPIO11                      0x00000014
+#define PIN_CFG_EPIO12                      0x00000015
+#define PIN_CFG_EPIO13                      0x00000016
+#define PIN_CFG_EPIO14                      0x00000017
+#define PIN_CFG_EPIO15                      0x00000018
+#define PIN_CFG_EPIO16                      0x00000019
+#define PIN_CFG_EPIO17                      0x0000001a
+#define PIN_CFG_EPIO18                      0x0000001b
+#define PIN_CFG_EPIO19                      0x0000001c
+#define PIN_CFG_EPIO20                      0x0000001d
+#define PIN_CFG_EPIO21                      0x0000001e
+#define PIN_CFG_EPIO22                      0x0000001f
+#define PIN_CFG_EPIO23                      0x00000020
+#define PIN_CFG_EPIO24                      0x00000021
+#define PIN_CFG_EPIO25                      0x00000022
+#define PIN_CFG_EPIO26                      0x00000023
+#define PIN_CFG_EPIO27                      0x00000024
+#define PIN_CFG_EPIO28                      0x00000025
+#define PIN_CFG_EPIO29                      0x00000026
+#define PIN_CFG_EPIO30                      0x00000027
+#define PIN_CFG_EPIO31                      0x00000028
+
+/* EPIO definition */
+#define EPIO_CFG_NA                         0x00000000
+#define EPIO_CFG_EPIO0                      0x00000001
+#define EPIO_CFG_EPIO1                      0x00000002
+#define EPIO_CFG_EPIO2                      0x00000003
+#define EPIO_CFG_EPIO3                      0x00000004
+#define EPIO_CFG_EPIO4                      0x00000005
+#define EPIO_CFG_EPIO5                      0x00000006
+#define EPIO_CFG_EPIO6                      0x00000007
+#define EPIO_CFG_EPIO7                      0x00000008
+#define EPIO_CFG_EPIO8                      0x00000009
+#define EPIO_CFG_EPIO9                      0x0000000a
+#define EPIO_CFG_EPIO10                     0x0000000b
+#define EPIO_CFG_EPIO11                     0x0000000c
+#define EPIO_CFG_EPIO12                     0x0000000d
+#define EPIO_CFG_EPIO13                     0x0000000e
+#define EPIO_CFG_EPIO14                     0x0000000f
+#define EPIO_CFG_EPIO15                     0x00000010
+#define EPIO_CFG_EPIO16                     0x00000011
+#define EPIO_CFG_EPIO17                     0x00000012
+#define EPIO_CFG_EPIO18                     0x00000013
+#define EPIO_CFG_EPIO19                     0x00000014
+#define EPIO_CFG_EPIO20                     0x00000015
+#define EPIO_CFG_EPIO21                     0x00000016
+#define EPIO_CFG_EPIO22                     0x00000017
+#define EPIO_CFG_EPIO23                     0x00000018
+#define EPIO_CFG_EPIO24                     0x00000019
+#define EPIO_CFG_EPIO25                     0x0000001a
+#define EPIO_CFG_EPIO26                     0x0000001b
+#define EPIO_CFG_EPIO27                     0x0000001c
+#define EPIO_CFG_EPIO28                     0x0000001d
+#define EPIO_CFG_EPIO29                     0x0000001e
+#define EPIO_CFG_EPIO30                     0x0000001f
+#define EPIO_CFG_EPIO31                     0x00000020
+
+
+struct shared_hw_cfg {			 /* NVRAM Offset */
+	/* Up to 16 bytes of NULL-terminated string */
+	u8  part_num[16];		    /* 0x104 */
+
+	u32 config;			/* 0x114 */
+	#define SHARED_HW_CFG_MDIO_VOLTAGE_MASK             0x00000001
+		#define SHARED_HW_CFG_MDIO_VOLTAGE_SHIFT             0
+		#define SHARED_HW_CFG_MDIO_VOLTAGE_1_2V              0x00000000
+		#define SHARED_HW_CFG_MDIO_VOLTAGE_2_5V              0x00000001
+	#define SHARED_HW_CFG_MCP_RST_ON_CORE_RST_EN        0x00000002
+
+	#define SHARED_HW_CFG_PORT_SWAP                     0x00000004
+
+	#define SHARED_HW_CFG_BEACON_WOL_EN                 0x00000008
+
+	#define SHARED_HW_CFG_PCIE_GEN3_DISABLED            0x00000000
+	#define SHARED_HW_CFG_PCIE_GEN3_ENABLED             0x00000010
+
+	#define SHARED_HW_CFG_MFW_SELECT_MASK               0x00000700
+		#define SHARED_HW_CFG_MFW_SELECT_SHIFT               8
+	/* Whatever MFW found in NVM
+	   (if multiple found, priority order is: NC-SI, UMP, IPMI) */
+		#define SHARED_HW_CFG_MFW_SELECT_DEFAULT             0x00000000
+		#define SHARED_HW_CFG_MFW_SELECT_NC_SI               0x00000100
+		#define SHARED_HW_CFG_MFW_SELECT_UMP                 0x00000200
+		#define SHARED_HW_CFG_MFW_SELECT_IPMI                0x00000300
+	/* Use SPIO4 as an arbiter between: 0-NC_SI, 1-IPMI
+	  (can only be used when an add-in board, not BMC, pulls-down SPIO4) */
+		#define SHARED_HW_CFG_MFW_SELECT_SPIO4_NC_SI_IPMI    0x00000400
+	/* Use SPIO4 as an arbiter between: 0-UMP, 1-IPMI
+	  (can only be used when an add-in board, not BMC, pulls-down SPIO4) */
+		#define SHARED_HW_CFG_MFW_SELECT_SPIO4_UMP_IPMI      0x00000500
+	/* Use SPIO4 as an arbiter between: 0-NC-SI, 1-UMP
+	  (can only be used when an add-in board, not BMC, pulls-down SPIO4) */
+		#define SHARED_HW_CFG_MFW_SELECT_SPIO4_NC_SI_UMP     0x00000600
+
+	/* Adjust the PCIe G2 Tx amplitude driver for all Tx lanes. For
+	   backwards compatibility, value of 0 is disabling this feature.
+	    That means that though 0 is a valid value, it cannot be
+	    configured. */
+	#define SHARED_HW_CFG_G2_TX_DRIVE_MASK                        0x0000F000
+	#define SHARED_HW_CFG_G2_TX_DRIVE_SHIFT                       12
+
+	#define SHARED_HW_CFG_LED_MODE_MASK                 0x000f0000
+		#define SHARED_HW_CFG_LED_MODE_SHIFT                 16
+		#define SHARED_HW_CFG_LED_MAC1                       0x00000000
+		#define SHARED_HW_CFG_LED_PHY1                       0x00010000
+		#define SHARED_HW_CFG_LED_PHY2                       0x00020000
+		#define SHARED_HW_CFG_LED_PHY3                       0x00030000
+		#define SHARED_HW_CFG_LED_MAC2                       0x00040000
+		#define SHARED_HW_CFG_LED_PHY4                       0x00050000
+		#define SHARED_HW_CFG_LED_PHY5                       0x00060000
+		#define SHARED_HW_CFG_LED_PHY6                       0x00070000
+		#define SHARED_HW_CFG_LED_MAC3                       0x00080000
+		#define SHARED_HW_CFG_LED_PHY7                       0x00090000
+		#define SHARED_HW_CFG_LED_PHY9                       0x000a0000
+		#define SHARED_HW_CFG_LED_PHY11                      0x000b0000
+		#define SHARED_HW_CFG_LED_MAC4                       0x000c0000
+		#define SHARED_HW_CFG_LED_PHY8                       0x000d0000
+		#define SHARED_HW_CFG_LED_EXTPHY1                    0x000e0000
+
+
+	#define SHARED_HW_CFG_AN_ENABLE_MASK                0x3f000000
+		#define SHARED_HW_CFG_AN_ENABLE_SHIFT                24
+		#define SHARED_HW_CFG_AN_ENABLE_CL37                 0x01000000
+		#define SHARED_HW_CFG_AN_ENABLE_CL73                 0x02000000
+		#define SHARED_HW_CFG_AN_ENABLE_BAM                  0x04000000
+		#define SHARED_HW_CFG_AN_ENABLE_PARALLEL_DETECTION   0x08000000
+		#define SHARED_HW_CFG_AN_EN_SGMII_FIBER_AUTO_DETECT  0x10000000
+		#define SHARED_HW_CFG_AN_ENABLE_REMOTE_PHY           0x20000000
+
+	#define SHARED_HW_CFG_SRIOV_MASK                    0x40000000
+		#define SHARED_HW_CFG_SRIOV_DISABLED                 0x00000000
+		#define SHARED_HW_CFG_SRIOV_ENABLED                  0x40000000
+
+	#define SHARED_HW_CFG_ATC_MASK                      0x80000000
+		#define SHARED_HW_CFG_ATC_DISABLED                   0x00000000
+		#define SHARED_HW_CFG_ATC_ENABLED                    0x80000000
+
+	u32 config2;			    /* 0x118 */
+	/* one time auto detect grace period (in sec) */
+	#define SHARED_HW_CFG_GRACE_PERIOD_MASK             0x000000ff
+	#define SHARED_HW_CFG_GRACE_PERIOD_SHIFT                     0
+
+	#define SHARED_HW_CFG_PCIE_GEN2_ENABLED             0x00000100
+	#define SHARED_HW_CFG_PCIE_GEN2_DISABLED            0x00000000
+
+	/* The default value for the core clock is 250MHz and it is
+	   achieved by setting the clock change to 4 */
+	#define SHARED_HW_CFG_CLOCK_CHANGE_MASK             0x00000e00
+	#define SHARED_HW_CFG_CLOCK_CHANGE_SHIFT                     9
+
+	#define SHARED_HW_CFG_SMBUS_TIMING_MASK             0x00001000
+		#define SHARED_HW_CFG_SMBUS_TIMING_100KHZ            0x00000000
+		#define SHARED_HW_CFG_SMBUS_TIMING_400KHZ            0x00001000
+
+	#define SHARED_HW_CFG_HIDE_PORT1                    0x00002000
+
+	#define SHARED_HW_CFG_WOL_CAPABLE_MASK              0x00004000
+		#define SHARED_HW_CFG_WOL_CAPABLE_DISABLED           0x00000000
+		#define SHARED_HW_CFG_WOL_CAPABLE_ENABLED            0x00004000
+
+		/* Output low when PERST is asserted */
+	#define SHARED_HW_CFG_SPIO4_FOLLOW_PERST_MASK       0x00008000
+		#define SHARED_HW_CFG_SPIO4_FOLLOW_PERST_DISABLED    0x00000000
+		#define SHARED_HW_CFG_SPIO4_FOLLOW_PERST_ENABLED     0x00008000
+
+	#define SHARED_HW_CFG_PCIE_GEN2_PREEMPHASIS_MASK    0x00070000
+		#define SHARED_HW_CFG_PCIE_GEN2_PREEMPHASIS_SHIFT    16
+		#define SHARED_HW_CFG_PCIE_GEN2_PREEMPHASIS_HW       0x00000000
+		#define SHARED_HW_CFG_PCIE_GEN2_PREEMPHASIS_0DB      0x00010000
+		#define SHARED_HW_CFG_PCIE_GEN2_PREEMPHASIS_3_5DB    0x00020000
+		#define SHARED_HW_CFG_PCIE_GEN2_PREEMPHASIS_6_0DB    0x00030000
+
+	/*  The fan failure mechanism is usually related to the PHY type
+	      since the power consumption of the board is determined by the PHY.
+	      Currently, fan is required for most designs with SFX7101, BCM8727
+	      and BCM8481. If a fan is not required for a board which uses one
+	      of those PHYs, this field should be set to "Disabled". If a fan is
+	      required for a different PHY type, this option should be set to
+	      "Enabled". The fan failure indication is expected on SPIO5 */
+	#define SHARED_HW_CFG_FAN_FAILURE_MASK              0x00180000
+		#define SHARED_HW_CFG_FAN_FAILURE_SHIFT              19
+		#define SHARED_HW_CFG_FAN_FAILURE_PHY_TYPE           0x00000000
+		#define SHARED_HW_CFG_FAN_FAILURE_DISABLED           0x00080000
+		#define SHARED_HW_CFG_FAN_FAILURE_ENABLED            0x00100000
+
+		/* ASPM Power Management support */
+	#define SHARED_HW_CFG_ASPM_SUPPORT_MASK             0x00600000
+		#define SHARED_HW_CFG_ASPM_SUPPORT_SHIFT             21
+		#define SHARED_HW_CFG_ASPM_SUPPORT_L0S_L1_ENABLED    0x00000000
+		#define SHARED_HW_CFG_ASPM_SUPPORT_L0S_DISABLED      0x00200000
+		#define SHARED_HW_CFG_ASPM_SUPPORT_L1_DISABLED       0x00400000
+		#define SHARED_HW_CFG_ASPM_SUPPORT_L0S_L1_DISABLED   0x00600000
+
+	/* The value of PM_TL_IGNORE_REQS (bit0) in PCI register
+	   tl_control_0 (register 0x2800) */
+	#define SHARED_HW_CFG_PREVENT_L1_ENTRY_MASK         0x00800000
+		#define SHARED_HW_CFG_PREVENT_L1_ENTRY_DISABLED      0x00000000
+		#define SHARED_HW_CFG_PREVENT_L1_ENTRY_ENABLED       0x00800000
+
+	#define SHARED_HW_CFG_PORT_MODE_MASK                0x01000000
+		#define SHARED_HW_CFG_PORT_MODE_2                    0x00000000
+		#define SHARED_HW_CFG_PORT_MODE_4                    0x01000000
+
+	#define SHARED_HW_CFG_PATH_SWAP_MASK                0x02000000
+		#define SHARED_HW_CFG_PATH_SWAP_DISABLED             0x00000000
+		#define SHARED_HW_CFG_PATH_SWAP_ENABLED              0x02000000
+
+	/*  Set the MDC/MDIO access for the first external phy */
+	#define SHARED_HW_CFG_MDC_MDIO_ACCESS1_MASK         0x1C000000
+		#define SHARED_HW_CFG_MDC_MDIO_ACCESS1_SHIFT         26
+		#define SHARED_HW_CFG_MDC_MDIO_ACCESS1_PHY_TYPE      0x00000000
+		#define SHARED_HW_CFG_MDC_MDIO_ACCESS1_EMAC0         0x04000000
+		#define SHARED_HW_CFG_MDC_MDIO_ACCESS1_EMAC1         0x08000000
+		#define SHARED_HW_CFG_MDC_MDIO_ACCESS1_BOTH          0x0c000000
+		#define SHARED_HW_CFG_MDC_MDIO_ACCESS1_SWAPPED       0x10000000
+
+	/*  Set the MDC/MDIO access for the second external phy */
+	#define SHARED_HW_CFG_MDC_MDIO_ACCESS2_MASK         0xE0000000
+		#define SHARED_HW_CFG_MDC_MDIO_ACCESS2_SHIFT         29
+		#define SHARED_HW_CFG_MDC_MDIO_ACCESS2_PHY_TYPE      0x00000000
+		#define SHARED_HW_CFG_MDC_MDIO_ACCESS2_EMAC0         0x20000000
+		#define SHARED_HW_CFG_MDC_MDIO_ACCESS2_EMAC1         0x40000000
+		#define SHARED_HW_CFG_MDC_MDIO_ACCESS2_BOTH          0x60000000
+		#define SHARED_HW_CFG_MDC_MDIO_ACCESS2_SWAPPED       0x80000000
+
+
+	u32 power_dissipated;			/* 0x11c */
+	#define SHARED_HW_CFG_POWER_MGNT_SCALE_MASK         0x00ff0000
+		#define SHARED_HW_CFG_POWER_MGNT_SCALE_SHIFT         16
+		#define SHARED_HW_CFG_POWER_MGNT_UNKNOWN_SCALE       0x00000000
+		#define SHARED_HW_CFG_POWER_MGNT_DOT_1_WATT          0x00010000
+		#define SHARED_HW_CFG_POWER_MGNT_DOT_01_WATT         0x00020000
+		#define SHARED_HW_CFG_POWER_MGNT_DOT_001_WATT        0x00030000
+
+	#define SHARED_HW_CFG_POWER_DIS_CMN_MASK            0xff000000
+	#define SHARED_HW_CFG_POWER_DIS_CMN_SHIFT                    24
+
+	u32 ump_nc_si_config;			/* 0x120 */
+	#define SHARED_HW_CFG_UMP_NC_SI_MII_MODE_MASK       0x00000003
+		#define SHARED_HW_CFG_UMP_NC_SI_MII_MODE_SHIFT       0
+		#define SHARED_HW_CFG_UMP_NC_SI_MII_MODE_MAC         0x00000000
+		#define SHARED_HW_CFG_UMP_NC_SI_MII_MODE_PHY         0x00000001
+		#define SHARED_HW_CFG_UMP_NC_SI_MII_MODE_MII         0x00000000
+		#define SHARED_HW_CFG_UMP_NC_SI_MII_MODE_RMII        0x00000002
+
+	#define SHARED_HW_CFG_UMP_NC_SI_NUM_DEVS_MASK       0x00000f00
+		#define SHARED_HW_CFG_UMP_NC_SI_NUM_DEVS_SHIFT       8
+
+	#define SHARED_HW_CFG_UMP_NC_SI_EXT_PHY_TYPE_MASK   0x00ff0000
+		#define SHARED_HW_CFG_UMP_NC_SI_EXT_PHY_TYPE_SHIFT   16
+		#define SHARED_HW_CFG_UMP_NC_SI_EXT_PHY_TYPE_NONE    0x00000000
+		#define SHARED_HW_CFG_UMP_NC_SI_EXT_PHY_TYPE_BCM5221 0x00010000
+
+	u32 board;			/* 0x124 */
+	#define SHARED_HW_CFG_E3_I2C_MUX0_MASK              0x0000003F
+	#define SHARED_HW_CFG_E3_I2C_MUX0_SHIFT                      0
+	#define SHARED_HW_CFG_E3_I2C_MUX1_MASK              0x00000FC0
+	#define SHARED_HW_CFG_E3_I2C_MUX1_SHIFT                      6
+	/* Use the PIN_CFG_XXX defines on top */
+	#define SHARED_HW_CFG_BOARD_REV_MASK                0x00ff0000
+	#define SHARED_HW_CFG_BOARD_REV_SHIFT                        16
+
+	#define SHARED_HW_CFG_BOARD_MAJOR_VER_MASK          0x0f000000
+	#define SHARED_HW_CFG_BOARD_MAJOR_VER_SHIFT                  24
+
+	#define SHARED_HW_CFG_BOARD_MINOR_VER_MASK          0xf0000000
+	#define SHARED_HW_CFG_BOARD_MINOR_VER_SHIFT                  28
+
+	u32 wc_lane_config;				    /* 0x128 */
+	#define SHARED_HW_CFG_LANE_SWAP_CFG_MASK            0x0000FFFF
+		#define SHARED_HW_CFG_LANE_SWAP_CFG_SHIFT            0
+		#define SHARED_HW_CFG_LANE_SWAP_CFG_32103210         0x00001b1b
+		#define SHARED_HW_CFG_LANE_SWAP_CFG_32100123         0x00001be4
+		#define SHARED_HW_CFG_LANE_SWAP_CFG_01233210         0x0000e41b
+		#define SHARED_HW_CFG_LANE_SWAP_CFG_01230123         0x0000e4e4
+	#define SHARED_HW_CFG_LANE_SWAP_CFG_TX_MASK         0x000000FF
+	#define SHARED_HW_CFG_LANE_SWAP_CFG_TX_SHIFT                 0
+	#define SHARED_HW_CFG_LANE_SWAP_CFG_RX_MASK         0x0000FF00
+	#define SHARED_HW_CFG_LANE_SWAP_CFG_RX_SHIFT                 8
+
+	/* TX lane Polarity swap */
+	#define SHARED_HW_CFG_TX_LANE0_POL_FLIP_ENABLED     0x00010000
+	#define SHARED_HW_CFG_TX_LANE1_POL_FLIP_ENABLED     0x00020000
+	#define SHARED_HW_CFG_TX_LANE2_POL_FLIP_ENABLED     0x00040000
+	#define SHARED_HW_CFG_TX_LANE3_POL_FLIP_ENABLED     0x00080000
+	/* TX lane Polarity swap */
+	#define SHARED_HW_CFG_RX_LANE0_POL_FLIP_ENABLED     0x00100000
+	#define SHARED_HW_CFG_RX_LANE1_POL_FLIP_ENABLED     0x00200000
+	#define SHARED_HW_CFG_RX_LANE2_POL_FLIP_ENABLED     0x00400000
+	#define SHARED_HW_CFG_RX_LANE3_POL_FLIP_ENABLED     0x00800000
+
+	/*  Selects the port layout of the board */
+	#define SHARED_HW_CFG_E3_PORT_LAYOUT_MASK           0x0F000000
+		#define SHARED_HW_CFG_E3_PORT_LAYOUT_SHIFT           24
+		#define SHARED_HW_CFG_E3_PORT_LAYOUT_2P_01           0x00000000
+		#define SHARED_HW_CFG_E3_PORT_LAYOUT_2P_10           0x01000000
+		#define SHARED_HW_CFG_E3_PORT_LAYOUT_4P_0123         0x02000000
+		#define SHARED_HW_CFG_E3_PORT_LAYOUT_4P_1032         0x03000000
+		#define SHARED_HW_CFG_E3_PORT_LAYOUT_4P_2301         0x04000000
+		#define SHARED_HW_CFG_E3_PORT_LAYOUT_4P_3210         0x05000000
+};
+
+
+/****************************************************************************
+ * Port HW configuration                                                    *
+ ****************************************************************************/
+struct port_hw_cfg {		    /* port 0: 0x12c  port 1: 0x2bc */
+
+	u32 pci_id;
+	#define PORT_HW_CFG_PCI_VENDOR_ID_MASK              0xffff0000
+	#define PORT_HW_CFG_PCI_DEVICE_ID_MASK              0x0000ffff
+
+	u32 pci_sub_id;
+	#define PORT_HW_CFG_PCI_SUBSYS_DEVICE_ID_MASK       0xffff0000
+	#define PORT_HW_CFG_PCI_SUBSYS_VENDOR_ID_MASK       0x0000ffff
+
+	u32 power_dissipated;
+	#define PORT_HW_CFG_POWER_DIS_D0_MASK               0x000000ff
+	#define PORT_HW_CFG_POWER_DIS_D0_SHIFT                       0
+	#define PORT_HW_CFG_POWER_DIS_D1_MASK               0x0000ff00
+	#define PORT_HW_CFG_POWER_DIS_D1_SHIFT                       8
+	#define PORT_HW_CFG_POWER_DIS_D2_MASK               0x00ff0000
+	#define PORT_HW_CFG_POWER_DIS_D2_SHIFT                       16
+	#define PORT_HW_CFG_POWER_DIS_D3_MASK               0xff000000
+	#define PORT_HW_CFG_POWER_DIS_D3_SHIFT                       24
+
+	u32 power_consumed;
+	#define PORT_HW_CFG_POWER_CONS_D0_MASK              0x000000ff
+	#define PORT_HW_CFG_POWER_CONS_D0_SHIFT                      0
+	#define PORT_HW_CFG_POWER_CONS_D1_MASK              0x0000ff00
+	#define PORT_HW_CFG_POWER_CONS_D1_SHIFT                      8
+	#define PORT_HW_CFG_POWER_CONS_D2_MASK              0x00ff0000
+	#define PORT_HW_CFG_POWER_CONS_D2_SHIFT                      16
+	#define PORT_HW_CFG_POWER_CONS_D3_MASK              0xff000000
+	#define PORT_HW_CFG_POWER_CONS_D3_SHIFT                      24
+
+	u32 mac_upper;
+	#define PORT_HW_CFG_UPPERMAC_MASK                   0x0000ffff
+	#define PORT_HW_CFG_UPPERMAC_SHIFT                           0
+	u32 mac_lower;
+
+	u32 iscsi_mac_upper;  /* Upper 16 bits are always zeroes */
+	u32 iscsi_mac_lower;
+
+	u32 rdma_mac_upper;   /* Upper 16 bits are always zeroes */
+	u32 rdma_mac_lower;
+
+	u32 serdes_config;
+	#define PORT_HW_CFG_SERDES_TX_DRV_PRE_EMPHASIS_MASK 0x0000ffff
+	#define PORT_HW_CFG_SERDES_TX_DRV_PRE_EMPHASIS_SHIFT         0
+
+	#define PORT_HW_CFG_SERDES_RX_DRV_EQUALIZER_MASK    0xffff0000
+	#define PORT_HW_CFG_SERDES_RX_DRV_EQUALIZER_SHIFT            16
+
+
+	/*  Default values: 2P-64, 4P-32 */
+	u32 pf_config;					    /* 0x158 */
+	#define PORT_HW_CFG_PF_NUM_VF_MASK                  0x0000007F
+	#define PORT_HW_CFG_PF_NUM_VF_SHIFT                          0
+
+	/*  Default values: 17 */
+	#define PORT_HW_CFG_PF_NUM_MSIX_VECTORS_MASK        0x00007F00
+	#define PORT_HW_CFG_PF_NUM_MSIX_VECTORS_SHIFT                8
+
+	#define PORT_HW_CFG_ENABLE_FLR_MASK                 0x00010000
+	#define PORT_HW_CFG_FLR_ENABLED                     0x00010000
+
+	u32 vf_config;					    /* 0x15C */
+	#define PORT_HW_CFG_VF_NUM_MSIX_VECTORS_MASK        0x0000007F
+	#define PORT_HW_CFG_VF_NUM_MSIX_VECTORS_SHIFT                0
+
+	#define PORT_HW_CFG_VF_PCI_DEVICE_ID_MASK           0xFFFF0000
+	#define PORT_HW_CFG_VF_PCI_DEVICE_ID_SHIFT                   16
+
+	u32 mf_pci_id;					    /* 0x160 */
+	#define PORT_HW_CFG_MF_PCI_DEVICE_ID_MASK           0x0000FFFF
+	#define PORT_HW_CFG_MF_PCI_DEVICE_ID_SHIFT                   0
+
+	/*  Controls the TX laser of the SFP+ module */
+	u32 sfp_ctrl;					    /* 0x164 */
+	#define PORT_HW_CFG_TX_LASER_MASK                   0x000000FF
+		#define PORT_HW_CFG_TX_LASER_SHIFT                   0
+		#define PORT_HW_CFG_TX_LASER_MDIO                    0x00000000
+		#define PORT_HW_CFG_TX_LASER_GPIO0                   0x00000001
+		#define PORT_HW_CFG_TX_LASER_GPIO1                   0x00000002
+		#define PORT_HW_CFG_TX_LASER_GPIO2                   0x00000003
+		#define PORT_HW_CFG_TX_LASER_GPIO3                   0x00000004
+
+	/*  Controls the fault module LED of the SFP+ */
+	#define PORT_HW_CFG_FAULT_MODULE_LED_MASK           0x0000FF00
+		#define PORT_HW_CFG_FAULT_MODULE_LED_SHIFT           8
+		#define PORT_HW_CFG_FAULT_MODULE_LED_GPIO0           0x00000000
+		#define PORT_HW_CFG_FAULT_MODULE_LED_GPIO1           0x00000100
+		#define PORT_HW_CFG_FAULT_MODULE_LED_GPIO2           0x00000200
+		#define PORT_HW_CFG_FAULT_MODULE_LED_GPIO3           0x00000300
+		#define PORT_HW_CFG_FAULT_MODULE_LED_DISABLED        0x00000400
+
+	/*  The output pin TX_DIS that controls the TX laser of the SFP+
+	  module. Use the PIN_CFG_XXX defines on top */
+	u32 e3_sfp_ctrl;				    /* 0x168 */
+	#define PORT_HW_CFG_E3_TX_LASER_MASK                0x000000FF
+	#define PORT_HW_CFG_E3_TX_LASER_SHIFT                        0
+
+	/*  The output pin for SFPP_TYPE which turns on the Fault module LED */
+	#define PORT_HW_CFG_E3_FAULT_MDL_LED_MASK           0x0000FF00
+	#define PORT_HW_CFG_E3_FAULT_MDL_LED_SHIFT                   8
+
+	/*  The input pin MOD_ABS that indicates whether SFP+ module is
+	  present or not. Use the PIN_CFG_XXX defines on top */
+	#define PORT_HW_CFG_E3_MOD_ABS_MASK                 0x00FF0000
+	#define PORT_HW_CFG_E3_MOD_ABS_SHIFT                         16
+
+	/*  The output pin PWRDIS_SFP_X which disable the power of the SFP+
+	  module. Use the PIN_CFG_XXX defines on top */
+	#define PORT_HW_CFG_E3_PWR_DIS_MASK                 0xFF000000
+	#define PORT_HW_CFG_E3_PWR_DIS_SHIFT                         24
+
+	/*
+	 * The input pin which signals module transmit fault. Use the
+	 * PIN_CFG_XXX defines on top
+	 */
+	u32 e3_cmn_pin_cfg;				    /* 0x16C */
+	#define PORT_HW_CFG_E3_TX_FAULT_MASK                0x000000FF
+	#define PORT_HW_CFG_E3_TX_FAULT_SHIFT                        0
+
+	/*  The output pin which reset the PHY. Use the PIN_CFG_XXX defines on
+	 top */
+	#define PORT_HW_CFG_E3_PHY_RESET_MASK               0x0000FF00
+	#define PORT_HW_CFG_E3_PHY_RESET_SHIFT                       8
+
+	/*
+	 * The output pin which powers down the PHY. Use the PIN_CFG_XXX
+	 * defines on top
+	 */
+	#define PORT_HW_CFG_E3_PWR_DOWN_MASK                0x00FF0000
+	#define PORT_HW_CFG_E3_PWR_DOWN_SHIFT                        16
+
+	/*  The output pin values BSC_SEL which selects the I2C for this port
+	  in the I2C Mux */
+	#define PORT_HW_CFG_E3_I2C_MUX0_MASK                0x01000000
+	#define PORT_HW_CFG_E3_I2C_MUX1_MASK                0x02000000
+
+
+	/*
+	 * The input pin I_FAULT which indicate over-current has occurred.
+	 * Use the PIN_CFG_XXX defines on top
+	 */
+	u32 e3_cmn_pin_cfg1;				    /* 0x170 */
+	#define PORT_HW_CFG_E3_OVER_CURRENT_MASK            0x000000FF
+	#define PORT_HW_CFG_E3_OVER_CURRENT_SHIFT                    0
+	u32 reserved0[7];				    /* 0x174 */
+
+	u32 aeu_int_mask;				    /* 0x190 */
+
+	u32 media_type;					    /* 0x194 */
+	#define PORT_HW_CFG_MEDIA_TYPE_PHY0_MASK            0x000000FF
+	#define PORT_HW_CFG_MEDIA_TYPE_PHY0_SHIFT                    0
+
+	#define PORT_HW_CFG_MEDIA_TYPE_PHY1_MASK            0x0000FF00
+	#define PORT_HW_CFG_MEDIA_TYPE_PHY1_SHIFT                    8
+
+	#define PORT_HW_CFG_MEDIA_TYPE_PHY2_MASK            0x00FF0000
+	#define PORT_HW_CFG_MEDIA_TYPE_PHY2_SHIFT                    16
+
+	/*  4 times 16 bits for all 4 lanes. In case external PHY is present
+	      (not direct mode), those values will not take effect on the 4 XGXS
+	      lanes. For some external PHYs (such as 8706 and 8726) the values
+	      will be used to configure the external PHY  in those cases, not
+	      all 4 values are needed. */
+	u16 xgxs_config_rx[4];			/* 0x198 */
+	u16 xgxs_config_tx[4];			/* 0x1A0 */
+
+	/* For storing FCOE mac on shared memory */
+	u32 fcoe_fip_mac_upper;
+	#define PORT_HW_CFG_FCOE_UPPERMAC_MASK              0x0000ffff
+	#define PORT_HW_CFG_FCOE_UPPERMAC_SHIFT                      0
+	u32 fcoe_fip_mac_lower;
+
+	u32 fcoe_wwn_port_name_upper;
+	u32 fcoe_wwn_port_name_lower;
+
+	u32 fcoe_wwn_node_name_upper;
+	u32 fcoe_wwn_node_name_lower;
+
+	u32 Reserved1[49];				    /* 0x1C0 */
+
+	/*  Enable RJ45 magjack pair swapping on 10GBase-T PHY (0=default),
+	      84833 only */
+	u32 xgbt_phy_cfg;				    /* 0x284 */
+	#define PORT_HW_CFG_RJ45_PAIR_SWAP_MASK             0x000000FF
+	#define PORT_HW_CFG_RJ45_PAIR_SWAP_SHIFT                     0
+
+		u32 default_cfg;			    /* 0x288 */
+	#define PORT_HW_CFG_GPIO0_CONFIG_MASK               0x00000003
+		#define PORT_HW_CFG_GPIO0_CONFIG_SHIFT               0
+		#define PORT_HW_CFG_GPIO0_CONFIG_NA                  0x00000000
+		#define PORT_HW_CFG_GPIO0_CONFIG_LOW                 0x00000001
+		#define PORT_HW_CFG_GPIO0_CONFIG_HIGH                0x00000002
+		#define PORT_HW_CFG_GPIO0_CONFIG_INPUT               0x00000003
+
+	#define PORT_HW_CFG_GPIO1_CONFIG_MASK               0x0000000C
+		#define PORT_HW_CFG_GPIO1_CONFIG_SHIFT               2
+		#define PORT_HW_CFG_GPIO1_CONFIG_NA                  0x00000000
+		#define PORT_HW_CFG_GPIO1_CONFIG_LOW                 0x00000004
+		#define PORT_HW_CFG_GPIO1_CONFIG_HIGH                0x00000008
+		#define PORT_HW_CFG_GPIO1_CONFIG_INPUT               0x0000000c
+
+	#define PORT_HW_CFG_GPIO2_CONFIG_MASK               0x00000030
+		#define PORT_HW_CFG_GPIO2_CONFIG_SHIFT               4
+		#define PORT_HW_CFG_GPIO2_CONFIG_NA                  0x00000000
+		#define PORT_HW_CFG_GPIO2_CONFIG_LOW                 0x00000010
+		#define PORT_HW_CFG_GPIO2_CONFIG_HIGH                0x00000020
+		#define PORT_HW_CFG_GPIO2_CONFIG_INPUT               0x00000030
+
+	#define PORT_HW_CFG_GPIO3_CONFIG_MASK               0x000000C0
+		#define PORT_HW_CFG_GPIO3_CONFIG_SHIFT               6
+		#define PORT_HW_CFG_GPIO3_CONFIG_NA                  0x00000000
+		#define PORT_HW_CFG_GPIO3_CONFIG_LOW                 0x00000040
+		#define PORT_HW_CFG_GPIO3_CONFIG_HIGH                0x00000080
+		#define PORT_HW_CFG_GPIO3_CONFIG_INPUT               0x000000c0
+
+	/*  When KR link is required to be set to force which is not
+	      KR-compliant, this parameter determine what is the trigger for it.
+	      When GPIO is selected, low input will force the speed. Currently
+	      default speed is 1G. In the future, it may be widen to select the
+	      forced speed in with another parameter. Note when force-1G is
+	      enabled, it override option 56: Link Speed option. */
+	#define PORT_HW_CFG_FORCE_KR_ENABLER_MASK           0x00000F00
+		#define PORT_HW_CFG_FORCE_KR_ENABLER_SHIFT           8
+		#define PORT_HW_CFG_FORCE_KR_ENABLER_NOT_FORCED      0x00000000
+		#define PORT_HW_CFG_FORCE_KR_ENABLER_GPIO0_P0        0x00000100
+		#define PORT_HW_CFG_FORCE_KR_ENABLER_GPIO1_P0        0x00000200
+		#define PORT_HW_CFG_FORCE_KR_ENABLER_GPIO2_P0        0x00000300
+		#define PORT_HW_CFG_FORCE_KR_ENABLER_GPIO3_P0        0x00000400
+		#define PORT_HW_CFG_FORCE_KR_ENABLER_GPIO0_P1        0x00000500
+		#define PORT_HW_CFG_FORCE_KR_ENABLER_GPIO1_P1        0x00000600
+		#define PORT_HW_CFG_FORCE_KR_ENABLER_GPIO2_P1        0x00000700
+		#define PORT_HW_CFG_FORCE_KR_ENABLER_GPIO3_P1        0x00000800
+		#define PORT_HW_CFG_FORCE_KR_ENABLER_FORCED          0x00000900
+	/*  Enable to determine with which GPIO to reset the external phy */
+	#define PORT_HW_CFG_EXT_PHY_GPIO_RST_MASK           0x000F0000
+		#define PORT_HW_CFG_EXT_PHY_GPIO_RST_SHIFT           16
+		#define PORT_HW_CFG_EXT_PHY_GPIO_RST_PHY_TYPE        0x00000000
+		#define PORT_HW_CFG_EXT_PHY_GPIO_RST_GPIO0_P0        0x00010000
+		#define PORT_HW_CFG_EXT_PHY_GPIO_RST_GPIO1_P0        0x00020000
+		#define PORT_HW_CFG_EXT_PHY_GPIO_RST_GPIO2_P0        0x00030000
+		#define PORT_HW_CFG_EXT_PHY_GPIO_RST_GPIO3_P0        0x00040000
+		#define PORT_HW_CFG_EXT_PHY_GPIO_RST_GPIO0_P1        0x00050000
+		#define PORT_HW_CFG_EXT_PHY_GPIO_RST_GPIO1_P1        0x00060000
+		#define PORT_HW_CFG_EXT_PHY_GPIO_RST_GPIO2_P1        0x00070000
+		#define PORT_HW_CFG_EXT_PHY_GPIO_RST_GPIO3_P1        0x00080000
+
+	/*  Enable BAM on KR */
+	#define PORT_HW_CFG_ENABLE_BAM_ON_KR_MASK           0x00100000
+	#define PORT_HW_CFG_ENABLE_BAM_ON_KR_SHIFT                   20
+	#define PORT_HW_CFG_ENABLE_BAM_ON_KR_DISABLED                0x00000000
+	#define PORT_HW_CFG_ENABLE_BAM_ON_KR_ENABLED                 0x00100000
+
+	/*  Enable Common Mode Sense */
+	#define PORT_HW_CFG_ENABLE_CMS_MASK                 0x00200000
+	#define PORT_HW_CFG_ENABLE_CMS_SHIFT                         21
+	#define PORT_HW_CFG_ENABLE_CMS_DISABLED                      0x00000000
+	#define PORT_HW_CFG_ENABLE_CMS_ENABLED                       0x00200000
+
+	/*  Determine the Serdes electrical interface   */
+	#define PORT_HW_CFG_NET_SERDES_IF_MASK              0x0F000000
+	#define PORT_HW_CFG_NET_SERDES_IF_SHIFT                      24
+	#define PORT_HW_CFG_NET_SERDES_IF_SGMII                      0x00000000
+	#define PORT_HW_CFG_NET_SERDES_IF_XFI                        0x01000000
+	#define PORT_HW_CFG_NET_SERDES_IF_SFI                        0x02000000
+	#define PORT_HW_CFG_NET_SERDES_IF_KR                         0x03000000
+	#define PORT_HW_CFG_NET_SERDES_IF_DXGXS                      0x04000000
+	#define PORT_HW_CFG_NET_SERDES_IF_KR2                        0x05000000
+
+
+	u32 speed_capability_mask2;			    /* 0x28C */
+	#define PORT_HW_CFG_SPEED_CAPABILITY2_D3_MASK       0x0000FFFF
+		#define PORT_HW_CFG_SPEED_CAPABILITY2_D3_SHIFT       0
+		#define PORT_HW_CFG_SPEED_CAPABILITY2_D3_10M_FULL    0x00000001
+		#define PORT_HW_CFG_SPEED_CAPABILITY2_D3__           0x00000002
+		#define PORT_HW_CFG_SPEED_CAPABILITY2_D3___          0x00000004
+		#define PORT_HW_CFG_SPEED_CAPABILITY2_D3_100M_FULL   0x00000008
+		#define PORT_HW_CFG_SPEED_CAPABILITY2_D3_1G          0x00000010
+		#define PORT_HW_CFG_SPEED_CAPABILITY2_D3_2_DOT_5G    0x00000020
+		#define PORT_HW_CFG_SPEED_CAPABILITY2_D3_10G         0x00000040
+		#define PORT_HW_CFG_SPEED_CAPABILITY2_D3_20G         0x00000080
+
+	#define PORT_HW_CFG_SPEED_CAPABILITY2_D0_MASK       0xFFFF0000
+		#define PORT_HW_CFG_SPEED_CAPABILITY2_D0_SHIFT       16
+		#define PORT_HW_CFG_SPEED_CAPABILITY2_D0_10M_FULL    0x00010000
+		#define PORT_HW_CFG_SPEED_CAPABILITY2_D0__           0x00020000
+		#define PORT_HW_CFG_SPEED_CAPABILITY2_D0___          0x00040000
+		#define PORT_HW_CFG_SPEED_CAPABILITY2_D0_100M_FULL   0x00080000
+		#define PORT_HW_CFG_SPEED_CAPABILITY2_D0_1G          0x00100000
+		#define PORT_HW_CFG_SPEED_CAPABILITY2_D0_2_DOT_5G    0x00200000
+		#define PORT_HW_CFG_SPEED_CAPABILITY2_D0_10G         0x00400000
+		#define PORT_HW_CFG_SPEED_CAPABILITY2_D0_20G         0x00800000
+
+
+	/*  In the case where two media types (e.g. copper and fiber) are
+	      present and electrically active at the same time, PHY Selection
+	      will determine which of the two PHYs will be designated as the
+	      Active PHY and used for a connection to the network.  */
+	u32 multi_phy_config;				    /* 0x290 */
+	#define PORT_HW_CFG_PHY_SELECTION_MASK              0x00000007
+		#define PORT_HW_CFG_PHY_SELECTION_SHIFT              0
+		#define PORT_HW_CFG_PHY_SELECTION_HARDWARE_DEFAULT   0x00000000
+		#define PORT_HW_CFG_PHY_SELECTION_FIRST_PHY          0x00000001
+		#define PORT_HW_CFG_PHY_SELECTION_SECOND_PHY         0x00000002
+		#define PORT_HW_CFG_PHY_SELECTION_FIRST_PHY_PRIORITY 0x00000003
+		#define PORT_HW_CFG_PHY_SELECTION_SECOND_PHY_PRIORITY 0x00000004
+
+	/*  When enabled, all second phy nvram parameters will be swapped
+	      with the first phy parameters */
+	#define PORT_HW_CFG_PHY_SWAPPED_MASK                0x00000008
+		#define PORT_HW_CFG_PHY_SWAPPED_SHIFT                3
+		#define PORT_HW_CFG_PHY_SWAPPED_DISABLED             0x00000000
+		#define PORT_HW_CFG_PHY_SWAPPED_ENABLED              0x00000008
+
+
+	/*  Address of the second external phy */
+	u32 external_phy_config2;			    /* 0x294 */
+	#define PORT_HW_CFG_XGXS_EXT_PHY2_ADDR_MASK         0x000000FF
+	#define PORT_HW_CFG_XGXS_EXT_PHY2_ADDR_SHIFT                 0
+
+	/*  The second XGXS external PHY type */
+	#define PORT_HW_CFG_XGXS_EXT_PHY2_TYPE_MASK         0x0000FF00
+		#define PORT_HW_CFG_XGXS_EXT_PHY2_TYPE_SHIFT         8
+		#define PORT_HW_CFG_XGXS_EXT_PHY2_TYPE_DIRECT        0x00000000
+		#define PORT_HW_CFG_XGXS_EXT_PHY2_TYPE_BCM8071       0x00000100
+		#define PORT_HW_CFG_XGXS_EXT_PHY2_TYPE_BCM8072       0x00000200
+		#define PORT_HW_CFG_XGXS_EXT_PHY2_TYPE_BCM8073       0x00000300
+		#define PORT_HW_CFG_XGXS_EXT_PHY2_TYPE_BCM8705       0x00000400
+		#define PORT_HW_CFG_XGXS_EXT_PHY2_TYPE_BCM8706       0x00000500
+		#define PORT_HW_CFG_XGXS_EXT_PHY2_TYPE_BCM8726       0x00000600
+		#define PORT_HW_CFG_XGXS_EXT_PHY2_TYPE_BCM8481       0x00000700
+		#define PORT_HW_CFG_XGXS_EXT_PHY2_TYPE_SFX7101       0x00000800
+		#define PORT_HW_CFG_XGXS_EXT_PHY2_TYPE_BCM8727       0x00000900
+		#define PORT_HW_CFG_XGXS_EXT_PHY2_TYPE_BCM8727_NOC   0x00000a00
+		#define PORT_HW_CFG_XGXS_EXT_PHY2_TYPE_BCM84823      0x00000b00
+		#define PORT_HW_CFG_XGXS_EXT_PHY2_TYPE_BCM54640      0x00000c00
+		#define PORT_HW_CFG_XGXS_EXT_PHY2_TYPE_BCM84833      0x00000d00
+		#define PORT_HW_CFG_XGXS_EXT_PHY2_TYPE_BCM54618SE    0x00000e00
+		#define PORT_HW_CFG_XGXS_EXT_PHY2_TYPE_BCM8722       0x00000f00
+		#define PORT_HW_CFG_XGXS_EXT_PHY2_TYPE_BCM54616      0x00001000
+		#define PORT_HW_CFG_XGXS_EXT_PHY2_TYPE_FAILURE       0x0000fd00
+		#define PORT_HW_CFG_XGXS_EXT_PHY2_TYPE_NOT_CONN      0x0000ff00
+
+
+	/*  4 times 16 bits for all 4 lanes. For some external PHYs (such as
+	      8706, 8726 and 8727) not all 4 values are needed. */
+	u16 xgxs_config2_rx[4];				    /* 0x296 */
+	u16 xgxs_config2_tx[4];				    /* 0x2A0 */
+
+	u32 lane_config;
+	#define PORT_HW_CFG_LANE_SWAP_CFG_MASK              0x0000ffff
+		#define PORT_HW_CFG_LANE_SWAP_CFG_SHIFT              0
+		/* AN and forced */
+		#define PORT_HW_CFG_LANE_SWAP_CFG_01230123           0x00001b1b
+		/* forced only */
+		#define PORT_HW_CFG_LANE_SWAP_CFG_01233210           0x00001be4
+		/* forced only */
+		#define PORT_HW_CFG_LANE_SWAP_CFG_31203120           0x0000d8d8
+		/* forced only */
+		#define PORT_HW_CFG_LANE_SWAP_CFG_32103210           0x0000e4e4
+	#define PORT_HW_CFG_LANE_SWAP_CFG_TX_MASK           0x000000ff
+	#define PORT_HW_CFG_LANE_SWAP_CFG_TX_SHIFT                   0
+	#define PORT_HW_CFG_LANE_SWAP_CFG_RX_MASK           0x0000ff00
+	#define PORT_HW_CFG_LANE_SWAP_CFG_RX_SHIFT                   8
+	#define PORT_HW_CFG_LANE_SWAP_CFG_MASTER_MASK       0x0000c000
+	#define PORT_HW_CFG_LANE_SWAP_CFG_MASTER_SHIFT               14
+
+	/*  Indicate whether to swap the external phy polarity */
+	#define PORT_HW_CFG_SWAP_PHY_POLARITY_MASK          0x00010000
+		#define PORT_HW_CFG_SWAP_PHY_POLARITY_DISABLED       0x00000000
+		#define PORT_HW_CFG_SWAP_PHY_POLARITY_ENABLED        0x00010000
+
+
+	u32 external_phy_config;
+	#define PORT_HW_CFG_XGXS_EXT_PHY_ADDR_MASK          0x000000ff
+	#define PORT_HW_CFG_XGXS_EXT_PHY_ADDR_SHIFT                  0
+
+	#define PORT_HW_CFG_XGXS_EXT_PHY_TYPE_MASK          0x0000ff00
+		#define PORT_HW_CFG_XGXS_EXT_PHY_TYPE_SHIFT          8
+		#define PORT_HW_CFG_XGXS_EXT_PHY_TYPE_DIRECT         0x00000000
+		#define PORT_HW_CFG_XGXS_EXT_PHY_TYPE_BCM8071        0x00000100
+		#define PORT_HW_CFG_XGXS_EXT_PHY_TYPE_BCM8072        0x00000200
+		#define PORT_HW_CFG_XGXS_EXT_PHY_TYPE_BCM8073        0x00000300
+		#define PORT_HW_CFG_XGXS_EXT_PHY_TYPE_BCM8705        0x00000400
+		#define PORT_HW_CFG_XGXS_EXT_PHY_TYPE_BCM8706        0x00000500
+		#define PORT_HW_CFG_XGXS_EXT_PHY_TYPE_BCM8726        0x00000600
+		#define PORT_HW_CFG_XGXS_EXT_PHY_TYPE_BCM8481        0x00000700
+		#define PORT_HW_CFG_XGXS_EXT_PHY_TYPE_SFX7101        0x00000800
+		#define PORT_HW_CFG_XGXS_EXT_PHY_TYPE_BCM8727        0x00000900
+		#define PORT_HW_CFG_XGXS_EXT_PHY_TYPE_BCM8727_NOC    0x00000a00
+		#define PORT_HW_CFG_XGXS_EXT_PHY_TYPE_BCM84823       0x00000b00
+		#define PORT_HW_CFG_XGXS_EXT_PHY_TYPE_BCM54640       0x00000c00
+		#define PORT_HW_CFG_XGXS_EXT_PHY_TYPE_BCM84833       0x00000d00
+		#define PORT_HW_CFG_XGXS_EXT_PHY_TYPE_BCM54618SE     0x00000e00
+		#define PORT_HW_CFG_XGXS_EXT_PHY_TYPE_BCM8722        0x00000f00
+		#define PORT_HW_CFG_XGXS_EXT_PHY_TYPE_BCM54616       0x00001000
+		#define PORT_HW_CFG_XGXS_EXT_PHY_TYPE_DIRECT_WC      0x0000fc00
+		#define PORT_HW_CFG_XGXS_EXT_PHY_TYPE_FAILURE        0x0000fd00
+		#define PORT_HW_CFG_XGXS_EXT_PHY_TYPE_NOT_CONN       0x0000ff00
+
+	#define PORT_HW_CFG_SERDES_EXT_PHY_ADDR_MASK        0x00ff0000
+	#define PORT_HW_CFG_SERDES_EXT_PHY_ADDR_SHIFT                16
+
+	#define PORT_HW_CFG_SERDES_EXT_PHY_TYPE_MASK        0xff000000
+		#define PORT_HW_CFG_SERDES_EXT_PHY_TYPE_SHIFT        24
+		#define PORT_HW_CFG_SERDES_EXT_PHY_TYPE_DIRECT       0x00000000
+		#define PORT_HW_CFG_SERDES_EXT_PHY_TYPE_BCM5482      0x01000000
+		#define PORT_HW_CFG_SERDES_EXT_PHY_TYPE_DIRECT_SD    0x02000000
+		#define PORT_HW_CFG_SERDES_EXT_PHY_TYPE_NOT_CONN     0xff000000
+
+	u32 speed_capability_mask;
+	#define PORT_HW_CFG_SPEED_CAPABILITY_D3_MASK        0x0000ffff
+		#define PORT_HW_CFG_SPEED_CAPABILITY_D3_SHIFT        0
+		#define PORT_HW_CFG_SPEED_CAPABILITY_D3_10M_FULL     0x00000001
+		#define PORT_HW_CFG_SPEED_CAPABILITY_D3_10M_HALF     0x00000002
+		#define PORT_HW_CFG_SPEED_CAPABILITY_D3_100M_HALF    0x00000004
+		#define PORT_HW_CFG_SPEED_CAPABILITY_D3_100M_FULL    0x00000008
+		#define PORT_HW_CFG_SPEED_CAPABILITY_D3_1G           0x00000010
+		#define PORT_HW_CFG_SPEED_CAPABILITY_D3_2_5G         0x00000020
+		#define PORT_HW_CFG_SPEED_CAPABILITY_D3_10G          0x00000040
+		#define PORT_HW_CFG_SPEED_CAPABILITY_D3_20G          0x00000080
+		#define PORT_HW_CFG_SPEED_CAPABILITY_D3_RESERVED     0x0000f000
+
+	#define PORT_HW_CFG_SPEED_CAPABILITY_D0_MASK        0xffff0000
+		#define PORT_HW_CFG_SPEED_CAPABILITY_D0_SHIFT        16
+		#define PORT_HW_CFG_SPEED_CAPABILITY_D0_10M_FULL     0x00010000
+		#define PORT_HW_CFG_SPEED_CAPABILITY_D0_10M_HALF     0x00020000
+		#define PORT_HW_CFG_SPEED_CAPABILITY_D0_100M_HALF    0x00040000
+		#define PORT_HW_CFG_SPEED_CAPABILITY_D0_100M_FULL    0x00080000
+		#define PORT_HW_CFG_SPEED_CAPABILITY_D0_1G           0x00100000
+		#define PORT_HW_CFG_SPEED_CAPABILITY_D0_2_5G         0x00200000
+		#define PORT_HW_CFG_SPEED_CAPABILITY_D0_10G          0x00400000
+		#define PORT_HW_CFG_SPEED_CAPABILITY_D0_20G          0x00800000
+		#define PORT_HW_CFG_SPEED_CAPABILITY_D0_RESERVED     0xf0000000
+
+	/*  A place to hold the original MAC address as a backup */
+	u32 backup_mac_upper;			/* 0x2B4 */
+	u32 backup_mac_lower;			/* 0x2B8 */
+
+};
+
+
+/****************************************************************************
+ * Shared Feature configuration                                             *
+ ****************************************************************************/
+struct shared_feat_cfg {		 /* NVRAM Offset */
+
+	u32 config;			/* 0x450 */
+	#define SHARED_FEATURE_BMC_ECHO_MODE_EN             0x00000001
+
+	/* Use NVRAM values instead of HW default values */
+	#define SHARED_FEAT_CFG_OVERRIDE_PREEMPHASIS_CFG_MASK \
+							    0x00000002
+		#define SHARED_FEAT_CFG_OVERRIDE_PREEMPHASIS_CFG_DISABLED \
+								     0x00000000
+		#define SHARED_FEAT_CFG_OVERRIDE_PREEMPHASIS_CFG_ENABLED \
+								     0x00000002
+
+	#define SHARED_FEAT_CFG_NCSI_ID_METHOD_MASK         0x00000008
+		#define SHARED_FEAT_CFG_NCSI_ID_METHOD_SPIO          0x00000000
+		#define SHARED_FEAT_CFG_NCSI_ID_METHOD_NVRAM         0x00000008
+
+	#define SHARED_FEAT_CFG_NCSI_ID_MASK                0x00000030
+	#define SHARED_FEAT_CFG_NCSI_ID_SHIFT                        4
+
+	/* Do not use Vaux while Vmain is present (and the driver is
+	 * unloaded).
+	 */
+	#define SHARED_FEAT_CFG_PREVENT_VAUX_USAGE_WITH_VMAIN        0x00000080
+
+	/*  Override the OTP back to single function mode. When using GPIO,
+	      high means only SF, 0 is according to CLP configuration */
+	#define SHARED_FEAT_CFG_FORCE_SF_MODE_MASK          0x00000700
+		#define SHARED_FEAT_CFG_FORCE_SF_MODE_SHIFT          8
+		#define SHARED_FEAT_CFG_FORCE_SF_MODE_MF_ALLOWED     0x00000000
+		#define SHARED_FEAT_CFG_FORCE_SF_MODE_FORCED_SF      0x00000100
+		#define SHARED_FEAT_CFG_FORCE_SF_MODE_SPIO4          0x00000200
+		#define SHARED_FEAT_CFG_FORCE_SF_MODE_SWITCH_INDEPT  0x00000300
+		#define SHARED_FEAT_CFG_FORCE_SF_MODE_NIV_MODE       0x00000400
+
+	/* The interval in seconds between sending LLDP packets. Set to zero
+	   to disable the feature */
+	#define SHARED_FEAT_CFG_LLDP_XMIT_INTERVAL_MASK     0x00ff0000
+	#define SHARED_FEAT_CFG_LLDP_XMIT_INTERVAL_SHIFT             16
+
+	/* The assigned device type ID for LLDP usage */
+	#define SHARED_FEAT_CFG_LLDP_DEVICE_TYPE_ID_MASK    0xff000000
+	#define SHARED_FEAT_CFG_LLDP_DEVICE_TYPE_ID_SHIFT            24
+
+};
+
+
+/****************************************************************************
+ * Port Feature configuration                                               *
+ ****************************************************************************/
+struct port_feat_cfg {		    /* port 0: 0x454  port 1: 0x4c8 */
+
+	u32 config;
+	#define PORT_FEATURE_BAR1_SIZE_MASK                 0x0000000f
+		#define PORT_FEATURE_BAR1_SIZE_SHIFT                 0
+		#define PORT_FEATURE_BAR1_SIZE_DISABLED              0x00000000
+		#define PORT_FEATURE_BAR1_SIZE_64K                   0x00000001
+		#define PORT_FEATURE_BAR1_SIZE_128K                  0x00000002
+		#define PORT_FEATURE_BAR1_SIZE_256K                  0x00000003
+		#define PORT_FEATURE_BAR1_SIZE_512K                  0x00000004
+		#define PORT_FEATURE_BAR1_SIZE_1M                    0x00000005
+		#define PORT_FEATURE_BAR1_SIZE_2M                    0x00000006
+		#define PORT_FEATURE_BAR1_SIZE_4M                    0x00000007
+		#define PORT_FEATURE_BAR1_SIZE_8M                    0x00000008
+		#define PORT_FEATURE_BAR1_SIZE_16M                   0x00000009
+		#define PORT_FEATURE_BAR1_SIZE_32M                   0x0000000a
+		#define PORT_FEATURE_BAR1_SIZE_64M                   0x0000000b
+		#define PORT_FEATURE_BAR1_SIZE_128M                  0x0000000c
+		#define PORT_FEATURE_BAR1_SIZE_256M                  0x0000000d
+		#define PORT_FEATURE_BAR1_SIZE_512M                  0x0000000e
+		#define PORT_FEATURE_BAR1_SIZE_1G                    0x0000000f
+	#define PORT_FEATURE_BAR2_SIZE_MASK                 0x000000f0
+		#define PORT_FEATURE_BAR2_SIZE_SHIFT                 4
+		#define PORT_FEATURE_BAR2_SIZE_DISABLED              0x00000000
+		#define PORT_FEATURE_BAR2_SIZE_64K                   0x00000010
+		#define PORT_FEATURE_BAR2_SIZE_128K                  0x00000020
+		#define PORT_FEATURE_BAR2_SIZE_256K                  0x00000030
+		#define PORT_FEATURE_BAR2_SIZE_512K                  0x00000040
+		#define PORT_FEATURE_BAR2_SIZE_1M                    0x00000050
+		#define PORT_FEATURE_BAR2_SIZE_2M                    0x00000060
+		#define PORT_FEATURE_BAR2_SIZE_4M                    0x00000070
+		#define PORT_FEATURE_BAR2_SIZE_8M                    0x00000080
+		#define PORT_FEATURE_BAR2_SIZE_16M                   0x00000090
+		#define PORT_FEATURE_BAR2_SIZE_32M                   0x000000a0
+		#define PORT_FEATURE_BAR2_SIZE_64M                   0x000000b0
+		#define PORT_FEATURE_BAR2_SIZE_128M                  0x000000c0
+		#define PORT_FEATURE_BAR2_SIZE_256M                  0x000000d0
+		#define PORT_FEATURE_BAR2_SIZE_512M                  0x000000e0
+		#define PORT_FEATURE_BAR2_SIZE_1G                    0x000000f0
+
+	#define PORT_FEAT_CFG_DCBX_MASK                     0x00000100
+		#define PORT_FEAT_CFG_DCBX_DISABLED                  0x00000000
+		#define PORT_FEAT_CFG_DCBX_ENABLED                   0x00000100
+
+	#define PORT_FEAT_CFG_AUTOGREEEN_ENABLED            0x00000200
+
+	#define PORT_FEATURE_EN_SIZE_MASK                   0x0f000000
+	#define PORT_FEATURE_EN_SIZE_SHIFT                       24
+	#define PORT_FEATURE_WOL_ENABLED                         0x01000000
+	#define PORT_FEATURE_MBA_ENABLED                         0x02000000
+	#define PORT_FEATURE_MFW_ENABLED                         0x04000000
+
+	/* Advertise expansion ROM even if MBA is disabled */
+	#define PORT_FEAT_CFG_FORCE_EXP_ROM_ADV_MASK        0x08000000
+		#define PORT_FEAT_CFG_FORCE_EXP_ROM_ADV_DISABLED     0x00000000
+		#define PORT_FEAT_CFG_FORCE_EXP_ROM_ADV_ENABLED      0x08000000
+
+	/* Check the optic vendor via i2c against a list of approved modules
+	   in a separate nvram image */
+	#define PORT_FEAT_CFG_OPT_MDL_ENFRCMNT_MASK         0xe0000000
+		#define PORT_FEAT_CFG_OPT_MDL_ENFRCMNT_SHIFT         29
+		#define PORT_FEAT_CFG_OPT_MDL_ENFRCMNT_NO_ENFORCEMENT \
+								     0x00000000
+		#define PORT_FEAT_CFG_OPT_MDL_ENFRCMNT_DISABLE_TX_LASER \
+								     0x20000000
+		#define PORT_FEAT_CFG_OPT_MDL_ENFRCMNT_WARNING_MSG   0x40000000
+		#define PORT_FEAT_CFG_OPT_MDL_ENFRCMNT_POWER_DOWN    0x60000000
+
+	u32 wol_config;
+	/* Default is used when driver sets to "auto" mode */
+	#define PORT_FEATURE_WOL_DEFAULT_MASK               0x00000003
+		#define PORT_FEATURE_WOL_DEFAULT_SHIFT               0
+		#define PORT_FEATURE_WOL_DEFAULT_DISABLE             0x00000000
+		#define PORT_FEATURE_WOL_DEFAULT_MAGIC               0x00000001
+		#define PORT_FEATURE_WOL_DEFAULT_ACPI                0x00000002
+		#define PORT_FEATURE_WOL_DEFAULT_MAGIC_AND_ACPI      0x00000003
+	#define PORT_FEATURE_WOL_RES_PAUSE_CAP              0x00000004
+	#define PORT_FEATURE_WOL_RES_ASYM_PAUSE_CAP         0x00000008
+	#define PORT_FEATURE_WOL_ACPI_UPON_MGMT             0x00000010
+
+	u32 mba_config;
+	#define PORT_FEATURE_MBA_BOOT_AGENT_TYPE_MASK       0x00000007
+		#define PORT_FEATURE_MBA_BOOT_AGENT_TYPE_SHIFT       0
+		#define PORT_FEATURE_MBA_BOOT_AGENT_TYPE_PXE         0x00000000
+		#define PORT_FEATURE_MBA_BOOT_AGENT_TYPE_RPL         0x00000001
+		#define PORT_FEATURE_MBA_BOOT_AGENT_TYPE_BOOTP       0x00000002
+		#define PORT_FEATURE_MBA_BOOT_AGENT_TYPE_ISCSIB      0x00000003
+		#define PORT_FEATURE_MBA_BOOT_AGENT_TYPE_FCOE_BOOT   0x00000004
+		#define PORT_FEATURE_MBA_BOOT_AGENT_TYPE_NONE        0x00000007
+
+	#define PORT_FEATURE_MBA_BOOT_RETRY_MASK            0x00000038
+	#define PORT_FEATURE_MBA_BOOT_RETRY_SHIFT                    3
+
+	#define PORT_FEATURE_MBA_RES_PAUSE_CAP              0x00000100
+	#define PORT_FEATURE_MBA_RES_ASYM_PAUSE_CAP         0x00000200
+	#define PORT_FEATURE_MBA_SETUP_PROMPT_ENABLE        0x00000400
+	#define PORT_FEATURE_MBA_HOTKEY_MASK                0x00000800
+		#define PORT_FEATURE_MBA_HOTKEY_CTRL_S               0x00000000
+		#define PORT_FEATURE_MBA_HOTKEY_CTRL_B               0x00000800
+	#define PORT_FEATURE_MBA_EXP_ROM_SIZE_MASK          0x000ff000
+		#define PORT_FEATURE_MBA_EXP_ROM_SIZE_SHIFT          12
+		#define PORT_FEATURE_MBA_EXP_ROM_SIZE_DISABLED       0x00000000
+		#define PORT_FEATURE_MBA_EXP_ROM_SIZE_2K             0x00001000
+		#define PORT_FEATURE_MBA_EXP_ROM_SIZE_4K             0x00002000
+		#define PORT_FEATURE_MBA_EXP_ROM_SIZE_8K             0x00003000
+		#define PORT_FEATURE_MBA_EXP_ROM_SIZE_16K            0x00004000
+		#define PORT_FEATURE_MBA_EXP_ROM_SIZE_32K            0x00005000
+		#define PORT_FEATURE_MBA_EXP_ROM_SIZE_64K            0x00006000
+		#define PORT_FEATURE_MBA_EXP_ROM_SIZE_128K           0x00007000
+		#define PORT_FEATURE_MBA_EXP_ROM_SIZE_256K           0x00008000
+		#define PORT_FEATURE_MBA_EXP_ROM_SIZE_512K           0x00009000
+		#define PORT_FEATURE_MBA_EXP_ROM_SIZE_1M             0x0000a000
+		#define PORT_FEATURE_MBA_EXP_ROM_SIZE_2M             0x0000b000
+		#define PORT_FEATURE_MBA_EXP_ROM_SIZE_4M             0x0000c000
+		#define PORT_FEATURE_MBA_EXP_ROM_SIZE_8M             0x0000d000
+		#define PORT_FEATURE_MBA_EXP_ROM_SIZE_16M            0x0000e000
+		#define PORT_FEATURE_MBA_EXP_ROM_SIZE_32M            0x0000f000
+	#define PORT_FEATURE_MBA_MSG_TIMEOUT_MASK           0x00f00000
+	#define PORT_FEATURE_MBA_MSG_TIMEOUT_SHIFT                   20
+	#define PORT_FEATURE_MBA_BIOS_BOOTSTRAP_MASK        0x03000000
+		#define PORT_FEATURE_MBA_BIOS_BOOTSTRAP_SHIFT        24
+		#define PORT_FEATURE_MBA_BIOS_BOOTSTRAP_AUTO         0x00000000
+		#define PORT_FEATURE_MBA_BIOS_BOOTSTRAP_BBS          0x01000000
+		#define PORT_FEATURE_MBA_BIOS_BOOTSTRAP_INT18H       0x02000000
+		#define PORT_FEATURE_MBA_BIOS_BOOTSTRAP_INT19H       0x03000000
+	#define PORT_FEATURE_MBA_LINK_SPEED_MASK            0x3c000000
+		#define PORT_FEATURE_MBA_LINK_SPEED_SHIFT            26
+		#define PORT_FEATURE_MBA_LINK_SPEED_AUTO             0x00000000
+		#define PORT_FEATURE_MBA_LINK_SPEED_10HD             0x04000000
+		#define PORT_FEATURE_MBA_LINK_SPEED_10FD             0x08000000
+		#define PORT_FEATURE_MBA_LINK_SPEED_100HD            0x0c000000
+		#define PORT_FEATURE_MBA_LINK_SPEED_100FD            0x10000000
+		#define PORT_FEATURE_MBA_LINK_SPEED_1GBPS            0x14000000
+		#define PORT_FEATURE_MBA_LINK_SPEED_2_5GBPS          0x18000000
+		#define PORT_FEATURE_MBA_LINK_SPEED_10GBPS_CX4       0x1c000000
+		#define PORT_FEATURE_MBA_LINK_SPEED_20GBPS           0x20000000
+	u32 bmc_config;
+	#define PORT_FEATURE_BMC_LINK_OVERRIDE_MASK         0x00000001
+		#define PORT_FEATURE_BMC_LINK_OVERRIDE_DEFAULT       0x00000000
+		#define PORT_FEATURE_BMC_LINK_OVERRIDE_EN            0x00000001
+
+	u32 mba_vlan_cfg;
+	#define PORT_FEATURE_MBA_VLAN_TAG_MASK              0x0000ffff
+	#define PORT_FEATURE_MBA_VLAN_TAG_SHIFT                      0
+	#define PORT_FEATURE_MBA_VLAN_EN                    0x00010000
+
+	u32 resource_cfg;
+	#define PORT_FEATURE_RESOURCE_CFG_VALID             0x00000001
+	#define PORT_FEATURE_RESOURCE_CFG_DIAG              0x00000002
+	#define PORT_FEATURE_RESOURCE_CFG_L2                0x00000004
+	#define PORT_FEATURE_RESOURCE_CFG_ISCSI             0x00000008
+	#define PORT_FEATURE_RESOURCE_CFG_RDMA              0x00000010
+
+	u32 smbus_config;
+	#define PORT_FEATURE_SMBUS_ADDR_MASK                0x000000fe
+	#define PORT_FEATURE_SMBUS_ADDR_SHIFT                        1
+
+	u32 vf_config;
+	#define PORT_FEAT_CFG_VF_BAR2_SIZE_MASK             0x0000000f
+		#define PORT_FEAT_CFG_VF_BAR2_SIZE_SHIFT             0
+		#define PORT_FEAT_CFG_VF_BAR2_SIZE_DISABLED          0x00000000
+		#define PORT_FEAT_CFG_VF_BAR2_SIZE_4K                0x00000001
+		#define PORT_FEAT_CFG_VF_BAR2_SIZE_8K                0x00000002
+		#define PORT_FEAT_CFG_VF_BAR2_SIZE_16K               0x00000003
+		#define PORT_FEAT_CFG_VF_BAR2_SIZE_32K               0x00000004
+		#define PORT_FEAT_CFG_VF_BAR2_SIZE_64K               0x00000005
+		#define PORT_FEAT_CFG_VF_BAR2_SIZE_128K              0x00000006
+		#define PORT_FEAT_CFG_VF_BAR2_SIZE_256K              0x00000007
+		#define PORT_FEAT_CFG_VF_BAR2_SIZE_512K              0x00000008
+		#define PORT_FEAT_CFG_VF_BAR2_SIZE_1M                0x00000009
+		#define PORT_FEAT_CFG_VF_BAR2_SIZE_2M                0x0000000a
+		#define PORT_FEAT_CFG_VF_BAR2_SIZE_4M                0x0000000b
+		#define PORT_FEAT_CFG_VF_BAR2_SIZE_8M                0x0000000c
+		#define PORT_FEAT_CFG_VF_BAR2_SIZE_16M               0x0000000d
+		#define PORT_FEAT_CFG_VF_BAR2_SIZE_32M               0x0000000e
+		#define PORT_FEAT_CFG_VF_BAR2_SIZE_64M               0x0000000f
+
+	u32 link_config;    /* Used as HW defaults for the driver */
+	#define PORT_FEATURE_CONNECTED_SWITCH_MASK          0x03000000
+		#define PORT_FEATURE_CONNECTED_SWITCH_SHIFT          24
+		/* (forced) low speed switch (< 10G) */
+		#define PORT_FEATURE_CON_SWITCH_1G_SWITCH            0x00000000
+		/* (forced) high speed switch (>= 10G) */
+		#define PORT_FEATURE_CON_SWITCH_10G_SWITCH           0x01000000
+		#define PORT_FEATURE_CON_SWITCH_AUTO_DETECT          0x02000000
+		#define PORT_FEATURE_CON_SWITCH_ONE_TIME_DETECT      0x03000000
+
+	#define PORT_FEATURE_LINK_SPEED_MASK                0x000f0000
+		#define PORT_FEATURE_LINK_SPEED_SHIFT                16
+		#define PORT_FEATURE_LINK_SPEED_AUTO                 0x00000000
+		#define PORT_FEATURE_LINK_SPEED_10M_FULL             0x00010000
+		#define PORT_FEATURE_LINK_SPEED_10M_HALF             0x00020000
+		#define PORT_FEATURE_LINK_SPEED_100M_HALF            0x00030000
+		#define PORT_FEATURE_LINK_SPEED_100M_FULL            0x00040000
+		#define PORT_FEATURE_LINK_SPEED_1G                   0x00050000
+		#define PORT_FEATURE_LINK_SPEED_2_5G                 0x00060000
+		#define PORT_FEATURE_LINK_SPEED_10G_CX4              0x00070000
+		#define PORT_FEATURE_LINK_SPEED_20G                  0x00080000
+
+	#define PORT_FEATURE_FLOW_CONTROL_MASK              0x00000700
+		#define PORT_FEATURE_FLOW_CONTROL_SHIFT              8
+		#define PORT_FEATURE_FLOW_CONTROL_AUTO               0x00000000
+		#define PORT_FEATURE_FLOW_CONTROL_TX                 0x00000100
+		#define PORT_FEATURE_FLOW_CONTROL_RX                 0x00000200
+		#define PORT_FEATURE_FLOW_CONTROL_BOTH               0x00000300
+		#define PORT_FEATURE_FLOW_CONTROL_NONE               0x00000400
+
+	/* The default for MCP link configuration,
+	   uses the same defines as link_config */
+	u32 mfw_wol_link_cfg;
+
+	/* The default for the driver of the second external phy,
+	   uses the same defines as link_config */
+	u32 link_config2;				    /* 0x47C */
+
+	/* The default for MCP of the second external phy,
+	   uses the same defines as link_config */
+	u32 mfw_wol_link_cfg2;				    /* 0x480 */
+
+	u32 Reserved2[17];				    /* 0x484 */
+
+};
+
+
+/****************************************************************************
+ * Device Information                                                       *
+ ****************************************************************************/
+struct shm_dev_info {				/* size */
+
+	u32    bc_rev; /* 8 bits each: major, minor, build */	       /* 4 */
+
+	struct shared_hw_cfg     shared_hw_config;	      /* 40 */
+
+	struct port_hw_cfg       port_hw_config[PORT_MAX];     /* 400*2=800 */
+
+	struct shared_feat_cfg   shared_feature_config;		   /* 4 */
+
+	struct port_feat_cfg     port_feature_config[PORT_MAX];/* 116*2=232 */
+
+};
+
+struct extended_dev_info_shared_cfg {             /* NVRAM OFFSET */
+
+	/*  Threshold in celcius to start using the fan */
+	u32 temperature_monitor1;                           /* 0x4000 */
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_THRESH_MASK     0x0000007F
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_THRESH_SHIFT    0
+
+	/*  Threshold in celcius to shut down the board */
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_THRESH_MASK    0x00007F00
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_THRESH_SHIFT   8
+
+	/*  EPIO of fan temperature status */
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_MASK       0x00FF0000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_SHIFT      16
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_NA         0x00000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_EPIO0      0x00010000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_EPIO1      0x00020000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_EPIO2      0x00030000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_EPIO3      0x00040000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_EPIO4      0x00050000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_EPIO5      0x00060000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_EPIO6      0x00070000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_EPIO7      0x00080000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_EPIO8      0x00090000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_EPIO9      0x000a0000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_EPIO10     0x000b0000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_EPIO11     0x000c0000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_EPIO12     0x000d0000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_EPIO13     0x000e0000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_EPIO14     0x000f0000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_EPIO15     0x00100000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_EPIO16     0x00110000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_EPIO17     0x00120000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_EPIO18     0x00130000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_EPIO19     0x00140000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_EPIO20     0x00150000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_EPIO21     0x00160000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_EPIO22     0x00170000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_EPIO23     0x00180000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_EPIO24     0x00190000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_EPIO25     0x001a0000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_EPIO26     0x001b0000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_EPIO27     0x001c0000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_EPIO28     0x001d0000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_EPIO29     0x001e0000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_EPIO30     0x001f0000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_FAN_EPIO_EPIO31     0x00200000
+
+	/*  EPIO of shut down temperature status */
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_MASK      0xFF000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_SHIFT     24
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_NA        0x00000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_EPIO0     0x01000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_EPIO1     0x02000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_EPIO2     0x03000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_EPIO3     0x04000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_EPIO4     0x05000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_EPIO5     0x06000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_EPIO6     0x07000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_EPIO7     0x08000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_EPIO8     0x09000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_EPIO9     0x0a000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_EPIO10    0x0b000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_EPIO11    0x0c000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_EPIO12    0x0d000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_EPIO13    0x0e000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_EPIO14    0x0f000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_EPIO15    0x10000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_EPIO16    0x11000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_EPIO17    0x12000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_EPIO18    0x13000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_EPIO19    0x14000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_EPIO20    0x15000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_EPIO21    0x16000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_EPIO22    0x17000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_EPIO23    0x18000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_EPIO24    0x19000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_EPIO25    0x1a000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_EPIO26    0x1b000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_EPIO27    0x1c000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_EPIO28    0x1d000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_EPIO29    0x1e000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_EPIO30    0x1f000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SHUT_EPIO_EPIO31    0x20000000
+
+
+	/*  EPIO of shut down temperature status */
+	u32 temperature_monitor2;                           /* 0x4004 */
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_PERIOD_MASK         0x0000FFFF
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_PERIOD_SHIFT        0
+
+
+	/*  MFW flavor to be used */
+	u32 mfw_cfg;                                        /* 0x4008 */
+	#define EXTENDED_DEV_INFO_SHARED_CFG_MFW_FLAVOR_MASK          0x000000FF
+	#define EXTENDED_DEV_INFO_SHARED_CFG_MFW_FLAVOR_SHIFT         0
+	#define EXTENDED_DEV_INFO_SHARED_CFG_MFW_FLAVOR_NA            0x00000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_MFW_FLAVOR_A             0x00000001
+
+
+	u32 smbus_config;                                   /* 0x400C */
+	#define EXTENDED_DEV_INFO_SHARED_CFG_SMBUS_ADDR_MASK          0x000000FF
+	#define EXTENDED_DEV_INFO_SHARED_CFG_SMBUS_ADDR_SHIFT         0
+
+
+	/*  Switching regulator loop gain */
+	u32 board_cfg;                                      /* 0x4010 */
+	#define EXTENDED_DEV_INFO_SHARED_CFG_LOOP_GAIN_MASK           0x0000000F
+	#define EXTENDED_DEV_INFO_SHARED_CFG_LOOP_GAIN_SHIFT          0
+	#define EXTENDED_DEV_INFO_SHARED_CFG_LOOP_GAIN_HW_DEFAULT     0x00000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_LOOP_GAIN_X2             0x00000008
+	#define EXTENDED_DEV_INFO_SHARED_CFG_LOOP_GAIN_X4             0x00000009
+	#define EXTENDED_DEV_INFO_SHARED_CFG_LOOP_GAIN_X8             0x0000000a
+	#define EXTENDED_DEV_INFO_SHARED_CFG_LOOP_GAIN_X16            0x0000000b
+	#define EXTENDED_DEV_INFO_SHARED_CFG_LOOP_GAIN_DIV8           0x0000000c
+	#define EXTENDED_DEV_INFO_SHARED_CFG_LOOP_GAIN_DIV4           0x0000000d
+	#define EXTENDED_DEV_INFO_SHARED_CFG_LOOP_GAIN_DIV2           0x0000000e
+	#define EXTENDED_DEV_INFO_SHARED_CFG_LOOP_GAIN_X1             0x0000000f
+
+	/*  whether shadow swim feature is supported */
+	#define EXTENDED_DEV_INFO_SHARED_CFG_SHADOW_SWIM_MASK         0x00000100
+	#define EXTENDED_DEV_INFO_SHARED_CFG_SHADOW_SWIM_SHIFT        8
+	#define EXTENDED_DEV_INFO_SHARED_CFG_SHADOW_SWIM_DISABLED     0x00000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_SHADOW_SWIM_ENABLED      0x00000100
+
+
+	/*  Threshold in celcius for max continuous operation */
+	u32 temperature_report;                             /* 0x4014 */
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_MCOT_MASK           0x0000007F
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_MCOT_SHIFT          0
+
+	/*  Threshold in celcius for sensor caution */
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SCT_MASK            0x00007F00
+	#define EXTENDED_DEV_INFO_SHARED_CFG_TEMP_SCT_SHIFT           8
+
+
+	/*  wwn node prefix to be used (unless value is 0) */
+	u32 wwn_prefix;                                     /* 0x4018 */
+	#define EXTENDED_DEV_INFO_SHARED_CFG_WWN_NODE_PREFIX0_MASK    0x000000FF
+	#define EXTENDED_DEV_INFO_SHARED_CFG_WWN_NODE_PREFIX0_SHIFT   0
+
+	#define EXTENDED_DEV_INFO_SHARED_CFG_WWN_NODE_PREFIX1_MASK    0x0000FF00
+	#define EXTENDED_DEV_INFO_SHARED_CFG_WWN_NODE_PREFIX1_SHIFT   8
+
+	/*  wwn port prefix to be used (unless value is 0) */
+	#define EXTENDED_DEV_INFO_SHARED_CFG_WWN_PORT_PREFIX0_MASK    0x00FF0000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_WWN_PORT_PREFIX0_SHIFT   16
+
+	/*  wwn port prefix to be used (unless value is 0) */
+	#define EXTENDED_DEV_INFO_SHARED_CFG_WWN_PORT_PREFIX1_MASK    0xFF000000
+	#define EXTENDED_DEV_INFO_SHARED_CFG_WWN_PORT_PREFIX1_SHIFT   24
+
+};
+
+
+#if !defined(__LITTLE_ENDIAN) && !defined(__BIG_ENDIAN)
+	#error "Missing either LITTLE_ENDIAN or BIG_ENDIAN definition."
+#endif
+
+#define FUNC_0              0
+#define FUNC_1              1
+#define FUNC_2              2
+#define FUNC_3              3
+#define FUNC_4              4
+#define FUNC_5              5
+#define FUNC_6              6
+#define FUNC_7              7
+#define E1_FUNC_MAX         2
+#define E1H_FUNC_MAX            8
+#define E2_FUNC_MAX         4   /* per path */
+
+#define VN_0                0
+#define VN_1                1
+#define VN_2                2
+#define VN_3                3
+#define E1VN_MAX            1
+#define E1HVN_MAX           4
+
+#define E2_VF_MAX           64  /* HC_REG_VF_CONFIGURATION_SIZE */
+/* This value (in milliseconds) determines the frequency of the driver
+ * issuing the PULSE message code.  The firmware monitors this periodic
+ * pulse to determine when to switch to an OS-absent mode. */
+#define DRV_PULSE_PERIOD_MS     250
+
+/* This value (in milliseconds) determines how long the driver should
+ * wait for an acknowledgement from the firmware before timing out.  Once
+ * the firmware has timed out, the driver will assume there is no firmware
+ * running and there won't be any firmware-driver synchronization during a
+ * driver reset. */
+#define FW_ACK_TIME_OUT_MS      5000
+
+#define FW_ACK_POLL_TIME_MS     1
+
+#define FW_ACK_NUM_OF_POLL  (FW_ACK_TIME_OUT_MS/FW_ACK_POLL_TIME_MS)
+
+/****************************************************************************
+ * Driver <-> FW Mailbox                                                    *
+ ****************************************************************************/
+struct drv_port_mb {
+
+	u32 link_status;
+	/* Driver should update this field on any link change event */
+
+	#define LINK_STATUS_LINK_FLAG_MASK			0x00000001
+	#define LINK_STATUS_LINK_UP				0x00000001
+	#define LINK_STATUS_SPEED_AND_DUPLEX_MASK		0x0000001E
+	#define LINK_STATUS_SPEED_AND_DUPLEX_AN_NOT_COMPLETE	(0<<1)
+	#define LINK_STATUS_SPEED_AND_DUPLEX_10THD		(1<<1)
+	#define LINK_STATUS_SPEED_AND_DUPLEX_10TFD		(2<<1)
+	#define LINK_STATUS_SPEED_AND_DUPLEX_100TXHD		(3<<1)
+	#define LINK_STATUS_SPEED_AND_DUPLEX_100T4		(4<<1)
+	#define LINK_STATUS_SPEED_AND_DUPLEX_100TXFD		(5<<1)
+	#define LINK_STATUS_SPEED_AND_DUPLEX_1000THD		(6<<1)
+	#define LINK_STATUS_SPEED_AND_DUPLEX_1000TFD		(7<<1)
+	#define LINK_STATUS_SPEED_AND_DUPLEX_1000XFD		(7<<1)
+	#define LINK_STATUS_SPEED_AND_DUPLEX_2500THD		(8<<1)
+	#define LINK_STATUS_SPEED_AND_DUPLEX_2500TFD		(9<<1)
+	#define LINK_STATUS_SPEED_AND_DUPLEX_2500XFD		(9<<1)
+	#define LINK_STATUS_SPEED_AND_DUPLEX_10GTFD		(10<<1)
+	#define LINK_STATUS_SPEED_AND_DUPLEX_10GXFD		(10<<1)
+	#define LINK_STATUS_SPEED_AND_DUPLEX_20GTFD		(11<<1)
+	#define LINK_STATUS_SPEED_AND_DUPLEX_20GXFD		(11<<1)
+
+	#define LINK_STATUS_AUTO_NEGOTIATE_FLAG_MASK		0x00000020
+	#define LINK_STATUS_AUTO_NEGOTIATE_ENABLED		0x00000020
+
+	#define LINK_STATUS_AUTO_NEGOTIATE_COMPLETE		0x00000040
+	#define LINK_STATUS_PARALLEL_DETECTION_FLAG_MASK	0x00000080
+	#define LINK_STATUS_PARALLEL_DETECTION_USED		0x00000080
+
+	#define LINK_STATUS_LINK_PARTNER_1000TFD_CAPABLE	0x00000200
+	#define LINK_STATUS_LINK_PARTNER_1000THD_CAPABLE	0x00000400
+	#define LINK_STATUS_LINK_PARTNER_100T4_CAPABLE		0x00000800
+	#define LINK_STATUS_LINK_PARTNER_100TXFD_CAPABLE	0x00001000
+	#define LINK_STATUS_LINK_PARTNER_100TXHD_CAPABLE	0x00002000
+	#define LINK_STATUS_LINK_PARTNER_10TFD_CAPABLE		0x00004000
+	#define LINK_STATUS_LINK_PARTNER_10THD_CAPABLE		0x00008000
+
+	#define LINK_STATUS_TX_FLOW_CONTROL_FLAG_MASK		0x00010000
+	#define LINK_STATUS_TX_FLOW_CONTROL_ENABLED		0x00010000
+
+	#define LINK_STATUS_RX_FLOW_CONTROL_FLAG_MASK		0x00020000
+	#define LINK_STATUS_RX_FLOW_CONTROL_ENABLED		0x00020000
+
+	#define LINK_STATUS_LINK_PARTNER_FLOW_CONTROL_MASK	0x000C0000
+	#define LINK_STATUS_LINK_PARTNER_NOT_PAUSE_CAPABLE	(0<<18)
+	#define LINK_STATUS_LINK_PARTNER_SYMMETRIC_PAUSE	(1<<18)
+	#define LINK_STATUS_LINK_PARTNER_ASYMMETRIC_PAUSE	(2<<18)
+	#define LINK_STATUS_LINK_PARTNER_BOTH_PAUSE		(3<<18)
+
+	#define LINK_STATUS_SERDES_LINK				0x00100000
+
+	#define LINK_STATUS_LINK_PARTNER_2500XFD_CAPABLE	0x00200000
+	#define LINK_STATUS_LINK_PARTNER_2500XHD_CAPABLE	0x00400000
+	#define LINK_STATUS_LINK_PARTNER_10GXFD_CAPABLE		0x00800000
+	#define LINK_STATUS_LINK_PARTNER_20GXFD_CAPABLE		0x10000000
+
+	#define LINK_STATUS_PFC_ENABLED				0x20000000
+
+	#define LINK_STATUS_PHYSICAL_LINK_FLAG			0x40000000
+
+	u32 port_stx;
+
+	u32 stat_nig_timer;
+
+	/* MCP firmware does not use this field */
+	u32 ext_phy_fw_version;
+
+};
+
+
+struct drv_func_mb {
+
+	u32 drv_mb_header;
+	#define DRV_MSG_CODE_MASK                       0xffff0000
+	#define DRV_MSG_CODE_LOAD_REQ                   0x10000000
+	#define DRV_MSG_CODE_LOAD_DONE                  0x11000000
+	#define DRV_MSG_CODE_UNLOAD_REQ_WOL_EN          0x20000000
+	#define DRV_MSG_CODE_UNLOAD_REQ_WOL_DIS         0x20010000
+	#define DRV_MSG_CODE_UNLOAD_REQ_WOL_MCP         0x20020000
+	#define DRV_MSG_CODE_UNLOAD_DONE                0x21000000
+	#define DRV_MSG_CODE_DCC_OK                     0x30000000
+	#define DRV_MSG_CODE_DCC_FAILURE                0x31000000
+	#define DRV_MSG_CODE_DIAG_ENTER_REQ             0x50000000
+	#define DRV_MSG_CODE_DIAG_EXIT_REQ              0x60000000
+	#define DRV_MSG_CODE_VALIDATE_KEY               0x70000000
+	#define DRV_MSG_CODE_GET_CURR_KEY               0x80000000
+	#define DRV_MSG_CODE_GET_UPGRADE_KEY            0x81000000
+	#define DRV_MSG_CODE_GET_MANUF_KEY              0x82000000
+	#define DRV_MSG_CODE_LOAD_L2B_PRAM              0x90000000
+	/*
+	 * The optic module verification command requires bootcode
+	 * v5.0.6 or later, te specific optic module verification command
+	 * requires bootcode v5.2.12 or later
+	 */
+	#define DRV_MSG_CODE_VRFY_FIRST_PHY_OPT_MDL     0xa0000000
+	#define REQ_BC_VER_4_VRFY_FIRST_PHY_OPT_MDL     0x00050006
+	#define DRV_MSG_CODE_VRFY_SPECIFIC_PHY_OPT_MDL  0xa1000000
+	#define REQ_BC_VER_4_VRFY_SPECIFIC_PHY_OPT_MDL  0x00050234
+	#define DRV_MSG_CODE_VRFY_VNTAG_SUPPORTED       0xa2000000
+	#define REQ_BC_VER_4_VRFY_VNTAG_SUPPORTED       0x00070002
+	#define REQ_BC_VER_4_SFP_TX_DISABLE_SUPPORTED   0x00070014
+	#define REQ_BC_VER_4_PFC_STATS_SUPPORTED        0x00070201
+	#define REQ_BC_VER_4_FCOE_FEATURES              0x00070209
+
+	#define DRV_MSG_CODE_DCBX_ADMIN_PMF_MSG         0xb0000000
+	#define DRV_MSG_CODE_DCBX_PMF_DRV_OK            0xb2000000
+
+	#define DRV_MSG_CODE_VF_DISABLED_DONE           0xc0000000
+
+	#define DRV_MSG_CODE_VNTAG_DRIVER_SETMAC        0xd0000000
+	#define DRV_MSG_CODE_VNTAG_LISTGET_ACK          0xd1000000
+	#define DRV_MSG_CODE_VNTAG_LISTSET_ACK          0xd2000000
+	#define DRV_MSG_CODE_VNTAG_STATSGET_ACK         0xd3000000
+	#define DRV_MSG_CODE_VNTAG_VIFSET_ACK           0xd4000000
+
+	#define DRV_MSG_CODE_DRV_INFO_ACK               0xd8000000
+	#define DRV_MSG_CODE_DRV_INFO_NACK              0xd9000000
+
+	#define DRV_MSG_CODE_SET_MF_BW                  0xe0000000
+	#define REQ_BC_VER_4_SET_MF_BW                  0x00060202
+	#define DRV_MSG_CODE_SET_MF_BW_ACK              0xe1000000
+
+	#define DRV_MSG_CODE_LINK_STATUS_CHANGED        0x01000000
+
+	#define BIOS_MSG_CODE_LIC_CHALLENGE             0xff010000
+	#define BIOS_MSG_CODE_LIC_RESPONSE              0xff020000
+	#define BIOS_MSG_CODE_VIRT_MAC_PRIM             0xff030000
+	#define BIOS_MSG_CODE_VIRT_MAC_ISCSI            0xff040000
+
+	#define DRV_MSG_SEQ_NUMBER_MASK                 0x0000ffff
+
+	u32 drv_mb_param;
+	#define DRV_MSG_CODE_SET_MF_BW_MIN_MASK         0x00ff0000
+	#define DRV_MSG_CODE_SET_MF_BW_MAX_MASK         0xff000000
+
+	u32 fw_mb_header;
+	#define FW_MSG_CODE_MASK                        0xffff0000
+	#define FW_MSG_CODE_DRV_LOAD_COMMON             0x10100000
+	#define FW_MSG_CODE_DRV_LOAD_PORT               0x10110000
+	#define FW_MSG_CODE_DRV_LOAD_FUNCTION           0x10120000
+	/* Load common chip is supported from bc 6.0.0  */
+	#define REQ_BC_VER_4_DRV_LOAD_COMMON_CHIP       0x00060000
+	#define FW_MSG_CODE_DRV_LOAD_COMMON_CHIP        0x10130000
+
+	#define FW_MSG_CODE_DRV_LOAD_REFUSED            0x10200000
+	#define FW_MSG_CODE_DRV_LOAD_DONE               0x11100000
+	#define FW_MSG_CODE_DRV_UNLOAD_COMMON           0x20100000
+	#define FW_MSG_CODE_DRV_UNLOAD_PORT             0x20110000
+	#define FW_MSG_CODE_DRV_UNLOAD_FUNCTION         0x20120000
+	#define FW_MSG_CODE_DRV_UNLOAD_DONE             0x21100000
+	#define FW_MSG_CODE_DCC_DONE                    0x30100000
+	#define FW_MSG_CODE_LLDP_DONE                   0x40100000
+	#define FW_MSG_CODE_DIAG_ENTER_DONE             0x50100000
+	#define FW_MSG_CODE_DIAG_REFUSE                 0x50200000
+	#define FW_MSG_CODE_DIAG_EXIT_DONE              0x60100000
+	#define FW_MSG_CODE_VALIDATE_KEY_SUCCESS        0x70100000
+	#define FW_MSG_CODE_VALIDATE_KEY_FAILURE        0x70200000
+	#define FW_MSG_CODE_GET_KEY_DONE                0x80100000
+	#define FW_MSG_CODE_NO_KEY                      0x80f00000
+	#define FW_MSG_CODE_LIC_INFO_NOT_READY          0x80f80000
+	#define FW_MSG_CODE_L2B_PRAM_LOADED             0x90100000
+	#define FW_MSG_CODE_L2B_PRAM_T_LOAD_FAILURE     0x90210000
+	#define FW_MSG_CODE_L2B_PRAM_C_LOAD_FAILURE     0x90220000
+	#define FW_MSG_CODE_L2B_PRAM_X_LOAD_FAILURE     0x90230000
+	#define FW_MSG_CODE_L2B_PRAM_U_LOAD_FAILURE     0x90240000
+	#define FW_MSG_CODE_VRFY_OPT_MDL_SUCCESS        0xa0100000
+	#define FW_MSG_CODE_VRFY_OPT_MDL_INVLD_IMG      0xa0200000
+	#define FW_MSG_CODE_VRFY_OPT_MDL_UNAPPROVED     0xa0300000
+	#define FW_MSG_CODE_VF_DISABLED_DONE            0xb0000000
+    #define FW_MSG_CODE_HW_SET_INVALID_IMAGE        0xb0100000
+
+	#define FW_MSG_CODE_VNTAG_DRIVER_SETMAC_DONE    0xd0100000
+	#define FW_MSG_CODE_VNTAG_LISTGET_ACK           0xd1100000
+	#define FW_MSG_CODE_VNTAG_LISTSET_ACK           0xd2100000
+	#define FW_MSG_CODE_VNTAG_STATSGET_ACK          0xd3100000
+	#define FW_MSG_CODE_VNTAG_VIFSET_ACK            0xd4100000
+
+	#define FW_MSG_CODE_DRV_INFO_ACK                0xd8100000
+	#define FW_MSG_CODE_DRV_INFO_NACK               0xd9100000
+
+	#define FW_MSG_CODE_SET_MF_BW_SENT              0xe0000000
+	#define FW_MSG_CODE_SET_MF_BW_DONE              0xe1000000
+
+	#define FW_MSG_CODE_LINK_CHANGED_ACK            0x01100000
+
+	#define FW_MSG_CODE_LIC_CHALLENGE               0xff010000
+	#define FW_MSG_CODE_LIC_RESPONSE                0xff020000
+	#define FW_MSG_CODE_VIRT_MAC_PRIM               0xff030000
+	#define FW_MSG_CODE_VIRT_MAC_ISCSI              0xff040000
+
+	#define FW_MSG_SEQ_NUMBER_MASK                  0x0000ffff
+
+	u32 fw_mb_param;
+
+	u32 drv_pulse_mb;
+	#define DRV_PULSE_SEQ_MASK                      0x00007fff
+	#define DRV_PULSE_SYSTEM_TIME_MASK              0xffff0000
+	/*
+	 * The system time is in the format of
+	 * (year-2001)*12*32 + month*32 + day.
+	 */
+	#define DRV_PULSE_ALWAYS_ALIVE                  0x00008000
+	/*
+	 * Indicate to the firmware not to go into the
+	 * OS-absent when it is not getting driver pulse.
+	 * This is used for debugging as well for PXE(MBA).
+	 */
+
+	u32 mcp_pulse_mb;
+	#define MCP_PULSE_SEQ_MASK                      0x00007fff
+	#define MCP_PULSE_ALWAYS_ALIVE                  0x00008000
+	/* Indicates to the driver not to assert due to lack
+	 * of MCP response */
+	#define MCP_EVENT_MASK                          0xffff0000
+	#define MCP_EVENT_OTHER_DRIVER_RESET_REQ        0x00010000
+
+	u32 iscsi_boot_signature;
+	u32 iscsi_boot_block_offset;
+
+	u32 drv_status;
+	#define DRV_STATUS_PMF                          0x00000001
+	#define DRV_STATUS_VF_DISABLED                  0x00000002
+	#define DRV_STATUS_SET_MF_BW                    0x00000004
+	#define DRV_STATUS_LINK_EVENT                   0x00000008
+
+	#define DRV_STATUS_DCC_EVENT_MASK               0x0000ff00
+	#define DRV_STATUS_DCC_DISABLE_ENABLE_PF        0x00000100
+	#define DRV_STATUS_DCC_BANDWIDTH_ALLOCATION     0x00000200
+	#define DRV_STATUS_DCC_CHANGE_MAC_ADDRESS       0x00000400
+	#define DRV_STATUS_DCC_RESERVED1                0x00000800
+	#define DRV_STATUS_DCC_SET_PROTOCOL             0x00001000
+	#define DRV_STATUS_DCC_SET_PRIORITY             0x00002000
+
+	#define DRV_STATUS_DCBX_EVENT_MASK              0x000f0000
+	#define DRV_STATUS_DCBX_NEGOTIATION_RESULTS     0x00010000
+	#define DRV_STATUS_VNTAG_EVENT_MASK             0x03f00000
+	#define DRV_STATUS_VNTAG_LISTGET_REQ            0x00100000
+	#define DRV_STATUS_VNTAG_LISTSET_REQ            0x00200000
+	#define DRV_STATUS_VNTAG_STATSGET_REQ           0x00400000
+	#define DRV_STATUS_VNTAG_VIFSET_REQ             0x00800000
+
+	#define DRV_STATUS_DRV_INFO_REQ                 0x04000000
+
+	u32 virt_mac_upper;
+	#define VIRT_MAC_SIGN_MASK                      0xffff0000
+	#define VIRT_MAC_SIGNATURE                      0x564d0000
+	u32 virt_mac_lower;
+
+};
+
+
+/****************************************************************************
+ * Management firmware state                                                *
+ ****************************************************************************/
+/* Allocate 440 bytes for management firmware */
+#define MGMTFW_STATE_WORD_SIZE                          110
+
+struct mgmtfw_state {
+	u32 opaque[MGMTFW_STATE_WORD_SIZE];
+};
+
+
+/****************************************************************************
+ * Multi-Function configuration                                             *
+ ****************************************************************************/
+struct shared_mf_cfg {
+
+	u32 clp_mb;
+	#define SHARED_MF_CLP_SET_DEFAULT               0x00000000
+	/* set by CLP */
+	#define SHARED_MF_CLP_EXIT                      0x00000001
+	/* set by MCP */
+	#define SHARED_MF_CLP_EXIT_DONE                 0x00010000
+
+};
+
+struct port_mf_cfg {
+
+	u32 dynamic_cfg;    /* device control channel */
+	#define PORT_MF_CFG_E1HOV_TAG_MASK              0x0000ffff
+	#define PORT_MF_CFG_E1HOV_TAG_SHIFT             0
+	#define PORT_MF_CFG_E1HOV_TAG_DEFAULT         PORT_MF_CFG_E1HOV_TAG_MASK
+
+	u32 reserved[1];
+
+};
+
+struct func_mf_cfg {
+
+	u32 config;
+	/* E/R/I/D */
+	/* function 0 of each port cannot be hidden */
+	#define FUNC_MF_CFG_FUNC_HIDE                   0x00000001
+
+	#define FUNC_MF_CFG_PROTOCOL_MASK               0x00000006
+	#define FUNC_MF_CFG_PROTOCOL_FCOE               0x00000000
+	#define FUNC_MF_CFG_PROTOCOL_ETHERNET           0x00000002
+	#define FUNC_MF_CFG_PROTOCOL_ETHERNET_WITH_RDMA 0x00000004
+	#define FUNC_MF_CFG_PROTOCOL_ISCSI              0x00000006
+	#define FUNC_MF_CFG_PROTOCOL_DEFAULT \
+				FUNC_MF_CFG_PROTOCOL_ETHERNET_WITH_RDMA
+
+	#define FUNC_MF_CFG_FUNC_DISABLED               0x00000008
+	#define FUNC_MF_CFG_FUNC_DELETED                0x00000010
+
+	/* PRI */
+	/* 0 - low priority, 3 - high priority */
+	#define FUNC_MF_CFG_TRANSMIT_PRIORITY_MASK      0x00000300
+	#define FUNC_MF_CFG_TRANSMIT_PRIORITY_SHIFT     8
+	#define FUNC_MF_CFG_TRANSMIT_PRIORITY_DEFAULT   0x00000000
+
+	/* MINBW, MAXBW */
+	/* value range - 0..100, increments in 100Mbps */
+	#define FUNC_MF_CFG_MIN_BW_MASK                 0x00ff0000
+	#define FUNC_MF_CFG_MIN_BW_SHIFT                16
+	#define FUNC_MF_CFG_MIN_BW_DEFAULT              0x00000000
+	#define FUNC_MF_CFG_MAX_BW_MASK                 0xff000000
+	#define FUNC_MF_CFG_MAX_BW_SHIFT                24
+	#define FUNC_MF_CFG_MAX_BW_DEFAULT              0x64000000
+
+	u32 mac_upper;	    /* MAC */
+	#define FUNC_MF_CFG_UPPERMAC_MASK               0x0000ffff
+	#define FUNC_MF_CFG_UPPERMAC_SHIFT              0
+	#define FUNC_MF_CFG_UPPERMAC_DEFAULT           FUNC_MF_CFG_UPPERMAC_MASK
+	u32 mac_lower;
+	#define FUNC_MF_CFG_LOWERMAC_DEFAULT            0xffffffff
+
+	u32 e1hov_tag;	/* VNI */
+	#define FUNC_MF_CFG_E1HOV_TAG_MASK              0x0000ffff
+	#define FUNC_MF_CFG_E1HOV_TAG_SHIFT             0
+	#define FUNC_MF_CFG_E1HOV_TAG_DEFAULT         FUNC_MF_CFG_E1HOV_TAG_MASK
+
+	/* It a VNTAG default VLAN ID - 12 bits */
+	#define FUNC_MF_CFG_NIV_VLAN_MASK               0x0fff0000
+	#define FUNC_MF_CFG_NIV_VLAN_SHIFT              16
+
+	u32 niv_config;
+	#define FUNC_MF_CFG_NIV_COS_FILTER_MASK                     0x000000ff
+	#define FUNC_MF_CFG_NIV_COS_FILTER_SHIFT                    0
+	#define FUNC_MF_CFG_NIV_MBA_ENABLED_MASK                    0x0000ff00
+	#define FUNC_MF_CFG_NIV_MBA_ENABLED_SHIFT                   8
+	#define FUNC_MF_CFG_NIV_MBA_ENABLED_VAL                     0x00000100
+	#define FUNC_MF_CFG_NIV_VLAN_MODE_MASK                      0x000f0000
+	#define FUNC_MF_CFG_NIV_VLAN_MODE_SHIFT                     16
+
+	u32 reserved;
+};
+
+enum mf_cfg_niv_vlan_mode {
+	FUNC_MF_CFG_NIV_VLAN_TRUNK_MODE = 0,
+	FUNC_MF_CFG_NIV_VLAN_ACCESS_MODE,
+	FUNC_MF_CFG_NIV_VLAN_TRUNK_TAG_NATIVE_MODE
+};
+
+/* This structure is not applicable and should not be accessed on 57711 */
+struct func_ext_cfg {
+	u32 func_cfg;
+	#define MACP_FUNC_CFG_FLAGS_MASK                0x000000FF
+	#define MACP_FUNC_CFG_FLAGS_SHIFT               0
+	#define MACP_FUNC_CFG_FLAGS_ENABLED             0x00000001
+	#define MACP_FUNC_CFG_FLAGS_ETHERNET            0x00000002
+	#define MACP_FUNC_CFG_FLAGS_ISCSI_OFFLOAD       0x00000004
+	#define MACP_FUNC_CFG_FLAGS_FCOE_OFFLOAD        0x00000008
+
+	u32 iscsi_mac_addr_upper;
+	u32 iscsi_mac_addr_lower;
+
+	u32 fcoe_mac_addr_upper;
+	u32 fcoe_mac_addr_lower;
+
+	u32 fcoe_wwn_port_name_upper;
+	u32 fcoe_wwn_port_name_lower;
+
+	u32 fcoe_wwn_node_name_upper;
+	u32 fcoe_wwn_node_name_lower;
+
+	u32 preserve_data;
+	#define MF_FUNC_CFG_PRESERVE_L2_MAC             (1<<0)
+	#define MF_FUNC_CFG_PRESERVE_ISCSI_MAC          (1<<1)
+	#define MF_FUNC_CFG_PRESERVE_FCOE_MAC           (1<<2)
+	#define MF_FUNC_CFG_PRESERVE_FCOE_WWN_P         (1<<3)
+	#define MF_FUNC_CFG_PRESERVE_FCOE_WWN_N         (1<<4)
+	#define MF_FUNC_CFG_PRESERVE_TX_BW              (1<<5)
+};
+
+struct mf_cfg {
+
+	struct shared_mf_cfg    shared_mf_config;       /* 0x4 */
+	struct port_mf_cfg  port_mf_config[NVM_PATH_MAX][PORT_MAX];
+    /* 0x10*2=0x20 */
+	/* for all chips, there are 8 mf functions */
+	struct func_mf_cfg  func_mf_config[E1H_FUNC_MAX]; /* 0x18 * 8 = 0xc0 */
+	/*
+	 * Extended configuration per function  - this array does not exist and
+	 * should not be accessed on 57711
+	 */
+	struct func_ext_cfg func_ext_config[E1H_FUNC_MAX]; /* 0x28 * 8 = 0x140*/
+}; /* 0x224 */
+
+/****************************************************************************
+ * Shared Memory Region                                                     *
+ ****************************************************************************/
+struct shmem_region {		       /*   SharedMem Offset (size) */
+
+	u32         validity_map[PORT_MAX];  /* 0x0 (4*2 = 0x8) */
+	#define SHR_MEM_FORMAT_REV_MASK                     0xff000000
+	#define SHR_MEM_FORMAT_REV_ID                       ('A'<<24)
+	/* validity bits */
+	#define SHR_MEM_VALIDITY_PCI_CFG                    0x00100000
+	#define SHR_MEM_VALIDITY_MB                         0x00200000
+	#define SHR_MEM_VALIDITY_DEV_INFO                   0x00400000
+	#define SHR_MEM_VALIDITY_RESERVED                   0x00000007
+	/* One licensing bit should be set */
+	#define SHR_MEM_VALIDITY_LIC_KEY_IN_EFFECT_MASK     0x00000038
+	#define SHR_MEM_VALIDITY_LIC_MANUF_KEY_IN_EFFECT    0x00000008
+	#define SHR_MEM_VALIDITY_LIC_UPGRADE_KEY_IN_EFFECT  0x00000010
+	#define SHR_MEM_VALIDITY_LIC_NO_KEY_IN_EFFECT       0x00000020
+	/* Active MFW */
+	#define SHR_MEM_VALIDITY_ACTIVE_MFW_UNKNOWN         0x00000000
+	#define SHR_MEM_VALIDITY_ACTIVE_MFW_MASK            0x000001c0
+	#define SHR_MEM_VALIDITY_ACTIVE_MFW_IPMI            0x00000040
+	#define SHR_MEM_VALIDITY_ACTIVE_MFW_UMP             0x00000080
+	#define SHR_MEM_VALIDITY_ACTIVE_MFW_NCSI            0x000000c0
+	#define SHR_MEM_VALIDITY_ACTIVE_MFW_NONE            0x000001c0
+
+	struct shm_dev_info dev_info;	     /* 0x8     (0x438) */
+
+	struct license_key       drv_lic_key[PORT_MAX]; /* 0x440 (52*2=0x68) */
+
+	/* FW information (for internal FW use) */
+	u32         fw_info_fio_offset;		/* 0x4a8       (0x4) */
+	struct mgmtfw_state mgmtfw_state;	/* 0x4ac     (0x1b8) */
+
+	struct drv_port_mb  port_mb[PORT_MAX];	/* 0x664 (16*2=0x20) */
+
+
+#ifdef BMAPI
+	/* This is a variable length array */
+	/* the number of function depends on the chip type */
+	struct drv_func_mb func_mb[1];	/* 0x684 (44*2/4/8=0x58/0xb0/0x160) */
+#else
+	/* the number of function depends on the chip type */
+	struct drv_func_mb  func_mb[];	/* 0x684 (44*2/4/8=0x58/0xb0/0x160) */
+#endif /* BMAPI */
+
+}; /* 57710 = 0x6dc | 57711 = 0x7E4 | 57712 = 0x734 */
+
+/****************************************************************************
+ * Shared Memory 2 Region                                                   *
+ ****************************************************************************/
+/* The fw_flr_ack is actually built in the following way:                   */
+/* 8 bit:  PF ack                                                           */
+/* 64 bit: VF ack                                                           */
+/* 8 bit:  ios_dis_ack                                                      */
+/* In order to maintain endianity in the mailbox hsi, we want to keep using */
+/* u32. The fw must have the VF right after the PF since this is how it     */
+/* access arrays(it expects always the VF to reside after the PF, and that  */
+/* makes the calculation much easier for it. )                              */
+/* In order to answer both limitations, and keep the struct small, the code */
+/* will abuse the structure defined here to achieve the actual partition    */
+/* above                                                                    */
+/****************************************************************************/
+struct fw_flr_ack {
+	u32         pf_ack;
+	u32         vf_ack[1];
+	u32         iov_dis_ack;
+};
+
+struct fw_flr_mb {
+	u32         aggint;
+	u32         opgen_addr;
+	struct fw_flr_ack ack;
+};
+
+/**** SUPPORT FOR SHMEM ARRRAYS ***
+ * The SHMEM HSI is aligned on 32 bit boundaries which makes it difficult to
+ * define arrays with storage types smaller then unsigned dwords.
+ * The macros below add generic support for SHMEM arrays with numeric elements
+ * that can span 2,4,8 or 16 bits. The array underlying type is a 32 bit dword
+ * array with individual bit-filed elements accessed using shifts and masks.
+ *
+ */
+
+/* eb is the bitwidth of a single element */
+#define SHMEM_ARRAY_MASK(eb)		((1<<(eb))-1)
+#define SHMEM_ARRAY_ENTRY(i, eb)	((i)/(32/(eb)))
+
+/* the bit-position macro allows the used to flip the order of the arrays
+ * elements on a per byte or word boundary.
+ *
+ * example: an array with 8 entries each 4 bit wide. This array will fit into
+ * a single dword. The diagrmas below show the array order of the nibbles.
+ *
+ * SHMEM_ARRAY_BITPOS(i, 4, 4) defines the stadard ordering:
+ *
+ *                |                |                |               |
+ *   0    |   1   |   2    |   3   |   4    |   5   |   6   |   7   |
+ *                |                |                |               |
+ *
+ * SHMEM_ARRAY_BITPOS(i, 4, 8) defines a flip ordering per byte:
+ *
+ *                |                |                |               |
+ *   1   |   0    |   3    |   2   |   5    |   4   |   7   |   6   |
+ *                |                |                |               |
+ *
+ * SHMEM_ARRAY_BITPOS(i, 4, 16) defines a flip ordering per word:
+ *
+ *                |                |                |               |
+ *   3   |   2    |   1   |   0    |   7   |   6    |   5   |   4   |
+ *                |                |                |               |
+ */
+#define SHMEM_ARRAY_BITPOS(i, eb, fb)	\
+	((((32/(fb)) - 1 - ((i)/((fb)/(eb))) % (32/(fb))) * (fb)) + \
+	(((i)%((fb)/(eb))) * (eb)))
+
+#define SHMEM_ARRAY_GET(a, i, eb, fb)					\
+	((a[SHMEM_ARRAY_ENTRY(i, eb)] >> SHMEM_ARRAY_BITPOS(i, eb, fb)) &  \
+	SHMEM_ARRAY_MASK(eb))
+
+#define SHMEM_ARRAY_SET(a, i, eb, fb, val)				\
+do {									   \
+	a[SHMEM_ARRAY_ENTRY(i, eb)] &= ~(SHMEM_ARRAY_MASK(eb) <<	   \
+	SHMEM_ARRAY_BITPOS(i, eb, fb));					   \
+	a[SHMEM_ARRAY_ENTRY(i, eb)] |= (((val) & SHMEM_ARRAY_MASK(eb)) <<  \
+	SHMEM_ARRAY_BITPOS(i, eb, fb));					   \
+} while (0)
+
+
+/****START OF DCBX STRUCTURES DECLARATIONS****/
+#define DCBX_MAX_NUM_PRI_PG_ENTRIES	8
+#define DCBX_PRI_PG_BITWIDTH		4
+#define DCBX_PRI_PG_FBITS		8
+#define DCBX_PRI_PG_GET(a, i)		\
+	SHMEM_ARRAY_GET(a, i, DCBX_PRI_PG_BITWIDTH, DCBX_PRI_PG_FBITS)
+#define DCBX_PRI_PG_SET(a, i, val)	\
+	SHMEM_ARRAY_SET(a, i, DCBX_PRI_PG_BITWIDTH, DCBX_PRI_PG_FBITS, val)
+#define DCBX_MAX_NUM_PG_BW_ENTRIES	8
+#define DCBX_BW_PG_BITWIDTH		8
+#define DCBX_PG_BW_GET(a, i)		\
+	SHMEM_ARRAY_GET(a, i, DCBX_BW_PG_BITWIDTH, DCBX_BW_PG_BITWIDTH)
+#define DCBX_PG_BW_SET(a, i, val)	\
+	SHMEM_ARRAY_SET(a, i, DCBX_BW_PG_BITWIDTH, DCBX_BW_PG_BITWIDTH, val)
+#define DCBX_STRICT_PRI_PG		15
+#define DCBX_MAX_APP_PROTOCOL		16
+#define DCBX_MAX_APP_LOCAL	    32
+#define FCOE_APP_IDX			0
+#define ISCSI_APP_IDX			1
+#define PREDEFINED_APP_IDX_MAX		2
+
+
+/* Big/Little endian have the same representation. */
+struct dcbx_ets_feature {
+	/*
+	 * For Admin MIB - is this feature supported by the
+	 * driver | For Local MIB - should this feature be enabled.
+	 */
+	u32 enabled;
+	u32  pg_bw_tbl[2];
+	u32  pri_pg_tbl[1];
+};
+
+/* Driver structure in LE */
+struct dcbx_pfc_feature {
+#ifdef __BIG_ENDIAN
+	u8 pri_en_bitmap;
+	#define DCBX_PFC_PRI_0 0x01
+	#define DCBX_PFC_PRI_1 0x02
+	#define DCBX_PFC_PRI_2 0x04
+	#define DCBX_PFC_PRI_3 0x08
+	#define DCBX_PFC_PRI_4 0x10
+	#define DCBX_PFC_PRI_5 0x20
+	#define DCBX_PFC_PRI_6 0x40
+	#define DCBX_PFC_PRI_7 0x80
+	u8 pfc_caps;
+	u8 reserved;
+	u8 enabled;
+#elif defined(__LITTLE_ENDIAN)
+	u8 enabled;
+	u8 reserved;
+	u8 pfc_caps;
+	u8 pri_en_bitmap;
+	#define DCBX_PFC_PRI_0 0x01
+	#define DCBX_PFC_PRI_1 0x02
+	#define DCBX_PFC_PRI_2 0x04
+	#define DCBX_PFC_PRI_3 0x08
+	#define DCBX_PFC_PRI_4 0x10
+	#define DCBX_PFC_PRI_5 0x20
+	#define DCBX_PFC_PRI_6 0x40
+	#define DCBX_PFC_PRI_7 0x80
+#endif
+};
+
+struct dcbx_app_priority_entry {
+#ifdef __BIG_ENDIAN
+	u16  app_id;
+	u8  pri_bitmap;
+	u8  appBitfield;
+	#define DCBX_APP_ENTRY_VALID         0x01
+	#define DCBX_APP_ENTRY_SF_MASK       0x30
+	#define DCBX_APP_ENTRY_SF_SHIFT      4
+	#define DCBX_APP_SF_ETH_TYPE         0x10
+	#define DCBX_APP_SF_PORT             0x20
+#elif defined(__LITTLE_ENDIAN)
+	u8 appBitfield;
+	#define DCBX_APP_ENTRY_VALID         0x01
+	#define DCBX_APP_ENTRY_SF_MASK       0x30
+	#define DCBX_APP_ENTRY_SF_SHIFT      4
+	#define DCBX_APP_SF_ETH_TYPE         0x10
+	#define DCBX_APP_SF_PORT             0x20
+	u8  pri_bitmap;
+	u16  app_id;
+#endif
+};
+
+
+/* FW structure in BE */
+struct dcbx_app_priority_feature {
+#ifdef __BIG_ENDIAN
+	u8 reserved;
+	u8 default_pri;
+	u8 tc_supported;
+	u8 enabled;
+#elif defined(__LITTLE_ENDIAN)
+	u8 enabled;
+	u8 tc_supported;
+	u8 default_pri;
+	u8 reserved;
+#endif
+	struct dcbx_app_priority_entry  app_pri_tbl[DCBX_MAX_APP_PROTOCOL];
+};
+
+/* FW structure in BE */
+struct dcbx_features {
+	/* PG feature */
+	struct dcbx_ets_feature ets;
+	/* PFC feature */
+	struct dcbx_pfc_feature pfc;
+	/* APP feature */
+	struct dcbx_app_priority_feature app;
+};
+
+/* LLDP protocol parameters */
+/* FW structure in BE */
+struct lldp_params {
+#ifdef __BIG_ENDIAN
+	u8  msg_fast_tx_interval;
+	u8  msg_tx_hold;
+	u8  msg_tx_interval;
+	u8  admin_status;
+	#define LLDP_TX_ONLY  0x01
+	#define LLDP_RX_ONLY  0x02
+	#define LLDP_TX_RX    0x03
+	#define LLDP_DISABLED 0x04
+	u8  reserved1;
+	u8  tx_fast;
+	u8  tx_crd_max;
+	u8  tx_crd;
+#elif defined(__LITTLE_ENDIAN)
+	u8  admin_status;
+	#define LLDP_TX_ONLY  0x01
+	#define LLDP_RX_ONLY  0x02
+	#define LLDP_TX_RX    0x03
+	#define LLDP_DISABLED 0x04
+	u8  msg_tx_interval;
+	u8  msg_tx_hold;
+	u8  msg_fast_tx_interval;
+	u8  tx_crd;
+	u8  tx_crd_max;
+	u8  tx_fast;
+	u8  reserved1;
+#endif
+	#define REM_CHASSIS_ID_STAT_LEN 4
+	#define REM_PORT_ID_STAT_LEN 4
+	/* Holds remote Chassis ID TLV header, subtype and 9B of payload. */
+	u32 peer_chassis_id[REM_CHASSIS_ID_STAT_LEN];
+	/* Holds remote Port ID TLV header, subtype and 9B of payload. */
+	u32 peer_port_id[REM_PORT_ID_STAT_LEN];
+};
+
+struct lldp_dcbx_stat {
+	#define LOCAL_CHASSIS_ID_STAT_LEN 2
+	#define LOCAL_PORT_ID_STAT_LEN 2
+	/* Holds local Chassis ID 8B payload of constant subtype 4. */
+	u32 local_chassis_id[LOCAL_CHASSIS_ID_STAT_LEN];
+	/* Holds local Port ID 8B payload of constant subtype 3. */
+	u32 local_port_id[LOCAL_PORT_ID_STAT_LEN];
+	/* Number of DCBX frames transmitted. */
+	u32 num_tx_dcbx_pkts;
+	/* Number of DCBX frames received. */
+	u32 num_rx_dcbx_pkts;
+};
+
+/* ADMIN MIB - DCBX local machine default configuration. */
+struct lldp_admin_mib {
+	u32     ver_cfg_flags;
+	#define DCBX_ETS_CONFIG_TX_ENABLED       0x00000001
+	#define DCBX_PFC_CONFIG_TX_ENABLED       0x00000002
+	#define DCBX_APP_CONFIG_TX_ENABLED       0x00000004
+	#define DCBX_ETS_RECO_TX_ENABLED         0x00000008
+	#define DCBX_ETS_RECO_VALID              0x00000010
+	#define DCBX_ETS_WILLING                 0x00000020
+	#define DCBX_PFC_WILLING                 0x00000040
+	#define DCBX_APP_WILLING                 0x00000080
+	#define DCBX_VERSION_CEE                 0x00000100
+	#define DCBX_VERSION_IEEE                0x00000200
+	#define DCBX_DCBX_ENABLED                0x00000400
+	#define DCBX_CEE_VERSION_MASK            0x0000f000
+	#define DCBX_CEE_VERSION_SHIFT           12
+	#define DCBX_CEE_MAX_VERSION_MASK        0x000f0000
+	#define DCBX_CEE_MAX_VERSION_SHIFT       16
+	struct dcbx_features     features;
+};
+
+/* REMOTE MIB - remote machine DCBX configuration. */
+struct lldp_remote_mib {
+	u32 prefix_seq_num;
+	u32 flags;
+	#define DCBX_ETS_TLV_RX                  0x00000001
+	#define DCBX_PFC_TLV_RX                  0x00000002
+	#define DCBX_APP_TLV_RX                  0x00000004
+	#define DCBX_ETS_RX_ERROR                0x00000010
+	#define DCBX_PFC_RX_ERROR                0x00000020
+	#define DCBX_APP_RX_ERROR                0x00000040
+	#define DCBX_ETS_REM_WILLING             0x00000100
+	#define DCBX_PFC_REM_WILLING             0x00000200
+	#define DCBX_APP_REM_WILLING             0x00000400
+	#define DCBX_REMOTE_ETS_RECO_VALID       0x00001000
+	#define DCBX_REMOTE_MIB_VALID            0x00002000
+	struct dcbx_features features;
+	u32 suffix_seq_num;
+};
+
+/* LOCAL MIB - operational DCBX configuration - transmitted on Tx LLDPDU. */
+struct lldp_local_mib {
+	u32 prefix_seq_num;
+	/* Indicates if there is mismatch with negotiation results. */
+	u32 error;
+	#define DCBX_LOCAL_ETS_ERROR             0x00000001
+	#define DCBX_LOCAL_PFC_ERROR             0x00000002
+	#define DCBX_LOCAL_APP_ERROR             0x00000004
+	#define DCBX_LOCAL_PFC_MISMATCH          0x00000010
+	#define DCBX_LOCAL_APP_MISMATCH          0x00000020
+	#define DCBX_REMOTE_MIB_ERROR            0x00000040
+	#define DCBX_REMOTE_ETS_TLV_NOT_FOUND    0x00000080
+	#define DCBX_REMOTE_PFC_TLV_NOT_FOUND    0x00000100
+	#define DCBX_REMOTE_APP_TLV_NOT_FOUND    0x00000200
+	struct dcbx_features   features;
+	u32 suffix_seq_num;
+};
+
+struct lldp_local_mib_ext {
+	u32 prefix_seq_num;
+	/* APP TLV extension - 16 more entries for negotiation results*/
+	struct dcbx_app_priority_entry  app_pri_tbl_ext[DCBX_MAX_APP_PROTOCOL];
+	u32 suffix_seq_num;
+};
+/***END OF DCBX STRUCTURES DECLARATIONS***/
+
+struct shmem2_region {
+
+	u32 size;					/* 0x0000 */
+
+	u32 dcc_support;				/* 0x0004 */
+	#define SHMEM_DCC_SUPPORT_NONE                      0x00000000
+	#define SHMEM_DCC_SUPPORT_DISABLE_ENABLE_PF_TLV     0x00000001
+	#define SHMEM_DCC_SUPPORT_BANDWIDTH_ALLOCATION_TLV  0x00000004
+	#define SHMEM_DCC_SUPPORT_CHANGE_MAC_ADDRESS_TLV    0x00000008
+	#define SHMEM_DCC_SUPPORT_SET_PROTOCOL_TLV          0x00000040
+	#define SHMEM_DCC_SUPPORT_SET_PRIORITY_TLV          0x00000080
+
+	u32 ext_phy_fw_version2[PORT_MAX];		/* 0x0008 */
+	/*
+	 * For backwards compatibility, if the mf_cfg_addr does not exist
+	 * (the size filed is smaller than 0xc) the mf_cfg resides at the
+	 * end of struct shmem_region
+	 */
+	u32 mf_cfg_addr;				/* 0x0010 */
+	#define SHMEM_MF_CFG_ADDR_NONE                  0x00000000
+
+	struct fw_flr_mb flr_mb;			/* 0x0014 */
+	u32 dcbx_lldp_params_offset;			/* 0x0028 */
+	#define SHMEM_LLDP_DCBX_PARAMS_NONE             0x00000000
+	u32 dcbx_neg_res_offset;			/* 0x002c */
+	#define SHMEM_DCBX_NEG_RES_NONE			0x00000000
+	u32 dcbx_remote_mib_offset;			/* 0x0030 */
+	#define SHMEM_DCBX_REMOTE_MIB_NONE              0x00000000
+	/*
+	 * The other shmemX_base_addr holds the other path's shmem address
+	 * required for example in case of common phy init, or for path1 to know
+	 * the address of mcp debug trace which is located in offset from shmem
+	 * of path0
+	 */
+	u32 other_shmem_base_addr;			/* 0x0034 */
+	u32 other_shmem2_base_addr;			/* 0x0038 */
+	/*
+	 * mcp_vf_disabled is set by the MCP to indicate the driver about VFs
+	 * which were disabled/flred
+	 */
+	u32 mcp_vf_disabled[E2_VF_MAX / 32];		/* 0x003c */
+
+	/*
+	 * drv_ack_vf_disabled is set by the PF driver to ack handled disabled
+	 * VFs
+	 */
+	u32 drv_ack_vf_disabled[E2_FUNC_MAX][E2_VF_MAX / 32]; /* 0x0044 */
+
+	u32 dcbx_lldp_dcbx_stat_offset;			/* 0x0064 */
+	#define SHMEM_LLDP_DCBX_STAT_NONE               0x00000000
+
+	/*
+	 * edebug_driver_if field is used to transfer messages between edebug
+	 * app to the driver through shmem2.
+	 *
+	 * message format:
+	 * bits 0-2 -  function number / instance of driver to perform request
+	 * bits 3-5 -  op code / is_ack?
+	 * bits 6-63 - data
+	 */
+	u32 edebug_driver_if[2];			/* 0x0068 */
+	#define EDEBUG_DRIVER_IF_OP_CODE_GET_PHYS_ADDR  1
+	#define EDEBUG_DRIVER_IF_OP_CODE_GET_BUS_ADDR   2
+	#define EDEBUG_DRIVER_IF_OP_CODE_DISABLE_STAT   3
+
+	u32 nvm_retain_bitmap_addr;			/* 0x0070 */
+
+	/* vntag support of that driver */
+	u32 vntag_driver_niv_support;			/* 0x0074 */
+	#define SHMEM_NIV_SUPPORTED_VERSION_ONE         0x1001
+
+	/* driver receives addr in scratchpad to which it should respond */
+	u32 vntag_scratchpad_addr_to_write[E2_FUNC_MAX];
+
+	/*
+	 * generic params from MCP to driver (value depends on the msg sent
+	 * to driver
+	 */
+	u32 vntag_param1_to_driver[E2_FUNC_MAX];	/* 0x0088 */
+	u32 vntag_param2_to_driver[E2_FUNC_MAX];	/* 0x0098 */
+
+	u32 swim_base_addr;				/* 0x0108 */
+	u32 swim_funcs;
+	u32 swim_main_cb;
+
+	/*
+	 * bitmap notifying which VIF profiles stored in nvram are enabled by
+	 * switch
+	 */
+	u32 vntag_profiles_enabled[2];
+
+	/* generic flags controlled by the driver */
+	u32 drv_flags;
+	#define DRV_FLAGS_DCB_CONFIGURED		0x0
+	#define DRV_FLAGS_DCB_CONFIGURATION_ABORTED	0x1
+	#define DRV_FLAGS_DCB_MFW_CONFIGURED	0x2
+
+    #define DRV_FLAGS_PORT_MASK	((1 << DRV_FLAGS_DCB_CONFIGURED) | \
+			(1 << DRV_FLAGS_DCB_CONFIGURATION_ABORTED) | \
+			(1 << DRV_FLAGS_DCB_MFW_CONFIGURED))
+	/* Port offset*/
+	#define DRV_FLAGS_P0_OFFSET		0
+	#define DRV_FLAGS_P1_OFFSET		16
+	#define DRV_FLAGS_GET_PORT_OFFSET(_port)	((0 == _port) ? \
+						DRV_FLAGS_P0_OFFSET : \
+						DRV_FLAGS_P1_OFFSET)
+
+	#define DRV_FLAGS_GET_PORT_MASK(_port)	(DRV_FLAGS_PORT_MASK << \
+	DRV_FLAGS_GET_PORT_OFFSET(_port))
+
+	#define DRV_FLAGS_FILED_BY_PORT(_field_bit, _port)	(1 << ( \
+	(_field_bit) + DRV_FLAGS_GET_PORT_OFFSET(_port)))
+
+	/* pointer to extended dev_info shared data copied from nvm image */
+	u32 extended_dev_info_shared_addr;
+	u32 ncsi_oem_data_addr;
+
+	u32 ocsd_host_addr; /* initialized by option ROM */
+	u32 ocbb_host_addr; /* initialized by option ROM */
+	u32 ocsd_req_update_interval; /* initialized by option ROM */
+	u32 temperature_in_half_celsius;
+	u32 glob_struct_in_host;
+
+	u32 dcbx_neg_res_ext_offset;
+	#define SHMEM_DCBX_NEG_RES_EXT_NONE			0x00000000
+
+	u32 drv_capabilities_flag[E2_FUNC_MAX];
+	#define DRV_FLAGS_CAPABILITIES_LOADED_SUPPORTED 0x00000001
+	#define DRV_FLAGS_CAPABILITIES_LOADED_L2        0x00000002
+	#define DRV_FLAGS_CAPABILITIES_LOADED_FCOE      0x00000004
+	#define DRV_FLAGS_CAPABILITIES_LOADED_ISCSI     0x00000008
+
+	u32 extended_dev_info_shared_cfg_size;
+
+	u32 dcbx_en[PORT_MAX];
+
+	/* The offset points to the multi threaded meta structure */
+	u32 multi_thread_data_offset;
+
+	/* address of DMAable host address holding values from the drivers */
+	u32 drv_info_host_addr_lo;
+	u32 drv_info_host_addr_hi;
+
+	/* general values written by the MFW (such as current version) */
+	u32 drv_info_control;
+	#define DRV_INFO_CONTROL_VER_MASK          0x000000ff
+	#define DRV_INFO_CONTROL_VER_SHIFT         0
+	#define DRV_INFO_CONTROL_OP_CODE_MASK      0x0000ff00
+	#define DRV_INFO_CONTROL_OP_CODE_SHIFT     8
+};
+
+
+struct emac_stats {
+	u32     rx_stat_ifhcinoctets;
+	u32     rx_stat_ifhcinbadoctets;
+	u32     rx_stat_etherstatsfragments;
+	u32     rx_stat_ifhcinucastpkts;
+	u32     rx_stat_ifhcinmulticastpkts;
+	u32     rx_stat_ifhcinbroadcastpkts;
+	u32     rx_stat_dot3statsfcserrors;
+	u32     rx_stat_dot3statsalignmenterrors;
+	u32     rx_stat_dot3statscarriersenseerrors;
+	u32     rx_stat_xonpauseframesreceived;
+	u32     rx_stat_xoffpauseframesreceived;
+	u32     rx_stat_maccontrolframesreceived;
+	u32     rx_stat_xoffstateentered;
+	u32     rx_stat_dot3statsframestoolong;
+	u32     rx_stat_etherstatsjabbers;
+	u32     rx_stat_etherstatsundersizepkts;
+	u32     rx_stat_etherstatspkts64octets;
+	u32     rx_stat_etherstatspkts65octetsto127octets;
+	u32     rx_stat_etherstatspkts128octetsto255octets;
+	u32     rx_stat_etherstatspkts256octetsto511octets;
+	u32     rx_stat_etherstatspkts512octetsto1023octets;
+	u32     rx_stat_etherstatspkts1024octetsto1522octets;
+	u32     rx_stat_etherstatspktsover1522octets;
+
+	u32     rx_stat_falsecarriererrors;
+
+	u32     tx_stat_ifhcoutoctets;
+	u32     tx_stat_ifhcoutbadoctets;
+	u32     tx_stat_etherstatscollisions;
+	u32     tx_stat_outxonsent;
+	u32     tx_stat_outxoffsent;
+	u32     tx_stat_flowcontroldone;
+	u32     tx_stat_dot3statssinglecollisionframes;
+	u32     tx_stat_dot3statsmultiplecollisionframes;
+	u32     tx_stat_dot3statsdeferredtransmissions;
+	u32     tx_stat_dot3statsexcessivecollisions;
+	u32     tx_stat_dot3statslatecollisions;
+	u32     tx_stat_ifhcoutucastpkts;
+	u32     tx_stat_ifhcoutmulticastpkts;
+	u32     tx_stat_ifhcoutbroadcastpkts;
+	u32     tx_stat_etherstatspkts64octets;
+	u32     tx_stat_etherstatspkts65octetsto127octets;
+	u32     tx_stat_etherstatspkts128octetsto255octets;
+	u32     tx_stat_etherstatspkts256octetsto511octets;
+	u32     tx_stat_etherstatspkts512octetsto1023octets;
+	u32     tx_stat_etherstatspkts1024octetsto1522octets;
+	u32     tx_stat_etherstatspktsover1522octets;
+	u32     tx_stat_dot3statsinternalmactransmiterrors;
+};
+
+
+struct bmac1_stats {
+	u32	tx_stat_gtpkt_lo;
+	u32	tx_stat_gtpkt_hi;
+	u32	tx_stat_gtxpf_lo;
+	u32	tx_stat_gtxpf_hi;
+	u32	tx_stat_gtfcs_lo;
+	u32	tx_stat_gtfcs_hi;
+	u32	tx_stat_gtmca_lo;
+	u32	tx_stat_gtmca_hi;
+	u32	tx_stat_gtbca_lo;
+	u32	tx_stat_gtbca_hi;
+	u32	tx_stat_gtfrg_lo;
+	u32	tx_stat_gtfrg_hi;
+	u32	tx_stat_gtovr_lo;
+	u32	tx_stat_gtovr_hi;
+	u32	tx_stat_gt64_lo;
+	u32	tx_stat_gt64_hi;
+	u32	tx_stat_gt127_lo;
+	u32	tx_stat_gt127_hi;
+	u32	tx_stat_gt255_lo;
+	u32	tx_stat_gt255_hi;
+	u32	tx_stat_gt511_lo;
+	u32	tx_stat_gt511_hi;
+	u32	tx_stat_gt1023_lo;
+	u32	tx_stat_gt1023_hi;
+	u32	tx_stat_gt1518_lo;
+	u32	tx_stat_gt1518_hi;
+	u32	tx_stat_gt2047_lo;
+	u32	tx_stat_gt2047_hi;
+	u32	tx_stat_gt4095_lo;
+	u32	tx_stat_gt4095_hi;
+	u32	tx_stat_gt9216_lo;
+	u32	tx_stat_gt9216_hi;
+	u32	tx_stat_gt16383_lo;
+	u32	tx_stat_gt16383_hi;
+	u32	tx_stat_gtmax_lo;
+	u32	tx_stat_gtmax_hi;
+	u32	tx_stat_gtufl_lo;
+	u32	tx_stat_gtufl_hi;
+	u32	tx_stat_gterr_lo;
+	u32	tx_stat_gterr_hi;
+	u32	tx_stat_gtbyt_lo;
+	u32	tx_stat_gtbyt_hi;
+
+	u32	rx_stat_gr64_lo;
+	u32	rx_stat_gr64_hi;
+	u32	rx_stat_gr127_lo;
+	u32	rx_stat_gr127_hi;
+	u32	rx_stat_gr255_lo;
+	u32	rx_stat_gr255_hi;
+	u32	rx_stat_gr511_lo;
+	u32	rx_stat_gr511_hi;
+	u32	rx_stat_gr1023_lo;
+	u32	rx_stat_gr1023_hi;
+	u32	rx_stat_gr1518_lo;
+	u32	rx_stat_gr1518_hi;
+	u32	rx_stat_gr2047_lo;
+	u32	rx_stat_gr2047_hi;
+	u32	rx_stat_gr4095_lo;
+	u32	rx_stat_gr4095_hi;
+	u32	rx_stat_gr9216_lo;
+	u32	rx_stat_gr9216_hi;
+	u32	rx_stat_gr16383_lo;
+	u32	rx_stat_gr16383_hi;
+	u32	rx_stat_grmax_lo;
+	u32	rx_stat_grmax_hi;
+	u32	rx_stat_grpkt_lo;
+	u32	rx_stat_grpkt_hi;
+	u32	rx_stat_grfcs_lo;
+	u32	rx_stat_grfcs_hi;
+	u32	rx_stat_grmca_lo;
+	u32	rx_stat_grmca_hi;
+	u32	rx_stat_grbca_lo;
+	u32	rx_stat_grbca_hi;
+	u32	rx_stat_grxcf_lo;
+	u32	rx_stat_grxcf_hi;
+	u32	rx_stat_grxpf_lo;
+	u32	rx_stat_grxpf_hi;
+	u32	rx_stat_grxuo_lo;
+	u32	rx_stat_grxuo_hi;
+	u32	rx_stat_grjbr_lo;
+	u32	rx_stat_grjbr_hi;
+	u32	rx_stat_grovr_lo;
+	u32	rx_stat_grovr_hi;
+	u32	rx_stat_grflr_lo;
+	u32	rx_stat_grflr_hi;
+	u32	rx_stat_grmeg_lo;
+	u32	rx_stat_grmeg_hi;
+	u32	rx_stat_grmeb_lo;
+	u32	rx_stat_grmeb_hi;
+	u32	rx_stat_grbyt_lo;
+	u32	rx_stat_grbyt_hi;
+	u32	rx_stat_grund_lo;
+	u32	rx_stat_grund_hi;
+	u32	rx_stat_grfrg_lo;
+	u32	rx_stat_grfrg_hi;
+	u32	rx_stat_grerb_lo;
+	u32	rx_stat_grerb_hi;
+	u32	rx_stat_grfre_lo;
+	u32	rx_stat_grfre_hi;
+	u32	rx_stat_gripj_lo;
+	u32	rx_stat_gripj_hi;
+};
+
+struct bmac2_stats {
+	u32	tx_stat_gtpk_lo; /* gtpok */
+	u32	tx_stat_gtpk_hi; /* gtpok */
+	u32	tx_stat_gtxpf_lo; /* gtpf */
+	u32	tx_stat_gtxpf_hi; /* gtpf */
+	u32	tx_stat_gtpp_lo; /* NEW BMAC2 */
+	u32	tx_stat_gtpp_hi; /* NEW BMAC2 */
+	u32	tx_stat_gtfcs_lo;
+	u32	tx_stat_gtfcs_hi;
+	u32	tx_stat_gtuca_lo; /* NEW BMAC2 */
+	u32	tx_stat_gtuca_hi; /* NEW BMAC2 */
+	u32	tx_stat_gtmca_lo;
+	u32	tx_stat_gtmca_hi;
+	u32	tx_stat_gtbca_lo;
+	u32	tx_stat_gtbca_hi;
+	u32	tx_stat_gtovr_lo;
+	u32	tx_stat_gtovr_hi;
+	u32	tx_stat_gtfrg_lo;
+	u32	tx_stat_gtfrg_hi;
+	u32	tx_stat_gtpkt1_lo; /* gtpkt */
+	u32	tx_stat_gtpkt1_hi; /* gtpkt */
+	u32	tx_stat_gt64_lo;
+	u32	tx_stat_gt64_hi;
+	u32	tx_stat_gt127_lo;
+	u32	tx_stat_gt127_hi;
+	u32	tx_stat_gt255_lo;
+	u32	tx_stat_gt255_hi;
+	u32	tx_stat_gt511_lo;
+	u32	tx_stat_gt511_hi;
+	u32	tx_stat_gt1023_lo;
+	u32	tx_stat_gt1023_hi;
+	u32	tx_stat_gt1518_lo;
+	u32	tx_stat_gt1518_hi;
+	u32	tx_stat_gt2047_lo;
+	u32	tx_stat_gt2047_hi;
+	u32	tx_stat_gt4095_lo;
+	u32	tx_stat_gt4095_hi;
+	u32	tx_stat_gt9216_lo;
+	u32	tx_stat_gt9216_hi;
+	u32	tx_stat_gt16383_lo;
+	u32	tx_stat_gt16383_hi;
+	u32	tx_stat_gtmax_lo;
+	u32	tx_stat_gtmax_hi;
+	u32	tx_stat_gtufl_lo;
+	u32	tx_stat_gtufl_hi;
+	u32	tx_stat_gterr_lo;
+	u32	tx_stat_gterr_hi;
+	u32	tx_stat_gtbyt_lo;
+	u32	tx_stat_gtbyt_hi;
+
+	u32	rx_stat_gr64_lo;
+	u32	rx_stat_gr64_hi;
+	u32	rx_stat_gr127_lo;
+	u32	rx_stat_gr127_hi;
+	u32	rx_stat_gr255_lo;
+	u32	rx_stat_gr255_hi;
+	u32	rx_stat_gr511_lo;
+	u32	rx_stat_gr511_hi;
+	u32	rx_stat_gr1023_lo;
+	u32	rx_stat_gr1023_hi;
+	u32	rx_stat_gr1518_lo;
+	u32	rx_stat_gr1518_hi;
+	u32	rx_stat_gr2047_lo;
+	u32	rx_stat_gr2047_hi;
+	u32	rx_stat_gr4095_lo;
+	u32	rx_stat_gr4095_hi;
+	u32	rx_stat_gr9216_lo;
+	u32	rx_stat_gr9216_hi;
+	u32	rx_stat_gr16383_lo;
+	u32	rx_stat_gr16383_hi;
+	u32	rx_stat_grmax_lo;
+	u32	rx_stat_grmax_hi;
+	u32	rx_stat_grpkt_lo;
+	u32	rx_stat_grpkt_hi;
+	u32	rx_stat_grfcs_lo;
+	u32	rx_stat_grfcs_hi;
+	u32	rx_stat_gruca_lo;
+	u32	rx_stat_gruca_hi;
+	u32	rx_stat_grmca_lo;
+	u32	rx_stat_grmca_hi;
+	u32	rx_stat_grbca_lo;
+	u32	rx_stat_grbca_hi;
+	u32	rx_stat_grxpf_lo; /* grpf */
+	u32	rx_stat_grxpf_hi; /* grpf */
+	u32	rx_stat_grpp_lo;
+	u32	rx_stat_grpp_hi;
+	u32	rx_stat_grxuo_lo; /* gruo */
+	u32	rx_stat_grxuo_hi; /* gruo */
+	u32	rx_stat_grjbr_lo;
+	u32	rx_stat_grjbr_hi;
+	u32	rx_stat_grovr_lo;
+	u32	rx_stat_grovr_hi;
+	u32	rx_stat_grxcf_lo; /* grcf */
+	u32	rx_stat_grxcf_hi; /* grcf */
+	u32	rx_stat_grflr_lo;
+	u32	rx_stat_grflr_hi;
+	u32	rx_stat_grpok_lo;
+	u32	rx_stat_grpok_hi;
+	u32	rx_stat_grmeg_lo;
+	u32	rx_stat_grmeg_hi;
+	u32	rx_stat_grmeb_lo;
+	u32	rx_stat_grmeb_hi;
+	u32	rx_stat_grbyt_lo;
+	u32	rx_stat_grbyt_hi;
+	u32	rx_stat_grund_lo;
+	u32	rx_stat_grund_hi;
+	u32	rx_stat_grfrg_lo;
+	u32	rx_stat_grfrg_hi;
+	u32	rx_stat_grerb_lo; /* grerrbyt */
+	u32	rx_stat_grerb_hi; /* grerrbyt */
+	u32	rx_stat_grfre_lo; /* grfrerr */
+	u32	rx_stat_grfre_hi; /* grfrerr */
+	u32	rx_stat_gripj_lo;
+	u32	rx_stat_gripj_hi;
+};
+
+struct mstat_stats {
+	struct {
+		/* OTE MSTAT on E3 has a bug where this register's contents are
+		 * actually tx_gtxpok + tx_gtxpf + (possibly)tx_gtxpp
+		 */
+		u32 tx_gtxpok_lo;
+		u32 tx_gtxpok_hi;
+		u32 tx_gtxpf_lo;
+		u32 tx_gtxpf_hi;
+		u32 tx_gtxpp_lo;
+		u32 tx_gtxpp_hi;
+		u32 tx_gtfcs_lo;
+		u32 tx_gtfcs_hi;
+		u32 tx_gtuca_lo;
+		u32 tx_gtuca_hi;
+		u32 tx_gtmca_lo;
+		u32 tx_gtmca_hi;
+		u32 tx_gtgca_lo;
+		u32 tx_gtgca_hi;
+		u32 tx_gtpkt_lo;
+		u32 tx_gtpkt_hi;
+		u32 tx_gt64_lo;
+		u32 tx_gt64_hi;
+		u32 tx_gt127_lo;
+		u32 tx_gt127_hi;
+		u32 tx_gt255_lo;
+		u32 tx_gt255_hi;
+		u32 tx_gt511_lo;
+		u32 tx_gt511_hi;
+		u32 tx_gt1023_lo;
+		u32 tx_gt1023_hi;
+		u32 tx_gt1518_lo;
+		u32 tx_gt1518_hi;
+		u32 tx_gt2047_lo;
+		u32 tx_gt2047_hi;
+		u32 tx_gt4095_lo;
+		u32 tx_gt4095_hi;
+		u32 tx_gt9216_lo;
+		u32 tx_gt9216_hi;
+		u32 tx_gt16383_lo;
+		u32 tx_gt16383_hi;
+		u32 tx_gtufl_lo;
+		u32 tx_gtufl_hi;
+		u32 tx_gterr_lo;
+		u32 tx_gterr_hi;
+		u32 tx_gtbyt_lo;
+		u32 tx_gtbyt_hi;
+		u32 tx_collisions_lo;
+		u32 tx_collisions_hi;
+		u32 tx_singlecollision_lo;
+		u32 tx_singlecollision_hi;
+		u32 tx_multiplecollisions_lo;
+		u32 tx_multiplecollisions_hi;
+		u32 tx_deferred_lo;
+		u32 tx_deferred_hi;
+		u32 tx_excessivecollisions_lo;
+		u32 tx_excessivecollisions_hi;
+		u32 tx_latecollisions_lo;
+		u32 tx_latecollisions_hi;
+	} stats_tx;
+
+	struct {
+		u32 rx_gr64_lo;
+		u32 rx_gr64_hi;
+		u32 rx_gr127_lo;
+		u32 rx_gr127_hi;
+		u32 rx_gr255_lo;
+		u32 rx_gr255_hi;
+		u32 rx_gr511_lo;
+		u32 rx_gr511_hi;
+		u32 rx_gr1023_lo;
+		u32 rx_gr1023_hi;
+		u32 rx_gr1518_lo;
+		u32 rx_gr1518_hi;
+		u32 rx_gr2047_lo;
+		u32 rx_gr2047_hi;
+		u32 rx_gr4095_lo;
+		u32 rx_gr4095_hi;
+		u32 rx_gr9216_lo;
+		u32 rx_gr9216_hi;
+		u32 rx_gr16383_lo;
+		u32 rx_gr16383_hi;
+		u32 rx_grpkt_lo;
+		u32 rx_grpkt_hi;
+		u32 rx_grfcs_lo;
+		u32 rx_grfcs_hi;
+		u32 rx_gruca_lo;
+		u32 rx_gruca_hi;
+		u32 rx_grmca_lo;
+		u32 rx_grmca_hi;
+		u32 rx_grbca_lo;
+		u32 rx_grbca_hi;
+		u32 rx_grxpf_lo;
+		u32 rx_grxpf_hi;
+		u32 rx_grxpp_lo;
+		u32 rx_grxpp_hi;
+		u32 rx_grxuo_lo;
+		u32 rx_grxuo_hi;
+		u32 rx_grovr_lo;
+		u32 rx_grovr_hi;
+		u32 rx_grxcf_lo;
+		u32 rx_grxcf_hi;
+		u32 rx_grflr_lo;
+		u32 rx_grflr_hi;
+		u32 rx_grpok_lo;
+		u32 rx_grpok_hi;
+		u32 rx_grbyt_lo;
+		u32 rx_grbyt_hi;
+		u32 rx_grund_lo;
+		u32 rx_grund_hi;
+		u32 rx_grfrg_lo;
+		u32 rx_grfrg_hi;
+		u32 rx_grerb_lo;
+		u32 rx_grerb_hi;
+		u32 rx_grfre_lo;
+		u32 rx_grfre_hi;
+
+		u32 rx_alignmenterrors_lo;
+		u32 rx_alignmenterrors_hi;
+		u32 rx_falsecarrier_lo;
+		u32 rx_falsecarrier_hi;
+		u32 rx_llfcmsgcnt_lo;
+		u32 rx_llfcmsgcnt_hi;
+	} stats_rx;
+};
+
+union mac_stats {
+	struct emac_stats	emac_stats;
+	struct bmac1_stats	bmac1_stats;
+	struct bmac2_stats	bmac2_stats;
+	struct mstat_stats	mstat_stats;
+};
+
+
+struct mac_stx {
+	/* in_bad_octets */
+	u32     rx_stat_ifhcinbadoctets_hi;
+	u32     rx_stat_ifhcinbadoctets_lo;
+
+	/* out_bad_octets */
+	u32     tx_stat_ifhcoutbadoctets_hi;
+	u32     tx_stat_ifhcoutbadoctets_lo;
+
+	/* crc_receive_errors */
+	u32     rx_stat_dot3statsfcserrors_hi;
+	u32     rx_stat_dot3statsfcserrors_lo;
+	/* alignment_errors */
+	u32     rx_stat_dot3statsalignmenterrors_hi;
+	u32     rx_stat_dot3statsalignmenterrors_lo;
+	/* carrier_sense_errors */
+	u32     rx_stat_dot3statscarriersenseerrors_hi;
+	u32     rx_stat_dot3statscarriersenseerrors_lo;
+	/* false_carrier_detections */
+	u32     rx_stat_falsecarriererrors_hi;
+	u32     rx_stat_falsecarriererrors_lo;
+
+	/* runt_packets_received */
+	u32     rx_stat_etherstatsundersizepkts_hi;
+	u32     rx_stat_etherstatsundersizepkts_lo;
+	/* jabber_packets_received */
+	u32     rx_stat_dot3statsframestoolong_hi;
+	u32     rx_stat_dot3statsframestoolong_lo;
+
+	/* error_runt_packets_received */
+	u32     rx_stat_etherstatsfragments_hi;
+	u32     rx_stat_etherstatsfragments_lo;
+	/* error_jabber_packets_received */
+	u32     rx_stat_etherstatsjabbers_hi;
+	u32     rx_stat_etherstatsjabbers_lo;
+
+	/* control_frames_received */
+	u32     rx_stat_maccontrolframesreceived_hi;
+	u32     rx_stat_maccontrolframesreceived_lo;
+	u32     rx_stat_mac_xpf_hi;
+	u32     rx_stat_mac_xpf_lo;
+	u32     rx_stat_mac_xcf_hi;
+	u32     rx_stat_mac_xcf_lo;
+
+	/* xoff_state_entered */
+	u32     rx_stat_xoffstateentered_hi;
+	u32     rx_stat_xoffstateentered_lo;
+	/* pause_xon_frames_received */
+	u32     rx_stat_xonpauseframesreceived_hi;
+	u32     rx_stat_xonpauseframesreceived_lo;
+	/* pause_xoff_frames_received */
+	u32     rx_stat_xoffpauseframesreceived_hi;
+	u32     rx_stat_xoffpauseframesreceived_lo;
+	/* pause_xon_frames_transmitted */
+	u32     tx_stat_outxonsent_hi;
+	u32     tx_stat_outxonsent_lo;
+	/* pause_xoff_frames_transmitted */
+	u32     tx_stat_outxoffsent_hi;
+	u32     tx_stat_outxoffsent_lo;
+	/* flow_control_done */
+	u32     tx_stat_flowcontroldone_hi;
+	u32     tx_stat_flowcontroldone_lo;
+
+	/* ether_stats_collisions */
+	u32     tx_stat_etherstatscollisions_hi;
+	u32     tx_stat_etherstatscollisions_lo;
+	/* single_collision_transmit_frames */
+	u32     tx_stat_dot3statssinglecollisionframes_hi;
+	u32     tx_stat_dot3statssinglecollisionframes_lo;
+	/* multiple_collision_transmit_frames */
+	u32     tx_stat_dot3statsmultiplecollisionframes_hi;
+	u32     tx_stat_dot3statsmultiplecollisionframes_lo;
+	/* deferred_transmissions */
+	u32     tx_stat_dot3statsdeferredtransmissions_hi;
+	u32     tx_stat_dot3statsdeferredtransmissions_lo;
+	/* excessive_collision_frames */
+	u32     tx_stat_dot3statsexcessivecollisions_hi;
+	u32     tx_stat_dot3statsexcessivecollisions_lo;
+	/* late_collision_frames */
+	u32     tx_stat_dot3statslatecollisions_hi;
+	u32     tx_stat_dot3statslatecollisions_lo;
+
+	/* frames_transmitted_64_bytes */
+	u32     tx_stat_etherstatspkts64octets_hi;
+	u32     tx_stat_etherstatspkts64octets_lo;
+	/* frames_transmitted_65_127_bytes */
+	u32     tx_stat_etherstatspkts65octetsto127octets_hi;
+	u32     tx_stat_etherstatspkts65octetsto127octets_lo;
+	/* frames_transmitted_128_255_bytes */
+	u32     tx_stat_etherstatspkts128octetsto255octets_hi;
+	u32     tx_stat_etherstatspkts128octetsto255octets_lo;
+	/* frames_transmitted_256_511_bytes */
+	u32     tx_stat_etherstatspkts256octetsto511octets_hi;
+	u32     tx_stat_etherstatspkts256octetsto511octets_lo;
+	/* frames_transmitted_512_1023_bytes */
+	u32     tx_stat_etherstatspkts512octetsto1023octets_hi;
+	u32     tx_stat_etherstatspkts512octetsto1023octets_lo;
+	/* frames_transmitted_1024_1522_bytes */
+	u32     tx_stat_etherstatspkts1024octetsto1522octets_hi;
+	u32     tx_stat_etherstatspkts1024octetsto1522octets_lo;
+	/* frames_transmitted_1523_9022_bytes */
+	u32     tx_stat_etherstatspktsover1522octets_hi;
+	u32     tx_stat_etherstatspktsover1522octets_lo;
+	u32     tx_stat_mac_2047_hi;
+	u32     tx_stat_mac_2047_lo;
+	u32     tx_stat_mac_4095_hi;
+	u32     tx_stat_mac_4095_lo;
+	u32     tx_stat_mac_9216_hi;
+	u32     tx_stat_mac_9216_lo;
+	u32     tx_stat_mac_16383_hi;
+	u32     tx_stat_mac_16383_lo;
+
+	/* internal_mac_transmit_errors */
+	u32     tx_stat_dot3statsinternalmactransmiterrors_hi;
+	u32     tx_stat_dot3statsinternalmactransmiterrors_lo;
+
+	/* if_out_discards */
+	u32     tx_stat_mac_ufl_hi;
+	u32     tx_stat_mac_ufl_lo;
+};
+
+
+#define MAC_STX_IDX_MAX                     2
+
+struct host_port_stats {
+	u32            host_port_stats_counter;
+
+	struct mac_stx mac_stx[MAC_STX_IDX_MAX];
+
+	u32            brb_drop_hi;
+	u32            brb_drop_lo;
+
+	u32            not_used; /* obsolete */
+	u32            pfc_frames_tx_hi;
+	u32            pfc_frames_tx_lo;
+	u32            pfc_frames_rx_hi;
+	u32            pfc_frames_rx_lo;
+};
+
+
+struct host_func_stats {
+	u32     host_func_stats_start;
+
+	u32     total_bytes_received_hi;
+	u32     total_bytes_received_lo;
+
+	u32     total_bytes_transmitted_hi;
+	u32     total_bytes_transmitted_lo;
+
+	u32     total_unicast_packets_received_hi;
+	u32     total_unicast_packets_received_lo;
+
+	u32     total_multicast_packets_received_hi;
+	u32     total_multicast_packets_received_lo;
+
+	u32     total_broadcast_packets_received_hi;
+	u32     total_broadcast_packets_received_lo;
+
+	u32     total_unicast_packets_transmitted_hi;
+	u32     total_unicast_packets_transmitted_lo;
+
+	u32     total_multicast_packets_transmitted_hi;
+	u32     total_multicast_packets_transmitted_lo;
+
+	u32     total_broadcast_packets_transmitted_hi;
+	u32     total_broadcast_packets_transmitted_lo;
+
+	u32     valid_bytes_received_hi;
+	u32     valid_bytes_received_lo;
+
+	u32     host_func_stats_end;
+};
+
+/* VIC definitions */
+#define VICSTATST_UIF_INDEX 2
+
+/*
+ * stats collected for vntag.
+ * NOTE: structure is exactly as expected to be received by the switch.
+ *       order must remain exactly as is unless protocol changes !
+ */
+struct vntag_stats {
+	u32 tx_unicast_frames_hi;
+	u32 tx_unicast_frames_lo;
+	u32 tx_unicast_bytes_hi;
+	u32 tx_unicast_bytes_lo;
+	u32 tx_multicast_frames_hi;
+	u32 tx_multicast_frames_lo;
+	u32 tx_multicast_bytes_hi;
+	u32 tx_multicast_bytes_lo;
+	u32 tx_broadcast_frames_hi;
+	u32 tx_broadcast_frames_lo;
+	u32 tx_broadcast_bytes_hi;
+	u32 tx_broadcast_bytes_lo;
+	u32 tx_frames_discarded_hi;
+	u32 tx_frames_discarded_lo;
+	u32 tx_frames_dropped_hi;
+	u32 tx_frames_dropped_lo;
+
+	u32 rx_unicast_frames_hi;
+	u32 rx_unicast_frames_lo;
+	u32 rx_unicast_bytes_hi;
+	u32 rx_unicast_bytes_lo;
+	u32 rx_multicast_frames_hi;
+	u32 rx_multicast_frames_lo;
+	u32 rx_multicast_bytes_hi;
+	u32 rx_multicast_bytes_lo;
+	u32 rx_broadcast_frames_hi;
+	u32 rx_broadcast_frames_lo;
+	u32 rx_broadcast_bytes_hi;
+	u32 rx_broadcast_bytes_lo;
+	u32 rx_frames_discarded_hi;
+	u32 rx_frames_discarded_lo;
+	u32 rx_frames_dropped_hi;
+	u32 rx_frames_dropped_lo;
+};
+
+/* To maintain backward compatibility between FW and drivers, new elements */
+/* should be added to the end of the structure. */
+
+/* Per  Port Statistics    */
+struct port_info {
+	u32 size; /* size of this structure (i.e. sizeof(port_info))  */
+	u32 enabled;      /* 0 =Disabled, 1= Enabled */
+	u32 link_speed;   /* multiplier of 100Mb */
+	u32 wol_support;  /* WoL Support (i.e. Non-Zero if WOL supported ) */
+	u32 flow_control; /* 802.3X Flow Ctrl. 0=off 1=RX 2=TX 3=RX&TX.*/
+	u32 flex10;     /* Flex10 mode enabled. non zero = yes */
+	u32 rx_drops;  /* RX Discards. Counters roll over, never reset */
+	u32 rx_errors; /* RX Errors. Physical Port Stats L95, All PFs and NC-SI.
+				   This is flagged by Consumer as an error. */
+	u32 rx_uncast_lo;   /* RX Unicast Packets. Free running counters: */
+	u32 rx_uncast_hi;   /* RX Unicast Packets. Free running counters: */
+	u32 rx_mcast_lo;    /* RX Multicast Packets  */
+	u32 rx_mcast_hi;    /* RX Multicast Packets  */
+	u32 rx_bcast_lo;    /* RX Broadcast Packets  */
+	u32 rx_bcast_hi;    /* RX Broadcast Packets  */
+	u32 tx_uncast_lo;   /* TX Unicast Packets   */
+	u32 tx_uncast_hi;   /* TX Unicast Packets   */
+	u32 tx_mcast_lo;    /* TX Multicast Packets  */
+	u32 tx_mcast_hi;    /* TX Multicast Packets  */
+	u32 tx_bcast_lo;    /* TX Broadcast Packets  */
+	u32 tx_bcast_hi;    /* TX Broadcast Packets  */
+	u32 tx_errors;      /* TX Errors              */
+	u32 tx_discards;    /* TX Discards          */
+	u32 rx_frames_lo;   /* RX Frames received  */
+	u32 rx_frames_hi;   /* RX Frames received  */
+	u32 rx_bytes_lo;    /* RX Bytes received    */
+	u32 rx_bytes_hi;    /* RX Bytes received    */
+	u32 tx_frames_lo;   /* TX Frames sent      */
+	u32 tx_frames_hi;   /* TX Frames sent      */
+	u32 tx_bytes_lo;    /* TX Bytes sent        */
+	u32 tx_bytes_hi;    /* TX Bytes sent        */
+	u32 link_status;  /* Port P Link Status. 1:0 bit for port enabled.
+				1:1 bit for link good,
+				2:1 Set if link changed between last poll. */
+	u32 tx_pfc_frames_lo;   /* PFC Frames sent.    */
+	u32 tx_pfc_frames_hi;   /* PFC Frames sent.    */
+	u32 rx_pfc_frames_lo;   /* PFC Frames Received. */
+	u32 rx_pfc_frames_hi;   /* PFC Frames Received. */
+};
+
+
+#define BCM_5710_FW_MAJOR_VERSION			7
+#define BCM_5710_FW_MINOR_VERSION			2
+#define BCM_5710_FW_REVISION_VERSION		11
+#define BCM_5710_FW_ENGINEERING_VERSION		0
+#define BCM_5710_FW_COMPILE_FLAGS			1
+
+
+/*
+ * attention bits
+ */
+struct atten_sp_status_block {
+	__le32 attn_bits;
+	__le32 attn_bits_ack;
+	u8 status_block_id;
+	u8 reserved0;
+	__le16 attn_bits_index;
+	__le32 reserved1;
+};
+
+
+/*
+ * The eth aggregative context of Cstorm
+ */
+struct cstorm_eth_ag_context {
+	u32 __reserved0[10];
+};
+
+
+/*
+ * dmae command structure
+ */
+struct dmae_command {
+	u32 opcode;
+#define DMAE_COMMAND_SRC (0x1<<0)
+#define DMAE_COMMAND_SRC_SHIFT 0
+#define DMAE_COMMAND_DST (0x3<<1)
+#define DMAE_COMMAND_DST_SHIFT 1
+#define DMAE_COMMAND_C_DST (0x1<<3)
+#define DMAE_COMMAND_C_DST_SHIFT 3
+#define DMAE_COMMAND_C_TYPE_ENABLE (0x1<<4)
+#define DMAE_COMMAND_C_TYPE_ENABLE_SHIFT 4
+#define DMAE_COMMAND_C_TYPE_CRC_ENABLE (0x1<<5)
+#define DMAE_COMMAND_C_TYPE_CRC_ENABLE_SHIFT 5
+#define DMAE_COMMAND_C_TYPE_CRC_OFFSET (0x7<<6)
+#define DMAE_COMMAND_C_TYPE_CRC_OFFSET_SHIFT 6
+#define DMAE_COMMAND_ENDIANITY (0x3<<9)
+#define DMAE_COMMAND_ENDIANITY_SHIFT 9
+#define DMAE_COMMAND_PORT (0x1<<11)
+#define DMAE_COMMAND_PORT_SHIFT 11
+#define DMAE_COMMAND_CRC_RESET (0x1<<12)
+#define DMAE_COMMAND_CRC_RESET_SHIFT 12
+#define DMAE_COMMAND_SRC_RESET (0x1<<13)
+#define DMAE_COMMAND_SRC_RESET_SHIFT 13
+#define DMAE_COMMAND_DST_RESET (0x1<<14)
+#define DMAE_COMMAND_DST_RESET_SHIFT 14
+#define DMAE_COMMAND_E1HVN (0x3<<15)
+#define DMAE_COMMAND_E1HVN_SHIFT 15
+#define DMAE_COMMAND_DST_VN (0x3<<17)
+#define DMAE_COMMAND_DST_VN_SHIFT 17
+#define DMAE_COMMAND_C_FUNC (0x1<<19)
+#define DMAE_COMMAND_C_FUNC_SHIFT 19
+#define DMAE_COMMAND_ERR_POLICY (0x3<<20)
+#define DMAE_COMMAND_ERR_POLICY_SHIFT 20
+#define DMAE_COMMAND_RESERVED0 (0x3FF<<22)
+#define DMAE_COMMAND_RESERVED0_SHIFT 22
+	u32 src_addr_lo;
+	u32 src_addr_hi;
+	u32 dst_addr_lo;
+	u32 dst_addr_hi;
+#if defined(__BIG_ENDIAN)
+	u16 opcode_iov;
+#define DMAE_COMMAND_SRC_VFID (0x3F<<0)
+#define DMAE_COMMAND_SRC_VFID_SHIFT 0
+#define DMAE_COMMAND_SRC_VFPF (0x1<<6)
+#define DMAE_COMMAND_SRC_VFPF_SHIFT 6
+#define DMAE_COMMAND_RESERVED1 (0x1<<7)
+#define DMAE_COMMAND_RESERVED1_SHIFT 7
+#define DMAE_COMMAND_DST_VFID (0x3F<<8)
+#define DMAE_COMMAND_DST_VFID_SHIFT 8
+#define DMAE_COMMAND_DST_VFPF (0x1<<14)
+#define DMAE_COMMAND_DST_VFPF_SHIFT 14
+#define DMAE_COMMAND_RESERVED2 (0x1<<15)
+#define DMAE_COMMAND_RESERVED2_SHIFT 15
+	u16 len;
+#elif defined(__LITTLE_ENDIAN)
+	u16 len;
+	u16 opcode_iov;
+#define DMAE_COMMAND_SRC_VFID (0x3F<<0)
+#define DMAE_COMMAND_SRC_VFID_SHIFT 0
+#define DMAE_COMMAND_SRC_VFPF (0x1<<6)
+#define DMAE_COMMAND_SRC_VFPF_SHIFT 6
+#define DMAE_COMMAND_RESERVED1 (0x1<<7)
+#define DMAE_COMMAND_RESERVED1_SHIFT 7
+#define DMAE_COMMAND_DST_VFID (0x3F<<8)
+#define DMAE_COMMAND_DST_VFID_SHIFT 8
+#define DMAE_COMMAND_DST_VFPF (0x1<<14)
+#define DMAE_COMMAND_DST_VFPF_SHIFT 14
+#define DMAE_COMMAND_RESERVED2 (0x1<<15)
+#define DMAE_COMMAND_RESERVED2_SHIFT 15
+#endif
+	u32 comp_addr_lo;
+	u32 comp_addr_hi;
+	u32 comp_val;
+	u32 crc32;
+	u32 crc32_c;
+#if defined(__BIG_ENDIAN)
+	u16 crc16_c;
+	u16 crc16;
+#elif defined(__LITTLE_ENDIAN)
+	u16 crc16;
+	u16 crc16_c;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 reserved3;
+	u16 crc_t10;
+#elif defined(__LITTLE_ENDIAN)
+	u16 crc_t10;
+	u16 reserved3;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 xsum8;
+	u16 xsum16;
+#elif defined(__LITTLE_ENDIAN)
+	u16 xsum16;
+	u16 xsum8;
+#endif
+};
+
+
+/*
+ * common data for all protocols
+ */
+struct doorbell_hdr {
+	u8 header;
+#define DOORBELL_HDR_RX (0x1<<0)
+#define DOORBELL_HDR_RX_SHIFT 0
+#define DOORBELL_HDR_DB_TYPE (0x1<<1)
+#define DOORBELL_HDR_DB_TYPE_SHIFT 1
+#define DOORBELL_HDR_DPM_SIZE (0x3<<2)
+#define DOORBELL_HDR_DPM_SIZE_SHIFT 2
+#define DOORBELL_HDR_CONN_TYPE (0xF<<4)
+#define DOORBELL_HDR_CONN_TYPE_SHIFT 4
+};
+
+/*
+ * Ethernet doorbell
+ */
+struct eth_tx_doorbell {
+#if defined(__BIG_ENDIAN)
+	u16 npackets;
+	u8 params;
+#define ETH_TX_DOORBELL_NUM_BDS (0x3F<<0)
+#define ETH_TX_DOORBELL_NUM_BDS_SHIFT 0
+#define ETH_TX_DOORBELL_RESERVED_TX_FIN_FLAG (0x1<<6)
+#define ETH_TX_DOORBELL_RESERVED_TX_FIN_FLAG_SHIFT 6
+#define ETH_TX_DOORBELL_SPARE (0x1<<7)
+#define ETH_TX_DOORBELL_SPARE_SHIFT 7
+	struct doorbell_hdr hdr;
+#elif defined(__LITTLE_ENDIAN)
+	struct doorbell_hdr hdr;
+	u8 params;
+#define ETH_TX_DOORBELL_NUM_BDS (0x3F<<0)
+#define ETH_TX_DOORBELL_NUM_BDS_SHIFT 0
+#define ETH_TX_DOORBELL_RESERVED_TX_FIN_FLAG (0x1<<6)
+#define ETH_TX_DOORBELL_RESERVED_TX_FIN_FLAG_SHIFT 6
+#define ETH_TX_DOORBELL_SPARE (0x1<<7)
+#define ETH_TX_DOORBELL_SPARE_SHIFT 7
+	u16 npackets;
+#endif
+};
+
+
+/*
+ * 3 lines. status block
+ */
+struct hc_status_block_e1x {
+	__le16 index_values[HC_SB_MAX_INDICES_E1X];
+	__le16 running_index[HC_SB_MAX_SM];
+	__le32 rsrv[11];
+};
+
+/*
+ * host status block
+ */
+struct host_hc_status_block_e1x {
+	struct hc_status_block_e1x sb;
+};
+
+
+/*
+ * 3 lines. status block
+ */
+struct hc_status_block_e2 {
+	__le16 index_values[HC_SB_MAX_INDICES_E2];
+	__le16 running_index[HC_SB_MAX_SM];
+	__le32 reserved[11];
+};
+
+/*
+ * host status block
+ */
+struct host_hc_status_block_e2 {
+	struct hc_status_block_e2 sb;
+};
+
+
+/*
+ * 5 lines. slow-path status block
+ */
+struct hc_sp_status_block {
+	__le16 index_values[HC_SP_SB_MAX_INDICES];
+	__le16 running_index;
+	__le16 rsrv;
+	u32 rsrv1;
+};
+
+/*
+ * host status block
+ */
+struct host_sp_status_block {
+	struct atten_sp_status_block atten_status_block;
+	struct hc_sp_status_block sp_sb;
+};
+
+
+/*
+ * IGU driver acknowledgment register
+ */
+struct igu_ack_register {
+#if defined(__BIG_ENDIAN)
+	u16 sb_id_and_flags;
+#define IGU_ACK_REGISTER_STATUS_BLOCK_ID (0x1F<<0)
+#define IGU_ACK_REGISTER_STATUS_BLOCK_ID_SHIFT 0
+#define IGU_ACK_REGISTER_STORM_ID (0x7<<5)
+#define IGU_ACK_REGISTER_STORM_ID_SHIFT 5
+#define IGU_ACK_REGISTER_UPDATE_INDEX (0x1<<8)
+#define IGU_ACK_REGISTER_UPDATE_INDEX_SHIFT 8
+#define IGU_ACK_REGISTER_INTERRUPT_MODE (0x3<<9)
+#define IGU_ACK_REGISTER_INTERRUPT_MODE_SHIFT 9
+#define IGU_ACK_REGISTER_RESERVED (0x1F<<11)
+#define IGU_ACK_REGISTER_RESERVED_SHIFT 11
+	u16 status_block_index;
+#elif defined(__LITTLE_ENDIAN)
+	u16 status_block_index;
+	u16 sb_id_and_flags;
+#define IGU_ACK_REGISTER_STATUS_BLOCK_ID (0x1F<<0)
+#define IGU_ACK_REGISTER_STATUS_BLOCK_ID_SHIFT 0
+#define IGU_ACK_REGISTER_STORM_ID (0x7<<5)
+#define IGU_ACK_REGISTER_STORM_ID_SHIFT 5
+#define IGU_ACK_REGISTER_UPDATE_INDEX (0x1<<8)
+#define IGU_ACK_REGISTER_UPDATE_INDEX_SHIFT 8
+#define IGU_ACK_REGISTER_INTERRUPT_MODE (0x3<<9)
+#define IGU_ACK_REGISTER_INTERRUPT_MODE_SHIFT 9
+#define IGU_ACK_REGISTER_RESERVED (0x1F<<11)
+#define IGU_ACK_REGISTER_RESERVED_SHIFT 11
+#endif
+};
+
+
+/*
+ * IGU driver acknowledgement register
+ */
+struct igu_backward_compatible {
+	u32 sb_id_and_flags;
+#define IGU_BACKWARD_COMPATIBLE_SB_INDEX (0xFFFF<<0)
+#define IGU_BACKWARD_COMPATIBLE_SB_INDEX_SHIFT 0
+#define IGU_BACKWARD_COMPATIBLE_SB_SELECT (0x1F<<16)
+#define IGU_BACKWARD_COMPATIBLE_SB_SELECT_SHIFT 16
+#define IGU_BACKWARD_COMPATIBLE_SEGMENT_ACCESS (0x7<<21)
+#define IGU_BACKWARD_COMPATIBLE_SEGMENT_ACCESS_SHIFT 21
+#define IGU_BACKWARD_COMPATIBLE_BUPDATE (0x1<<24)
+#define IGU_BACKWARD_COMPATIBLE_BUPDATE_SHIFT 24
+#define IGU_BACKWARD_COMPATIBLE_ENABLE_INT (0x3<<25)
+#define IGU_BACKWARD_COMPATIBLE_ENABLE_INT_SHIFT 25
+#define IGU_BACKWARD_COMPATIBLE_RESERVED_0 (0x1F<<27)
+#define IGU_BACKWARD_COMPATIBLE_RESERVED_0_SHIFT 27
+	u32 reserved_2;
+};
+
+
+/*
+ * IGU driver acknowledgement register
+ */
+struct igu_regular {
+	u32 sb_id_and_flags;
+#define IGU_REGULAR_SB_INDEX (0xFFFFF<<0)
+#define IGU_REGULAR_SB_INDEX_SHIFT 0
+#define IGU_REGULAR_RESERVED0 (0x1<<20)
+#define IGU_REGULAR_RESERVED0_SHIFT 20
+#define IGU_REGULAR_SEGMENT_ACCESS (0x7<<21)
+#define IGU_REGULAR_SEGMENT_ACCESS_SHIFT 21
+#define IGU_REGULAR_BUPDATE (0x1<<24)
+#define IGU_REGULAR_BUPDATE_SHIFT 24
+#define IGU_REGULAR_ENABLE_INT (0x3<<25)
+#define IGU_REGULAR_ENABLE_INT_SHIFT 25
+#define IGU_REGULAR_RESERVED_1 (0x1<<27)
+#define IGU_REGULAR_RESERVED_1_SHIFT 27
+#define IGU_REGULAR_CLEANUP_TYPE (0x3<<28)
+#define IGU_REGULAR_CLEANUP_TYPE_SHIFT 28
+#define IGU_REGULAR_CLEANUP_SET (0x1<<30)
+#define IGU_REGULAR_CLEANUP_SET_SHIFT 30
+#define IGU_REGULAR_BCLEANUP (0x1<<31)
+#define IGU_REGULAR_BCLEANUP_SHIFT 31
+	u32 reserved_2;
+};
+
+/*
+ * IGU driver acknowledgement register
+ */
+union igu_consprod_reg {
+	struct igu_regular regular;
+	struct igu_backward_compatible backward_compatible;
+};
+
+
+/*
+ * Igu control commands
+ */
+enum igu_ctrl_cmd {
+	IGU_CTRL_CMD_TYPE_RD,
+	IGU_CTRL_CMD_TYPE_WR,
+	MAX_IGU_CTRL_CMD};
+
+
+/*
+ * Control register for the IGU command register
+ */
+struct igu_ctrl_reg {
+	u32 ctrl_data;
+#define IGU_CTRL_REG_ADDRESS (0xFFF<<0)
+#define IGU_CTRL_REG_ADDRESS_SHIFT 0
+#define IGU_CTRL_REG_FID (0x7F<<12)
+#define IGU_CTRL_REG_FID_SHIFT 12
+#define IGU_CTRL_REG_RESERVED (0x1<<19)
+#define IGU_CTRL_REG_RESERVED_SHIFT 19
+#define IGU_CTRL_REG_TYPE (0x1<<20)
+#define IGU_CTRL_REG_TYPE_SHIFT 20
+#define IGU_CTRL_REG_UNUSED (0x7FF<<21)
+#define IGU_CTRL_REG_UNUSED_SHIFT 21
+};
+
+
+/*
+ * Igu interrupt command
+ */
+enum igu_int_cmd {
+	IGU_INT_ENABLE,
+	IGU_INT_DISABLE,
+	IGU_INT_NOP,
+	IGU_INT_NOP2,
+	MAX_IGU_INT_CMD};
+
+
+/*
+ * Igu segments
+ */
+enum igu_seg_access {
+	IGU_SEG_ACCESS_NORM,
+	IGU_SEG_ACCESS_DEF,
+	IGU_SEG_ACCESS_ATTN,
+	MAX_IGU_SEG_ACCESS};
+
+
+/*
+ * Parser parsing flags field
+ */
+struct parsing_flags {
+	__le16 flags;
+#define PARSING_FLAGS_ETHERNET_ADDRESS_TYPE (0x1<<0)
+#define PARSING_FLAGS_ETHERNET_ADDRESS_TYPE_SHIFT 0
+#define PARSING_FLAGS_VLAN (0x1<<1)
+#define PARSING_FLAGS_VLAN_SHIFT 1
+#define PARSING_FLAGS_EXTRA_VLAN (0x1<<2)
+#define PARSING_FLAGS_EXTRA_VLAN_SHIFT 2
+#define PARSING_FLAGS_OVER_ETHERNET_PROTOCOL (0x3<<3)
+#define PARSING_FLAGS_OVER_ETHERNET_PROTOCOL_SHIFT 3
+#define PARSING_FLAGS_IP_OPTIONS (0x1<<5)
+#define PARSING_FLAGS_IP_OPTIONS_SHIFT 5
+#define PARSING_FLAGS_FRAGMENTATION_STATUS (0x1<<6)
+#define PARSING_FLAGS_FRAGMENTATION_STATUS_SHIFT 6
+#define PARSING_FLAGS_OVER_IP_PROTOCOL (0x3<<7)
+#define PARSING_FLAGS_OVER_IP_PROTOCOL_SHIFT 7
+#define PARSING_FLAGS_PURE_ACK_INDICATION (0x1<<9)
+#define PARSING_FLAGS_PURE_ACK_INDICATION_SHIFT 9
+#define PARSING_FLAGS_TCP_OPTIONS_EXIST (0x1<<10)
+#define PARSING_FLAGS_TCP_OPTIONS_EXIST_SHIFT 10
+#define PARSING_FLAGS_TIME_STAMP_EXIST_FLAG (0x1<<11)
+#define PARSING_FLAGS_TIME_STAMP_EXIST_FLAG_SHIFT 11
+#define PARSING_FLAGS_CONNECTION_MATCH (0x1<<12)
+#define PARSING_FLAGS_CONNECTION_MATCH_SHIFT 12
+#define PARSING_FLAGS_LLC_SNAP (0x1<<13)
+#define PARSING_FLAGS_LLC_SNAP_SHIFT 13
+#define PARSING_FLAGS_RESERVED0 (0x3<<14)
+#define PARSING_FLAGS_RESERVED0_SHIFT 14
+};
+
+
+/*
+ * Parsing flags for TCP ACK type
+ */
+enum prs_flags_ack_type {
+	PRS_FLAG_PUREACK_PIGGY,
+	PRS_FLAG_PUREACK_PURE,
+	MAX_PRS_FLAGS_ACK_TYPE};
+
+
+/*
+ * Parsing flags for Ethernet address type
+ */
+enum prs_flags_eth_addr_type {
+	PRS_FLAG_ETHTYPE_NON_UNICAST,
+	PRS_FLAG_ETHTYPE_UNICAST,
+	MAX_PRS_FLAGS_ETH_ADDR_TYPE};
+
+
+/*
+ * Parsing flags for over-ethernet protocol
+ */
+enum prs_flags_over_eth {
+	PRS_FLAG_OVERETH_UNKNOWN,
+	PRS_FLAG_OVERETH_IPV4,
+	PRS_FLAG_OVERETH_IPV6,
+	PRS_FLAG_OVERETH_LLCSNAP_UNKNOWN,
+	MAX_PRS_FLAGS_OVER_ETH};
+
+
+/*
+ * Parsing flags for over-IP protocol
+ */
+enum prs_flags_over_ip {
+	PRS_FLAG_OVERIP_UNKNOWN,
+	PRS_FLAG_OVERIP_TCP,
+	PRS_FLAG_OVERIP_UDP,
+	MAX_PRS_FLAGS_OVER_IP};
+
+
+/*
+ * SDM operation gen command (generate aggregative interrupt)
+ */
+struct sdm_op_gen {
+	__le32 command;
+#define SDM_OP_GEN_COMP_PARAM (0x1F<<0)
+#define SDM_OP_GEN_COMP_PARAM_SHIFT 0
+#define SDM_OP_GEN_COMP_TYPE (0x7<<5)
+#define SDM_OP_GEN_COMP_TYPE_SHIFT 5
+#define SDM_OP_GEN_AGG_VECT_IDX (0xFF<<8)
+#define SDM_OP_GEN_AGG_VECT_IDX_SHIFT 8
+#define SDM_OP_GEN_AGG_VECT_IDX_VALID (0x1<<16)
+#define SDM_OP_GEN_AGG_VECT_IDX_VALID_SHIFT 16
+#define SDM_OP_GEN_RESERVED (0x7FFF<<17)
+#define SDM_OP_GEN_RESERVED_SHIFT 17
+};
+
+
+/*
+ * Timers connection context
+ */
+struct timers_block_context {
+	u32 __reserved_0;
+	u32 __reserved_1;
+	u32 __reserved_2;
+	u32 flags;
+#define __TIMERS_BLOCK_CONTEXT_NUM_OF_ACTIVE_TIMERS (0x3<<0)
+#define __TIMERS_BLOCK_CONTEXT_NUM_OF_ACTIVE_TIMERS_SHIFT 0
+#define TIMERS_BLOCK_CONTEXT_CONN_VALID_FLG (0x1<<2)
+#define TIMERS_BLOCK_CONTEXT_CONN_VALID_FLG_SHIFT 2
+#define __TIMERS_BLOCK_CONTEXT_RESERVED0 (0x1FFFFFFF<<3)
+#define __TIMERS_BLOCK_CONTEXT_RESERVED0_SHIFT 3
+};
+
+
+/*
+ * The eth aggregative context of Tstorm
+ */
+struct tstorm_eth_ag_context {
+	u32 __reserved0[14];
+};
+
+
+/*
+ * The eth aggregative context of Ustorm
+ */
+struct ustorm_eth_ag_context {
+	u32 __reserved0;
+#if defined(__BIG_ENDIAN)
+	u8 cdu_usage;
+	u8 __reserved2;
+	u16 __reserved1;
+#elif defined(__LITTLE_ENDIAN)
+	u16 __reserved1;
+	u8 __reserved2;
+	u8 cdu_usage;
+#endif
+	u32 __reserved3[6];
+};
+
+
+/*
+ * The eth aggregative context of Xstorm
+ */
+struct xstorm_eth_ag_context {
+	u32 reserved0;
+#if defined(__BIG_ENDIAN)
+	u8 cdu_reserved;
+	u8 reserved2;
+	u16 reserved1;
+#elif defined(__LITTLE_ENDIAN)
+	u16 reserved1;
+	u8 reserved2;
+	u8 cdu_reserved;
+#endif
+	u32 reserved3[30];
+};
+
+
+/*
+ * doorbell message sent to the chip
+ */
+struct doorbell {
+#if defined(__BIG_ENDIAN)
+	u16 zero_fill2;
+	u8 zero_fill1;
+	struct doorbell_hdr header;
+#elif defined(__LITTLE_ENDIAN)
+	struct doorbell_hdr header;
+	u8 zero_fill1;
+	u16 zero_fill2;
+#endif
+};
+
+
+/*
+ * doorbell message sent to the chip
+ */
+struct doorbell_set_prod {
+#if defined(__BIG_ENDIAN)
+	u16 prod;
+	u8 zero_fill1;
+	struct doorbell_hdr header;
+#elif defined(__LITTLE_ENDIAN)
+	struct doorbell_hdr header;
+	u8 zero_fill1;
+	u16 prod;
+#endif
+};
+
+
+struct regpair {
+	__le32 lo;
+	__le32 hi;
+};
+
+
+/*
+ * Classify rule opcodes in E2/E3
+ */
+enum classify_rule {
+	CLASSIFY_RULE_OPCODE_MAC,
+	CLASSIFY_RULE_OPCODE_VLAN,
+	CLASSIFY_RULE_OPCODE_PAIR,
+	MAX_CLASSIFY_RULE};
+
+
+/*
+ * Classify rule types in E2/E3
+ */
+enum classify_rule_action_type {
+	CLASSIFY_RULE_REMOVE,
+	CLASSIFY_RULE_ADD,
+	MAX_CLASSIFY_RULE_ACTION_TYPE};
+
+
+/*
+ * client init ramrod data
+ */
+struct client_init_general_data {
+	u8 client_id;
+	u8 statistics_counter_id;
+	u8 statistics_en_flg;
+	u8 is_fcoe_flg;
+	u8 activate_flg;
+	u8 sp_client_id;
+	__le16 mtu;
+	u8 statistics_zero_flg;
+	u8 func_id;
+	u8 cos;
+	u8 traffic_type;
+	u32 reserved0;
+};
+
+
+/*
+ * client init rx data
+ */
+struct client_init_rx_data {
+	u8 tpa_en;
+#define CLIENT_INIT_RX_DATA_TPA_EN_IPV4 (0x1<<0)
+#define CLIENT_INIT_RX_DATA_TPA_EN_IPV4_SHIFT 0
+#define CLIENT_INIT_RX_DATA_TPA_EN_IPV6 (0x1<<1)
+#define CLIENT_INIT_RX_DATA_TPA_EN_IPV6_SHIFT 1
+#define CLIENT_INIT_RX_DATA_RESERVED5 (0x3F<<2)
+#define CLIENT_INIT_RX_DATA_RESERVED5_SHIFT 2
+	u8 vmqueue_mode_en_flg;
+	u8 extra_data_over_sgl_en_flg;
+	u8 cache_line_alignment_log_size;
+	u8 enable_dynamic_hc;
+	u8 max_sges_for_packet;
+	u8 client_qzone_id;
+	u8 drop_ip_cs_err_flg;
+	u8 drop_tcp_cs_err_flg;
+	u8 drop_ttl0_flg;
+	u8 drop_udp_cs_err_flg;
+	u8 inner_vlan_removal_enable_flg;
+	u8 outer_vlan_removal_enable_flg;
+	u8 status_block_id;
+	u8 rx_sb_index_number;
+	u8 reserved0;
+	u8 max_tpa_queues;
+	u8 silent_vlan_removal_flg;
+	__le16 max_bytes_on_bd;
+	__le16 sge_buff_size;
+	u8 approx_mcast_engine_id;
+	u8 rss_engine_id;
+	struct regpair bd_page_base;
+	struct regpair sge_page_base;
+	struct regpair cqe_page_base;
+	u8 is_leading_rss;
+	u8 is_approx_mcast;
+	__le16 max_agg_size;
+	__le16 state;
+#define CLIENT_INIT_RX_DATA_UCAST_DROP_ALL (0x1<<0)
+#define CLIENT_INIT_RX_DATA_UCAST_DROP_ALL_SHIFT 0
+#define CLIENT_INIT_RX_DATA_UCAST_ACCEPT_ALL (0x1<<1)
+#define CLIENT_INIT_RX_DATA_UCAST_ACCEPT_ALL_SHIFT 1
+#define CLIENT_INIT_RX_DATA_UCAST_ACCEPT_UNMATCHED (0x1<<2)
+#define CLIENT_INIT_RX_DATA_UCAST_ACCEPT_UNMATCHED_SHIFT 2
+#define CLIENT_INIT_RX_DATA_MCAST_DROP_ALL (0x1<<3)
+#define CLIENT_INIT_RX_DATA_MCAST_DROP_ALL_SHIFT 3
+#define CLIENT_INIT_RX_DATA_MCAST_ACCEPT_ALL (0x1<<4)
+#define CLIENT_INIT_RX_DATA_MCAST_ACCEPT_ALL_SHIFT 4
+#define CLIENT_INIT_RX_DATA_BCAST_ACCEPT_ALL (0x1<<5)
+#define CLIENT_INIT_RX_DATA_BCAST_ACCEPT_ALL_SHIFT 5
+#define CLIENT_INIT_RX_DATA_ACCEPT_ANY_VLAN (0x1<<6)
+#define CLIENT_INIT_RX_DATA_ACCEPT_ANY_VLAN_SHIFT 6
+#define CLIENT_INIT_RX_DATA_RESERVED2 (0x1FF<<7)
+#define CLIENT_INIT_RX_DATA_RESERVED2_SHIFT 7
+	__le16 cqe_pause_thr_low;
+	__le16 cqe_pause_thr_high;
+	__le16 bd_pause_thr_low;
+	__le16 bd_pause_thr_high;
+	__le16 sge_pause_thr_low;
+	__le16 sge_pause_thr_high;
+	__le16 rx_cos_mask;
+	__le16 silent_vlan_value;
+	__le16 silent_vlan_mask;
+	__le32 reserved6[2];
+};
+
+/*
+ * client init tx data
+ */
+struct client_init_tx_data {
+	u8 enforce_security_flg;
+	u8 tx_status_block_id;
+	u8 tx_sb_index_number;
+	u8 tss_leading_client_id;
+	u8 tx_switching_flg;
+	u8 anti_spoofing_flg;
+	__le16 default_vlan;
+	struct regpair tx_bd_page_base;
+	__le16 state;
+#define CLIENT_INIT_TX_DATA_UCAST_ACCEPT_ALL (0x1<<0)
+#define CLIENT_INIT_TX_DATA_UCAST_ACCEPT_ALL_SHIFT 0
+#define CLIENT_INIT_TX_DATA_MCAST_ACCEPT_ALL (0x1<<1)
+#define CLIENT_INIT_TX_DATA_MCAST_ACCEPT_ALL_SHIFT 1
+#define CLIENT_INIT_TX_DATA_BCAST_ACCEPT_ALL (0x1<<2)
+#define CLIENT_INIT_TX_DATA_BCAST_ACCEPT_ALL_SHIFT 2
+#define CLIENT_INIT_TX_DATA_ACCEPT_ANY_VLAN (0x1<<3)
+#define CLIENT_INIT_TX_DATA_ACCEPT_ANY_VLAN_SHIFT 3
+#define CLIENT_INIT_TX_DATA_RESERVED1 (0xFFF<<4)
+#define CLIENT_INIT_TX_DATA_RESERVED1_SHIFT 4
+	u8 default_vlan_flg;
+	u8 force_default_pri_flg;
+	__le32 reserved3;
+};
+
+/*
+ * client init ramrod data
+ */
+struct client_init_ramrod_data {
+	struct client_init_general_data general;
+	struct client_init_rx_data rx;
+	struct client_init_tx_data tx;
+};
+
+
+/*
+ * client update ramrod data
+ */
+struct client_update_ramrod_data {
+	u8 client_id;
+	u8 func_id;
+	u8 inner_vlan_removal_enable_flg;
+	u8 inner_vlan_removal_change_flg;
+	u8 outer_vlan_removal_enable_flg;
+	u8 outer_vlan_removal_change_flg;
+	u8 anti_spoofing_enable_flg;
+	u8 anti_spoofing_change_flg;
+	u8 activate_flg;
+	u8 activate_change_flg;
+	__le16 default_vlan;
+	u8 default_vlan_enable_flg;
+	u8 default_vlan_change_flg;
+	__le16 silent_vlan_value;
+	__le16 silent_vlan_mask;
+	u8 silent_vlan_removal_flg;
+	u8 silent_vlan_change_flg;
+	__le32 echo;
+};
+
+
+/*
+ * The eth storm context of Cstorm
+ */
+struct cstorm_eth_st_context {
+	u32 __reserved0[4];
+};
+
+
+struct double_regpair {
+	u32 regpair0_lo;
+	u32 regpair0_hi;
+	u32 regpair1_lo;
+	u32 regpair1_hi;
+};
+
+
+/*
+ * Ethernet address typesm used in ethernet tx BDs
+ */
+enum eth_addr_type {
+	UNKNOWN_ADDRESS,
+	UNICAST_ADDRESS,
+	MULTICAST_ADDRESS,
+	BROADCAST_ADDRESS,
+	MAX_ETH_ADDR_TYPE};
+
+
+/*
+ * 
+ */
+struct eth_classify_cmd_header {
+	u8 cmd_general_data;
+#define ETH_CLASSIFY_CMD_HEADER_RX_CMD (0x1<<0)
+#define ETH_CLASSIFY_CMD_HEADER_RX_CMD_SHIFT 0
+#define ETH_CLASSIFY_CMD_HEADER_TX_CMD (0x1<<1)
+#define ETH_CLASSIFY_CMD_HEADER_TX_CMD_SHIFT 1
+#define ETH_CLASSIFY_CMD_HEADER_OPCODE (0x3<<2)
+#define ETH_CLASSIFY_CMD_HEADER_OPCODE_SHIFT 2
+#define ETH_CLASSIFY_CMD_HEADER_IS_ADD (0x1<<4)
+#define ETH_CLASSIFY_CMD_HEADER_IS_ADD_SHIFT 4
+#define ETH_CLASSIFY_CMD_HEADER_RESERVED0 (0x7<<5)
+#define ETH_CLASSIFY_CMD_HEADER_RESERVED0_SHIFT 5
+	u8 func_id;
+	u8 client_id;
+	u8 reserved1;
+};
+
+
+/*
+ * header for eth classification config ramrod
+ */
+struct eth_classify_header {
+	u8 rule_cnt;
+	u8 reserved0;
+	__le16 reserved1;
+	__le32 echo;
+};
+
+
+/*
+ * Command for adding/removing a MAC classification rule
+ */
+struct eth_classify_mac_cmd {
+	struct eth_classify_cmd_header header;
+	__le32 reserved0;
+	__le16 mac_lsb;
+	__le16 mac_mid;
+	__le16 mac_msb;
+	__le16 reserved1;
+};
+
+
+/*
+ * Command for adding/removing a MAC-VLAN pair classification rule
+ */
+struct eth_classify_pair_cmd {
+	struct eth_classify_cmd_header header;
+	__le32 reserved0;
+	__le16 mac_lsb;
+	__le16 mac_mid;
+	__le16 mac_msb;
+	__le16 vlan;
+};
+
+
+/*
+ * Command for adding/removing a VLAN classification rule
+ */
+struct eth_classify_vlan_cmd {
+	struct eth_classify_cmd_header header;
+	__le32 reserved0;
+	__le32 reserved1;
+	__le16 reserved2;
+	__le16 vlan;
+};
+
+/*
+ * union for eth classification rule
+ */
+union eth_classify_rule_cmd {
+	struct eth_classify_mac_cmd mac;
+	struct eth_classify_vlan_cmd vlan;
+	struct eth_classify_pair_cmd pair;
+};
+
+/*
+ * parameters for eth classification configuration ramrod
+ */
+struct eth_classify_rules_ramrod_data {
+	struct eth_classify_header header;
+	union eth_classify_rule_cmd rules[CLASSIFY_RULES_COUNT];
+};
+
+
+/*
+ * The data contain client ID need to the ramrod
+ */
+struct eth_common_ramrod_data {
+	__le32 client_id;
+	__le32 reserved1;
+};
+
+
+/*
+ * The eth storm context of Ustorm
+ */
+struct ustorm_eth_st_context {
+	u32 reserved0[52];
+};
+
+/*
+ * The eth storm context of Tstorm
+ */
+struct tstorm_eth_st_context {
+	u32 __reserved0[28];
+};
+
+/*
+ * The eth storm context of Xstorm
+ */
+struct xstorm_eth_st_context {
+	u32 reserved0[60];
+};
+
+/*
+ * Ethernet connection context 
+ */
+struct eth_context {
+	struct ustorm_eth_st_context ustorm_st_context;
+	struct tstorm_eth_st_context tstorm_st_context;
+	struct xstorm_eth_ag_context xstorm_ag_context;
+	struct tstorm_eth_ag_context tstorm_ag_context;
+	struct cstorm_eth_ag_context cstorm_ag_context;
+	struct ustorm_eth_ag_context ustorm_ag_context;
+	struct timers_block_context timers_context;
+	struct xstorm_eth_st_context xstorm_st_context;
+	struct cstorm_eth_st_context cstorm_st_context;
+};
+
+
+/*
+ * union for sgl and raw data.
+ */
+union eth_sgl_or_raw_data {
+	__le16 sgl[8];
+	u32 raw_data[4];
+};
+
+/*
+ * eth FP end aggregation CQE parameters struct
+ */
+struct eth_end_agg_rx_cqe {
+	u8 type_error_flags;
+#define ETH_END_AGG_RX_CQE_TYPE (0x3<<0)
+#define ETH_END_AGG_RX_CQE_TYPE_SHIFT 0
+#define ETH_END_AGG_RX_CQE_SGL_RAW_SEL (0x1<<2)
+#define ETH_END_AGG_RX_CQE_SGL_RAW_SEL_SHIFT 2
+#define ETH_END_AGG_RX_CQE_RESERVED0 (0x1F<<3)
+#define ETH_END_AGG_RX_CQE_RESERVED0_SHIFT 3
+	u8 reserved1;
+	u8 queue_index;
+	u8 reserved2;
+	__le32 timestamp_delta;
+	__le16 num_of_coalesced_segs;
+	__le16 pkt_len;
+	u8 pure_ack_count;
+	u8 reserved3;
+	__le16 reserved4;
+	union eth_sgl_or_raw_data sgl_or_raw_data;
+	__le32 reserved5[8];
+};
+
+
+/*
+ * regular eth FP CQE parameters struct
+ */
+struct eth_fast_path_rx_cqe {
+	u8 type_error_flags;
+#define ETH_FAST_PATH_RX_CQE_TYPE (0x3<<0)
+#define ETH_FAST_PATH_RX_CQE_TYPE_SHIFT 0
+#define ETH_FAST_PATH_RX_CQE_SGL_RAW_SEL (0x1<<2)
+#define ETH_FAST_PATH_RX_CQE_SGL_RAW_SEL_SHIFT 2
+#define ETH_FAST_PATH_RX_CQE_PHY_DECODE_ERR_FLG (0x1<<3)
+#define ETH_FAST_PATH_RX_CQE_PHY_DECODE_ERR_FLG_SHIFT 3
+#define ETH_FAST_PATH_RX_CQE_IP_BAD_XSUM_FLG (0x1<<4)
+#define ETH_FAST_PATH_RX_CQE_IP_BAD_XSUM_FLG_SHIFT 4
+#define ETH_FAST_PATH_RX_CQE_L4_BAD_XSUM_FLG (0x1<<5)
+#define ETH_FAST_PATH_RX_CQE_L4_BAD_XSUM_FLG_SHIFT 5
+#define ETH_FAST_PATH_RX_CQE_RESERVED0 (0x3<<6)
+#define ETH_FAST_PATH_RX_CQE_RESERVED0_SHIFT 6
+	u8 status_flags;
+#define ETH_FAST_PATH_RX_CQE_RSS_HASH_TYPE (0x7<<0)
+#define ETH_FAST_PATH_RX_CQE_RSS_HASH_TYPE_SHIFT 0
+#define ETH_FAST_PATH_RX_CQE_RSS_HASH_FLG (0x1<<3)
+#define ETH_FAST_PATH_RX_CQE_RSS_HASH_FLG_SHIFT 3
+#define ETH_FAST_PATH_RX_CQE_BROADCAST_FLG (0x1<<4)
+#define ETH_FAST_PATH_RX_CQE_BROADCAST_FLG_SHIFT 4
+#define ETH_FAST_PATH_RX_CQE_MAC_MATCH_FLG (0x1<<5)
+#define ETH_FAST_PATH_RX_CQE_MAC_MATCH_FLG_SHIFT 5
+#define ETH_FAST_PATH_RX_CQE_IP_XSUM_NO_VALIDATION_FLG (0x1<<6)
+#define ETH_FAST_PATH_RX_CQE_IP_XSUM_NO_VALIDATION_FLG_SHIFT 6
+#define ETH_FAST_PATH_RX_CQE_L4_XSUM_NO_VALIDATION_FLG (0x1<<7)
+#define ETH_FAST_PATH_RX_CQE_L4_XSUM_NO_VALIDATION_FLG_SHIFT 7
+	u8 queue_index;
+	u8 placement_offset;
+	__le32 rss_hash_result;
+	__le16 vlan_tag;
+	__le16 pkt_len;
+	__le16 len_on_bd;
+	struct parsing_flags pars_flags;
+	union eth_sgl_or_raw_data sgl_or_raw_data;
+	__le32 reserved1[8];
+};
+
+
+/*
+ * Command for setting classification flags for a client
+ */
+struct eth_filter_rules_cmd {
+	u8 cmd_general_data;
+#define ETH_FILTER_RULES_CMD_RX_CMD (0x1<<0)
+#define ETH_FILTER_RULES_CMD_RX_CMD_SHIFT 0
+#define ETH_FILTER_RULES_CMD_TX_CMD (0x1<<1)
+#define ETH_FILTER_RULES_CMD_TX_CMD_SHIFT 1
+#define ETH_FILTER_RULES_CMD_RESERVED0 (0x3F<<2)
+#define ETH_FILTER_RULES_CMD_RESERVED0_SHIFT 2
+	u8 func_id;
+	u8 client_id;
+	u8 reserved1;
+	__le16 state;
+#define ETH_FILTER_RULES_CMD_UCAST_DROP_ALL (0x1<<0)
+#define ETH_FILTER_RULES_CMD_UCAST_DROP_ALL_SHIFT 0
+#define ETH_FILTER_RULES_CMD_UCAST_ACCEPT_ALL (0x1<<1)
+#define ETH_FILTER_RULES_CMD_UCAST_ACCEPT_ALL_SHIFT 1
+#define ETH_FILTER_RULES_CMD_UCAST_ACCEPT_UNMATCHED (0x1<<2)
+#define ETH_FILTER_RULES_CMD_UCAST_ACCEPT_UNMATCHED_SHIFT 2
+#define ETH_FILTER_RULES_CMD_MCAST_DROP_ALL (0x1<<3)
+#define ETH_FILTER_RULES_CMD_MCAST_DROP_ALL_SHIFT 3
+#define ETH_FILTER_RULES_CMD_MCAST_ACCEPT_ALL (0x1<<4)
+#define ETH_FILTER_RULES_CMD_MCAST_ACCEPT_ALL_SHIFT 4
+#define ETH_FILTER_RULES_CMD_BCAST_ACCEPT_ALL (0x1<<5)
+#define ETH_FILTER_RULES_CMD_BCAST_ACCEPT_ALL_SHIFT 5
+#define ETH_FILTER_RULES_CMD_ACCEPT_ANY_VLAN (0x1<<6)
+#define ETH_FILTER_RULES_CMD_ACCEPT_ANY_VLAN_SHIFT 6
+#define ETH_FILTER_RULES_CMD_RESERVED2 (0x1FF<<7)
+#define ETH_FILTER_RULES_CMD_RESERVED2_SHIFT 7
+	__le16 reserved3;
+	struct regpair reserved4;
+};
+
+
+/*
+ * parameters for eth classification filters ramrod
+ */
+struct eth_filter_rules_ramrod_data {
+	struct eth_classify_header header;
+	struct eth_filter_rules_cmd rules[FILTER_RULES_COUNT];
+};
+
+
+/*
+ * parameters for eth classification configuration ramrod
+ */
+struct eth_general_rules_ramrod_data {
+	struct eth_classify_header header;
+	union eth_classify_rule_cmd rules[CLASSIFY_RULES_COUNT];
+};
+
+
+/*
+ * The data for Halt ramrod
+ */
+struct eth_halt_ramrod_data {
+	__le32 client_id;
+	__le32 reserved0;
+};
+
+
+/*
+ * Command for setting multicast classification for a client
+ */
+struct eth_multicast_rules_cmd {
+	u8 cmd_general_data;
+#define ETH_MULTICAST_RULES_CMD_RX_CMD (0x1<<0)
+#define ETH_MULTICAST_RULES_CMD_RX_CMD_SHIFT 0
+#define ETH_MULTICAST_RULES_CMD_TX_CMD (0x1<<1)
+#define ETH_MULTICAST_RULES_CMD_TX_CMD_SHIFT 1
+#define ETH_MULTICAST_RULES_CMD_IS_ADD (0x1<<2)
+#define ETH_MULTICAST_RULES_CMD_IS_ADD_SHIFT 2
+#define ETH_MULTICAST_RULES_CMD_RESERVED0 (0x1F<<3)
+#define ETH_MULTICAST_RULES_CMD_RESERVED0_SHIFT 3
+	u8 func_id;
+	u8 bin_id;
+	u8 engine_id;
+	__le32 reserved2;
+	struct regpair reserved3;
+};
+
+
+/*
+ * parameters for multicast classification ramrod
+ */
+struct eth_multicast_rules_ramrod_data {
+	struct eth_classify_header header;
+	struct eth_multicast_rules_cmd rules[MULTICAST_RULES_COUNT];
+};
+
+
+/*
+ * Place holder for ramrods protocol specific data
+ */
+struct ramrod_data {
+	__le32 data_lo;
+	__le32 data_hi;
+};
+
+/*
+ * union for ramrod data for Ethernet protocol (CQE) (force size of 16 bits)
+ */
+union eth_ramrod_data {
+	struct ramrod_data general;
+};
+
+
+/*
+ * RSS toeplitz hash type, as reported in CQE
+ */
+enum eth_rss_hash_type {
+	DEFAULT_HASH_TYPE,
+	IPV4_HASH_TYPE,
+	TCP_IPV4_HASH_TYPE,
+	IPV6_HASH_TYPE,
+	TCP_IPV6_HASH_TYPE,
+	VLAN_PRI_HASH_TYPE,
+	E1HOV_PRI_HASH_TYPE,
+	DSCP_HASH_TYPE,
+	MAX_ETH_RSS_HASH_TYPE};
+
+
+/*
+ * Ethernet RSS mode
+ */
+enum eth_rss_mode {
+	ETH_RSS_MODE_DISABLED,
+	ETH_RSS_MODE_REGULAR,
+	ETH_RSS_MODE_VLAN_PRI,
+	ETH_RSS_MODE_E1HOV_PRI,
+	ETH_RSS_MODE_IP_DSCP,
+	MAX_ETH_RSS_MODE};
+
+
+/*
+ * parameters for RSS update ramrod (E2)
+ */
+struct eth_rss_update_ramrod_data {
+	u8 rss_engine_id;
+	u8 capabilities;
+#define ETH_RSS_UPDATE_RAMROD_DATA_IPV4_CAPABILITY (0x1<<0)
+#define ETH_RSS_UPDATE_RAMROD_DATA_IPV4_CAPABILITY_SHIFT 0
+#define ETH_RSS_UPDATE_RAMROD_DATA_IPV4_TCP_CAPABILITY (0x1<<1)
+#define ETH_RSS_UPDATE_RAMROD_DATA_IPV4_TCP_CAPABILITY_SHIFT 1
+#define ETH_RSS_UPDATE_RAMROD_DATA_IPV4_UDP_CAPABILITY (0x1<<2)
+#define ETH_RSS_UPDATE_RAMROD_DATA_IPV4_UDP_CAPABILITY_SHIFT 2
+#define ETH_RSS_UPDATE_RAMROD_DATA_IPV6_CAPABILITY (0x1<<3)
+#define ETH_RSS_UPDATE_RAMROD_DATA_IPV6_CAPABILITY_SHIFT 3
+#define ETH_RSS_UPDATE_RAMROD_DATA_IPV6_TCP_CAPABILITY (0x1<<4)
+#define ETH_RSS_UPDATE_RAMROD_DATA_IPV6_TCP_CAPABILITY_SHIFT 4
+#define ETH_RSS_UPDATE_RAMROD_DATA_IPV6_UDP_CAPABILITY (0x1<<5)
+#define ETH_RSS_UPDATE_RAMROD_DATA_IPV6_UDP_CAPABILITY_SHIFT 5
+#define ETH_RSS_UPDATE_RAMROD_DATA_UPDATE_RSS_KEY (0x1<<6)
+#define ETH_RSS_UPDATE_RAMROD_DATA_UPDATE_RSS_KEY_SHIFT 6
+#define __ETH_RSS_UPDATE_RAMROD_DATA_RESERVED0 (0x1<<7)
+#define __ETH_RSS_UPDATE_RAMROD_DATA_RESERVED0_SHIFT 7
+	u8 rss_result_mask;
+	u8 rss_mode;
+	__le32 __reserved2;
+	u8 indirection_table[T_ETH_INDIRECTION_TABLE_SIZE];
+	__le32 rss_key[T_ETH_RSS_KEY];
+	__le32 echo;
+	__le32 reserved3;
+};
+
+
+/*
+ * The eth Rx Buffer Descriptor
+ */
+struct eth_rx_bd {
+	__le32 addr_lo;
+	__le32 addr_hi;
+};
+
+
+/*
+ * Eth Rx Cqe structure- general structure for ramrods
+ */
+struct common_ramrod_eth_rx_cqe {
+	u8 ramrod_type;
+#define COMMON_RAMROD_ETH_RX_CQE_TYPE (0x3<<0)
+#define COMMON_RAMROD_ETH_RX_CQE_TYPE_SHIFT 0
+#define COMMON_RAMROD_ETH_RX_CQE_ERROR (0x1<<2)
+#define COMMON_RAMROD_ETH_RX_CQE_ERROR_SHIFT 2
+#define COMMON_RAMROD_ETH_RX_CQE_RESERVED0 (0x1F<<3)
+#define COMMON_RAMROD_ETH_RX_CQE_RESERVED0_SHIFT 3
+	u8 conn_type;
+	__le16 reserved1;
+	__le32 conn_and_cmd_data;
+#define COMMON_RAMROD_ETH_RX_CQE_CID (0xFFFFFF<<0)
+#define COMMON_RAMROD_ETH_RX_CQE_CID_SHIFT 0
+#define COMMON_RAMROD_ETH_RX_CQE_CMD_ID (0xFF<<24)
+#define COMMON_RAMROD_ETH_RX_CQE_CMD_ID_SHIFT 24
+	struct ramrod_data protocol_data;
+	__le32 echo;
+	__le32 reserved2[11];
+};
+
+/*
+ * Rx Last CQE in page (in ETH)
+ */
+struct eth_rx_cqe_next_page {
+	__le32 addr_lo;
+	__le32 addr_hi;
+	__le32 reserved[14];
+};
+
+/*
+ * union for all eth rx cqe types (fix their sizes)
+ */
+union eth_rx_cqe {
+	struct eth_fast_path_rx_cqe fast_path_cqe;
+	struct common_ramrod_eth_rx_cqe ramrod_cqe;
+	struct eth_rx_cqe_next_page next_page_cqe;
+	struct eth_end_agg_rx_cqe end_agg_cqe;
+};
+
+
+/*
+ * Values for RX ETH CQE type field
+ */
+enum eth_rx_cqe_type {
+	RX_ETH_CQE_TYPE_ETH_FASTPATH,
+	RX_ETH_CQE_TYPE_ETH_RAMROD,
+	RX_ETH_CQE_TYPE_ETH_START_AGG,
+	RX_ETH_CQE_TYPE_ETH_STOP_AGG,
+	MAX_ETH_RX_CQE_TYPE};
+
+
+/*
+ * Type of SGL/Raw field in ETH RX fast path CQE
+ */
+enum eth_rx_fp_sel {
+	ETH_FP_CQE_REGULAR,
+	ETH_FP_CQE_RAW,
+	MAX_ETH_RX_FP_SEL};
+
+
+/*
+ * The eth Rx SGE Descriptor
+ */
+struct eth_rx_sge {
+	__le32 addr_lo;
+	__le32 addr_hi;
+};
+
+
+/*
+ * common data for all protocols
+ */
+struct spe_hdr {
+	__le32 conn_and_cmd_data;
+#define SPE_HDR_CID (0xFFFFFF<<0)
+#define SPE_HDR_CID_SHIFT 0
+#define SPE_HDR_CMD_ID (0xFF<<24)
+#define SPE_HDR_CMD_ID_SHIFT 24
+	__le16 type;
+#define SPE_HDR_CONN_TYPE (0xFF<<0)
+#define SPE_HDR_CONN_TYPE_SHIFT 0
+#define SPE_HDR_FUNCTION_ID (0xFF<<8)
+#define SPE_HDR_FUNCTION_ID_SHIFT 8
+	__le16 reserved1;
+};
+
+/*
+ * specific data for ethernet slow path element
+ */
+union eth_specific_data {
+	u8 protocol_data[8];
+	struct regpair client_update_ramrod_data;
+	struct regpair client_init_ramrod_init_data;
+	struct eth_halt_ramrod_data halt_ramrod_data;
+	struct regpair update_data_addr;
+	struct eth_common_ramrod_data common_ramrod_data;
+	struct regpair classify_cfg_addr;
+	struct regpair filter_cfg_addr;
+	struct regpair mcast_cfg_addr;
+};
+
+/*
+ * Ethernet slow path element
+ */
+struct eth_spe {
+	struct spe_hdr hdr;
+	union eth_specific_data data;
+};
+
+
+/*
+ * Ethernet command ID for slow path elements
+ */
+enum eth_spqe_cmd_id {
+	RAMROD_CMD_ID_ETH_UNUSED,
+	RAMROD_CMD_ID_ETH_CLIENT_SETUP,
+	RAMROD_CMD_ID_ETH_HALT,
+	RAMROD_CMD_ID_ETH_FORWARD_SETUP,
+	RAMROD_CMD_ID_ETH_TX_QUEUE_SETUP,
+	RAMROD_CMD_ID_ETH_CLIENT_UPDATE,
+	RAMROD_CMD_ID_ETH_EMPTY,
+	RAMROD_CMD_ID_ETH_TERMINATE,
+	RAMROD_CMD_ID_ETH_TPA_UPDATE,
+	RAMROD_CMD_ID_ETH_CLASSIFICATION_RULES,
+	RAMROD_CMD_ID_ETH_FILTER_RULES,
+	RAMROD_CMD_ID_ETH_MULTICAST_RULES,
+	RAMROD_CMD_ID_ETH_RSS_UPDATE,
+	RAMROD_CMD_ID_ETH_SET_MAC,
+	MAX_ETH_SPQE_CMD_ID};
+
+
+/*
+ * eth tpa update command
+ */
+enum eth_tpa_update_command {
+	TPA_UPDATE_NONE_COMMAND,
+	TPA_UPDATE_ENABLE_COMMAND,
+	TPA_UPDATE_DISABLE_COMMAND,
+	MAX_ETH_TPA_UPDATE_COMMAND};
+
+
+/*
+ * Tx regular BD structure
+ */
+struct eth_tx_bd {
+	__le32 addr_lo;
+	__le32 addr_hi;
+	__le16 total_pkt_bytes;
+	__le16 nbytes;
+	u8 reserved[4];
+};
+
+
+/*
+ * structure for easy accessibility to assembler
+ */
+struct eth_tx_bd_flags {
+	u8 as_bitfield;
+#define ETH_TX_BD_FLAGS_IP_CSUM (0x1<<0)
+#define ETH_TX_BD_FLAGS_IP_CSUM_SHIFT 0
+#define ETH_TX_BD_FLAGS_L4_CSUM (0x1<<1)
+#define ETH_TX_BD_FLAGS_L4_CSUM_SHIFT 1
+#define ETH_TX_BD_FLAGS_VLAN_MODE (0x3<<2)
+#define ETH_TX_BD_FLAGS_VLAN_MODE_SHIFT 2
+#define ETH_TX_BD_FLAGS_START_BD (0x1<<4)
+#define ETH_TX_BD_FLAGS_START_BD_SHIFT 4
+#define ETH_TX_BD_FLAGS_IS_UDP (0x1<<5)
+#define ETH_TX_BD_FLAGS_IS_UDP_SHIFT 5
+#define ETH_TX_BD_FLAGS_SW_LSO (0x1<<6)
+#define ETH_TX_BD_FLAGS_SW_LSO_SHIFT 6
+#define ETH_TX_BD_FLAGS_IPV6 (0x1<<7)
+#define ETH_TX_BD_FLAGS_IPV6_SHIFT 7
+};
+
+/*
+ * The eth Tx Buffer Descriptor
+ */
+struct eth_tx_start_bd {
+	__le32 addr_lo;
+	__le32 addr_hi;
+	__le16 nbd;
+	__le16 nbytes;
+	__le16 vlan_or_ethertype;
+	struct eth_tx_bd_flags bd_flags;
+	u8 general_data;
+#define ETH_TX_START_BD_HDR_NBDS (0xF<<0)
+#define ETH_TX_START_BD_HDR_NBDS_SHIFT 0
+#define ETH_TX_START_BD_FORCE_VLAN_MODE (0x1<<4)
+#define ETH_TX_START_BD_FORCE_VLAN_MODE_SHIFT 4
+#define ETH_TX_START_BD_RESREVED (0x1<<5)
+#define ETH_TX_START_BD_RESREVED_SHIFT 5
+#define ETH_TX_START_BD_ETH_ADDR_TYPE (0x3<<6)
+#define ETH_TX_START_BD_ETH_ADDR_TYPE_SHIFT 6
+};
+
+/*
+ * Tx parsing BD structure for ETH E1/E1h
+ */
+struct eth_tx_parse_bd_e1x {
+	u8 global_data;
+#define ETH_TX_PARSE_BD_E1X_IP_HDR_START_OFFSET_W (0xF<<0)
+#define ETH_TX_PARSE_BD_E1X_IP_HDR_START_OFFSET_W_SHIFT 0
+#define ETH_TX_PARSE_BD_E1X_RESERVED0 (0x1<<4)
+#define ETH_TX_PARSE_BD_E1X_RESERVED0_SHIFT 4
+#define ETH_TX_PARSE_BD_E1X_PSEUDO_CS_WITHOUT_LEN (0x1<<5)
+#define ETH_TX_PARSE_BD_E1X_PSEUDO_CS_WITHOUT_LEN_SHIFT 5
+#define ETH_TX_PARSE_BD_E1X_LLC_SNAP_EN (0x1<<6)
+#define ETH_TX_PARSE_BD_E1X_LLC_SNAP_EN_SHIFT 6
+#define ETH_TX_PARSE_BD_E1X_NS_FLG (0x1<<7)
+#define ETH_TX_PARSE_BD_E1X_NS_FLG_SHIFT 7
+	u8 tcp_flags;
+#define ETH_TX_PARSE_BD_E1X_FIN_FLG (0x1<<0)
+#define ETH_TX_PARSE_BD_E1X_FIN_FLG_SHIFT 0
+#define ETH_TX_PARSE_BD_E1X_SYN_FLG (0x1<<1)
+#define ETH_TX_PARSE_BD_E1X_SYN_FLG_SHIFT 1
+#define ETH_TX_PARSE_BD_E1X_RST_FLG (0x1<<2)
+#define ETH_TX_PARSE_BD_E1X_RST_FLG_SHIFT 2
+#define ETH_TX_PARSE_BD_E1X_PSH_FLG (0x1<<3)
+#define ETH_TX_PARSE_BD_E1X_PSH_FLG_SHIFT 3
+#define ETH_TX_PARSE_BD_E1X_ACK_FLG (0x1<<4)
+#define ETH_TX_PARSE_BD_E1X_ACK_FLG_SHIFT 4
+#define ETH_TX_PARSE_BD_E1X_URG_FLG (0x1<<5)
+#define ETH_TX_PARSE_BD_E1X_URG_FLG_SHIFT 5
+#define ETH_TX_PARSE_BD_E1X_ECE_FLG (0x1<<6)
+#define ETH_TX_PARSE_BD_E1X_ECE_FLG_SHIFT 6
+#define ETH_TX_PARSE_BD_E1X_CWR_FLG (0x1<<7)
+#define ETH_TX_PARSE_BD_E1X_CWR_FLG_SHIFT 7
+	u8 ip_hlen_w;
+	s8 reserved;
+	__le16 total_hlen_w;
+	__le16 tcp_pseudo_csum;
+	__le16 lso_mss;
+	__le16 ip_id;
+	__le32 tcp_send_seq;
+};
+
+/*
+ * Tx parsing BD structure for ETH E2
+ */
+struct eth_tx_parse_bd_e2 {
+	__le16 dst_mac_addr_lo;
+	__le16 dst_mac_addr_mid;
+	__le16 dst_mac_addr_hi;
+	__le16 src_mac_addr_lo;
+	__le16 src_mac_addr_mid;
+	__le16 src_mac_addr_hi;
+	__le32 parsing_data;
+#define ETH_TX_PARSE_BD_E2_TCP_HDR_START_OFFSET_W (0x1FFF<<0)
+#define ETH_TX_PARSE_BD_E2_TCP_HDR_START_OFFSET_W_SHIFT 0
+#define ETH_TX_PARSE_BD_E2_TCP_HDR_LENGTH_DW (0xF<<13)
+#define ETH_TX_PARSE_BD_E2_TCP_HDR_LENGTH_DW_SHIFT 13
+#define ETH_TX_PARSE_BD_E2_LSO_MSS (0x3FFF<<17)
+#define ETH_TX_PARSE_BD_E2_LSO_MSS_SHIFT 17
+#define ETH_TX_PARSE_BD_E2_IPV6_WITH_EXT_HDR (0x1<<31)
+#define ETH_TX_PARSE_BD_E2_IPV6_WITH_EXT_HDR_SHIFT 31
+};
+
+/*
+ * The last BD in the BD memory will hold a pointer to the next BD memory
+ */
+struct eth_tx_next_bd {
+	__le32 addr_lo;
+	__le32 addr_hi;
+	u8 reserved[8];
+};
+
+/*
+ * union for 4 Bd types
+ */
+union eth_tx_bd_types {
+	struct eth_tx_start_bd start_bd;
+	struct eth_tx_bd reg_bd;
+	struct eth_tx_parse_bd_e1x parse_bd_e1x;
+	struct eth_tx_parse_bd_e2 parse_bd_e2;
+	struct eth_tx_next_bd next_bd;
+};
+
+/*
+ * array of 13 bds as appears in the eth xstorm context
+ */
+struct eth_tx_bds_array {
+	union eth_tx_bd_types bds[13];
+};
+
+
+/*
+ * VLAN mode on TX BDs
+ */
+enum eth_tx_vlan_type {
+	X_ETH_NO_VLAN,
+	X_ETH_OUTBAND_VLAN,
+	X_ETH_INBAND_VLAN,
+	X_ETH_FW_ADDED_VLAN,
+	MAX_ETH_TX_VLAN_TYPE};
+
+
+/*
+ * Ethernet VLAN filtering mode in E1x
+ */
+enum eth_vlan_filter_mode {
+	ETH_VLAN_FILTER_ANY_VLAN,
+	ETH_VLAN_FILTER_SPECIFIC_VLAN,
+	ETH_VLAN_FILTER_CLASSIFY,
+	MAX_ETH_VLAN_FILTER_MODE};
+
+
+/*
+ * MAC filtering configuration command header
+ */
+struct mac_configuration_hdr {
+	u8 length;
+	u8 offset;
+	__le16 client_id;
+	__le32 echo;
+};
+
+/*
+ * MAC address in list for ramrod
+ */
+struct mac_configuration_entry {
+	__le16 lsb_mac_addr;
+	__le16 middle_mac_addr;
+	__le16 msb_mac_addr;
+	__le16 vlan_id;
+	u8 pf_id;
+	u8 flags;
+#define MAC_CONFIGURATION_ENTRY_ACTION_TYPE (0x1<<0)
+#define MAC_CONFIGURATION_ENTRY_ACTION_TYPE_SHIFT 0
+#define MAC_CONFIGURATION_ENTRY_RDMA_MAC (0x1<<1)
+#define MAC_CONFIGURATION_ENTRY_RDMA_MAC_SHIFT 1
+#define MAC_CONFIGURATION_ENTRY_VLAN_FILTERING_MODE (0x3<<2)
+#define MAC_CONFIGURATION_ENTRY_VLAN_FILTERING_MODE_SHIFT 2
+#define MAC_CONFIGURATION_ENTRY_OVERRIDE_VLAN_REMOVAL (0x1<<4)
+#define MAC_CONFIGURATION_ENTRY_OVERRIDE_VLAN_REMOVAL_SHIFT 4
+#define MAC_CONFIGURATION_ENTRY_BROADCAST (0x1<<5)
+#define MAC_CONFIGURATION_ENTRY_BROADCAST_SHIFT 5
+#define MAC_CONFIGURATION_ENTRY_RESERVED1 (0x3<<6)
+#define MAC_CONFIGURATION_ENTRY_RESERVED1_SHIFT 6
+	__le16 reserved0;
+	__le32 clients_bit_vector;
+};
+
+/*
+ * MAC filtering configuration command
+ */
+struct mac_configuration_cmd {
+	struct mac_configuration_hdr hdr;
+	struct mac_configuration_entry config_table[64];
+};
+
+
+/*
+ * Set-MAC command type (in E1x)
+ */
+enum set_mac_action_type {
+	T_ETH_MAC_COMMAND_INVALIDATE,
+	T_ETH_MAC_COMMAND_SET,
+	MAX_SET_MAC_ACTION_TYPE};
+
+
+/*
+ * tpa update ramrod data
+ */
+struct tpa_update_ramrod_data {
+	u8 update_ipv4;
+	u8 update_ipv6;
+	u8 client_id;
+	u8 max_tpa_queues;
+	u8 max_sges_for_packet;
+	u8 complete_on_both_clients;
+	__le16 reserved1;
+	__le16 sge_buff_size;
+	__le16 max_agg_size;
+	__le32 sge_page_base_lo;
+	__le32 sge_page_base_hi;
+	__le16 sge_pause_thr_low;
+	__le16 sge_pause_thr_high;
+};
+
+
+/*
+ * approximate-match multicast filtering for E1H per function in Tstorm
+ */
+struct tstorm_eth_approximate_match_multicast_filtering {
+	u32 mcast_add_hash_bit_array[8];
+};
+
+
+/*
+ * Common configuration parameters per function in Tstorm
+ */
+struct tstorm_eth_function_common_config {
+	__le16 config_flags;
+#define TSTORM_ETH_FUNCTION_COMMON_CONFIG_RSS_IPV4_CAPABILITY (0x1<<0)
+#define TSTORM_ETH_FUNCTION_COMMON_CONFIG_RSS_IPV4_CAPABILITY_SHIFT 0
+#define TSTORM_ETH_FUNCTION_COMMON_CONFIG_RSS_IPV4_TCP_CAPABILITY (0x1<<1)
+#define TSTORM_ETH_FUNCTION_COMMON_CONFIG_RSS_IPV4_TCP_CAPABILITY_SHIFT 1
+#define TSTORM_ETH_FUNCTION_COMMON_CONFIG_RSS_IPV6_CAPABILITY (0x1<<2)
+#define TSTORM_ETH_FUNCTION_COMMON_CONFIG_RSS_IPV6_CAPABILITY_SHIFT 2
+#define TSTORM_ETH_FUNCTION_COMMON_CONFIG_RSS_IPV6_TCP_CAPABILITY (0x1<<3)
+#define TSTORM_ETH_FUNCTION_COMMON_CONFIG_RSS_IPV6_TCP_CAPABILITY_SHIFT 3
+#define TSTORM_ETH_FUNCTION_COMMON_CONFIG_RSS_MODE (0x7<<4)
+#define TSTORM_ETH_FUNCTION_COMMON_CONFIG_RSS_MODE_SHIFT 4
+#define TSTORM_ETH_FUNCTION_COMMON_CONFIG_VLAN_FILTERING_ENABLE (0x1<<7)
+#define TSTORM_ETH_FUNCTION_COMMON_CONFIG_VLAN_FILTERING_ENABLE_SHIFT 7
+#define __TSTORM_ETH_FUNCTION_COMMON_CONFIG_RESERVED0 (0xFF<<8)
+#define __TSTORM_ETH_FUNCTION_COMMON_CONFIG_RESERVED0_SHIFT 8
+	u8 rss_result_mask;
+	u8 reserved1;
+	__le16 vlan_id[2];
+};
+
+
+/*
+ * MAC filtering configuration parameters per port in Tstorm
+ */
+struct tstorm_eth_mac_filter_config {
+	__le32 ucast_drop_all;
+	__le32 ucast_accept_all;
+	__le32 mcast_drop_all;
+	__le32 mcast_accept_all;
+	__le32 bcast_accept_all;
+	__le32 vlan_filter[2];
+	__le32 unmatched_unicast;
+};
+
+
+/*
+ * tx only queue init ramrod data
+ */
+struct tx_queue_init_ramrod_data {
+	struct client_init_general_data general;
+	struct client_init_tx_data tx;
+};
+
+
+/*
+ * Three RX producers for ETH
+ */
+struct ustorm_eth_rx_producers {
+#if defined(__BIG_ENDIAN)
+	u16 bd_prod;
+	u16 cqe_prod;
+#elif defined(__LITTLE_ENDIAN)
+	u16 cqe_prod;
+	u16 bd_prod;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 reserved;
+	u16 sge_prod;
+#elif defined(__LITTLE_ENDIAN)
+	u16 sge_prod;
+	u16 reserved;
+#endif
+};
+
+
+/*
+ * FCoE RX statistics parameters section#0
+ */
+struct fcoe_rx_stat_params_section0 {
+	__le32 fcoe_rx_pkt_cnt;
+	__le32 fcoe_rx_byte_cnt;
+};
+
+
+/*
+ * FCoE RX statistics parameters section#1
+ */
+struct fcoe_rx_stat_params_section1 {
+	__le32 fcoe_ver_cnt;
+	__le32 fcoe_rx_drop_pkt_cnt;
+};
+
+
+/*
+ * FCoE RX statistics parameters section#2
+ */
+struct fcoe_rx_stat_params_section2 {
+	__le32 fc_crc_cnt;
+	__le32 eofa_del_cnt;
+	__le32 miss_frame_cnt;
+	__le32 seq_timeout_cnt;
+	__le32 drop_seq_cnt;
+	__le32 fcoe_rx_drop_pkt_cnt;
+	__le32 fcp_rx_pkt_cnt;
+	__le32 reserved0;
+};
+
+
+/*
+ * FCoE TX statistics parameters
+ */
+struct fcoe_tx_stat_params {
+	__le32 fcoe_tx_pkt_cnt;
+	__le32 fcoe_tx_byte_cnt;
+	__le32 fcp_tx_pkt_cnt;
+	__le32 reserved0;
+};
+
+/*
+ * FCoE statistics parameters
+ */
+struct fcoe_statistics_params {
+	struct fcoe_tx_stat_params tx_stat;
+	struct fcoe_rx_stat_params_section0 rx_stat0;
+	struct fcoe_rx_stat_params_section1 rx_stat1;
+	struct fcoe_rx_stat_params_section2 rx_stat2;
+};
+
+
+/*
+ * cfc delete event data 
+ */
+struct cfc_del_event_data {
+	u32 cid;
+	u32 reserved0;
+	u32 reserved1;
+};
+
+
+/*
+ * per-port SAFC demo variables
+ */
+struct cmng_flags_per_port {
+	u32 cmng_enables;
+#define CMNG_FLAGS_PER_PORT_FAIRNESS_VN (0x1<<0)
+#define CMNG_FLAGS_PER_PORT_FAIRNESS_VN_SHIFT 0
+#define CMNG_FLAGS_PER_PORT_RATE_SHAPING_VN (0x1<<1)
+#define CMNG_FLAGS_PER_PORT_RATE_SHAPING_VN_SHIFT 1
+#define CMNG_FLAGS_PER_PORT_FAIRNESS_COS (0x1<<2)
+#define CMNG_FLAGS_PER_PORT_FAIRNESS_COS_SHIFT 2
+#define CMNG_FLAGS_PER_PORT_FAIRNESS_COS_MODE (0x1<<3)
+#define CMNG_FLAGS_PER_PORT_FAIRNESS_COS_MODE_SHIFT 3
+#define __CMNG_FLAGS_PER_PORT_RESERVED0 (0xFFFFFFF<<4)
+#define __CMNG_FLAGS_PER_PORT_RESERVED0_SHIFT 4
+	u32 __reserved1;
+};
+
+
+/*
+ * per-port rate shaping variables
+ */
+struct rate_shaping_vars_per_port {
+	u32 rs_periodic_timeout;
+	u32 rs_threshold;
+};
+
+/*
+ * per-port fairness variables
+ */
+struct fairness_vars_per_port {
+	u32 upper_bound;
+	u32 fair_threshold;
+	u32 fairness_timeout;
+	u32 reserved0;
+};
+
+/*
+ * per-port SAFC variables
+ */
+struct safc_struct_per_port {
+#if defined(__BIG_ENDIAN)
+	u16 __reserved1;
+	u8 __reserved0;
+	u8 safc_timeout_usec;
+#elif defined(__LITTLE_ENDIAN)
+	u8 safc_timeout_usec;
+	u8 __reserved0;
+	u16 __reserved1;
+#endif
+	u8 cos_to_traffic_types[MAX_COS_NUMBER];
+	u16 cos_to_pause_mask[NUM_OF_SAFC_BITS];
+};
+
+/*
+ * Per-port congestion management variables
+ */
+struct cmng_struct_per_port {
+	struct rate_shaping_vars_per_port rs_vars;
+	struct fairness_vars_per_port fair_vars;
+	struct safc_struct_per_port safc_vars;
+	struct cmng_flags_per_port flags;
+};
+
+/*
+ * a single rate shaping counter. can be used as protocol or vnic counter
+ */
+struct rate_shaping_counter {
+	u32 quota;
+#if defined(__BIG_ENDIAN)
+	u16 __reserved0;
+	u16 rate;
+#elif defined(__LITTLE_ENDIAN)
+	u16 rate;
+	u16 __reserved0;
+#endif
+};
+
+/*
+ * per-vnic rate shaping variables
+ */
+struct rate_shaping_vars_per_vn {
+	struct rate_shaping_counter vn_counter;
+};
+
+/*
+ * per-vnic fairness variables
+ */
+struct fairness_vars_per_vn {
+	u32 cos_credit_delta[MAX_COS_NUMBER];
+	u32 vn_credit_delta;
+	u32 __reserved0;
+};
+
+/*
+ * cmng port init state
+ */
+struct cmng_vnic {
+	struct rate_shaping_vars_per_vn vnic_max_rate[4];
+	struct fairness_vars_per_vn vnic_min_rate[4];
+};
+
+/*
+ * cmng port init state
+ */
+struct cmng_init {
+	struct cmng_struct_per_port port;
+	struct cmng_vnic vnic;
+};
+
+
+/*
+ * driver parameters for congestion management init, all rates are in Mbps
+ */
+struct cmng_init_input {
+	u32 port_rate;
+	u16 vnic_min_rate[4];
+	u16 vnic_max_rate[4];
+	u16 cos_min_rate[MAX_COS_NUMBER];
+	u16 cos_to_pause_mask[MAX_COS_NUMBER];
+	struct cmng_flags_per_port flags;
+};
+
+
+/*
+ * Protocol-common command ID for slow path elements
+ */
+enum common_spqe_cmd_id {
+	RAMROD_CMD_ID_COMMON_UNUSED,
+	RAMROD_CMD_ID_COMMON_FUNCTION_START,
+	RAMROD_CMD_ID_COMMON_FUNCTION_STOP,
+	RAMROD_CMD_ID_COMMON_FUNCTION_UPDATE,
+	RAMROD_CMD_ID_COMMON_CFC_DEL,
+	RAMROD_CMD_ID_COMMON_CFC_DEL_WB,
+	RAMROD_CMD_ID_COMMON_STAT_QUERY,
+	RAMROD_CMD_ID_COMMON_STOP_TRAFFIC,
+	RAMROD_CMD_ID_COMMON_START_TRAFFIC,
+	RAMROD_CMD_ID_COMMON_NIV_VIF_LISTS,
+	MAX_COMMON_SPQE_CMD_ID};
+
+
+/*
+ * Per-protocol connection types
+ */
+enum connection_type {
+	ETH_CONNECTION_TYPE,
+	TOE_CONNECTION_TYPE,
+	RDMA_CONNECTION_TYPE,
+	ISCSI_CONNECTION_TYPE,
+	FCOE_CONNECTION_TYPE,
+	RESERVED_CONNECTION_TYPE_0,
+	RESERVED_CONNECTION_TYPE_1,
+	RESERVED_CONNECTION_TYPE_2,
+	NONE_CONNECTION_TYPE,
+	MAX_CONNECTION_TYPE};
+
+
+/*
+ * Cos modes
+ */
+enum cos_mode {
+	OVERRIDE_COS,
+	STATIC_COS,
+	FW_WRR,
+	MAX_COS_MODE};
+
+
+/*
+ * Dynamic HC counters set by the driver
+ */
+struct hc_dynamic_drv_counter {
+	u32 val[HC_SB_MAX_DYNAMIC_INDICES];
+};
+
+/*
+ * zone A per-queue data
+ */
+struct cstorm_queue_zone_data {
+	struct hc_dynamic_drv_counter hc_dyn_drv_cnt;
+	struct regpair reserved[2];
+};
+
+
+/*
+ * Vf-PF channel data in cstorm ram (non-triggered zone)
+ */
+struct vf_pf_channel_zone_data {
+	u32 msg_addr_lo;
+	u32 msg_addr_hi;
+};
+
+/*
+ * zone for VF non-triggered data
+ */
+struct non_trigger_vf_zone {
+	struct vf_pf_channel_zone_data vf_pf_channel;
+};
+
+/*
+ * Vf-PF channel trigger zone in cstorm ram
+ */
+struct vf_pf_channel_zone_trigger {
+	u8 addr_valid;
+};
+
+/*
+ * zone that triggers the in-bound interrupt
+ */
+struct trigger_vf_zone {
+#if defined(__BIG_ENDIAN)
+	u16 reserved1;
+	u8 reserved0;
+	struct vf_pf_channel_zone_trigger vf_pf_channel;
+#elif defined(__LITTLE_ENDIAN)
+	struct vf_pf_channel_zone_trigger vf_pf_channel;
+	u8 reserved0;
+	u16 reserved1;
+#endif
+	u32 reserved2;
+};
+
+/*
+ * zone B per-VF data
+ */
+struct cstorm_vf_zone_data {
+	struct non_trigger_vf_zone non_trigger;
+	struct trigger_vf_zone trigger;
+};
+
+
+/*
+ * Dynamic host coalescing init parameters, per state machine
+ */
+struct dynamic_hc_sm_config {
+	u32 threshold[3];
+	u8 shift_per_protocol[HC_SB_MAX_DYNAMIC_INDICES];
+	u8 hc_timeout0[HC_SB_MAX_DYNAMIC_INDICES];
+	u8 hc_timeout1[HC_SB_MAX_DYNAMIC_INDICES];
+	u8 hc_timeout2[HC_SB_MAX_DYNAMIC_INDICES];
+	u8 hc_timeout3[HC_SB_MAX_DYNAMIC_INDICES];
+};
+
+/*
+ * Dynamic host coalescing init parameters
+ */
+struct dynamic_hc_config {
+	struct dynamic_hc_sm_config sm_config[HC_SB_MAX_SM];
+};
+
+
+struct e2_integ_data {
+#if defined(__BIG_ENDIAN)
+	u8 flags;
+#define E2_INTEG_DATA_TESTING_EN (0x1<<0)
+#define E2_INTEG_DATA_TESTING_EN_SHIFT 0
+#define E2_INTEG_DATA_LB_TX (0x1<<1)
+#define E2_INTEG_DATA_LB_TX_SHIFT 1
+#define E2_INTEG_DATA_COS_TX (0x1<<2)
+#define E2_INTEG_DATA_COS_TX_SHIFT 2
+#define E2_INTEG_DATA_OPPORTUNISTICQM (0x1<<3)
+#define E2_INTEG_DATA_OPPORTUNISTICQM_SHIFT 3
+#define E2_INTEG_DATA_DPMTESTRELEASEDQ (0x1<<4)
+#define E2_INTEG_DATA_DPMTESTRELEASEDQ_SHIFT 4
+#define E2_INTEG_DATA_RESERVED (0x7<<5)
+#define E2_INTEG_DATA_RESERVED_SHIFT 5
+	u8 cos;
+	u8 voq;
+	u8 pbf_queue;
+#elif defined(__LITTLE_ENDIAN)
+	u8 pbf_queue;
+	u8 voq;
+	u8 cos;
+	u8 flags;
+#define E2_INTEG_DATA_TESTING_EN (0x1<<0)
+#define E2_INTEG_DATA_TESTING_EN_SHIFT 0
+#define E2_INTEG_DATA_LB_TX (0x1<<1)
+#define E2_INTEG_DATA_LB_TX_SHIFT 1
+#define E2_INTEG_DATA_COS_TX (0x1<<2)
+#define E2_INTEG_DATA_COS_TX_SHIFT 2
+#define E2_INTEG_DATA_OPPORTUNISTICQM (0x1<<3)
+#define E2_INTEG_DATA_OPPORTUNISTICQM_SHIFT 3
+#define E2_INTEG_DATA_DPMTESTRELEASEDQ (0x1<<4)
+#define E2_INTEG_DATA_DPMTESTRELEASEDQ_SHIFT 4
+#define E2_INTEG_DATA_RESERVED (0x7<<5)
+#define E2_INTEG_DATA_RESERVED_SHIFT 5
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 reserved3;
+	u8 reserved2;
+	u8 ramEn;
+#elif defined(__LITTLE_ENDIAN)
+	u8 ramEn;
+	u8 reserved2;
+	u16 reserved3;
+#endif
+};
+
+
+/*
+ * set mac event data 
+ */
+struct eth_event_data {
+	u32 echo;
+	u32 reserved0;
+	u32 reserved1;
+};
+
+
+/*
+ * pf-vf event data 
+ */
+struct vf_pf_event_data {
+	u8 vf_id;
+	u8 reserved0;
+	u16 reserved1;
+	u32 msg_addr_lo;
+	u32 msg_addr_hi;
+};
+
+/*
+ * VF FLR event data 
+ */
+struct vf_flr_event_data {
+	u8 vf_id;
+	u8 reserved0;
+	u16 reserved1;
+	u32 reserved2;
+	u32 reserved3;
+};
+
+/*
+ * malicious VF event data 
+ */
+struct malicious_vf_event_data {
+	u8 vf_id;
+	u8 reserved0;
+	u16 reserved1;
+	u32 reserved2;
+	u32 reserved3;
+};
+
+/*
+ * vif list event data 
+ */
+struct vif_list_event_data {
+	u8 func_bit_map;
+	u8 echo;
+	u16 reserved0;
+	u32 reserved1;
+	u32 reserved2;
+};
+
+/*
+ * union for all event ring message types
+ */
+union event_data {
+	struct vf_pf_event_data vf_pf_event;
+	struct eth_event_data eth_event;
+	struct cfc_del_event_data cfc_del_event;
+	struct vf_flr_event_data vf_flr_event;
+	struct malicious_vf_event_data malicious_vf_event;
+	struct vif_list_event_data vif_list_event;
+};
+
+
+/*
+ * per PF event ring data
+ */
+struct event_ring_data {
+	struct regpair base_addr;
+#if defined(__BIG_ENDIAN)
+	u8 index_id;
+	u8 sb_id;
+	u16 producer;
+#elif defined(__LITTLE_ENDIAN)
+	u16 producer;
+	u8 sb_id;
+	u8 index_id;
+#endif
+	u32 reserved0;
+};
+
+
+/*
+ * event ring message element (each element is 128 bits)
+ */
+struct event_ring_msg {
+	u8 opcode;
+	u8 error;
+	u16 reserved1;
+	union event_data data;
+};
+
+/*
+ * event ring next page element (128 bits)
+ */
+struct event_ring_next {
+	struct regpair addr;
+	u32 reserved[2];
+};
+
+/*
+ * union for event ring element types (each element is 128 bits)
+ */
+union event_ring_elem {
+	struct event_ring_msg message;
+	struct event_ring_next next_page;
+};
+
+
+/*
+ * Common event ring opcodes
+ */
+enum event_ring_opcode {
+	EVENT_RING_OPCODE_VF_PF_CHANNEL,
+	EVENT_RING_OPCODE_FUNCTION_START,
+	EVENT_RING_OPCODE_FUNCTION_STOP,
+	EVENT_RING_OPCODE_CFC_DEL,
+	EVENT_RING_OPCODE_CFC_DEL_WB,
+	EVENT_RING_OPCODE_STAT_QUERY,
+	EVENT_RING_OPCODE_STOP_TRAFFIC,
+	EVENT_RING_OPCODE_START_TRAFFIC,
+	EVENT_RING_OPCODE_VF_FLR,
+	EVENT_RING_OPCODE_MALICIOUS_VF,
+	EVENT_RING_OPCODE_FORWARD_SETUP,
+	EVENT_RING_OPCODE_RSS_UPDATE_RULES,
+	EVENT_RING_OPCODE_FUNCTION_UPDATE,
+	EVENT_RING_OPCODE_NIV_VIF_LISTS,
+	EVENT_RING_OPCODE_SET_MAC,
+	EVENT_RING_OPCODE_CLASSIFICATION_RULES,
+	EVENT_RING_OPCODE_FILTERS_RULES,
+	EVENT_RING_OPCODE_MULTICAST_RULES,
+	MAX_EVENT_RING_OPCODE};
+
+
+/*
+ * Modes for fairness algorithm
+ */
+enum fairness_mode {
+	FAIRNESS_COS_WRR_MODE,
+	FAIRNESS_COS_ETS_MODE,
+	MAX_FAIRNESS_MODE};
+
+
+/*
+ * Priority and cos
+ */
+struct priority_cos {
+	u8 priority;
+	u8 cos;
+	__le16 reserved1;
+};
+
+/*
+ * The data for flow control configuration
+ */
+struct flow_control_configuration {
+	struct priority_cos traffic_type_to_priority_cos[MAX_TRAFFIC_TYPES];
+	u8 dcb_enabled;
+	u8 dcb_version;
+	u8 dont_add_pri_0_en;
+	u8 reserved1;
+	__le32 reserved2;
+};
+
+
+/*
+ * 
+ */
+struct function_start_data {
+	__le16 function_mode;
+	__le16 sd_vlan_tag;
+	__le16 vif_id;
+	u8 path_id;
+	u8 network_cos_mode;
+};
+
+
+/*
+ * 
+ */
+struct function_update_data {
+	u8 vif_id_change_flg;
+	u8 niv_default_vlan_change_flg;
+	u8 allowed_priorities_change_flg;
+	u8 network_cos_mode_change_flg;
+	__le16 vif_id;
+	__le16 niv_default_vlan;
+	u8 allowed_priorities;
+	u8 network_cos_mode;
+	u8 lb_mode_en;
+	u8 reserved0;
+	__le32 reserved1;
+};
+
+
+/*
+ * FW version stored in the Xstorm RAM
+ */
+struct fw_version {
+#if defined(__BIG_ENDIAN)
+	u8 engineering;
+	u8 revision;
+	u8 minor;
+	u8 major;
+#elif defined(__LITTLE_ENDIAN)
+	u8 major;
+	u8 minor;
+	u8 revision;
+	u8 engineering;
+#endif
+	u32 flags;
+#define FW_VERSION_OPTIMIZED (0x1<<0)
+#define FW_VERSION_OPTIMIZED_SHIFT 0
+#define FW_VERSION_BIG_ENDIEN (0x1<<1)
+#define FW_VERSION_BIG_ENDIEN_SHIFT 1
+#define FW_VERSION_CHIP_VERSION (0x3<<2)
+#define FW_VERSION_CHIP_VERSION_SHIFT 2
+#define __FW_VERSION_RESERVED (0xFFFFFFF<<4)
+#define __FW_VERSION_RESERVED_SHIFT 4
+};
+
+
+/*
+ * Dynamic Host-Coalescing - Driver(host) counters 
+ */
+struct hc_dynamic_sb_drv_counters {
+	u32 dynamic_hc_drv_counter[HC_SB_MAX_DYNAMIC_INDICES];
+};
+
+
+/*
+ * 2 bytes. configuration/state parameters for a single protocol index
+ */
+struct hc_index_data {
+#if defined(__BIG_ENDIAN)
+	u8 flags;
+#define HC_INDEX_DATA_SM_ID (0x1<<0)
+#define HC_INDEX_DATA_SM_ID_SHIFT 0
+#define HC_INDEX_DATA_HC_ENABLED (0x1<<1)
+#define HC_INDEX_DATA_HC_ENABLED_SHIFT 1
+#define HC_INDEX_DATA_DYNAMIC_HC_ENABLED (0x1<<2)
+#define HC_INDEX_DATA_DYNAMIC_HC_ENABLED_SHIFT 2
+#define HC_INDEX_DATA_RESERVE (0x1F<<3)
+#define HC_INDEX_DATA_RESERVE_SHIFT 3
+	u8 timeout;
+#elif defined(__LITTLE_ENDIAN)
+	u8 timeout;
+	u8 flags;
+#define HC_INDEX_DATA_SM_ID (0x1<<0)
+#define HC_INDEX_DATA_SM_ID_SHIFT 0
+#define HC_INDEX_DATA_HC_ENABLED (0x1<<1)
+#define HC_INDEX_DATA_HC_ENABLED_SHIFT 1
+#define HC_INDEX_DATA_DYNAMIC_HC_ENABLED (0x1<<2)
+#define HC_INDEX_DATA_DYNAMIC_HC_ENABLED_SHIFT 2
+#define HC_INDEX_DATA_RESERVE (0x1F<<3)
+#define HC_INDEX_DATA_RESERVE_SHIFT 3
+#endif
+};
+
+
+/*
+ * HC state-machine
+ */
+struct hc_status_block_sm {
+#if defined(__BIG_ENDIAN)
+	u8 igu_seg_id;
+	u8 igu_sb_id;
+	u8 timer_value;
+	u8 __flags;
+#elif defined(__LITTLE_ENDIAN)
+	u8 __flags;
+	u8 timer_value;
+	u8 igu_sb_id;
+	u8 igu_seg_id;
+#endif
+	u32 time_to_expire;
+};
+
+/*
+ * hold PCI identification variables- used in various places in firmware
+ */
+struct pci_entity {
+#if defined(__BIG_ENDIAN)
+	u8 vf_valid;
+	u8 vf_id;
+	u8 vnic_id;
+	u8 pf_id;
+#elif defined(__LITTLE_ENDIAN)
+	u8 pf_id;
+	u8 vnic_id;
+	u8 vf_id;
+	u8 vf_valid;
+#endif
+};
+
+/*
+ * The fast-path status block meta-data, common to all chips
+ */
+struct hc_sb_data {
+	struct regpair host_sb_addr;
+	struct hc_status_block_sm state_machine[HC_SB_MAX_SM];
+	struct pci_entity p_func;
+#if defined(__BIG_ENDIAN)
+	u8 rsrv0;
+	u8 state;
+	u8 dhc_qzone_id;
+	u8 same_igu_sb_1b;
+#elif defined(__LITTLE_ENDIAN)
+	u8 same_igu_sb_1b;
+	u8 dhc_qzone_id;
+	u8 state;
+	u8 rsrv0;
+#endif
+	struct regpair rsrv1[2];
+};
+
+
+/*
+ * Segment types for host coaslescing
+ */
+enum hc_segment {
+	HC_REGULAR_SEGMENT,
+	HC_DEFAULT_SEGMENT,
+	MAX_HC_SEGMENT};
+
+
+/*
+ * The fast-path status block meta-data
+ */
+struct hc_sp_status_block_data {
+	struct regpair host_sb_addr;
+#if defined(__BIG_ENDIAN)
+	u8 rsrv1;
+	u8 state;
+	u8 igu_seg_id;
+	u8 igu_sb_id;
+#elif defined(__LITTLE_ENDIAN)
+	u8 igu_sb_id;
+	u8 igu_seg_id;
+	u8 state;
+	u8 rsrv1;
+#endif
+	struct pci_entity p_func;
+};
+
+
+/*
+ * The fast-path status block meta-data
+ */
+struct hc_status_block_data_e1x {
+	struct hc_index_data index_data[HC_SB_MAX_INDICES_E1X];
+	struct hc_sb_data common;
+};
+
+
+/*
+ * The fast-path status block meta-data
+ */
+struct hc_status_block_data_e2 {
+	struct hc_index_data index_data[HC_SB_MAX_INDICES_E2];
+	struct hc_sb_data common;
+};
+
+
+/*
+ * IGU block operartion modes (in Everest2)
+ */
+enum igu_mode {
+	HC_IGU_BC_MODE,
+	HC_IGU_NBC_MODE,
+	MAX_IGU_MODE};
+
+
+/*
+ * IP versions
+ */
+enum ip_ver {
+	IP_V4,
+	IP_V6,
+	MAX_IP_VER};
+
+
+/*
+ * Multi-function modes
+ */
+enum mf_mode {
+	SINGLE_FUNCTION,
+	MULTI_FUNCTION_SD,
+	MULTI_FUNCTION_SI,
+	MULTI_FUNCTION_NIV,
+	MAX_MF_MODE};
+
+
+/*
+ * The data niv vif list ramrod need 
+ */
+struct niv_vif_list_ramrod_data {
+#if defined(__BIG_ENDIAN)
+	u16 vif_list_index;
+	u8 func_bit_map;
+	u8 niv_vif_list_command;
+#elif defined(__LITTLE_ENDIAN)
+	u8 niv_vif_list_command;
+	u8 func_bit_map;
+	u16 vif_list_index;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 reserved1;
+	u8 echo;
+	u8 func_to_clear;
+#elif defined(__LITTLE_ENDIAN)
+	u8 func_to_clear;
+	u8 echo;
+	u16 reserved1;
+#endif
+};
+
+
+/*
+ * Protocol-common statistics collected by the Tstorm (per pf)
+ */
+struct tstorm_per_pf_stats {
+	struct regpair rcv_error_bytes;
+};
+
+/*
+ * 
+ */
+struct per_pf_stats {
+	struct tstorm_per_pf_stats tstorm_pf_statistics;
+};
+
+
+/*
+ * Protocol-common statistics collected by the Tstorm (per port)
+ */
+struct tstorm_per_port_stats {
+	__le32 mac_discard;
+	__le32 mac_filter_discard;
+	__le32 brb_truncate_discard;
+	__le32 mf_tag_discard;
+	__le32 packet_drop;
+	__le32 reserved;
+};
+
+/*
+ * 
+ */
+struct per_port_stats {
+	struct tstorm_per_port_stats tstorm_port_statistics;
+};
+
+
+/*
+ * Protocol-common statistics collected by the Tstorm (per client)
+ */
+struct tstorm_per_queue_stats {
+	struct regpair rcv_ucast_bytes;
+	__le32 rcv_ucast_pkts;
+	__le32 checksum_discard;
+	struct regpair rcv_bcast_bytes;
+	__le32 rcv_bcast_pkts;
+	__le32 pkts_too_big_discard;
+	struct regpair rcv_mcast_bytes;
+	__le32 rcv_mcast_pkts;
+	__le32 ttl0_discard;
+	__le16 no_buff_discard;
+	__le16 reserved0;
+	__le32 reserved1;
+};
+
+/*
+ * Protocol-common statistics collected by the Ustorm (per client)
+ */
+struct ustorm_per_queue_stats {
+	struct regpair ucast_no_buff_bytes;
+	struct regpair mcast_no_buff_bytes;
+	struct regpair bcast_no_buff_bytes;
+	__le32 ucast_no_buff_pkts;
+	__le32 mcast_no_buff_pkts;
+	__le32 bcast_no_buff_pkts;
+	__le32 coalesced_pkts;
+	struct regpair coalesced_bytes;
+	__le32 coalesced_events;
+	__le32 coalesced_aborts;
+};
+
+/*
+ * Protocol-common statistics collected by the Xstorm (per client) 
+ */
+struct xstorm_per_queue_stats {
+	struct regpair ucast_bytes_sent;
+	struct regpair mcast_bytes_sent;
+	struct regpair bcast_bytes_sent;
+	__le32 ucast_pkts_sent;
+	__le32 mcast_pkts_sent;
+	__le32 bcast_pkts_sent;
+	__le32 error_drop_pkts;
+};
+
+/*
+ * 
+ */
+struct per_queue_stats {
+	struct tstorm_per_queue_stats tstorm_queue_statistics;
+	struct ustorm_per_queue_stats ustorm_queue_statistics;
+	struct xstorm_per_queue_stats xstorm_queue_statistics;
+};
+
+
+/*
+ * FW version stored in first line of pram
+ */
+struct pram_fw_version {
+	u8 major;
+	u8 minor;
+	u8 revision;
+	u8 engineering;
+	u8 flags;
+#define PRAM_FW_VERSION_OPTIMIZED (0x1<<0)
+#define PRAM_FW_VERSION_OPTIMIZED_SHIFT 0
+#define PRAM_FW_VERSION_STORM_ID (0x3<<1)
+#define PRAM_FW_VERSION_STORM_ID_SHIFT 1
+#define PRAM_FW_VERSION_BIG_ENDIEN (0x1<<3)
+#define PRAM_FW_VERSION_BIG_ENDIEN_SHIFT 3
+#define PRAM_FW_VERSION_CHIP_VERSION (0x3<<4)
+#define PRAM_FW_VERSION_CHIP_VERSION_SHIFT 4
+#define __PRAM_FW_VERSION_RESERVED0 (0x3<<6)
+#define __PRAM_FW_VERSION_RESERVED0_SHIFT 6
+};
+
+
+/*
+ * Ethernet slow path element
+ */
+union protocol_common_specific_data {
+	u8 protocol_data[8];
+	struct regpair phy_address;
+	struct regpair mac_config_addr;
+	struct niv_vif_list_ramrod_data niv_vif_list_data;
+};
+
+/*
+ * The send queue element
+ */
+struct protocol_common_spe {
+	struct spe_hdr hdr;
+	union protocol_common_specific_data data;
+};
+
+
+/*
+ * The send queue element
+ */
+struct slow_path_element {
+	struct spe_hdr hdr;
+	struct regpair protocol_data;
+};
+
+
+/*
+ * Protocol-common statistics counter
+ */
+struct stats_counter {
+	__le16 xstats_counter;
+	__le16 reserved0;
+	__le32 reserved1;
+	__le16 tstats_counter;
+	__le16 reserved2;
+	__le32 reserved3;
+	__le16 ustats_counter;
+	__le16 reserved4;
+	__le32 reserved5;
+	__le16 cstats_counter;
+	__le16 reserved6;
+	__le32 reserved7;
+};
+
+
+/*
+ * 
+ */
+struct stats_query_entry {
+	u8 kind;
+	u8 index;
+	__le16 funcID;
+	__le32 reserved;
+	struct regpair address;
+};
+
+/*
+ * statistic command
+ */
+struct stats_query_cmd_group {
+	struct stats_query_entry query[STATS_QUERY_CMD_COUNT];
+};
+
+
+/*
+ * statistic command header
+ */
+struct stats_query_header {
+	u8 cmd_num;
+	u8 reserved0;
+	__le16 drv_stats_counter;
+	__le32 reserved1;
+	struct regpair stats_counters_addrs;
+};
+
+
+/*
+ * Types of statistcis query entry
+ */
+enum stats_query_type {
+	STATS_TYPE_QUEUE,
+	STATS_TYPE_PORT,
+	STATS_TYPE_PF,
+	STATS_TYPE_TOE,
+	STATS_TYPE_FCOE,
+	MAX_STATS_QUERY_TYPE};
+
+
+/*
+ * Indicate of the function status block state
+ */
+enum status_block_state {
+	SB_DISABLED,
+	SB_ENABLED,
+	SB_CLEANED,
+	MAX_STATUS_BLOCK_STATE};
+
+
+/*
+ * Storm IDs (including attentions for IGU related enums)
+ */
+enum storm_id {
+	USTORM_ID,
+	CSTORM_ID,
+	XSTORM_ID,
+	TSTORM_ID,
+	ATTENTION_ID,
+	MAX_STORM_ID};
+
+
+/*
+ * Taffic types used in ETS and flow control algorithms
+ */
+enum traffic_type {
+	LLFC_TRAFFIC_TYPE_NW,
+	LLFC_TRAFFIC_TYPE_FCOE,
+	LLFC_TRAFFIC_TYPE_ISCSI,
+	MAX_TRAFFIC_TYPE};
+
+
+/*
+ * zone A per-queue data
+ */
+struct tstorm_queue_zone_data {
+	struct regpair reserved[4];
+};
+
+
+/*
+ * zone B per-VF data
+ */
+struct tstorm_vf_zone_data {
+	struct regpair reserved;
+};
+
+
+/*
+ * zone A per-queue data
+ */
+struct ustorm_queue_zone_data {
+	struct ustorm_eth_rx_producers eth_rx_producers;
+	struct regpair reserved[3];
+};
+
+
+/*
+ * zone B per-VF data
+ */
+struct ustorm_vf_zone_data {
+	struct regpair reserved;
+};
+
+
+/*
+ * data per VF-PF channel
+ */
+struct vf_pf_channel_data {
+#if defined(__BIG_ENDIAN)
+	u16 reserved0;
+	u8 valid;
+	u8 state;
+#elif defined(__LITTLE_ENDIAN)
+	u8 state;
+	u8 valid;
+	u16 reserved0;
+#endif
+	u32 reserved1;
+};
+
+
+/*
+ * State of VF-PF channel
+ */
+enum vf_pf_channel_state {
+	VF_PF_CHANNEL_STATE_READY,
+	VF_PF_CHANNEL_STATE_WAITING_FOR_ACK,
+	MAX_VF_PF_CHANNEL_STATE};
+
+
+/*
+ * vif_list_rule_kind
+ */
+enum vif_list_rule_kind {
+	VIF_LIST_RULE_SET,
+	VIF_LIST_RULE_GET,
+	VIF_LIST_RULE_CLEAR_ALL,
+	VIF_LIST_RULE_CLEAR_FUNC,
+	MAX_VIF_LIST_RULE_KIND};
+
+
+/*
+ * zone A per-queue data
+ */
+struct xstorm_queue_zone_data {
+	struct regpair reserved[4];
+};
+
+
+/*
+ * zone B per-VF data
+ */
+struct xstorm_vf_zone_data {
+	struct regpair reserved;
+};
+
+#endif /* BNX2X_HSI_H */
diff -r 2e9e6572f41c drivers/net/bnx2/bnx2x_mfw_req.h
--- /dev/null
+++ b/drivers/net/bnx2/bnx2x_mfw_req.h
@@ -0,0 +1,179 @@
+/* bnx2x_mfw_req.h: Broadcom Everest network driver.
+ *
+ * Copyright (c) 2012 Broadcom Corporation
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation.
+ */
+
+#ifndef BNX2X_MFW_REQ_H
+#define BNX2X_MFW_REQ_H
+
+
+#define PORT_0              0
+#define PORT_1              1
+#define PORT_MAX            2
+#define NVM_PATH_MAX        2
+
+/* FCoE capabilities required from the driver */
+struct fcoe_capabilities {
+	u32 capability1;
+	/* Maximum number of I/Os per connection */
+	#define FCOE_IOS_PER_CONNECTION_MASK    0x0000ffff
+	#define FCOE_IOS_PER_CONNECTION_SHIFT   0
+	/* Maximum number of Logins per port */
+	#define FCOE_LOGINS_PER_PORT_MASK       0xffff0000
+	#define FCOE_LOGINS_PER_PORT_SHIFT   16
+
+	u32 capability2;
+	/* Maximum number of exchanges */
+	#define FCOE_NUMBER_OF_EXCHANGES_MASK   0x0000ffff
+	#define FCOE_NUMBER_OF_EXCHANGES_SHIFT  0
+	/* Maximum NPIV WWN per port */
+	#define FCOE_NPIV_WWN_PER_PORT_MASK     0xffff0000
+	#define FCOE_NPIV_WWN_PER_PORT_SHIFT    16
+
+	u32 capability3;
+	/* Maximum number of targets supported */
+	#define FCOE_TARGETS_SUPPORTED_MASK     0x0000ffff
+	#define FCOE_TARGETS_SUPPORTED_SHIFT    0
+	/* Maximum number of outstanding commands across all connections */
+	#define FCOE_OUTSTANDING_COMMANDS_MASK  0xffff0000
+	#define FCOE_OUTSTANDING_COMMANDS_SHIFT 16
+
+	u32 capability4;
+	#define FCOE_CAPABILITY4_STATEFUL       		0x00000001
+	#define FCOE_CAPABILITY4_STATELESS      		0x00000002
+	#define FCOE_CAPABILITY4_CAPABILITIES_REPORTED_VALID   	0x00000004
+};
+
+struct glob_ncsi_oem_data
+{
+	u32 driver_version[4];
+	struct fcoe_capabilities fcoe_features[NVM_PATH_MAX][PORT_MAX];
+};
+
+/* current drv_info version */
+#define DRV_INFO_CUR_VER 2
+
+/* drv_info op codes supported */
+enum drv_info_opcode {
+	ETH_STATS_OPCODE,
+	FCOE_STATS_OPCODE,
+	ISCSI_STATS_OPCODE
+};
+
+#define ETH_STAT_INFO_VERSION_LEN	12
+/*  Per PCI Function Ethernet Statistics required from the driver */
+struct eth_stats_info {
+	/* Function's Driver Version. padded to 12 */
+	u8 version[ETH_STAT_INFO_VERSION_LEN];
+	/* Locally Admin Addr. BigEndian EIU48. Actual size is 6 bytes */
+	u8 mac_local[8];
+	u8 mac_add1[8];		/* Additional Programmed MAC Addr 1. */
+	u8 mac_add2[8];		/* Additional Programmed MAC Addr 2. */
+	u32 mtu_size;		/* MTU Size. Note   : Negotiated MTU */
+	u32 feature_flags;	/* Feature_Flags. */
+#define FEATURE_ETH_CHKSUM_OFFLOAD_MASK		0x01
+#define FEATURE_ETH_LSO_MASK			0x02
+#define FEATURE_ETH_BOOTMODE_MASK		0x1C
+#define FEATURE_ETH_BOOTMODE_SHIFT		2
+#define FEATURE_ETH_BOOTMODE_NONE		(0x0 << 2)
+#define FEATURE_ETH_BOOTMODE_PXE		(0x1 << 2)
+#define FEATURE_ETH_BOOTMODE_ISCSI		(0x2 << 2)
+#define FEATURE_ETH_BOOTMODE_FCOE		(0x3 << 2)
+#define FEATURE_ETH_TOE_MASK			0x20
+	u32 lso_max_size;	/* LSO MaxOffloadSize. */
+	u32 lso_min_seg_cnt;	/* LSO MinSegmentCount. */
+	/* Num Offloaded Connections TCP_IPv4. */
+	u32 ipv4_ofld_cnt;
+	/* Num Offloaded Connections TCP_IPv6. */
+	u32 ipv6_ofld_cnt;
+	u32 promiscuous_mode;	/* Promiscuous Mode. non-zero true */
+	u32 txq_size;		/* TX Descriptors Queue Size */
+	u32 rxq_size;		/* RX Descriptors Queue Size */
+	/* TX Descriptor Queue Avg Depth. % Avg Queue Depth since last poll */
+	u32 txq_avg_depth;
+	/* RX Descriptors Queue Avg Depth. % Avg Queue Depth since last poll */
+	u32 rxq_avg_depth;
+	/* IOV_Offload. 0=none; 1=MultiQueue, 2=VEB 3= VEPA*/
+	u32 iov_offload;
+	/* Number of NetQueue/VMQ Config'd. */
+	u32 netq_cnt;
+	u32 vf_cnt;		/* Num VF assigned to this PF. */
+};
+
+/*  Per PCI Function FCOE Statistics required from the driver */
+struct fcoe_stats_info {
+	u8 version[12];		/* Function's Driver Version. */
+	u8 mac_local[8];	/* Locally Admin Addr. */
+	u8 mac_add1[8];		/* Additional Programmed MAC Addr 1. */
+	u8 mac_add2[8];		/* Additional Programmed MAC Addr 2. */
+	/* QoS Priority (per 802.1p). 0-7255 */
+	u32 qos_priority;
+	u32 txq_size;		/* FCoE TX Descriptors Queue Size. */
+	u32 rxq_size;		/* FCoE RX Descriptors Queue Size. */
+	/* FCoE TX Descriptor Queue Avg Depth. */
+	u32 txq_avg_depth;
+	/* FCoE RX Descriptors Queue Avg Depth. */
+	u32 rxq_avg_depth;
+	u32 rx_frames_lo;	/* FCoE RX Frames received. */
+	u32 rx_frames_hi;	/* FCoE RX Frames received. */
+	u32 rx_bytes_lo;	/* FCoE RX Bytes received. */
+	u32 rx_bytes_hi;	/* FCoE RX Bytes received. */
+	u32 tx_frames_lo;	/* FCoE TX Frames sent. */
+	u32 tx_frames_hi;	/* FCoE TX Frames sent. */
+	u32 tx_bytes_lo;	/* FCoE TX Bytes sent. */
+	u32 tx_bytes_hi;	/* FCoE TX Bytes sent. */
+	u32 rx_fcs_errors;	/* number of receive packets with FCS errors */
+	u32 rx_fc_crc_errors;	/* number of FC frames with CRC errors*/
+	u32 fip_login_failures;	/* number of FCoE/FIP Login failures */
+};
+
+/* Per PCI  Function iSCSI Statistics required from the driver*/
+struct iscsi_stats_info {
+	u8 version[12];		/* Function's Driver Version. */
+	u8 mac_local[8];	/* Locally Admin iSCSI MAC Addr. */
+	u8 mac_add1[8];		/* Additional Programmed MAC Addr 1. */
+	/* QoS Priority (per 802.1p). 0-7255 */
+	u32 qos_priority;
+
+	u8 initiator_name[64];	/* iSCSI Boot Initiator Node name. */
+
+	u8 ww_port_name[64];	/* iSCSI World wide port name */
+
+	u8 boot_target_name[64];/* iSCSI Boot Target Name. */
+
+	u8 boot_target_ip[16];	/* iSCSI Boot Target IP. */
+	u32 boot_target_portal;	/* iSCSI Boot Target Portal. */
+	u8 boot_init_ip[16];	/* iSCSI Boot Initiator IP Address. */
+	u32 max_frame_size;	/* Max Frame Size. bytes */
+	u32 txq_size;		/* PDU TX Descriptors Queue Size. */
+	u32 rxq_size;		/* PDU RX Descriptors Queue Size. */
+
+	u32 txq_avg_depth;	/*PDU TX Descriptor Queue Avg Depth. */
+	u32 rxq_avg_depth;	/*PDU RX Descriptors Queue Avg Depth. */
+	u32 rx_pdus_lo;		/* iSCSI PDUs received. */
+	u32 rx_pdus_hi;		/* iSCSI PDUs received. */
+
+	u32 rx_bytes_lo;	/* iSCSI RX Bytes received. */
+	u32 rx_bytes_hi;	/* iSCSI RX Bytes received. */
+	u32 tx_pdus_lo;		/* iSCSI PDUs sent. */
+	u32 tx_pdus_hi;		/* iSCSI PDUs sent. */
+
+	u32 tx_bytes_lo;	/* iSCSI PDU TX Bytes sent. */
+	u32 tx_bytes_hi;	/* iSCSI PDU TX Bytes sent. */
+	u32 pcp_prior_map_tbl;	/*C-PCP to S-PCP Priority MapTable.
+				9 nibbles, the position of each nibble
+				represents the C-PCP value, the value
+				of the nibble = S-PCP value.*/
+};
+
+union drv_info_to_mcp {
+	struct eth_stats_info		ether_stat;
+	struct fcoe_stats_info		fcoe_stat;
+	struct iscsi_stats_info		iscsi_stat;
+};
+
+#endif /* BNX2X_MFW_REQ_H */
diff -r 2e9e6572f41c drivers/net/bnx2/bnx2x_reg.h
--- /dev/null
+++ b/drivers/net/bnx2/bnx2x_reg.h
@@ -0,0 +1,5217 @@
+/* bnx2x_reg.h: Broadcom Everest network driver.
+ *
+ * Copyright (c) 2007-2012 Broadcom Corporation
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation.
+ *
+ * The registers description starts with the register Access type followed
+ * by size in bits. For example [RW 32]. The access types are:
+ * R  - Read only
+ * RC - Clear on read
+ * RW - Read/Write
+ * ST - Statistics register (clear on read)
+ * W  - Write only
+ * WB - Wide bus register - the size is over 32 bits and it should be
+ *      read/write in consecutive 32 bits accesses
+ * WR - Write Clear (write 1 to clear the bit)
+ *
+ */
+
+#ifndef BNX2X_REG_H
+#define BNX2X_REG_H
+
+
+#define ATC_ATC_INT_STS_REG_ADDRESS_ERROR			 (0x1<<0)
+#define ATC_ATC_INT_STS_REG_ATC_GPA_MULTIPLE_HITS		 (0x1<<2)
+#define ATC_ATC_INT_STS_REG_ATC_IREQ_LESS_THAN_STU		 (0x1<<5)
+#define ATC_ATC_INT_STS_REG_ATC_RCPL_TO_EMPTY_CNT		 (0x1<<3)
+#define ATC_ATC_INT_STS_REG_ATC_TCPL_ERROR			 (0x1<<4)
+#define ATC_ATC_INT_STS_REG_ATC_TCPL_TO_NOT_PEND		 (0x1<<1)
+/* [R 1] ATC initalization done */
+#define ATC_REG_ATC_INIT_DONE					 0x1100bc
+/* [RC 6] Interrupt register #0 read clear */
+#define ATC_REG_ATC_INT_STS_CLR					 0x1101c0
+/* [RW 5] Parity mask register #0 read/write */
+#define ATC_REG_ATC_PRTY_MASK					 0x1101d8
+/* [RC 5] Parity register #0 read clear */
+#define ATC_REG_ATC_PRTY_STS_CLR				 0x1101d0
+/* [RW 19] Interrupt mask register #0 read/write */
+#define BRB1_REG_BRB1_INT_MASK					 0x60128
+/* [R 19] Interrupt register #0 read */
+#define BRB1_REG_BRB1_INT_STS					 0x6011c
+/* [RW 4] Parity mask register #0 read/write */
+#define BRB1_REG_BRB1_PRTY_MASK					 0x60138
+/* [R 4] Parity register #0 read */
+#define BRB1_REG_BRB1_PRTY_STS					 0x6012c
+/* [RC 4] Parity register #0 read clear */
+#define BRB1_REG_BRB1_PRTY_STS_CLR				 0x60130
+/* [RW 11] The number of free blocks below which the full signal to class 0
+ * is asserted */
+#define BRB1_REG_FULL_0_XOFF_THRESHOLD_0			 0x601d0
+#define BRB1_REG_FULL_0_XOFF_THRESHOLD_1			 0x60230
+/* [RW 11] The number of free blocks above which the full signal to class 0
+ * is de-asserted */
+#define BRB1_REG_FULL_0_XON_THRESHOLD_0				 0x601d4
+#define BRB1_REG_FULL_0_XON_THRESHOLD_1				 0x60234
+/* [RW 11] The number of free blocks below which the full signal to class 1
+ * is asserted */
+#define BRB1_REG_FULL_1_XOFF_THRESHOLD_0			 0x601d8
+#define BRB1_REG_FULL_1_XOFF_THRESHOLD_1			 0x60238
+/* [RW 11] The number of free blocks above which the full signal to class 1
+ * is de-asserted */
+#define BRB1_REG_FULL_1_XON_THRESHOLD_0				 0x601dc
+#define BRB1_REG_FULL_1_XON_THRESHOLD_1				 0x6023c
+/* [RW 11] The number of free blocks below which the full signal to the LB
+ * port is asserted */
+#define BRB1_REG_FULL_LB_XOFF_THRESHOLD				 0x601e0
+/* [RW 11] The number of free blocks above which the full signal to the LB
+ * port is de-asserted */
+#define BRB1_REG_FULL_LB_XON_THRESHOLD				 0x601e4
+/* [RW 10] The number of free blocks above which the High_llfc signal to
+ * interface #n is de-asserted. Not Functional */
+#define BRB1_REG_HIGH_LLFC_HIGH_THRESHOLD_0			 0x6014c
+/* [RW 10] The number of free blocks below which the High_llfc signal to
+ * interface #n is asserted. Not Functional */
+#define BRB1_REG_HIGH_LLFC_LOW_THRESHOLD_0			 0x6013c
+/* [RW 11] The number of blocks guarantied for the LB port */
+#define BRB1_REG_LB_GUARANTIED					 0x601ec
+/* [RW 11] The hysteresis on the guarantied buffer space for the Lb port
+ * before signaling XON. */
+#define BRB1_REG_LB_GUARANTIED_HYST				 0x60264
+/* [RW 10] The number of free blocks above which the Low_llfc signal to
+ * interface #n is de-asserted. Not Functional */
+#define BRB1_REG_LOW_LLFC_HIGH_THRESHOLD_0			 0x6016c
+/* [RW 10] The number of free blocks below which the Low_llfc signal to
+ * interface #n is asserted. Not Functional */
+#define BRB1_REG_LOW_LLFC_LOW_THRESHOLD_0			 0x6015c
+/* [RW 11] The number of blocks guarantied for class 0 in MAC 0. The
+ * register is applicable only when per_class_guaranty_mode is set. */
+#define BRB1_REG_MAC_0_CLASS_0_GUARANTIED			 0x60244
+/* [RW 11] The hysteresis on the guarantied buffer space for class 0 in MAC
+ * 1 before signaling XON. The register is applicable only when
+ * per_class_guaranty_mode is set. */
+#define BRB1_REG_MAC_0_CLASS_0_GUARANTIED_HYST			 0x60254
+/* [RW 11] The number of blocks guarantied for class 1 in MAC 0. The
+ * register is applicable only when per_class_guaranty_mode is set. */
+#define BRB1_REG_MAC_0_CLASS_1_GUARANTIED			 0x60248
+/* [RW 11] The hysteresis on the guarantied buffer space for class 1in MAC 0
+ * before signaling XON. The register is applicable only when
+ * per_class_guaranty_mode is set. */
+#define BRB1_REG_MAC_0_CLASS_1_GUARANTIED_HYST			 0x60258
+/* [RW 11] The number of blocks guarantied for class 0in MAC1.The register
+ * is applicable only when per_class_guaranty_mode is set. */
+#define BRB1_REG_MAC_1_CLASS_0_GUARANTIED			 0x6024c
+/* [RW 11] The hysteresis on the guarantied buffer space for class 0 in MAC
+ * 1 before signaling XON. The register is applicable only when
+ * per_class_guaranty_mode is set. */
+#define BRB1_REG_MAC_1_CLASS_0_GUARANTIED_HYST			 0x6025c
+/* [RW 11] The number of blocks guarantied for class 1 in MAC 1. The
+ * register is applicable only when per_class_guaranty_mode is set. */
+#define BRB1_REG_MAC_1_CLASS_1_GUARANTIED			 0x60250
+/* [RW 11] The hysteresis on the guarantied buffer space for class 1 in MAC
+ * 1 before signaling XON. The register is applicable only when
+ * per_class_guaranty_mode is set. */
+#define BRB1_REG_MAC_1_CLASS_1_GUARANTIED_HYST			 0x60260
+/* [RW 11] The number of blocks guarantied for the MAC port. The register is
+ * applicable only when per_class_guaranty_mode is reset. */
+#define BRB1_REG_MAC_GUARANTIED_0				 0x601e8
+#define BRB1_REG_MAC_GUARANTIED_1				 0x60240
+/* [R 24] The number of full blocks. */
+#define BRB1_REG_NUM_OF_FULL_BLOCKS				 0x60090
+/* [RW 11] The number of free blocks below which the pause signal to class 0
+ * is asserted */
+#define BRB1_REG_PAUSE_0_XOFF_THRESHOLD_0			 0x601c0
+#define BRB1_REG_PAUSE_0_XOFF_THRESHOLD_1			 0x60220
+/* [RW 11] The number of free blocks above which the pause signal to class 0
+ * is de-asserted */
+#define BRB1_REG_PAUSE_0_XON_THRESHOLD_0			 0x601c4
+#define BRB1_REG_PAUSE_0_XON_THRESHOLD_1			 0x60224
+/* [RW 11] The number of free blocks below which the pause signal to class 1
+ * is asserted */
+#define BRB1_REG_PAUSE_1_XOFF_THRESHOLD_0			 0x601c8
+#define BRB1_REG_PAUSE_1_XOFF_THRESHOLD_1			 0x60228
+/* [RW 11] The number of free blocks above which the pause signal to class 1
+ * is de-asserted */
+#define BRB1_REG_PAUSE_1_XON_THRESHOLD_0			 0x601cc
+#define BRB1_REG_PAUSE_1_XON_THRESHOLD_1			 0x6022c
+/* [RW 10] Write client 0: De-assert pause threshold. Not Functional */
+#define BRB1_REG_PAUSE_HIGH_THRESHOLD_0				 0x60078
+/* [RW 10] Write client 0: Assert pause threshold. Not Functional */
+#define BRB1_REG_PAUSE_LOW_THRESHOLD_0				 0x60068
+/* [RW 1] Indicates if to use per-class guaranty mode (new mode) or per-MAC
+ * guaranty mode (backwards-compatible mode). 0=per-MAC guaranty mode (BC
+ * mode). 1=per-class guaranty mode (new mode). */
+#define BRB1_REG_PER_CLASS_GUARANTY_MODE			 0x60268
+/* [R 24] The number of full blocks occpied by port. */
+#define BRB1_REG_PORT_NUM_OCC_BLOCKS_0				 0x60094
+/* [R 5] Used to read the value of the XX protection CAM occupancy counter. */
+#define CCM_REG_CAM_OCCUP					 0xd0188
+/* [RW 11] Interrupt mask register #0 read/write */
+#define CCM_REG_CCM_INT_MASK					 0xd01e4
+/* [R 11] Interrupt register #0 read */
+#define CCM_REG_CCM_INT_STS					 0xd01d8
+/* [RW 27] Parity mask register #0 read/write */
+#define CCM_REG_CCM_PRTY_MASK					 0xd01f4
+/* [R 27] Parity register #0 read */
+#define CCM_REG_CCM_PRTY_STS					 0xd01e8
+/* [RC 27] Parity register #0 read clear */
+#define CCM_REG_CCM_PRTY_STS_CLR				 0xd01ec
+/* [RW 4] CFC output initial credit. Max credit available - 15.Write writes
+ * the initial credit value; read returns the current value of the credit
+ * counter. Must be initialized to 1 at start-up. */
+#define CCM_REG_CFC_INIT_CRD					 0xd0204
+/* [RW 6] QM output initial credit. Max credit available - 32. Write writes
+ * the initial credit value; read returns the current value of the credit
+ * counter. Must be initialized to 32 at start-up. */
+#define CCM_REG_CQM_INIT_CRD					 0xd020c
+/* [RC 1] Set when the message length mismatch (relative to last indication)
+ * at the SDM interface is detected. */
+#define CCM_REG_CSDM_LENGTH_MIS					 0xd0170
+/* [RW 8] FIC0 output initial credit. Max credit available - 255. Write
+ * writes the initial credit value; read returns the current value of the
+ * credit counter. Must be initialized to 64 at start-up. */
+#define CCM_REG_FIC0_INIT_CRD					 0xd0210
+/* [RW 8] FIC1 output initial credit. Max credit available - 255.Write
+ * writes the initial credit value; read returns the current value of the
+ * credit counter. Must be initialized to 64 at start-up. */
+#define CCM_REG_FIC1_INIT_CRD					 0xd0214
+/* [RC 1] Set when the message length mismatch (relative to last indication)
+ * at the pbf interface is detected. */
+#define CCM_REG_PBF_LENGTH_MIS					 0xd0180
+/* [RC 1] Set when the message length mismatch (relative to last indication)
+ * at the STORM interface is detected. */
+#define CCM_REG_STORM_LENGTH_MIS				 0xd016c
+/* [RC 1] Set when the message length mismatch (relative to last indication)
+ * at the tsem interface is detected. */
+#define CCM_REG_TSEM_LENGTH_MIS					 0xd0174
+/* [RC 1] Set when message length mismatch (relative to last indication) at
+ * the usem interface is detected. */
+#define CCM_REG_USEM_LENGTH_MIS					 0xd017c
+/* [RC 1] Set when the message length mismatch (relative to last indication)
+ * at the xsem interface is detected. */
+#define CCM_REG_XSEM_LENGTH_MIS					 0xd0178
+/* [RW 19] Indirect access to the descriptor table of the XX protection
+ * mechanism. The fields are: [5:0] - message length; [12:6] - message
+ * pointer; 18:13] - next pointer. */
+#define CCM_REG_XX_DESCR_TABLE					 0xd0300
+#define CCM_REG_XX_DESCR_TABLE_SIZE				 24
+/* [R 7] Used to read the value of XX protection Free counter. */
+#define CCM_REG_XX_FREE						 0xd0184
+#define CDU_REG_CDU_GLOBAL_PARAMS				 0x101020
+/* [RW 7] Interrupt mask register #0 read/write */
+#define CDU_REG_CDU_INT_MASK					 0x10103c
+/* [R 7] Interrupt register #0 read */
+#define CDU_REG_CDU_INT_STS					 0x101030
+/* [RW 5] Parity mask register #0 read/write */
+#define CDU_REG_CDU_PRTY_MASK					 0x10104c
+/* [R 5] Parity register #0 read */
+#define CDU_REG_CDU_PRTY_STS					 0x101040
+/* [RC 5] Parity register #0 read clear */
+#define CDU_REG_CDU_PRTY_STS_CLR				 0x101044
+/* [RW 32] logging of error data in case of a CDU load error:
+ * {expected_cid[15:0]; xpected_type[2:0]; xpected_region[2:0]; ctive_error;
+ * ype_error; ctual_active; ctual_compressed_context}; */
+#define CDU_REG_ERROR_DATA					 0x101014
+/* [RW 13] activity counter ram access */
+#define CFC_REG_ACTIVITY_COUNTER				 0x104400
+#define CFC_REG_ACTIVITY_COUNTER_SIZE				 256
+/* [R 1] indication the initializing the activity counter by the hardware
+ * was done. */
+#define CFC_REG_AC_INIT_DONE					 0x104078
+/* [R 1] indication the initializing the cams by the hardware was done. */
+#define CFC_REG_CAM_INIT_DONE					 0x10407c
+/* [RW 2] Interrupt mask register #0 read/write */
+#define CFC_REG_CFC_INT_MASK					 0x104108
+/* [R 2] Interrupt register #0 read */
+#define CFC_REG_CFC_INT_STS					 0x1040fc
+/* [RC 2] Interrupt register #0 read clear */
+#define CFC_REG_CFC_INT_STS_CLR					 0x104100
+/* [RW 6] Parity mask register #0 read/write */
+#define CFC_REG_CFC_PRTY_MASK					 0x104118
+/* [R 6] Parity register #0 read */
+#define CFC_REG_CFC_PRTY_STS					 0x10410c
+/* [RC 6] Parity register #0 read clear */
+#define CFC_REG_CFC_PRTY_STS_CLR				 0x104110
+/* [RW 21] CID cam access (21:1 - Data; alid - 0) */
+#define CFC_REG_CID_CAM						 0x104800
+#define CFC_REG_DEBUG0						 0x104050
+/* [R 16] CFC error vector. when the CFC detects an internal error it will
+ * set one of these bits. the bit description can be found in CFC
+ * specifications */
+#define CFC_REG_ERROR_VECTOR					 0x10403c
+/* [WB 97] LCID info ram access = {96-vpf; 5:93-pfid; 2:89-type;
+ * 8:85-action; 4-paddrv; 3:20-paddr; 9:4-rstates; -lsf; :0-lstate} */
+#define CFC_REG_INFO_RAM					 0x105000
+#define CFC_REG_INFO_RAM_SIZE					 1024
+#define CFC_REG_INIT_REG					 0x10404c
+/* [RW 22] Link List ram access; data = {prev_pfid; rev_lcid; ext_pfid;
+ * ext_lcid} */
+#define CFC_REG_LINK_LIST					 0x104c00
+#define CFC_REG_LINK_LIST_SIZE					 256
+/* [R 1] indication the initializing the link list by the hardware was done. */
+#define CFC_REG_LL_INIT_DONE					 0x104074
+/* [R 9] Number of allocated LCIDs which are at empty state */
+#define CFC_REG_NUM_LCIDS_ALLOC					 0x104020
+/* [R 9] Number of Arriving LCIDs in Link List Block */
+#define CFC_REG_NUM_LCIDS_ARRIVING				 0x104004
+#define CFC_REG_NUM_LCIDS_INSIDE_PF				 0x104120
+/* [R 9] Number of Leaving LCIDs in Link List Block */
+#define CFC_REG_NUM_LCIDS_LEAVING				 0x104018
+#define CFC_REG_STRONG_ENABLE_PF				 0x104128
+#define CFC_REG_WEAK_ENABLE_PF					 0x104124
+/* [RW 32] Interrupt mask register #0 read/write */
+#define CSDM_REG_CSDM_INT_MASK_0				 0xc229c
+#define CSDM_REG_CSDM_INT_MASK_1				 0xc22ac
+/* [R 32] Interrupt register #0 read */
+#define CSDM_REG_CSDM_INT_STS_0					 0xc2290
+#define CSDM_REG_CSDM_INT_STS_1					 0xc22a0
+/* [RW 11] Parity mask register #0 read/write */
+#define CSDM_REG_CSDM_PRTY_MASK					 0xc22bc
+/* [R 11] Parity register #0 read */
+#define CSDM_REG_CSDM_PRTY_STS					 0xc22b0
+/* [RC 11] Parity register #0 read clear */
+#define CSDM_REG_CSDM_PRTY_STS_CLR				 0xc22b4
+/* [R 1] pxp_ctrl rd_data fifo empty in sdm_dma_rsp block */
+#define CSDM_REG_RSP_PXP_CTRL_RDATA_EMPTY			 0xc2548
+/* [R 1] parser fifo empty in sdm_sync block */
+#define CSDM_REG_SYNC_PARSER_EMPTY				 0xc2550
+/* [R 1] parser serial fifo empty in sdm_sync block */
+#define CSDM_REG_SYNC_SYNC_EMPTY				 0xc2558
+/* [RW 32] Interrupt mask register #0 read/write */
+#define CSEM_REG_CSEM_INT_MASK_0				 0x200110
+#define CSEM_REG_CSEM_INT_MASK_1				 0x200120
+/* [R 32] Interrupt register #0 read */
+#define CSEM_REG_CSEM_INT_STS_0					 0x200104
+#define CSEM_REG_CSEM_INT_STS_1					 0x200114
+/* [RW 32] Parity mask register #0 read/write */
+#define CSEM_REG_CSEM_PRTY_MASK_0				 0x200130
+#define CSEM_REG_CSEM_PRTY_MASK_1				 0x200140
+/* [R 32] Parity register #0 read */
+#define CSEM_REG_CSEM_PRTY_STS_0				 0x200124
+#define CSEM_REG_CSEM_PRTY_STS_1				 0x200134
+/* [RC 32] Parity register #0 read clear */
+#define CSEM_REG_CSEM_PRTY_STS_CLR_0				 0x200128
+#define CSEM_REG_CSEM_PRTY_STS_CLR_1				 0x200138
+/* [RW 32] This address space contains all registers and memories that are
+ * placed in SEM_FAST block. The SEM_FAST registers are described in
+ * appendix B. In order to access the SEM_FAST registers the base address
+ * CSEM_REGISTERS_FAST_MEMORY (Offset: 0x220000) should be added to each
+ * SEM_FAST register offset. */
+#define CSEM_REG_FAST_MEMORY					 0x220000
+/* [RW 15] Interrupt table Read and write access to it is not possible in
+ * the middle of the work */
+#define CSEM_REG_INT_TABLE					 0x200400
+/* [WB 128] Debug only. Passive buffer memory */
+#define CSEM_REG_PASSIVE_BUFFER					 0x202000
+/* [WB 46] pram memory. B45 is parity; b[44:0] - data. */
+#define CSEM_REG_PRAM						 0x240000
+/* [R 20] Valid sleeping threads indication have bit per thread */
+#define CSEM_REG_SLEEP_THREADS_VALID				 0x20026c
+/* [R 1] EXT_STORE FIFO is empty in sem_slow_ls_ext */
+#define CSEM_REG_SLOW_EXT_STORE_EMPTY				 0x2002a0
+/* [W 7] VF or PF ID for reset error bit. Values 0-63 reset error bit for 64
+ * VF; values 64-67 reset error for 4 PF; values 68-127 are not valid. */
+#define CSEM_REG_VFPF_ERR_NUM					 0x200380
+/* [RW 1] Parity mask register #0 read/write */
+#define DBG_REG_DBG_PRTY_MASK					 0xc0a8
+/* [R 1] Parity register #0 read */
+#define DBG_REG_DBG_PRTY_STS					 0xc09c
+/* [RC 1] Parity register #0 read clear */
+#define DBG_REG_DBG_PRTY_STS_CLR				 0xc0a0
+/* [RW 1] When set the DMAE will process the commands as in E1.5. 1.The
+ * function that is used is always SRC-PCI; 2.VF_Valid = 0; 3.VFID=0;
+ * 4.Completion function=0; 5.Error handling=0 */
+#define DMAE_REG_BACKWARD_COMP_EN				 0x10207c
+/* [RW 32] Commands memory. The address to command X; row Y is to calculated
+ * as 14*X+Y. */
+#define DMAE_REG_CMD_MEM					 0x102400
+#define DMAE_REG_CMD_MEM_SIZE					 224
+/* [RW 2] Interrupt mask register #0 read/write */
+#define DMAE_REG_DMAE_INT_MASK					 0x102054
+/* [RW 4] Parity mask register #0 read/write */
+#define DMAE_REG_DMAE_PRTY_MASK					 0x102064
+/* [R 4] Parity register #0 read */
+#define DMAE_REG_DMAE_PRTY_STS					 0x102058
+/* [RC 4] Parity register #0 read clear */
+#define DMAE_REG_DMAE_PRTY_STS_CLR				 0x10205c
+/* [RW 1] Command 0 go. */
+#define DMAE_REG_GO_C0						 0x102080
+/* [RW 1] Command 1 go. */
+#define DMAE_REG_GO_C1						 0x102084
+/* [RW 1] Command 10 go. */
+#define DMAE_REG_GO_C10						 0x102088
+/* [RW 1] Command 11 go. */
+#define DMAE_REG_GO_C11						 0x10208c
+/* [RW 1] Command 12 go. */
+#define DMAE_REG_GO_C12						 0x102090
+/* [RW 1] Command 13 go. */
+#define DMAE_REG_GO_C13						 0x102094
+/* [RW 1] Command 14 go. */
+#define DMAE_REG_GO_C14						 0x102098
+/* [RW 1] Command 15 go. */
+#define DMAE_REG_GO_C15						 0x10209c
+/* [RW 1] Command 2 go. */
+#define DMAE_REG_GO_C2						 0x1020a0
+/* [RW 1] Command 3 go. */
+#define DMAE_REG_GO_C3						 0x1020a4
+/* [RW 1] Command 4 go. */
+#define DMAE_REG_GO_C4						 0x1020a8
+/* [RW 1] Command 5 go. */
+#define DMAE_REG_GO_C5						 0x1020ac
+/* [RW 1] Command 6 go. */
+#define DMAE_REG_GO_C6						 0x1020b0
+/* [RW 1] Command 7 go. */
+#define DMAE_REG_GO_C7						 0x1020b4
+/* [RW 1] Command 8 go. */
+#define DMAE_REG_GO_C8						 0x1020b8
+/* [RW 1] Command 9 go. */
+#define DMAE_REG_GO_C9						 0x1020bc
+/* [RW 32] Doorbell address for RBC doorbells (function 0). */
+#define DORQ_REG_DB_ADDR0					 0x17008c
+/* [RW 6] Interrupt mask register #0 read/write */
+#define DORQ_REG_DORQ_INT_MASK					 0x170180
+/* [R 6] Interrupt register #0 read */
+#define DORQ_REG_DORQ_INT_STS					 0x170174
+/* [RC 6] Interrupt register #0 read clear */
+#define DORQ_REG_DORQ_INT_STS_CLR				 0x170178
+/* [RW 2] Parity mask register #0 read/write */
+#define DORQ_REG_DORQ_PRTY_MASK					 0x170190
+/* [R 2] Parity register #0 read */
+#define DORQ_REG_DORQ_PRTY_STS					 0x170184
+/* [RC 2] Parity register #0 read clear */
+#define DORQ_REG_DORQ_PRTY_STS_CLR				 0x170188
+/* [RW 5] The DPM mode CID extraction offset. */
+#define DORQ_REG_DPM_CID_OFST					 0x170030
+/* [R 13] Current value of the DQ FIFO fill level according to following
+ * pointer. The range is 0 - 256 FIFO rows; where each row stands for the
+ * doorbell. */
+#define DORQ_REG_DQ_FILL_LVLF					 0x1700a4
+/* [R 1] DQ FIFO full status. Is set; when FIFO filling level is more or
+ * equal to full threshold; reset on full clear. */
+#define DORQ_REG_DQ_FULL_ST					 0x1700c0
+#define DORQ_REG_MAX_RVFID_SIZE					 0x1701ec
+/* [RW 5] The normal mode CID extraction offset. */
+#define DORQ_REG_NORM_CID_OFST					 0x17002c
+#define DORQ_REG_PF_USAGE_CNT					 0x1701d0
+/* [R 4] Current value of response A counter credit. Initial credit is
+ * configured through write to ~dorq_registers_rsp_init_crd.rsp_init_crd
+ * register. */
+#define DORQ_REG_RSPA_CRD_CNT					 0x1700ac
+/* [R 4] Current value of response B counter credit. Initial credit is
+ * configured through write to ~dorq_registers_rsp_init_crd.rsp_init_crd
+ * register. */
+#define DORQ_REG_RSPB_CRD_CNT					 0x1700b0
+#define DORQ_REG_VF_NORM_CID_BASE				 0x1701a0
+#define DORQ_REG_VF_NORM_CID_OFST				 0x1701f4
+#define DORQ_REG_VF_NORM_CID_WND_SIZE				 0x1701a4
+#define DORQ_REG_VF_NORM_MAX_CID_COUNT				 0x1701e4
+#define DORQ_REG_VF_NORM_VF_BASE				 0x1701a8
+/* [RW 10] VF type validation mask value */
+#define DORQ_REG_VF_TYPE_MASK_0					 0x170218
+/* [RW 17] VF type validation Min MCID value */
+#define DORQ_REG_VF_TYPE_MAX_MCID_0				 0x1702d8
+/* [RW 17] VF type validation Max MCID value */
+#define DORQ_REG_VF_TYPE_MIN_MCID_0				 0x170298
+/* [RW 10] VF type validation comp value */
+#define DORQ_REG_VF_TYPE_VALUE_0				 0x170258
+#define DORQ_REG_VF_USAGE_CNT					 0x170320
+#define DORQ_REG_VF_USAGE_CT_LIMIT				 0x170340
+#define HC_CONFIG_0_REG_ATTN_BIT_EN_0				 (0x1<<4)
+#define HC_CONFIG_0_REG_BLOCK_DISABLE_0				 (0x1<<0)
+#define HC_CONFIG_0_REG_INT_LINE_EN_0				 (0x1<<3)
+#define HC_CONFIG_0_REG_MSI_ATTN_EN_0				 (0x1<<7)
+#define HC_CONFIG_0_REG_MSI_MSIX_INT_EN_0			 (0x1<<2)
+#define HC_CONFIG_0_REG_SINGLE_ISR_EN_0				 (0x1<<1)
+#define HC_CONFIG_1_REG_BLOCK_DISABLE_1				 (0x1<<0)
+#define HC_REG_AGG_INT_0					 0x108050
+#define HC_REG_ATTN_MSG0_ADDR_L					 0x108018
+#define HC_REG_ATTN_MSG1_ADDR_L					 0x108020
+#define HC_REG_COMMAND_REG					 0x108180
+#define HC_REG_CONFIG_0						 0x108000
+#define HC_REG_CONFIG_1						 0x108004
+/* [RW 3] Parity mask register #0 read/write */
+#define HC_REG_HC_PRTY_MASK					 0x1080a0
+/* [R 3] Parity register #0 read */
+#define HC_REG_HC_PRTY_STS					 0x108094
+/* [RC 3] Parity register #0 read clear */
+#define HC_REG_HC_PRTY_STS_CLR					 0x108098
+#define HC_REG_INT_MASK						 0x108108
+#define HC_REG_LEADING_EDGE_0					 0x108040
+#define HC_REG_MAIN_MEMORY					 0x108800
+#define HC_REG_MAIN_MEMORY_SIZE					 152
+#define HC_REG_TRAILING_EDGE_0					 0x108044
+#define IGU_BLOCK_CONFIGURATION_REG_BACKWARD_COMP_EN		 (0x1<<1)
+#define IGU_BLOCK_CONFIGURATION_REG_BLOCK_ENABLE		 (0x1<<0)
+/* [R 4] Debug: attn_fsm */
+#define IGU_REG_ATTN_FSM					 0x130054
+#define IGU_REG_ATTN_MSG_ADDR_H					 0x13011c
+#define IGU_REG_ATTN_MSG_ADDR_L					 0x130120
+/* [R 4] Debug: [3] - attention write done message is pending (0-no pending;
+ * 1-pending). [2:0] = PFID. Pending means attention message was sent; but
+ * write done didnt receive. */
+#define IGU_REG_ATTN_WRITE_DONE_PENDING				 0x130030
+#define IGU_REG_BLOCK_CONFIGURATION				 0x130000
+#define IGU_REG_COMMAND_REG_32LSB_DATA				 0x130124
+#define IGU_REG_COMMAND_REG_CTRL				 0x13012c
+/* [WB_R 32] Cleanup bit status per SB. 1 = cleanup is set. 0 = cleanup bit
+ * is clear. The bits in this registers are set and clear via the producer
+ * command. Data valid only in addresses 0-4. all the rest are zero. */
+#define IGU_REG_CSTORM_TYPE_0_SB_CLEANUP			 0x130200
+/* [R 5] Debug: ctrl_fsm */
+#define IGU_REG_CTRL_FSM					 0x130064
+/* [R 1] data availble for error memory. If this bit is clear do not red
+ * from error_handling_memory. */
+#define IGU_REG_ERROR_HANDLING_DATA_VALID			 0x130130
+/* [RW 11] Parity mask register #0 read/write */
+#define IGU_REG_IGU_PRTY_MASK					 0x1300a8
+/* [R 11] Parity register #0 read */
+#define IGU_REG_IGU_PRTY_STS					 0x13009c
+/* [RC 11] Parity register #0 read clear */
+#define IGU_REG_IGU_PRTY_STS_CLR				 0x1300a0
+/* [R 4] Debug: int_handle_fsm */
+#define IGU_REG_INT_HANDLE_FSM					 0x130050
+#define IGU_REG_LEADING_EDGE_LATCH				 0x130134
+/* [RW 14] mapping CAM; relevant for E2 operating mode only. [0] - valid.
+ * [6:1] - vector number; [13:7] - FID (if VF - [13] = 0; [12:7] = VF
+ * number; if PF - [13] = 1; [12:10] = 0; [9:7] = PF number); */
+#define IGU_REG_MAPPING_MEMORY					 0x131000
+#define IGU_REG_MAPPING_MEMORY_SIZE				 136
+/* [WB 97] [63:0] - MSIX message address (bit [1:0] are always zero);
+ * [95:64] - MSIX message data; [96] - MSIX mask bit (0 - unmasked; 1 -
+ * masked).Reset value (after reset_memories was set) is MSIX address = 0;
+ * MSIX data = 0; MSIX mask bit=1 */
+#define IGU_REG_MSIX_MEMORY					 0x134000
+#define IGU_REG_MSIX_MEMORY_SIZE				 544
+#define IGU_REG_PBA_STATUS_LSB					 0x130138
+#define IGU_REG_PBA_STATUS_MSB					 0x13013c
+#define IGU_REG_PCI_PF_MSIX_EN					 0x130144
+#define IGU_REG_PCI_PF_MSIX_FUNC_MASK				 0x130148
+#define IGU_REG_PCI_PF_MSI_EN					 0x130140
+/* [WB_R 32] Each bit represent the pending bits status for that SB. 0 = no
+ * pending; 1 = pending. Pendings means interrupt was asserted; and write
+ * done was not received. Data valid only in addresses 0-4. all the rest are
+ * zero. */
+#define IGU_REG_PENDING_BITS_STATUS				 0x130300
+#define IGU_REG_PF_CONFIGURATION				 0x130154
+/* [RW 20] producers only. E2 mode: address 0-135 match to the mapping
+ * memory; 136 - PF0 default prod; 137 PF1 default prod; 138 - PF2 default
+ * prod; 139 PF3 default prod; 140 - PF0 - ATTN prod; 141 - PF1 - ATTN prod;
+ * 142 - PF2 - ATTN prod; 143 - PF3 - ATTN prod; 144-147 reserved. E1.5 mode
+ * - In backward compatible mode; for non default SB; each even line in the
+ * memory holds the U producer and each odd line hold the C producer. The
+ * first 128 producer are for NDSB (PF0 - 0-31; PF1 - 32-63 and so on). The
+ * last 20 producers are for the DSB for each PF. each PF has five segments
+ * (the order inside each segment is PF0; PF1; PF2; PF3) - 128-131 U prods;
+ * 132-135 C prods; 136-139 X prods; 140-143 T prods; 144-147 ATTN prods; */
+#define IGU_REG_PROD_CONS_MEMORY				 0x132000
+/* [R 3] Debug: pxp_arb_fsm */
+#define IGU_REG_PXP_ARB_FSM					 0x130068
+/* [RW 6] Write one for each bit will reset the appropriate memory. When the
+ * memory reset finished the appropriate bit will be clear. Bit 0 - mapping
+ * memory; Bit 1 - SB memory; Bit 2 - SB interrupt and mask register; Bit 3
+ * - MSIX memory; Bit 4 - PBA memory; Bit 5 - statistics; */
+#define IGU_REG_RESET_MEMORIES					 0x130158
+/* [R 4] Debug: sb_ctrl_fsm */
+#define IGU_REG_SB_CTRL_FSM					 0x13004c
+#define IGU_REG_SB_INT_BEFORE_MASK_LSB				 0x13015c
+#define IGU_REG_SB_INT_BEFORE_MASK_MSB				 0x130160
+#define IGU_REG_SB_MASK_LSB					 0x130164
+#define IGU_REG_SB_MASK_MSB					 0x130168
+/* [RW 16] Number of command that were dropped without causing an interrupt
+ * due to: read access for WO BAR address; or write access for RO BAR
+ * address or any access for reserved address or PCI function error is set
+ * and address is not MSIX; PBA or cleanup */
+#define IGU_REG_SILENT_DROP					 0x13016c
+/* [RW 10] Number of MSI/MSIX/ATTN messages sent for the function: 0-63 -
+ * number of MSIX messages per VF; 64-67 - number of MSI/MSIX messages per
+ * PF; 68-71 number of ATTN messages per PF */
+#define IGU_REG_STATISTIC_NUM_MESSAGE_SENT			 0x130800
+#define IGU_REG_TRAILING_EDGE_LATCH				 0x130104
+#define IGU_REG_VF_CONFIGURATION				 0x130170
+/* [WB_R 32] Each bit represent write done pending bits status for that SB
+ * (MSI/MSIX message was sent and write done was not received yet). 0 =
+ * clear; 1 = set. Data valid only in addresses 0-4. all the rest are zero. */
+#define IGU_REG_WRITE_DONE_PENDING				 0x130480
+#define MCP_A_REG_MCPR_SCRATCH					 0x3a0000
+#define MCP_REG_MCPR_CPU_PROGRAM_COUNTER			 0x8501c
+#define MCP_REG_MCPR_GP_INPUTS					 0x800c0
+#define MCP_REG_MCPR_GP_OENABLE					 0x800c8
+#define MCP_REG_MCPR_GP_OUTPUTS					 0x800c4
+#define MCP_REG_MCPR_IMC_COMMAND				 0x85900
+#define MCP_REG_MCPR_IMC_DATAREG0				 0x85920
+#define MCP_REG_MCPR_IMC_SLAVE_CONTROL				 0x85904
+#define MCP_REG_MCPR_NVM_ACCESS_ENABLE				 0x86424
+#define MCP_REG_MCPR_NVM_ADDR					 0x8640c
+#define MCP_REG_MCPR_NVM_CFG4					 0x8642c
+#define MCP_REG_MCPR_NVM_COMMAND				 0x86400
+#define MCP_REG_MCPR_NVM_READ					 0x86410
+#define MCP_REG_MCPR_NVM_SW_ARB					 0x86420
+#define MCP_REG_MCPR_NVM_WRITE					 0x86408
+#define MCP_REG_MCPR_SCRATCH					 0xa0000
+#define MISC_AEU_GENERAL_MASK_REG_AEU_NIG_CLOSE_MASK		 (0x1<<1)
+#define MISC_AEU_GENERAL_MASK_REG_AEU_PXP_CLOSE_MASK		 (0x1<<0)
+/* [R 32] read first 32 bit after inversion of function 0. mapped as
+ * follows: [0] NIG attention for function0; [1] NIG attention for
+ * function1; [2] GPIO1 mcp; [3] GPIO2 mcp; [4] GPIO3 mcp; [5] GPIO4 mcp;
+ * [6] GPIO1 function 1; [7] GPIO2 function 1; [8] GPIO3 function 1; [9]
+ * GPIO4 function 1; [10] PCIE glue/PXP VPD event function0; [11] PCIE
+ * glue/PXP VPD event function1; [12] PCIE glue/PXP Expansion ROM event0;
+ * [13] PCIE glue/PXP Expansion ROM event1; [14] SPIO4; [15] SPIO5; [16]
+ * MSI/X indication for mcp; [17] MSI/X indication for function 1; [18] BRB
+ * Parity error; [19] BRB Hw interrupt; [20] PRS Parity error; [21] PRS Hw
+ * interrupt; [22] SRC Parity error; [23] SRC Hw interrupt; [24] TSDM Parity
+ * error; [25] TSDM Hw interrupt; [26] TCM Parity error; [27] TCM Hw
+ * interrupt; [28] TSEMI Parity error; [29] TSEMI Hw interrupt; [30]
+ * PBClient Parity error; [31] PBClient Hw interrupt; */
+#define MISC_REG_AEU_AFTER_INVERT_1_FUNC_0			 0xa42c
+#define MISC_REG_AEU_AFTER_INVERT_1_FUNC_1			 0xa430
+/* [R 32] read first 32 bit after inversion of mcp. mapped as follows: [0]
+ * NIG attention for function0; [1] NIG attention for function1; [2] GPIO1
+ * mcp; [3] GPIO2 mcp; [4] GPIO3 mcp; [5] GPIO4 mcp; [6] GPIO1 function 1;
+ * [7] GPIO2 function 1; [8] GPIO3 function 1; [9] GPIO4 function 1; [10]
+ * PCIE glue/PXP VPD event function0; [11] PCIE glue/PXP VPD event
+ * function1; [12] PCIE glue/PXP Expansion ROM event0; [13] PCIE glue/PXP
+ * Expansion ROM event1; [14] SPIO4; [15] SPIO5; [16] MSI/X indication for
+ * mcp; [17] MSI/X indication for function 1; [18] BRB Parity error; [19]
+ * BRB Hw interrupt; [20] PRS Parity error; [21] PRS Hw interrupt; [22] SRC
+ * Parity error; [23] SRC Hw interrupt; [24] TSDM Parity error; [25] TSDM Hw
+ * interrupt; [26] TCM Parity error; [27] TCM Hw interrupt; [28] TSEMI
+ * Parity error; [29] TSEMI Hw interrupt; [30] PBClient Parity error; [31]
+ * PBClient Hw interrupt; */
+#define MISC_REG_AEU_AFTER_INVERT_1_MCP				 0xa434
+/* [R 32] read second 32 bit after inversion of function 0. mapped as
+ * follows: [0] PBF Parity error; [1] PBF Hw interrupt; [2] QM Parity error;
+ * [3] QM Hw interrupt; [4] Timers Parity error; [5] Timers Hw interrupt;
+ * [6] XSDM Parity error; [7] XSDM Hw interrupt; [8] XCM Parity error; [9]
+ * XCM Hw interrupt; [10] XSEMI Parity error; [11] XSEMI Hw interrupt; [12]
+ * DoorbellQ Parity error; [13] DoorbellQ Hw interrupt; [14] NIG Parity
+ * error; [15] NIG Hw interrupt; [16] Vaux PCI core Parity error; [17] Vaux
+ * PCI core Hw interrupt; [18] Debug Parity error; [19] Debug Hw interrupt;
+ * [20] USDM Parity error; [21] USDM Hw interrupt; [22] UCM Parity error;
+ * [23] UCM Hw interrupt; [24] USEMI Parity error; [25] USEMI Hw interrupt;
+ * [26] UPB Parity error; [27] UPB Hw interrupt; [28] CSDM Parity error;
+ * [29] CSDM Hw interrupt; [30] CCM Parity error; [31] CCM Hw interrupt; */
+#define MISC_REG_AEU_AFTER_INVERT_2_FUNC_0			 0xa438
+#define MISC_REG_AEU_AFTER_INVERT_2_FUNC_1			 0xa43c
+/* [R 32] read second 32 bit after inversion of mcp. mapped as follows: [0]
+ * PBF Parity error; [1] PBF Hw interrupt; [2] QM Parity error; [3] QM Hw
+ * interrupt; [4] Timers Parity error; [5] Timers Hw interrupt; [6] XSDM
+ * Parity error; [7] XSDM Hw interrupt; [8] XCM Parity error; [9] XCM Hw
+ * interrupt; [10] XSEMI Parity error; [11] XSEMI Hw interrupt; [12]
+ * DoorbellQ Parity error; [13] DoorbellQ Hw interrupt; [14] NIG Parity
+ * error; [15] NIG Hw interrupt; [16] Vaux PCI core Parity error; [17] Vaux
+ * PCI core Hw interrupt; [18] Debug Parity error; [19] Debug Hw interrupt;
+ * [20] USDM Parity error; [21] USDM Hw interrupt; [22] UCM Parity error;
+ * [23] UCM Hw interrupt; [24] USEMI Parity error; [25] USEMI Hw interrupt;
+ * [26] UPB Parity error; [27] UPB Hw interrupt; [28] CSDM Parity error;
+ * [29] CSDM Hw interrupt; [30] CCM Parity error; [31] CCM Hw interrupt; */
+#define MISC_REG_AEU_AFTER_INVERT_2_MCP				 0xa440
+/* [R 32] read third 32 bit after inversion of function 0. mapped as
+ * follows: [0] CSEMI Parity error; [1] CSEMI Hw interrupt; [2] PXP Parity
+ * error; [3] PXP Hw interrupt; [4] PXPpciClockClient Parity error; [5]
+ * PXPpciClockClient Hw interrupt; [6] CFC Parity error; [7] CFC Hw
+ * interrupt; [8] CDU Parity error; [9] CDU Hw interrupt; [10] DMAE Parity
+ * error; [11] DMAE Hw interrupt; [12] IGU (HC) Parity error; [13] IGU (HC)
+ * Hw interrupt; [14] MISC Parity error; [15] MISC Hw interrupt; [16]
+ * pxp_misc_mps_attn; [17] Flash event; [18] SMB event; [19] MCP attn0; [20]
+ * MCP attn1; [21] SW timers attn_1 func0; [22] SW timers attn_2 func0; [23]
+ * SW timers attn_3 func0; [24] SW timers attn_4 func0; [25] PERST; [26] SW
+ * timers attn_1 func1; [27] SW timers attn_2 func1; [28] SW timers attn_3
+ * func1; [29] SW timers attn_4 func1; [30] General attn0; [31] General
+ * attn1; */
+#define MISC_REG_AEU_AFTER_INVERT_3_FUNC_0			 0xa444
+#define MISC_REG_AEU_AFTER_INVERT_3_FUNC_1			 0xa448
+/* [R 32] read third 32 bit after inversion of mcp. mapped as follows: [0]
+ * CSEMI Parity error; [1] CSEMI Hw interrupt; [2] PXP Parity error; [3] PXP
+ * Hw interrupt; [4] PXPpciClockClient Parity error; [5] PXPpciClockClient
+ * Hw interrupt; [6] CFC Parity error; [7] CFC Hw interrupt; [8] CDU Parity
+ * error; [9] CDU Hw interrupt; [10] DMAE Parity error; [11] DMAE Hw
+ * interrupt; [12] IGU (HC) Parity error; [13] IGU (HC) Hw interrupt; [14]
+ * MISC Parity error; [15] MISC Hw interrupt; [16] pxp_misc_mps_attn; [17]
+ * Flash event; [18] SMB event; [19] MCP attn0; [20] MCP attn1; [21] SW
+ * timers attn_1 func0; [22] SW timers attn_2 func0; [23] SW timers attn_3
+ * func0; [24] SW timers attn_4 func0; [25] PERST; [26] SW timers attn_1
+ * func1; [27] SW timers attn_2 func1; [28] SW timers attn_3 func1; [29] SW
+ * timers attn_4 func1; [30] General attn0; [31] General attn1; */
+#define MISC_REG_AEU_AFTER_INVERT_3_MCP				 0xa44c
+/* [R 32] read fourth 32 bit after inversion of function 0. mapped as
+ * follows: [0] General attn2; [1] General attn3; [2] General attn4; [3]
+ * General attn5; [4] General attn6; [5] General attn7; [6] General attn8;
+ * [7] General attn9; [8] General attn10; [9] General attn11; [10] General
+ * attn12; [11] General attn13; [12] General attn14; [13] General attn15;
+ * [14] General attn16; [15] General attn17; [16] General attn18; [17]
+ * General attn19; [18] General attn20; [19] General attn21; [20] Main power
+ * interrupt; [21] RBCR Latched attn; [22] RBCT Latched attn; [23] RBCN
+ * Latched attn; [24] RBCU Latched attn; [25] RBCP Latched attn; [26] GRC
+ * Latched timeout attention; [27] GRC Latched reserved access attention;
+ * [28] MCP Latched rom_parity; [29] MCP Latched ump_rx_parity; [30] MCP
+ * Latched ump_tx_parity; [31] MCP Latched scpad_parity; */
+#define MISC_REG_AEU_AFTER_INVERT_4_FUNC_0			 0xa450
+#define MISC_REG_AEU_AFTER_INVERT_4_FUNC_1			 0xa454
+/* [R 32] read fourth 32 bit after inversion of mcp. mapped as follows: [0]
+ * General attn2; [1] General attn3; [2] General attn4; [3] General attn5;
+ * [4] General attn6; [5] General attn7; [6] General attn8; [7] General
+ * attn9; [8] General attn10; [9] General attn11; [10] General attn12; [11]
+ * General attn13; [12] General attn14; [13] General attn15; [14] General
+ * attn16; [15] General attn17; [16] General attn18; [17] General attn19;
+ * [18] General attn20; [19] General attn21; [20] Main power interrupt; [21]
+ * RBCR Latched attn; [22] RBCT Latched attn; [23] RBCN Latched attn; [24]
+ * RBCU Latched attn; [25] RBCP Latched attn; [26] GRC Latched timeout
+ * attention; [27] GRC Latched reserved access attention; [28] MCP Latched
+ * rom_parity; [29] MCP Latched ump_rx_parity; [30] MCP Latched
+ * ump_tx_parity; [31] MCP Latched scpad_parity; */
+#define MISC_REG_AEU_AFTER_INVERT_4_MCP				 0xa458
+/* [R 32] Read fifth 32 bit after inversion of function 0. Mapped as
+ * follows: [0] PGLUE config_space; [1] PGLUE misc_flr; [2] PGLUE B RBC
+ * attention [3] PGLUE B RBC parity; [4] ATC attention; [5] ATC parity; [6]
+ * mstat0 attention; [7] mstat0 parity; [8] mstat1 attention; [9] mstat1
+ * parity; [31-10] Reserved; */
+#define MISC_REG_AEU_AFTER_INVERT_5_FUNC_0			 0xa700
+/* [W 14] write to this register results with the clear of the latched
+ * signals; one in d0 clears RBCR latch; one in d1 clears RBCT latch; one in
+ * d2 clears RBCN latch; one in d3 clears RBCU latch; one in d4 clears RBCP
+ * latch; one in d5 clears GRC Latched timeout attention; one in d6 clears
+ * GRC Latched reserved access attention; one in d7 clears Latched
+ * rom_parity; one in d8 clears Latched ump_rx_parity; one in d9 clears
+ * Latched ump_tx_parity; one in d10 clears Latched scpad_parity (both
+ * ports); one in d11 clears pxpv_misc_mps_attn; one in d12 clears
+ * pxp_misc_exp_rom_attn0; one in d13 clears pxp_misc_exp_rom_attn1; read
+ * from this register return zero */
+#define MISC_REG_AEU_CLR_LATCH_SIGNAL				 0xa45c
+/* [RW 32] first 32b for enabling the output for function 0 output0. mapped
+ * as follows: [0] NIG attention for function0; [1] NIG attention for
+ * function1; [2] GPIO1 function 0; [3] GPIO2 function 0; [4] GPIO3 function
+ * 0; [5] GPIO4 function 0; [6] GPIO1 function 1; [7] GPIO2 function 1; [8]
+ * GPIO3 function 1; [9] GPIO4 function 1; [10] PCIE glue/PXP VPD event
+ * function0; [11] PCIE glue/PXP VPD event function1; [12] PCIE glue/PXP
+ * Expansion ROM event0; [13] PCIE glue/PXP Expansion ROM event1; [14]
+ * SPIO4; [15] SPIO5; [16] MSI/X indication for function 0; [17] MSI/X
+ * indication for function 1; [18] BRB Parity error; [19] BRB Hw interrupt;
+ * [20] PRS Parity error; [21] PRS Hw interrupt; [22] SRC Parity error; [23]
+ * SRC Hw interrupt; [24] TSDM Parity error; [25] TSDM Hw interrupt; [26]
+ * TCM Parity error; [27] TCM Hw interrupt; [28] TSEMI Parity error; [29]
+ * TSEMI Hw interrupt; [30] PBClient Parity error; [31] PBClient Hw
+ * interrupt; */
+#define MISC_REG_AEU_ENABLE1_FUNC_0_OUT_0			 0xa06c
+#define MISC_REG_AEU_ENABLE1_FUNC_0_OUT_1			 0xa07c
+#define MISC_REG_AEU_ENABLE1_FUNC_0_OUT_2			 0xa08c
+/* [RW 32] first 32b for enabling the output for function 1 output0. mapped
+ * as follows: [0] NIG attention for function0; [1] NIG attention for
+ * function1; [2] GPIO1 function 1; [3] GPIO2 function 1; [4] GPIO3 function
+ * 1; [5] GPIO4 function 1; [6] GPIO1 function 1; [7] GPIO2 function 1; [8]
+ * GPIO3 function 1; [9] GPIO4 function 1; [10] PCIE glue/PXP VPD event
+ * function0; [11] PCIE glue/PXP VPD event function1; [12] PCIE glue/PXP
+ * Expansion ROM event0; [13] PCIE glue/PXP Expansion ROM event1; [14]
+ * SPIO4; [15] SPIO5; [16] MSI/X indication for function 1; [17] MSI/X
+ * indication for function 1; [18] BRB Parity error; [19] BRB Hw interrupt;
+ * [20] PRS Parity error; [21] PRS Hw interrupt; [22] SRC Parity error; [23]
+ * SRC Hw interrupt; [24] TSDM Parity error; [25] TSDM Hw interrupt; [26]
+ * TCM Parity error; [27] TCM Hw interrupt; [28] TSEMI Parity error; [29]
+ * TSEMI Hw interrupt; [30] PBClient Parity error; [31] PBClient Hw
+ * interrupt; */
+#define MISC_REG_AEU_ENABLE1_FUNC_1_OUT_0			 0xa10c
+#define MISC_REG_AEU_ENABLE1_FUNC_1_OUT_1			 0xa11c
+#define MISC_REG_AEU_ENABLE1_FUNC_1_OUT_2			 0xa12c
+/* [RW 32] fourth 32b for enabling the output for function 0 output0.mapped
+ * as follows: [0] General attn2; [1] General attn3; [2] General attn4; [3]
+ * General attn5; [4] General attn6; [5] General attn7; [6] General attn8;
+ * [7] General attn9; [8] General attn10; [9] General attn11; [10] General
+ * attn12; [11] General attn13; [12] General attn14; [13] General attn15;
+ * [14] General attn16; [15] General attn17; [16] General attn18; [17]
+ * General attn19; [18] General attn20; [19] General attn21; [20] Main power
+ * interrupt; [21] RBCR Latched attn; [22] RBCT Latched attn; [23] RBCN
+ * Latched attn; [24] RBCU Latched attn; [25] RBCP Latched attn; [26] GRC
+ * Latched timeout attention; [27] GRC Latched reserved access attention;
+ * [28] MCP Latched rom_parity; [29] MCP Latched ump_rx_parity; [30] MCP
+ * Latched ump_tx_parity; [31] MCP Latched scpad_parity; */
+#define MISC_REG_AEU_ENABLE4_FUNC_0_OUT_0			 0xa078
+/* [RW 32] fourth 32b for enabling the output for function 1 output0.mapped
+ * as follows: [0] General attn2; [1] General attn3; [2] General attn4; [3]
+ * General attn5; [4] General attn6; [5] General attn7; [6] General attn8;
+ * [7] General attn9; [8] General attn10; [9] General attn11; [10] General
+ * attn12; [11] General attn13; [12] General attn14; [13] General attn15;
+ * [14] General attn16; [15] General attn17; [16] General attn18; [17]
+ * General attn19; [18] General attn20; [19] General attn21; [20] Main power
+ * interrupt; [21] RBCR Latched attn; [22] RBCT Latched attn; [23] RBCN
+ * Latched attn; [24] RBCU Latched attn; [25] RBCP Latched attn; [26] GRC
+ * Latched timeout attention; [27] GRC Latched reserved access attention;
+ * [28] MCP Latched rom_parity; [29] MCP Latched ump_rx_parity; [30] MCP
+ * Latched ump_tx_parity; [31] MCP Latched scpad_parity; */
+#define MISC_REG_AEU_ENABLE4_FUNC_1_OUT_0			 0xa118
+/* [RW 32] fourth 32b for enabling the output for close the gate nig. Mapped
+ * as follows: [0] General attn2; [1] General attn3; [2] General attn4; [3]
+ * General attn5; [4] General attn6; [5] General attn7; [6] General attn8;
+ * [7] General attn9; [8] General attn10; [9] General attn11; [10] General
+ * attn12; [11] General attn13; [12] General attn14; [13] General attn15;
+ * [14] General attn16; [15] General attn17; [16] General attn18; [17]
+ * General attn19; [18] General attn20; [19] General attn21; [20] Main power
+ * interrupt; [21] RBCR Latched attn; [22] RBCT Latched attn; [23] RBCN
+ * Latched attn; [24] RBCU Latched attn; [25] RBCP Latched attn; [26] GRC
+ * Latched timeout attention; [27] GRC Latched reserved access attention;
+ * [28] MCP Latched rom_parity; [29] MCP Latched ump_rx_parity; [30] MCP
+ * Latched ump_tx_parity; [31] MCP Latched scpad_parity; */
+#define MISC_REG_AEU_ENABLE4_NIG_0				 0xa0f8
+#define MISC_REG_AEU_ENABLE4_NIG_1				 0xa198
+/* [RW 32] fourth 32b for enabling the output for close the gate pxp. Mapped
+ * as follows: [0] General attn2; [1] General attn3; [2] General attn4; [3]
+ * General attn5; [4] General attn6; [5] General attn7; [6] General attn8;
+ * [7] General attn9; [8] General attn10; [9] General attn11; [10] General
+ * attn12; [11] General attn13; [12] General attn14; [13] General attn15;
+ * [14] General attn16; [15] General attn17; [16] General attn18; [17]
+ * General attn19; [18] General attn20; [19] General attn21; [20] Main power
+ * interrupt; [21] RBCR Latched attn; [22] RBCT Latched attn; [23] RBCN
+ * Latched attn; [24] RBCU Latched attn; [25] RBCP Latched attn; [26] GRC
+ * Latched timeout attention; [27] GRC Latched reserved access attention;
+ * [28] MCP Latched rom_parity; [29] MCP Latched ump_rx_parity; [30] MCP
+ * Latched ump_tx_parity; [31] MCP Latched scpad_parity; */
+#define MISC_REG_AEU_ENABLE4_PXP_0				 0xa108
+#define MISC_REG_AEU_ENABLE4_PXP_1				 0xa1a8
+/* [RW 32] fifth 32b for enabling the output for function 0 output0. Mapped
+ * as follows: [0] PGLUE config_space; [1] PGLUE misc_flr; [2] PGLUE B RBC
+ * attention [3] PGLUE B RBC parity; [4] ATC attention; [5] ATC parity; [6]
+ * mstat0 attention; [7] mstat0 parity; [8] mstat1 attention; [9] mstat1
+ * parity; [31-10] Reserved; */
+#define MISC_REG_AEU_ENABLE5_FUNC_0_OUT_0			 0xa688
+/* [RW 32] Fifth 32b for enabling the output for function 1 output0. Mapped
+ * as follows: [0] PGLUE config_space; [1] PGLUE misc_flr; [2] PGLUE B RBC
+ * attention [3] PGLUE B RBC parity; [4] ATC attention; [5] ATC parity; [6]
+ * mstat0 attention; [7] mstat0 parity; [8] mstat1 attention; [9] mstat1
+ * parity; [31-10] Reserved; */
+#define MISC_REG_AEU_ENABLE5_FUNC_1_OUT_0			 0xa6b0
+/* [RW 1] set/clr general attention 0; this will set/clr bit 94 in the aeu
+ * 128 bit vector */
+#define MISC_REG_AEU_GENERAL_ATTN_0				 0xa000
+#define MISC_REG_AEU_GENERAL_ATTN_1				 0xa004
+#define MISC_REG_AEU_GENERAL_ATTN_10				 0xa028
+#define MISC_REG_AEU_GENERAL_ATTN_11				 0xa02c
+#define MISC_REG_AEU_GENERAL_ATTN_12				 0xa030
+#define MISC_REG_AEU_GENERAL_ATTN_2				 0xa008
+#define MISC_REG_AEU_GENERAL_ATTN_3				 0xa00c
+#define MISC_REG_AEU_GENERAL_ATTN_4				 0xa010
+#define MISC_REG_AEU_GENERAL_ATTN_5				 0xa014
+#define MISC_REG_AEU_GENERAL_ATTN_6				 0xa018
+#define MISC_REG_AEU_GENERAL_ATTN_7				 0xa01c
+#define MISC_REG_AEU_GENERAL_ATTN_8				 0xa020
+#define MISC_REG_AEU_GENERAL_ATTN_9				 0xa024
+#define MISC_REG_AEU_GENERAL_MASK				 0xa61c
+/* [RW 10] [7:0] = mask 8 attention output signals toward IGU function0;
+ * [9:8] = reserved. 0 = mask; 1 = unmask */
+#define MISC_REG_AEU_MASK_ATTN_FUNC_0				 0xa060
+#define MISC_REG_AEU_MASK_ATTN_FUNC_1				 0xa064
+/* [RW 1] If set a system kill occurred. Reset on POR reset. */
+#define MISC_REG_AEU_SYS_KILL_OCCURRED				 0xa610
+/* [RW 32] Represent the status of the input vector to the AEU when a system
+ * kill occurred. The register is reset in por reset. Mapped as follows: [0]
+ * NIG attention for function0; [1] NIG attention for function1; [2] GPIO1
+ * mcp; [3] GPIO2 mcp; [4] GPIO3 mcp; [5] GPIO4 mcp; [6] GPIO1 function 1;
+ * [7] GPIO2 function 1; [8] GPIO3 function 1; [9] GPIO4 function 1; [10]
+ * PCIE glue/PXP VPD event function0; [11] PCIE glue/PXP VPD event
+ * function1; [12] PCIE glue/PXP Expansion ROM event0; [13] PCIE glue/PXP
+ * Expansion ROM event1; [14] SPIO4; [15] SPIO5; [16] MSI/X indication for
+ * mcp; [17] MSI/X indication for function 1; [18] BRB Parity error; [19]
+ * BRB Hw interrupt; [20] PRS Parity error; [21] PRS Hw interrupt; [22] SRC
+ * Parity error; [23] SRC Hw interrupt; [24] TSDM Parity error; [25] TSDM Hw
+ * interrupt; [26] TCM Parity error; [27] TCM Hw interrupt; [28] TSEMI
+ * Parity error; [29] TSEMI Hw interrupt; [30] PBClient Parity error; [31]
+ * PBClient Hw interrupt. Reset on POR reset. */
+#define MISC_REG_AEU_SYS_KILL_STATUS_0				 0xa600
+#define MISC_REG_AEU_SYS_KILL_STATUS_1				 0xa604
+#define MISC_REG_AEU_SYS_KILL_STATUS_2				 0xa608
+#define MISC_REG_AEU_SYS_KILL_STATUS_3				 0xa60c
+/* [R 32] This field indicates the type of the device. '0' - 2 Ports; '1' -
+ * 1 Port. Global register. */
+#define MISC_REG_BOND_ID					 0xa400
+/* [R 8] These bits indicate the metal revision of the chip. This value
+ * starts at 0x00 for each all-layer tape-out and increments by one for each
+ * tape-out. Global register. */
+#define MISC_REG_CHIP_METAL					 0xa404
+/* [R 16] These bits indicate the part number for the chip. Global register. */
+#define MISC_REG_CHIP_NUM					 0xa408
+/* [R 4] These bits indicate the base revision of the chip. This value
+ * starts at 0x0 for the A0 tape-out and increments by one for each
+ * all-layer tape-out. Global register. */
+#define MISC_REG_CHIP_REV					 0xa40c
+/* [RW 32] The following driver registers(1...16) represent 16 drivers and
+ * 32 clients. Each client can be controlled by one driver only. One in each
+ * bit represent that this driver control the appropriate client (Ex: bit 5
+ * is set means this driver control client number 5). addr1 = set; addr0 =
+ * clear; read from both addresses will give the same result = status. write
+ * to address 1 will set a request to control all the clients that their
+ * appropriate bit (in the write command) is set. if the client is free (the
+ * appropriate bit in all the other drivers is clear) one will be written to
+ * that driver register; if the client isn't free the bit will remain zero.
+ * if the appropriate bit is set (the driver request to gain control on a
+ * client it already controls the ~MISC_REGISTERS_INT_STS.GENERIC_SW
+ * interrupt will be asserted). write to address 0 will set a request to
+ * free all the clients that their appropriate bit (in the write command) is
+ * set. if the appropriate bit is clear (the driver request to free a client
+ * it doesn't controls the ~MISC_REGISTERS_INT_STS.GENERIC_SW interrupt will
+ * be asserted). */
+#define MISC_REG_DRIVER_CONTROL_1				 0xa510
+#define MISC_REG_DRIVER_CONTROL_7				 0xa3c8
+/* [R 1] Status of four port mode path swap input pin. */
+#define MISC_REG_FOUR_PORT_PATH_SWAP				 0xa75c
+/* [RW 2] 4 port path swap overwrite.[0] - Overwrite control; if it is 0 -
+ * the path_swap output is equal to 4 port mode path swap input pin; if it
+ * is 1 - the path_swap output is equal to bit[1] of this register; [1] -
+ * Overwrite value. If bit[0] of this register is 1 this is the value that
+ * receives the path_swap output. Reset on Hard reset. */
+#define MISC_REG_FOUR_PORT_PATH_SWAP_OVWR			 0xa738
+/* [R 1] Status of 4 port mode port swap input pin. */
+#define MISC_REG_FOUR_PORT_PORT_SWAP				 0xa754
+/* [RW 2] 4 port port swap overwrite.[0] - Overwrite control; if it is 0 -
+ * the port_swap output is equal to 4 port mode port swap input pin; if it
+ * is 1 - the port_swap output is equal to bit[1] of this register; [1] -
+ * Overwrite value. If bit[0] of this register is 1 this is the value that
+ * receives the port_swap output. Reset on Hard reset. */
+#define MISC_REG_FOUR_PORT_PORT_SWAP_OVWR			 0xa734
+/* [RW 32] Debug only: spare RW register reset by core reset. Global
+ * register. Reset on core reset. */
+#define MISC_REG_GENERIC_CR_0					 0xa460
+#define MISC_REG_GENERIC_CR_1					 0xa464
+/* [RW 32] Debug only: spare RW register reset by por reset. Global
+ * register. Reset on POR reset. */
+#define MISC_REG_GENERIC_POR_1					 0xa474
+/* [RW 32] Bit[0]: EPIO MODE SEL: Setting this bit to 1 will allow SW/FW to
+ * use all of the 32 Extended GPIO pins. Without setting this bit; an EPIO
+ * can not be configured as an output. Each output has its output enable in
+ * the MCP register space; but this bit needs to be set to make use of that.
+ * Bit[3:1] spare. Bit[4]: WCVTMON_PWRDN: Powerdown for Warpcore VTMON. When
+ * set to 1 - Powerdown. Bit[5]: WCVTMON_RESETB: Reset for Warpcore VTMON.
+ * When set to 0 - vTMON is in reset. Bit[6]: setting this bit will change
+ * the i/o to an output and will drive the TimeSync output. Bit[31:7]:
+ * spare. Global register. Reset by hard reset. */
+#define MISC_REG_GEN_PURP_HWG					 0xa9a0
+/* [RW 32] GPIO. [31-28] FLOAT port 0; [27-24] FLOAT port 0; When any of
+ * these bits is written as a '1'; the corresponding GPIO bit will turn off
+ * it's drivers and become an input. This is the reset state of all GPIO
+ * pins. The read value of these bits will be a '1' if that last command
+ * (#SET; #CLR; or #FLOAT) for this bit was a #FLOAT. (reset value 0xff).
+ * [23-20] CLR port 1; 19-16] CLR port 0; When any of these bits is written
+ * as a '1'; the corresponding GPIO bit will drive low. The read value of
+ * these bits will be a '1' if that last command (#SET; #CLR; or #FLOAT) for
+ * this bit was a #CLR. (reset value 0). [15-12] SET port 1; 11-8] port 0;
+ * SET When any of these bits is written as a '1'; the corresponding GPIO
+ * bit will drive high (if it has that capability). The read value of these
+ * bits will be a '1' if that last command (#SET; #CLR; or #FLOAT) for this
+ * bit was a #SET. (reset value 0). [7-4] VALUE port 1; [3-0] VALUE port 0;
+ * RO; These bits indicate the read value of each of the eight GPIO pins.
+ * This is the result value of the pin; not the drive value. Writing these
+ * bits will have not effect. Global register. */
+#define MISC_REG_GPIO						 0xa490
+/* [RW 8] These bits enable the GPIO_INTs to signals event to the
+ * IGU/MCP.according to the following map: [0] p0_gpio_0; [1] p0_gpio_1; [2]
+ * p0_gpio_2; [3] p0_gpio_3; [4] p1_gpio_0; [5] p1_gpio_1; [6] p1_gpio_2;
+ * [7] p1_gpio_3; Global register. */
+#define MISC_REG_GPIO_EVENT_EN					 0xa2bc
+/* [RW 32] GPIO INT. [31-28] OLD_CLR port1; [27-24] OLD_CLR port0; Writing a
+ * '1' to these bit clears the corresponding bit in the #OLD_VALUE register.
+ * This will acknowledge an interrupt on the falling edge of corresponding
+ * GPIO input (reset value 0). [23-16] OLD_SET [23-16] port1; OLD_SET port0;
+ * Writing a '1' to these bit sets the corresponding bit in the #OLD_VALUE
+ * register. This will acknowledge an interrupt on the rising edge of
+ * corresponding GPIO input (reset value 0). [15-12] OLD_VALUE [11-8] port1;
+ * OLD_VALUE port0; RO; These bits indicate the old value of the GPIO input
+ * value. When the ~INT_STATE bit is set; this bit indicates the OLD value
+ * of the pin such that if ~INT_STATE is set and this bit is '0'; then the
+ * interrupt is due to a low to high edge. If ~INT_STATE is set and this bit
+ * is '1'; then the interrupt is due to a high to low edge (reset value 0).
+ * [7-4] INT_STATE port1; [3-0] INT_STATE RO port0; These bits indicate the
+ * current GPIO interrupt state for each GPIO pin. This bit is cleared when
+ * the appropriate #OLD_SET or #OLD_CLR command bit is written. This bit is
+ * set when the GPIO input does not match the current value in #OLD_VALUE
+ * (reset value 0). Global register. */
+#define MISC_REG_GPIO_INT					 0xa494
+/* [R 28] this field hold the last information that caused reserved
+ * attention. bits [19:0] - address; [22:20] function; [23] reserved;
+ * [27:24] the master that caused the attention - according to the following
+ * encodeing:1 = pxp; 2 = mcp; 3 = usdm; 4 = tsdm; 5 = xsdm; 6 = csdm; 7 =
+ * dbu; 8 = dmae */
+#define MISC_REG_GRC_RSV_ATTN					 0xa3c0
+/* [R 28] this field hold the last information that caused timeout
+ * attention. bits [19:0] - address; [22:20] function; [23] reserved;
+ * [27:24] the master that caused the attention - according to the following
+ * encodeing:1 = pxp; 2 = mcp; 3 = usdm; 4 = tsdm; 5 = xsdm; 6 = csdm; 7 =
+ * dbu; 8 = dmae */
+#define MISC_REG_GRC_TIMEOUT_ATTN				 0xa3c4
+/* [R 10] Holds the last FID that caused timeout attention. Need to be used
+ * in conjunction with ~misc_registers_timeout_attn; where 3 bits of
+ * function (3 lsb) are also represented. Bit[2:0] - PFID; bit[3] - VFID
+ * valid; bit[9:4] - VFID. Global register. */
+#define MISC_REG_GRC_TIMEOUT_ATTN_FULL_FID			 0xa714
+/* [RW 1] LCPLL power down. Global register. Active High. Reset on POR
+ * reset. */
+#define MISC_REG_LCPLL_E40_PWRDWN				 0xaa74
+/* [RW 1] LCPLL VCO reset. Global register. Active Low Reset on POR reset. */
+#define MISC_REG_LCPLL_E40_RESETB_ANA				 0xaa78
+/* [RW 1] LCPLL post-divider reset. Global register. Active Low Reset on POR
+ * reset. */
+#define MISC_REG_LCPLL_E40_RESETB_DIG				 0xaa7c
+/* [RW 8] Interrupt mask register #0 read/write */
+#define MISC_REG_MISC_INT_MASK					 0xa388
+/* [RW 1] Parity mask register #0 read/write */
+#define MISC_REG_MISC_PRTY_MASK					 0xa398
+/* [R 1] Parity register #0 read */
+#define MISC_REG_MISC_PRTY_STS					 0xa38c
+/* [RC 1] Parity register #0 read clear */
+#define MISC_REG_MISC_PRTY_STS_CLR				 0xa390
+/* [R 1] If set indicate that the pcie_rst_b was asserted without perst
+ * assertion. Global register. */
+#define MISC_REG_PCIE_HOT_RESET					 0xa618
+/* [R 1] Status of 4 port mode enable input pin. */
+#define MISC_REG_PORT4MODE_EN					 0xa750
+/* [RW 2] 4 port mode enable overwrite.[0] - Overwrite control; if it is 0 -
+ * the port4mode_en output is equal to 4 port mode input pin; if it is 1 -
+ * the port4mode_en output is equal to bit[1] of this register; [1] -
+ * Overwrite value. If bit[0] of this register is 1 this is the value that
+ * receives the port4mode_en output. Reset on Hard reset. */
+#define MISC_REG_PORT4MODE_EN_OVWR				 0xa720
+/* [RW 32] reset reg#2; rite/read one = the specific block is out of reset;
+ * write/read zero = the specific block is in reset; addr 0-wr- the write
+ * value will be written to the register; addr 1-set - one will be written
+ * to all the bits that have the value of one in the data written (bits that
+ * have the value of zero will not be change) ; addr 2-clear - zero will be
+ * written to all the bits that have the value of one in the data written
+ * (bits that have the value of zero will not be change); addr 3-ignore;
+ * read ignore from all addr except addr 00; inside order of the bits is:
+ * [0] rst_bmac0; [1] rst_bmac1; [2] rst_emac0; [3] rst_emac1; [4]
+ * rst_grc(global register); [5] rst_mcp_n_reset_reg_hard_core (global
+ * register); [6] rst_mcp_n_hard_core_rst_b(global register); [7]
+ * rst_mcp_n_reset_cmn_cpu(global register); [8]
+ * rst_mcp_n_reset_cmn_core(global register); [9] rst_rbcn; [10] rst_dbg;
+ * [11] rst_misc_core(global register); [12] rst_dbue (UART)(global
+ * register); [13] Pci_resetmdio_n(global register); [14]
+ * rst_emac0_hard_core; [15] rst_emac1_hard_core; 16] rst_pxp_rq_rd_wr; 17]
+ * rst_atc; 18] rst_cnig; 19] rst_pglc (global register); [20] rst_umac0;
+ * [21] rst_umac1; [22] rst_xmac; [23] rst_xmac_soft; [24] rst_mstat0; [25]
+ * rst_mstat1; [31:26] reserved */
+#define MISC_REG_RESET_REG_2					 0xa590
+/* [RW 22] 22 bit GRC address where the scratch-pad of the MCP that is
+ * shared with the driver resides */
+#define MISC_REG_SHARED_MEM_ADDR				 0xa2b4
+/* [RW 32] SPIO. [31-24] FLOAT When any of these bits is written as a '1';
+ * the corresponding SPIO bit will turn off it's drivers and become an
+ * input. This is the reset state of all SPIO pins. The read value of these
+ * bits will be a '1' if that last command (#SET; #CL; or #FLOAT) for this
+ * bit was a #FLOAT. (reset value 0xff). [23-16] CLR When any of these bits
+ * is written as a '1'; the corresponding SPIO bit will drive low. The read
+ * value of these bits will be a '1' if that last command (#SET; #CLR; or
+ * #FLOAT) for this bit was a #CLR. (reset value 0). [15-8] SET When any of
+ * these bits is written as a '1'; the corresponding SPIO bit will drive
+ * high (if it has that capability). The read value of these bits will be a
+ * '1' if that last command (#SET; #CLR; or #FLOAT) for this bit was a #SET.
+ * (reset value 0). [7-0] VALUE RO; These bits indicate the read value of
+ * each of the eight SPIO pins. This is the result value of the pin; not the
+ * drive value. Writing these bits will have not effect. Each 8 bits field
+ * is divided as follows: [0] VAUX Enable; when pulsed low; enables supply
+ * from VAUX. (This is an output pin only; the FLOAT field is not applicable
+ * for this pin); [1] VAUX Disable; when pulsed low; disables supply form
+ * VAUX. (This is an output pin only; FLOAT field is not applicable for this
+ * pin); [2] SEL_VAUX_B - Control to power switching logic. Drive low to
+ * select VAUX supply. (This is an output pin only; it is not controlled by
+ * the SET and CLR fields; it is controlled by the Main Power SM; the FLOAT
+ * field is not applicable for this pin; only the VALUE fields is relevant -
+ * it reflects the output value); [3] port swap [4] spio_4; [5] spio_5; [6]
+ * Bit 0 of UMP device ID select; read by UMP firmware; [7] Bit 1 of UMP
+ * device ID select; read by UMP firmware. Global register. */
+#define MISC_REG_SPIO						 0xa4fc
+/* [RW 8] These bits enable the SPIO_INTs to signals event to the IGU/MC.
+ * according to the following map: [3:0] reserved; [4] spio_4 [5] spio_5;
+ * [7:6] reserved. Global register. */
+#define MISC_REG_SPIO_EVENT_EN					 0xa2b8
+/* [RW 32] SPIO INT. [31-24] OLD_CLR Writing a '1' to these bit clears the
+ * corresponding bit in the #OLD_VALUE register. This will acknowledge an
+ * interrupt on the falling edge of corresponding SPIO input (reset value
+ * 0). [23-16] OLD_SET Writing a '1' to these bit sets the corresponding bit
+ * in the #OLD_VALUE register. This will acknowledge an interrupt on the
+ * rising edge of corresponding SPIO input (reset value 0). [15-8] OLD_VALUE
+ * RO; These bits indicate the old value of the SPIO input value. When the
+ * ~INT_STATE bit is set; this bit indicates the OLD value of the pin such
+ * that if ~INT_STATE is set and this bit is '0'; then the interrupt is due
+ * to a low to high edge. If ~INT_STATE is set and this bit is '1'; then the
+ * interrupt is due to a high to low edge (reset value 0). [7-0] INT_STATE
+ * RO; These bits indicate the current SPIO interrupt state for each SPIO
+ * pin. This bit is cleared when the appropriate #OLD_SET or #OLD_CLR
+ * command bit is written. This bit is set when the SPIO input does not
+ * match the current value in #OLD_VALUE (reset value 0). Global register. */
+#define MISC_REG_SPIO_INT					 0xa500
+/* [RW 32] reload value for counter 4 if reload; the value will be reload if
+ * the counter reached zero and the reload bit
+ * (~misc_registers_sw_timer_cfg_4.sw_timer_cfg_4[1]) is set */
+#define MISC_REG_SW_TIMER_RELOAD_VAL_4				 0xa2fc
+/* [RW 32] the value of the counter for sw timers1-8. there are 8 addresses
+ * in this register. addres 0 - timer 1; address 1 - timer 2; etc ; address
+ * 7 - timer 8 */
+#define MISC_REG_SW_TIMER_VAL					 0xa5c0
+/* [R 1] Status of two port mode path swap input pin. */
+#define MISC_REG_TWO_PORT_PATH_SWAP				 0xa758
+/* [RW 2] 2 port swap overwrite.[0] - Overwrite control; if it is 0 - the
+ * path_swap output is equal to 2 port mode path swap input pin; if it is 1
+ * - the path_swap output is equal to bit[1] of this register; [1] -
+ * Overwrite value. If bit[0] of this register is 1 this is the value that
+ * receives the path_swap output. Reset on Hard reset. */
+#define MISC_REG_TWO_PORT_PATH_SWAP_OVWR			 0xa72c
+/* [RW 1] Set by the MCP to remember if one or more of the drivers is/are
+ * loaded; 0-prepare; -unprepare. Global register. Reset on hard reset. */
+#define MISC_REG_UNPREPARED					 0xa424
+/* [RW 5] MDIO PHY Address. The WC uses this address to determine whether or
+ * not it is the recipient of the message on the MDIO interface. The value
+ * is compared to the value on ctrl_md_devad. Drives output
+ * misc_xgxs0_phy_addr. Global register. */
+#define MISC_REG_WC0_CTRL_PHY_ADDR				 0xa9cc
+/* [RW 10] reset reg#3; rite/read one = the specific block is out of reset;
+ * write/read zero = the specific block is in reset; addr 0-wr- the write
+ * value will be written to the register; addr 1-set - one will be written
+ * to all the bits that have the value of one in the data written (bits that
+ * have the value of zero will not be change) ; addr 2-clear - zero will be
+ * written to all the bits that have the value of one in the data written
+ * (bits that have the value of zero will not be change); addr 3-ignore;
+ * read ignore from all addr except addr 00. [0]: rstb_hw: Active low reset
+ * which when asserted drives entire WC into the reset state. All flops
+ * which within WC are driven into an initial state; as well as the analog
+ * core. Output clocks txck_out; rxck0_10g; and clk_25 will be driven to 0
+ * upon its assertion. [1]: iddq. Enables iddq testing where the supply
+ * current (Idd) is measured in the quiescent state. [2]: pwrdwn: Active
+ * high control which forces the analog core of the WC into power-down mode;
+ * and forces digital logic of the WC into reset. Output clock (refclk)
+ * remains active. [3]: pwrdwn_sd: Power down signal detect. [4]:
+ * txd10g_fifo_rstb: Transmit 10Gbps FIFO reset; active low. Used to reset
+ * the transmit FIFO used in xlgmii operation. [8:5]: txd1g_fifo_rstb:
+ * Transmit 1Gbps FIFO reset; active low. Used to reset the per-lane
+ * transmit FIFOs used in the mii/gmii operation. [9]:
+ * txd10g_fifo_rstb_dxgxs1: Transmit 10Gbps DXGXS FIFO reset; active low.
+ * Used to reset the transmit FIFO used in the DXGXS logic in xlgmii
+ * operation. Global register. */
+#define MISC_REG_WC0_RESET					 0xac30
+/* [RW 2] XMAC Core port mode. Indicates the number of ports on the system
+ * side. This should be less than or equal to phy_port_mode; if some of the
+ * ports are not used. This enables reduction of frequency on the core side.
+ * This is a strap input for the XMAC_MP core. 00 - Single Port Mode; 01 -
+ * Dual Port Mode; 10 - Tri Port Mode; 11 - Quad Port Mode. This is a strap
+ * input for the XMAC_MP core; and should be changed only while reset is
+ * held low. Reset on Hard reset. */
+#define MISC_REG_XMAC_CORE_PORT_MODE				 0xa964
+/* [RW 2] XMAC PHY port mode. Indicates the number of ports on the Warp
+ * Core. This is a strap input for the XMAC_MP core. 00 - Single Port Mode;
+ * 01 - Dual Port Mode; 1x - Quad Port Mode; This is a strap input for the
+ * XMAC_MP core; and should be changed only while reset is held low. Reset
+ * on Hard reset. */
+#define MISC_REG_XMAC_PHY_PORT_MODE				 0xa960
+/* [RW 32] 1 [47] Packet Size = 64 Write to this register write bits 31:0.
+ * Reads from this register will clear bits 31:0. */
+#define MSTAT_REG_RX_STAT_GR64_LO				 0x200
+/* [RW 32] 1 [00] Tx Good Packet Count Write to this register write bits
+ * 31:0. Reads from this register will clear bits 31:0. */
+#define MSTAT_REG_TX_STAT_GTXPOK_LO				 0
+#define NIG_LLH0_XCM_MASK_REG_LLH0_XCM_MASK_BCN			 (0x1<<0)
+#define NIG_LLH1_XCM_MASK_REG_LLH1_XCM_MASK_BCN			 (0x1<<0)
+#define NIG_MASK_INTERRUPT_PORT0_REG_MASK_EMAC0_MISC_MI_INT	 (0x1<<0)
+#define NIG_MASK_INTERRUPT_PORT0_REG_MASK_SERDES0_LINK_STATUS	 (0x1<<9)
+#define NIG_MASK_INTERRUPT_PORT0_REG_MASK_XGXS0_LINK10G		 (0x1<<15)
+#define NIG_MASK_INTERRUPT_PORT0_REG_MASK_XGXS0_LINK_STATUS	 (0xf<<18)
+/* [R 1] Input enable for RX_BMAC0 IF */
+#define NIG_REG_BMAC0_IN_EN					 0x100ac
+/* [R 1] output enable for TX_BMAC0 IF */
+#define NIG_REG_BMAC0_OUT_EN					 0x100e0
+/* [R 1] output enable for TX BMAC pause port 0 IF */
+#define NIG_REG_BMAC0_PAUSE_OUT_EN				 0x10110
+/* [R 1] output enable for RX_BMAC0_REGS IF */
+#define NIG_REG_BMAC0_REGS_OUT_EN				 0x100e8
+/* [RW 1] output enable for RX BRB1 port0 IF */
+#define NIG_REG_BRB0_OUT_EN					 0x100f8
+/* [RW 1] Input enable for TX BRB1 pause port 0 IF */
+#define NIG_REG_BRB0_PAUSE_IN_EN				 0x100c4
+/* [RW 1] Input enable for TX BRB1 pause port 1 IF */
+#define NIG_REG_BRB1_PAUSE_IN_EN				 0x100c8
+/* [WB_W 90] Debug packet to LP from RBC; Data spelling:[63:0] data; 64]
+ * error; [67:65]eop_bvalid; [68]eop; [69]sop; [70]port_id; 71]flush;
+ * 72:73]-vnic_num; 89:74]-sideband_info */
+#define NIG_REG_DEBUG_PACKET_LB					 0x10800
+/* [R 1] FIFO empty in DEBUG_FIFO in NIG_TX_DBG */
+#define NIG_REG_EGRESS_DEBUG_FIFO_EMPTY				 0x10418
+/* [R 1] FIFO empty in DELAY_PBF_FIFO in NIG_RX_PORT0 */
+#define NIG_REG_EGRESS_DELAY0_EMPTY				 0x10420
+/* [R 1] FIFO empty in DELAY_PBF_FIFO in NIG_RX_PORT1 */
+#define NIG_REG_EGRESS_DELAY1_EMPTY				 0x10428
+/* [R 1] PBF FIFO empty flag. */
+#define NIG_REG_EGRESS_DELAY2_EMPTY				 0x1862c
+/* [R 1] PBF FIFO empty flag. */
+#define NIG_REG_EGRESS_DELAY3_EMPTY				 0x18630
+/* [R 1] PBF FIFO empty flag. */
+#define NIG_REG_EGRESS_DELAY4_EMPTY				 0x18634
+/* [R 1] PBF FIFO empty flag. */
+#define NIG_REG_EGRESS_DELAY5_EMPTY				 0x18638
+/* [RW 1] If 1 - egress drain mode for port0 is active. In this mode all
+ * packets from PBFare not forwarded to the MAC and just deleted from FIFO.
+ * First packet may be deleted from the middle. And last packet will be
+ * always deleted till the end. */
+#define NIG_REG_EGRESS_DRAIN0_MODE				 0x10060
+/* [R 1] Output enable to EMAC0 */
+#define NIG_REG_EGRESS_EMAC0_OUT_EN				 0x10120
+/* [RW 1] MAC configuration for packets of port0. If 1 - all packet outputs
+ * to emac for port0; other way to bmac for port0 */
+#define NIG_REG_EGRESS_EMAC0_PORT				 0x10058
+/* [R 1] FIFO empty in MNG_FIFO in NIG_TX_PORT0 */
+#define NIG_REG_EGRESS_MNG0_FIFO_EMPTY				 0x10460
+/* [R 1] FIFO empty in MNG_FIFO in NIG_TX_PORT1 */
+#define NIG_REG_EGRESS_MNG1_FIFO_EMPTY				 0x10474
+/* [RW 1] Input enable for TX UMP management packet port0 IF */
+#define NIG_REG_EGRESS_UMP0_IN_EN				 0x100d4
+/* [R 1] Input enable for RX_EMAC0 IF */
+#define NIG_REG_EMAC0_IN_EN					 0x100a4
+/* [R 1] output enable for TX EMAC pause port 0 IF */
+#define NIG_REG_EMAC0_PAUSE_OUT_EN				 0x10118
+/* [R 1] status from emac0. This bit is set when MDINT from either the
+ * EXT_MDINT pin or from the Copper PHY is driven low. This condition must
+ * be cleared in the attached PHY device that is driving the MINT pin. */
+#define NIG_REG_EMAC0_STATUS_MISC_MI_INT			 0x10494
+/* [R 48] This address space contains BMAC0 registers. The BMAC registers
+ * are described in appendix A. In order to access the BMAC0 registers; the
+ * base address; NIG_REGISTERS_INGRESS_BMAC0_MEM; Offset: 0x10c00; should be
+ * added to each BMAC register offset */
+#define NIG_REG_INGRESS_BMAC0_MEM				 0x10c00
+/* [R 48] This address space contains BMAC1 registers. The BMAC registers
+ * are described in appendix A. In order to access the BMAC0 registers; the
+ * base address; NIG_REGISTERS_INGRESS_BMAC1_MEM; Offset: 0x11000; should be
+ * added to each BMAC register offset */
+#define NIG_REG_INGRESS_BMAC1_MEM				 0x11000
+/* [R 1] FIFO empty in EOP descriptor FIFO of LP in NIG_RX_EOP */
+#define NIG_REG_INGRESS_EOP_LB_EMPTY				 0x104e0
+/* [RW 17] Debug only. RX_EOP_DSCR_lb_FIFO in NIG_RX_EOP. Data
+ * packet_length[13:0]; mac_error[14]; trunc_error[15]; parity[16] */
+#define NIG_REG_INGRESS_EOP_LB_FIFO				 0x104e4
+/* [R 1] FIFO empty in EOP descriptor FIFO of port 0 in NIG_RX_EOP */
+#define NIG_REG_INGRESS_EOP_PORT0_EMPTY				 0x104ec
+/* [R 1] FIFO empty in EOP descriptor FIFO of port 1 in NIG_RX_EOP */
+#define NIG_REG_INGRESS_EOP_PORT1_EMPTY				 0x104f8
+/* [R 1] FIFO empty in PBF_DELAY_lb_FIFO in NIG_RX_lb */
+#define NIG_REG_INGRESS_LB_PBF_DELAY_EMPTY			 0x10508
+/* [R 1] FIFO empty in dscr_fifo in NIG_RX_RMP block */
+#define NIG_REG_INGRESS_RMP0_DSCR_EMPTY				 0x10530
+/* [R 1] FIFO empty in dscr_fifo in NIG_RX_RMP block */
+#define NIG_REG_INGRESS_RMP1_DSCR_EMPTY				 0x10538
+/* [RW 27] 0 - must be active for Everest A0; 1- for Everest B0 when latch
+ * logic for interrupts must be used. Enable per bit of interrupt of
+ * ~latch_status.latch_status */
+#define NIG_REG_LATCH_BC_0					 0x16210
+/* [RW 27] Latch for each interrupt from Unicore.b[0]
+ * status_emac0_misc_mi_int; b[1] status_emac0_misc_mi_complete;
+ * b[2]status_emac0_misc_cfg_change; b[3]status_emac0_misc_link_status;
+ * b[4]status_emac0_misc_link_change; b[5]status_emac0_misc_attn;
+ * b[6]status_serdes0_mac_crs; b[7]status_serdes0_autoneg_complete;
+ * b[8]status_serdes0_fiber_rxact; b[9]status_serdes0_link_status;
+ * b[10]status_serdes0_mr_page_rx; b[11]status_serdes0_cl73_an_complete;
+ * b[12]status_serdes0_cl73_mr_page_rx; b[13]status_serdes0_rx_sigdet;
+ * b[14]status_xgxs0_remotemdioreq; b[15]status_xgxs0_link10g;
+ * b[16]status_xgxs0_autoneg_complete; b[17]status_xgxs0_fiber_rxact;
+ * b[21:18]status_xgxs0_link_status; b[22]status_xgxs0_mr_page_rx;
+ * b[23]status_xgxs0_cl73_an_complete; b[24]status_xgxs0_cl73_mr_page_rx;
+ * b[25]status_xgxs0_rx_sigdet; b[26]status_xgxs0_mac_crs */
+#define NIG_REG_LATCH_STATUS_0					 0x18000
+/* [RW 1] led 10g for port 0 */
+#define NIG_REG_LED_10G_P0					 0x10320
+/* [RW 1] Port0: This bit is set to enable the use of the
+ * ~nig_registers_led_control_blink_rate_p0.led_control_blink_rate_p0 field
+ * defined below. If this bit is cleared; then the blink rate will be about
+ * 8Hz. */
+#define NIG_REG_LED_CONTROL_BLINK_RATE_ENA_P0			 0x10318
+/* [RW 12] Port0: Specifies the period of each blink cycle (on + off) for
+ * Traffic LED in milliseconds. Must be a non-zero value. This 12-bit field
+ * is reset to 0x080; giving a default blink period of approximately 8Hz. */
+#define NIG_REG_LED_CONTROL_BLINK_RATE_P0			 0x10310
+/* [RW 1] Port0: If set along with the
+	* \
+	s_led_control_override_traffic_p0.led_control_override_traffic_p0
+ * bit and ~nig_registers_led_control_traffic_p0.led_control_traffic_p0 LED
+ * bit; the Traffic LED will blink with the blink rate specified in
+ * ~nig_registers_led_control_blink_rate_p0.led_control_blink_rate_p0 and
+ * ~nig_registers_led_control_blink_rate_ena_p0.led_control_blink_rate_ena_p0
+ * fields. */
+#define NIG_REG_LED_CONTROL_BLINK_TRAFFIC_P0			 0x10308
+/* [RW 1] Port0: If set overrides hardware control of the Traffic LED. The
+ * Traffic LED will then be controlled via bit ~nig_registers_
+ * led_control_traffic_p0.led_control_traffic_p0 and bit
+ * ~nig_registers_led_control_blink_traffic_p0.led_control_blink_traffic_p0 */
+#define NIG_REG_LED_CONTROL_OVERRIDE_TRAFFIC_P0			 0x102f8
+/* [RW 1] Port0: If set along with the led_control_override_trafic_p0 bit;
+ * turns on the Traffic LED. If the led_control_blink_traffic_p0 bit is also
+ * set; the LED will blink with blink rate specified in
+ * ~nig_registers_led_control_blink_rate_p0.led_control_blink_rate_p0 and
+ * ~nig_regsters_led_control_blink_rate_ena_p0.led_control_blink_rate_ena_p0
+ * fields. */
+#define NIG_REG_LED_CONTROL_TRAFFIC_P0				 0x10300
+/* [RW 4] led mode for port0: 0 MAC; 1-3 PHY1; 4 MAC2; 5-7 PHY4; 8-MAC3;
+ * 9-11PHY7; 12 MAC4; 13-15 PHY10; */
+#define NIG_REG_LED_MODE_P0					 0x102f0
+/* [RW 3] for port0 enable for llfc ppp and pause. b0 - brb1 enable; b1-
+ * tsdm enable; b2- usdm enable */
+#define NIG_REG_LLFC_EGRESS_SRC_ENABLE_0			 0x16070
+#define NIG_REG_LLFC_EGRESS_SRC_ENABLE_1			 0x16074
+/* [RW 1] SAFC enable for port0. This register may get 1 only when
+ * ~ppp_enable.ppp_enable = 0 and pause_enable.pause_enable =0 for the same
+ * port */
+#define NIG_REG_LLFC_ENABLE_0					 0x16208
+#define NIG_REG_LLFC_ENABLE_1					 0x1620c
+/* [RW 16] classes are high-priority for port0 */
+#define NIG_REG_LLFC_HIGH_PRIORITY_CLASSES_0			 0x16058
+#define NIG_REG_LLFC_HIGH_PRIORITY_CLASSES_1			 0x1605c
+/* [RW 16] classes are low-priority for port0 */
+#define NIG_REG_LLFC_LOW_PRIORITY_CLASSES_0			 0x16060
+#define NIG_REG_LLFC_LOW_PRIORITY_CLASSES_1			 0x16064
+/* [RW 1] Output enable of message to LLFC BMAC IF for port0 */
+#define NIG_REG_LLFC_OUT_EN_0					 0x160c8
+#define NIG_REG_LLFC_OUT_EN_1					 0x160cc
+#define NIG_REG_LLH0_ACPI_PAT_0_CRC				 0x1015c
+#define NIG_REG_LLH0_ACPI_PAT_6_LEN				 0x10154
+#define NIG_REG_LLH0_BRB1_DRV_MASK				 0x10244
+#define NIG_REG_LLH0_BRB1_DRV_MASK_MF				 0x16048
+/* [RW 1] send to BRB1 if no match on any of RMP rules. */
+#define NIG_REG_LLH0_BRB1_NOT_MCP				 0x1025c
+/* [RW 2] Determine the classification participants. 0: no classification.1:
+ * classification upon VLAN id. 2: classification upon MAC address. 3:
+ * classification upon both VLAN id & MAC addr. */
+#define NIG_REG_LLH0_CLS_TYPE					 0x16080
+#define NIG_REG_LLH0_DEST_IP_0_1				 0x101dc
+#define NIG_REG_LLH0_DEST_MAC_0_0				 0x101c0
+/* [RW 16] destination TCP address 1. The LLH will look for this address in
+ * all incoming packets. */
+#define NIG_REG_LLH0_DEST_TCP_0					 0x10220
+/* [RW 16] destination UDP address 1 The LLH will look for this address in
+ * all incoming packets. */
+#define NIG_REG_LLH0_DEST_UDP_0					 0x10214
+/* [R 1] FIFO empty in LLH port0 */
+#define NIG_REG_LLH0_FIFO_EMPTY					 0x10548
+#define NIG_REG_LLH0_FUNC_EN					 0x160fc
+#define NIG_REG_LLH0_FUNC_MEM					 0x16180
+#define NIG_REG_LLH0_FUNC_MEM_ENABLE				 0x16140
+#define NIG_REG_LLH0_FUNC_VLAN_ID				 0x16100
+/* [RW 1] Determine the IP version to look for in
+ * ~nig_registers_llh0_dest_ip_0.llh0_dest_ip_0. 0 - IPv6; 1-IPv4 */
+#define NIG_REG_LLH0_IPV4_IPV6_0				 0x10208
+/* [RW 1] t bit for llh0 */
+#define NIG_REG_LLH0_T_BIT					 0x10074
+/* [RW 12] VLAN ID 1. In case of VLAN packet the LLH will look for this ID. */
+#define NIG_REG_LLH0_VLAN_ID_0					 0x1022c
+#define NIG_REG_LLH0_XCM_MASK					 0x10130
+#define NIG_REG_LLH1_BRB1_DRV_MASK				 0x10248
+/* [RW 1] send to BRB1 if no match on any of RMP rules. */
+#define NIG_REG_LLH1_BRB1_NOT_MCP				 0x102dc
+/* [RW 2] Determine the classification participants. 0: no classification.1:
+ * classification upon VLAN id. 2: classification upon MAC address. 3:
+ * classification upon both VLAN id & MAC addr. */
+#define NIG_REG_LLH1_CLS_TYPE					 0x16084
+/* [R 1] FIFO empty in LLH port1 */
+#define NIG_REG_LLH1_FIFO_EMPTY					 0x10558
+#define NIG_REG_LLH1_FUNC_MEM					 0x161c0
+#define NIG_REG_LLH1_FUNC_MEM_ENABLE				 0x16160
+#define NIG_REG_LLH1_FUNC_MEM_SIZE				 16
+/* [RW 1] When this bit is set; the LLH will classify the packet before
+ * sending it to the BRB or calculating WoL on it. This bit controls port 1
+ * only. The legacy llh_multi_function_mode bit controls port 0. */
+#define NIG_REG_LLH1_MF_MODE					 0x18614
+#define NIG_REG_LLH1_XCM_MASK					 0x10134
+/* [RW 1] When this bit is set; the LLH will expect all packets to be with
+ * outer VLAN. This is not applicable to E2. */
+#define NIG_REG_LLH_E1HOV_MODE					 0x160d8
+/* [RW 1] When this bit is set; the LLH will classify the packet before
+ * sending it to the BRB or calculating WoL on it. This bit is applicable to
+ * both ports 0 and 1 for E2. This bit only controls port 0 in E3. */
+#define NIG_REG_LLH_MF_MODE					 0x16024
+#define NIG_REG_MASK_INTERRUPT_PORT0				 0x10330
+#define NIG_REG_MASK_INTERRUPT_PORT1				 0x10334
+/* [R 1] Output signal from NIG to EMAC0. When set enables the EMAC0 block. */
+#define NIG_REG_NIG_EMAC0_EN					 0x1003c
+/* [R 1] Output signal from NIG to TX_EMAC0. When set indicates to the EMAC0
+ * to strip the CRC from the ingress packets. */
+#define NIG_REG_NIG_INGRESS_EMAC0_NO_CRC			 0x10044
+/* [R 32] Interrupt register #0 read */
+#define NIG_REG_NIG_INT_STS_0					 0x103b0
+#define NIG_REG_NIG_INT_STS_1					 0x103c0
+/* [R 32] Legacy E1 and E1H location for parity error mask register. */
+#define NIG_REG_NIG_PRTY_MASK					 0x103dc
+/* [RW 32] Parity mask register #0 read/write */
+#define NIG_REG_NIG_PRTY_MASK_0					 0x183c8
+#define NIG_REG_NIG_PRTY_MASK_1					 0x183d8
+/* [R 32] Legacy E1 and E1H location for parity error status register. */
+#define NIG_REG_NIG_PRTY_STS					 0x103d0
+/* [R 32] Parity register #0 read */
+#define NIG_REG_NIG_PRTY_STS_0					 0x183bc
+#define NIG_REG_NIG_PRTY_STS_1					 0x183cc
+/* [R 32] Legacy E1 and E1H location for parity error status clear register. */
+#define NIG_REG_NIG_PRTY_STS_CLR				 0x103d4
+/* [RC 32] Parity register #0 read clear */
+#define NIG_REG_NIG_PRTY_STS_CLR_0				 0x183c0
+#define NIG_REG_NIG_PRTY_STS_CLR_1				 0x183d0
+/* [R 1] Indication that HBUF descriptor FIFO is empty. */
+#define NIG_REG_P0_HBUF_DSCR_EMPTY				 0x18318
+/* [RW 6] Bit-map indicating which L2 hdrs may appear after the basic
+ * Ethernet header. */
+#define NIG_REG_P0_HDRS_AFTER_BASIC				 0x18038
+/* [RW 1] HW PFC enable bit. Set this bit to enable the PFC functionality in
+ * the NIG. Other flow control modes such as PAUSE and SAFC/LLFC should be
+ * disabled when this bit is set. */
+#define NIG_REG_P0_HWPFC_ENABLE					 0x18078
+#define NIG_REG_P0_LLH_FUNC_MEM2				 0x18480
+/* [RW 1] Input enable for RX MAC interface. */
+#define NIG_REG_P0_MAC_IN_EN					 0x185ac
+/* [RW 1] Output enable for TX MAC interface */
+#define NIG_REG_P0_MAC_OUT_EN					 0x185b0
+/* [RW 1] Output enable for TX PAUSE signal to the MAC. */
+#define NIG_REG_P0_MAC_PAUSE_OUT_EN				 0x185b4
+/* [RW 20] This register directly controls the MAC input mask to
+ * enable/disable error conditions from triggering RX error output. */
+#define NIG_REG_P0_MAC_RSV_ERR_MASK				 0x185b8
+/* [RW 32] Eight 4-bit configurations for specifying which COS (0-15 for
+ * future expansion) each priorty is to be mapped to. Bits 3:0 specify the
+ * COS for priority 0. Bits 31:28 specify the COS for priority 7. The 3-bit
+ * priority field is extracted from the outer-most VLAN in receive packet.
+ * Only COS 0 and COS 1 are supported in E2. */
+#define NIG_REG_P0_PKT_PRIORITY_TO_COS				 0x18054
+/* [RW 16] Bit-map indicating which SAFC/PFC priorities to map to COS 0. A
+ * priority is mapped to COS 0 when the corresponding mask bit is 1. More
+ * than one bit may be set; allowing multiple priorities to be mapped to one
+ * COS. */
+#define NIG_REG_P0_RX_COS0_PRIORITY_MASK			 0x18058
+/* [RW 16] Bit-map indicating which SAFC/PFC priorities to map to COS 1. A
+ * priority is mapped to COS 1 when the corresponding mask bit is 1. More
+ * than one bit may be set; allowing multiple priorities to be mapped to one
+ * COS. */
+#define NIG_REG_P0_RX_COS1_PRIORITY_MASK			 0x1805c
+/* [RW 16] Bit-map indicating which SAFC/PFC priorities to map to COS 2. A
+ * priority is mapped to COS 2 when the corresponding mask bit is 1. More
+ * than one bit may be set; allowing multiple priorities to be mapped to one
+ * COS. */
+#define NIG_REG_P0_RX_COS2_PRIORITY_MASK			 0x186b0
+/* [RW 16] Bit-map indicating which SAFC/PFC priorities to map to COS 3. A
+ * priority is mapped to COS 3 when the corresponding mask bit is 1. More
+ * than one bit may be set; allowing multiple priorities to be mapped to one
+ * COS. */
+#define NIG_REG_P0_RX_COS3_PRIORITY_MASK			 0x186b4
+/* [RW 16] Bit-map indicating which SAFC/PFC priorities to map to COS 4. A
+ * priority is mapped to COS 4 when the corresponding mask bit is 1. More
+ * than one bit may be set; allowing multiple priorities to be mapped to one
+ * COS. */
+#define NIG_REG_P0_RX_COS4_PRIORITY_MASK			 0x186b8
+/* [RW 16] Bit-map indicating which SAFC/PFC priorities to map to COS 5. A
+ * priority is mapped to COS 5 when the corresponding mask bit is 1. More
+ * than one bit may be set; allowing multiple priorities to be mapped to one
+ * COS. */
+#define NIG_REG_P0_RX_COS5_PRIORITY_MASK			 0x186bc
+/* [R 1] RX FIFO for receiving data from MAC is empty. */
+#define NIG_REG_P0_RX_MACFIFO_EMPTY				 0x18570
+/* [R 1] TLLH FIFO is empty. */
+#define NIG_REG_P0_TLLH_FIFO_EMPTY				 0x18308
+/* [R 15] Specify which of the credit registers the client is to be mapped
+ * to. Bits[2:0] are for client 0; bits [14:12] are for client 4. For
+ * clients that are not subject to WFQ credit blocking - their
+ * specifications here are not used. */
+#define NIG_REG_P0_TX_ARB_CLIENT_CREDIT_MAP			 0x180f0
+/* [RW 32] Specify which of the credit registers the client is to be mapped
+ * to. This register specifies bits 31:0 of the 36-bit value. Bits[3:0] are
+ * for client 0; bits [35:32] are for client 8. For clients that are not
+ * subject to WFQ credit blocking - their specifications here are not used.
+ * This is a new register (with 2_) added in E3 B0 to accommodate the 9
+ * input clients to ETS arbiter. The reset default is set for management and
+ * debug to use credit registers 6, 7, and 8, respectively, and COSes 0-5 to
+ * use credit registers 0-5 respectively (0x543210876). Note that credit
+ * registers can not be shared between clients. */
+#define NIG_REG_P0_TX_ARB_CLIENT_CREDIT_MAP2_LSB		 0x18688
+/* [RW 4] Specify which of the credit registers the client is to be mapped
+ * to. This register specifies bits 35:32 of the 36-bit value. Bits[3:0] are
+ * for client 0; bits [35:32] are for client 8. For clients that are not
+ * subject to WFQ credit blocking - their specifications here are not used.
+ * This is a new register (with 2_) added in E3 B0 to accommodate the 9
+ * input clients to ETS arbiter. The reset default is set for management and
+ * debug to use credit registers 6, 7, and 8, respectively, and COSes 0-5 to
+ * use credit registers 0-5 respectively (0x543210876). Note that credit
+ * registers can not be shared between clients. */
+#define NIG_REG_P0_TX_ARB_CLIENT_CREDIT_MAP2_MSB		 0x1868c
+/* [RW 9] Specify whether the client competes directly in the strict
+ * priority arbiter. The bits are mapped according to client ID (client IDs
+ * are defined in tx_arb_priority_client2): 0-management; 1-debug traffic
+ * from this port; 2-debug traffic from other port; 3-COS0 traffic; 4-COS1
+ * traffic; 5-COS2 traffic; 6-COS3 traffic; 7-COS4 traffic; 8-COS5 traffic.
+ * Default value is set to enable strict priorities for all clients. */
+#define NIG_REG_P0_TX_ARB_CLIENT_IS_STRICT			 0x180e8
+/* [RW 9] Specify whether the client is subject to WFQ credit blocking. The
+ * bits are mapped according to client ID (client IDs are defined in
+ * tx_arb_priority_client2): 0-management; 1-debug traffic from this port;
+ * 2-debug traffic from other port; 3-COS0 traffic; 4-COS1 traffic; 5-COS2
+ * traffic; 6-COS3 traffic; 7-COS4 traffic; 8-COS5 traffic. Default value is
+ * 0 for not using WFQ credit blocking. */
+#define NIG_REG_P0_TX_ARB_CLIENT_IS_SUBJECT2WFQ			 0x180ec
+/* [RW 32] Specify the upper bound that credit register 0 is allowed to
+ * reach. */
+#define NIG_REG_P0_TX_ARB_CREDIT_UPPER_BOUND_0			 0x1810c
+#define NIG_REG_P0_TX_ARB_CREDIT_UPPER_BOUND_1			 0x18110
+#define NIG_REG_P0_TX_ARB_CREDIT_UPPER_BOUND_2			 0x18114
+#define NIG_REG_P0_TX_ARB_CREDIT_UPPER_BOUND_3			 0x18118
+#define NIG_REG_P0_TX_ARB_CREDIT_UPPER_BOUND_4			 0x1811c
+#define NIG_REG_P0_TX_ARB_CREDIT_UPPER_BOUND_5			 0x186a0
+#define NIG_REG_P0_TX_ARB_CREDIT_UPPER_BOUND_6			 0x186a4
+#define NIG_REG_P0_TX_ARB_CREDIT_UPPER_BOUND_7			 0x186a8
+#define NIG_REG_P0_TX_ARB_CREDIT_UPPER_BOUND_8			 0x186ac
+/* [RW 32] Specify the weight (in bytes) to be added to credit register 0
+ * when it is time to increment. */
+#define NIG_REG_P0_TX_ARB_CREDIT_WEIGHT_0			 0x180f8
+#define NIG_REG_P0_TX_ARB_CREDIT_WEIGHT_1			 0x180fc
+#define NIG_REG_P0_TX_ARB_CREDIT_WEIGHT_2			 0x18100
+#define NIG_REG_P0_TX_ARB_CREDIT_WEIGHT_3			 0x18104
+#define NIG_REG_P0_TX_ARB_CREDIT_WEIGHT_4			 0x18108
+#define NIG_REG_P0_TX_ARB_CREDIT_WEIGHT_5			 0x18690
+#define NIG_REG_P0_TX_ARB_CREDIT_WEIGHT_6			 0x18694
+#define NIG_REG_P0_TX_ARB_CREDIT_WEIGHT_7			 0x18698
+#define NIG_REG_P0_TX_ARB_CREDIT_WEIGHT_8			 0x1869c
+/* [RW 12] Specify the number of strict priority arbitration slots between
+ * two round-robin arbitration slots to avoid starvation. A value of 0 means
+ * no strict priority cycles - the strict priority with anti-starvation
+ * arbiter becomes a round-robin arbiter. */
+#define NIG_REG_P0_TX_ARB_NUM_STRICT_ARB_SLOTS			 0x180f4
+/* [R 15] Specify the client number to be assigned to each priority of the
+ * strict priority arbiter. Priority 0 is the highest priority. Bits [2:0]
+ * are for priority 0 client; bits [14:12] are for priority 4 client. The
+ * clients are assigned the following IDs: 0-management; 1-debug traffic
+ * from this port; 2-debug traffic from other port; 3-COS0 traffic; 4-COS1
+ * traffic. The reset value[14:0] is set to 0x4688 (15'b100_011_010_001_000)
+ * for management at priority 0; debug traffic at priorities 1 and 2; COS0
+ * traffic at priority 3; and COS1 traffic at priority 4. */
+#define NIG_REG_P0_TX_ARB_PRIORITY_CLIENT			 0x180e4
+/* [RW 32] Specify the client number to be assigned to each priority of the
+ * strict priority arbiter. This register specifies bits 31:0 of the 36-bit
+ * value. Priority 0 is the highest priority. Bits [3:0] are for priority 0
+ * client; bits [35-32] are for priority 8 client. The clients are assigned
+ * the following IDs: 0-management; 1-debug traffic from this port; 2-debug
+ * traffic from other port; 3-COS0 traffic; 4-COS1 traffic; 5-COS2 traffic;
+ * 6-COS3 traffic; 7-COS4 traffic; 8-COS5 traffic. The reset value[35:0] is
+ * set to 0x345678021. This is a new register (with 2_) added in E3 B0 to
+ * accommodate the 9 input clients to ETS arbiter. */
+#define NIG_REG_P0_TX_ARB_PRIORITY_CLIENT2_LSB			 0x18680
+/* [RW 4] Specify the client number to be assigned to each priority of the
+ * strict priority arbiter. This register specifies bits 35:32 of the 36-bit
+ * value. Priority 0 is the highest priority. Bits [3:0] are for priority 0
+ * client; bits [35-32] are for priority 8 client. The clients are assigned
+ * the following IDs: 0-management; 1-debug traffic from this port; 2-debug
+ * traffic from other port; 3-COS0 traffic; 4-COS1 traffic; 5-COS2 traffic;
+ * 6-COS3 traffic; 7-COS4 traffic; 8-COS5 traffic. The reset value[35:0] is
+ * set to 0x345678021. This is a new register (with 2_) added in E3 B0 to
+ * accommodate the 9 input clients to ETS arbiter. */
+#define NIG_REG_P0_TX_ARB_PRIORITY_CLIENT2_MSB			 0x18684
+/* [R 1] TX FIFO for transmitting data to MAC is empty. */
+#define NIG_REG_P0_TX_MACFIFO_EMPTY				 0x18578
+/* [R 1] FIFO empty status of the MCP TX FIFO used for storing MCP packets
+ * forwarded to the host. */
+#define NIG_REG_P0_TX_MNG_HOST_FIFO_EMPTY			 0x182a8
+/* [R 1] Indication that HBUF descriptor FIFO is empty. */
+#define NIG_REG_P1_HBUF_DSCR_EMPTY				 0x18348
+/* [RW 6] Bit-map indicating which L2 hdrs may appear after the basic
+ * Ethernet header. */
+#define NIG_REG_P1_HDRS_AFTER_BASIC				 0x1818c
+/* [RW 1] HW PFC enable bit. Set this bit to enable the PFC functionality in
+ * the NIG. Other flow control modes such as PAUSE and SAFC/LLFC should be
+ * disabled when this bit is set. */
+#define NIG_REG_P1_HWPFC_ENABLE					 0x181d0
+#define NIG_REG_P1_LLH_FUNC_MEM2				 0x184c0
+/* [RW 1] Input enable for RX MAC interface. */
+#define NIG_REG_P1_MAC_IN_EN					 0x185c0
+/* [RW 1] Output enable for TX MAC interface */
+#define NIG_REG_P1_MAC_OUT_EN					 0x185c4
+/* [RW 1] Output enable for TX PAUSE signal to the MAC. */
+#define NIG_REG_P1_MAC_PAUSE_OUT_EN				 0x185c8
+/* [RW 32] Eight 4-bit configurations for specifying which COS (0-15 for
+ * future expansion) each priorty is to be mapped to. Bits 3:0 specify the
+ * COS for priority 0. Bits 31:28 specify the COS for priority 7. The 3-bit
+ * priority field is extracted from the outer-most VLAN in receive packet.
+ * Only COS 0 and COS 1 are supported in E2. */
+#define NIG_REG_P1_PKT_PRIORITY_TO_COS				 0x181a8
+/* [RW 16] Bit-map indicating which SAFC/PFC priorities to map to COS 0. A
+ * priority is mapped to COS 0 when the corresponding mask bit is 1. More
+ * than one bit may be set; allowing multiple priorities to be mapped to one
+ * COS. */
+#define NIG_REG_P1_RX_COS0_PRIORITY_MASK			 0x181ac
+/* [RW 16] Bit-map indicating which SAFC/PFC priorities to map to COS 1. A
+ * priority is mapped to COS 1 when the corresponding mask bit is 1. More
+ * than one bit may be set; allowing multiple priorities to be mapped to one
+ * COS. */
+#define NIG_REG_P1_RX_COS1_PRIORITY_MASK			 0x181b0
+/* [RW 16] Bit-map indicating which SAFC/PFC priorities to map to COS 2. A
+ * priority is mapped to COS 2 when the corresponding mask bit is 1. More
+ * than one bit may be set; allowing multiple priorities to be mapped to one
+ * COS. */
+#define NIG_REG_P1_RX_COS2_PRIORITY_MASK			 0x186f8
+/* [R 1] RX FIFO for receiving data from MAC is empty. */
+#define NIG_REG_P1_RX_MACFIFO_EMPTY				 0x1858c
+/* [R 1] TLLH FIFO is empty. */
+#define NIG_REG_P1_TLLH_FIFO_EMPTY				 0x18338
+/* [RW 32] Specify which of the credit registers the client is to be mapped
+ * to. This register specifies bits 31:0 of the 36-bit value. Bits[3:0] are
+ * for client 0; bits [35:32] are for client 8. For clients that are not
+ * subject to WFQ credit blocking - their specifications here are not used.
+ * This is a new register (with 2_) added in E3 B0 to accommodate the 9
+ * input clients to ETS arbiter. The reset default is set for management and
+ * debug to use credit registers 6, 7, and 8, respectively, and COSes 0-5 to
+ * use credit registers 0-5 respectively (0x543210876). Note that credit
+ * registers can not be shared between clients. Note also that there are
+ * only COS0-2 in port 1- there is a total of 6 clients in port 1. Only
+ * credit registers 0-5 are valid. This register should be configured
+ * appropriately before enabling WFQ. */
+#define NIG_REG_P1_TX_ARB_CLIENT_CREDIT_MAP2_LSB		 0x186e8
+/* [RW 4] Specify which of the credit registers the client is to be mapped
+ * to. This register specifies bits 35:32 of the 36-bit value. Bits[3:0] are
+ * for client 0; bits [35:32] are for client 8. For clients that are not
+ * subject to WFQ credit blocking - their specifications here are not used.
+ * This is a new register (with 2_) added in E3 B0 to accommodate the 9
+ * input clients to ETS arbiter. The reset default is set for management and
+ * debug to use credit registers 6, 7, and 8, respectively, and COSes 0-5 to
+ * use credit registers 0-5 respectively (0x543210876). Note that credit
+ * registers can not be shared between clients. Note also that there are
+ * only COS0-2 in port 1- there is a total of 6 clients in port 1. Only
+ * credit registers 0-5 are valid. This register should be configured
+ * appropriately before enabling WFQ. */
+#define NIG_REG_P1_TX_ARB_CLIENT_CREDIT_MAP2_MSB		 0x186ec
+/* [RW 9] Specify whether the client competes directly in the strict
+ * priority arbiter. The bits are mapped according to client ID (client IDs
+ * are defined in tx_arb_priority_client2): 0-management; 1-debug traffic
+ * from this port; 2-debug traffic from other port; 3-COS0 traffic; 4-COS1
+ * traffic; 5-COS2 traffic; 6-COS3 traffic; 7-COS4 traffic; 8-COS5 traffic.
+ * Default value is set to enable strict priorities for all clients. */
+#define NIG_REG_P1_TX_ARB_CLIENT_IS_STRICT			 0x18234
+/* [RW 9] Specify whether the client is subject to WFQ credit blocking. The
+ * bits are mapped according to client ID (client IDs are defined in
+ * tx_arb_priority_client2): 0-management; 1-debug traffic from this port;
+ * 2-debug traffic from other port; 3-COS0 traffic; 4-COS1 traffic; 5-COS2
+ * traffic; 6-COS3 traffic; 7-COS4 traffic; 8-COS5 traffic. Default value is
+ * 0 for not using WFQ credit blocking. */
+#define NIG_REG_P1_TX_ARB_CLIENT_IS_SUBJECT2WFQ			 0x18238
+/* [RW 32] Specify the upper bound that credit register 0 is allowed to
+ * reach. */
+#define NIG_REG_P1_TX_ARB_CREDIT_UPPER_BOUND_0			 0x18258
+#define NIG_REG_P1_TX_ARB_CREDIT_UPPER_BOUND_1			 0x1825c
+#define NIG_REG_P1_TX_ARB_CREDIT_UPPER_BOUND_2			 0x18260
+#define NIG_REG_P1_TX_ARB_CREDIT_UPPER_BOUND_3			 0x18264
+#define NIG_REG_P1_TX_ARB_CREDIT_UPPER_BOUND_4			 0x18268
+#define NIG_REG_P1_TX_ARB_CREDIT_UPPER_BOUND_5			 0x186f4
+/* [RW 32] Specify the weight (in bytes) to be added to credit register 0
+ * when it is time to increment. */
+#define NIG_REG_P1_TX_ARB_CREDIT_WEIGHT_0			 0x18244
+#define NIG_REG_P1_TX_ARB_CREDIT_WEIGHT_1			 0x18248
+#define NIG_REG_P1_TX_ARB_CREDIT_WEIGHT_2			 0x1824c
+#define NIG_REG_P1_TX_ARB_CREDIT_WEIGHT_3			 0x18250
+#define NIG_REG_P1_TX_ARB_CREDIT_WEIGHT_4			 0x18254
+#define NIG_REG_P1_TX_ARB_CREDIT_WEIGHT_5			 0x186f0
+/* [RW 12] Specify the number of strict priority arbitration slots between
+ * two round-robin arbitration slots to avoid starvation. A value of 0 means
+ * no strict priority cycles - the strict priority with anti-starvation
+ * arbiter becomes a round-robin arbiter. */
+#define NIG_REG_P1_TX_ARB_NUM_STRICT_ARB_SLOTS			 0x18240
+/* [RW 32] Specify the client number to be assigned to each priority of the
+ * strict priority arbiter. This register specifies bits 31:0 of the 36-bit
+ * value. Priority 0 is the highest priority. Bits [3:0] are for priority 0
+ * client; bits [35-32] are for priority 8 client. The clients are assigned
+ * the following IDs: 0-management; 1-debug traffic from this port; 2-debug
+ * traffic from other port; 3-COS0 traffic; 4-COS1 traffic; 5-COS2 traffic;
+ * 6-COS3 traffic; 7-COS4 traffic; 8-COS5 traffic. The reset value[35:0] is
+ * set to 0x345678021. This is a new register (with 2_) added in E3 B0 to
+ * accommodate the 9 input clients to ETS arbiter. Note that this register
+ * is the same as the one for port 0, except that port 1 only has COS 0-2
+ * traffic. There is no traffic for COS 3-5 of port 1. */
+#define NIG_REG_P1_TX_ARB_PRIORITY_CLIENT2_LSB			 0x186e0
+/* [RW 4] Specify the client number to be assigned to each priority of the
+ * strict priority arbiter. This register specifies bits 35:32 of the 36-bit
+ * value. Priority 0 is the highest priority. Bits [3:0] are for priority 0
+ * client; bits [35-32] are for priority 8 client. The clients are assigned
+ * the following IDs: 0-management; 1-debug traffic from this port; 2-debug
+ * traffic from other port; 3-COS0 traffic; 4-COS1 traffic; 5-COS2 traffic;
+ * 6-COS3 traffic; 7-COS4 traffic; 8-COS5 traffic. The reset value[35:0] is
+ * set to 0x345678021. This is a new register (with 2_) added in E3 B0 to
+ * accommodate the 9 input clients to ETS arbiter. Note that this register
+ * is the same as the one for port 0, except that port 1 only has COS 0-2
+ * traffic. There is no traffic for COS 3-5 of port 1. */
+#define NIG_REG_P1_TX_ARB_PRIORITY_CLIENT2_MSB			 0x186e4
+/* [R 1] TX FIFO for transmitting data to MAC is empty. */
+#define NIG_REG_P1_TX_MACFIFO_EMPTY				 0x18594
+/* [R 1] FIFO empty status of the MCP TX FIFO used for storing MCP packets
+ * forwarded to the host. */
+#define NIG_REG_P1_TX_MNG_HOST_FIFO_EMPTY			 0x182b8
+/* [RW 1] Pause enable for port0. This register may get 1 only when
+ * ~safc_enable.safc_enable = 0 and ppp_enable.ppp_enable =0 for the same
+ * port */
+#define NIG_REG_PAUSE_ENABLE_0					 0x160c0
+#define NIG_REG_PAUSE_ENABLE_1					 0x160c4
+/* [RW 1] Value of this register will be transmitted to port swap when
+ * ~nig_registers_strap_override.strap_override =1 */
+#define NIG_REG_PORT_SWAP					 0x10394
+/* [RW 1] PPP enable for port0. This register may get 1 only when
+ * ~safc_enable.safc_enable = 0 and pause_enable.pause_enable =0 for the
+ * same port */
+#define NIG_REG_PPP_ENABLE_0					 0x160b0
+#define NIG_REG_PPP_ENABLE_1					 0x160b4
+/* [RW 1] Input enable for RX parser request IF */
+#define NIG_REG_PRS_REQ_IN_EN					 0x100b8
+/* [R 5] control to serdes - CL45 DEVAD */
+#define NIG_REG_SERDES0_CTRL_MD_DEVAD				 0x10370
+/* [R 1] control to serdes; 0 - clause 45; 1 - clause 22 */
+#define NIG_REG_SERDES0_CTRL_MD_ST				 0x1036c
+/* [R 5] control to serdes - CL22 PHY_ADD and CL45 PRTAD */
+#define NIG_REG_SERDES0_CTRL_PHY_ADDR				 0x10374
+/* [R 1] status from serdes0 that inputs to interrupt logic of link status */
+#define NIG_REG_SERDES0_STATUS_LINK_STATUS			 0x10578
+/* [R 32] Rx statistics : In user packets discarded due to BRB backpressure
+ * for port 0 COS0 */
+#define NIG_REG_STAT0_BRB_DISCARD				 0x105f0
+/* [R 32] Rx statistics : In user packets truncated due to BRB backpressure
+ * for port 0 COS0 */
+#define NIG_REG_STAT0_BRB_TRUNCATE				 0x105f8
+/* [WB_R 36] Tx statistics : Number of packets from emac0 or bmac0 that
+ * between 1024 and 1522 bytes for port0 */
+#define NIG_REG_STAT0_EGRESS_MAC_PKT0				 0x10750
+/* [WB_R 36] Tx statistics : Number of packets from emac0 or bmac0 that
+ * between 1523 bytes and above for port0 */
+#define NIG_REG_STAT0_EGRESS_MAC_PKT1				 0x10760
+/* [R 32] Rx statistics : In user packets discarded due to BRB backpressure
+ * for port 1 COS0 */
+#define NIG_REG_STAT1_BRB_DISCARD				 0x10628
+/* [WB_R 36] Tx statistics : Number of packets from emac1 or bmac1 that
+ * between 1024 and 1522 bytes for port1 */
+#define NIG_REG_STAT1_EGRESS_MAC_PKT0				 0x107a0
+/* [WB_R 36] Tx statistics : Number of packets from emac1 or bmac1 that
+ * between 1523 bytes and above for port1 */
+#define NIG_REG_STAT1_EGRESS_MAC_PKT1				 0x107b0
+/* [WB_R 64] Rx statistics : User octets received for LP */
+#define NIG_REG_STAT2_BRB_OCTET					 0x107e0
+#define NIG_REG_STATUS_INTERRUPT_PORT0				 0x10328
+/* [RW 1] port swap mux selection. If this register equal to 0 then port
+ * swap is equal to SPIO pin that inputs from ifmux_serdes_swap. If 1 then
+ * ort swap is equal to ~nig_registers_port_swap.port_swap */
+#define NIG_REG_STRAP_OVERRIDE					 0x10398
+/* [RW 1] output enable for RX_XCM0 IF */
+#define NIG_REG_XCM0_OUT_EN					 0x100f0
+/* [RW 1] output enable for RX_XCM1 IF */
+#define NIG_REG_XCM1_OUT_EN					 0x100f4
+/* [R 1] control to xgxs - remote PHY in-band MDIO */
+#define NIG_REG_XGXS0_CTRL_EXTREMOTEMDIOST			 0x10348
+/* [R 5] control to xgxs - CL45 DEVAD */
+#define NIG_REG_XGXS0_CTRL_MD_DEVAD				 0x1033c
+/* [R 1] control to xgxs; 0 - clause 45; 1 - clause 22 */
+#define NIG_REG_XGXS0_CTRL_MD_ST				 0x10338
+/* [R 5] control to xgxs - CL22 PHY_ADD and CL45 PRTAD */
+#define NIG_REG_XGXS0_CTRL_PHY_ADDR				 0x10340
+/* [R 1] status from xgxs0 that inputs to interrupt logic of link10g. */
+#define NIG_REG_XGXS0_STATUS_LINK10G				 0x10680
+/* [R 4] status from xgxs0 that inputs to interrupt logic of link status */
+#define NIG_REG_XGXS0_STATUS_LINK_STATUS			 0x10684
+/* [R 2] selection for XGXS lane of port 0 in NIG_MUX block */
+#define NIG_REG_XGXS_LANE_SEL_P0				 0x102e8
+/* [R 1] selection for port0 for NIG_MUX block : 0 = SerDes; 1 = XGXS */
+#define NIG_REG_XGXS_SERDES0_MODE_SEL				 0x102e0
+#define NIG_STATUS_INTERRUPT_PORT0_REG_STATUS_EMAC0_MISC_MI_INT	 (0x1<<0)
+#define NIG_STATUS_INTERRUPT_PORT0_REG_STATUS_SERDES0_LINK_STATUS (0x1<<9)
+#define NIG_STATUS_INTERRUPT_PORT0_REG_STATUS_XGXS0_LINK10G	 (0x1<<15)
+#define NIG_STATUS_INTERRUPT_PORT0_REG_STATUS_XGXS0_LINK_STATUS	 (0xf<<18)
+#define NIG_STATUS_INTERRUPT_PORT0_REG_STATUS_XGXS0_LINK_STATUS_SIZE 18
+/* [R 31] Removed for E3 B0 -The upper bound of the weight of COS0 in the
+ * ETS command arbiter. */
+#define PBF_REG_COS0_UPPER_BOUND				 0x15c05c
+/* [RW 31] The upper bound of the weight of COS0 in the ETS command arbiter
+ * of port 0. */
+#define PBF_REG_COS0_UPPER_BOUND_P0				 0x15c2cc
+/* [RW 31] The upper bound of the weight of COS0 in the ETS command arbiter
+ * of port 1. */
+#define PBF_REG_COS0_UPPER_BOUND_P1				 0x15c2e4
+/* [R 31] Removed for E3 B0 - The weight of COS0 in the ETS command arbiter. */
+#define PBF_REG_COS0_WEIGHT					 0x15c054
+/* [RW 31] The weight of COS0 in port 0 ETS command arbiter. */
+#define PBF_REG_COS0_WEIGHT_P0					 0x15c2a8
+/* [RW 31] The weight of COS0 in port 1 ETS command arbiter. */
+#define PBF_REG_COS0_WEIGHT_P1					 0x15c2c0
+/* [R 31] Removed for E3 B0 -The upper bound of the weight of COS1 in the
+ * ETS command arbiter. */
+#define PBF_REG_COS1_UPPER_BOUND				 0x15c060
+/* [R 31] Removed for E3 B0 - The weight of COS1 in the ETS command arbiter. */
+#define PBF_REG_COS1_WEIGHT					 0x15c058
+/* [RW 31] The weight of COS1 in port 0 ETS command arbiter. */
+#define PBF_REG_COS1_WEIGHT_P0					 0x15c2ac
+/* [RW 31] The weight of COS1 in port 1 ETS command arbiter. */
+#define PBF_REG_COS1_WEIGHT_P1					 0x15c2c4
+/* [RW 31] The weight of COS2 in port 0 ETS command arbiter. */
+#define PBF_REG_COS2_WEIGHT_P0					 0x15c2b0
+/* [RW 31] The weight of COS2 in port 1 ETS command arbiter. */
+#define PBF_REG_COS2_WEIGHT_P1					 0x15c2c8
+/* [RW 31] The weight of COS3 in port 0 ETS command arbiter. */
+#define PBF_REG_COS3_WEIGHT_P0					 0x15c2b4
+/* [RW 31] The weight of COS4 in port 0 ETS command arbiter. */
+#define PBF_REG_COS4_WEIGHT_P0					 0x15c2b8
+/* [RW 31] The weight of COS5 in port 0 ETS command arbiter. */
+#define PBF_REG_COS5_WEIGHT_P0					 0x15c2bc
+/* [R 11] Current credit for the LB queue in the tx port buffers in 16 byte
+ * lines. */
+#define PBF_REG_CREDIT_LB_Q					 0x140338
+/* [R 11] Current credit for queue 0 in the tx port buffers in 16 byte
+ * lines. */
+#define PBF_REG_CREDIT_Q0					 0x14033c
+/* [R 11] Current credit for queue 1 in the tx port buffers in 16 byte
+ * lines. */
+#define PBF_REG_CREDIT_Q1					 0x140340
+/* [R 11] Current credit for queue 2 in the tx port buffers in 16 byte
+ * lines. */
+#define PBF_REG_CREDIT_Q2					 0x140344
+/* [R 11] Current credit for queue 3 in the tx port buffers in 16 byte
+ * lines. */
+#define PBF_REG_CREDIT_Q3					 0x140348
+/* [R 11] Current credit for queue 4 in the tx port buffers in 16 byte
+ * lines. */
+#define PBF_REG_CREDIT_Q4					 0x14034c
+/* [R 11] Current credit for queue 5 in the tx port buffers in 16 byte
+ * lines. */
+#define PBF_REG_CREDIT_Q5					 0x140350
+/* [R 1] Removed for E3 B0 - Disable processing further tasks from port 0
+ * (after ending the current task in process). */
+#define PBF_REG_DISABLE_NEW_TASK_PROC_P0			 0x14005c
+/* [R 1] Removed for E3 B0 - Disable processing further tasks from port 1
+ * (after ending the current task in process). */
+#define PBF_REG_DISABLE_NEW_TASK_PROC_P1			 0x140060
+/* [RW 1] Disable processing further tasks from port 0 (after ending the
+ * current task in process). */
+#define PBF_REG_DISABLE_NEW_TASK_PROC_Q0			 0x15c1bc
+/* [RW 1] Disable processing further tasks from port 0 (after ending the
+ * current task in process). */
+#define PBF_REG_DISABLE_NEW_TASK_PROC_Q1			 0x15c1c0
+/* [RW 1] Disable processing further tasks from port 0 (after ending the
+ * current task in process). */
+#define PBF_REG_DISABLE_NEW_TASK_PROC_Q2			 0x15c1c4
+/* [RW 1] Disable processing further tasks from port 0 (after ending the
+ * current task in process). */
+#define PBF_REG_DISABLE_NEW_TASK_PROC_Q3			 0x15c1c8
+/* [RW 1] Disable processing further tasks from port 0 (after ending the
+ * current task in process). */
+#define PBF_REG_DISABLE_NEW_TASK_PROC_Q4			 0x15c1cc
+/* [RW 1] Disable processing further tasks from port 0 (after ending the
+ * current task in process). */
+#define PBF_REG_DISABLE_NEW_TASK_PROC_Q5			 0x15c1d0
+#define PBF_REG_DISABLE_PF					 0x1402e8
+#define PBF_REG_DISABLE_VF					 0x1402ec
+/* [RW 18] For port 0: For each client that is subject to WFQ (the
+ * corresponding bit is 1); indicates to which of the credit registers this
+ * client is mapped. For clients which are not credit blocked; their mapping
+ * is dont care. */
+#define PBF_REG_ETS_ARB_CLIENT_CREDIT_MAP_P0			 0x15c288
+/* [RW 9] For port 1: For each client that is subject to WFQ (the
+ * corresponding bit is 1); indicates to which of the credit registers this
+ * client is mapped. For clients which are not credit blocked; their mapping
+ * is dont care. */
+#define PBF_REG_ETS_ARB_CLIENT_CREDIT_MAP_P1			 0x15c28c
+/* [RW 6] For port 0: Bit per client to indicate if the client competes in
+ * the strict priority arbiter directly (corresponding bit = 1); or first
+ * goes to the RR arbiter (corresponding bit = 0); and then competes in the
+ * lowest priority in the strict-priority arbiter. */
+#define PBF_REG_ETS_ARB_CLIENT_IS_STRICT_P0			 0x15c278
+/* [RW 3] For port 1: Bit per client to indicate if the client competes in
+ * the strict priority arbiter directly (corresponding bit = 1); or first
+ * goes to the RR arbiter (corresponding bit = 0); and then competes in the
+ * lowest priority in the strict-priority arbiter. */
+#define PBF_REG_ETS_ARB_CLIENT_IS_STRICT_P1			 0x15c27c
+/* [RW 6] For port 0: Bit per client to indicate if the client is subject to
+ * WFQ credit blocking (corresponding bit = 1). */
+#define PBF_REG_ETS_ARB_CLIENT_IS_SUBJECT2WFQ_P0		 0x15c280
+/* [RW 3] For port 0: Bit per client to indicate if the client is subject to
+ * WFQ credit blocking (corresponding bit = 1). */
+#define PBF_REG_ETS_ARB_CLIENT_IS_SUBJECT2WFQ_P1		 0x15c284
+/* [RW 16] For port 0: The number of strict priority arbitration slots
+ * between 2 RR arbitration slots. A value of 0 means no strict priority
+ * cycles; i.e. the strict-priority w/ anti-starvation arbiter is a RR
+ * arbiter. */
+#define PBF_REG_ETS_ARB_NUM_STRICT_ARB_SLOTS_P0			 0x15c2a0
+/* [RW 16] For port 1: The number of strict priority arbitration slots
+ * between 2 RR arbitration slots. A value of 0 means no strict priority
+ * cycles; i.e. the strict-priority w/ anti-starvation arbiter is a RR
+ * arbiter. */
+#define PBF_REG_ETS_ARB_NUM_STRICT_ARB_SLOTS_P1			 0x15c2a4
+/* [RW 18] For port 0: Indicates which client is connected to each priority
+ * in the strict-priority arbiter. Priority 0 is the highest priority, and
+ * priority 5 is the lowest; to which the RR output is connected to (this is
+ * not configurable). */
+#define PBF_REG_ETS_ARB_PRIORITY_CLIENT_P0			 0x15c270
+/* [RW 9] For port 1: Indicates which client is connected to each priority
+ * in the strict-priority arbiter. Priority 0 is the highest priority, and
+ * priority 5 is the lowest; to which the RR output is connected to (this is
+ * not configurable). */
+#define PBF_REG_ETS_ARB_PRIORITY_CLIENT_P1			 0x15c274
+/* [R 1] Removed for E3 B0 - Indicates that ETS is performed between the
+ * COSes in the command arbiter. If reset strict priority w/ anti-starvation
+ * will be performed w/o WFQ. */
+#define PBF_REG_ETS_ENABLED					 0x15c050
+/* [RW 6] Bit-map indicating which L2 hdrs may appear after the basic
+ * Ethernet header. */
+#define PBF_REG_HDRS_AFTER_BASIC				 0x15c0a8
+/* [RW 6] Bit-map indicating which L2 hdrs may appear after L2 tag 0 */
+#define PBF_REG_HDRS_AFTER_TAG_0				 0x15c0b8
+/* [R 1] Removed for E3 B0 - Indicates which COS is conncted to the highest
+ * priority in the command arbiter. */
+#define PBF_REG_HIGH_PRIORITY_COS_NUM				 0x15c04c
+/* [RW 11] Initial credit for the LB queue in the tx port buffers in 16 byte
+ * lines. */
+#define PBF_REG_INIT_CRD_LB_Q					 0x15c248
+/* [RW 11] Initial credit for queue 0 in the tx port buffers in 16 byte
+ * lines. */
+#define PBF_REG_INIT_CRD_Q0					 0x15c230
+/* [RW 11] Initial credit for queue 1 in the tx port buffers in 16 byte
+ * lines. */
+#define PBF_REG_INIT_CRD_Q1					 0x15c234
+/* [RW 11] Initial credit for queue 2 in the tx port buffers in 16 byte
+ * lines. */
+#define PBF_REG_INIT_CRD_Q2					 0x15c238
+/* [RW 11] Initial credit for queue 3 in the tx port buffers in 16 byte
+ * lines. */
+#define PBF_REG_INIT_CRD_Q3					 0x15c23c
+/* [RW 11] Initial credit for queue 4 in the tx port buffers in 16 byte
+ * lines. */
+#define PBF_REG_INIT_CRD_Q4					 0x15c240
+/* [RW 11] Initial credit for queue 5 in the tx port buffers in 16 byte
+ * lines. */
+#define PBF_REG_INIT_CRD_Q5					 0x15c244
+/* [R 1] Removed for E3 B0 - Init bit for port 0. When set the initial
+ * credit of port 0 is copied to the credit register. Should be set and then
+ * reset after the configuration of the port has ended. */
+#define PBF_REG_INIT_P0						 0x140004
+/* [R 32] Cyclic counter for the amount credits in 16 bytes lines added for
+ * the LB queue. Reset upon init. */
+#define PBF_REG_INTERNAL_CRD_FREED_CNT_LB_Q			 0x140354
+/* [R 32] Cyclic counter for the amount credits in 16 bytes lines added for
+ * queue 0. Reset upon init. */
+#define PBF_REG_INTERNAL_CRD_FREED_CNT_Q0			 0x140358
+/* [R 32] Cyclic counter for the amount credits in 16 bytes lines added for
+ * queue 1. Reset upon init. */
+#define PBF_REG_INTERNAL_CRD_FREED_CNT_Q1			 0x14035c
+/* [RW 1] Enable for mac interface 0. */
+#define PBF_REG_MAC_IF0_ENABLE					 0x140030
+/* [RW 6] Bit-map indicating which headers must appear in the packet */
+#define PBF_REG_MUST_HAVE_HDRS					 0x15c0c4
+/* [R 16] Removed for E3 B0 - The number of strict priority arbitration
+ * slots between 2 RR arbitration slots. A value of 0 means no strict
+ * priority cycles; i.e. the strict-priority w/ anti-starvation arbiter is a
+ * RR arbiter. */
+#define PBF_REG_NUM_STRICT_ARB_SLOTS				 0x15c064
+/* [R 11] Removed for E3 B0 - Port 0 threshold used by arbiter in 16 byte
+ * lines used when pause not suppoterd. */
+#define PBF_REG_P0_ARB_THRSH					 0x1400e4
+/* [R 11] Removed for E3 B0 - Current credit for port 0 in the tx port
+ * buffers in 16 byte lines. */
+#define PBF_REG_P0_CREDIT					 0x140200
+/* [R 11] Removed for E3 B0 - Initial credit for port 0 in the tx port
+ * buffers in 16 byte lines. */
+#define PBF_REG_P0_INIT_CRD					 0x1400d0
+/* [R 32] Cyclic counter for the amount credits in 16 bytes lines added for
+ * port 0. Reset upon init. */
+#define PBF_REG_P0_INTERNAL_CRD_FREED_CNT			 0x140308
+/* [R 1] Removed for E3 B0 - Indication that pause is enabled for port 0. */
+#define PBF_REG_P0_PAUSE_ENABLE					 0x140014
+/* [R 8] Removed for E3 B0 - Number of tasks in port 0 task queue. */
+#define PBF_REG_P0_TASK_CNT					 0x140204
+/* [R 32] Removed for E3 B0 - Cyclic counter for number of 8 byte lines
+ * freed from the task queue of port 0. Reset upon init. */
+#define PBF_REG_P0_TQ_LINES_FREED_CNT				 0x1402f0
+/* [R 12] Number of 8 bytes lines occupied in the task queue of port 0. */
+#define PBF_REG_P0_TQ_OCCUPANCY					 0x1402fc
+/* [R 11] Removed for E3 B0 - Current credit for port 1 in the tx port
+ * buffers in 16 byte lines. */
+#define PBF_REG_P1_CREDIT					 0x140208
+/* [R 11] Removed for E3 B0 - Initial credit for port 0 in the tx port
+ * buffers in 16 byte lines. */
+#define PBF_REG_P1_INIT_CRD					 0x1400d4
+/* [R 32] Cyclic counter for the amount credits in 16 bytes lines added for
+ * port 1. Reset upon init. */
+#define PBF_REG_P1_INTERNAL_CRD_FREED_CNT			 0x14030c
+/* [R 8] Removed for E3 B0 - Number of tasks in port 1 task queue. */
+#define PBF_REG_P1_TASK_CNT					 0x14020c
+/* [R 32] Removed for E3 B0 - Cyclic counter for number of 8 byte lines
+ * freed from the task queue of port 1. Reset upon init. */
+#define PBF_REG_P1_TQ_LINES_FREED_CNT				 0x1402f4
+/* [R 12] Number of 8 bytes lines occupied in the task queue of port 1. */
+#define PBF_REG_P1_TQ_OCCUPANCY					 0x140300
+/* [R 11] Removed for E3 B0 - Current credit for port 4 in the tx port
+ * buffers in 16 byte lines. */
+#define PBF_REG_P4_CREDIT					 0x140210
+/* [R 11] Removed for E3 B0 - Initial credit for port 0 in the tx port
+ * buffers in 16 byte lines. */
+#define PBF_REG_P4_INIT_CRD					 0x1400e0
+/* [R 32] Cyclic counter for the amount credits in 16 bytes lines added for
+ * port 4. Reset upon init. */
+#define PBF_REG_P4_INTERNAL_CRD_FREED_CNT			 0x140310
+/* [R 8] Removed for E3 B0 - Number of tasks in port 4 task queue. */
+#define PBF_REG_P4_TASK_CNT					 0x140214
+/* [R 32] Removed for E3 B0 - Cyclic counter for number of 8 byte lines
+ * freed from the task queue of port 4. Reset upon init. */
+#define PBF_REG_P4_TQ_LINES_FREED_CNT				 0x1402f8
+/* [R 12] Number of 8 bytes lines occupied in the task queue of port 4. */
+#define PBF_REG_P4_TQ_OCCUPANCY					 0x140304
+/* [RW 7] Interrupt mask register #0 read/write */
+#define PBF_REG_PBF_INT_MASK					 0x1401d4
+/* [R 7] Interrupt register #0 read */
+#define PBF_REG_PBF_INT_STS					 0x1401c8
+/* [RW 28] Parity mask register #0 read/write */
+#define PBF_REG_PBF_PRTY_MASK					 0x1401e4
+/* [RC 28] Parity register #0 read clear */
+#define PBF_REG_PBF_PRTY_STS_CLR				 0x1401dc
+/* [RW 16] The Ethernet type value for L2 tag 0 */
+#define PBF_REG_TAG_ETHERTYPE_0					 0x15c090
+/* [RW 4] The length of the info field for L2 tag 0. The length is between
+ * 2B and 14B; in 2B granularity */
+#define PBF_REG_TAG_LEN_0					 0x15c09c
+/* [R 8] Number of tasks in queue 0 task queue. */
+#define PBF_REG_TASK_CNT_LB_Q					 0x140370
+/* [R 8] Number of tasks in queue 0 task queue. */
+#define PBF_REG_TASK_CNT_Q0					 0x140374
+/* [R 8] Number of tasks in queue 0 task queue. */
+#define PBF_REG_TASK_CNT_Q1					 0x140378
+/* [R 8] Number of tasks in queue 0 task queue. */
+#define PBF_REG_TASK_CNT_Q2					 0x14037c
+/* [R 8] Number of tasks in queue 0 task queue. */
+#define PBF_REG_TASK_CNT_Q3					 0x140380
+/* [R 8] Number of tasks in queue 0 task queue. */
+#define PBF_REG_TASK_CNT_Q4					 0x140384
+/* [R 8] Number of tasks in queue 0 task queue. */
+#define PBF_REG_TASK_CNT_Q5					 0x140388
+/* [R 32] Cyclic counter for number of 8 byte lines freed from the LB task
+ * queue. Reset upon init. */
+#define PBF_REG_TQ_LINES_FREED_CNT_LB_Q				 0x14038c
+/* [R 32] Cyclic counter for number of 8 byte lines freed from the task
+ * queue 0. Reset upon init. */
+#define PBF_REG_TQ_LINES_FREED_CNT_Q0				 0x140390
+/* [R 32] Cyclic counter for number of 8 byte lines freed from task queue 1.
+ * Reset upon init. */
+#define PBF_REG_TQ_LINES_FREED_CNT_Q1				 0x140394
+/* [R 13] Number of 8 bytes lines occupied in the task queue of the LB
+ * queue. */
+#define PBF_REG_TQ_OCCUPANCY_LB_Q				 0x1403a8
+/* [R 13] Number of 8 bytes lines occupied in the task queue of queue 0. */
+#define PBF_REG_TQ_OCCUPANCY_Q0					 0x1403ac
+/* [R 13] Number of 8 bytes lines occupied in the task queue of queue 1. */
+#define PBF_REG_TQ_OCCUPANCY_Q1					 0x1403b0
+/* [RW 2] Interrupt mask register #0 read/write */
+#define PB_REG_PB_INT_MASK					 0x28
+/* [R 2] Interrupt register #0 read */
+#define PB_REG_PB_INT_STS					 0x1c
+/* [RW 4] Parity mask register #0 read/write */
+#define PB_REG_PB_PRTY_MASK					 0x38
+/* [R 4] Parity register #0 read */
+#define PB_REG_PB_PRTY_STS					 0x2c
+/* [RC 4] Parity register #0 read clear */
+#define PB_REG_PB_PRTY_STS_CLR					 0x30
+#define PGLUE_B_PGLUE_B_INT_STS_REG_ADDRESS_ERROR		 (0x1<<0)
+#define PGLUE_B_PGLUE_B_INT_STS_REG_CSSNOOP_FIFO_OVERFLOW	 (0x1<<8)
+#define PGLUE_B_PGLUE_B_INT_STS_REG_INCORRECT_RCV_BEHAVIOR	 (0x1<<1)
+#define PGLUE_B_PGLUE_B_INT_STS_REG_TCPL_ERROR_ATTN		 (0x1<<6)
+#define PGLUE_B_PGLUE_B_INT_STS_REG_TCPL_IN_TWO_RCBS_ATTN	 (0x1<<7)
+#define PGLUE_B_PGLUE_B_INT_STS_REG_VF_GRC_SPACE_VIOLATION_ATTN	 (0x1<<4)
+#define PGLUE_B_PGLUE_B_INT_STS_REG_VF_LENGTH_VIOLATION_ATTN	 (0x1<<3)
+#define PGLUE_B_PGLUE_B_INT_STS_REG_VF_MSIX_BAR_VIOLATION_ATTN	 (0x1<<5)
+#define PGLUE_B_PGLUE_B_INT_STS_REG_WAS_ERROR_ATTN		 (0x1<<2)
+/* [R 8] Config space A attention dirty bits. Each bit indicates that the
+ * corresponding PF generates config space A attention. Set by PXP. Reset by
+ * MCP writing 1 to icfg_space_a_request_clr. Note: register contains bits
+ * from both paths. */
+#define PGLUE_B_REG_CFG_SPACE_A_REQUEST				 0x9010
+/* [R 8] Config space B attention dirty bits. Each bit indicates that the
+ * corresponding PF generates config space B attention. Set by PXP. Reset by
+ * MCP writing 1 to icfg_space_b_request_clr. Note: register contains bits
+ * from both paths. */
+#define PGLUE_B_REG_CFG_SPACE_B_REQUEST				 0x9014
+/* [R 8] FLR request attention dirty bits for PFs 0 to 7. Each bit indicates
+ * that the FLR register of the corresponding PF was set. Set by PXP. Reset
+ * by MCP writing 1 to flr_request_pf_7_0_clr. Note: register contains bits
+ * from both paths. */
+#define PGLUE_B_REG_FLR_REQUEST_PF_7_0				 0x9028
+/* [W 8] FLR request attention dirty bits clear for PFs 0 to 7. MCP writes 1
+ * to a bit in this register in order to clear the corresponding bit in
+ * flr_request_pf_7_0 register. Note: register contains bits from both
+ * paths. */
+#define PGLUE_B_REG_FLR_REQUEST_PF_7_0_CLR			 0x9418
+/* [R 32] FLR request attention dirty bits for VFs 96 to 127. Each bit
+ * indicates that the FLR register of the corresponding VF was set. Set by
+ * PXP. Reset by MCP writing 1 to flr_request_vf_127_96_clr. */
+#define PGLUE_B_REG_FLR_REQUEST_VF_127_96			 0x9024
+/* [R 32] FLR request attention dirty bits for VFs 0 to 31. Each bit
+ * indicates that the FLR register of the corresponding VF was set. Set by
+ * PXP. Reset by MCP writing 1 to flr_request_vf_31_0_clr. */
+#define PGLUE_B_REG_FLR_REQUEST_VF_31_0				 0x9018
+/* [R 32] FLR request attention dirty bits for VFs 32 to 63. Each bit
+ * indicates that the FLR register of the corresponding VF was set. Set by
+ * PXP. Reset by MCP writing 1 to flr_request_vf_63_32_clr. */
+#define PGLUE_B_REG_FLR_REQUEST_VF_63_32			 0x901c
+/* [R 32] FLR request attention dirty bits for VFs 64 to 95. Each bit
+ * indicates that the FLR register of the corresponding VF was set. Set by
+ * PXP. Reset by MCP writing 1 to flr_request_vf_95_64_clr. */
+#define PGLUE_B_REG_FLR_REQUEST_VF_95_64			 0x9020
+/* [R 8] Each bit indicates an incorrect behavior in user RX interface. Bit
+ * 0 - Target memory read arrived with a correctable error. Bit 1 - Target
+ * memory read arrived with an uncorrectable error. Bit 2 - Configuration RW
+ * arrived with a correctable error. Bit 3 - Configuration RW arrived with
+ * an uncorrectable error. Bit 4 - Completion with Configuration Request
+ * Retry Status. Bit 5 - Expansion ROM access received with a write request.
+ * Bit 6 - Completion with pcie_rx_err of 0000; CMPL_STATUS of non-zero; and
+ * pcie_rx_last not asserted. Bit 7 - Completion with pcie_rx_err of 1010;
+ * and pcie_rx_last not asserted. */
+#define PGLUE_B_REG_INCORRECT_RCV_DETAILS			 0x9068
+#define PGLUE_B_REG_INTERNAL_PFID_ENABLE_MASTER			 0x942c
+#define PGLUE_B_REG_INTERNAL_PFID_ENABLE_TARGET_READ		 0x9430
+#define PGLUE_B_REG_INTERNAL_VFID_ENABLE			 0x9438
+/* [R 11] Interrupt register #0 read */
+#define PGLUE_B_REG_PGLUE_B_INT_STS				 0x9298
+/* [RC 11] Interrupt register #0 read clear */
+#define PGLUE_B_REG_PGLUE_B_INT_STS_CLR				 0x929c
+/* [RW 2] Parity mask register #0 read/write */
+#define PGLUE_B_REG_PGLUE_B_PRTY_MASK				 0x92b4
+/* [R 2] Parity register #0 read */
+#define PGLUE_B_REG_PGLUE_B_PRTY_STS				 0x92a8
+/* [RC 2] Parity register #0 read clear */
+#define PGLUE_B_REG_PGLUE_B_PRTY_STS_CLR			 0x92ac
+/* [R 13] Details of first request received with error. [2:0] - PFID. [3] -
+ * VF_VALID. [9:4] - VFID. [11:10] - Error Code - 0 - Indicates Completion
+ * Timeout of a User Tx non-posted request. 1 - unsupported request. 2 -
+ * completer abort. 3 - Illegal value for this field. [12] valid - indicates
+ * if there was a completion error since the last time this register was
+ * cleared. */
+#define PGLUE_B_REG_RX_ERR_DETAILS				 0x9080
+/* [R 18] Details of first ATS Translation Completion request received with
+ * error. [2:0] - PFID. [3] - VF_VALID. [9:4] - VFID. [11:10] - Error Code -
+ * 0 - Indicates Completion Timeout of a User Tx non-posted request. 1 -
+ * unsupported request. 2 - completer abort. 3 - Illegal value for this
+ * field. [16:12] - ATC OTB EntryID. [17] valid - indicates if there was a
+ * completion error since the last time this register was cleared. */
+#define PGLUE_B_REG_RX_TCPL_ERR_DETAILS				 0x9084
+/* [W 8] Debug only - Shadow BME bits clear for PFs 0 to 7. MCP writes 1 to
+ * a bit in this register in order to clear the corresponding bit in
+ * shadow_bme_pf_7_0 register. MCP should never use this unless a
+ * work-around is needed. Note: register contains bits from both paths. */
+#define PGLUE_B_REG_SHADOW_BME_PF_7_0_CLR			 0x9458
+/* [R 8] SR IOV disabled attention dirty bits. Each bit indicates that the
+ * VF enable register of the corresponding PF is written to 0 and was
+ * previously 1. Set by PXP. Reset by MCP writing 1 to
+ * sr_iov_disabled_request_clr. Note: register contains bits from both
+ * paths. */
+#define PGLUE_B_REG_SR_IOV_DISABLED_REQUEST			 0x9030
+/* [R 32] Indicates the status of tags 32-63. 0 - tags is used - read
+ * completion did not return yet. 1 - tag is unused. Same functionality as
+ * pxp2_registers_pgl_exp_rom_data2 for tags 0-31. */
+#define PGLUE_B_REG_TAGS_63_32					 0x9244
+/* [R 32] Address [31:0] of first read request not submitted due to error */
+#define PGLUE_B_REG_TX_ERR_RD_ADD_31_0				 0x9098
+/* [R 32] Address [63:32] of first read request not submitted due to error */
+#define PGLUE_B_REG_TX_ERR_RD_ADD_63_32				 0x909c
+/* [R 31] Details of first read request not submitted due to error. [4:0]
+ * VQID. [5] TREQ. 1 - Indicates the request is a Translation Request.
+ * [20:8] - Length in bytes. [23:21] - PFID. [24] - VF_VALID. [30:25] -
+ * VFID. */
+#define PGLUE_B_REG_TX_ERR_RD_DETAILS				 0x90a0
+/* [R 26] Details of first read request not submitted due to error. [15:0]
+ * Request ID. [19:16] client ID. [20] - last SR. [24:21] - Error type -
+ * [21] - Indicates was_error was set; [22] - Indicates BME was cleared;
+ * [23] - Indicates FID_enable was cleared; [24] - Indicates VF with parent
+ * PF FLR_request or IOV_disable_request dirty bit is set. [25] valid -
+ * indicates if there was a request not submitted due to error since the
+ * last time this register was cleared. */
+#define PGLUE_B_REG_TX_ERR_RD_DETAILS2				 0x90a4
+/* [R 32] Address [31:0] of first write request not submitted due to error */
+#define PGLUE_B_REG_TX_ERR_WR_ADD_31_0				 0x9088
+/* [R 32] Address [63:32] of first write request not submitted due to error */
+#define PGLUE_B_REG_TX_ERR_WR_ADD_63_32				 0x908c
+/* [R 31] Details of first write request not submitted due to error. [4:0]
+ * VQID. [20:8] - Length in bytes. [23:21] - PFID. [24] - VF_VALID. [30:25]
+ * - VFID. */
+#define PGLUE_B_REG_TX_ERR_WR_DETAILS				 0x9090
+/* [R 26] Details of first write request not submitted due to error. [15:0]
+ * Request ID. [19:16] client ID. [20] - last SR. [24:21] - Error type -
+ * [21] - Indicates was_error was set; [22] - Indicates BME was cleared;
+ * [23] - Indicates FID_enable was cleared; [24] - Indicates VF with parent
+ * PF FLR_request or IOV_disable_request dirty bit is set. [25] valid -
+ * indicates if there was a request not submitted due to error since the
+ * last time this register was cleared. */
+#define PGLUE_B_REG_TX_ERR_WR_DETAILS2				 0x9094
+/* [R 26] Details of first target VF request accessing VF GRC space that
+ * failed permission check. [14:0] Address. [15] w_nr: 0 - Read; 1 - Write.
+ * [21:16] VFID. [24:22] - PFID. [25] valid - indicates if there was a
+ * request accessing VF GRC space that failed permission check since the
+ * last time this register was cleared. Permission checks are: function
+ * permission; R/W permission; address range permission. */
+#define PGLUE_B_REG_VF_GRC_SPACE_VIOLATION_DETAILS		 0x9234
+/* [R 31] Details of first target VF request with length violation (too many
+ * DWs) accessing BAR0. [12:0] Address in DWs (bits [14:2] of byte address).
+ * [14:13] BAR. [20:15] VFID. [23:21] - PFID. [29:24] - Length in DWs. [30]
+ * valid - indicates if there was a request with length violation since the
+ * last time this register was cleared. Length violations: length of more
+ * than 2DWs; length of 2DWs and address not QW aligned; window is GRC and
+ * length is more than 1 DW. */
+#define PGLUE_B_REG_VF_LENGTH_VIOLATION_DETAILS			 0x9230
+/* [R 8] Was_error indication dirty bits for PFs 0 to 7. Each bit indicates
+ * that there was a completion with uncorrectable error for the
+ * corresponding PF. Set by PXP. Reset by MCP writing 1 to
+ * was_error_pf_7_0_clr. */
+#define PGLUE_B_REG_WAS_ERROR_PF_7_0				 0x907c
+/* [W 8] Was_error indication dirty bits clear for PFs 0 to 7. MCP writes 1
+ * to a bit in this register in order to clear the corresponding bit in
+ * flr_request_pf_7_0 register. */
+#define PGLUE_B_REG_WAS_ERROR_PF_7_0_CLR			 0x9470
+/* [R 32] Was_error indication dirty bits for VFs 96 to 127. Each bit
+ * indicates that there was a completion with uncorrectable error for the
+ * corresponding VF. Set by PXP. Reset by MCP writing 1 to
+ * was_error_vf_127_96_clr. */
+#define PGLUE_B_REG_WAS_ERROR_VF_127_96				 0x9078
+/* [W 32] Was_error indication dirty bits clear for VFs 96 to 127. MCP
+ * writes 1 to a bit in this register in order to clear the corresponding
+ * bit in was_error_vf_127_96 register. */
+#define PGLUE_B_REG_WAS_ERROR_VF_127_96_CLR			 0x9474
+/* [R 32] Was_error indication dirty bits for VFs 0 to 31. Each bit
+ * indicates that there was a completion with uncorrectable error for the
+ * corresponding VF. Set by PXP. Reset by MCP writing 1 to
+ * was_error_vf_31_0_clr. */
+#define PGLUE_B_REG_WAS_ERROR_VF_31_0				 0x906c
+/* [W 32] Was_error indication dirty bits clear for VFs 0 to 31. MCP writes
+ * 1 to a bit in this register in order to clear the corresponding bit in
+ * was_error_vf_31_0 register. */
+#define PGLUE_B_REG_WAS_ERROR_VF_31_0_CLR			 0x9478
+/* [R 32] Was_error indication dirty bits for VFs 32 to 63. Each bit
+ * indicates that there was a completion with uncorrectable error for the
+ * corresponding VF. Set by PXP. Reset by MCP writing 1 to
+ * was_error_vf_63_32_clr. */
+#define PGLUE_B_REG_WAS_ERROR_VF_63_32				 0x9070
+/* [W 32] Was_error indication dirty bits clear for VFs 32 to 63. MCP writes
+ * 1 to a bit in this register in order to clear the corresponding bit in
+ * was_error_vf_63_32 register. */
+#define PGLUE_B_REG_WAS_ERROR_VF_63_32_CLR			 0x947c
+/* [R 32] Was_error indication dirty bits for VFs 64 to 95. Each bit
+ * indicates that there was a completion with uncorrectable error for the
+ * corresponding VF. Set by PXP. Reset by MCP writing 1 to
+ * was_error_vf_95_64_clr. */
+#define PGLUE_B_REG_WAS_ERROR_VF_95_64				 0x9074
+/* [W 32] Was_error indication dirty bits clear for VFs 64 to 95. MCP writes
+ * 1 to a bit in this register in order to clear the corresponding bit in
+ * was_error_vf_95_64 register. */
+#define PGLUE_B_REG_WAS_ERROR_VF_95_64_CLR			 0x9480
+#define PRS_REG_A_PRSU_20					 0x40134
+/* [R 8] debug only: CFC load request current credit. Transaction based. */
+#define PRS_REG_CFC_LD_CURRENT_CREDIT				 0x40164
+/* [R 8] debug only: CFC search request current credit. Transaction based. */
+#define PRS_REG_CFC_SEARCH_CURRENT_CREDIT			 0x40168
+/* [RW 6] The initial credit for the search message to the CFC interface.
+ * Credit is transaction based. */
+#define PRS_REG_CFC_SEARCH_INITIAL_CREDIT			 0x4011c
+/* [RW 24] CID for port 0 if no match */
+#define PRS_REG_CID_PORT_0					 0x400fc
+/* [RW 1] Indicates if in outer vlan mode. 0=non-outer-vlan mode; 1=outer
+ * vlan mode. */
+#define PRS_REG_E1HOV_MODE					 0x401c8
+/* [R 6] Bit-map indicating which L2 hdrs may appear after the basic
+ * Ethernet header. */
+#define PRS_REG_HDRS_AFTER_BASIC				 0x40238
+/* [RW 6] Bit-map indicating which L2 hdrs may appear after the basic
+ * Ethernet header for port 0 packets. */
+#define PRS_REG_HDRS_AFTER_BASIC_PORT_0				 0x40270
+#define PRS_REG_HDRS_AFTER_BASIC_PORT_1				 0x40290
+/* [R 6] Bit-map indicating which L2 hdrs may appear after L2 tag 0 */
+#define PRS_REG_HDRS_AFTER_TAG_0				 0x40248
+/* [RW 6] Bit-map indicating which L2 hdrs may appear after L2 tag 0 for
+ * port 0 packets */
+#define PRS_REG_HDRS_AFTER_TAG_0_PORT_0				 0x40280
+#define PRS_REG_HDRS_AFTER_TAG_0_PORT_1				 0x402a0
+/* [R 6] Bit-map indicating which headers must appear in the packet */
+#define PRS_REG_MUST_HAVE_HDRS					 0x40254
+/* [RW 6] Bit-map indicating which headers must appear in the packet for
+ * port 0 packets */
+#define PRS_REG_MUST_HAVE_HDRS_PORT_0				 0x4028c
+#define PRS_REG_MUST_HAVE_HDRS_PORT_1				 0x402ac
+#define PRS_REG_NIC_MODE					 0x40138
+/* [ST 24] The number of input packets */
+#define PRS_REG_NUM_OF_PACKETS					 0x40124
+/* [R 2] debug only: Number of pending requests for CAC on port 0. */
+#define PRS_REG_PENDING_BRB_CAC0_RQ				 0x40174
+/* [R 2] debug only: Number of pending requests for header parsing. */
+#define PRS_REG_PENDING_BRB_PRS_RQ				 0x40170
+/* [R 1] Interrupt register #0 read */
+#define PRS_REG_PRS_INT_STS					 0x40188
+/* [RW 8] Parity mask register #0 read/write */
+#define PRS_REG_PRS_PRTY_MASK					 0x401a4
+/* [R 8] Parity register #0 read */
+#define PRS_REG_PRS_PRTY_STS					 0x40198
+/* [RC 8] Parity register #0 read clear */
+#define PRS_REG_PRS_PRTY_STS_CLR				 0x4019c
+/* [R 32] debug only: Serial number status lsb 32 bits. '1' indicates this
+ * serail number was released by SDM but cannot be used because a previous
+ * serial number was not released. */
+#define PRS_REG_SERIAL_NUM_STATUS_LSB				 0x40154
+/* [R 32] debug only: Serial number status msb 32 bits. '1' indicates this
+ * serail number was released by SDM but cannot be used because a previous
+ * serial number was not released. */
+#define PRS_REG_SERIAL_NUM_STATUS_MSB				 0x40158
+/* [R 4] debug only: SRC current credit. Transaction based. */
+#define PRS_REG_SRC_CURRENT_CREDIT				 0x4016c
+/* [RW 16] The Ethernet type value for L2 tag 0 */
+#define PRS_REG_TAG_ETHERTYPE_0					 0x401d4
+/* [RW 4] The length of the info field for L2 tag 0. The length is between
+ * 2B and 14B; in 2B granularity */
+#define PRS_REG_TAG_LEN_0					 0x4022c
+/* [R 8] debug only: TCM current credit. Cycle based. */
+#define PRS_REG_TCM_CURRENT_CREDIT				 0x40160
+/* [R 8] debug only: TSDM current credit. Transaction based. */
+#define PRS_REG_TSDM_CURRENT_CREDIT				 0x4015c
+#define PXP2_PXP2_INT_MASK_0_REG_PGL_CPL_AFT			 (0x1<<19)
+#define PXP2_PXP2_INT_MASK_0_REG_PGL_CPL_OF			 (0x1<<20)
+#define PXP2_PXP2_INT_MASK_0_REG_PGL_PCIE_ATTN			 (0x1<<22)
+#define PXP2_PXP2_INT_MASK_0_REG_PGL_READ_BLOCKED		 (0x1<<23)
+#define PXP2_PXP2_INT_MASK_0_REG_PGL_WRITE_BLOCKED		 (0x1<<24)
+#define PXP2_PXP2_INT_STS_0_REG_WR_PGLUE_EOP_ERROR		 (0x1<<7)
+#define PXP2_PXP2_INT_STS_CLR_0_REG_WR_PGLUE_EOP_ERROR		 (0x1<<7)
+/* [R 7] Debug only: Number of used entries in the data FIFO */
+#define PXP2_REG_HST_DATA_FIFO_STATUS				 0x12047c
+/* [R 7] Debug only: Number of used entries in the header FIFO */
+#define PXP2_REG_HST_HEADER_FIFO_STATUS				 0x120478
+#define PXP2_REG_PGL_ADDR_88_F0					 0x120534
+/* [R 32] GRC address for configuration access to PCIE config address 0x88.
+ * any write to this PCIE address will cause a GRC write access to the
+ * address that's in t this register */
+#define PXP2_REG_PGL_ADDR_88_F1					 0x120544
+#define PXP2_REG_PGL_ADDR_8C_F0					 0x120538
+/* [R 32] GRC address for configuration access to PCIE config address 0x8c.
+ * any write to this PCIE address will cause a GRC write access to the
+ * address that's in t this register */
+#define PXP2_REG_PGL_ADDR_8C_F1					 0x120548
+#define PXP2_REG_PGL_ADDR_90_F0					 0x12053c
+/* [R 32] GRC address for configuration access to PCIE config address 0x90.
+ * any write to this PCIE address will cause a GRC write access to the
+ * address that's in t this register */
+#define PXP2_REG_PGL_ADDR_90_F1					 0x12054c
+#define PXP2_REG_PGL_ADDR_94_F0					 0x120540
+/* [R 32] GRC address for configuration access to PCIE config address 0x94.
+ * any write to this PCIE address will cause a GRC write access to the
+ * address that's in t this register */
+#define PXP2_REG_PGL_ADDR_94_F1					 0x120550
+/* [RW 32] third dword data of expansion rom request. this register is
+ * special. reading from it provides a vector outstanding read requests. if
+ * a bit is zero it means that a read request on the corresponding tag did
+ * not finish yet (not all completions have arrived for it) */
+#define PXP2_REG_PGL_EXP_ROM2					 0x120808
+/* [RW 16] this field allows one function to pretend being another function
+ * when accessing any BAR mapped resource within the device. the value of
+ * the field is the number of the function that will be accessed
+ * effectively. after software write to this bit it must read it in order to
+ * know that the new value is updated. Bits [15] - force. Bits [14] - path
+ * ID. Bits [13:10] - Reserved. Bits [9:4] - VFID. Bits [3] - VF valid. Bits
+ * [2:0] - PFID. */
+#define PXP2_REG_PGL_PRETEND_FUNC_F0				 0x120674
+/* [RW 16] this field allows one function to pretend being another function
+ * when accessing any BAR mapped resource within the device. the value of
+ * the field is the number of the function that will be accessed
+ * effectively. after software write to this bit it must read it in order to
+ * know that the new value is updated. Bits [15] - force. Bits [14] - path
+ * ID. Bits [13:10] - Reserved. Bits [9:4] - VFID. Bits [3] - VF valid. Bits
+ * [2:0] - PFID. */
+#define PXP2_REG_PGL_PRETEND_FUNC_F1				 0x120678
+/* [RW 16] this field allows one function to pretend being another function
+ * when accessing any BAR mapped resource within the device. the value of
+ * the field is the number of the function that will be accessed
+ * effectively. after software write to this bit it must read it in order to
+ * know that the new value is updated. Bits [15] - force. Bits [14] - path
+ * ID. Bits [13:10] - Reserved. Bits [9:4] - VFID. Bits [3] - VF valid. Bits
+ * [2:0] - PFID. */
+#define PXP2_REG_PGL_PRETEND_FUNC_F2				 0x12067c
+/* [RW 16] this field allows one function to pretend being another function
+ * when accessing any BAR mapped resource within the device. the value of
+ * the field is the number of the function that will be accessed
+ * effectively. after software write to this bit it must read it in order to
+ * know that the new value is updated. Bits [15] - force. Bits [14] - path
+ * ID. Bits [13:10] - Reserved. Bits [9:4] - VFID. Bits [3] - VF valid. Bits
+ * [2:0] - PFID. */
+#define PXP2_REG_PGL_PRETEND_FUNC_F3				 0x120680
+/* [RW 16] this field allows one function to pretend being another function
+ * when accessing any BAR mapped resource within the device. the value of
+ * the field is the number of the function that will be accessed
+ * effectively. after software write to this bit it must read it in order to
+ * know that the new value is updated. Bits [15] - force. Bits [14] - path
+ * ID. Bits [13:10] - Reserved. Bits [9:4] - VFID. Bits [3] - VF valid. Bits
+ * [2:0] - PFID. */
+#define PXP2_REG_PGL_PRETEND_FUNC_F4				 0x120684
+/* [RW 16] this field allows one function to pretend being another function
+ * when accessing any BAR mapped resource within the device. the value of
+ * the field is the number of the function that will be accessed
+ * effectively. after software write to this bit it must read it in order to
+ * know that the new value is updated. Bits [15] - force. Bits [14] - path
+ * ID. Bits [13:10] - Reserved. Bits [9:4] - VFID. Bits [3] - VF valid. Bits
+ * [2:0] - PFID. */
+#define PXP2_REG_PGL_PRETEND_FUNC_F5				 0x120688
+/* [RW 16] this field allows one function to pretend being another function
+ * when accessing any BAR mapped resource within the device. the value of
+ * the field is the number of the function that will be accessed
+ * effectively. after software write to this bit it must read it in order to
+ * know that the new value is updated. Bits [15] - force. Bits [14] - path
+ * ID. Bits [13:10] - Reserved. Bits [9:4] - VFID. Bits [3] - VF valid. Bits
+ * [2:0] - PFID. */
+#define PXP2_REG_PGL_PRETEND_FUNC_F6				 0x12068c
+/* [RW 16] this field allows one function to pretend being another function
+ * when accessing any BAR mapped resource within the device. the value of
+ * the field is the number of the function that will be accessed
+ * effectively. after software write to this bit it must read it in order to
+ * know that the new value is updated. Bits [15] - force. Bits [14] - path
+ * ID. Bits [13:10] - Reserved. Bits [9:4] - VFID. Bits [3] - VF valid. Bits
+ * [2:0] - PFID. */
+#define PXP2_REG_PGL_PRETEND_FUNC_F7				 0x120690
+/* [R 1] this bit indicates that a read request was blocked because of
+ * bus_master_en was deasserted */
+#define PXP2_REG_PGL_READ_BLOCKED				 0x120568
+#define PXP2_REG_PGL_TAGS_LIMIT					 0x1205a8
+/* [R 21] debug only */
+#define PXP2_REG_PGL_TXW_CDTS					 0x12052c
+/* [R 1] this bit indicates that a write request was blocked because of
+ * bus_master_en was deasserted */
+#define PXP2_REG_PGL_WRITE_BLOCKED				 0x120564
+#define PXP2_REG_PSWRQ_BW_ADD1					 0x1201c0
+#define PXP2_REG_PSWRQ_BW_ADD10					 0x1201e4
+#define PXP2_REG_PSWRQ_BW_ADD11					 0x1201e8
+#define PXP2_REG_PSWRQ_BW_ADD2					 0x1201c4
+#define PXP2_REG_PSWRQ_BW_ADD28					 0x120228
+#define PXP2_REG_PSWRQ_BW_ADD3					 0x1201c8
+#define PXP2_REG_PSWRQ_BW_ADD6					 0x1201d4
+#define PXP2_REG_PSWRQ_BW_ADD7					 0x1201d8
+#define PXP2_REG_PSWRQ_BW_ADD8					 0x1201dc
+#define PXP2_REG_PSWRQ_BW_ADD9					 0x1201e0
+#define PXP2_REG_PSWRQ_BW_CREDIT				 0x12032c
+#define PXP2_REG_PSWRQ_BW_L1					 0x1202b0
+#define PXP2_REG_PSWRQ_BW_L10					 0x1202d4
+#define PXP2_REG_PSWRQ_BW_L11					 0x1202d8
+#define PXP2_REG_PSWRQ_BW_L2					 0x1202b4
+#define PXP2_REG_PSWRQ_BW_L28					 0x120318
+#define PXP2_REG_PSWRQ_BW_L3					 0x1202b8
+#define PXP2_REG_PSWRQ_BW_L6					 0x1202c4
+#define PXP2_REG_PSWRQ_BW_L7					 0x1202c8
+#define PXP2_REG_PSWRQ_BW_L8					 0x1202cc
+#define PXP2_REG_PSWRQ_BW_L9					 0x1202d0
+#define PXP2_REG_PSWRQ_BW_RD					 0x120324
+#define PXP2_REG_PSWRQ_BW_UB1					 0x120238
+#define PXP2_REG_PSWRQ_BW_UB10					 0x12025c
+#define PXP2_REG_PSWRQ_BW_UB11					 0x120260
+#define PXP2_REG_PSWRQ_BW_UB2					 0x12023c
+#define PXP2_REG_PSWRQ_BW_UB28					 0x1202a0
+#define PXP2_REG_PSWRQ_BW_UB3					 0x120240
+#define PXP2_REG_PSWRQ_BW_UB6					 0x12024c
+#define PXP2_REG_PSWRQ_BW_UB7					 0x120250
+#define PXP2_REG_PSWRQ_BW_UB8					 0x120254
+#define PXP2_REG_PSWRQ_BW_UB9					 0x120258
+#define PXP2_REG_PSWRQ_BW_WR					 0x120328
+#define PXP2_REG_PSWRQ_CDU0_L2P					 0x120000
+#define PXP2_REG_PSWRQ_QM0_L2P					 0x120038
+#define PXP2_REG_PSWRQ_SRC0_L2P					 0x120054
+#define PXP2_REG_PSWRQ_TM0_L2P					 0x12001c
+#define PXP2_REG_PSWRQ_TSDM0_L2P				 0x1200e0
+/* [RW 32] Interrupt mask register #0 read/write */
+#define PXP2_REG_PXP2_INT_MASK_0				 0x120578
+#define PXP2_REG_PXP2_INT_MASK_1				 0x120614
+/* [R 32] Interrupt register #0 read */
+#define PXP2_REG_PXP2_INT_STS_0					 0x12056c
+#define PXP2_REG_PXP2_INT_STS_1					 0x120608
+/* [RC 32] Interrupt register #0 read clear */
+#define PXP2_REG_PXP2_INT_STS_CLR_0				 0x120570
+/* [RW 32] Parity mask register #0 read/write */
+#define PXP2_REG_PXP2_PRTY_MASK_0				 0x120588
+#define PXP2_REG_PXP2_PRTY_MASK_1				 0x120598
+/* [R 32] Parity register #0 read */
+#define PXP2_REG_PXP2_PRTY_STS_0				 0x12057c
+#define PXP2_REG_PXP2_PRTY_STS_1				 0x12058c
+/* [RC 32] Parity register #0 read clear */
+#define PXP2_REG_PXP2_PRTY_STS_CLR_0				 0x120580
+#define PXP2_REG_PXP2_PRTY_STS_CLR_1				 0x120590
+/* [R 1] Debug only: The 'almost full' indication from each fifo (gives
+ * indication about backpressure) */
+#define PXP2_REG_RD_ALMOST_FULL_0				 0x120424
+/* [R 8] Debug only: The blocks counter - number of unused block ids */
+#define PXP2_REG_RD_BLK_CNT					 0x120418
+/* [RW 8] Debug only: Total number of available blocks in Tetris Buffer.
+ * Must be bigger than 6. Normally should not be changed. */
+#define PXP2_REG_RD_BLK_NUM_CFG					 0x12040c
+/* [RW 2] CDU byte swapping mode configuration for master read requests */
+#define PXP2_REG_RD_CDURD_SWAP_MODE				 0x120404
+/* [R 29] Details of first request with error on receive side: [15:0] - Echo
+ * ID. [28:16] - sub-request length plus start_offset_2_0 minus 1. */
+#define PXP2_REG_RD_CPL_ERR_DETAILS				 0x120778
+/* [R 10] Details of first request with error on receive side: [4:0] - VQ
+ * ID. [8:5] - client ID. [9] - valid - indicates if there was a completion
+ * error since the last time this register was read. */
+#define PXP2_REG_RD_CPL_ERR_DETAILS2				 0x12077c
+/* [RW 1] When '1'; inputs to the PSWRD block are ignored */
+#define PXP2_REG_RD_DISABLE_INPUTS				 0x120374
+/* [R 1] PSWRD internal memories initialization is done */
+#define PXP2_REG_RD_INIT_DONE					 0x120370
+/* [RW 2] PBF byte swapping mode configuration for master read requests */
+#define PXP2_REG_RD_PBF_SWAP_MODE				 0x1203f4
+/* [R 1] Debug only: Indication if delivery ports are idle */
+#define PXP2_REG_RD_PORT_IS_IDLE_0				 0x12041c
+#define PXP2_REG_RD_PORT_IS_IDLE_1				 0x120420
+/* [RW 2] QM byte swapping mode configuration for master read requests */
+#define PXP2_REG_RD_QM_SWAP_MODE				 0x1203f8
+/* [RW 2] SRC byte swapping mode configuration for master read requests */
+#define PXP2_REG_RD_SRC_SWAP_MODE				 0x120400
+/* [R 7] Debug only: The SR counter - number of unused sub request ids */
+#define PXP2_REG_RD_SR_CNT					 0x120414
+/* [RW 7] Debug only: Total number of available PCI read sub-requests. Must
+ * be bigger than 1. Normally should not be changed. */
+#define PXP2_REG_RD_SR_NUM_CFG					 0x120408
+/* [RW 1] Signals the PSWRD block to start initializing internal memories */
+#define PXP2_REG_RD_START_INIT					 0x12036c
+/* [RW 2] TM byte swapping mode configuration for master read requests */
+#define PXP2_REG_RD_TM_SWAP_MODE				 0x1203fc
+/* [RW 10] Bandwidth addition to VQ0 write requests */
+#define PXP2_REG_RQ_BW_RD_ADD0					 0x1201bc
+/* [RW 10] Bandwidth addition to VQ12 read requests */
+#define PXP2_REG_RQ_BW_RD_ADD12					 0x1201ec
+/* [RW 10] Bandwidth addition to VQ13 read requests */
+#define PXP2_REG_RQ_BW_RD_ADD13					 0x1201f0
+/* [RW 10] Bandwidth addition to VQ14 read requests */
+#define PXP2_REG_RQ_BW_RD_ADD14					 0x1201f4
+/* [RW 10] Bandwidth addition to VQ15 read requests */
+#define PXP2_REG_RQ_BW_RD_ADD15					 0x1201f8
+/* [RW 10] Bandwidth addition to VQ16 read requests */
+#define PXP2_REG_RQ_BW_RD_ADD16					 0x1201fc
+/* [RW 10] Bandwidth addition to VQ17 read requests */
+#define PXP2_REG_RQ_BW_RD_ADD17					 0x120200
+/* [RW 10] Bandwidth addition to VQ18 read requests */
+#define PXP2_REG_RQ_BW_RD_ADD18					 0x120204
+/* [RW 10] Bandwidth addition to VQ19 read requests */
+#define PXP2_REG_RQ_BW_RD_ADD19					 0x120208
+/* [RW 10] Bandwidth addition to VQ20 read requests */
+#define PXP2_REG_RQ_BW_RD_ADD20					 0x12020c
+/* [RW 10] Bandwidth addition to VQ22 read requests */
+#define PXP2_REG_RQ_BW_RD_ADD22					 0x120210
+/* [RW 10] Bandwidth addition to VQ23 read requests */
+#define PXP2_REG_RQ_BW_RD_ADD23					 0x120214
+/* [RW 10] Bandwidth addition to VQ24 read requests */
+#define PXP2_REG_RQ_BW_RD_ADD24					 0x120218
+/* [RW 10] Bandwidth addition to VQ25 read requests */
+#define PXP2_REG_RQ_BW_RD_ADD25					 0x12021c
+/* [RW 10] Bandwidth addition to VQ26 read requests */
+#define PXP2_REG_RQ_BW_RD_ADD26					 0x120220
+/* [RW 10] Bandwidth addition to VQ27 read requests */
+#define PXP2_REG_RQ_BW_RD_ADD27					 0x120224
+/* [RW 10] Bandwidth addition to VQ4 read requests */
+#define PXP2_REG_RQ_BW_RD_ADD4					 0x1201cc
+/* [RW 10] Bandwidth addition to VQ5 read requests */
+#define PXP2_REG_RQ_BW_RD_ADD5					 0x1201d0
+/* [RW 10] Bandwidth Typical L for VQ0 Read requests */
+#define PXP2_REG_RQ_BW_RD_L0					 0x1202ac
+/* [RW 10] Bandwidth Typical L for VQ12 Read requests */
+#define PXP2_REG_RQ_BW_RD_L12					 0x1202dc
+/* [RW 10] Bandwidth Typical L for VQ13 Read requests */
+#define PXP2_REG_RQ_BW_RD_L13					 0x1202e0
+/* [RW 10] Bandwidth Typical L for VQ14 Read requests */
+#define PXP2_REG_RQ_BW_RD_L14					 0x1202e4
+/* [RW 10] Bandwidth Typical L for VQ15 Read requests */
+#define PXP2_REG_RQ_BW_RD_L15					 0x1202e8
+/* [RW 10] Bandwidth Typical L for VQ16 Read requests */
+#define PXP2_REG_RQ_BW_RD_L16					 0x1202ec
+/* [RW 10] Bandwidth Typical L for VQ17 Read requests */
+#define PXP2_REG_RQ_BW_RD_L17					 0x1202f0
+/* [RW 10] Bandwidth Typical L for VQ18 Read requests */
+#define PXP2_REG_RQ_BW_RD_L18					 0x1202f4
+/* [RW 10] Bandwidth Typical L for VQ19 Read requests */
+#define PXP2_REG_RQ_BW_RD_L19					 0x1202f8
+/* [RW 10] Bandwidth Typical L for VQ20 Read requests */
+#define PXP2_REG_RQ_BW_RD_L20					 0x1202fc
+/* [RW 10] Bandwidth Typical L for VQ22 Read requests */
+#define PXP2_REG_RQ_BW_RD_L22					 0x120300
+/* [RW 10] Bandwidth Typical L for VQ23 Read requests */
+#define PXP2_REG_RQ_BW_RD_L23					 0x120304
+/* [RW 10] Bandwidth Typical L for VQ24 Read requests */
+#define PXP2_REG_RQ_BW_RD_L24					 0x120308
+/* [RW 10] Bandwidth Typical L for VQ25 Read requests */
+#define PXP2_REG_RQ_BW_RD_L25					 0x12030c
+/* [RW 10] Bandwidth Typical L for VQ26 Read requests */
+#define PXP2_REG_RQ_BW_RD_L26					 0x120310
+/* [RW 10] Bandwidth Typical L for VQ27 Read requests */
+#define PXP2_REG_RQ_BW_RD_L27					 0x120314
+/* [RW 10] Bandwidth Typical L for VQ4 Read requests */
+#define PXP2_REG_RQ_BW_RD_L4					 0x1202bc
+/* [RW 10] Bandwidth Typical L for VQ5 Read- currently not used */
+#define PXP2_REG_RQ_BW_RD_L5					 0x1202c0
+/* [RW 7] Bandwidth upper bound for VQ0 read requests */
+#define PXP2_REG_RQ_BW_RD_UBOUND0				 0x120234
+/* [RW 7] Bandwidth upper bound for VQ12 read requests */
+#define PXP2_REG_RQ_BW_RD_UBOUND12				 0x120264
+/* [RW 7] Bandwidth upper bound for VQ13 read requests */
+#define PXP2_REG_RQ_BW_RD_UBOUND13				 0x120268
+/* [RW 7] Bandwidth upper bound for VQ14 read requests */
+#define PXP2_REG_RQ_BW_RD_UBOUND14				 0x12026c
+/* [RW 7] Bandwidth upper bound for VQ15 read requests */
+#define PXP2_REG_RQ_BW_RD_UBOUND15				 0x120270
+/* [RW 7] Bandwidth upper bound for VQ16 read requests */
+#define PXP2_REG_RQ_BW_RD_UBOUND16				 0x120274
+/* [RW 7] Bandwidth upper bound for VQ17 read requests */
+#define PXP2_REG_RQ_BW_RD_UBOUND17				 0x120278
+/* [RW 7] Bandwidth upper bound for VQ18 read requests */
+#define PXP2_REG_RQ_BW_RD_UBOUND18				 0x12027c
+/* [RW 7] Bandwidth upper bound for VQ19 read requests */
+#define PXP2_REG_RQ_BW_RD_UBOUND19				 0x120280
+/* [RW 7] Bandwidth upper bound for VQ20 read requests */
+#define PXP2_REG_RQ_BW_RD_UBOUND20				 0x120284
+/* [RW 7] Bandwidth upper bound for VQ22 read requests */
+#define PXP2_REG_RQ_BW_RD_UBOUND22				 0x120288
+/* [RW 7] Bandwidth upper bound for VQ23 read requests */
+#define PXP2_REG_RQ_BW_RD_UBOUND23				 0x12028c
+/* [RW 7] Bandwidth upper bound for VQ24 read requests */
+#define PXP2_REG_RQ_BW_RD_UBOUND24				 0x120290
+/* [RW 7] Bandwidth upper bound for VQ25 read requests */
+#define PXP2_REG_RQ_BW_RD_UBOUND25				 0x120294
+/* [RW 7] Bandwidth upper bound for VQ26 read requests */
+#define PXP2_REG_RQ_BW_RD_UBOUND26				 0x120298
+/* [RW 7] Bandwidth upper bound for VQ27 read requests */
+#define PXP2_REG_RQ_BW_RD_UBOUND27				 0x12029c
+/* [RW 7] Bandwidth upper bound for VQ4 read requests */
+#define PXP2_REG_RQ_BW_RD_UBOUND4				 0x120244
+/* [RW 7] Bandwidth upper bound for VQ5 read requests */
+#define PXP2_REG_RQ_BW_RD_UBOUND5				 0x120248
+/* [RW 10] Bandwidth addition to VQ29 write requests */
+#define PXP2_REG_RQ_BW_WR_ADD29					 0x12022c
+/* [RW 10] Bandwidth addition to VQ30 write requests */
+#define PXP2_REG_RQ_BW_WR_ADD30					 0x120230
+/* [RW 10] Bandwidth Typical L for VQ29 Write requests */
+#define PXP2_REG_RQ_BW_WR_L29					 0x12031c
+/* [RW 10] Bandwidth Typical L for VQ30 Write requests */
+#define PXP2_REG_RQ_BW_WR_L30					 0x120320
+/* [RW 7] Bandwidth upper bound for VQ29 */
+#define PXP2_REG_RQ_BW_WR_UBOUND29				 0x1202a4
+/* [RW 7] Bandwidth upper bound for VQ30 */
+#define PXP2_REG_RQ_BW_WR_UBOUND30				 0x1202a8
+/* [RW 18] external first_mem_addr field in L2P table for CDU module port 0 */
+#define PXP2_REG_RQ_CDU0_EFIRST_MEM_ADDR			 0x120008
+/* [RW 2] Endian mode for cdu */
+#define PXP2_REG_RQ_CDU_ENDIAN_M				 0x1201a0
+#define PXP2_REG_RQ_CDU_FIRST_ILT				 0x12061c
+#define PXP2_REG_RQ_CDU_LAST_ILT				 0x120620
+/* [RW 4] page size in L2P table for CDU module; -4k; -8k; -16k; -32k; -64k;
+ * -128k; -256k; -512k; -1M; -2M; 0-4M */
+#define PXP2_REG_RQ_CDU_P_SIZE					 0x120018
+/* [R 1] 1' indicates that the requester has finished its internal
+ * configuration */
+#define PXP2_REG_RQ_CFG_DONE					 0x1201b4
+/* [RW 2] Endian mode for debug */
+#define PXP2_REG_RQ_DBG_ENDIAN_M				 0x1201a4
+/* [RW 1] When '1'; requests will enter input buffers but wont get out
+ * towards the glue */
+#define PXP2_REG_RQ_DISABLE_INPUTS				 0x120330
+/* [RW 4] Determines alignment of write SRs when a request is split into
+ * several SRs. 0 - 8B aligned. 1 - 64B aligned. 2 - 128B aligned. 3 - 256B
+ * aligned. 4 - 512B aligned. */
+#define PXP2_REG_RQ_DRAM_ALIGN					 0x1205b0
+/* [RW 4] Determines alignment of read SRs when a request is split into
+ * several SRs. 0 - 8B aligned. 1 - 64B aligned. 2 - 128B aligned. 3 - 256B
+ * aligned. 4 - 512B aligned. */
+#define PXP2_REG_RQ_DRAM_ALIGN_RD				 0x12092c
+/* [RW 1] when set the new alignment method (E2) will be applied; when reset
+ * the original alignment method (E1 E1H) will be applied */
+#define PXP2_REG_RQ_DRAM_ALIGN_SEL				 0x120930
+/* [RW 2] Endian mode for hc */
+#define PXP2_REG_RQ_HC_ENDIAN_M					 0x1201a8
+/* [WB 53] Onchip address table */
+#define PXP2_REG_RQ_ONCHIP_AT					 0x122000
+/* [WB 53] Onchip address table - B0 */
+#define PXP2_REG_RQ_ONCHIP_AT_B0				 0x128000
+/* [RW 13] Pending read limiter threshold; in Dwords */
+#define PXP2_REG_RQ_PDR_LIMIT					 0x12033c
+/* [RW 2] Endian mode for qm */
+#define PXP2_REG_RQ_QM_ENDIAN_M					 0x120194
+#define PXP2_REG_RQ_QM_FIRST_ILT				 0x120634
+#define PXP2_REG_RQ_QM_LAST_ILT					 0x120638
+/* [RW 4] page size in L2P table for QM module; -4k; -8k; -16k; -32k; -64k;
+ * -128k; -256k; -512k; -1M; -2M; 0-4M */
+#define PXP2_REG_RQ_QM_P_SIZE					 0x120050
+/* [RW 1] 1' indicates that the RBC has finished configuring the PSWRQ */
+#define PXP2_REG_RQ_RBC_DONE					 0x1201b0
+/* [RW 3] Max burst size filed for read requests port 0; 000 - 128B;
+ * 001:256B; 010: 512B; 11:1K:100:2K; 01:4K */
+#define PXP2_REG_RQ_RD_MBS0					 0x120160
+/* [RW 3] Max burst size filed for read requests port 1; 000 - 128B;
+ * 001:256B; 010: 512B; 11:1K:100:2K; 01:4K */
+#define PXP2_REG_RQ_RD_MBS1					 0x120168
+/* [RW 2] Endian mode for src */
+#define PXP2_REG_RQ_SRC_ENDIAN_M				 0x12019c
+#define PXP2_REG_RQ_SRC_FIRST_ILT				 0x12063c
+#define PXP2_REG_RQ_SRC_LAST_ILT				 0x120640
+/* [RW 4] page size in L2P table for SRC module; -4k; -8k; -16k; -32k; -64k;
+ * -128k; -256k; -512k; -1M; -2M; 0-4M */
+#define PXP2_REG_RQ_SRC_P_SIZE					 0x12006c
+/* [RW 2] Endian mode for tm */
+#define PXP2_REG_RQ_TM_ENDIAN_M					 0x120198
+#define PXP2_REG_RQ_TM_FIRST_ILT				 0x120644
+#define PXP2_REG_RQ_TM_LAST_ILT					 0x120648
+/* [RW 4] page size in L2P table for TM module; -4k; -8k; -16k; -32k; -64k;
+ * -128k; -256k; -512k; -1M; -2M; 0-4M */
+#define PXP2_REG_RQ_TM_P_SIZE					 0x120034
+/* [R 5] Number of entries in the ufifo; his fifo has l2p completions */
+#define PXP2_REG_RQ_UFIFO_NUM_OF_ENTRY				 0x12080c
+/* [RW 18] external first_mem_addr field in L2P table for USDM module port 0 */
+#define PXP2_REG_RQ_USDM0_EFIRST_MEM_ADDR			 0x120094
+/* [R 8] Number of entries occupied by vq 0 in pswrq memory */
+#define PXP2_REG_RQ_VQ0_ENTRY_CNT				 0x120810
+/* [R 8] Number of entries occupied by vq 10 in pswrq memory */
+#define PXP2_REG_RQ_VQ10_ENTRY_CNT				 0x120818
+/* [R 8] Number of entries occupied by vq 11 in pswrq memory */
+#define PXP2_REG_RQ_VQ11_ENTRY_CNT				 0x120820
+/* [R 8] Number of entries occupied by vq 12 in pswrq memory */
+#define PXP2_REG_RQ_VQ12_ENTRY_CNT				 0x120828
+/* [R 8] Number of entries occupied by vq 13 in pswrq memory */
+#define PXP2_REG_RQ_VQ13_ENTRY_CNT				 0x120830
+/* [R 8] Number of entries occupied by vq 14 in pswrq memory */
+#define PXP2_REG_RQ_VQ14_ENTRY_CNT				 0x120838
+/* [R 8] Number of entries occupied by vq 15 in pswrq memory */
+#define PXP2_REG_RQ_VQ15_ENTRY_CNT				 0x120840
+/* [R 8] Number of entries occupied by vq 16 in pswrq memory */
+#define PXP2_REG_RQ_VQ16_ENTRY_CNT				 0x120848
+/* [R 8] Number of entries occupied by vq 17 in pswrq memory */
+#define PXP2_REG_RQ_VQ17_ENTRY_CNT				 0x120850
+/* [R 8] Number of entries occupied by vq 18 in pswrq memory */
+#define PXP2_REG_RQ_VQ18_ENTRY_CNT				 0x120858
+/* [R 8] Number of entries occupied by vq 19 in pswrq memory */
+#define PXP2_REG_RQ_VQ19_ENTRY_CNT				 0x120860
+/* [R 8] Number of entries occupied by vq 1 in pswrq memory */
+#define PXP2_REG_RQ_VQ1_ENTRY_CNT				 0x120868
+/* [R 8] Number of entries occupied by vq 20 in pswrq memory */
+#define PXP2_REG_RQ_VQ20_ENTRY_CNT				 0x120870
+/* [R 8] Number of entries occupied by vq 21 in pswrq memory */
+#define PXP2_REG_RQ_VQ21_ENTRY_CNT				 0x120878
+/* [R 8] Number of entries occupied by vq 22 in pswrq memory */
+#define PXP2_REG_RQ_VQ22_ENTRY_CNT				 0x120880
+/* [R 8] Number of entries occupied by vq 23 in pswrq memory */
+#define PXP2_REG_RQ_VQ23_ENTRY_CNT				 0x120888
+/* [R 8] Number of entries occupied by vq 24 in pswrq memory */
+#define PXP2_REG_RQ_VQ24_ENTRY_CNT				 0x120890
+/* [R 8] Number of entries occupied by vq 25 in pswrq memory */
+#define PXP2_REG_RQ_VQ25_ENTRY_CNT				 0x120898
+/* [R 8] Number of entries occupied by vq 26 in pswrq memory */
+#define PXP2_REG_RQ_VQ26_ENTRY_CNT				 0x1208a0
+/* [R 8] Number of entries occupied by vq 27 in pswrq memory */
+#define PXP2_REG_RQ_VQ27_ENTRY_CNT				 0x1208a8
+/* [R 8] Number of entries occupied by vq 28 in pswrq memory */
+#define PXP2_REG_RQ_VQ28_ENTRY_CNT				 0x1208b0
+/* [R 8] Number of entries occupied by vq 29 in pswrq memory */
+#define PXP2_REG_RQ_VQ29_ENTRY_CNT				 0x1208b8
+/* [R 8] Number of entries occupied by vq 2 in pswrq memory */
+#define PXP2_REG_RQ_VQ2_ENTRY_CNT				 0x1208c0
+/* [R 8] Number of entries occupied by vq 30 in pswrq memory */
+#define PXP2_REG_RQ_VQ30_ENTRY_CNT				 0x1208c8
+/* [R 8] Number of entries occupied by vq 31 in pswrq memory */
+#define PXP2_REG_RQ_VQ31_ENTRY_CNT				 0x1208d0
+/* [R 8] Number of entries occupied by vq 3 in pswrq memory */
+#define PXP2_REG_RQ_VQ3_ENTRY_CNT				 0x1208d8
+/* [R 8] Number of entries occupied by vq 4 in pswrq memory */
+#define PXP2_REG_RQ_VQ4_ENTRY_CNT				 0x1208e0
+/* [R 8] Number of entries occupied by vq 5 in pswrq memory */
+#define PXP2_REG_RQ_VQ5_ENTRY_CNT				 0x1208e8
+/* [R 8] Number of entries occupied by vq 6 in pswrq memory */
+#define PXP2_REG_RQ_VQ6_ENTRY_CNT				 0x1208f0
+/* [R 8] Number of entries occupied by vq 7 in pswrq memory */
+#define PXP2_REG_RQ_VQ7_ENTRY_CNT				 0x1208f8
+/* [R 8] Number of entries occupied by vq 8 in pswrq memory */
+#define PXP2_REG_RQ_VQ8_ENTRY_CNT				 0x120900
+/* [R 8] Number of entries occupied by vq 9 in pswrq memory */
+#define PXP2_REG_RQ_VQ9_ENTRY_CNT				 0x120908
+/* [RW 3] Max burst size filed for write requests port 0; 000 - 128B;
+ * 001:256B; 010: 512B; */
+#define PXP2_REG_RQ_WR_MBS0					 0x12015c
+/* [RW 3] Max burst size filed for write requests port 1; 000 - 128B;
+ * 001:256B; 010: 512B; */
+#define PXP2_REG_RQ_WR_MBS1					 0x120164
+/* [RW 2] 0 - 128B;  - 256B;  - 512B;  - 1024B; when the payload in the
+ * buffer reaches this number has_payload will be asserted. 1024B is not a
+ * real MPS; it is a way of indicating that the client needs to wait for EOP
+ * before asserting has_payload. Register should be initialized according to
+ * has_payload value. */
+#define PXP2_REG_WR_CDU_MPS					 0x1205f0
+/* [RW 2] 0 - 128B;  - 256B;  - 512B;  - 1024B; when the payload in the
+ * buffer reaches this number has_payload will be asserted. 1024B is not a
+ * real MPS; it is a way of indicating that the client needs to wait for EOP
+ * before asserting has_payload. Register should be initialized according to
+ * has_payload value. */
+#define PXP2_REG_WR_CSDM_MPS					 0x1205d0
+/* [RW 2] 0 - 128B;  - 256B;  - 512B;  - 1024B; when the payload in the
+ * buffer reaches this number has_payload will be asserted. 1024B is not a
+ * real MPS; it is a way of indicating that the client needs to wait for EOP
+ * before asserting has_payload. Register should be initialized according to
+ * has_payload value. */
+#define PXP2_REG_WR_DBG_MPS					 0x1205e8
+/* [RW 2] 0 - 128B;  - 256B;  - 512B;  - 1024B; when the payload in the
+ * buffer reaches this number has_payload will be asserted. 1024B is not a
+ * real MPS; it is a way of indicating that the client needs to wait for EOP
+ * before asserting has_payload. Register should be initialized according to
+ * has_payload value. */
+#define PXP2_REG_WR_DMAE_MPS					 0x1205ec
+/* [RW 2] 0 - 128B;  - 256B;  - 512B;  - 1024B; when the payload in the
+ * buffer reaches this number has_payload will be asserted. 1024B is not a
+ * real MPS; it is a way of indicating that the client needs to wait for EOP
+ * before asserting has_payload. Register should be initialized according to
+ * has_payload value. */
+#define PXP2_REG_WR_HC_MPS					 0x1205c8
+/* [RW 2] 0 - 128B;  - 256B;  - 512B;  - 1024B; when the payload in the
+ * buffer reaches this number has_payload will be asserted. 1024B is not a
+ * real MPS; it is a way of indicating that the client needs to wait for EOP
+ * before asserting has_payload. Register should be initialized according to
+ * has_payload value. */
+#define PXP2_REG_WR_QM_MPS					 0x1205dc
+/* [RW 2] 0 - 128B;  - 256B;  - 512B;  - 1024B; when the payload in the
+ * buffer reaches this number has_payload will be asserted. 1024B is not a
+ * real MPS; it is a way of indicating that the client needs to wait for EOP
+ * before asserting has_payload. Register should be initialized according to
+ * has_payload value. */
+#define PXP2_REG_WR_SRC_MPS					 0x1205e4
+/* [RW 2] 0 - 128B;  - 256B;  - 512B;  - 1024B; when the payload in the
+ * buffer reaches this number has_payload will be asserted. 1024B is not a
+ * real MPS; it is a way of indicating that the client needs to wait for EOP
+ * before asserting has_payload. Register should be initialized according to
+ * has_payload value. */
+#define PXP2_REG_WR_TM_MPS					 0x1205e0
+/* [RW 2] 0 - 128B;  - 256B;  - 512B;  - 1024B; when the payload in the
+ * buffer reaches this number has_payload will be asserted. 1024B is not a
+ * real MPS; it is a way of indicating that the client needs to wait for EOP
+ * before asserting has_payload. Register should be initialized according to
+ * has_payload value. */
+#define PXP2_REG_WR_TSDM_MPS					 0x1205d4
+/* [RW 9] a. When pxp2.wr_th_mode_usdmdp=0 (E1.5-65 mode) should be
+ * initialized to (MPS/32); b. When pxp2.wr_th_mode_usdmdp=1 (E1.5-90;
+ * enhanced mode) and pxp2.wr_usdmdp_outst_req is different than default (3)
+ * should be initialized to (pxp2.wr_usdmdp_outst_req x MPS/32); when
+ * pxp2.wr_usdmdp_outst_req is 3 the reset value is the correct
+ * configuration */
+#define PXP2_REG_WR_USDMDP_TH					 0x120348
+/* [RW 2] 0 - 128B;  - 256B;  - 512B;  - 1024B; when the payload in the
+ * buffer reaches this number has_payload will be asserted. 1024B is not a
+ * real MPS; it is a way of indicating that the client needs to wait for EOP
+ * before asserting has_payload. Register should be initialized according to
+ * has_payload value. */
+#define PXP2_REG_WR_USDM_MPS					 0x1205cc
+/* [RW 2] 0 - 128B;  - 256B;  - 512B;  - 1024B; when the payload in the
+ * buffer reaches this number has_payload will be asserted. 1024B is not a
+ * real MPS; it is a way of indicating that the client needs to wait for EOP
+ * before asserting has_payload. Register should be initialized according to
+ * has_payload value. */
+#define PXP2_REG_WR_XSDM_MPS					 0x1205d8
+/* [R 1] debug only: Indication if PSWHST arbiter is idle */
+#define PXP_REG_HST_ARB_IS_IDLE					 0x103004
+/* [R 8] debug only: A bit mask for all PSWHST arbiter clients. '1' means
+ * this client is waiting for the arbiter. */
+#define PXP_REG_HST_CLIENTS_WAITING_TO_ARB			 0x103008
+/* [RW 1] When 1; doorbells are discarded and not passed to doorbell queue
+ * block. Should be used for close the gates. */
+#define PXP_REG_HST_DISCARD_DOORBELLS				 0x1030a4
+/* [R 1] debug only: '1' means this PSWHST is discarding doorbells. This bit
+ * should update accoring to 'hst_discard_doorbells' register when the state
+ * machine is idle */
+#define PXP_REG_HST_DISCARD_DOORBELLS_STATUS			 0x1030a0
+/* [RW 1] When 1; new internal writes arriving to the block are discarded.
+ * Should be used for close the gates. */
+#define PXP_REG_HST_DISCARD_INTERNAL_WRITES			 0x1030a8
+/* [R 6] debug only: A bit mask for all PSWHST internal write clients. '1'
+ * means this PSWHST is discarding inputs from this client. Each bit should
+ * update accoring to 'hst_discard_internal_writes' register when the state
+ * machine is idle. */
+#define PXP_REG_HST_DISCARD_INTERNAL_WRITES_STATUS		 0x10309c
+/* [R 1] 1 - An incorrect access is logged. The valid bit is reset when the
+ * relevant interrupt register is read (PXP_REG_INT_STS_CLR_1) */
+#define PXP_REG_HST_INCORRECT_ACCESS_VALID			 0x1030cc
+/* [R 1] 1- permission violation data is logged. The valid bit is reset when
+ * the relevant interrupt register is read (PXP_REG_INT_STS_CLR_1) */
+#define PXP_REG_HST_PER_VIOLATION_VALID				 0x1030e0
+/* [R 15] The FID of the first access to a disabled VF; the format is
+ * [14:12] - pfid; [11:6] - vfid; [5] - vf_valid; [4:1] - client (0 USDM; 1
+ * CSDM; 2 XSDM; 3 TSDM; 4 HC; 5 GRC; 6 DQ; 7 RESERVED SPACE; 8 ATC); [0] -
+ * w_nr(0-read req; 1- write req). The data is written only when the valid
+ * bit is reset. and it is stays stable until it is reset by the read from
+ * interrupt_clr register */
+#define PXP_REG_HST_VF_DISABLED_ERROR_DATA			 0x1030b8
+/* [R 1] 1 - An error request is logged and wasn't handled yet. The valid
+ * bit is reset when the relevant interrupt register is read
+ * (PXP_REG_INT_STS_CLR_1) */
+#define PXP_REG_HST_VF_DISABLED_ERROR_VALID			 0x1030bc
+/* [RW 7] Indirect access to the permission table. The fields are : {Valid;
+ * VFID[5:0]} */
+#define PXP_REG_HST_ZONE_PERMISSION_TABLE			 0x103400
+/* [RW 32] Interrupt mask register #0 read/write */
+#define PXP_REG_PXP_INT_MASK_0					 0x103074
+#define PXP_REG_PXP_INT_MASK_1					 0x103084
+/* [R 32] Interrupt register #0 read */
+#define PXP_REG_PXP_INT_STS_0					 0x103068
+#define PXP_REG_PXP_INT_STS_1					 0x103078
+/* [RC 32] Interrupt register #0 read clear */
+#define PXP_REG_PXP_INT_STS_CLR_0				 0x10306c
+#define PXP_REG_PXP_INT_STS_CLR_1				 0x10307c
+/* [RW 27] Parity mask register #0 read/write */
+#define PXP_REG_PXP_PRTY_MASK					 0x103094
+/* [R 27] Parity register #0 read */
+#define PXP_REG_PXP_PRTY_STS					 0x103088
+/* [RC 27] Parity register #0 read clear */
+#define PXP_REG_PXP_PRTY_STS_CLR				 0x10308c
+/* [RW 32] The base logical address (in bytes) of each physical queue. The
+ * index I represents the physical queue number. The 12 lsbs are ignore and
+ * considered zero so practically there are only 20 bits in this register;
+ * queues 63-0 */
+#define QM_REG_BASEADDR						 0x168900
+/* [R 32] NOT USED */
+#define QM_REG_BASEADDR_EXT_A					 0x16e100
+/* [R 18] The credit value for byte credit 0. The value is 2s complement
+ * value (i.e. msb is used for the sign). */
+#define QM_REG_BYTECRD0						 0x16e6fc
+/* [R 18] The credit value for byte credit 1. The value is 2s complement
+ * value (i.e. msb is used for the sign). */
+#define QM_REG_BYTECRD1						 0x16e700
+/* [R 18] The credit value for byte credit 2. The value is 2s complement
+ * value (i.e. msb is used for the sign). */
+#define QM_REG_BYTECRD2						 0x16e704
+/* [R 18] The credit value for byte credit 3. The value is 2s complement
+ * value (i.e. msb is used for the sign). */
+#define QM_REG_BYTECRD3						 0x16e7ac
+/* [R 18] The credit value for byte credit 4. The value is 2s complement
+ * value (i.e. msb is used for the sign). */
+#define QM_REG_BYTECRD4						 0x16e7b0
+/* [R 18] The credit value for byte credit 5. The value is 2s complement
+ * value (i.e. msb is used for the sign). */
+#define QM_REG_BYTECRD5						 0x16e7b4
+/* [R 18] The credit value for byte credit 6. The value is 2s complement
+ * value (i.e. msb is used for the sign). */
+#define QM_REG_BYTECRD6						 0x16e7b8
+/* [R 32] NOT USED - removed for E3 B0 */
+#define QM_REG_BYTECRDCMDQ_0					 0x16e6e8
+/* [RC 32] byte credit update error register; b2-b0: byte credit id (pbf
+ * error); b3 - reserved (zero filled); b6-b4: byte credit id (storm
+ * increment error); b7 - reserved (zero filled); b10-b8: byte credit id
+ * (storm decrement error); b11 - reserved (zero filled); b12: pbf error
+ * valid; b13: storm increment error valid; b14: storm decrement error
+ * valid; b15: reserved; b22-b16: byte credit warning (warning=decremented
+ * below zero). mask bit per voq counter; b31-b23: reserved; NOTE: VOQ id-s
+ * represent HW */
+#define QM_REG_BYTECRDERRREG					 0x16e708
+/* [RW 17] The initial byte credit value for all counters */
+#define QM_REG_BYTECRDINITVAL					 0x168238
+/* [RW 20] The number of connections divided by 16 which dictates the size
+ * of each queue which belongs to even function number. */
+#define QM_REG_CONNNUM_0					 0x168020
+/* [R 6] Keep the fill level of the fifo from write client 4 */
+#define QM_REG_CQM_WRC_FIFOLVL					 0x168018
+/* [RW 3] Describes the HW (real) VOQ id (id-s 0-6 used for HW TX VOQ-s) of
+ * FW (virtual) VOQ0 */
+#define QM_REG_FWVOQ0TOHWVOQ					 0x16e7bc
+/* [RW 3] Describes the HW (real) VOQ id (id-s 0-6 used for HW TX VOQ-s) of
+ * FW (virtual) VOQ1 */
+#define QM_REG_FWVOQ1TOHWVOQ					 0x16e7c0
+/* [RW 3] Describes the HW (real) VOQ id (id-s 0-6 used for HW TX VOQ-s) of
+ * FW (virtual) VOQ2 */
+#define QM_REG_FWVOQ2TOHWVOQ					 0x16e7c4
+/* [RW 3] Describes the HW (real) VOQ id (id-s 0-6 used for HW TX VOQ-s) of
+ * FW (virtual) VOQ3 */
+#define QM_REG_FWVOQ3TOHWVOQ					 0x16e7c8
+/* [RW 3] Describes the HW (real) VOQ id (id-s 0-6 used for HW TX VOQ-s) of
+ * FW (virtual) VOQ4 */
+#define QM_REG_FWVOQ4TOHWVOQ					 0x16e7cc
+/* [RW 3] Describes the HW (real) VOQ id (id-s 0-6 used for HW TX VOQ-s) of
+ * FW (virtual) VOQ5 */
+#define QM_REG_FWVOQ5TOHWVOQ					 0x16e7d0
+/* [RW 3] Describes the HW (real) VOQ id (id-s 0-6 used for HW TX VOQ-s) of
+ * FW (virtual) VOQ6 */
+#define QM_REG_FWVOQ6TOHWVOQ					 0x16e7d4
+/* [RW 3] Describes the HW (real) VOQ id (id-s 0-6 used for HW TX VOQ-s) of
+ * FW (virtual) VOQ7 */
+#define QM_REG_FWVOQ7TOHWVOQ					 0x16e7d8
+/* [RC 1] A flag to indicate that overflow error occurred in one of the
+ * queues. */
+#define QM_REG_OVFERROR						 0x16805c
+/* [RC 6] the Q were the qverflow occurs */
+#define QM_REG_OVFQNUM						 0x168058
+/* [R 16] Pause state for physical queues 15-0 */
+#define QM_REG_PAUSESTATE0					 0x168410
+/* [R 16] Pause state for physical queues 31-16 */
+#define QM_REG_PAUSESTATE1					 0x168414
+/* [R 16] Pause state for physical queues 47-32 */
+#define QM_REG_PAUSESTATE2					 0x16e684
+/* [R 16] Pause state for physical queues 63-48 */
+#define QM_REG_PAUSESTATE3					 0x16e688
+/* [R 16] NOT USED */
+#define QM_REG_PAUSESTATE4					 0x16e68c
+/* [R 16] NOT USED */
+#define QM_REG_PAUSESTATE5					 0x16e690
+/* [R 16] NOT USED */
+#define QM_REG_PAUSESTATE6					 0x16e694
+/* [R 16] NOT USED */
+#define QM_REG_PAUSESTATE7					 0x16e698
+#define QM_REG_PF_EN						 0x16e70c
+/* [R 24] The number of tasks stored in the QM for the PF. only even
+ * functions are valid in E2 (odd I registers will be hard wired to 0) */
+#define QM_REG_PF_USG_CNT_0					 0x16e040
+/* [R 16] NOT USED */
+#define QM_REG_PORT0BYTECRD					 0x168300
+/* [R 16] NOT USED */
+#define QM_REG_PORT1BYTECRD					 0x168304
+/* [WB 54] Pointer Table Memory for queues 63-0; The mapping is as follow:
+ * ptrtbl[53:30] read pointer; ptrtbl[29:6] write pointer; ptrtbl[5:4] read
+ * bank0; ptrtbl[3:2] read bank 1; ptrtbl[1:0] write bank; */
+#define QM_REG_PTRTBL						 0x168a00
+/* [R 54] NOT USED */
+#define QM_REG_PTRTBL_EXT_A					 0x16e200
+/* [RW 14] Interrupt mask register #0 read/write */
+#define QM_REG_QM_INT_MASK					 0x168444
+/* [R 14] Interrupt register #0 read */
+#define QM_REG_QM_INT_STS					 0x168438
+/* [RW 12] Parity mask register #0 read/write */
+#define QM_REG_QM_PRTY_MASK					 0x168454
+/* [R 12] Parity register #0 read */
+#define QM_REG_QM_PRTY_STS					 0x168448
+/* [RC 12] Parity register #0 read clear */
+#define QM_REG_QM_PRTY_STS_CLR					 0x16844c
+/* [R 32] Current queues in pipeline: Queues from 32 to 63 */
+#define QM_REG_QSTATUS_HIGH					 0x16802c
+/* [R 32] NOT USED */
+#define QM_REG_QSTATUS_HIGH_EXT_A				 0x16e408
+/* [R 32] Current queues in pipeline: Queues from 0 to 31 */
+#define QM_REG_QSTATUS_LOW					 0x168028
+/* [R 32] NOT USED */
+#define QM_REG_QSTATUS_LOW_EXT_A				 0x16e404
+/* [R 24] The number of tasks queued for each queue; queues 63-0 */
+#define QM_REG_QTASKCTR_0					 0x168308
+/* [R 24] NOT USED */
+#define QM_REG_QTASKCTR_EXT_A_0					 0x16e584
+/* [RW 4] Queue tied to VOQ */
+#define QM_REG_QVOQIDX_0					 0x1680f4
+/* [RW 1] Initialization bit command */
+#define QM_REG_SOFT_RESET					 0x168428
+/* [R 6] Keep the fill level of the fifo from write client 3 */
+#define QM_REG_TQM_WRC_FIFOLVL					 0x168010
+/* [R 6] Keep the fill level of the fifo from write client 2 */
+#define QM_REG_UQM_WRC_FIFOLVL					 0x168008
+/* [RC 32] VOQ credit update error register; b3-b0: voq id (pbf error);
+ * b7-b4: voq id (storm increment error); b11-b8: voq id (storm decrement
+ * error); b12: pbf error valid; b13: storm increment error valid; b14:
+ * storm decrement error valid; b15: reserved; b27-b16: voq warning
+ * (warning=decremented below zero). mask bit per voq counter; b31-b28:
+ * reserved; NOTE: VOQ id-s represent HW VOQ id */
+#define QM_REG_VOQCRDERRREG					 0x168408
+/* [R 17] The credit value for each VOQ. The value is 2s complement value
+ * (i.e. msb is used for the sign). */
+#define QM_REG_VOQCREDIT_0					 0x1682d0
+#define QM_REG_VOQCREDIT_1					 0x1682d4
+#define QM_REG_VOQCREDIT_2					 0x1682d8
+#define QM_REG_VOQCREDIT_3					 0x1682dc
+#define QM_REG_VOQCREDIT_4					 0x1682e0
+#define QM_REG_VOQCREDIT_5					 0x1682e4
+#define QM_REG_VOQCREDIT_6					 0x1682e8
+/* [RW 16] The init and maximum credit for each VoQ */
+#define QM_REG_VOQINITCREDIT_0					 0x168060
+#define QM_REG_VOQINITCREDIT_1					 0x168064
+#define QM_REG_VOQINITCREDIT_2					 0x168068
+#define QM_REG_VOQINITCREDIT_3					 0x16806c
+#define QM_REG_VOQINITCREDIT_4					 0x168070
+#define QM_REG_VOQINITCREDIT_5					 0x168074
+#define QM_REG_VOQINITCREDIT_6					 0x168078
+/* [RW 32] The physical queue number associated with each VOQ; queues 31-0 */
+#define QM_REG_VOQQMASK_0_LSB					 0x168240
+/* [R 6] Keep the fill level of the fifo from write client 1 */
+#define QM_REG_XQM_WRC_FIFOLVL					 0x168000
+/* [W 1] reset to parity interrupt */
+#define SEM_FAST_REG_PARITY_RST					 0x18840
+#define SRC_REG_COUNTFREE0					 0x40500
+#define SRC_REG_FIRSTFREE0					 0x40510
+#define SRC_REG_KEYRSS0_0					 0x40408
+#define SRC_REG_KEYRSS0_7					 0x40424
+#define SRC_REG_KEYSEARCH_0					 0x40458
+#define SRC_REG_KEYSEARCH_1					 0x4045c
+#define SRC_REG_KEYSEARCH_2					 0x40460
+#define SRC_REG_KEYSEARCH_3					 0x40464
+#define SRC_REG_KEYSEARCH_4					 0x40468
+#define SRC_REG_KEYSEARCH_5					 0x4046c
+#define SRC_REG_KEYSEARCH_6					 0x40470
+#define SRC_REG_KEYSEARCH_7					 0x40474
+#define SRC_REG_KEYSEARCH_8					 0x40478
+#define SRC_REG_KEYSEARCH_9					 0x4047c
+#define SRC_REG_LASTFREE0					 0x40530
+#define SRC_REG_NUMBER_HASH_BITS0				 0x40400
+/* [RW 1] Reset internal state machines. */
+#define SRC_REG_SOFT_RST					 0x4049c
+/* [R 3] Interrupt register #0 read */
+#define SRC_REG_SRC_INT_STS					 0x404ac
+/* [RW 3] Parity mask register #0 read/write */
+#define SRC_REG_SRC_PRTY_MASK					 0x404c8
+/* [R 3] Parity register #0 read */
+#define SRC_REG_SRC_PRTY_STS					 0x404bc
+/* [RC 3] Parity register #0 read clear */
+#define SRC_REG_SRC_PRTY_STS_CLR				 0x404c0
+/* [R 4] Used to read the value of the XX protection CAM occupancy counter. */
+#define TCM_REG_CAM_OCCUP					 0x5017c
+/* [RW 4] CFC output initial credit. Max credit available - 15.Write writes
+ * the initial credit value; read returns the current value of the credit
+ * counter. Must be initialized to 1 at start-up. */
+#define TCM_REG_CFC_INIT_CRD					 0x50204
+/* [RC 1] Message length mismatch (relative to last indication) at the In#9
+ * interface. */
+#define TCM_REG_CSEM_LENGTH_MIS					 0x50174
+/* [RW 8] FIC0 output initial credit. Max credit available - 255.Write
+ * writes the initial credit value; read returns the current value of the
+ * credit counter. Must be initialized to 64 at start-up. */
+#define TCM_REG_FIC0_INIT_CRD					 0x5020c
+/* [RW 8] FIC1 output initial credit. Max credit available - 255.Write
+ * writes the initial credit value; read returns the current value of the
+ * credit counter. Must be initialized to 64 at start-up. */
+#define TCM_REG_FIC1_INIT_CRD					 0x50210
+/* [RC 1] Message length mismatch (relative to last indication) at the In#7
+ * interface. */
+#define TCM_REG_PBF_LENGTH_MIS					 0x5016c
+/* [RW 1] Input prs Interface enable. If 0 - the valid input is disregarded;
+ * acknowledge output is deasserted; all other signals are treated as usual;
+ * if 1 - normal activity. */
+#define TCM_REG_PRS_IFEN					 0x50020
+/* [RC 1] Message length mismatch (relative to last indication) at the In#6
+ * interface. */
+#define TCM_REG_PRS_LENGTH_MIS					 0x50168
+/* [RC 1] Message length mismatch (relative to last indication) at the STORM
+ * interface. */
+#define TCM_REG_STORM_LENGTH_MIS				 0x50160
+/* [RW 11] Interrupt mask register #0 read/write */
+#define TCM_REG_TCM_INT_MASK					 0x501dc
+/* [R 11] Interrupt register #0 read */
+#define TCM_REG_TCM_INT_STS					 0x501d0
+/* [RW 27] Parity mask register #0 read/write */
+#define TCM_REG_TCM_PRTY_MASK					 0x501ec
+/* [R 27] Parity register #0 read */
+#define TCM_REG_TCM_PRTY_STS					 0x501e0
+/* [RC 27] Parity register #0 read clear */
+#define TCM_REG_TCM_PRTY_STS_CLR				 0x501e4
+/* [RW 6] QM output initial credit. Max credit available - 32.Write writes
+ * the initial credit value; read returns the current value of the credit
+ * counter. Must be initialized to 32 at start-up. */
+#define TCM_REG_TQM_INIT_CRD					 0x5021c
+/* [RC 1] Message length mismatch (relative to last indication) at the SDM
+ * interface. */
+#define TCM_REG_TSDM_LENGTH_MIS					 0x50164
+/* [RC 1] Message length mismatch (relative to last indication) at the In#8
+ * interface. */
+#define TCM_REG_USEM_LENGTH_MIS					 0x50170
+/* [RW 21] Indirect access to the descriptor table of the XX protection
+ * mechanism. The fields are: [5:0] - length of the message; 15:6] - message
+ * pointer; 20:16] - next pointer. */
+#define TCM_REG_XX_DESCR_TABLE					 0x50280
+#define TCM_REG_XX_DESCR_TABLE_SIZE				 29
+/* [R 6] Use to read the value of XX protection Free counter. */
+#define TCM_REG_XX_FREE						 0x50178
+#define TM_REG_EN_LINEAR0_TIMER					 0x164014
+/* [RW 18] Linear0 Max active cid (in banks of 32 entries). */
+#define TM_REG_LIN0_MAX_ACTIVE_CID				 0x164048
+/* [ST 16] Linear0 Number of scans counter. */
+#define TM_REG_LIN0_NUM_SCANS					 0x1640a0
+#define TM_REG_LIN0_SCAN_ON					 0x1640d0
+/* [RW 24] Linear0 array scan timeout. */
+#define TM_REG_LIN0_SCAN_TIME					 0x16403c
+#define TM_REG_LIN0_VNIC_UC					 0x164128
+/* [RW 1] Interrupt mask register #0 read/write */
+#define TM_REG_TM_INT_MASK					 0x1640fc
+/* [R 1] Interrupt register #0 read */
+#define TM_REG_TM_INT_STS					 0x1640f0
+/* [RW 7] Parity mask register #0 read/write */
+#define TM_REG_TM_PRTY_MASK					 0x16410c
+/* [RC 7] Parity register #0 read clear */
+#define TM_REG_TM_PRTY_STS_CLR					 0x164104
+#define TSDM_REG_ENABLE_IN1					 0x42238
+/* [R 1] pxp_ctrl rd_data fifo empty in sdm_dma_rsp block */
+#define TSDM_REG_RSP_PXP_CTRL_RDATA_EMPTY			 0x42548
+/* [R 1] parser fifo empty in sdm_sync block */
+#define TSDM_REG_SYNC_PARSER_EMPTY				 0x42550
+/* [R 1] parser serial fifo empty in sdm_sync block */
+#define TSDM_REG_SYNC_SYNC_EMPTY				 0x42558
+/* [RW 32] Interrupt mask register #0 read/write */
+#define TSDM_REG_TSDM_INT_MASK_0				 0x4229c
+#define TSDM_REG_TSDM_INT_MASK_1				 0x422ac
+/* [R 32] Interrupt register #0 read */
+#define TSDM_REG_TSDM_INT_STS_0					 0x42290
+#define TSDM_REG_TSDM_INT_STS_1					 0x422a0
+/* [RW 11] Parity mask register #0 read/write */
+#define TSDM_REG_TSDM_PRTY_MASK					 0x422bc
+/* [R 11] Parity register #0 read */
+#define TSDM_REG_TSDM_PRTY_STS					 0x422b0
+/* [RC 11] Parity register #0 read clear */
+#define TSDM_REG_TSDM_PRTY_STS_CLR				 0x422b4
+/* [RW 32] This address space contains all registers and memories that are
+ * placed in SEM_FAST block. The SEM_FAST registers are described in
+ * appendix B. In order to access the SEM_FAST registers the base address
+ * TSEM_REGISTERS_FAST_MEMORY (Offset: 0x1a0000) should be added to each
+ * SEM_FAST register offset. */
+#define TSEM_REG_FAST_MEMORY					 0x1a0000
+/* [RW 15] Interrupt table Read and write access to it is not possible in
+ * the middle of the work */
+#define TSEM_REG_INT_TABLE					 0x180400
+/* [WB 128] Debug only. Passive buffer memory */
+#define TSEM_REG_PASSIVE_BUFFER					 0x181000
+/* [WB 46] pram memory. B45 is parity; b[44:0] - data. */
+#define TSEM_REG_PRAM						 0x1c0000
+/* [R 20] Valid sleeping threads indication have bit per thread */
+#define TSEM_REG_SLEEP_THREADS_VALID				 0x18026c
+/* [R 1] EXT_STORE FIFO is empty in sem_slow_ls_ext */
+#define TSEM_REG_SLOW_EXT_STORE_EMPTY				 0x1802a0
+/* [RW 32] Interrupt mask register #0 read/write */
+#define TSEM_REG_TSEM_INT_MASK_0				 0x180100
+#define TSEM_REG_TSEM_INT_MASK_1				 0x180110
+/* [R 32] Interrupt register #0 read */
+#define TSEM_REG_TSEM_INT_STS_0					 0x1800f4
+#define TSEM_REG_TSEM_INT_STS_1					 0x180104
+/* [RW 32] Parity mask register #0 read/write */
+#define TSEM_REG_TSEM_PRTY_MASK_0				 0x180120
+#define TSEM_REG_TSEM_PRTY_MASK_1				 0x180130
+/* [R 32] Parity register #0 read */
+#define TSEM_REG_TSEM_PRTY_STS_0				 0x180114
+#define TSEM_REG_TSEM_PRTY_STS_1				 0x180124
+/* [RC 32] Parity register #0 read clear */
+#define TSEM_REG_TSEM_PRTY_STS_CLR_0				 0x180118
+#define TSEM_REG_TSEM_PRTY_STS_CLR_1				 0x180128
+/* [W 7] VF or PF ID for reset error bit. Values 0-63 reset error bit for 64
+ * VF; values 64-67 reset error for 4 PF; values 68-127 are not valid. */
+#define TSEM_REG_VFPF_ERR_NUM					 0x180380
+/* [R 5] Used to read the XX protection CAM occupancy counter. */
+#define UCM_REG_CAM_OCCUP					 0xe0170
+/* [RW 4] CFC output initial credit. Max credit available - 15.Write writes
+ * the initial credit value; read returns the current value of the credit
+ * counter. Must be initialized to 1 at start-up. */
+#define UCM_REG_CFC_INIT_CRD					 0xe0204
+/* [RC 1] Set when the message length mismatch (relative to last indication)
+ * at the csem interface is detected. */
+#define UCM_REG_CSEM_LENGTH_MIS					 0xe0160
+/* [RC 1] Set when the message length mismatch (relative to last indication)
+ * at the dorq interface is detected. */
+#define UCM_REG_DORQ_LENGTH_MIS					 0xe0168
+/* [RW 8] FIC0 output initial credit. Max credit available - 255.Write
+ * writes the initial credit value; read returns the current value of the
+ * credit counter. Must be initialized to 64 at start-up. */
+#define UCM_REG_FIC0_INIT_CRD					 0xe020c
+/* [RW 8] FIC1 output initial credit. Max credit available - 255.Write
+ * writes the initial credit value; read returns the current value of the
+ * credit counter. Must be initialized to 64 at start-up. */
+#define UCM_REG_FIC1_INIT_CRD					 0xe0210
+/* [RC 1] Set when the message length mismatch (relative to last indication)
+ * at the STORM interface is detected. */
+#define UCM_REG_STORM_LENGTH_MIS				 0xe0154
+/* [RW 4] Timers output initial credit. Max credit available - 15.Write
+ * writes the initial credit value; read returns the current value of the
+ * credit counter. Must be initialized to 4 at start-up. */
+#define UCM_REG_TM_INIT_CRD					 0xe021c
+/* [RC 1] Set when the message length mismatch (relative to last indication)
+ * at the tsem interface is detected. */
+#define UCM_REG_TSEM_LENGTH_MIS					 0xe015c
+/* [RW 11] Interrupt mask register #0 read/write */
+#define UCM_REG_UCM_INT_MASK					 0xe01d4
+/* [R 11] Interrupt register #0 read */
+#define UCM_REG_UCM_INT_STS					 0xe01c8
+/* [RW 27] Parity mask register #0 read/write */
+#define UCM_REG_UCM_PRTY_MASK					 0xe01e4
+/* [R 27] Parity register #0 read */
+#define UCM_REG_UCM_PRTY_STS					 0xe01d8
+/* [RC 27] Parity register #0 read clear */
+#define UCM_REG_UCM_PRTY_STS_CLR				 0xe01dc
+/* [RW 6] QM output initial credit. Max credit available - 32.Write writes
+ * the initial credit value; read returns the current value of the credit
+ * counter. Must be initialized to 32 at start-up. */
+#define UCM_REG_UQM_INIT_CRD					 0xe0220
+/* [RC 1] Set when the message length mismatch (relative to last indication)
+ * at the SDM interface is detected. */
+#define UCM_REG_USDM_LENGTH_MIS					 0xe0158
+/* [RC 1] Set when the message length mismatch (relative to last indication)
+ * at the xsem interface isdetected. */
+#define UCM_REG_XSEM_LENGTH_MIS					 0xe0164
+/* [RW 20] Indirect access to the descriptor table of the XX protection
+ * mechanism. The fields are:[5:0] - message length; 14:6] - message
+ * pointer; 19:15] - next pointer. */
+#define UCM_REG_XX_DESCR_TABLE					 0xe0280
+#define UCM_REG_XX_DESCR_TABLE_SIZE				 27
+/* [R 6] Use to read the XX protection Free counter. */
+#define UCM_REG_XX_FREE						 0xe016c
+#define UMAC_COMMAND_CONFIG_REG_IGNORE_TX_PAUSE			 (0x1<<28)
+#define UMAC_COMMAND_CONFIG_REG_LOOP_ENA			 (0x1<<15)
+#define UMAC_COMMAND_CONFIG_REG_NO_LGTH_CHECK			 (0x1<<24)
+#define UMAC_COMMAND_CONFIG_REG_PAD_EN				 (0x1<<5)
+#define UMAC_COMMAND_CONFIG_REG_PAUSE_IGNORE			 (0x1<<8)
+#define UMAC_COMMAND_CONFIG_REG_PROMIS_EN			 (0x1<<4)
+#define UMAC_COMMAND_CONFIG_REG_RX_ENA				 (0x1<<1)
+#define UMAC_COMMAND_CONFIG_REG_SW_RESET			 (0x1<<13)
+#define UMAC_COMMAND_CONFIG_REG_TX_ENA				 (0x1<<0)
+#define UMAC_REG_COMMAND_CONFIG					 0x8
+/* [RW 32] Register Bit 0 refers to Bit 16 of the MAC address; Bit 1 refers
+ * to bit 17 of the MAC address etc. */
+#define UMAC_REG_MAC_ADDR0					 0xc
+/* [RW 16] Register Bit 0 refers to Bit 0 of the MAC address; Register Bit 1
+ * refers to Bit 1 of the MAC address etc. Bits 16 to 31 are reserved. */
+#define UMAC_REG_MAC_ADDR1					 0x10
+/* [RW 14] Defines a 14-Bit maximum frame length used by the MAC receive
+ * logic to check frames. */
+#define UMAC_REG_MAXFR						 0x14
+/* [R 1] pxp_ctrl rd_data fifo empty in sdm_dma_rsp block */
+#define USDM_REG_RSP_PXP_CTRL_RDATA_EMPTY			 0xc4550
+/* [R 1] parser fifo empty in sdm_sync block */
+#define USDM_REG_SYNC_PARSER_EMPTY				 0xc4558
+/* [R 1] parser serial fifo empty in sdm_sync block */
+#define USDM_REG_SYNC_SYNC_EMPTY				 0xc4560
+/* [RW 32] Interrupt mask register #0 read/write */
+#define USDM_REG_USDM_INT_MASK_0				 0xc42a0
+#define USDM_REG_USDM_INT_MASK_1				 0xc42b0
+/* [R 32] Interrupt register #0 read */
+#define USDM_REG_USDM_INT_STS_0					 0xc4294
+#define USDM_REG_USDM_INT_STS_1					 0xc42a4
+/* [RW 11] Parity mask register #0 read/write */
+#define USDM_REG_USDM_PRTY_MASK					 0xc42c0
+/* [R 11] Parity register #0 read */
+#define USDM_REG_USDM_PRTY_STS					 0xc42b4
+/* [RC 11] Parity register #0 read clear */
+#define USDM_REG_USDM_PRTY_STS_CLR				 0xc42b8
+/* [RW 32] This address space contains all registers and memories that are
+ * placed in SEM_FAST block. The SEM_FAST registers are described in
+ * appendix B. In order to access the SEM_FAST registers the base address
+ * USEM_REGISTERS_FAST_MEMORY (Offset: 0x320000) should be added to each
+ * SEM_FAST register offset. */
+#define USEM_REG_FAST_MEMORY					 0x320000
+/* [RW 15] Interrupt table Read and write access to it is not possible in
+ * the middle of the work */
+#define USEM_REG_INT_TABLE					 0x300400
+/* [WB 128] Debug only. Passive buffer memory */
+#define USEM_REG_PASSIVE_BUFFER					 0x302000
+/* [WB 46] pram memory. B45 is parity; b[44:0] - data. */
+#define USEM_REG_PRAM						 0x340000
+/* [R 20] Valid sleeping threads indication have bit per thread */
+#define USEM_REG_SLEEP_THREADS_VALID				 0x30026c
+/* [R 1] EXT_STORE FIFO is empty in sem_slow_ls_ext */
+#define USEM_REG_SLOW_EXT_STORE_EMPTY				 0x3002a0
+/* [RW 32] Interrupt mask register #0 read/write */
+#define USEM_REG_USEM_INT_MASK_0				 0x300110
+#define USEM_REG_USEM_INT_MASK_1				 0x300120
+/* [R 32] Interrupt register #0 read */
+#define USEM_REG_USEM_INT_STS_0					 0x300104
+#define USEM_REG_USEM_INT_STS_1					 0x300114
+/* [RW 32] Parity mask register #0 read/write */
+#define USEM_REG_USEM_PRTY_MASK_0				 0x300130
+#define USEM_REG_USEM_PRTY_MASK_1				 0x300140
+/* [R 32] Parity register #0 read */
+#define USEM_REG_USEM_PRTY_STS_0				 0x300124
+#define USEM_REG_USEM_PRTY_STS_1				 0x300134
+/* [RC 32] Parity register #0 read clear */
+#define USEM_REG_USEM_PRTY_STS_CLR_0				 0x300128
+#define USEM_REG_USEM_PRTY_STS_CLR_1				 0x300138
+/* [W 7] VF or PF ID for reset error bit. Values 0-63 reset error bit for 64
+ * VF; values 64-67 reset error for 4 PF; values 68-127 are not valid. */
+#define USEM_REG_VFPF_ERR_NUM					 0x300380
+#define VFC_MEMORIES_RST_REG_CAM_RST				 (0x1<<0)
+#define VFC_MEMORIES_RST_REG_RAM_RST				 (0x1<<1)
+#define VFC_REG_MEMORIES_RST					 0x1943c
+/* [R 5] Used to read the XX protection CAM occupancy counter. */
+#define XCM_REG_CAM_OCCUP					 0x20244
+/* [RW 4] CFC output initial credit. Max credit available - 15.Write writes
+ * the initial credit value; read returns the current value of the credit
+ * counter. Must be initialized to 1 at start-up. */
+#define XCM_REG_CFC_INIT_CRD					 0x20404
+/* [RC 1] Set at message length mismatch (relative to last indication) at
+ * the csem interface. */
+#define XCM_REG_CSEM_LENGTH_MIS					 0x20228
+/* [RC 1] Set at message length mismatch (relative to last indication) at
+ * the dorq interface. */
+#define XCM_REG_DORQ_LENGTH_MIS					 0x20230
+/* [RW 8] FIC0 output initial credit. Max credit available - 255.Write
+ * writes the initial credit value; read returns the current value of the
+ * credit counter. Must be initialized to 64 at start-up. */
+#define XCM_REG_FIC0_INIT_CRD					 0x2040c
+/* [RW 8] FIC1 output initial credit. Max credit available - 255.Write
+ * writes the initial credit value; read returns the current value of the
+ * credit counter. Must be initialized to 64 at start-up. */
+#define XCM_REG_FIC1_INIT_CRD					 0x20410
+#define XCM_REG_GLB_DEL_ACK_MAX_CNT_0				 0x20118
+/* [RC 1] Set at message length mismatch (relative to last indication) at
+ * the nig0 interface. */
+#define XCM_REG_NIG0_LENGTH_MIS					 0x20238
+/* [RC 1] Set at message length mismatch (relative to last indication) at
+ * the nig1 interface. */
+#define XCM_REG_NIG1_LENGTH_MIS					 0x2023c
+/* [RC 1] Set at message length mismatch (relative to last indication) at
+ * the pbf interface. */
+#define XCM_REG_PBF_LENGTH_MIS					 0x20234
+/* [RC 1] Set at message length mismatch (relative to last indication) at
+ * the STORM interface. */
+#define XCM_REG_STORM_LENGTH_MIS				 0x2021c
+/* [RW 4] Timers output initial credit. Max credit available - 15.Write
+ * writes the initial credit value; read returns the current value of the
+ * credit counter. Must be initialized to 4 at start-up. */
+#define XCM_REG_TM_INIT_CRD					 0x2041c
+/* [RC 1] Set at message length mismatch (relative to last indication) at
+ * the tsem interface. */
+#define XCM_REG_TSEM_LENGTH_MIS					 0x20224
+/* [RC 1] Message length mismatch (relative to last indication) at the usem
+ * interface. */
+#define XCM_REG_USEM_LENGTH_MIS					 0x2022c
+#define XCM_REG_WU_DA_CNT_CMD00					 0x201d4
+#define XCM_REG_WU_DA_SET_TMR_CNT_FLG_CMD00			 0x201c4
+/* [RW 14] Interrupt mask register #0 read/write */
+#define XCM_REG_XCM_INT_MASK					 0x202b4
+/* [R 14] Interrupt register #0 read */
+#define XCM_REG_XCM_INT_STS					 0x202a8
+/* [RW 30] Parity mask register #0 read/write */
+#define XCM_REG_XCM_PRTY_MASK					 0x202c4
+/* [R 30] Parity register #0 read */
+#define XCM_REG_XCM_PRTY_STS					 0x202b8
+/* [RC 30] Parity register #0 read clear */
+#define XCM_REG_XCM_PRTY_STS_CLR				 0x202bc
+/* [RW 6] QM output initial credit. Max credit available - 32.Write writes
+ * the initial credit value; read returns the current value of the credit
+ * counter. Must be initialized to 32 at start-up. */
+#define XCM_REG_XQM_INIT_CRD					 0x20420
+/* [RC 1] Set at message length mismatch (relative to last indication) at
+ * the SDM interface. */
+#define XCM_REG_XSDM_LENGTH_MIS					 0x20220
+/* [RW 17] Indirect access to the descriptor table of the XX protection
+ * mechanism. The fields are: [5:0] - message length; 11:6] - message
+ * pointer; 16:12] - next pointer. */
+#define XCM_REG_XX_DESCR_TABLE					 0x20480
+#define XCM_REG_XX_DESCR_TABLE_SIZE				 32
+/* [R 6] Used to read the XX protection Free counter. */
+#define XCM_REG_XX_FREE						 0x20240
+#define XMAC_CLEAR_RX_LSS_STATUS_REG_CLEAR_LOCAL_FAULT_STATUS	 (0x1<<0)
+#define XMAC_CLEAR_RX_LSS_STATUS_REG_CLEAR_REMOTE_FAULT_STATUS	 (0x1<<1)
+#define XMAC_CTRL_REG_LINE_LOCAL_LPBK				 (0x1<<2)
+#define XMAC_CTRL_REG_RX_EN					 (0x1<<1)
+#define XMAC_CTRL_REG_SOFT_RESET				 (0x1<<6)
+#define XMAC_CTRL_REG_TX_EN					 (0x1<<0)
+#define XMAC_PAUSE_CTRL_REG_RX_PAUSE_EN				 (0x1<<18)
+#define XMAC_PAUSE_CTRL_REG_TX_PAUSE_EN				 (0x1<<17)
+#define XMAC_PFC_CTRL_HI_REG_PFC_REFRESH_EN			 (0x1<<0)
+#define XMAC_PFC_CTRL_HI_REG_PFC_STATS_EN			 (0x1<<3)
+#define XMAC_PFC_CTRL_HI_REG_RX_PFC_EN				 (0x1<<4)
+#define XMAC_PFC_CTRL_HI_REG_TX_PFC_EN				 (0x1<<5)
+#define XMAC_REG_CLEAR_RX_LSS_STATUS				 0x60
+#define XMAC_REG_CTRL						 0
+/* [RW 16] Upper 48 bits of ctrl_sa register. Used as the SA in PAUSE/PFC
+ * packets transmitted by the MAC */
+#define XMAC_REG_CTRL_SA_HI					 0x2c
+/* [RW 32] Lower 48 bits of ctrl_sa register. Used as the SA in PAUSE/PFC
+ * packets transmitted by the MAC */
+#define XMAC_REG_CTRL_SA_LO					 0x28
+#define XMAC_REG_PAUSE_CTRL					 0x68
+#define XMAC_REG_PFC_CTRL					 0x70
+#define XMAC_REG_PFC_CTRL_HI					 0x74
+#define XMAC_REG_RX_LSS_STATUS					 0x58
+/* [RW 14] Maximum packet size in receive direction; exclusive of preamble &
+ * CRC in strip mode */
+#define XMAC_REG_RX_MAX_SIZE					 0x40
+#define XMAC_REG_TX_CTRL					 0x20
+/* [W 17] Generate an operation after completion; bit-16 is
+ * AggVectIdx_valid; bits 15:8 are AggVectIdx; bits 7:5 are the TRIG and
+ * bits 4:0 are the T124Param[4:0] */
+#define XSDM_REG_OPERATION_GEN					 0x1664c4
+/* [R 1] pxp_ctrl rd_data fifo empty in sdm_dma_rsp block */
+#define XSDM_REG_RSP_PXP_CTRL_RDATA_EMPTY			 0x166548
+/* [R 1] parser fifo empty in sdm_sync block */
+#define XSDM_REG_SYNC_PARSER_EMPTY				 0x166550
+/* [R 1] parser serial fifo empty in sdm_sync block */
+#define XSDM_REG_SYNC_SYNC_EMPTY				 0x166558
+/* [RW 32] Interrupt mask register #0 read/write */
+#define XSDM_REG_XSDM_INT_MASK_0				 0x16629c
+#define XSDM_REG_XSDM_INT_MASK_1				 0x1662ac
+/* [R 32] Interrupt register #0 read */
+#define XSDM_REG_XSDM_INT_STS_0					 0x166290
+#define XSDM_REG_XSDM_INT_STS_1					 0x1662a0
+/* [RW 11] Parity mask register #0 read/write */
+#define XSDM_REG_XSDM_PRTY_MASK					 0x1662bc
+/* [R 11] Parity register #0 read */
+#define XSDM_REG_XSDM_PRTY_STS					 0x1662b0
+/* [RC 11] Parity register #0 read clear */
+#define XSDM_REG_XSDM_PRTY_STS_CLR				 0x1662b4
+/* [RW 32] This address space contains all registers and memories that are
+ * placed in SEM_FAST block. The SEM_FAST registers are described in
+ * appendix B. In order to access the SEM_FAST registers the base address
+ * XSEM_REGISTERS_FAST_MEMORY (Offset: 0x2a0000) should be added to each
+ * SEM_FAST register offset. */
+#define XSEM_REG_FAST_MEMORY					 0x2a0000
+/* [RW 15] Interrupt table Read and write access to it is not possible in
+ * the middle of the work */
+#define XSEM_REG_INT_TABLE					 0x280400
+/* [WB 128] Debug only. Passive buffer memory */
+#define XSEM_REG_PASSIVE_BUFFER					 0x282000
+/* [WB 46] pram memory. B45 is parity; b[44:0] - data. */
+#define XSEM_REG_PRAM						 0x2c0000
+/* [R 20] Valid sleeping threads indication have bit per thread */
+#define XSEM_REG_SLEEP_THREADS_VALID				 0x28026c
+/* [R 1] EXT_STORE FIFO is empty in sem_slow_ls_ext */
+#define XSEM_REG_SLOW_EXT_STORE_EMPTY				 0x2802a0
+/* [W 7] VF or PF ID for reset error bit. Values 0-63 reset error bit for 64
+ * VF; values 64-67 reset error for 4 PF; values 68-127 are not valid. */
+#define XSEM_REG_VFPF_ERR_NUM					 0x280380
+/* [RW 32] Interrupt mask register #0 read/write */
+#define XSEM_REG_XSEM_INT_MASK_0				 0x280110
+#define XSEM_REG_XSEM_INT_MASK_1				 0x280120
+/* [R 32] Interrupt register #0 read */
+#define XSEM_REG_XSEM_INT_STS_0					 0x280104
+#define XSEM_REG_XSEM_INT_STS_1					 0x280114
+/* [RW 32] Parity mask register #0 read/write */
+#define XSEM_REG_XSEM_PRTY_MASK_0				 0x280130
+#define XSEM_REG_XSEM_PRTY_MASK_1				 0x280140
+/* [R 32] Parity register #0 read */
+#define XSEM_REG_XSEM_PRTY_STS_0				 0x280124
+#define XSEM_REG_XSEM_PRTY_STS_1				 0x280134
+/* [RC 32] Parity register #0 read clear */
+#define XSEM_REG_XSEM_PRTY_STS_CLR_0				 0x280128
+#define XSEM_REG_XSEM_PRTY_STS_CLR_1				 0x280138
+#define MCPR_IMC_COMMAND_ENABLE					 (1L<<31)
+#define MCPR_IMC_COMMAND_IMC_STATUS_BITSHIFT			 16
+#define MCPR_IMC_COMMAND_OPERATION_BITSHIFT			 28
+#define MCPR_IMC_COMMAND_TRANSFER_ADDRESS_BITSHIFT		 8
+#define MCPR_NVM_ACCESS_ENABLE_EN				 (1L<<0)
+#define MCPR_NVM_ACCESS_ENABLE_WR_EN				 (1L<<1)
+#define MCPR_NVM_ADDR_NVM_ADDR_VALUE				 (0xffffffL<<0)
+#define MCPR_NVM_CFG4_FLASH_SIZE				 (0x7L<<0)
+#define MCPR_NVM_COMMAND_DOIT					 (1L<<4)
+#define MCPR_NVM_COMMAND_DONE					 (1L<<3)
+#define MCPR_NVM_COMMAND_FIRST					 (1L<<7)
+#define MCPR_NVM_COMMAND_LAST					 (1L<<8)
+#define MCPR_NVM_COMMAND_WR					 (1L<<5)
+#define MCPR_NVM_SW_ARB_ARB_ARB1				 (1L<<9)
+#define MCPR_NVM_SW_ARB_ARB_REQ_CLR1				 (1L<<5)
+#define MCPR_NVM_SW_ARB_ARB_REQ_SET1				 (1L<<1)
+#define BIGMAC_REGISTER_BMAC_CONTROL				 (0x00<<3)
+#define BIGMAC_REGISTER_BMAC_XGXS_CONTROL			 (0x01<<3)
+#define BIGMAC_REGISTER_CNT_MAX_SIZE				 (0x05<<3)
+#define BIGMAC_REGISTER_RX_CONTROL				 (0x21<<3)
+#define BIGMAC_REGISTER_RX_LLFC_MSG_FLDS			 (0x46<<3)
+#define BIGMAC_REGISTER_RX_LSS_STATUS				 (0x43<<3)
+#define BIGMAC_REGISTER_RX_MAX_SIZE				 (0x23<<3)
+#define BIGMAC_REGISTER_RX_STAT_GR64				 (0x26<<3)
+#define BIGMAC_REGISTER_RX_STAT_GRIPJ				 (0x42<<3)
+#define BIGMAC_REGISTER_TX_CONTROL				 (0x07<<3)
+#define BIGMAC_REGISTER_TX_MAX_SIZE				 (0x09<<3)
+#define BIGMAC_REGISTER_TX_PAUSE_THRESHOLD			 (0x0A<<3)
+#define BIGMAC_REGISTER_TX_SOURCE_ADDR				 (0x08<<3)
+#define BIGMAC_REGISTER_TX_STAT_GTBYT				 (0x20<<3)
+#define BIGMAC_REGISTER_TX_STAT_GTPKT				 (0x0C<<3)
+#define BIGMAC2_REGISTER_BMAC_CONTROL				 (0x00<<3)
+#define BIGMAC2_REGISTER_BMAC_XGXS_CONTROL			 (0x01<<3)
+#define BIGMAC2_REGISTER_CNT_MAX_SIZE				 (0x05<<3)
+#define BIGMAC2_REGISTER_PFC_CONTROL				 (0x06<<3)
+#define BIGMAC2_REGISTER_RX_CONTROL				 (0x3A<<3)
+#define BIGMAC2_REGISTER_RX_LLFC_MSG_FLDS			 (0x62<<3)
+#define BIGMAC2_REGISTER_RX_LSS_STAT				 (0x3E<<3)
+#define BIGMAC2_REGISTER_RX_MAX_SIZE				 (0x3C<<3)
+#define BIGMAC2_REGISTER_RX_STAT_GR64				 (0x40<<3)
+#define BIGMAC2_REGISTER_RX_STAT_GRIPJ				 (0x5f<<3)
+#define BIGMAC2_REGISTER_TX_CONTROL				 (0x1C<<3)
+#define BIGMAC2_REGISTER_TX_MAX_SIZE				 (0x1E<<3)
+#define BIGMAC2_REGISTER_TX_PAUSE_CONTROL			 (0x20<<3)
+#define BIGMAC2_REGISTER_TX_SOURCE_ADDR				 (0x1D<<3)
+#define BIGMAC2_REGISTER_TX_STAT_GTBYT				 (0x39<<3)
+#define BIGMAC2_REGISTER_TX_STAT_GTPOK				 (0x22<<3)
+#define EMAC_LED_1000MB_OVERRIDE				 (1L<<1)
+#define EMAC_LED_100MB_OVERRIDE					 (1L<<2)
+#define EMAC_LED_10MB_OVERRIDE					 (1L<<3)
+#define EMAC_LED_OVERRIDE					 (1L<<0)
+#define EMAC_MDIO_COMM_COMMAND_ADDRESS				 (0L<<26)
+#define EMAC_MDIO_COMM_COMMAND_READ_22				 (2L<<26)
+#define EMAC_MDIO_COMM_COMMAND_READ_45				 (3L<<26)
+#define EMAC_MDIO_COMM_COMMAND_WRITE_22				 (1L<<26)
+#define EMAC_MDIO_COMM_COMMAND_WRITE_45				 (1L<<26)
+#define EMAC_MDIO_COMM_DATA					 (0xffffL<<0)
+#define EMAC_MDIO_COMM_START_BUSY				 (1L<<29)
+#define EMAC_MDIO_MODE_AUTO_POLL				 (1L<<4)
+#define EMAC_MDIO_MODE_CLAUSE_45				 (1L<<31)
+#define EMAC_MDIO_MODE_CLOCK_CNT				 (0x3ffL<<16)
+#define EMAC_MDIO_MODE_CLOCK_CNT_BITSHIFT			 16
+#define EMAC_MDIO_STATUS_10MB					 (1L<<1)
+#define EMAC_MODE_25G_MODE					 (1L<<5)
+#define EMAC_MODE_HALF_DUPLEX					 (1L<<1)
+#define EMAC_MODE_PORT_GMII					 (2L<<2)
+#define EMAC_MODE_PORT_MII					 (1L<<2)
+#define EMAC_MODE_PORT_MII_10M					 (3L<<2)
+#define EMAC_MODE_RESET						 (1L<<0)
+#define EMAC_REG_EMAC_LED					 0xc
+#define EMAC_REG_EMAC_MAC_MATCH					 0x10
+#define EMAC_REG_EMAC_MDIO_COMM					 0xac
+#define EMAC_REG_EMAC_MDIO_MODE					 0xb4
+#define EMAC_REG_EMAC_MDIO_STATUS				 0xb0
+#define EMAC_REG_EMAC_MODE					 0x0
+#define EMAC_REG_EMAC_RX_MODE					 0xc8
+#define EMAC_REG_EMAC_RX_MTU_SIZE				 0x9c
+#define EMAC_REG_EMAC_RX_STAT_AC				 0x180
+#define EMAC_REG_EMAC_RX_STAT_AC_28				 0x1f4
+#define EMAC_REG_EMAC_RX_STAT_AC_COUNT				 23
+#define EMAC_REG_EMAC_TX_MODE					 0xbc
+#define EMAC_REG_EMAC_TX_STAT_AC				 0x280
+#define EMAC_REG_EMAC_TX_STAT_AC_COUNT				 22
+#define EMAC_REG_RX_PFC_MODE					 0x320
+#define EMAC_REG_RX_PFC_MODE_PRIORITIES				 (1L<<2)
+#define EMAC_REG_RX_PFC_MODE_RX_EN				 (1L<<1)
+#define EMAC_REG_RX_PFC_MODE_TX_EN				 (1L<<0)
+#define EMAC_REG_RX_PFC_PARAM					 0x324
+#define EMAC_REG_RX_PFC_PARAM_OPCODE_BITSHIFT			 0
+#define EMAC_REG_RX_PFC_PARAM_PRIORITY_EN_BITSHIFT		 16
+#define EMAC_REG_RX_PFC_STATS_XOFF_RCVD				 0x328
+#define EMAC_REG_RX_PFC_STATS_XOFF_RCVD_COUNT			 (0xffff<<0)
+#define EMAC_REG_RX_PFC_STATS_XOFF_SENT				 0x330
+#define EMAC_REG_RX_PFC_STATS_XOFF_SENT_COUNT			 (0xffff<<0)
+#define EMAC_REG_RX_PFC_STATS_XON_RCVD				 0x32c
+#define EMAC_REG_RX_PFC_STATS_XON_RCVD_COUNT			 (0xffff<<0)
+#define EMAC_REG_RX_PFC_STATS_XON_SENT				 0x334
+#define EMAC_REG_RX_PFC_STATS_XON_SENT_COUNT			 (0xffff<<0)
+#define EMAC_RX_MODE_FLOW_EN					 (1L<<2)
+#define EMAC_RX_MODE_KEEP_MAC_CONTROL				 (1L<<3)
+#define EMAC_RX_MODE_KEEP_VLAN_TAG				 (1L<<10)
+#define EMAC_RX_MODE_PROMISCUOUS				 (1L<<8)
+#define EMAC_RX_MODE_RESET					 (1L<<0)
+#define EMAC_RX_MTU_SIZE_JUMBO_ENA				 (1L<<31)
+#define EMAC_TX_MODE_EXT_PAUSE_EN				 (1L<<3)
+#define EMAC_TX_MODE_FLOW_EN					 (1L<<4)
+#define EMAC_TX_MODE_RESET					 (1L<<0)
+#define MISC_REGISTERS_GPIO_0					 0
+#define MISC_REGISTERS_GPIO_1					 1
+#define MISC_REGISTERS_GPIO_2					 2
+#define MISC_REGISTERS_GPIO_3					 3
+#define MISC_REGISTERS_GPIO_CLR_POS				 16
+#define MISC_REGISTERS_GPIO_FLOAT				 (0xffL<<24)
+#define MISC_REGISTERS_GPIO_FLOAT_POS				 24
+#define MISC_REGISTERS_GPIO_HIGH				 1
+#define MISC_REGISTERS_GPIO_INPUT_HI_Z				 2
+#define MISC_REGISTERS_GPIO_INT_CLR_POS				 24
+#define MISC_REGISTERS_GPIO_INT_OUTPUT_CLR			 0
+#define MISC_REGISTERS_GPIO_INT_OUTPUT_SET			 1
+#define MISC_REGISTERS_GPIO_INT_SET_POS				 16
+#define MISC_REGISTERS_GPIO_LOW					 0
+#define MISC_REGISTERS_GPIO_OUTPUT_HIGH				 1
+#define MISC_REGISTERS_GPIO_OUTPUT_LOW				 0
+#define MISC_REGISTERS_GPIO_PORT_SHIFT				 4
+#define MISC_REGISTERS_GPIO_SET_POS				 8
+#define MISC_REGISTERS_RESET_REG_1_CLEAR			 0x588
+#define MISC_REGISTERS_RESET_REG_1_RST_DORQ			 (0x1<<19)
+#define MISC_REGISTERS_RESET_REG_1_RST_HC			 (0x1<<29)
+#define MISC_REGISTERS_RESET_REG_1_RST_NIG			 (0x1<<7)
+#define MISC_REGISTERS_RESET_REG_1_RST_PXP			 (0x1<<26)
+#define MISC_REGISTERS_RESET_REG_1_RST_PXPV			 (0x1<<27)
+#define MISC_REGISTERS_RESET_REG_1_RST_QM			 (0x1<<17)
+#define MISC_REGISTERS_RESET_REG_1_SET				 0x584
+#define MISC_REGISTERS_RESET_REG_2_CLEAR			 0x598
+#define MISC_REGISTERS_RESET_REG_2_MSTAT0			 (0x1<<24)
+#define MISC_REGISTERS_RESET_REG_2_MSTAT1			 (0x1<<25)
+#define MISC_REGISTERS_RESET_REG_2_PGLC				 (0x1<<19)
+#define MISC_REGISTERS_RESET_REG_2_RST_ATC			 (0x1<<17)
+#define MISC_REGISTERS_RESET_REG_2_RST_BMAC0			 (0x1<<0)
+#define MISC_REGISTERS_RESET_REG_2_RST_BMAC1			 (0x1<<1)
+#define MISC_REGISTERS_RESET_REG_2_RST_EMAC0			 (0x1<<2)
+#define MISC_REGISTERS_RESET_REG_2_RST_EMAC0_HARD_CORE		 (0x1<<14)
+#define MISC_REGISTERS_RESET_REG_2_RST_EMAC1			 (0x1<<3)
+#define MISC_REGISTERS_RESET_REG_2_RST_EMAC1_HARD_CORE		 (0x1<<15)
+#define MISC_REGISTERS_RESET_REG_2_RST_GRC			 (0x1<<4)
+#define MISC_REGISTERS_RESET_REG_2_RST_MCP_N_HARD_CORE_RST_B	 (0x1<<6)
+#define MISC_REGISTERS_RESET_REG_2_RST_MCP_N_RESET_CMN_CORE	 (0x1<<8)
+#define MISC_REGISTERS_RESET_REG_2_RST_MCP_N_RESET_CMN_CPU	 (0x1<<7)
+#define MISC_REGISTERS_RESET_REG_2_RST_MCP_N_RESET_REG_HARD_CORE (0x1<<5)
+#define MISC_REGISTERS_RESET_REG_2_RST_MISC_CORE		 (0x1<<11)
+#define MISC_REGISTERS_RESET_REG_2_RST_PCI_MDIO			 (0x1<<13)
+#define MISC_REGISTERS_RESET_REG_2_RST_PXP_RQ_RD_WR		 (0x1<<16)
+#define MISC_REGISTERS_RESET_REG_2_RST_RBCN			 (0x1<<9)
+#define MISC_REGISTERS_RESET_REG_2_SET				 0x594
+#define MISC_REGISTERS_RESET_REG_2_UMAC0			 (0x1<<20)
+#define MISC_REGISTERS_RESET_REG_2_UMAC1			 (0x1<<21)
+#define MISC_REGISTERS_RESET_REG_2_XMAC				 (0x1<<22)
+#define MISC_REGISTERS_RESET_REG_2_XMAC_SOFT			 (0x1<<23)
+#define MISC_REGISTERS_RESET_REG_3_CLEAR			 0x5a8
+#define MISC_REGISTERS_RESET_REG_3_MISC_NIG_MUX_SERDES0_IDDQ	 (0x1<<1)
+#define MISC_REGISTERS_RESET_REG_3_MISC_NIG_MUX_SERDES0_PWRDWN	 (0x1<<2)
+#define MISC_REGISTERS_RESET_REG_3_MISC_NIG_MUX_SERDES0_PWRDWN_SD (0x1<<3)
+#define MISC_REGISTERS_RESET_REG_3_MISC_NIG_MUX_SERDES0_RSTB_HW	 (0x1<<0)
+#define MISC_REGISTERS_RESET_REG_3_MISC_NIG_MUX_XGXS0_IDDQ	 (0x1<<5)
+#define MISC_REGISTERS_RESET_REG_3_MISC_NIG_MUX_XGXS0_PWRDWN	 (0x1<<6)
+#define MISC_REGISTERS_RESET_REG_3_MISC_NIG_MUX_XGXS0_PWRDWN_SD	 (0x1<<7)
+#define MISC_REGISTERS_RESET_REG_3_MISC_NIG_MUX_XGXS0_RSTB_HW	 (0x1<<4)
+#define MISC_REGISTERS_RESET_REG_3_MISC_NIG_MUX_XGXS0_TXD_FIFO_RSTB (0x1<<8)
+#define MISC_REGISTERS_RESET_REG_3_SET				 0x5a4
+#define MISC_REGISTERS_SPIO_4					 4
+#define MISC_REGISTERS_SPIO_5					 5
+#define MISC_REGISTERS_SPIO_7					 7
+#define MISC_REGISTERS_SPIO_CLR_POS				 16
+#define MISC_REGISTERS_SPIO_FLOAT				 (0xffL<<24)
+#define MISC_REGISTERS_SPIO_FLOAT_POS				 24
+#define MISC_REGISTERS_SPIO_INPUT_HI_Z				 2
+#define MISC_REGISTERS_SPIO_INT_OLD_SET_POS			 16
+#define MISC_REGISTERS_SPIO_OUTPUT_HIGH				 1
+#define MISC_REGISTERS_SPIO_OUTPUT_LOW				 0
+#define MISC_REGISTERS_SPIO_SET_POS				 8
+#define HW_LOCK_MAX_RESOURCE_VALUE				 31
+#define HW_LOCK_RESOURCE_DRV_FLAGS				 10
+#define HW_LOCK_RESOURCE_GPIO					 1
+#define HW_LOCK_RESOURCE_MDIO					 0
+#define HW_LOCK_RESOURCE_NVRAM					 12
+#define HW_LOCK_RESOURCE_PORT0_ATT_MASK				 3
+#define HW_LOCK_RESOURCE_RECOVERY_LEADER_0			 8
+#define HW_LOCK_RESOURCE_RECOVERY_LEADER_1			 9
+#define HW_LOCK_RESOURCE_RECOVERY_REG				 11
+#define HW_LOCK_RESOURCE_RESET					 5
+#define HW_LOCK_RESOURCE_SPIO					 2
+#define AEU_INPUTS_ATTN_BITS_ATC_HW_INTERRUPT			 (0x1<<4)
+#define AEU_INPUTS_ATTN_BITS_ATC_PARITY_ERROR			 (0x1<<5)
+#define AEU_INPUTS_ATTN_BITS_BRB_PARITY_ERROR			 (0x1<<18)
+#define AEU_INPUTS_ATTN_BITS_CCM_HW_INTERRUPT			 (0x1<<31)
+#define AEU_INPUTS_ATTN_BITS_CCM_PARITY_ERROR			 (0x1<<30)
+#define AEU_INPUTS_ATTN_BITS_CDU_HW_INTERRUPT			 (0x1<<9)
+#define AEU_INPUTS_ATTN_BITS_CDU_PARITY_ERROR			 (0x1<<8)
+#define AEU_INPUTS_ATTN_BITS_CFC_HW_INTERRUPT			 (0x1<<7)
+#define AEU_INPUTS_ATTN_BITS_CFC_PARITY_ERROR			 (0x1<<6)
+#define AEU_INPUTS_ATTN_BITS_CSDM_HW_INTERRUPT			 (0x1<<29)
+#define AEU_INPUTS_ATTN_BITS_CSDM_PARITY_ERROR			 (0x1<<28)
+#define AEU_INPUTS_ATTN_BITS_CSEMI_HW_INTERRUPT			 (0x1<<1)
+#define AEU_INPUTS_ATTN_BITS_CSEMI_PARITY_ERROR			 (0x1<<0)
+#define AEU_INPUTS_ATTN_BITS_DEBUG_PARITY_ERROR			 (0x1<<18)
+#define AEU_INPUTS_ATTN_BITS_DMAE_HW_INTERRUPT			 (0x1<<11)
+#define AEU_INPUTS_ATTN_BITS_DMAE_PARITY_ERROR			 (0x1<<10)
+#define AEU_INPUTS_ATTN_BITS_DOORBELLQ_HW_INTERRUPT		 (0x1<<13)
+#define AEU_INPUTS_ATTN_BITS_DOORBELLQ_PARITY_ERROR		 (0x1<<12)
+#define AEU_INPUTS_ATTN_BITS_GPIO0_FUNCTION_0			 (0x1<<2)
+#define AEU_INPUTS_ATTN_BITS_IGU_PARITY_ERROR			 (0x1<<12)
+#define AEU_INPUTS_ATTN_BITS_MCP_LATCHED_ROM_PARITY		 (0x1<<28)
+#define AEU_INPUTS_ATTN_BITS_MCP_LATCHED_SCPAD_PARITY		 (0x1<<31)
+#define AEU_INPUTS_ATTN_BITS_MCP_LATCHED_UMP_RX_PARITY		 (0x1<<29)
+#define AEU_INPUTS_ATTN_BITS_MCP_LATCHED_UMP_TX_PARITY		 (0x1<<30)
+#define AEU_INPUTS_ATTN_BITS_MISC_HW_INTERRUPT			 (0x1<<15)
+#define AEU_INPUTS_ATTN_BITS_MISC_PARITY_ERROR			 (0x1<<14)
+#define AEU_INPUTS_ATTN_BITS_NIG_PARITY_ERROR			 (0x1<<14)
+#define AEU_INPUTS_ATTN_BITS_PARSER_PARITY_ERROR		 (0x1<<20)
+#define AEU_INPUTS_ATTN_BITS_PBCLIENT_HW_INTERRUPT		 (0x1<<31)
+#define AEU_INPUTS_ATTN_BITS_PBCLIENT_PARITY_ERROR		 (0x1<<30)
+#define AEU_INPUTS_ATTN_BITS_PBF_PARITY_ERROR			 (0x1<<0)
+#define AEU_INPUTS_ATTN_BITS_PGLUE_HW_INTERRUPT			 (0x1<<2)
+#define AEU_INPUTS_ATTN_BITS_PGLUE_PARITY_ERROR			 (0x1<<3)
+#define AEU_INPUTS_ATTN_BITS_PXPPCICLOCKCLIENT_HW_INTERRUPT	 (0x1<<5)
+#define AEU_INPUTS_ATTN_BITS_PXPPCICLOCKCLIENT_PARITY_ERROR	 (0x1<<4)
+#define AEU_INPUTS_ATTN_BITS_PXP_HW_INTERRUPT			 (0x1<<3)
+#define AEU_INPUTS_ATTN_BITS_PXP_PARITY_ERROR			 (0x1<<2)
+#define AEU_INPUTS_ATTN_BITS_QM_HW_INTERRUPT			 (0x1<<3)
+#define AEU_INPUTS_ATTN_BITS_QM_PARITY_ERROR			 (0x1<<2)
+#define AEU_INPUTS_ATTN_BITS_SEARCHER_PARITY_ERROR		 (0x1<<22)
+#define AEU_INPUTS_ATTN_BITS_SPIO5				 (0x1<<15)
+#define AEU_INPUTS_ATTN_BITS_TCM_HW_INTERRUPT			 (0x1<<27)
+#define AEU_INPUTS_ATTN_BITS_TCM_PARITY_ERROR			 (0x1<<26)
+#define AEU_INPUTS_ATTN_BITS_TIMERS_HW_INTERRUPT		 (0x1<<5)
+#define AEU_INPUTS_ATTN_BITS_TIMERS_PARITY_ERROR		 (0x1<<4)
+#define AEU_INPUTS_ATTN_BITS_TSDM_HW_INTERRUPT			 (0x1<<25)
+#define AEU_INPUTS_ATTN_BITS_TSDM_PARITY_ERROR			 (0x1<<24)
+#define AEU_INPUTS_ATTN_BITS_TSEMI_HW_INTERRUPT			 (0x1<<29)
+#define AEU_INPUTS_ATTN_BITS_TSEMI_PARITY_ERROR			 (0x1<<28)
+#define AEU_INPUTS_ATTN_BITS_UCM_HW_INTERRUPT			 (0x1<<23)
+#define AEU_INPUTS_ATTN_BITS_UCM_PARITY_ERROR			 (0x1<<22)
+#define AEU_INPUTS_ATTN_BITS_UPB_HW_INTERRUPT			 (0x1<<27)
+#define AEU_INPUTS_ATTN_BITS_UPB_PARITY_ERROR			 (0x1<<26)
+#define AEU_INPUTS_ATTN_BITS_USDM_HW_INTERRUPT			 (0x1<<21)
+#define AEU_INPUTS_ATTN_BITS_USDM_PARITY_ERROR			 (0x1<<20)
+#define AEU_INPUTS_ATTN_BITS_USEMI_HW_INTERRUPT			 (0x1<<25)
+#define AEU_INPUTS_ATTN_BITS_USEMI_PARITY_ERROR			 (0x1<<24)
+#define AEU_INPUTS_ATTN_BITS_VAUX_PCI_CORE_PARITY_ERROR		 (0x1<<16)
+#define AEU_INPUTS_ATTN_BITS_XCM_HW_INTERRUPT			 (0x1<<9)
+#define AEU_INPUTS_ATTN_BITS_XCM_PARITY_ERROR			 (0x1<<8)
+#define AEU_INPUTS_ATTN_BITS_XSDM_HW_INTERRUPT			 (0x1<<7)
+#define AEU_INPUTS_ATTN_BITS_XSDM_PARITY_ERROR			 (0x1<<6)
+#define AEU_INPUTS_ATTN_BITS_XSEMI_HW_INTERRUPT			 (0x1<<11)
+#define AEU_INPUTS_ATTN_BITS_XSEMI_PARITY_ERROR			 (0x1<<10)
+#define RESERVED_GENERAL_ATTENTION_BIT_0	0
+
+#define EVEREST_GEN_ATTN_IN_USE_MASK		0x7ffe0
+#define EVEREST_LATCHED_ATTN_IN_USE_MASK	0xffe00000
+
+#define RESERVED_GENERAL_ATTENTION_BIT_6	6
+#define RESERVED_GENERAL_ATTENTION_BIT_7	7
+#define RESERVED_GENERAL_ATTENTION_BIT_8	8
+#define RESERVED_GENERAL_ATTENTION_BIT_9	9
+#define RESERVED_GENERAL_ATTENTION_BIT_10	10
+#define RESERVED_GENERAL_ATTENTION_BIT_11	11
+#define RESERVED_GENERAL_ATTENTION_BIT_12	12
+#define RESERVED_GENERAL_ATTENTION_BIT_13	13
+#define RESERVED_GENERAL_ATTENTION_BIT_14	14
+#define RESERVED_GENERAL_ATTENTION_BIT_15	15
+#define RESERVED_GENERAL_ATTENTION_BIT_16	16
+#define RESERVED_GENERAL_ATTENTION_BIT_17	17
+#define RESERVED_GENERAL_ATTENTION_BIT_18	18
+#define RESERVED_GENERAL_ATTENTION_BIT_19	19
+#define RESERVED_GENERAL_ATTENTION_BIT_20	20
+#define RESERVED_GENERAL_ATTENTION_BIT_21	21
+
+/* storm asserts attention bits */
+#define TSTORM_FATAL_ASSERT_ATTENTION_BIT     RESERVED_GENERAL_ATTENTION_BIT_7
+#define USTORM_FATAL_ASSERT_ATTENTION_BIT     RESERVED_GENERAL_ATTENTION_BIT_8
+#define CSTORM_FATAL_ASSERT_ATTENTION_BIT     RESERVED_GENERAL_ATTENTION_BIT_9
+#define XSTORM_FATAL_ASSERT_ATTENTION_BIT     RESERVED_GENERAL_ATTENTION_BIT_10
+
+/* mcp error attention bit */
+#define MCP_FATAL_ASSERT_ATTENTION_BIT	      RESERVED_GENERAL_ATTENTION_BIT_11
+
+/*E1H NIG status sync attention mapped to group 4-7*/
+#define LINK_SYNC_ATTENTION_BIT_FUNC_0	    RESERVED_GENERAL_ATTENTION_BIT_12
+#define LINK_SYNC_ATTENTION_BIT_FUNC_1	    RESERVED_GENERAL_ATTENTION_BIT_13
+#define LINK_SYNC_ATTENTION_BIT_FUNC_2	    RESERVED_GENERAL_ATTENTION_BIT_14
+#define LINK_SYNC_ATTENTION_BIT_FUNC_3	    RESERVED_GENERAL_ATTENTION_BIT_15
+#define LINK_SYNC_ATTENTION_BIT_FUNC_4	    RESERVED_GENERAL_ATTENTION_BIT_16
+#define LINK_SYNC_ATTENTION_BIT_FUNC_5	    RESERVED_GENERAL_ATTENTION_BIT_17
+#define LINK_SYNC_ATTENTION_BIT_FUNC_6	    RESERVED_GENERAL_ATTENTION_BIT_18
+#define LINK_SYNC_ATTENTION_BIT_FUNC_7	    RESERVED_GENERAL_ATTENTION_BIT_19
+
+	/* Used For Error Recovery: changing this will require more \
+	changes in code that assume
+ * error recovery uses general attn bit20 ! */
+#define ERROR_RECOVERY_ATTENTION_BIT\
+	RESERVED_GENERAL_ATTENTION_BIT_20
+#define RESERVED_ATTENTION_BIT\
+	RESERVED_GENERAL_ATTENTION_BIT_21
+
+#define LATCHED_ATTN_RBCR			23
+#define LATCHED_ATTN_RBCT			24
+#define LATCHED_ATTN_RBCN			25
+#define LATCHED_ATTN_RBCU			26
+#define LATCHED_ATTN_RBCP			27
+#define LATCHED_ATTN_TIMEOUT_GRC		28
+#define LATCHED_ATTN_RSVD_GRC			29
+#define LATCHED_ATTN_ROM_PARITY_MCP		30
+#define LATCHED_ATTN_UM_RX_PARITY_MCP		31
+#define LATCHED_ATTN_UM_TX_PARITY_MCP		32
+#define LATCHED_ATTN_SCPAD_PARITY_MCP		33
+
+#define GENERAL_ATTEN_WORD(atten_name)	       ((94 + atten_name) / 32)
+#define GENERAL_ATTEN_OFFSET(atten_name)       (1UL << ((94 + atten_name) % 32))
+/*
+ * This file defines GRC base address for every block.
+ * This file is included by chipsim, asm microcode and cpp microcode.
+ * These values are used in Design.xml on regBase attribute
+ * Use the base with the generated offsets of specific registers.
+ */
+
+#define GRCBASE_PXPCS	    0x000000
+#define GRCBASE_PCICONFIG   0x002000
+#define GRCBASE_PCIREG	    0x002400
+#define GRCBASE_EMAC0	    0x008000
+#define GRCBASE_EMAC1	    0x008400
+#define GRCBASE_DBU		0x008800
+#define GRCBASE_PGLUE_B	    0x009000
+#define GRCBASE_MISC	    0x00A000
+#define GRCBASE_DBG		0x00C000
+#define GRCBASE_NIG		0x010000
+#define GRCBASE_XCM		0x020000
+#define GRCBASE_PRS	    0x040000
+#define GRCBASE_SRCH	    0x040400
+#define GRCBASE_TSDM	    0x042000
+#define GRCBASE_TCM		0x050000
+#define GRCBASE_BRB1	    0x060000
+#define GRCBASE_MCP		0x080000
+#define GRCBASE_UPB		0x0C1000
+#define GRCBASE_CSDM	    0x0C2000
+#define GRCBASE_USDM	    0x0C4000
+#define GRCBASE_CCM		0x0D0000
+#define GRCBASE_UCM		0x0E0000
+#define GRCBASE_CDU		0x101000
+#define GRCBASE_DMAE	    0x102000
+#define GRCBASE_PXP		0x103000
+#define GRCBASE_CFC		0x104000
+#define GRCBASE_HC		0x108000
+#define GRCBASE_ATC		0x110000
+#define GRCBASE_PXP2	    0x120000
+#define GRCBASE_IGU	    0x130000
+#define GRCBASE_PBF	    0x140000
+#define GRCBASE_UMAC0	    0x160000
+#define GRCBASE_UMAC1	    0x160400
+#define GRCBASE_XPB	    0x161000
+#define GRCBASE_MSTAT0	    0x162000
+#define GRCBASE_MSTAT1	    0x162800
+#define GRCBASE_XMAC0	    0x163000
+#define GRCBASE_XMAC1	    0x163800
+#define GRCBASE_TIMERS	    0x164000
+#define GRCBASE_XSDM	    0x166000
+#define GRCBASE_QM		0x168000
+#define GRCBASE_QM_4PORT    0x168000
+#define GRCBASE_DQ		0x170000
+#define GRCBASE_TSEM	    0x180000
+#define GRCBASE_CSEM	    0x200000
+#define GRCBASE_XSEM	    0x280000
+#define GRCBASE_XSEM_4PORT  0x280000
+#define GRCBASE_USEM	    0x300000
+#define GRCBASE_MCP_A	    0x380000
+#define GRCBASE_MISC_AEU    GRCBASE_MISC
+#define GRCBASE_Tstorm	    GRCBASE_TSEM
+#define GRCBASE_Cstorm	    GRCBASE_CSEM
+#define GRCBASE_Xstorm	    GRCBASE_XSEM
+#define GRCBASE_Ustorm	    GRCBASE_USEM
+
+
+/* offset of configuration space in the pci core register */
+#define PCICFG_OFFSET					0x2000
+#define PCICFG_VENDOR_ID_OFFSET				0x00
+#define PCICFG_DEVICE_ID_OFFSET				0x02
+#define PCICFG_COMMAND_OFFSET				0x04
+#define PCICFG_COMMAND_IO_SPACE			(1<<0)
+#define PCICFG_COMMAND_MEM_SPACE		(1<<1)
+#define PCICFG_COMMAND_BUS_MASTER		(1<<2)
+#define PCICFG_COMMAND_SPECIAL_CYCLES		(1<<3)
+#define PCICFG_COMMAND_MWI_CYCLES		(1<<4)
+#define PCICFG_COMMAND_VGA_SNOOP		(1<<5)
+#define PCICFG_COMMAND_PERR_ENA			(1<<6)
+#define PCICFG_COMMAND_STEPPING			(1<<7)
+#define PCICFG_COMMAND_SERR_ENA			(1<<8)
+#define PCICFG_COMMAND_FAST_B2B			(1<<9)
+#define PCICFG_COMMAND_INT_DISABLE		(1<<10)
+#define PCICFG_COMMAND_RESERVED			(0x1f<<11)
+#define PCICFG_STATUS_OFFSET				0x06
+#define PCICFG_REVESION_ID_OFFSET			0x08
+#define PCICFG_CACHE_LINE_SIZE				0x0c
+#define PCICFG_LATENCY_TIMER				0x0d
+#define PCICFG_HEADER_TYPE				0x0e
+#define PCICFG_HEADER_TYPE_NORMAL	   0
+#define PCICFG_HEADER_TYPE_BRIDGE	   1
+#define PCICFG_HEADER_TYPE_CARDBUS	   2
+#define PCICFG_BAR_1_LOW				0x10
+#define PCICFG_BAR_1_HIGH				0x14
+#define PCICFG_BAR_2_LOW				0x18
+#define PCICFG_BAR_2_HIGH				0x1c
+#define PCICFG_BAR_3_LOW				0x20
+#define PCICFG_BAR_3_HIGH				0x24
+#define PCICFG_SUBSYSTEM_VENDOR_ID_OFFSET		0x2c
+#define PCICFG_SUBSYSTEM_ID_OFFSET			0x2e
+#define PCICFG_INT_LINE					0x3c
+#define PCICFG_INT_PIN					0x3d
+#define PCICFG_PM_CAPABILITY				0x48
+#define PCICFG_PM_CAPABILITY_VERSION		(0x3<<16)
+#define PCICFG_PM_CAPABILITY_CLOCK		(1<<19)
+#define PCICFG_PM_CAPABILITY_RESERVED		(1<<20)
+#define PCICFG_PM_CAPABILITY_DSI		(1<<21)
+#define PCICFG_PM_CAPABILITY_AUX_CURRENT	(0x7<<22)
+#define PCICFG_PM_CAPABILITY_D1_SUPPORT		(1<<25)
+#define PCICFG_PM_CAPABILITY_D2_SUPPORT		(1<<26)
+#define PCICFG_PM_CAPABILITY_PME_IN_D0		(1<<27)
+#define PCICFG_PM_CAPABILITY_PME_IN_D1		(1<<28)
+#define PCICFG_PM_CAPABILITY_PME_IN_D2		(1<<29)
+#define PCICFG_PM_CAPABILITY_PME_IN_D3_HOT	(1<<30)
+#define PCICFG_PM_CAPABILITY_PME_IN_D3_COLD	(1<<31)
+#define PCICFG_PM_CSR_OFFSET				0x4c
+#define PCICFG_PM_CSR_STATE			(0x3<<0)
+#define PCICFG_PM_CSR_PME_ENABLE		(1<<8)
+#define PCICFG_PM_CSR_PME_STATUS		(1<<15)
+#define PCICFG_MSI_CAP_ID_OFFSET			0x58
+#define PCICFG_MSI_CONTROL_ENABLE		(0x1<<16)
+#define PCICFG_MSI_CONTROL_MCAP			(0x7<<17)
+#define PCICFG_MSI_CONTROL_MENA			(0x7<<20)
+#define PCICFG_MSI_CONTROL_64_BIT_ADDR_CAP	(0x1<<23)
+#define PCICFG_MSI_CONTROL_MSI_PVMASK_CAPABLE	(0x1<<24)
+#define PCICFG_GRC_ADDRESS				0x78
+#define PCICFG_GRC_DATA					0x80
+#define PCICFG_ME_REGISTER		    0x98
+#define PCICFG_MSIX_CAP_ID_OFFSET			0xa0
+#define PCICFG_MSIX_CONTROL_TABLE_SIZE		(0x7ff<<16)
+#define PCICFG_MSIX_CONTROL_RESERVED		(0x7<<27)
+#define PCICFG_MSIX_CONTROL_FUNC_MASK		(0x1<<30)
+#define PCICFG_MSIX_CONTROL_MSIX_ENABLE		(0x1<<31)
+
+#define PCICFG_DEVICE_CONTROL				0xb4
+#define PCICFG_DEVICE_CONTROL_NP_TRANSACTION_PEND   (1<<21)
+#define PCICFG_DEVICE_STATUS				0xb6
+#define PCICFG_DEVICE_STATUS_CORR_ERR_DET	(1<<0)
+#define PCICFG_DEVICE_STATUS_NON_FATAL_ERR_DET	(1<<1)
+#define PCICFG_DEVICE_STATUS_FATAL_ERR_DET	(1<<2)
+#define PCICFG_DEVICE_STATUS_UNSUP_REQ_DET	(1<<3)
+#define PCICFG_DEVICE_STATUS_AUX_PWR_DET	(1<<4)
+#define PCICFG_DEVICE_STATUS_NO_PEND		(1<<5)
+#define PCICFG_LINK_CONTROL				0xbc
+
+
+/* config_2 offset */
+#define GRC_CONFIG_2_SIZE_REG				0x408
+#define PCI_CONFIG_2_BAR1_SIZE			(0xfL<<0)
+#define PCI_CONFIG_2_BAR1_SIZE_DISABLED		(0L<<0)
+#define PCI_CONFIG_2_BAR1_SIZE_64K		(1L<<0)
+#define PCI_CONFIG_2_BAR1_SIZE_128K		(2L<<0)
+#define PCI_CONFIG_2_BAR1_SIZE_256K		(3L<<0)
+#define PCI_CONFIG_2_BAR1_SIZE_512K		(4L<<0)
+#define PCI_CONFIG_2_BAR1_SIZE_1M		(5L<<0)
+#define PCI_CONFIG_2_BAR1_SIZE_2M		(6L<<0)
+#define PCI_CONFIG_2_BAR1_SIZE_4M		(7L<<0)
+#define PCI_CONFIG_2_BAR1_SIZE_8M		(8L<<0)
+#define PCI_CONFIG_2_BAR1_SIZE_16M		(9L<<0)
+#define PCI_CONFIG_2_BAR1_SIZE_32M		(10L<<0)
+#define PCI_CONFIG_2_BAR1_SIZE_64M		(11L<<0)
+#define PCI_CONFIG_2_BAR1_SIZE_128M		(12L<<0)
+#define PCI_CONFIG_2_BAR1_SIZE_256M		(13L<<0)
+#define PCI_CONFIG_2_BAR1_SIZE_512M		(14L<<0)
+#define PCI_CONFIG_2_BAR1_SIZE_1G		(15L<<0)
+#define PCI_CONFIG_2_BAR1_64ENA			(1L<<4)
+#define PCI_CONFIG_2_EXP_ROM_RETRY		(1L<<5)
+#define PCI_CONFIG_2_CFG_CYCLE_RETRY		(1L<<6)
+#define PCI_CONFIG_2_FIRST_CFG_DONE		(1L<<7)
+#define PCI_CONFIG_2_EXP_ROM_SIZE		(0xffL<<8)
+#define PCI_CONFIG_2_EXP_ROM_SIZE_DISABLED	(0L<<8)
+#define PCI_CONFIG_2_EXP_ROM_SIZE_2K		(1L<<8)
+#define PCI_CONFIG_2_EXP_ROM_SIZE_4K		(2L<<8)
+#define PCI_CONFIG_2_EXP_ROM_SIZE_8K		(3L<<8)
+#define PCI_CONFIG_2_EXP_ROM_SIZE_16K		(4L<<8)
+#define PCI_CONFIG_2_EXP_ROM_SIZE_32K		(5L<<8)
+#define PCI_CONFIG_2_EXP_ROM_SIZE_64K		(6L<<8)
+#define PCI_CONFIG_2_EXP_ROM_SIZE_128K		(7L<<8)
+#define PCI_CONFIG_2_EXP_ROM_SIZE_256K		(8L<<8)
+#define PCI_CONFIG_2_EXP_ROM_SIZE_512K		(9L<<8)
+#define PCI_CONFIG_2_EXP_ROM_SIZE_1M		(10L<<8)
+#define PCI_CONFIG_2_EXP_ROM_SIZE_2M		(11L<<8)
+#define PCI_CONFIG_2_EXP_ROM_SIZE_4M		(12L<<8)
+#define PCI_CONFIG_2_EXP_ROM_SIZE_8M		(13L<<8)
+#define PCI_CONFIG_2_EXP_ROM_SIZE_16M		(14L<<8)
+#define PCI_CONFIG_2_EXP_ROM_SIZE_32M		(15L<<8)
+#define PCI_CONFIG_2_BAR_PREFETCH		(1L<<16)
+#define PCI_CONFIG_2_RESERVED0			(0x7fffL<<17)
+
+/* config_3 offset */
+#define GRC_CONFIG_3_SIZE_REG				0x40c
+#define PCI_CONFIG_3_STICKY_BYTE			(0xffL<<0)
+#define PCI_CONFIG_3_FORCE_PME			(1L<<24)
+#define PCI_CONFIG_3_PME_STATUS			(1L<<25)
+#define PCI_CONFIG_3_PME_ENABLE			(1L<<26)
+#define PCI_CONFIG_3_PM_STATE			(0x3L<<27)
+#define PCI_CONFIG_3_VAUX_PRESET			(1L<<30)
+#define PCI_CONFIG_3_PCI_POWER			(1L<<31)
+
+#define GRC_REG_DEVICE_CONTROL		    0x4d8
+#define PCIE_SRIOV_DISABLE_IN_PROGRESS\
+	(1 << 29) /*When VF Enable is cleared(after it was previously set),
+ this register will read a value of 1, indicating that all the
+ VFs that belong to this PF should be flushed.
+ Software should clear this bit within 1 second of VF Enable
+ being set by writing a 1 to it, so that VFs are visible to the system again.
+							WC */
+#define PCIE_FLR_IN_PROGRESS\
+	(1 << 27) /*When FLR is initiated, this register will read a \
+	value of 1 indicating that the
+ Function is in FLR state. Func can be brought out of FLR state either by
+ writing 1 to this register (at least 50 ms after FLR was initiated),
+ or it can also be cleared automatically after 55 ms if auto_clear bit
+ in private reg space is set. This bit also exists in VF register space
+							WC */
+
+#define GRC_BAR2_CONFIG					0x4e0
+#define PCI_CONFIG_2_BAR2_SIZE			(0xfL<<0)
+#define PCI_CONFIG_2_BAR2_SIZE_DISABLED		(0L<<0)
+#define PCI_CONFIG_2_BAR2_SIZE_64K		(1L<<0)
+#define PCI_CONFIG_2_BAR2_SIZE_128K		(2L<<0)
+#define PCI_CONFIG_2_BAR2_SIZE_256K		(3L<<0)
+#define PCI_CONFIG_2_BAR2_SIZE_512K		(4L<<0)
+#define PCI_CONFIG_2_BAR2_SIZE_1M		(5L<<0)
+#define PCI_CONFIG_2_BAR2_SIZE_2M		(6L<<0)
+#define PCI_CONFIG_2_BAR2_SIZE_4M		(7L<<0)
+#define PCI_CONFIG_2_BAR2_SIZE_8M		(8L<<0)
+#define PCI_CONFIG_2_BAR2_SIZE_16M		(9L<<0)
+#define PCI_CONFIG_2_BAR2_SIZE_32M		(10L<<0)
+#define PCI_CONFIG_2_BAR2_SIZE_64M		(11L<<0)
+#define PCI_CONFIG_2_BAR2_SIZE_128M		(12L<<0)
+#define PCI_CONFIG_2_BAR2_SIZE_256M		(13L<<0)
+#define PCI_CONFIG_2_BAR2_SIZE_512M		(14L<<0)
+#define PCI_CONFIG_2_BAR2_SIZE_1G		(15L<<0)
+#define PCI_CONFIG_2_BAR2_64ENA			(1L<<4)
+
+#define GRC_BAR3_CONFIG					0x4f4
+#define PCI_CONFIG_2_BAR3_SIZE			(0xfL<<0)
+#define PCI_CONFIG_2_BAR3_SIZE_DISABLED		(0L<<0)
+#define PCI_CONFIG_2_BAR3_SIZE_64K		(1L<<0)
+#define PCI_CONFIG_2_BAR3_SIZE_128K		(2L<<0)
+#define PCI_CONFIG_2_BAR3_SIZE_256K		(3L<<0)
+#define PCI_CONFIG_2_BAR3_SIZE_512K		(4L<<0)
+#define PCI_CONFIG_2_BAR3_SIZE_1M		(5L<<0)
+#define PCI_CONFIG_2_BAR3_SIZE_2M		(6L<<0)
+#define PCI_CONFIG_2_BAR3_SIZE_4M		(7L<<0)
+#define PCI_CONFIG_2_BAR3_SIZE_8M		(8L<<0)
+#define PCI_CONFIG_2_BAR3_SIZE_16M		(9L<<0)
+#define PCI_CONFIG_2_BAR3_SIZE_32M		(10L<<0)
+#define PCI_CONFIG_2_BAR3_SIZE_64M		(11L<<0)
+#define PCI_CONFIG_2_BAR3_SIZE_128M		(12L<<0)
+#define PCI_CONFIG_2_BAR3_SIZE_256M		(13L<<0)
+#define PCI_CONFIG_2_BAR3_SIZE_512M		(14L<<0)
+#define PCI_CONFIG_2_BAR3_SIZE_1G		(15L<<0)
+#define PCI_CONFIG_2_BAR3_64ENA			(1L<<4)
+
+#define PCI_PM_DATA_A					0x410
+#define PCI_PM_DATA_B					0x414
+#define PCI_ID_VAL1					0x434
+#define PCI_ID_VAL2					0x438
+
+
+#define GRC_CONFIG_REG_VF_BAR_REG_1		 0x608
+#define GRC_CONFIG_REG_VF_BAR_REG_BAR0_SIZE	 0xf
+
+#define GRC_CONFIG_REG_PF_INIT_VF		0x624
+#define GRC_CR_PF_INIT_VF_PF_FIRST_VF_NUM_MASK\
+	0xf /*First VF_NUM for PF is encoded in this register.
+ The number of VFs assigned to a PF is assumed to be a multiple of 8.
+	Software should program these bits based on Total Number of VFs \
+	programmed for each PF.
+ Since registers from 0x000-0x7ff are spilt across functions, each PF will have
+ the same location for the same 4 bits*/
+
+#define PXPCS_TL_CONTROL_5		    0x814
+#define PXPCS_TL_CONTROL_5_UNKNOWNTYPE_ERR_ATTN	   (1 << 29) /*WC*/
+#define PXPCS_TL_CONTROL_5_BOUNDARY4K_ERR_ATTN	   (1 << 28)   /*WC*/
+#define PXPCS_TL_CONTROL_5_MRRS_ERR_ATTN   (1 << 27)   /*WC*/
+#define PXPCS_TL_CONTROL_5_MPS_ERR_ATTN	   (1 << 26)   /*WC*/
+#define PXPCS_TL_CONTROL_5_TTX_BRIDGE_FORWARD_ERR  (1 << 25)   /*WC*/
+#define PXPCS_TL_CONTROL_5_TTX_TXINTF_OVERFLOW	   (1 << 24)   /*WC*/
+#define PXPCS_TL_CONTROL_5_PHY_ERR_ATTN	   (1 << 23)   /*RO*/
+#define PXPCS_TL_CONTROL_5_DL_ERR_ATTN	   (1 << 22)   /*RO*/
+#define PXPCS_TL_CONTROL_5_TTX_ERR_NP_TAG_IN_USE   (1 << 21)   /*WC*/
+#define PXPCS_TL_CONTROL_5_TRX_ERR_UNEXP_RTAG  (1 << 20)   /*WC*/
+#define PXPCS_TL_CONTROL_5_PRI_SIG_TARGET_ABORT1   (1 << 19)   /*WC*/
+#define PXPCS_TL_CONTROL_5_ERR_UNSPPORT1   (1 << 18)   /*WC*/
+#define PXPCS_TL_CONTROL_5_ERR_ECRC1   (1 << 17)   /*WC*/
+#define PXPCS_TL_CONTROL_5_ERR_MALF_TLP1   (1 << 16)   /*WC*/
+#define PXPCS_TL_CONTROL_5_ERR_RX_OFLOW1   (1 << 15)   /*WC*/
+#define PXPCS_TL_CONTROL_5_ERR_UNEXP_CPL1  (1 << 14)   /*WC*/
+#define PXPCS_TL_CONTROL_5_ERR_MASTER_ABRT1    (1 << 13)   /*WC*/
+#define PXPCS_TL_CONTROL_5_ERR_CPL_TIMEOUT1    (1 << 12)   /*WC*/
+#define PXPCS_TL_CONTROL_5_ERR_FC_PRTL1	   (1 << 11)   /*WC*/
+#define PXPCS_TL_CONTROL_5_ERR_PSND_TLP1   (1 << 10)   /*WC*/
+#define PXPCS_TL_CONTROL_5_PRI_SIG_TARGET_ABORT	   (1 << 9)    /*WC*/
+#define PXPCS_TL_CONTROL_5_ERR_UNSPPORT	   (1 << 8)    /*WC*/
+#define PXPCS_TL_CONTROL_5_ERR_ECRC    (1 << 7)    /*WC*/
+#define PXPCS_TL_CONTROL_5_ERR_MALF_TLP	   (1 << 6)    /*WC*/
+#define PXPCS_TL_CONTROL_5_ERR_RX_OFLOW	   (1 << 5)    /*WC*/
+#define PXPCS_TL_CONTROL_5_ERR_UNEXP_CPL   (1 << 4)    /*WC*/
+#define PXPCS_TL_CONTROL_5_ERR_MASTER_ABRT     (1 << 3)    /*WC*/
+#define PXPCS_TL_CONTROL_5_ERR_CPL_TIMEOUT     (1 << 2)    /*WC*/
+#define PXPCS_TL_CONTROL_5_ERR_FC_PRTL	   (1 << 1)    /*WC*/
+#define PXPCS_TL_CONTROL_5_ERR_PSND_TLP	   (1 << 0)    /*WC*/
+
+
+#define PXPCS_TL_FUNC345_STAT	   0x854
+#define PXPCS_TL_FUNC345_STAT_PRI_SIG_TARGET_ABORT4    (1 << 29)   /* WC */
+#define PXPCS_TL_FUNC345_STAT_ERR_UNSPPORT4\
+	(1 << 28) /* Unsupported Request Error Status in function4, if \
+	set, generate pcie_err_attn output when this error is seen. WC */
+#define PXPCS_TL_FUNC345_STAT_ERR_ECRC4\
+	(1 << 27) /* ECRC Error TLP Status Status in function 4, if set, \
+	generate pcie_err_attn output when this error is seen.. WC */
+#define PXPCS_TL_FUNC345_STAT_ERR_MALF_TLP4\
+	(1 << 26) /* Malformed TLP Status Status in function 4, if set, \
+	generate pcie_err_attn output when this error is seen.. WC */
+#define PXPCS_TL_FUNC345_STAT_ERR_RX_OFLOW4\
+	(1 << 25) /* Receiver Overflow Status Status in function 4, if \
+	set, generate pcie_err_attn output when this error is seen.. WC \
+	*/
+#define PXPCS_TL_FUNC345_STAT_ERR_UNEXP_CPL4\
+	(1 << 24) /* Unexpected Completion Status Status in function 4, \
+	if set, generate pcie_err_attn output when this error is seen. WC \
+	*/
+#define PXPCS_TL_FUNC345_STAT_ERR_MASTER_ABRT4\
+	(1 << 23) /* Receive UR Statusin function 4. If set, generate \
+	pcie_err_attn output when this error is seen. WC */
+#define PXPCS_TL_FUNC345_STAT_ERR_CPL_TIMEOUT4\
+	(1 << 22) /* Completer Timeout Status Status in function 4, if \
+	set, generate pcie_err_attn output when this error is seen. WC */
+#define PXPCS_TL_FUNC345_STAT_ERR_FC_PRTL4\
+	(1 << 21) /* Flow Control Protocol Error Status Status in \
+	function 4, if set, generate pcie_err_attn output when this error \
+	is seen. WC */
+#define PXPCS_TL_FUNC345_STAT_ERR_PSND_TLP4\
+	(1 << 20) /* Poisoned Error Status Status in function 4, if set, \
+	generate pcie_err_attn output when this error is seen.. WC */
+#define PXPCS_TL_FUNC345_STAT_PRI_SIG_TARGET_ABORT3    (1 << 19)   /* WC */
+#define PXPCS_TL_FUNC345_STAT_ERR_UNSPPORT3\
+	(1 << 18) /* Unsupported Request Error Status in function3, if \
+	set, generate pcie_err_attn output when this error is seen. WC */
+#define PXPCS_TL_FUNC345_STAT_ERR_ECRC3\
+	(1 << 17) /* ECRC Error TLP Status Status in function 3, if set, \
+	generate pcie_err_attn output when this error is seen.. WC */
+#define PXPCS_TL_FUNC345_STAT_ERR_MALF_TLP3\
+	(1 << 16) /* Malformed TLP Status Status in function 3, if set, \
+	generate pcie_err_attn output when this error is seen.. WC */
+#define PXPCS_TL_FUNC345_STAT_ERR_RX_OFLOW3\
+	(1 << 15) /* Receiver Overflow Status Status in function 3, if \
+	set, generate pcie_err_attn output when this error is seen.. WC \
+	*/
+#define PXPCS_TL_FUNC345_STAT_ERR_UNEXP_CPL3\
+	(1 << 14) /* Unexpected Completion Status Status in function 3, \
+	if set, generate pcie_err_attn output when this error is seen. WC \
+	*/
+#define PXPCS_TL_FUNC345_STAT_ERR_MASTER_ABRT3\
+	(1 << 13) /* Receive UR Statusin function 3. If set, generate \
+	pcie_err_attn output when this error is seen. WC */
+#define PXPCS_TL_FUNC345_STAT_ERR_CPL_TIMEOUT3\
+	(1 << 12) /* Completer Timeout Status Status in function 3, if \
+	set, generate pcie_err_attn output when this error is seen. WC */
+#define PXPCS_TL_FUNC345_STAT_ERR_FC_PRTL3\
+	(1 << 11) /* Flow Control Protocol Error Status Status in \
+	function 3, if set, generate pcie_err_attn output when this error \
+	is seen. WC */
+#define PXPCS_TL_FUNC345_STAT_ERR_PSND_TLP3\
+	(1 << 10) /* Poisoned Error Status Status in function 3, if set, \
+	generate pcie_err_attn output when this error is seen.. WC */
+#define PXPCS_TL_FUNC345_STAT_PRI_SIG_TARGET_ABORT2    (1 << 9)    /* WC */
+#define PXPCS_TL_FUNC345_STAT_ERR_UNSPPORT2\
+	(1 << 8) /* Unsupported Request Error Status for Function 2, if \
+	set, generate pcie_err_attn output when this error is seen. WC */
+#define PXPCS_TL_FUNC345_STAT_ERR_ECRC2\
+	(1 << 7) /* ECRC Error TLP Status Status for Function 2, if set, \
+	generate pcie_err_attn output when this error is seen.. WC */
+#define PXPCS_TL_FUNC345_STAT_ERR_MALF_TLP2\
+	(1 << 6) /* Malformed TLP Status Status for Function 2, if set, \
+	generate pcie_err_attn output when this error is seen.. WC */
+#define PXPCS_TL_FUNC345_STAT_ERR_RX_OFLOW2\
+	(1 << 5) /* Receiver Overflow Status Status for Function 2, if \
+	set, generate pcie_err_attn output when this error is seen.. WC \
+	*/
+#define PXPCS_TL_FUNC345_STAT_ERR_UNEXP_CPL2\
+	(1 << 4) /* Unexpected Completion Status Status for Function 2, \
+	if set, generate pcie_err_attn output when this error is seen. WC \
+	*/
+#define PXPCS_TL_FUNC345_STAT_ERR_MASTER_ABRT2\
+	(1 << 3) /* Receive UR Statusfor Function 2. If set, generate \
+	pcie_err_attn output when this error is seen. WC */
+#define PXPCS_TL_FUNC345_STAT_ERR_CPL_TIMEOUT2\
+	(1 << 2) /* Completer Timeout Status Status for Function 2, if \
+	set, generate pcie_err_attn output when this error is seen. WC */
+#define PXPCS_TL_FUNC345_STAT_ERR_FC_PRTL2\
+	(1 << 1) /* Flow Control Protocol Error Status Status for \
+	Function 2, if set, generate pcie_err_attn output when this error \
+	is seen. WC */
+#define PXPCS_TL_FUNC345_STAT_ERR_PSND_TLP2\
+	(1 << 0) /* Poisoned Error Status Status for Function 2, if set, \
+	generate pcie_err_attn output when this error is seen.. WC */
+
+
+#define PXPCS_TL_FUNC678_STAT  0x85C
+#define PXPCS_TL_FUNC678_STAT_PRI_SIG_TARGET_ABORT7    (1 << 29)   /*	 WC */
+#define PXPCS_TL_FUNC678_STAT_ERR_UNSPPORT7\
+	(1 << 28) /* Unsupported Request Error Status in function7, if \
+	set, generate pcie_err_attn output when this error is seen. WC */
+#define PXPCS_TL_FUNC678_STAT_ERR_ECRC7\
+	(1 << 27) /* ECRC Error TLP Status Status in function 7, if set, \
+	generate pcie_err_attn output when this error is seen.. WC */
+#define PXPCS_TL_FUNC678_STAT_ERR_MALF_TLP7\
+	(1 << 26) /* Malformed TLP Status Status in function 7, if set, \
+	generate pcie_err_attn output when this error is seen.. WC */
+#define PXPCS_TL_FUNC678_STAT_ERR_RX_OFLOW7\
+	(1 << 25) /* Receiver Overflow Status Status in function 7, if \
+	set, generate pcie_err_attn output when this error is seen.. WC \
+	*/
+#define PXPCS_TL_FUNC678_STAT_ERR_UNEXP_CPL7\
+	(1 << 24) /* Unexpected Completion Status Status in function 7, \
+	if set, generate pcie_err_attn output when this error is seen. WC \
+	*/
+#define PXPCS_TL_FUNC678_STAT_ERR_MASTER_ABRT7\
+	(1 << 23) /* Receive UR Statusin function 7. If set, generate \
+	pcie_err_attn output when this error is seen. WC */
+#define PXPCS_TL_FUNC678_STAT_ERR_CPL_TIMEOUT7\
+	(1 << 22) /* Completer Timeout Status Status in function 7, if \
+	set, generate pcie_err_attn output when this error is seen. WC */
+#define PXPCS_TL_FUNC678_STAT_ERR_FC_PRTL7\
+	(1 << 21) /* Flow Control Protocol Error Status Status in \
+	function 7, if set, generate pcie_err_attn output when this error \
+	is seen. WC */
+#define PXPCS_TL_FUNC678_STAT_ERR_PSND_TLP7\
+	(1 << 20) /* Poisoned Error Status Status in function 7, if set, \
+	generate pcie_err_attn output when this error is seen.. WC */
+#define PXPCS_TL_FUNC678_STAT_PRI_SIG_TARGET_ABORT6    (1 << 19)    /*	  WC */
+#define PXPCS_TL_FUNC678_STAT_ERR_UNSPPORT6\
+	(1 << 18) /* Unsupported Request Error Status in function6, if \
+	set, generate pcie_err_attn output when this error is seen. WC */
+#define PXPCS_TL_FUNC678_STAT_ERR_ECRC6\
+	(1 << 17) /* ECRC Error TLP Status Status in function 6, if set, \
+	generate pcie_err_attn output when this error is seen.. WC */
+#define PXPCS_TL_FUNC678_STAT_ERR_MALF_TLP6\
+	(1 << 16) /* Malformed TLP Status Status in function 6, if set, \
+	generate pcie_err_attn output when this error is seen.. WC */
+#define PXPCS_TL_FUNC678_STAT_ERR_RX_OFLOW6\
+	(1 << 15) /* Receiver Overflow Status Status in function 6, if \
+	set, generate pcie_err_attn output when this error is seen.. WC \
+	*/
+#define PXPCS_TL_FUNC678_STAT_ERR_UNEXP_CPL6\
+	(1 << 14) /* Unexpected Completion Status Status in function 6, \
+	if set, generate pcie_err_attn output when this error is seen. WC \
+	*/
+#define PXPCS_TL_FUNC678_STAT_ERR_MASTER_ABRT6\
+	(1 << 13) /* Receive UR Statusin function 6. If set, generate \
+	pcie_err_attn output when this error is seen. WC */
+#define PXPCS_TL_FUNC678_STAT_ERR_CPL_TIMEOUT6\
+	(1 << 12) /* Completer Timeout Status Status in function 6, if \
+	set, generate pcie_err_attn output when this error is seen. WC */
+#define PXPCS_TL_FUNC678_STAT_ERR_FC_PRTL6\
+	(1 << 11) /* Flow Control Protocol Error Status Status in \
+	function 6, if set, generate pcie_err_attn output when this error \
+	is seen. WC */
+#define PXPCS_TL_FUNC678_STAT_ERR_PSND_TLP6\
+	(1 << 10) /* Poisoned Error Status Status in function 6, if set, \
+	generate pcie_err_attn output when this error is seen.. WC */
+#define PXPCS_TL_FUNC678_STAT_PRI_SIG_TARGET_ABORT5    (1 << 9) /*    WC */
+#define PXPCS_TL_FUNC678_STAT_ERR_UNSPPORT5\
+	(1 << 8) /* Unsupported Request Error Status for Function 5, if \
+	set, generate pcie_err_attn output when this error is seen. WC */
+#define PXPCS_TL_FUNC678_STAT_ERR_ECRC5\
+	(1 << 7) /* ECRC Error TLP Status Status for Function 5, if set, \
+	generate pcie_err_attn output when this error is seen.. WC */
+#define PXPCS_TL_FUNC678_STAT_ERR_MALF_TLP5\
+	(1 << 6) /* Malformed TLP Status Status for Function 5, if set, \
+	generate pcie_err_attn output when this error is seen.. WC */
+#define PXPCS_TL_FUNC678_STAT_ERR_RX_OFLOW5\
+	(1 << 5) /* Receiver Overflow Status Status for Function 5, if \
+	set, generate pcie_err_attn output when this error is seen.. WC \
+	*/
+#define PXPCS_TL_FUNC678_STAT_ERR_UNEXP_CPL5\
+	(1 << 4) /* Unexpected Completion Status Status for Function 5, \
+	if set, generate pcie_err_attn output when this error is seen. WC \
+	*/
+#define PXPCS_TL_FUNC678_STAT_ERR_MASTER_ABRT5\
+	(1 << 3) /* Receive UR Statusfor Function 5. If set, generate \
+	pcie_err_attn output when this error is seen. WC */
+#define PXPCS_TL_FUNC678_STAT_ERR_CPL_TIMEOUT5\
+	(1 << 2) /* Completer Timeout Status Status for Function 5, if \
+	set, generate pcie_err_attn output when this error is seen. WC */
+#define PXPCS_TL_FUNC678_STAT_ERR_FC_PRTL5\
+	(1 << 1) /* Flow Control Protocol Error Status Status for \
+	Function 5, if set, generate pcie_err_attn output when this error \
+	is seen. WC */
+#define PXPCS_TL_FUNC678_STAT_ERR_PSND_TLP5\
+	(1 << 0) /* Poisoned Error Status Status for Function 5, if set, \
+	generate pcie_err_attn output when this error is seen.. WC */
+
+
+#define BAR_USTRORM_INTMEM				0x400000
+#define BAR_CSTRORM_INTMEM				0x410000
+#define BAR_XSTRORM_INTMEM				0x420000
+#define BAR_TSTRORM_INTMEM				0x430000
+
+/* for accessing the IGU in case of status block ACK */
+#define BAR_IGU_INTMEM					0x440000
+
+#define BAR_DOORBELL_OFFSET				0x800000
+
+#define BAR_ME_REGISTER					0x450000
+#define ME_REG_PF_NUM_SHIFT		0
+#define ME_REG_PF_NUM\
+	(7L<<ME_REG_PF_NUM_SHIFT) /* Relative PF Num */
+#define ME_REG_VF_VALID			(1<<8)
+#define ME_REG_VF_NUM_SHIFT		9
+#define ME_REG_VF_NUM_MASK		(0x3f<<ME_REG_VF_NUM_SHIFT)
+#define ME_REG_VF_ERR			(0x1<<3)
+#define ME_REG_ABS_PF_NUM_SHIFT		16
+#define ME_REG_ABS_PF_NUM\
+	(7L<<ME_REG_ABS_PF_NUM_SHIFT) /* Absolute PF Num */
+
+
+#define PXP_VF_ADRR_NUM_QUEUES		136
+#define PXP_ADDR_QUEUE_SIZE			32
+#define PXP_ADDR_REG_SIZE			512
+
+
+#define PXP_VF_ADDR_IGU_START		0
+#define PXP_VF_ADDR_IGU_SIZE		(0x3000)
+#define PXP_VF_ADDR_IGU_END\
+	((PXP_VF_ADDR_IGU_START) + (PXP_VF_ADDR_IGU_SIZE) - 1)
+
+#define PXP_VF_ADDR_USDM_QUEUES_START		0x3000
+#define PXP_VF_ADDR_USDM_QUEUES_SIZE\
+	(PXP_VF_ADRR_NUM_QUEUES * PXP_ADDR_QUEUE_SIZE)
+#define PXP_VF_ADDR_USDM_QUEUES_END\
+	((PXP_VF_ADDR_USDM_QUEUES_START) + (PXP_VF_ADDR_USDM_QUEUES_SIZE) - 1)
+
+#define PXP_VF_ADDR_CSDM_QUEUES_START		0x4100
+#define PXP_VF_ADDR_CSDM_QUEUES_SIZE\
+	(PXP_VF_ADRR_NUM_QUEUES * PXP_ADDR_QUEUE_SIZE)
+#define PXP_VF_ADDR_CSDM_QUEUES_END\
+	((PXP_VF_ADDR_CSDM_QUEUES_START) + (PXP_VF_ADDR_CSDM_QUEUES_SIZE) - 1)
+
+#define PXP_VF_ADDR_XSDM_QUEUES_START		0x5200
+#define PXP_VF_ADDR_XSDM_QUEUES_SIZE\
+	(PXP_VF_ADRR_NUM_QUEUES * PXP_ADDR_QUEUE_SIZE)
+#define PXP_VF_ADDR_XSDM_QUEUES_END\
+	((PXP_VF_ADDR_XSDM_QUEUES_START) + (PXP_VF_ADDR_XSDM_QUEUES_SIZE) - 1)
+
+#define PXP_VF_ADDR_TSDM_QUEUES_START		0x6300
+#define PXP_VF_ADDR_TSDM_QUEUES_SIZE\
+	(PXP_VF_ADRR_NUM_QUEUES * PXP_ADDR_QUEUE_SIZE)
+#define PXP_VF_ADDR_TSDM_QUEUES_END\
+	((PXP_VF_ADDR_TSDM_QUEUES_START) + (PXP_VF_ADDR_TSDM_QUEUES_SIZE) - 1)
+
+#define PXP_VF_ADDR_USDM_GLOBAL_START		0x7400
+#define PXP_VF_ADDR_USDM_GLOBAL_SIZE		(PXP_ADDR_REG_SIZE)
+#define PXP_VF_ADDR_USDM_GLOBAL_END\
+	((PXP_VF_ADDR_USDM_GLOBAL_START) + (PXP_VF_ADDR_USDM_GLOBAL_SIZE) - 1)
+
+#define PXP_VF_ADDR_CSDM_GLOBAL_START		0x7600
+#define PXP_VF_ADDR_CSDM_GLOBAL_SIZE		(PXP_ADDR_REG_SIZE)
+#define PXP_VF_ADDR_CSDM_GLOBAL_END\
+	((PXP_VF_ADDR_CSDM_GLOBAL_START) + (PXP_VF_ADDR_CSDM_GLOBAL_SIZE) - 1)
+
+#define PXP_VF_ADDR_XSDM_GLOBAL_START		0x7800
+#define PXP_VF_ADDR_XSDM_GLOBAL_SIZE		(PXP_ADDR_REG_SIZE)
+#define PXP_VF_ADDR_XSDM_GLOBAL_END\
+	((PXP_VF_ADDR_XSDM_GLOBAL_START) + (PXP_VF_ADDR_XSDM_GLOBAL_SIZE) - 1)
+
+#define PXP_VF_ADDR_TSDM_GLOBAL_START		0x7a00
+#define PXP_VF_ADDR_TSDM_GLOBAL_SIZE		(PXP_ADDR_REG_SIZE)
+#define PXP_VF_ADDR_TSDM_GLOBAL_END\
+	((PXP_VF_ADDR_TSDM_GLOBAL_START) + (PXP_VF_ADDR_TSDM_GLOBAL_SIZE) - 1)
+
+#define PXP_VF_ADDR_DB_START				0x7c00
+#define PXP_VF_ADDR_DB_SIZE					(0x200)
+#define PXP_VF_ADDR_DB_END\
+	((PXP_VF_ADDR_DB_START) + (PXP_VF_ADDR_DB_SIZE) - 1)
+
+#define PXP_VF_ADDR_GRC_START				0x7e00
+#define PXP_VF_ADDR_GRC_SIZE				(0x200)
+#define PXP_VF_ADDR_GRC_END\
+	((PXP_VF_ADDR_GRC_START) + (PXP_VF_ADDR_GRC_SIZE) - 1)
+
+#define PXP_VF_ADDR_DORQ_START				(0x0)
+#define PXP_VF_ADDR_DORQ_SIZE				(0xffffffff)
+#define PXP_VF_ADDR_DORQ_END				(0xffffffff)
+
+#define PXP_BAR_GRC		0
+#define PXP_BAR_TSDM	0
+#define PXP_BAR_USDM	0
+#define PXP_BAR_XSDM	0
+#define PXP_BAR_CSDM	0
+#define PXP_BAR_IGU		0
+#define PXP_BAR_DQ		1
+
+#define PXP_VF_BAR_IGU	0
+#define PXP_VF_BAR_USDM_QUEUES	0
+#define PXP_VF_BAR_TSDM_QUEUES	0
+#define PXP_VF_BAR_XSDM_QUEUES	0
+#define PXP_VF_BAR_CSDM_QUEUES	0
+#define PXP_VF_BAR_USDM_GLOBAL	0
+#define PXP_VF_BAR_TSDM_GLOBAL	0
+#define PXP_VF_BAR_XSDM_GLOBAL	0
+#define PXP_VF_BAR_CSDM_GLOBAL	0
+#define PXP_VF_BAR_DB	0
+#define PXP_VF_BAR_GRC	0
+#define PXP_VF_BAR_DORQ	1
+
+/* PCI CAPABILITIES*/
+
+#define PCI_CAP_PCIE				0x10	/*PCIe capability ID*/
+
+#define PCIE_DEV_CAPS				0x04
+
+#define PCIE_DEV_CTRL				0x08
+#define PCIE_DEV_STATUS				0x0A
+
+#define MDIO_REG_BANK_CL73_IEEEB0			0x0
+#define MDIO_CL73_IEEEB0_CL73_AN_CONTROL		0x0
+#define MDIO_CL73_IEEEB0_CL73_AN_CONTROL_RESTART_AN	0x0200
+#define MDIO_CL73_IEEEB0_CL73_AN_CONTROL_AN_EN		0x1000
+#define MDIO_CL73_IEEEB0_CL73_AN_CONTROL_MAIN_RST	0x8000
+
+#define MDIO_REG_BANK_CL73_IEEEB1			0x10
+#define MDIO_CL73_IEEEB1_AN_ADV1			0x00
+#define MDIO_CL73_IEEEB1_AN_ADV1_PAUSE			0x0400
+#define MDIO_CL73_IEEEB1_AN_ADV1_ASYMMETRIC		0x0800
+#define MDIO_CL73_IEEEB1_AN_ADV1_PAUSE_BOTH		0x0C00
+#define MDIO_CL73_IEEEB1_AN_ADV1_PAUSE_MASK		0x0C00
+#define MDIO_CL73_IEEEB1_AN_ADV2				0x01
+#define MDIO_CL73_IEEEB1_AN_ADV2_ADVR_1000M		0x0000
+#define MDIO_CL73_IEEEB1_AN_ADV2_ADVR_1000M_KX		0x0020
+#define MDIO_CL73_IEEEB1_AN_ADV2_ADVR_10G_KX4		0x0040
+#define MDIO_CL73_IEEEB1_AN_ADV2_ADVR_10G_KR		0x0080
+#define MDIO_CL73_IEEEB1_AN_LP_ADV1			0x03
+#define MDIO_CL73_IEEEB1_AN_LP_ADV1_PAUSE		0x0400
+#define MDIO_CL73_IEEEB1_AN_LP_ADV1_ASYMMETRIC		0x0800
+#define MDIO_CL73_IEEEB1_AN_LP_ADV1_PAUSE_BOTH		0x0C00
+#define MDIO_CL73_IEEEB1_AN_LP_ADV1_PAUSE_MASK		0x0C00
+
+
+#define MDIO_REG_BANK_RX0				0x80b0
+#define MDIO_RX0_RX_STATUS				0x10
+#define MDIO_RX0_RX_STATUS_SIGDET			0x8000
+#define MDIO_RX0_RX_STATUS_RX_SEQ_DONE			0x1000
+#define MDIO_RX0_RX_EQ_BOOST				0x1c
+#define MDIO_RX0_RX_EQ_BOOST_EQUALIZER_CTRL_MASK	0x7
+#define MDIO_RX0_RX_EQ_BOOST_OFFSET_CTRL		0x10
+
+#define MDIO_REG_BANK_RX1				0x80c0
+#define MDIO_RX1_RX_EQ_BOOST				0x1c
+#define MDIO_RX1_RX_EQ_BOOST_EQUALIZER_CTRL_MASK	0x7
+#define MDIO_RX1_RX_EQ_BOOST_OFFSET_CTRL		0x10
+
+#define MDIO_REG_BANK_RX2				0x80d0
+#define MDIO_RX2_RX_EQ_BOOST				0x1c
+#define MDIO_RX2_RX_EQ_BOOST_EQUALIZER_CTRL_MASK	0x7
+#define MDIO_RX2_RX_EQ_BOOST_OFFSET_CTRL		0x10
+
+#define MDIO_REG_BANK_RX3				0x80e0
+#define MDIO_RX3_RX_EQ_BOOST				0x1c
+#define MDIO_RX3_RX_EQ_BOOST_EQUALIZER_CTRL_MASK	0x7
+#define MDIO_RX3_RX_EQ_BOOST_OFFSET_CTRL		0x10
+
+#define MDIO_REG_BANK_RX_ALL				0x80f0
+#define MDIO_RX_ALL_RX_EQ_BOOST				0x1c
+#define MDIO_RX_ALL_RX_EQ_BOOST_EQUALIZER_CTRL_MASK	0x7
+#define MDIO_RX_ALL_RX_EQ_BOOST_OFFSET_CTRL	0x10
+
+#define MDIO_REG_BANK_TX0				0x8060
+#define MDIO_TX0_TX_DRIVER				0x17
+#define MDIO_TX0_TX_DRIVER_PREEMPHASIS_MASK		0xf000
+#define MDIO_TX0_TX_DRIVER_PREEMPHASIS_SHIFT		12
+#define MDIO_TX0_TX_DRIVER_IDRIVER_MASK			0x0f00
+#define MDIO_TX0_TX_DRIVER_IDRIVER_SHIFT		8
+#define MDIO_TX0_TX_DRIVER_IPREDRIVER_MASK		0x00f0
+#define MDIO_TX0_TX_DRIVER_IPREDRIVER_SHIFT		4
+#define MDIO_TX0_TX_DRIVER_IFULLSPD_MASK		0x000e
+#define MDIO_TX0_TX_DRIVER_IFULLSPD_SHIFT		1
+#define MDIO_TX0_TX_DRIVER_ICBUF1T			1
+
+#define MDIO_REG_BANK_TX1				0x8070
+#define MDIO_TX1_TX_DRIVER				0x17
+#define MDIO_TX0_TX_DRIVER_PREEMPHASIS_MASK		0xf000
+#define MDIO_TX0_TX_DRIVER_PREEMPHASIS_SHIFT		12
+#define MDIO_TX0_TX_DRIVER_IDRIVER_MASK			0x0f00
+#define MDIO_TX0_TX_DRIVER_IDRIVER_SHIFT		8
+#define MDIO_TX0_TX_DRIVER_IPREDRIVER_MASK		0x00f0
+#define MDIO_TX0_TX_DRIVER_IPREDRIVER_SHIFT		4
+#define MDIO_TX0_TX_DRIVER_IFULLSPD_MASK		0x000e
+#define MDIO_TX0_TX_DRIVER_IFULLSPD_SHIFT		1
+#define MDIO_TX0_TX_DRIVER_ICBUF1T			1
+
+#define MDIO_REG_BANK_TX2				0x8080
+#define MDIO_TX2_TX_DRIVER				0x17
+#define MDIO_TX0_TX_DRIVER_PREEMPHASIS_MASK		0xf000
+#define MDIO_TX0_TX_DRIVER_PREEMPHASIS_SHIFT		12
+#define MDIO_TX0_TX_DRIVER_IDRIVER_MASK			0x0f00
+#define MDIO_TX0_TX_DRIVER_IDRIVER_SHIFT		8
+#define MDIO_TX0_TX_DRIVER_IPREDRIVER_MASK		0x00f0
+#define MDIO_TX0_TX_DRIVER_IPREDRIVER_SHIFT		4
+#define MDIO_TX0_TX_DRIVER_IFULLSPD_MASK		0x000e
+#define MDIO_TX0_TX_DRIVER_IFULLSPD_SHIFT		1
+#define MDIO_TX0_TX_DRIVER_ICBUF1T			1
+
+#define MDIO_REG_BANK_TX3				0x8090
+#define MDIO_TX3_TX_DRIVER				0x17
+#define MDIO_TX0_TX_DRIVER_PREEMPHASIS_MASK		0xf000
+#define MDIO_TX0_TX_DRIVER_PREEMPHASIS_SHIFT		12
+#define MDIO_TX0_TX_DRIVER_IDRIVER_MASK			0x0f00
+#define MDIO_TX0_TX_DRIVER_IDRIVER_SHIFT		8
+#define MDIO_TX0_TX_DRIVER_IPREDRIVER_MASK		0x00f0
+#define MDIO_TX0_TX_DRIVER_IPREDRIVER_SHIFT		4
+#define MDIO_TX0_TX_DRIVER_IFULLSPD_MASK		0x000e
+#define MDIO_TX0_TX_DRIVER_IFULLSPD_SHIFT		1
+#define MDIO_TX0_TX_DRIVER_ICBUF1T			1
+
+#define MDIO_REG_BANK_XGXS_BLOCK0			0x8000
+#define MDIO_BLOCK0_XGXS_CONTROL			0x10
+
+#define MDIO_REG_BANK_XGXS_BLOCK1			0x8010
+#define MDIO_BLOCK1_LANE_CTRL0				0x15
+#define MDIO_BLOCK1_LANE_CTRL1				0x16
+#define MDIO_BLOCK1_LANE_CTRL2				0x17
+#define MDIO_BLOCK1_LANE_PRBS				0x19
+
+#define MDIO_REG_BANK_XGXS_BLOCK2			0x8100
+#define MDIO_XGXS_BLOCK2_RX_LN_SWAP			0x10
+#define MDIO_XGXS_BLOCK2_RX_LN_SWAP_ENABLE		0x8000
+#define MDIO_XGXS_BLOCK2_RX_LN_SWAP_FORCE_ENABLE	0x4000
+#define MDIO_XGXS_BLOCK2_TX_LN_SWAP		0x11
+#define MDIO_XGXS_BLOCK2_TX_LN_SWAP_ENABLE		0x8000
+#define MDIO_XGXS_BLOCK2_UNICORE_MODE_10G	0x14
+#define MDIO_XGXS_BLOCK2_UNICORE_MODE_10G_CX4_XGXS	0x0001
+#define MDIO_XGXS_BLOCK2_UNICORE_MODE_10G_HIGIG_XGXS	0x0010
+#define MDIO_XGXS_BLOCK2_TEST_MODE_LANE		0x15
+
+#define MDIO_REG_BANK_GP_STATUS				0x8120
+#define MDIO_GP_STATUS_TOP_AN_STATUS1				0x1B
+#define MDIO_GP_STATUS_TOP_AN_STATUS1_CL73_AUTONEG_COMPLETE	0x0001
+#define MDIO_GP_STATUS_TOP_AN_STATUS1_CL37_AUTONEG_COMPLETE	0x0002
+#define MDIO_GP_STATUS_TOP_AN_STATUS1_LINK_STATUS		0x0004
+#define MDIO_GP_STATUS_TOP_AN_STATUS1_DUPLEX_STATUS		0x0008
+#define MDIO_GP_STATUS_TOP_AN_STATUS1_CL73_MR_LP_NP_AN_ABLE	0x0010
+#define MDIO_GP_STATUS_TOP_AN_STATUS1_CL73_LP_NP_BAM_ABLE	0x0020
+#define MDIO_GP_STATUS_TOP_AN_STATUS1_PAUSE_RSOLUTION_TXSIDE	0x0040
+#define MDIO_GP_STATUS_TOP_AN_STATUS1_PAUSE_RSOLUTION_RXSIDE	0x0080
+#define MDIO_GP_STATUS_TOP_AN_STATUS1_ACTUAL_SPEED_MASK		0x3f00
+#define MDIO_GP_STATUS_TOP_AN_STATUS1_ACTUAL_SPEED_10M		0x0000
+#define MDIO_GP_STATUS_TOP_AN_STATUS1_ACTUAL_SPEED_100M		0x0100
+#define MDIO_GP_STATUS_TOP_AN_STATUS1_ACTUAL_SPEED_1G		0x0200
+#define MDIO_GP_STATUS_TOP_AN_STATUS1_ACTUAL_SPEED_2_5G		0x0300
+#define MDIO_GP_STATUS_TOP_AN_STATUS1_ACTUAL_SPEED_5G		0x0400
+#define MDIO_GP_STATUS_TOP_AN_STATUS1_ACTUAL_SPEED_6G		0x0500
+#define MDIO_GP_STATUS_TOP_AN_STATUS1_ACTUAL_SPEED_10G_HIG	0x0600
+#define MDIO_GP_STATUS_TOP_AN_STATUS1_ACTUAL_SPEED_10G_CX4	0x0700
+#define MDIO_GP_STATUS_TOP_AN_STATUS1_ACTUAL_SPEED_12G_HIG	0x0800
+#define MDIO_GP_STATUS_TOP_AN_STATUS1_ACTUAL_SPEED_12_5G	0x0900
+#define MDIO_GP_STATUS_TOP_AN_STATUS1_ACTUAL_SPEED_13G		0x0A00
+#define MDIO_GP_STATUS_TOP_AN_STATUS1_ACTUAL_SPEED_15G		0x0B00
+#define MDIO_GP_STATUS_TOP_AN_STATUS1_ACTUAL_SPEED_16G		0x0C00
+#define MDIO_GP_STATUS_TOP_AN_STATUS1_ACTUAL_SPEED_1G_KX	0x0D00
+#define MDIO_GP_STATUS_TOP_AN_STATUS1_ACTUAL_SPEED_10G_KX4	0x0E00
+#define MDIO_GP_STATUS_TOP_AN_STATUS1_ACTUAL_SPEED_10G_KR	0x0F00
+#define MDIO_GP_STATUS_TOP_AN_STATUS1_ACTUAL_SPEED_10G_XFI	0x1B00
+#define MDIO_GP_STATUS_TOP_AN_STATUS1_ACTUAL_SPEED_20G_DXGXS	0x1E00
+#define MDIO_GP_STATUS_TOP_AN_STATUS1_ACTUAL_SPEED_10G_SFI	0x1F00
+
+
+#define MDIO_REG_BANK_10G_PARALLEL_DETECT		0x8130
+#define MDIO_10G_PARALLEL_DETECT_PAR_DET_10G_STATUS		0x10
+#define MDIO_10G_PARALLEL_DETECT_PAR_DET_10G_STATUS_PD_LINK		0x8000
+#define MDIO_10G_PARALLEL_DETECT_PAR_DET_10G_CONTROL		0x11
+#define MDIO_10G_PARALLEL_DETECT_PAR_DET_10G_CONTROL_PARDET10G_EN	0x1
+#define MDIO_10G_PARALLEL_DETECT_PAR_DET_10G_LINK		0x13
+#define MDIO_10G_PARALLEL_DETECT_PAR_DET_10G_LINK_CNT		(0xb71<<1)
+
+#define MDIO_REG_BANK_SERDES_DIGITAL			0x8300
+#define MDIO_SERDES_DIGITAL_A_1000X_CONTROL1			0x10
+#define MDIO_SERDES_DIGITAL_A_1000X_CONTROL1_FIBER_MODE			0x0001
+#define MDIO_SERDES_DIGITAL_A_1000X_CONTROL1_TBI_IF			0x0002
+#define MDIO_SERDES_DIGITAL_A_1000X_CONTROL1_SIGNAL_DETECT_EN		0x0004
+#define MDIO_SERDES_DIGITAL_A_1000X_CONTROL1_INVERT_SIGNAL_DETECT	0x0008
+#define MDIO_SERDES_DIGITAL_A_1000X_CONTROL1_AUTODET			0x0010
+#define MDIO_SERDES_DIGITAL_A_1000X_CONTROL1_MSTR_MODE			0x0020
+#define MDIO_SERDES_DIGITAL_A_1000X_CONTROL2			0x11
+#define MDIO_SERDES_DIGITAL_A_1000X_CONTROL2_PRL_DT_EN			0x0001
+#define MDIO_SERDES_DIGITAL_A_1000X_CONTROL2_AN_FST_TMR			0x0040
+#define MDIO_SERDES_DIGITAL_A_1000X_STATUS1			0x14
+#define MDIO_SERDES_DIGITAL_A_1000X_STATUS1_SGMII			0x0001
+#define MDIO_SERDES_DIGITAL_A_1000X_STATUS1_LINK			0x0002
+#define MDIO_SERDES_DIGITAL_A_1000X_STATUS1_DUPLEX			0x0004
+#define MDIO_SERDES_DIGITAL_A_1000X_STATUS1_SPEED_MASK			0x0018
+#define MDIO_SERDES_DIGITAL_A_1000X_STATUS1_SPEED_SHIFT			3
+#define MDIO_SERDES_DIGITAL_A_1000X_STATUS1_SPEED_2_5G			0x0018
+#define MDIO_SERDES_DIGITAL_A_1000X_STATUS1_SPEED_1G			0x0010
+#define MDIO_SERDES_DIGITAL_A_1000X_STATUS1_SPEED_100M			0x0008
+#define MDIO_SERDES_DIGITAL_A_1000X_STATUS1_SPEED_10M			0x0000
+#define MDIO_SERDES_DIGITAL_A_1000X_STATUS2			0x15
+#define MDIO_SERDES_DIGITAL_A_1000X_STATUS2_AN_DISABLED			0x0002
+#define MDIO_SERDES_DIGITAL_MISC1				0x18
+#define MDIO_SERDES_DIGITAL_MISC1_REFCLK_SEL_MASK			0xE000
+#define MDIO_SERDES_DIGITAL_MISC1_REFCLK_SEL_25M			0x0000
+#define MDIO_SERDES_DIGITAL_MISC1_REFCLK_SEL_100M			0x2000
+#define MDIO_SERDES_DIGITAL_MISC1_REFCLK_SEL_125M			0x4000
+#define MDIO_SERDES_DIGITAL_MISC1_REFCLK_SEL_156_25M			0x6000
+#define MDIO_SERDES_DIGITAL_MISC1_REFCLK_SEL_187_5M			0x8000
+#define MDIO_SERDES_DIGITAL_MISC1_FORCE_SPEED_SEL			0x0010
+#define MDIO_SERDES_DIGITAL_MISC1_FORCE_SPEED_MASK			0x000f
+#define MDIO_SERDES_DIGITAL_MISC1_FORCE_SPEED_2_5G			0x0000
+#define MDIO_SERDES_DIGITAL_MISC1_FORCE_SPEED_5G			0x0001
+#define MDIO_SERDES_DIGITAL_MISC1_FORCE_SPEED_6G			0x0002
+#define MDIO_SERDES_DIGITAL_MISC1_FORCE_SPEED_10G_HIG			0x0003
+#define MDIO_SERDES_DIGITAL_MISC1_FORCE_SPEED_10G_CX4			0x0004
+#define MDIO_SERDES_DIGITAL_MISC1_FORCE_SPEED_12G			0x0005
+#define MDIO_SERDES_DIGITAL_MISC1_FORCE_SPEED_12_5G			0x0006
+#define MDIO_SERDES_DIGITAL_MISC1_FORCE_SPEED_13G			0x0007
+#define MDIO_SERDES_DIGITAL_MISC1_FORCE_SPEED_15G			0x0008
+#define MDIO_SERDES_DIGITAL_MISC1_FORCE_SPEED_16G			0x0009
+
+#define MDIO_REG_BANK_OVER_1G				0x8320
+#define MDIO_OVER_1G_DIGCTL_3_4					0x14
+#define MDIO_OVER_1G_DIGCTL_3_4_MP_ID_MASK				0xffe0
+#define MDIO_OVER_1G_DIGCTL_3_4_MP_ID_SHIFT				5
+#define MDIO_OVER_1G_UP1					0x19
+#define MDIO_OVER_1G_UP1_2_5G						0x0001
+#define MDIO_OVER_1G_UP1_5G						0x0002
+#define MDIO_OVER_1G_UP1_6G						0x0004
+#define MDIO_OVER_1G_UP1_10G						0x0010
+#define MDIO_OVER_1G_UP1_10GH						0x0008
+#define MDIO_OVER_1G_UP1_12G						0x0020
+#define MDIO_OVER_1G_UP1_12_5G						0x0040
+#define MDIO_OVER_1G_UP1_13G						0x0080
+#define MDIO_OVER_1G_UP1_15G						0x0100
+#define MDIO_OVER_1G_UP1_16G						0x0200
+#define MDIO_OVER_1G_UP2					0x1A
+#define MDIO_OVER_1G_UP2_IPREDRIVER_MASK				0x0007
+#define MDIO_OVER_1G_UP2_IDRIVER_MASK					0x0038
+#define MDIO_OVER_1G_UP2_PREEMPHASIS_MASK				0x03C0
+#define MDIO_OVER_1G_UP3					0x1B
+#define MDIO_OVER_1G_UP3_HIGIG2						0x0001
+#define MDIO_OVER_1G_LP_UP1					0x1C
+#define MDIO_OVER_1G_LP_UP2					0x1D
+#define MDIO_OVER_1G_LP_UP2_MR_ADV_OVER_1G_MASK				0x03ff
+#define MDIO_OVER_1G_LP_UP2_PREEMPHASIS_MASK				0x0780
+#define MDIO_OVER_1G_LP_UP2_PREEMPHASIS_SHIFT				7
+#define MDIO_OVER_1G_LP_UP3						0x1E
+
+#define MDIO_REG_BANK_REMOTE_PHY			0x8330
+#define MDIO_REMOTE_PHY_MISC_RX_STATUS				0x10
+#define MDIO_REMOTE_PHY_MISC_RX_STATUS_CL37_FSM_RECEIVED_OVER1G_MSG	0x0010
+#define MDIO_REMOTE_PHY_MISC_RX_STATUS_CL37_FSM_RECEIVED_BRCM_OUI_MSG	0x0600
+
+#define MDIO_REG_BANK_BAM_NEXT_PAGE			0x8350
+#define MDIO_BAM_NEXT_PAGE_MP5_NEXT_PAGE_CTRL			0x10
+#define MDIO_BAM_NEXT_PAGE_MP5_NEXT_PAGE_CTRL_BAM_MODE			0x0001
+#define MDIO_BAM_NEXT_PAGE_MP5_NEXT_PAGE_CTRL_TETON_AN			0x0002
+
+#define MDIO_REG_BANK_CL73_USERB0		0x8370
+#define MDIO_CL73_USERB0_CL73_UCTRL				0x10
+#define MDIO_CL73_USERB0_CL73_UCTRL_USTAT1_MUXSEL			0x0002
+#define MDIO_CL73_USERB0_CL73_USTAT1				0x11
+#define MDIO_CL73_USERB0_CL73_USTAT1_LINK_STATUS_CHECK			0x0100
+#define MDIO_CL73_USERB0_CL73_USTAT1_AN_GOOD_CHECK_BAM37		0x0400
+#define MDIO_CL73_USERB0_CL73_BAM_CTRL1				0x12
+#define MDIO_CL73_USERB0_CL73_BAM_CTRL1_BAM_EN				0x8000
+#define MDIO_CL73_USERB0_CL73_BAM_CTRL1_BAM_STATION_MNGR_EN		0x4000
+#define MDIO_CL73_USERB0_CL73_BAM_CTRL1_BAM_NP_AFTER_BP_EN		0x2000
+#define MDIO_CL73_USERB0_CL73_BAM_CTRL3				0x14
+#define MDIO_CL73_USERB0_CL73_BAM_CTRL3_USE_CL73_HCD_MR			0x0001
+
+#define MDIO_REG_BANK_AER_BLOCK			0xFFD0
+#define MDIO_AER_BLOCK_AER_REG					0x1E
+
+#define MDIO_REG_BANK_COMBO_IEEE0		0xFFE0
+#define MDIO_COMBO_IEEE0_MII_CONTROL				0x10
+#define MDIO_COMBO_IEEO_MII_CONTROL_MAN_SGMII_SP_MASK			0x2040
+#define MDIO_COMBO_IEEO_MII_CONTROL_MAN_SGMII_SP_10			0x0000
+#define MDIO_COMBO_IEEO_MII_CONTROL_MAN_SGMII_SP_100			0x2000
+#define MDIO_COMBO_IEEO_MII_CONTROL_MAN_SGMII_SP_1000			0x0040
+#define MDIO_COMBO_IEEO_MII_CONTROL_FULL_DUPLEX				0x0100
+#define MDIO_COMBO_IEEO_MII_CONTROL_RESTART_AN				0x0200
+#define MDIO_COMBO_IEEO_MII_CONTROL_AN_EN				0x1000
+#define MDIO_COMBO_IEEO_MII_CONTROL_LOOPBACK				0x4000
+#define MDIO_COMBO_IEEO_MII_CONTROL_RESET				0x8000
+#define MDIO_COMBO_IEEE0_MII_STATUS				0x11
+#define MDIO_COMBO_IEEE0_MII_STATUS_LINK_PASS				0x0004
+#define MDIO_COMBO_IEEE0_MII_STATUS_AUTONEG_COMPLETE			0x0020
+#define MDIO_COMBO_IEEE0_AUTO_NEG_ADV				0x14
+#define MDIO_COMBO_IEEE0_AUTO_NEG_ADV_FULL_DUPLEX			0x0020
+#define MDIO_COMBO_IEEE0_AUTO_NEG_ADV_HALF_DUPLEX			0x0040
+#define MDIO_COMBO_IEEE0_AUTO_NEG_ADV_PAUSE_MASK			0x0180
+#define MDIO_COMBO_IEEE0_AUTO_NEG_ADV_PAUSE_NONE			0x0000
+#define MDIO_COMBO_IEEE0_AUTO_NEG_ADV_PAUSE_SYMMETRIC			0x0080
+#define MDIO_COMBO_IEEE0_AUTO_NEG_ADV_PAUSE_ASYMMETRIC			0x0100
+#define MDIO_COMBO_IEEE0_AUTO_NEG_ADV_PAUSE_BOTH			0x0180
+#define MDIO_COMBO_IEEE0_AUTO_NEG_ADV_NEXT_PAGE				0x8000
+#define MDIO_COMBO_IEEE0_AUTO_NEG_LINK_PARTNER_ABILITY1		0x15
+#define MDIO_COMBO_IEEE0_AUTO_NEG_LINK_PARTNER_ABILITY1_NEXT_PAGE	0x8000
+#define MDIO_COMBO_IEEE0_AUTO_NEG_LINK_PARTNER_ABILITY1_ACK		0x4000
+#define MDIO_COMBO_IEEE0_AUTO_NEG_LINK_PARTNER_ABILITY1_PAUSE_MASK	0x0180
+#define MDIO_COMBO_IEEE0_AUTO_NEG_LINK_PARTNER_ABILITY1_PAUSE_NONE	0x0000
+#define MDIO_COMBO_IEEE0_AUTO_NEG_LINK_PARTNER_ABILITY1_PAUSE_BOTH	0x0180
+#define MDIO_COMBO_IEEE0_AUTO_NEG_LINK_PARTNER_ABILITY1_HALF_DUP_CAP	0x0040
+#define MDIO_COMBO_IEEE0_AUTO_NEG_LINK_PARTNER_ABILITY1_FULL_DUP_CAP	0x0020
+/*WhenthelinkpartnerisinSGMIImode(bit0=1), then
+bit15=link, bit12=duplex, bits11:10=speed, bit14=acknowledge.
+Theotherbitsarereservedandshouldbezero*/
+#define MDIO_COMBO_IEEE0_AUTO_NEG_LINK_PARTNER_ABILITY1_SGMII_MODE	0x0001
+
+
+#define MDIO_PMA_DEVAD			0x1
+/*ieee*/
+#define MDIO_PMA_REG_CTRL		0x0
+#define MDIO_PMA_REG_STATUS		0x1
+#define MDIO_PMA_REG_10G_CTRL2		0x7
+#define MDIO_PMA_REG_TX_DISABLE		0x0009
+#define MDIO_PMA_REG_RX_SD		0xa
+/*bcm*/
+#define MDIO_PMA_REG_BCM_CTRL		0x0096
+#define MDIO_PMA_REG_FEC_CTRL		0x00ab
+#define MDIO_PMA_LASI_RXCTRL		0x9000
+#define MDIO_PMA_LASI_TXCTRL		0x9001
+#define MDIO_PMA_LASI_CTRL		0x9002
+#define MDIO_PMA_LASI_RXSTAT		0x9003
+#define MDIO_PMA_LASI_TXSTAT		0x9004
+#define MDIO_PMA_LASI_STAT		0x9005
+#define MDIO_PMA_REG_PHY_IDENTIFIER	0xc800
+#define MDIO_PMA_REG_DIGITAL_CTRL	0xc808
+#define MDIO_PMA_REG_DIGITAL_STATUS	0xc809
+#define MDIO_PMA_REG_TX_POWER_DOWN	0xca02
+#define MDIO_PMA_REG_CMU_PLL_BYPASS	0xca09
+#define MDIO_PMA_REG_MISC_CTRL		0xca0a
+#define MDIO_PMA_REG_GEN_CTRL		0xca10
+#define MDIO_PMA_REG_GEN_CTRL_ROM_RESET_INTERNAL_MP	0x0188
+#define MDIO_PMA_REG_GEN_CTRL_ROM_MICRO_RESET		0x018a
+#define MDIO_PMA_REG_M8051_MSGIN_REG	0xca12
+#define MDIO_PMA_REG_M8051_MSGOUT_REG	0xca13
+#define MDIO_PMA_REG_ROM_VER1		0xca19
+#define MDIO_PMA_REG_ROM_VER2		0xca1a
+#define MDIO_PMA_REG_EDC_FFE_MAIN	0xca1b
+#define MDIO_PMA_REG_PLL_BANDWIDTH	0xca1d
+#define MDIO_PMA_REG_PLL_CTRL		0xca1e
+#define MDIO_PMA_REG_MISC_CTRL0		0xca23
+#define MDIO_PMA_REG_LRM_MODE		0xca3f
+#define MDIO_PMA_REG_CDR_BANDWIDTH	0xca46
+#define MDIO_PMA_REG_MISC_CTRL1		0xca85
+
+#define MDIO_PMA_REG_SFP_TWO_WIRE_CTRL		0x8000
+#define MDIO_PMA_REG_SFP_TWO_WIRE_CTRL_STATUS_MASK	0x000c
+#define MDIO_PMA_REG_SFP_TWO_WIRE_STATUS_IDLE		0x0000
+#define MDIO_PMA_REG_SFP_TWO_WIRE_STATUS_COMPLETE	0x0004
+#define MDIO_PMA_REG_SFP_TWO_WIRE_STATUS_IN_PROGRESS	0x0008
+#define MDIO_PMA_REG_SFP_TWO_WIRE_STATUS_FAILED		0x000c
+#define MDIO_PMA_REG_SFP_TWO_WIRE_BYTE_CNT	0x8002
+#define MDIO_PMA_REG_SFP_TWO_WIRE_MEM_ADDR	0x8003
+#define MDIO_PMA_REG_8726_TWO_WIRE_DATA_BUF	0xc820
+#define MDIO_PMA_REG_8726_TWO_WIRE_DATA_MASK 0xff
+#define MDIO_PMA_REG_8726_TX_CTRL1		0xca01
+#define MDIO_PMA_REG_8726_TX_CTRL2		0xca05
+
+#define MDIO_PMA_REG_8727_TWO_WIRE_SLAVE_ADDR	0x8005
+#define MDIO_PMA_REG_8727_TWO_WIRE_DATA_BUF	0x8007
+#define MDIO_PMA_REG_8727_TWO_WIRE_DATA_MASK 0xff
+#define MDIO_PMA_REG_8727_MISC_CTRL		0x8309
+#define MDIO_PMA_REG_8727_TX_CTRL1		0xca02
+#define MDIO_PMA_REG_8727_TX_CTRL2		0xca05
+#define MDIO_PMA_REG_8727_PCS_OPT_CTRL		0xc808
+#define MDIO_PMA_REG_8727_GPIO_CTRL		0xc80e
+#define MDIO_PMA_REG_8727_PCS_GP		0xc842
+#define MDIO_PMA_REG_8727_OPT_CFG_REG		0xc8e4
+
+#define MDIO_AN_REG_8727_MISC_CTRL		0x8309
+#define MDIO_PMA_REG_8073_CHIP_REV			0xc801
+#define MDIO_PMA_REG_8073_SPEED_LINK_STATUS		0xc820
+#define MDIO_PMA_REG_8073_XAUI_WA			0xc841
+#define MDIO_PMA_REG_8073_OPT_DIGITAL_CTRL		0xcd08
+
+#define MDIO_PMA_REG_7101_RESET		0xc000
+#define MDIO_PMA_REG_7107_LED_CNTL	0xc007
+#define MDIO_PMA_REG_7107_LINK_LED_CNTL	0xc009
+#define MDIO_PMA_REG_7101_VER1		0xc026
+#define MDIO_PMA_REG_7101_VER2		0xc027
+
+#define MDIO_PMA_REG_8481_PMD_SIGNAL	0xa811
+#define MDIO_PMA_REG_8481_LED1_MASK	0xa82c
+#define MDIO_PMA_REG_8481_LED2_MASK	0xa82f
+#define MDIO_PMA_REG_8481_LED3_MASK	0xa832
+#define MDIO_PMA_REG_8481_LED3_BLINK	0xa834
+#define MDIO_PMA_REG_8481_LED5_MASK			0xa838
+#define MDIO_PMA_REG_8481_SIGNAL_MASK	0xa835
+#define MDIO_PMA_REG_8481_LINK_SIGNAL	0xa83b
+#define MDIO_PMA_REG_8481_LINK_SIGNAL_LED4_ENABLE_MASK	0x800
+#define MDIO_PMA_REG_8481_LINK_SIGNAL_LED4_ENABLE_SHIFT	11
+
+
+#define MDIO_WIS_DEVAD			0x2
+/*bcm*/
+#define MDIO_WIS_REG_LASI_CNTL		0x9002
+#define MDIO_WIS_REG_LASI_STATUS	0x9005
+
+#define MDIO_PCS_DEVAD			0x3
+#define MDIO_PCS_REG_STATUS		0x0020
+#define MDIO_PCS_REG_LASI_STATUS	0x9005
+#define MDIO_PCS_REG_7101_DSP_ACCESS	0xD000
+#define MDIO_PCS_REG_7101_SPI_MUX	0xD008
+#define MDIO_PCS_REG_7101_SPI_CTRL_ADDR	0xE12A
+#define MDIO_PCS_REG_7101_SPI_RESET_BIT	(5)
+#define MDIO_PCS_REG_7101_SPI_FIFO_ADDR	0xE02A
+#define MDIO_PCS_REG_7101_SPI_FIFO_ADDR_WRITE_ENABLE_CMD (6)
+#define MDIO_PCS_REG_7101_SPI_FIFO_ADDR_BULK_ERASE_CMD	 (0xC7)
+#define MDIO_PCS_REG_7101_SPI_FIFO_ADDR_PAGE_PROGRAM_CMD (2)
+#define MDIO_PCS_REG_7101_SPI_BYTES_TO_TRANSFER_ADDR 0xE028
+
+
+#define MDIO_XS_DEVAD			0x4
+#define MDIO_XS_REG_STATUS		0x0001
+#define MDIO_XS_PLL_SEQUENCER		0x8000
+#define MDIO_XS_SFX7101_XGXS_TEST1	0xc00a
+
+#define MDIO_XS_8706_REG_BANK_RX0	0x80bc
+#define MDIO_XS_8706_REG_BANK_RX1	0x80cc
+#define MDIO_XS_8706_REG_BANK_RX2	0x80dc
+#define MDIO_XS_8706_REG_BANK_RX3	0x80ec
+#define MDIO_XS_8706_REG_BANK_RXA	0x80fc
+
+#define MDIO_XS_REG_8073_RX_CTRL_PCIE	0x80FA
+
+#define MDIO_AN_DEVAD			0x7
+/*ieee*/
+#define MDIO_AN_REG_CTRL		0x0000
+#define MDIO_AN_REG_STATUS		0x0001
+#define MDIO_AN_REG_STATUS_AN_COMPLETE		0x0020
+#define MDIO_AN_REG_ADV_PAUSE		0x0010
+#define MDIO_AN_REG_ADV_PAUSE_PAUSE		0x0400
+#define MDIO_AN_REG_ADV_PAUSE_ASYMMETRIC	0x0800
+#define MDIO_AN_REG_ADV_PAUSE_BOTH		0x0C00
+#define MDIO_AN_REG_ADV_PAUSE_MASK		0x0C00
+#define MDIO_AN_REG_ADV			0x0011
+#define MDIO_AN_REG_ADV2		0x0012
+#define MDIO_AN_REG_LP_AUTO_NEG		0x0013
+#define MDIO_AN_REG_MASTER_STATUS	0x0021
+/*bcm*/
+#define MDIO_AN_REG_LINK_STATUS		0x8304
+#define MDIO_AN_REG_CL37_CL73		0x8370
+#define MDIO_AN_REG_CL37_AN		0xffe0
+#define MDIO_AN_REG_CL37_FC_LD		0xffe4
+#define MDIO_AN_REG_CL37_FC_LP		0xffe5
+
+#define MDIO_AN_REG_8073_2_5G		0x8329
+#define MDIO_AN_REG_8073_BAM		0x8350
+
+#define MDIO_AN_REG_8481_10GBASE_T_AN_CTRL	0x0020
+#define MDIO_AN_REG_8481_LEGACY_MII_CTRL	0xffe0
+#define MDIO_AN_REG_8481_LEGACY_MII_STATUS	0xffe1
+#define MDIO_AN_REG_8481_LEGACY_AN_ADV		0xffe4
+#define MDIO_AN_REG_8481_LEGACY_AN_EXPANSION	0xffe6
+#define MDIO_AN_REG_8481_1000T_CTRL		0xffe9
+#define MDIO_AN_REG_8481_EXPANSION_REG_RD_RW	0xfff5
+#define MDIO_AN_REG_8481_EXPANSION_REG_ACCESS	0xfff7
+#define MDIO_AN_REG_8481_AUX_CTRL		0xfff8
+#define MDIO_AN_REG_8481_LEGACY_SHADOW		0xfffc
+
+/* BCM84823 only */
+#define MDIO_CTL_DEVAD			0x1e
+#define MDIO_CTL_REG_84823_MEDIA		0x401a
+#define MDIO_CTL_REG_84823_MEDIA_MAC_MASK		0x0018
+	/* These pins configure the BCM84823 interface to MAC after reset. */
+#define MDIO_CTL_REG_84823_CTRL_MAC_XFI			0x0008
+#define MDIO_CTL_REG_84823_MEDIA_MAC_XAUI_M		0x0010
+	/* These pins configure the BCM84823 interface to Line after reset. */
+#define MDIO_CTL_REG_84823_MEDIA_LINE_MASK		0x0060
+#define MDIO_CTL_REG_84823_MEDIA_LINE_XAUI_L		0x0020
+#define MDIO_CTL_REG_84823_MEDIA_LINE_XFI		0x0040
+	/* When this pin is active high during reset, 10GBASE-T core is power
+	 * down, When it is active low the 10GBASE-T is power up
+	 */
+#define MDIO_CTL_REG_84823_MEDIA_COPPER_CORE_DOWN	0x0080
+#define MDIO_CTL_REG_84823_MEDIA_PRIORITY_MASK		0x0100
+#define MDIO_CTL_REG_84823_MEDIA_PRIORITY_COPPER	0x0000
+#define MDIO_CTL_REG_84823_MEDIA_PRIORITY_FIBER		0x0100
+#define MDIO_CTL_REG_84823_MEDIA_FIBER_1G			0x1000
+#define MDIO_CTL_REG_84823_USER_CTRL_REG			0x4005
+#define MDIO_CTL_REG_84823_USER_CTRL_CMS			0x0080
+#define MDIO_PMA_REG_84823_CTL_SLOW_CLK_CNT_HIGH		0xa82b
+#define MDIO_PMA_REG_84823_BLINK_RATE_VAL_15P9HZ	0x2f
+#define MDIO_PMA_REG_84823_CTL_LED_CTL_1			0xa8e3
+#define MDIO_PMA_REG_84833_CTL_LED_CTL_1			0xa8ec
+#define MDIO_PMA_REG_84823_LED3_STRETCH_EN			0x0080
+
+/* BCM84833 only */
+#define MDIO_84833_TOP_CFG_XGPHY_STRAP1			0x401a
+#define MDIO_84833_SUPER_ISOLATE		0x8000
+/* These are mailbox register set used by 84833. */
+#define MDIO_84833_TOP_CFG_SCRATCH_REG0			0x4005
+#define MDIO_84833_TOP_CFG_SCRATCH_REG1			0x4006
+#define MDIO_84833_TOP_CFG_SCRATCH_REG2			0x4007
+#define MDIO_84833_TOP_CFG_SCRATCH_REG3			0x4008
+#define MDIO_84833_TOP_CFG_SCRATCH_REG4			0x4009
+#define MDIO_84833_TOP_CFG_SCRATCH_REG26		0x4037
+#define MDIO_84833_TOP_CFG_SCRATCH_REG27		0x4038
+#define MDIO_84833_TOP_CFG_SCRATCH_REG28		0x4039
+#define MDIO_84833_TOP_CFG_SCRATCH_REG29		0x403a
+#define MDIO_84833_TOP_CFG_SCRATCH_REG30		0x403b
+#define MDIO_84833_TOP_CFG_SCRATCH_REG31		0x403c
+#define MDIO_84833_CMD_HDLR_COMMAND	MDIO_84833_TOP_CFG_SCRATCH_REG0
+#define MDIO_84833_CMD_HDLR_STATUS	MDIO_84833_TOP_CFG_SCRATCH_REG26
+#define MDIO_84833_CMD_HDLR_DATA1	MDIO_84833_TOP_CFG_SCRATCH_REG27
+#define MDIO_84833_CMD_HDLR_DATA2	MDIO_84833_TOP_CFG_SCRATCH_REG28
+#define MDIO_84833_CMD_HDLR_DATA3	MDIO_84833_TOP_CFG_SCRATCH_REG29
+#define MDIO_84833_CMD_HDLR_DATA4	MDIO_84833_TOP_CFG_SCRATCH_REG30
+#define MDIO_84833_CMD_HDLR_DATA5	MDIO_84833_TOP_CFG_SCRATCH_REG31
+
+/* Mailbox command set used by 84833. */
+#define PHY84833_CMD_SET_PAIR_SWAP			0x8001
+#define PHY84833_CMD_GET_EEE_MODE			0x8008
+#define PHY84833_CMD_SET_EEE_MODE			0x8009
+/* Mailbox status set used by 84833. */
+#define PHY84833_STATUS_CMD_RECEIVED			0x0001
+#define PHY84833_STATUS_CMD_IN_PROGRESS			0x0002
+#define PHY84833_STATUS_CMD_COMPLETE_PASS		0x0004
+#define PHY84833_STATUS_CMD_COMPLETE_ERROR		0x0008
+#define PHY84833_STATUS_CMD_OPEN_FOR_CMDS		0x0010
+#define PHY84833_STATUS_CMD_SYSTEM_BOOT			0x0020
+#define PHY84833_STATUS_CMD_NOT_OPEN_FOR_CMDS		0x0040
+#define PHY84833_STATUS_CMD_CLEAR_COMPLETE		0x0080
+#define PHY84833_STATUS_CMD_OPEN_OVERRIDE		0xa5a5
+
+
+/* Warpcore clause 45 addressing */
+#define MDIO_WC_DEVAD					0x3
+#define MDIO_WC_REG_IEEE0BLK_MIICNTL			0x0
+#define MDIO_WC_REG_IEEE0BLK_AUTONEGNP			0x7
+#define MDIO_WC_REG_AN_IEEE1BLK_AN_ADVERTISEMENT0	0x10
+#define MDIO_WC_REG_AN_IEEE1BLK_AN_ADVERTISEMENT1	0x11
+#define MDIO_WC_REG_AN_IEEE1BLK_AN_ADVERTISEMENT2	0x12
+#define MDIO_WC_REG_AN_IEEE1BLK_AN_ADV2_FEC_ABILITY	0x4000
+#define MDIO_WC_REG_AN_IEEE1BLK_AN_ADV2_FEC_REQ		0x8000
+#define MDIO_WC_REG_PMD_IEEE9BLK_TENGBASE_KR_PMD_CONTROL_REGISTER_150  0x96
+#define MDIO_WC_REG_XGXSBLK0_XGXSCONTROL		0x8000
+#define MDIO_WC_REG_XGXSBLK0_MISCCONTROL1		0x800e
+#define MDIO_WC_REG_XGXSBLK1_DESKEW			0x8010
+#define MDIO_WC_REG_XGXSBLK1_LANECTRL0			0x8015
+#define MDIO_WC_REG_XGXSBLK1_LANECTRL1			0x8016
+#define MDIO_WC_REG_XGXSBLK1_LANECTRL2			0x8017
+#define MDIO_WC_REG_TX0_ANA_CTRL0			0x8061
+#define MDIO_WC_REG_TX1_ANA_CTRL0			0x8071
+#define MDIO_WC_REG_TX2_ANA_CTRL0			0x8081
+#define MDIO_WC_REG_TX3_ANA_CTRL0			0x8091
+#define MDIO_WC_REG_TX0_TX_DRIVER			0x8067
+#define MDIO_WC_REG_TX0_TX_DRIVER_IPRE_DRIVER_OFFSET		0x04
+#define MDIO_WC_REG_TX0_TX_DRIVER_IPRE_DRIVER_MASK			0x00f0
+#define MDIO_WC_REG_TX0_TX_DRIVER_IDRIVER_OFFSET		0x08
+#define MDIO_WC_REG_TX0_TX_DRIVER_IDRIVER_MASK				0x0f00
+#define MDIO_WC_REG_TX0_TX_DRIVER_POST2_COEFF_OFFSET		0x0c
+#define MDIO_WC_REG_TX0_TX_DRIVER_POST2_COEFF_MASK			0x7000
+#define MDIO_WC_REG_TX1_TX_DRIVER			0x8077
+#define MDIO_WC_REG_TX2_TX_DRIVER			0x8087
+#define MDIO_WC_REG_TX3_TX_DRIVER			0x8097
+#define MDIO_WC_REG_RX0_ANARXCONTROL1G			0x80b9
+#define MDIO_WC_REG_RX2_ANARXCONTROL1G			0x80d9
+#define MDIO_WC_REG_RX0_PCI_CTRL			0x80ba
+#define MDIO_WC_REG_RX1_PCI_CTRL			0x80ca
+#define MDIO_WC_REG_RX2_PCI_CTRL			0x80da
+#define MDIO_WC_REG_RX3_PCI_CTRL			0x80ea
+#define MDIO_WC_REG_XGXSBLK2_UNICORE_MODE_10G		0x8104
+#define MDIO_WC_REG_XGXS_STATUS3			0x8129
+#define MDIO_WC_REG_PAR_DET_10G_STATUS			0x8130
+#define MDIO_WC_REG_PAR_DET_10G_CTRL			0x8131
+#define MDIO_WC_REG_XGXS_X2_CONTROL2			0x8141
+#define MDIO_WC_REG_XGXS_RX_LN_SWAP1			0x816B
+#define MDIO_WC_REG_XGXS_TX_LN_SWAP1			0x8169
+#define MDIO_WC_REG_GP2_STATUS_GP_2_0			0x81d0
+#define MDIO_WC_REG_GP2_STATUS_GP_2_1			0x81d1
+#define MDIO_WC_REG_GP2_STATUS_GP_2_2			0x81d2
+#define MDIO_WC_REG_GP2_STATUS_GP_2_3			0x81d3
+#define MDIO_WC_REG_GP2_STATUS_GP_2_4			0x81d4
+#define MDIO_WC_REG_UC_INFO_B0_DEAD_TRAP		0x81EE
+#define MDIO_WC_REG_UC_INFO_B1_VERSION			0x81F0
+#define MDIO_WC_REG_UC_INFO_B1_FIRMWARE_MODE		0x81F2
+#define MDIO_WC_REG_UC_INFO_B1_FIRMWARE_LANE0_OFFSET	0x0
+#define MDIO_WC_REG_UC_INFO_B1_FIRMWARE_MODE_DEFAULT	    0x0
+#define MDIO_WC_REG_UC_INFO_B1_FIRMWARE_MODE_SFP_OPT_LR	    0x1
+#define MDIO_WC_REG_UC_INFO_B1_FIRMWARE_MODE_SFP_DAC	    0x2
+#define MDIO_WC_REG_UC_INFO_B1_FIRMWARE_MODE_SFP_XLAUI	    0x3
+#define MDIO_WC_REG_UC_INFO_B1_FIRMWARE_MODE_LONG_CH_6G	    0x4
+#define MDIO_WC_REG_UC_INFO_B1_FIRMWARE_LANE1_OFFSET	0x4
+#define MDIO_WC_REG_UC_INFO_B1_FIRMWARE_LANE2_OFFSET	0x8
+#define MDIO_WC_REG_UC_INFO_B1_FIRMWARE_LANE3_OFFSET	0xc
+#define MDIO_WC_REG_UC_INFO_B1_CRC			0x81FE
+#define MDIO_WC_REG_DSC_SMC				0x8213
+#define MDIO_WC_REG_DSC2B0_DSC_MISC_CTRL0		0x821e
+#define MDIO_WC_REG_TX_FIR_TAP				0x82e2
+#define MDIO_WC_REG_TX_FIR_TAP_PRE_TAP_OFFSET		0x00
+#define MDIO_WC_REG_TX_FIR_TAP_PRE_TAP_MASK			0x000f
+#define MDIO_WC_REG_TX_FIR_TAP_MAIN_TAP_OFFSET		0x04
+#define MDIO_WC_REG_TX_FIR_TAP_MAIN_TAP_MASK		0x03f0
+#define MDIO_WC_REG_TX_FIR_TAP_POST_TAP_OFFSET		0x0a
+#define MDIO_WC_REG_TX_FIR_TAP_POST_TAP_MASK		0x7c00
+#define MDIO_WC_REG_TX_FIR_TAP_ENABLE		0x8000
+#define MDIO_WC_REG_CL72_USERB0_CL72_MISC1_CONTROL	0x82e3
+#define MDIO_WC_REG_CL72_USERB0_CL72_OS_DEF_CTRL	0x82e6
+#define MDIO_WC_REG_CL72_USERB0_CL72_BR_DEF_CTRL	0x82e7
+#define MDIO_WC_REG_CL72_USERB0_CL72_2P5_DEF_CTRL	0x82e8
+#define MDIO_WC_REG_CL72_USERB0_CL72_MISC4_CONTROL	0x82ec
+#define MDIO_WC_REG_SERDESDIGITAL_CONTROL1000X1		0x8300
+#define MDIO_WC_REG_SERDESDIGITAL_CONTROL1000X2		0x8301
+#define MDIO_WC_REG_SERDESDIGITAL_CONTROL1000X3		0x8302
+#define MDIO_WC_REG_SERDESDIGITAL_STATUS1000X1		0x8304
+#define MDIO_WC_REG_SERDESDIGITAL_MISC1			0x8308
+#define MDIO_WC_REG_SERDESDIGITAL_MISC2			0x8309
+#define MDIO_WC_REG_DIGITAL3_UP1			0x8329
+#define MDIO_WC_REG_DIGITAL4_MISC3			0x833c
+#define MDIO_WC_REG_DIGITAL5_MISC6			0x8345
+#define MDIO_WC_REG_DIGITAL5_MISC7			0x8349
+#define MDIO_WC_REG_DIGITAL5_ACTUAL_SPEED		0x834e
+#define MDIO_WC_REG_DIGITAL6_MP5_NEXTPAGECTRL		0x8350
+#define MDIO_WC_REG_CL49_USERB0_CTRL			0x8368
+#define MDIO_WC_REG_TX66_CONTROL			0x83b0
+#define MDIO_WC_REG_RX66_CONTROL			0x83c0
+#define MDIO_WC_REG_RX66_SCW0				0x83c2
+#define MDIO_WC_REG_RX66_SCW1				0x83c3
+#define MDIO_WC_REG_RX66_SCW2				0x83c4
+#define MDIO_WC_REG_RX66_SCW3				0x83c5
+#define MDIO_WC_REG_RX66_SCW0_MASK			0x83c6
+#define MDIO_WC_REG_RX66_SCW1_MASK			0x83c7
+#define MDIO_WC_REG_RX66_SCW2_MASK			0x83c8
+#define MDIO_WC_REG_RX66_SCW3_MASK			0x83c9
+#define MDIO_WC_REG_FX100_CTRL1				0x8400
+#define MDIO_WC_REG_FX100_CTRL3				0x8402
+
+#define MDIO_WC_REG_MICROBLK_CMD			0xffc2
+#define MDIO_WC_REG_MICROBLK_DL_STATUS			0xffc5
+#define MDIO_WC_REG_MICROBLK_CMD3			0xffcc
+
+#define MDIO_WC_REG_AERBLK_AER				0xffde
+#define MDIO_WC_REG_COMBO_IEEE0_MIICTRL			0xffe0
+#define MDIO_WC_REG_COMBO_IEEE0_MIIISTAT		0xffe1
+
+#define MDIO_WC0_XGXS_BLK2_LANE_RESET			0x810A
+#define MDIO_WC0_XGXS_BLK2_LANE_RESET_RX_BITSHIFT	0
+#define MDIO_WC0_XGXS_BLK2_LANE_RESET_TX_BITSHIFT	4
+
+#define MDIO_WC0_XGXS_BLK6_XGXS_X2_CONTROL2		0x8141
+
+#define DIGITAL5_ACTUAL_SPEED_TX_MASK			0x003f
+
+/* 54618se */
+#define MDIO_REG_GPHY_PHYID_LSB				0x3
+#define MDIO_REG_GPHY_ID_54618SE		0x5cd5
+#define MDIO_REG_GPHY_CL45_ADDR_REG			0xd
+#define MDIO_REG_GPHY_CL45_DATA_REG			0xe
+#define MDIO_REG_GPHY_EEE_ADV			0x3c
+#define MDIO_REG_GPHY_EEE_1G		(0x1 << 2)
+#define MDIO_REG_GPHY_EEE_100		(0x1 << 1)
+#define MDIO_REG_GPHY_EEE_RESOLVED		0x803e
+#define MDIO_REG_INTR_STATUS				0x1a
+#define MDIO_REG_INTR_MASK				0x1b
+#define MDIO_REG_INTR_MASK_LINK_STATUS			(0x1 << 1)
+#define MDIO_REG_GPHY_SHADOW				0x1c
+#define MDIO_REG_GPHY_SHADOW_LED_SEL1			(0x0d << 10)
+#define MDIO_REG_GPHY_SHADOW_LED_SEL2			(0x0e << 10)
+#define MDIO_REG_GPHY_SHADOW_WR_ENA			(0x1 << 15)
+#define MDIO_REG_GPHY_SHADOW_AUTO_DET_MED		(0x1e << 10)
+#define MDIO_REG_GPHY_SHADOW_INVERT_FIB_SD		(0x1 << 8)
+
+#define IGU_FUNC_BASE			0x0400
+
+#define IGU_ADDR_MSIX			0x0000
+#define IGU_ADDR_INT_ACK		0x0200
+#define IGU_ADDR_PROD_UPD		0x0201
+#define IGU_ADDR_ATTN_BITS_UPD	0x0202
+#define IGU_ADDR_ATTN_BITS_SET	0x0203
+#define IGU_ADDR_ATTN_BITS_CLR	0x0204
+#define IGU_ADDR_COALESCE_NOW	0x0205
+#define IGU_ADDR_SIMD_MASK		0x0206
+#define IGU_ADDR_SIMD_NOMASK	0x0207
+#define IGU_ADDR_MSI_CTL		0x0210
+#define IGU_ADDR_MSI_ADDR_LO	0x0211
+#define IGU_ADDR_MSI_ADDR_HI	0x0212
+#define IGU_ADDR_MSI_DATA		0x0213
+
+
+#define IGU_USE_REGISTER_ustorm_type_0_sb_cleanup  0
+#define IGU_USE_REGISTER_ustorm_type_1_sb_cleanup  1
+#define IGU_USE_REGISTER_cstorm_type_0_sb_cleanup  2
+#define IGU_USE_REGISTER_cstorm_type_1_sb_cleanup  3
+
+#define COMMAND_REG_INT_ACK	    0x0
+#define COMMAND_REG_PROD_UPD	    0x4
+#define COMMAND_REG_ATTN_BITS_UPD   0x8
+#define COMMAND_REG_ATTN_BITS_SET   0xc
+#define COMMAND_REG_ATTN_BITS_CLR   0x10
+#define COMMAND_REG_COALESCE_NOW    0x14
+#define COMMAND_REG_SIMD_MASK	    0x18
+#define COMMAND_REG_SIMD_NOMASK	    0x1c
+
+
+#define IGU_MEM_BASE						0x0000
+
+#define IGU_MEM_MSIX_BASE					0x0000
+#define IGU_MEM_MSIX_UPPER					0x007f
+#define IGU_MEM_MSIX_RESERVED_UPPER			0x01ff
+
+#define IGU_MEM_PBA_MSIX_BASE				0x0200
+#define IGU_MEM_PBA_MSIX_UPPER				0x0200
+
+#define IGU_CMD_BACKWARD_COMP_PROD_UPD		0x0201
+#define IGU_MEM_PBA_MSIX_RESERVED_UPPER		0x03ff
+
+#define IGU_CMD_INT_ACK_BASE				0x0400
+#define IGU_CMD_INT_ACK_UPPER\
+	(IGU_CMD_INT_ACK_BASE + MAX_SB_PER_PATH - 1)
+#define IGU_CMD_INT_ACK_RESERVED_UPPER		0x04ff
+
+#define IGU_CMD_E2_PROD_UPD_BASE			0x0500
+#define IGU_CMD_E2_PROD_UPD_UPPER\
+	(IGU_CMD_E2_PROD_UPD_BASE + MAX_SB_PER_PATH  - 1)
+#define IGU_CMD_E2_PROD_UPD_RESERVED_UPPER	0x059f
+
+#define IGU_CMD_ATTN_BIT_UPD_UPPER			0x05a0
+#define IGU_CMD_ATTN_BIT_SET_UPPER			0x05a1
+#define IGU_CMD_ATTN_BIT_CLR_UPPER			0x05a2
+
+#define IGU_REG_SISR_MDPC_WMASK_UPPER		0x05a3
+#define IGU_REG_SISR_MDPC_WMASK_LSB_UPPER	0x05a4
+#define IGU_REG_SISR_MDPC_WMASK_MSB_UPPER	0x05a5
+#define IGU_REG_SISR_MDPC_WOMASK_UPPER		0x05a6
+
+
+#define IGU_REG_RESERVED_UPPER				0x05ff
+
+#define IGU_SEG_IDX_ATTN	2
+#define IGU_SEG_IDX_DEFAULT	1
+/* Fields of IGU PF CONFIGRATION REGISTER */
+#define IGU_PF_CONF_FUNC_EN	  (0x1<<0)  /* function enable	      */
+#define IGU_PF_CONF_MSI_MSIX_EN	  (0x1<<1)  /* MSI/MSIX enable	      */
+#define IGU_PF_CONF_INT_LINE_EN	  (0x1<<2)  /* INT enable	      */
+#define IGU_PF_CONF_ATTN_BIT_EN	  (0x1<<3)  /* attention enable       */
+#define IGU_PF_CONF_SINGLE_ISR_EN (0x1<<4)  /* single ISR mode enable */
+#define IGU_PF_CONF_SIMD_MODE	  (0x1<<5)  /* simd all ones mode     */
+
+/* Fields of IGU VF CONFIGRATION REGISTER */
+#define IGU_VF_CONF_FUNC_EN	   (0x1<<0)  /* function enable        */
+#define IGU_VF_CONF_MSI_MSIX_EN	   (0x1<<1)  /* MSI/MSIX enable        */
+#define IGU_VF_CONF_PARENT_MASK	   (0x3<<2)  /* Parent PF	       */
+#define IGU_VF_CONF_PARENT_SHIFT   2	     /* Parent PF	       */
+#define IGU_VF_CONF_SINGLE_ISR_EN  (0x1<<4)  /* single ISR mode enable */
+
+
+#define IGU_BC_DSB_NUM_SEGS    5
+#define IGU_BC_NDSB_NUM_SEGS   2
+#define IGU_NORM_DSB_NUM_SEGS  2
+#define IGU_NORM_NDSB_NUM_SEGS 1
+#define IGU_BC_BASE_DSB_PROD   128
+#define IGU_NORM_BASE_DSB_PROD 136
+
+	/* FID (if VF - [6] = 0; [5:0] = VF number; if PF - [6] = 1; \
+	[5:2] = 0; [1:0] = PF number) */
+#define IGU_FID_ENCODE_IS_PF	    (0x1<<6)
+#define IGU_FID_ENCODE_IS_PF_SHIFT  6
+#define IGU_FID_VF_NUM_MASK	    (0x3f)
+#define IGU_FID_PF_NUM_MASK	    (0x7)
+
+#define IGU_REG_MAPPING_MEMORY_VALID		(1<<0)
+#define IGU_REG_MAPPING_MEMORY_VECTOR_MASK	(0x3F<<1)
+#define IGU_REG_MAPPING_MEMORY_VECTOR_SHIFT	1
+#define IGU_REG_MAPPING_MEMORY_FID_MASK		(0x7F<<7)
+#define IGU_REG_MAPPING_MEMORY_FID_SHIFT	7
+
+
+#define CDU_REGION_NUMBER_XCM_AG 2
+#define CDU_REGION_NUMBER_UCM_AG 4
+
+
+/**
+ * String-to-compress [31:8] = CID (all 24 bits)
+ * String-to-compress [7:4] = Region
+ * String-to-compress [3:0] = Type
+ */
+#define CDU_VALID_DATA(_cid, _region, _type)\
+	(((_cid) << 8) | (((_region)&0xf)<<4) | (((_type)&0xf)))
+#define CDU_CRC8(_cid, _region, _type)\
+	(calc_crc8(CDU_VALID_DATA(_cid, _region, _type), 0xff))
+#define CDU_RSRVD_VALUE_TYPE_A(_cid, _region, _type)\
+	(0x80 | ((CDU_CRC8(_cid, _region, _type)) & 0x7f))
+#define CDU_RSRVD_VALUE_TYPE_B(_crc, _type)\
+	(0x80 | ((_type)&0xf << 3) | ((CDU_CRC8(_cid, _region, _type)) & 0x7))
+#define CDU_RSRVD_INVALIDATE_CONTEXT_VALUE(_val) ((_val) & ~0x80)
+
+/******************************************************************************
+ * Description:
+ *	   Calculates crc 8 on a word value: polynomial 0-1-2-8
+ *	   Code was translated from Verilog.
+ * Return:
+ *****************************************************************************/
+static inline u8 calc_crc8(u32 data, u8 crc)
+{
+    u8 D[32];
+    u8 NewCRC[8];
+    u8 C[8];
+    u8 crc_res;
+    u8 i;
+
+    /* split the data into 31 bits */
+    for (i = 0; i < 32; i++) {
+	D[i] = (u8)(data & 1);
+	data = data >> 1;
+    }
+
+    /* split the crc into 8 bits */
+    for (i = 0; i < 8; i++) {
+	C[i] = crc & 1;
+	crc = crc >> 1;
+    }
+
+    NewCRC[0] = D[31] ^ D[30] ^ D[28] ^ D[23] ^ D[21] ^ D[19] ^ D[18] ^
+	    D[16] ^ D[14] ^ D[12] ^ D[8] ^ D[7] ^ D[6] ^ D[0] ^ C[4] ^
+	    C[6] ^ C[7];
+    NewCRC[1] = D[30] ^ D[29] ^ D[28] ^ D[24] ^ D[23] ^ D[22] ^ D[21] ^
+	    D[20] ^ D[18] ^ D[17] ^ D[16] ^ D[15] ^ D[14] ^ D[13] ^
+	    D[12] ^ D[9] ^ D[6] ^ D[1] ^ D[0] ^ C[0] ^ C[4] ^ C[5] ^ C[6];
+    NewCRC[2] = D[29] ^ D[28] ^ D[25] ^ D[24] ^ D[22] ^ D[17] ^ D[15] ^
+	    D[13] ^ D[12] ^ D[10] ^ D[8] ^ D[6] ^ D[2] ^ D[1] ^ D[0] ^
+	    C[0] ^ C[1] ^ C[4] ^ C[5];
+    NewCRC[3] = D[30] ^ D[29] ^ D[26] ^ D[25] ^ D[23] ^ D[18] ^ D[16] ^
+	    D[14] ^ D[13] ^ D[11] ^ D[9] ^ D[7] ^ D[3] ^ D[2] ^ D[1] ^
+	    C[1] ^ C[2] ^ C[5] ^ C[6];
+    NewCRC[4] = D[31] ^ D[30] ^ D[27] ^ D[26] ^ D[24] ^ D[19] ^ D[17] ^
+	    D[15] ^ D[14] ^ D[12] ^ D[10] ^ D[8] ^ D[4] ^ D[3] ^ D[2] ^
+	    C[0] ^ C[2] ^ C[3] ^ C[6] ^ C[7];
+    NewCRC[5] = D[31] ^ D[28] ^ D[27] ^ D[25] ^ D[20] ^ D[18] ^ D[16] ^
+	    D[15] ^ D[13] ^ D[11] ^ D[9] ^ D[5] ^ D[4] ^ D[3] ^ C[1] ^
+	    C[3] ^ C[4] ^ C[7];
+    NewCRC[6] = D[29] ^ D[28] ^ D[26] ^ D[21] ^ D[19] ^ D[17] ^ D[16] ^
+	    D[14] ^ D[12] ^ D[10] ^ D[6] ^ D[5] ^ D[4] ^ C[2] ^ C[4] ^ C[5];
+    NewCRC[7] = D[30] ^ D[29] ^ D[27] ^ D[22] ^ D[20] ^ D[18] ^ D[17] ^
+	    D[15] ^ D[13] ^ D[11] ^ D[7] ^ D[6] ^ D[5] ^ C[3] ^ C[5] ^ C[6];
+
+    crc_res = 0;
+    for (i = 0; i < 8; i++) {
+	crc_res |= (NewCRC[i] << i);
+    }
+
+    return crc_res;
+}
+
+
+#endif /* BNX2X_REG_H */
diff -r 2e9e6572f41c drivers/net/bnx2/cnic.c
--- /dev/null
+++ b/drivers/net/bnx2/cnic.c
@@ -0,0 +1,7515 @@
+/* cnic.c: Broadcom CNIC core network driver.
+ *
+ * Copyright (c) 2006-2012 Broadcom Corporation
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation.
+ *
+ * Original skeleton written by: John(Zongxi) Chen (zongxi@broadcom.com)
+ * Modified and maintained by: Michael Chan <mchan@broadcom.com>
+ */
+
+#include <linux/version.h>
+#if (LINUX_VERSION_CODE < 0x020612)
+#include <linux/config.h>
+#endif
+
+#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
+
+#include <linux/module.h>
+
+#include <linux/kernel.h>
+#include <linux/errno.h>
+#include <linux/list.h>
+#include <linux/slab.h>
+#include <linux/pci.h>
+#include <linux/init.h>
+#include <linux/netdevice.h>
+#include <linux/uio_driver.h>
+#include <linux/in.h>
+#include <linux/dma-mapping.h>
+#include <linux/delay.h>
+#include <linux/ethtool.h>
+#include <linux/if_vlan.h>
+#include <linux/prefetch.h>
+#include <linux/random.h>
+#if defined(CONFIG_VLAN_8021Q) || defined(CONFIG_VLAN_8021Q_MODULE)
+#define BCM_VLAN 1
+#endif
+#include <net/ip.h>
+#include <net/tcp.h>
+#include <net/route.h>
+#include <net/ipv6.h>
+#include <net/ip6_route.h>
+#include <net/ip6_checksum.h>
+#if defined(RHEL_RELEASE_CODE)
+#if (RHEL_RELEASE_CODE >= RHEL_RELEASE_VERSION(5,4)) && (RHEL_RELEASE_CODE < RHEL_RELEASE_VERSION(6,0))
+#include <scsi/iscsi_if2.h>
+#else
+#include <scsi/iscsi_if.h>
+#endif
+#else
+#include <scsi/iscsi_if.h>
+#endif
+
+#define BCM_CNIC 1
+#define NEW_BNX2X_HSI 70
+
+#include "cnic_if.h"
+#include "bnx2.h"
+#include "bnx2x_reg.h"
+#include "bnx2x_fw_defs.h"
+#include "bnx2x_hsi.h"
+#include "57xx_iscsi_constants.h"
+#include "57xx_iscsi_hsi.h"
+#include "bnx2fc_constants.h"
+#include "cnic.h"
+#include "bnx2x_57710_int_offsets.h"
+#include "bnx2x_57711_int_offsets.h"
+#include "bnx2x_57712_int_offsets.h"
+#include "cnic_defs.h"
+
+#define DRV_MODULE_NAME		"cnic"
+#define PFX DRV_MODULE_NAME	": "
+
+static char version[] __devinitdata =
+	"Broadcom NetXtreme II CNIC Driver " DRV_MODULE_NAME " v" CNIC_MODULE_VERSION " (" CNIC_MODULE_RELDATE ")\n";
+
+MODULE_AUTHOR("Michael Chan <mchan@broadcom.com> and John(Zongxi) "
+	      "Chen (zongxi@broadcom.com");
+MODULE_DESCRIPTION("Broadcom NetXtreme II CNIC Driver");
+MODULE_LICENSE("GPL");
+MODULE_VERSION(CNIC_MODULE_VERSION);
+
+unsigned long cnic_dump_kwqe_en = 0;
+module_param(cnic_dump_kwqe_en, long, 0644);
+MODULE_PARM_DESC(cnic_dump_kwqe_en, "parameter to enable/disable kwqe dump\n");
+
+/* cnic_dev_list modifications are protected by both rtnl and cnic_dev_lock */
+static LIST_HEAD(cnic_dev_list);
+static LIST_HEAD(cnic_udev_list);
+static DEFINE_RWLOCK(cnic_dev_lock);
+static DEFINE_MUTEX(cnic_lock);
+
+static struct cnic_ulp_ops __rcu *cnic_ulp_tbl[MAX_CNIC_ULP_TYPE];
+
+/* helper function, assuming cnic_lock is held */
+static inline struct cnic_ulp_ops *cnic_ulp_tbl_prot(int type)
+{
+	return rcu_dereference_protected(cnic_ulp_tbl[type],
+					 lockdep_is_held(&cnic_lock));
+}
+
+static int cnic_service_bnx2(void *, void *);
+static int cnic_service_bnx2x(void *, void *);
+static int cnic_ctl(void *, struct cnic_ctl_info *);
+
+#if (CNIC_ISCSI_OOO_SUPPORT)
+static void cnic_alloc_bnx2_ooo_resc(struct cnic_dev *dev);
+static void cnic_alloc_bnx2x_ooo_resc(struct cnic_dev *dev);
+static void cnic_start_bnx2_ooo_hw(struct cnic_dev *dev);
+static void cnic_start_bnx2x_ooo_hw(struct cnic_dev *dev);
+static void cnic_stop_bnx2_ooo_hw(struct cnic_dev *dev);
+static void cnic_stop_bnx2x_ooo_hw(struct cnic_dev *dev);
+static void cnic_handle_bnx2_ooo_rx_event(struct cnic_dev *dev);
+static void cnic_handle_bnx2x_ooo_rx_event(struct cnic_dev *dev);
+static void cnic_handle_bnx2_ooo_tx_event(struct cnic_dev *dev);
+static void cnic_handle_bnx2x_ooo_tx_event(struct cnic_dev *dev);
+static void cnic_bnx2_ooo_iscsi_conn_update(struct cnic_dev *dev,
+					    struct kwqe *kwqe);
+static void cnic_bnx2_ooo_iscsi_destroy(struct cnic_dev *dev,
+					struct kwqe *kwqe);
+static void cnic_bnx2x_ooo_iscsi_conn_update(struct cnic_dev *dev,
+					     struct kwqe *kwqe);
+static void cnic_free_ooo_resc(struct cnic_dev *dev);
+static void cnic_conn_ooo_init(struct cnic_local *cp, u32 l5_cid);
+static void cnic_flush_ooo(struct cnic_dev *dev, u32 l5_cid);
+#endif
+
+static struct cnic_ops cnic_bnx2_ops = {
+	.cnic_owner	= THIS_MODULE,
+	.cnic_handler	= cnic_service_bnx2,
+	.cnic_ctl	= cnic_ctl,
+};
+
+static struct cnic_ops cnic_bnx2x_ops = {
+	.cnic_owner	= THIS_MODULE,
+	.cnic_handler	= cnic_service_bnx2x,
+	.cnic_ctl	= cnic_ctl,
+};
+
+static struct workqueue_struct *cnic_wq;
+
+static void cnic_shutdown_rings(struct cnic_dev *);
+static void cnic_init_rings(struct cnic_dev *);
+static int cnic_cm_set_pg(struct cnic_sock *);
+
+static void cnic_print_ramrod_info(struct cnic_dev *dev, u32 cmd, u32 cid,
+				   struct kwqe_16 *kwqe)
+{
+	char kwq_op[16];
+
+	if (!cnic_dump_kwqe_en)
+		return;
+
+	switch(cmd) {
+	/* Common RAMROD's */
+	case RAMROD_CMD_ID_ETH_CLIENT_SETUP:
+		sprintf(kwq_op, "%s", "CLIENT_SETUP");
+		break;
+	case RAMROD_CMD_ID_COMMON_CFC_DEL:
+		sprintf(kwq_op, "%s", "CFC_DEL");
+		break;
+	/* iSCSI RAMROD's */
+	case L5CM_RAMROD_CMD_ID_TCP_CONNECT:
+		sprintf(kwq_op, "%s", "TCP_CONNECT");
+		break;
+	case ISCSI_RAMROD_CMD_ID_UPDATE_CONN:
+		sprintf(kwq_op, "%s", "UPDATE_CONN");
+		break;
+	case L5CM_RAMROD_CMD_ID_CLOSE:
+		sprintf(kwq_op, "%s", "TCP_CLOSE");
+		break;
+	case L5CM_RAMROD_CMD_ID_ABORT:
+		sprintf(kwq_op, "%s", "TCP_ABORT");
+		break;
+	/* FCoE RAMROD's */
+#if (NEW_BNX2X_HSI >= 64)
+	case FCOE_RAMROD_CMD_ID_INIT_FUNC:
+#else
+	case FCOE_RAMROD_CMD_ID_INIT:
+#endif
+		sprintf(kwq_op, "%s", "FCOE_INIT");
+		break;
+	case FCOE_RAMROD_CMD_ID_OFFLOAD_CONN:
+		sprintf(kwq_op, "%s", "FCOE_OFLD_CONN");
+		break;
+	case FCOE_RAMROD_CMD_ID_ENABLE_CONN:
+		sprintf(kwq_op, "%s", "FCOE_EN_CONN");
+		break;
+	case FCOE_RAMROD_CMD_ID_DISABLE_CONN:
+		sprintf(kwq_op, "%s", "FCOE_DIS_CONN");
+		break;
+	case FCOE_RAMROD_CMD_ID_TERMINATE_CONN:
+		sprintf(kwq_op, "%s", "FCOE_TERM_CONN");
+		break;
+#if (NEW_BNX2X_HSI >= 64)
+	case FCOE_RAMROD_CMD_ID_DESTROY_FUNC:
+#else
+	case FCOE_RAMROD_CMD_ID_DESTROY:
+#endif
+		sprintf(kwq_op, "%s", "FCOE_DESTROY");
+		break;
+	default:
+		sprintf(kwq_op, "%s:%x", "Unknown", cmd);
+	}
+	netdev_info(dev->netdev, "CID=0x%x, %s RAMROD :: 0x%x, 0x%x 0x%x, 0x%x\n",
+		    cid, kwq_op, kwqe->kwqe_info0, kwqe->kwqe_info1,
+		    kwqe->kwqe_info2, kwqe->kwqe_info3);
+}
+
+
+static void cnic_dump_kcq_entry(struct kcqe *kcqe, int index, char *add_info)
+{
+	if (add_info)
+		pr_info("KCQE[%x] = 0x%0x, 0x%x, 0x%x, 0x%x, "
+			"0x%x, 0x%x, 0x%x, OP=0x%x ---> [%s]\n", index,
+			kcqe->kcqe_info0, kcqe->kcqe_info1, kcqe->kcqe_info2,
+			kcqe->kcqe_info3, kcqe->kcqe_info4, kcqe->kcqe_info5,
+			kcqe->kcqe_info6, kcqe->kcqe_op_flag, add_info);
+	else
+		pr_info("KCQE[%x] = 0x%0x, 0x%x, 0x%x, 0x%x, "
+			"0x%x, 0x%x, 0x%x, OP=0x%x\n", index,
+			kcqe->kcqe_info0, kcqe->kcqe_info1, kcqe->kcqe_info2,
+			kcqe->kcqe_info3, kcqe->kcqe_info4, kcqe->kcqe_info5,
+			kcqe->kcqe_info6, kcqe->kcqe_op_flag);
+}
+
+/* This function will dump KCQEs pointed by page
+ */
+static void cnic_dump_kcq_page(struct cnic_dev *dev, int kcq_page,
+			       u16 sw_prod, u16 hw_prod)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct kcq_info *info = &cp->kcq2;
+	struct kcqe *kcqe;
+	int i;
+
+	kcqe = &info->kcq[kcq_page][0];
+
+	for (i = 0; i < MAX_KCQE_CNT; i++, kcqe++) {
+		if (KCQ_PG(sw_prod) == kcq_page && KCQ_IDX(sw_prod) == i)
+			/* SW PROD INDEX */
+			cnic_dump_kcq_entry(kcqe, i, "SW_PROD");
+		else if (KCQ_PG(hw_prod) == kcq_page && KCQ_IDX(hw_prod) == i)
+			/* HW PROD INDEX */
+			cnic_dump_kcq_entry(kcqe, i, "HW_PROD");
+		else
+			cnic_dump_kcq_entry(kcqe, i, NULL);
+	}
+}
+
+/* This function will print 3 pages worth of KCQEs,
+ * currently active, previous and next page.
+ */
+void cnic_dump_kcq(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct kcq_info *info = &cp->kcq2;
+	int current_page;
+	int prev_page;
+	int next_page;
+	u16 sw_prod = 0;
+	u16 hw_prod;
+
+	sw_prod = info->sw_prod_idx;
+	sw_prod &= MAX_KCQ_IDX;
+	hw_prod = *info->hw_prod_idx_ptr;
+	hw_prod = info->hw_idx(hw_prod);
+
+	netdev_info(dev->netdev, "sw_prod_idx = 0x%x, hw_prod_idx = 0x%x\n",
+		    info->sw_prod_idx, hw_prod);
+
+	current_page = KCQ_PG(sw_prod);
+	if (current_page == 0)
+		prev_page = KCQ_PAGE_CNT - 1;
+	else
+		prev_page = current_page - 1;
+
+	if (current_page == KCQ_PAGE_CNT - 1)
+		next_page = 0;
+	else
+		next_page = current_page + 1;
+
+	netdev_info(dev->netdev, "dumping PREVIOUS PAGE (%d)\n", prev_page);
+	cnic_dump_kcq_page(dev, prev_page, sw_prod, hw_prod);
+
+	netdev_info(dev->netdev, "dumping CURRENT PAGE (%d)\n", current_page);
+	cnic_dump_kcq_page(dev, current_page, sw_prod, hw_prod);
+
+	netdev_info(dev->netdev, "dumping NEXT PAGE (%d)\n", next_page);
+	cnic_dump_kcq_page(dev, next_page, sw_prod, hw_prod);
+}
+EXPORT_SYMBOL(cnic_dump_kcq);
+
+static int cnic_uio_open(struct uio_info *uinfo, struct inode *inode)
+{
+	struct cnic_uio_dev *udev = uinfo->priv;
+	struct cnic_dev *dev;
+
+	if (!capable(CAP_NET_ADMIN))
+		return -EPERM;
+
+	if (udev->uio_dev != -1)
+		return -EBUSY;
+
+	rtnl_lock();
+	dev = udev->dev;
+
+	if (!dev || !test_bit(CNIC_F_CNIC_UP, &dev->flags)) {
+		rtnl_unlock();
+		return -ENODEV;
+	}
+
+	udev->uio_dev = iminor(inode);
+
+	cnic_shutdown_rings(dev);
+	cnic_init_rings(dev);
+	rtnl_unlock();
+
+	return 0;
+}
+
+static int cnic_uio_close(struct uio_info *uinfo, struct inode *inode)
+{
+	struct cnic_uio_dev *udev = uinfo->priv;
+
+	udev->uio_dev = -1;
+	return 0;
+}
+
+static inline void cnic_hold(struct cnic_dev *dev)
+{
+	atomic_inc(&dev->ref_count);
+}
+
+static inline void cnic_put(struct cnic_dev *dev)
+{
+	atomic_dec(&dev->ref_count);
+}
+
+static inline void csk_hold(struct cnic_sock *csk)
+{
+	atomic_inc(&csk->ref_count);
+}
+
+static inline void csk_put(struct cnic_sock *csk)
+{
+	atomic_dec(&csk->ref_count);
+}
+
+static struct cnic_dev *cnic_from_netdev(struct net_device *netdev)
+{
+	struct cnic_dev *cdev;
+
+	read_lock(&cnic_dev_lock);
+	list_for_each_entry(cdev, &cnic_dev_list, list) {
+		if (netdev == cdev->netdev) {
+			cnic_hold(cdev);
+			read_unlock(&cnic_dev_lock);
+			return cdev;
+		}
+	}
+	read_unlock(&cnic_dev_lock);
+	return NULL;
+}
+
+static inline void ulp_get(struct cnic_ulp_ops *ulp_ops)
+{
+	atomic_inc(&ulp_ops->ref_count);
+}
+
+static inline void ulp_put(struct cnic_ulp_ops *ulp_ops)
+{
+	atomic_dec(&ulp_ops->ref_count);
+}
+
+static void cnic_ctx_wr(struct cnic_dev *dev, u32 cid_addr, u32 off, u32 val)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_eth_dev *ethdev = cp->ethdev;
+	struct drv_ctl_info info;
+	struct drv_ctl_io *io = &info.data.io;
+
+	info.cmd = DRV_CTL_CTX_WR_CMD;
+	io->cid_addr = cid_addr;
+	io->offset = off;
+	io->data = val;
+	ethdev->drv_ctl(dev->netdev, &info);
+}
+
+static void cnic_ctx_tbl_wr(struct cnic_dev *dev, u32 off, dma_addr_t addr)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_eth_dev *ethdev = cp->ethdev;
+	struct drv_ctl_info info;
+	struct drv_ctl_io *io = &info.data.io;
+
+	info.cmd = DRV_CTL_CTXTBL_WR_CMD;
+	io->offset = off;
+	io->dma_addr = addr;
+	ethdev->drv_ctl(dev->netdev, &info);
+}
+
+static void cnic_ring_ctl(struct cnic_dev *dev, u32 cid, u32 cl_id, int start)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_eth_dev *ethdev = cp->ethdev;
+	struct drv_ctl_info info;
+	struct drv_ctl_l2_ring *ring = &info.data.ring;
+
+	if (start)
+		info.cmd = DRV_CTL_START_L2_CMD;
+	else
+		info.cmd = DRV_CTL_STOP_L2_CMD;
+
+	ring->cid = cid;
+	ring->client_id = cl_id;
+	ethdev->drv_ctl(dev->netdev, &info);
+}
+
+static void cnic_reg_wr_ind(struct cnic_dev *dev, u32 off, u32 val)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_eth_dev *ethdev = cp->ethdev;
+	struct drv_ctl_info info;
+	struct drv_ctl_io *io = &info.data.io;
+
+	info.cmd = DRV_CTL_IO_WR_CMD;
+	io->offset = off;
+	io->data = val;
+	ethdev->drv_ctl(dev->netdev, &info);
+}
+
+static u32 cnic_reg_rd_ind(struct cnic_dev *dev, u32 off)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_eth_dev *ethdev = cp->ethdev;
+	struct drv_ctl_info info;
+	struct drv_ctl_io *io = &info.data.io;
+
+	info.cmd = DRV_CTL_IO_RD_CMD;
+	io->offset = off;
+	ethdev->drv_ctl(dev->netdev, &info);
+	return io->data;
+}
+
+static void cnic_ulp_ctl(struct cnic_dev *dev, int ulp_type, bool reg)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_eth_dev *ethdev = cp->ethdev;
+	struct drv_ctl_info info;
+	struct fcoe_capabilities *fcoe_cap =
+		&info.data.register_data.fcoe_features;
+
+	if (reg) {
+		info.cmd = DRV_CTL_ULP_REGISTER_CMD;
+		if (ulp_type == CNIC_ULP_FCOE && dev->fcoe_cap)
+			memcpy(fcoe_cap, dev->fcoe_cap, sizeof(*fcoe_cap));
+	} else {
+		info.cmd = DRV_CTL_ULP_UNREGISTER_CMD;
+	}
+
+	info.data.ulp_type = ulp_type;
+	ethdev->drv_ctl(dev->netdev, &info);
+}
+
+static int cnic_in_use(struct cnic_sock *csk)
+{
+	return test_bit(SK_F_INUSE, &csk->flags);
+}
+
+static void cnic_spq_completion(struct cnic_dev *dev, int cmd, u32 count)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_eth_dev *ethdev = cp->ethdev;
+	struct drv_ctl_info info;
+
+	info.cmd = cmd;
+	info.data.credit.credit_count = count;
+	ethdev->drv_ctl(dev->netdev, &info);
+}
+
+#if (CNIC_ISCSI_OOO_SUPPORT)
+static int cnic_get_ooo_cqe(struct cnic_dev *dev, struct cnic_ooo_cqe* cqe)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_eth_dev *ethdev = cp->ethdev;
+	struct drv_ctl_info info;
+	struct drv_ctl_ooo_cqe *ooo_cqe = &info.data.ooo_cqe;
+
+	info.cmd = DRV_CTL_GET_OOO_CQE;
+	ooo_cqe->cqe = cqe;
+	return ethdev->drv_ctl(dev->netdev, &info);
+}
+
+static int cnic_send_ooo_pkt(struct sk_buff *skb, struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_eth_dev *ethdev = cp->ethdev;
+	struct drv_ctl_info info;
+	struct drv_ctl_ooo_pkt *ooo_pd = &info.data.pkt_desc;
+
+	info.cmd = DRV_CTL_SEND_OOO_PKT;
+	ooo_pd->skb = skb;
+
+	return ethdev->drv_ctl(dev->netdev, &info);
+}
+
+static int cnic_reuse_ooo_pkt(struct sk_buff *skb, struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_eth_dev *ethdev = cp->ethdev;
+	struct drv_ctl_info info;
+	struct drv_ctl_ooo_pkt *ooo_pd = &info.data.pkt_desc;
+
+	if (!skb) {
+		pr_err("%s: skb is NULL in reuse!\n", __func__);
+		return -EINVAL;
+	}
+	info.cmd = DRV_CTL_REUSE_OOO_PKT;
+	ooo_pd->skb = skb;
+	return ethdev->drv_ctl(dev->netdev, &info);
+}
+
+static int cnic_comp_ooo_tx_pkts(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_eth_dev *ethdev = cp->ethdev;
+	struct drv_ctl_info info;
+
+	info.cmd = DRV_CTL_COMP_OOO_TX_PKTS;
+	return ethdev->drv_ctl(dev->netdev, &info);
+}
+#endif
+
+static int cnic_get_l5_cid(struct cnic_local *cp, u32 cid, u32 *l5_cid)
+{
+	u32 i;
+
+	if (!cp->ctx_tbl)
+		return -EINVAL;
+
+	for (i = 0; i < cp->max_cid_space; i++) {
+		if (cp->ctx_tbl[i].cid == cid) {
+			*l5_cid = i;
+			return 0;
+		}
+	}
+	return -EINVAL;
+}
+
+static int cnic_send_nlmsg(struct cnic_local *cp, u32 type,
+			   struct cnic_sock *csk)
+{
+	struct iscsi_path path_req;
+	char *buf = NULL;
+	u16 len = 0;
+	u32 msg_type = ISCSI_KEVENT_IF_DOWN;
+	struct cnic_ulp_ops *ulp_ops;
+	struct cnic_uio_dev *udev = cp->udev;
+	int rc = 0, retry = 0;
+
+	if (!udev)
+		return -ENODEV;
+
+	if (type == ISCSI_KEVENT_PATH_REQ) {
+		int count = 0;
+
+		while (count < 40 && udev->uio_dev == -1) {
+			msleep(50);
+			count++;
+		}
+
+		if (udev->uio_dev == -1) {
+			netdev_warn(cp->dev->netdev, "no uio dev to send nl request\n");
+			return -ENODEV;
+		}
+	}
+
+	if (udev->uio_dev == -1)
+		return -ENODEV;
+
+	if (csk) {
+		if (time_after(jiffies, cp->nl_timestamp + HZ / 2)) {
+			cnic_atomic_dec_if_positive(&cp->nl_count);
+
+			if (time_after(jiffies, cp->nl_timestamp + 12 * HZ)) {
+				atomic_set(&cp->nl_count, 0);
+				netdev_info(cp->dev->netdev, "reset NL count\n");
+			}
+
+			cp->nl_timestamp = jiffies;
+		}
+
+		if (atomic_read(&cp->nl_count) > 512) {
+			netdev_info(cp->dev->netdev, "drop NL request count: %d\n",
+				    atomic_read(&cp->nl_count));
+			return -ENOMEM;
+		}
+
+		atomic_inc(&cp->nl_count);
+
+		len = sizeof(path_req);
+		buf = (char *) &path_req;
+		memset(&path_req, 0, len);
+
+		msg_type = ISCSI_KEVENT_PATH_REQ;
+		path_req.handle = (u64) csk->l5_cid;
+		if (test_bit(SK_F_IPV6, &csk->flags)) {
+			memcpy(&path_req.dst.v6_addr, &csk->dst_ip[0],
+			       sizeof(struct in6_addr));
+			path_req.ip_addr_len = 16;
+		} else {
+			memcpy(&path_req.dst.v4_addr, &csk->dst_ip[0],
+			       sizeof(struct in_addr));
+			path_req.ip_addr_len = 4;
+		}
+		path_req.vlan_id = csk->vlan_id;
+		path_req.pmtu = csk->mtu;
+	}
+
+	while (retry < 3) {
+		rc = 0;
+		rcu_read_lock();
+		ulp_ops = rcu_dereference(cnic_ulp_tbl[CNIC_ULP_ISCSI]);
+		if (ulp_ops)
+			rc = ulp_ops->iscsi_nl_send_msg(
+				cp->ulp_handle[CNIC_ULP_ISCSI],
+				msg_type, buf, len);
+		rcu_read_unlock();
+		if (rc == 0 || msg_type != ISCSI_KEVENT_PATH_REQ)
+			break;
+
+		msleep(100);
+		retry++;
+	}
+	return rc;
+}
+
+static void cnic_cm_upcall(struct cnic_local *, struct cnic_sock *, u8);
+
+static int cnic_iscsi_nl_msg_recv(struct cnic_dev *dev, u32 msg_type,
+				  char *buf, u16 len)
+{
+	int rc = -EINVAL;
+
+	switch (msg_type) {
+	case ISCSI_UEVENT_PATH_UPDATE: {
+		struct cnic_local *cp;
+		u32 l5_cid;
+		struct cnic_sock *csk;
+		struct iscsi_path *path_resp;
+
+		cp = dev->cnic_priv;
+		cnic_atomic_dec_if_positive(&cp->nl_count);
+
+		if (len < sizeof(*path_resp))
+			break;
+
+		path_resp = (struct iscsi_path *) buf;
+		l5_cid = (u32) path_resp->handle;
+		if (l5_cid >= MAX_CM_SK_TBL_SZ)
+			break;
+
+		rcu_read_lock();
+		if (!rcu_dereference(cp->ulp_ops[CNIC_ULP_L4])) {
+			rc = -ENODEV;
+			rcu_read_unlock();
+			break;
+		}
+		csk = &cp->csk_tbl[l5_cid];
+		csk_hold(csk);
+		if (cnic_in_use(csk) &&
+		    test_bit(SK_F_CONNECT_START, &csk->flags)) {
+
+			csk->vlan_id = path_resp->vlan_id;
+
+			memcpy(csk->ha, path_resp->mac_addr, 6);
+			if (test_bit(SK_F_IPV6, &csk->flags))
+				memcpy(&csk->src_ip[0], &path_resp->src.v6_addr,
+				       sizeof(struct in6_addr));
+			else
+				memcpy(&csk->src_ip[0], &path_resp->src.v4_addr,
+				       sizeof(struct in_addr));
+
+			if (is_valid_ether_addr(csk->ha)) {
+				cnic_cm_set_pg(csk);
+			} else if (!test_bit(SK_F_OFFLD_SCHED, &csk->flags) &&
+				!test_bit(SK_F_OFFLD_COMPLETE, &csk->flags)) {
+
+				cnic_cm_upcall(cp, csk,
+					L4_KCQE_OPCODE_VALUE_CONNECT_COMPLETE);
+				clear_bit(SK_F_CONNECT_START, &csk->flags);
+			}
+		}
+		csk_put(csk);
+		rcu_read_unlock();
+		rc = 0;
+	}
+	}
+
+	return rc;
+}
+
+static int cnic_offld_prep(struct cnic_sock *csk)
+{
+	if (test_and_set_bit(SK_F_OFFLD_SCHED, &csk->flags))
+		return 0;
+
+	if (!test_bit(SK_F_CONNECT_START, &csk->flags)) {
+		clear_bit(SK_F_OFFLD_SCHED, &csk->flags);
+		return 0;
+	}
+
+	return 1;
+}
+
+static int cnic_close_prep(struct cnic_sock *csk)
+{
+	clear_bit(SK_F_CONNECT_START, &csk->flags);
+	smp_mb__after_clear_bit();
+
+	if (test_and_clear_bit(SK_F_OFFLD_COMPLETE, &csk->flags)) {
+		while (test_and_set_bit(SK_F_OFFLD_SCHED, &csk->flags))
+			msleep(1);
+
+		return 1;
+	}
+	return 0;
+}
+
+static int cnic_abort_prep(struct cnic_sock *csk)
+{
+	int i = 0;
+
+	clear_bit(SK_F_CONNECT_START, &csk->flags);
+	smp_mb__after_clear_bit();
+
+	while (test_and_set_bit(SK_F_OFFLD_SCHED, &csk->flags)) {
+		if (++i > 10000) {
+			netdev_info(csk->dev->netdev, "cnic_abort_prep stuck on CID %x, aborting\n",
+				    csk->cid);
+			break;
+		}
+		msleep(1);
+	}
+
+	if (test_and_clear_bit(SK_F_OFFLD_COMPLETE, &csk->flags)) {
+		csk->state = L4_KCQE_OPCODE_VALUE_RESET_COMP;
+		return 1;
+	}
+
+	return 0;
+}
+
+int cnic_register_driver(int ulp_type, struct cnic_ulp_ops *ulp_ops)
+{
+	return -EINVAL;
+}
+EXPORT_SYMBOL(cnic_register_driver);
+
+int cnic_unregister_driver(int ulp_type)
+{
+	return -EINVAL;
+}
+EXPORT_SYMBOL(cnic_unregister_driver);
+
+int cnic_register_driver2(int ulp_type, struct cnic_ulp_ops *ulp_ops)
+{
+	struct cnic_dev *dev;
+
+	if (ulp_ops->version != CNIC_ULP_OPS_VER) {
+		pr_warn("ulp %x not compatible with cnic, expecting: 0x%x got: 0x%x\n",
+			ulp_type, CNIC_ULP_OPS_VER, ulp_ops->version);
+		return -EINVAL;
+	}
+
+	if (ulp_type < 0 || ulp_type >= MAX_CNIC_ULP_TYPE) {
+		pr_err("%s: Bad type %d\n", __func__, ulp_type);
+		return -EINVAL;
+	}
+	mutex_lock(&cnic_lock);
+	if (cnic_ulp_tbl_prot(ulp_type)) {
+		pr_err("%s: Type %d has already been registered\n",
+		       __func__, ulp_type);
+		mutex_unlock(&cnic_lock);
+		return -EBUSY;
+	}
+
+	read_lock(&cnic_dev_lock);
+	list_for_each_entry(dev, &cnic_dev_list, list) {
+		struct cnic_local *cp = dev->cnic_priv;
+
+		clear_bit(ULP_F_INIT, &cp->ulp_flags[ulp_type]);
+	}
+	read_unlock(&cnic_dev_lock);
+
+	atomic_set(&ulp_ops->ref_count, 0);
+	rcu_assign_pointer(cnic_ulp_tbl[ulp_type], ulp_ops);
+	mutex_unlock(&cnic_lock);
+
+	/* Prevent race conditions with netdev_event */
+	rtnl_lock();
+	list_for_each_entry(dev, &cnic_dev_list, list) {
+		struct cnic_local *cp = dev->cnic_priv;
+
+		if (!test_and_set_bit(ULP_F_INIT, &cp->ulp_flags[ulp_type]))
+			ulp_ops->cnic_init(dev);
+	}
+	rtnl_unlock();
+
+	return 0;
+}
+EXPORT_SYMBOL(cnic_register_driver2);
+
+int cnic_unregister_driver2(int ulp_type)
+{
+	struct cnic_dev *dev;
+	struct cnic_ulp_ops *ulp_ops;
+	int i = 0;
+
+	if (ulp_type < 0 || ulp_type >= MAX_CNIC_ULP_TYPE) {
+		pr_err("%s: Bad type %d\n", __func__, ulp_type);
+		return -EINVAL;
+	}
+	mutex_lock(&cnic_lock);
+	ulp_ops = cnic_ulp_tbl_prot(ulp_type);
+	if (!ulp_ops) {
+		pr_err("%s: Type %d has not been registered\n",
+		       __func__, ulp_type);
+		goto out_unlock;
+	}
+	read_lock(&cnic_dev_lock);
+	list_for_each_entry(dev, &cnic_dev_list, list) {
+		struct cnic_local *cp = dev->cnic_priv;
+
+		if (rcu_dereference(cp->ulp_ops[ulp_type])) {
+			pr_err("%s: Type %d still has devices registered\n",
+			       __func__, ulp_type);
+			read_unlock(&cnic_dev_lock);
+			goto out_unlock;
+		}
+	}
+	read_unlock(&cnic_dev_lock);
+
+	RCU_INIT_POINTER(cnic_ulp_tbl[ulp_type], NULL);
+
+	mutex_unlock(&cnic_lock);
+	synchronize_rcu();
+	while ((atomic_read(&ulp_ops->ref_count) != 0) && (i < 20)) {
+		msleep(100);
+		i++;
+	}
+
+	if (atomic_read(&ulp_ops->ref_count) != 0)
+		netdev_warn(dev->netdev, "Failed waiting for ref count to go to zero\n");
+	return 0;
+
+out_unlock:
+	mutex_unlock(&cnic_lock);
+	return -EINVAL;
+}
+EXPORT_SYMBOL(cnic_unregister_driver2);
+
+static int cnic_start_hw(struct cnic_dev *);
+static void cnic_stop_hw(struct cnic_dev *);
+
+static int cnic_register_device(struct cnic_dev *dev, int ulp_type,
+				void *ulp_ctx)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_ulp_ops *ulp_ops;
+
+	if (ulp_type < 0 || ulp_type >= MAX_CNIC_ULP_TYPE) {
+		pr_err("%s: Bad type %d\n", __func__, ulp_type);
+		return -EINVAL;
+	}
+	mutex_lock(&cnic_lock);
+	if (cnic_ulp_tbl_prot(ulp_type) == NULL) {
+		pr_err("%s: Driver with type %d has not been registered\n",
+		       __func__, ulp_type);
+		mutex_unlock(&cnic_lock);
+		return -EAGAIN;
+	}
+	if (rcu_dereference(cp->ulp_ops[ulp_type])) {
+		pr_err("%s: Type %d has already been registered to this device\n",
+		       __func__, ulp_type);
+		mutex_unlock(&cnic_lock);
+		return -EBUSY;
+	}
+
+	clear_bit(ULP_F_START, &cp->ulp_flags[ulp_type]);
+	cp->ulp_handle[ulp_type] = ulp_ctx;
+	ulp_ops = cnic_ulp_tbl_prot(ulp_type);
+	rcu_assign_pointer(cp->ulp_ops[ulp_type], ulp_ops);
+	cnic_hold(dev);
+
+	if (test_bit(CNIC_F_CNIC_UP, &dev->flags))
+		if (!test_and_set_bit(ULP_F_START, &cp->ulp_flags[ulp_type]))
+			ulp_ops->cnic_start(cp->ulp_handle[ulp_type]);
+
+	mutex_unlock(&cnic_lock);
+
+	cnic_ulp_ctl(dev, ulp_type, true);
+
+	return 0;
+
+}
+
+static int cnic_unregister_device(struct cnic_dev *dev, int ulp_type)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	int i = 0;
+
+	if (ulp_type < 0 || ulp_type >= MAX_CNIC_ULP_TYPE) {
+		pr_err("%s: Bad type %d\n", __func__, ulp_type);
+		return -EINVAL;
+	}
+	mutex_lock(&cnic_lock);
+	if (rcu_dereference(cp->ulp_ops[ulp_type])) {
+		RCU_INIT_POINTER(cp->ulp_ops[ulp_type], NULL);
+		cnic_put(dev);
+	} else {
+		pr_err("%s: device not registered to this ulp type %d\n",
+		       __func__, ulp_type);
+		mutex_unlock(&cnic_lock);
+		return -EINVAL;
+	}
+	mutex_unlock(&cnic_lock);
+
+	if (ulp_type == CNIC_ULP_ISCSI)
+		cnic_send_nlmsg(cp, ISCSI_KEVENT_IF_DOWN, NULL);
+	else if (ulp_type == CNIC_ULP_FCOE)
+		dev->fcoe_cap = NULL;
+
+	synchronize_rcu();
+
+	while (test_bit(ULP_F_CALL_PENDING, &cp->ulp_flags[ulp_type]) &&
+	       i < 20) {
+		msleep(100);
+		i++;
+	}
+	if (test_bit(ULP_F_CALL_PENDING, &cp->ulp_flags[ulp_type]))
+		netdev_warn(dev->netdev, "Failed waiting for ULP up call to complete\n");
+
+	cnic_ulp_ctl(dev, ulp_type, false);
+
+	return 0;
+}
+
+static int cnic_init_id_tbl(struct cnic_id_tbl *id_tbl, u32 size, u32 start_id,
+			    u32 next)
+{
+	id_tbl->start = start_id;
+	id_tbl->max = size;
+	id_tbl->next = next;
+	spin_lock_init(&id_tbl->lock);
+	id_tbl->table = kzalloc(DIV_ROUND_UP(size, 32) * 4, GFP_KERNEL);
+	if (!id_tbl->table)
+		return -ENOMEM;
+
+	return 0;
+}
+
+static void cnic_free_id_tbl(struct cnic_id_tbl *id_tbl)
+{
+	kfree(id_tbl->table);
+	id_tbl->table = NULL;
+}
+
+static int cnic_alloc_id(struct cnic_id_tbl *id_tbl, u32 id)
+{
+	int ret = -1;
+
+	id -= id_tbl->start;
+	if (id >= id_tbl->max)
+		return ret;
+
+	spin_lock(&id_tbl->lock);
+	if (!test_bit(id, id_tbl->table)) {
+		set_bit(id, id_tbl->table);
+		ret = 0;
+	}
+	spin_unlock(&id_tbl->lock);
+	return ret;
+}
+
+/* Returns -1 if not successful */
+static u32 cnic_alloc_new_id(struct cnic_id_tbl *id_tbl)
+{
+	u32 id;
+
+	spin_lock(&id_tbl->lock);
+	id = find_next_zero_bit(id_tbl->table, id_tbl->max, id_tbl->next);
+	if (id >= id_tbl->max) {
+		id = -1;
+		if (id_tbl->next != 0) {
+			id = find_first_zero_bit(id_tbl->table, id_tbl->next);
+			if (id >= id_tbl->next)
+				id = -1;
+		}
+	}
+
+	if (id < id_tbl->max) {
+		set_bit(id, id_tbl->table);
+		id_tbl->next = (id + 1) & (id_tbl->max - 1);
+		id += id_tbl->start;
+	}
+
+	spin_unlock(&id_tbl->lock);
+
+	return id;
+}
+
+static void cnic_free_id(struct cnic_id_tbl *id_tbl, u32 id)
+{
+	if (id == -1)
+		return;
+
+	id -= id_tbl->start;
+	if (id >= id_tbl->max)
+		return;
+
+	clear_bit(id, id_tbl->table);
+}
+
+static void cnic_free_dma(struct cnic_dev *dev, struct cnic_dma *dma)
+{
+	int i;
+
+	if (!dma->pg_arr)
+		return;
+
+	for (i = 0; i < dma->num_pages; i++) {
+		if (dma->pg_arr[i]) {
+			dma_free_coherent(&dev->pcidev->dev, BCM_PAGE_SIZE,
+					  dma->pg_arr[i], dma->pg_map_arr[i]);
+			dma->pg_arr[i] = NULL;
+		}
+	}
+	if (dma->pgtbl) {
+		dma_free_coherent(&dev->pcidev->dev, dma->pgtbl_size,
+				  dma->pgtbl, dma->pgtbl_map);
+		dma->pgtbl = NULL;
+	}
+	kfree(dma->pg_arr);
+	dma->pg_arr = NULL;
+	dma->num_pages = 0;
+}
+
+static void cnic_setup_page_tbl(struct cnic_dev *dev, struct cnic_dma *dma)
+{
+	int i;
+	__le32 *page_table = (__le32 *) dma->pgtbl;
+
+	for (i = 0; i < dma->num_pages; i++) {
+		/* Each entry needs to be in big endian format. */
+		*page_table = cpu_to_le32((u64) dma->pg_map_arr[i] >> 32);
+		page_table++;
+		*page_table = cpu_to_le32(dma->pg_map_arr[i] & 0xffffffff);
+		page_table++;
+	}
+}
+
+static void cnic_setup_page_tbl_le(struct cnic_dev *dev, struct cnic_dma *dma)
+{
+	int i;
+	__le32 *page_table = (__le32 *) dma->pgtbl;
+
+	for (i = 0; i < dma->num_pages; i++) {
+		/* Each entry needs to be in little endian format. */
+		*page_table = cpu_to_le32(dma->pg_map_arr[i] & 0xffffffff);
+		page_table++;
+		*page_table = cpu_to_le32((u64) dma->pg_map_arr[i] >> 32);
+		page_table++;
+	}
+}
+
+static int cnic_alloc_dma(struct cnic_dev *dev, struct cnic_dma *dma,
+			  int pages, int use_pg_tbl)
+{
+	int i, size;
+	struct cnic_local *cp = dev->cnic_priv;
+
+	size = pages * (sizeof(void *) + sizeof(dma_addr_t));
+	dma->pg_arr = kzalloc(size, GFP_ATOMIC);
+	if (dma->pg_arr == NULL)
+		return -ENOMEM;
+
+	dma->pg_map_arr = (dma_addr_t *) (dma->pg_arr + pages);
+	dma->num_pages = pages;
+
+	for (i = 0; i < pages; i++) {
+		dma->pg_arr[i] = dma_alloc_coherent(&dev->pcidev->dev,
+						    BCM_PAGE_SIZE,
+						    &dma->pg_map_arr[i],
+						    GFP_ATOMIC);
+		if (dma->pg_arr[i] == NULL)
+			goto error;
+	}
+	if (!use_pg_tbl)
+		return 0;
+
+	dma->pgtbl_size = ((pages * 8) + BCM_PAGE_SIZE - 1) &
+			  ~(BCM_PAGE_SIZE - 1);
+	dma->pgtbl = dma_alloc_coherent(&dev->pcidev->dev, dma->pgtbl_size,
+					&dma->pgtbl_map, GFP_ATOMIC);
+	if (dma->pgtbl == NULL)
+		goto error;
+
+	cp->setup_pgtbl(dev, dma);
+
+	return 0;
+
+error:
+	cnic_free_dma(dev, dma);
+	return -ENOMEM;
+}
+
+static void cnic_free_context(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	int i;
+
+	for (i = 0; i < cp->ctx_blks; i++) {
+		if (cp->ctx_arr[i].ctx) {
+			dma_free_coherent(&dev->pcidev->dev, cp->ctx_blk_size,
+					  cp->ctx_arr[i].ctx,
+					  cp->ctx_arr[i].mapping);
+			cp->ctx_arr[i].ctx = NULL;
+		}
+	}
+}
+
+static void __cnic_free_uio(struct cnic_uio_dev *udev)
+{
+	uio_unregister_device(&udev->cnic_uinfo);
+
+	if (udev->l2_buf) {
+		dma_free_coherent(&udev->pdev->dev, udev->l2_buf_size,
+				  udev->l2_buf, udev->l2_buf_map);
+		udev->l2_buf = NULL;
+	}
+
+	if (udev->l2_ring) {
+		dma_free_coherent(&udev->pdev->dev, udev->l2_ring_size,
+				  udev->l2_ring, udev->l2_ring_map);
+		udev->l2_ring = NULL;
+	}
+
+	pci_dev_put(udev->pdev);
+	kfree(udev);
+}
+
+static void cnic_free_uio(struct cnic_uio_dev *udev)
+{
+	if (!udev)
+		return;
+
+	write_lock(&cnic_dev_lock);
+	list_del_init(&udev->list);
+	write_unlock(&cnic_dev_lock);
+	__cnic_free_uio(udev);
+}
+
+static void cnic_free_resc(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_uio_dev *udev = cp->udev;
+
+#if (CNIC_ISCSI_OOO_SUPPORT)
+	cnic_free_ooo_resc(dev);
+#endif
+	if (udev) {
+		udev->dev = NULL;
+		cp->udev = NULL;
+	}
+
+	cnic_free_context(dev);
+	kfree(cp->ctx_arr);
+	cp->ctx_arr = NULL;
+	cp->ctx_blks = 0;
+
+	cnic_free_dma(dev, &cp->gbl_buf_info);
+#if (NEW_BNX2X_HSI <= 60)
+	cnic_free_dma(dev, &cp->conn_buf_info);
+#endif
+	cnic_free_dma(dev, &cp->kwq_info);
+	cnic_free_dma(dev, &cp->kwq_16_data_info);
+	cnic_free_dma(dev, &cp->kcq2.dma);
+	cnic_free_dma(dev, &cp->kcq1.dma);
+	kfree(cp->iscsi_tbl);
+	cp->iscsi_tbl = NULL;
+	kfree(cp->ctx_tbl);
+	cp->ctx_tbl = NULL;
+
+	cnic_free_id_tbl(&cp->fcoe_cid_tbl);
+	cnic_free_id_tbl(&cp->cid_tbl);
+}
+
+static int cnic_alloc_context(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+
+	if (CHIP_NUM(cp) == CHIP_NUM_5709) {
+		int i, k, arr_size;
+
+		cp->ctx_blk_size = BCM_PAGE_SIZE;
+		cp->cids_per_blk = BCM_PAGE_SIZE / 128;
+		arr_size = BNX2_MAX_CID / cp->cids_per_blk *
+			   sizeof(struct cnic_ctx);
+		cp->ctx_arr = kzalloc(arr_size, GFP_KERNEL);
+		if (cp->ctx_arr == NULL)
+			return -ENOMEM;
+
+		k = 0;
+		for (i = 0; i < 2; i++) {
+			u32 j, reg, off, lo, hi;
+
+			if (i == 0)
+				off = BNX2_PG_CTX_MAP;
+			else
+				off = BNX2_ISCSI_CTX_MAP;
+
+			reg = cnic_reg_rd_ind(dev, off);
+			lo = reg >> 16;
+			hi = reg & 0xffff;
+			for (j = lo; j < hi; j += cp->cids_per_blk, k++)
+				cp->ctx_arr[k].cid = j;
+		}
+
+		cp->ctx_blks = k;
+		if (cp->ctx_blks >= (BNX2_MAX_CID / cp->cids_per_blk)) {
+			cp->ctx_blks = 0;
+			return -ENOMEM;
+		}
+
+		for (i = 0; i < cp->ctx_blks; i++) {
+			cp->ctx_arr[i].ctx =
+				dma_alloc_coherent(&dev->pcidev->dev,
+						   BCM_PAGE_SIZE,
+						   &cp->ctx_arr[i].mapping,
+						   GFP_KERNEL);
+			if (cp->ctx_arr[i].ctx == NULL)
+				return -ENOMEM;
+		}
+	}
+	return 0;
+}
+
+static u16 cnic_bnx2_next_idx(u16 idx)
+{
+	return idx + 1;
+}
+
+static u16 cnic_bnx2_hw_idx(u16 idx)
+{
+	return idx;
+}
+
+static u16 cnic_bnx2x_next_idx(u16 idx)
+{
+	idx++;
+	if ((idx & MAX_KCQE_CNT) == MAX_KCQE_CNT)
+		idx++;
+
+	return idx;
+}
+
+static u16 cnic_bnx2x_hw_idx(u16 idx)
+{
+	if ((idx & MAX_KCQE_CNT) == MAX_KCQE_CNT)
+		idx++;
+	return idx;
+}
+
+static int cnic_alloc_kcq(struct cnic_dev *dev, struct kcq_info *info,
+			  bool use_pg_tbl)
+{
+	int err, i, use_page_tbl = 0;
+	struct kcqe **kcq;
+
+	if (use_pg_tbl)
+		use_page_tbl = 1;
+
+	err = cnic_alloc_dma(dev, &info->dma, KCQ_PAGE_CNT, use_page_tbl);
+	if (err)
+		return err;
+
+	kcq = (struct kcqe **) info->dma.pg_arr;
+	info->kcq = kcq;
+
+	info->next_idx = cnic_bnx2_next_idx;
+	info->hw_idx = cnic_bnx2_hw_idx;
+	if (use_pg_tbl)
+		return 0;
+
+	info->next_idx = cnic_bnx2x_next_idx;
+	info->hw_idx = cnic_bnx2x_hw_idx;
+
+	for (i = 0; i < KCQ_PAGE_CNT; i++) {
+		struct bnx2x_bd_chain_next *next =
+			(struct bnx2x_bd_chain_next *) &kcq[i][MAX_KCQE_CNT];
+		int j = i + 1;
+
+		if (j >= KCQ_PAGE_CNT)
+			j = 0;
+		next->addr_hi = (u64) info->dma.pg_map_arr[j] >> 32;
+		next->addr_lo = info->dma.pg_map_arr[j] & 0xffffffff;
+	}
+	return 0;
+}
+
+static int cnic_alloc_uio_rings(struct cnic_dev *dev, int pages)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_uio_dev *udev;
+
+	read_lock(&cnic_dev_lock);
+	list_for_each_entry(udev, &cnic_udev_list, list) {
+		if (udev->pdev == dev->pcidev) {
+			udev->dev = dev;
+			cp->udev = udev;
+			read_unlock(&cnic_dev_lock);
+			return 0;
+		}
+	}
+	read_unlock(&cnic_dev_lock);
+
+	udev = kzalloc(sizeof(struct cnic_uio_dev), GFP_ATOMIC);
+	if (!udev)
+		return -ENOMEM;
+
+	udev->uio_dev = -1;
+
+	udev->dev = dev;
+	udev->pdev = dev->pcidev;
+	udev->l2_ring_size = pages * BCM_PAGE_SIZE;
+	udev->l2_ring = dma_alloc_coherent(&udev->pdev->dev, udev->l2_ring_size,
+					   &udev->l2_ring_map,
+					   GFP_KERNEL | __GFP_COMP);
+	if (!udev->l2_ring)
+		goto err_udev;
+
+	udev->l2_buf_size = (cp->l2_rx_ring_size + 1) * cp->l2_single_buf_size;
+	udev->l2_buf_size = PAGE_ALIGN(udev->l2_buf_size);
+	udev->l2_buf = dma_alloc_coherent(&udev->pdev->dev, udev->l2_buf_size,
+					  &udev->l2_buf_map,
+					  GFP_KERNEL | __GFP_COMP);
+	if (!udev->l2_buf)
+		goto err_dma;
+
+	write_lock(&cnic_dev_lock);
+	list_add(&udev->list, &cnic_udev_list);
+	write_unlock(&cnic_dev_lock);
+
+	pci_dev_get(udev->pdev);
+
+	cp->udev = udev;
+
+	return 0;
+ err_dma:
+	dma_free_coherent(&udev->pdev->dev, udev->l2_ring_size,
+			  udev->l2_ring, udev->l2_ring_map);
+ err_udev:
+	kfree(udev);
+	return -ENOMEM;
+}
+
+static int cnic_init_uio(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_uio_dev *udev = cp->udev;
+	struct uio_info *uinfo;
+	int ret = 0;
+
+	if (!udev)
+		return -ENOMEM;
+
+	uinfo = &udev->cnic_uinfo;
+
+	uinfo->mem[0].addr = dev->netdev->base_addr;
+	uinfo->mem[0].internal_addr = dev->regview;
+	uinfo->mem[0].size = dev->netdev->mem_end - dev->netdev->mem_start;
+	uinfo->mem[0].memtype = UIO_MEM_PHYS;
+
+	if (test_bit(CNIC_F_BNX2_CLASS, &dev->flags)) {
+		uinfo->mem[1].addr = (unsigned long) cp->status_blk.gen &
+					PAGE_MASK;
+		if (cp->ethdev->drv_state & CNIC_DRV_STATE_USING_MSIX)
+			uinfo->mem[1].size = BNX2_SBLK_MSIX_ALIGN_SIZE * 9;
+		else
+			uinfo->mem[1].size = BNX2_SBLK_MSIX_ALIGN_SIZE;
+
+		uinfo->name = "bnx2_cnic";
+	} else if (test_bit(CNIC_F_BNX2X_CLASS, &dev->flags)) {
+		uinfo->mem[1].addr = (unsigned long) cp->bnx2x_def_status_blk &
+			PAGE_MASK;
+		uinfo->mem[1].size = sizeof(*cp->bnx2x_def_status_blk);
+
+		uinfo->name = "bnx2x_cnic";
+	}
+
+	uinfo->mem[1].memtype = UIO_MEM_LOGICAL;
+
+	uinfo->mem[2].addr = (unsigned long) udev->l2_ring;
+	uinfo->mem[2].size = udev->l2_ring_size;
+	uinfo->mem[2].memtype = UIO_MEM_LOGICAL;
+
+	uinfo->mem[3].addr = (unsigned long) udev->l2_buf;
+	uinfo->mem[3].size = udev->l2_buf_size;
+	uinfo->mem[3].memtype = UIO_MEM_LOGICAL;
+
+	uinfo->version = CNIC_MODULE_VERSION;
+	uinfo->irq = UIO_IRQ_CUSTOM;
+
+	uinfo->open = cnic_uio_open;
+	uinfo->release = cnic_uio_close;
+
+	if (udev->uio_dev == -1) {
+		if (!uinfo->priv) {
+			uinfo->priv = udev;
+
+			ret = uio_register_device(&udev->pdev->dev, uinfo);
+		}
+	} else {
+		cnic_init_rings(dev);
+	}
+
+	return ret;
+}
+
+static int cnic_alloc_bnx2_resc(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	int i, ret = 0;
+
+	cp->max_cid_space = MAX_ISCSI_TBL_SZ;
+
+	cp->iscsi_tbl = kzalloc(sizeof(struct cnic_iscsi) * MAX_ISCSI_TBL_SZ,
+				GFP_KERNEL);
+	if (!cp->iscsi_tbl)
+		goto error;
+
+	cp->ctx_tbl = kzalloc(sizeof(struct cnic_context) * cp->max_cid_space,
+			      GFP_KERNEL);
+	if (!cp->ctx_tbl)
+		goto error;
+
+	for (i = 0; i < MAX_ISCSI_TBL_SZ; i++) {
+		cp->ctx_tbl[i].proto.iscsi = &cp->iscsi_tbl[i];
+		cp->ctx_tbl[i].ulp_proto_id = CNIC_ULP_ISCSI;
+	}
+
+	ret = cnic_alloc_dma(dev, &cp->kwq_info, KWQ_PAGE_CNT, 1);
+	if (ret)
+		goto error;
+	cp->kwq = (struct kwqe **) cp->kwq_info.pg_arr;
+
+	ret = cnic_alloc_kcq(dev, &cp->kcq1, true);
+	if (ret)
+		goto error;
+
+	ret = cnic_alloc_context(dev);
+	if (ret)
+		goto error;
+
+	ret = cnic_alloc_uio_rings(dev, 2);
+	if (ret)
+		goto error;
+
+	ret = cnic_init_uio(dev);
+	if (ret)
+		goto error;
+
+#if (CNIC_ISCSI_OOO_SUPPORT)
+	cnic_alloc_bnx2_ooo_resc(dev);
+#endif
+	return 0;
+
+error:
+	cnic_free_resc(dev);
+	return ret;
+}
+
+static int cnic_alloc_bnx2x_context(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	int ctx_blk_size = cp->ethdev->ctx_blk_size;
+	int total_mem, blks, i;
+
+	total_mem = BNX2X_CONTEXT_MEM_SIZE * cp->max_cid_space;
+	blks = total_mem / ctx_blk_size;
+	if (total_mem % ctx_blk_size)
+		blks++;
+
+	if (blks > cp->ethdev->ctx_tbl_len)
+		return -ENOMEM;
+
+	cp->ctx_arr = kcalloc(blks, sizeof(struct cnic_ctx), GFP_KERNEL);
+	if (cp->ctx_arr == NULL)
+		return -ENOMEM;
+
+	cp->ctx_blks = blks;
+	cp->ctx_blk_size = ctx_blk_size;
+	if (!BNX2X_CHIP_IS_57710(cp->chip_id))
+		cp->ctx_align = 0;
+	else
+		cp->ctx_align = ctx_blk_size;
+
+	cp->cids_per_blk = ctx_blk_size / BNX2X_CONTEXT_MEM_SIZE;
+
+	for (i = 0; i < blks; i++) {
+		cp->ctx_arr[i].ctx =
+			dma_alloc_coherent(&dev->pcidev->dev, cp->ctx_blk_size,
+					   &cp->ctx_arr[i].mapping,
+					   GFP_KERNEL);
+		if (cp->ctx_arr[i].ctx == NULL)
+			return -ENOMEM;
+
+		if (cp->ctx_align && cp->ctx_blk_size == ctx_blk_size) {
+			if (cp->ctx_arr[i].mapping & (cp->ctx_align - 1)) {
+				cnic_free_context(dev);
+				cp->ctx_blk_size += cp->ctx_align;
+				i = -1;
+				continue;
+			}
+		}
+	}
+	return 0;
+}
+
+static int cnic_alloc_bnx2x_resc(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_eth_dev *ethdev = cp->ethdev;
+	u32 start_cid = ethdev->starting_cid;
+	int i, j, n, ret, pages;
+	struct cnic_dma *kwq_16_dma = &cp->kwq_16_data_info;
+
+	if (BNX2X_CHIP_IS_57710(cp->chip_id))
+		cp->iro_arr = e1_iro_arr;
+	else if (BNX2X_CHIP_IS_E1H(cp->chip_id))
+		cp->iro_arr = e1h_iro_arr;
+	else if (BNX2X_CHIP_IS_E2_PLUS(cp->chip_id))
+		cp->iro_arr = e2_iro_arr;
+
+	cp->max_cid_space = MAX_ISCSI_TBL_SZ;
+	cp->iscsi_start_cid = start_cid;
+	cp->fcoe_start_cid = start_cid + MAX_ISCSI_TBL_SZ;
+
+	if (BNX2X_CHIP_IS_E2_PLUS(cp->chip_id)) {
+		cp->max_cid_space += dev->max_fcoe_conn;
+		cp->fcoe_init_cid = ethdev->fcoe_init_cid;
+		if (!cp->fcoe_init_cid)
+			cp->fcoe_init_cid = 0x10;
+	}
+
+	if (start_cid < BNX2X_ISCSI_START_CID) {
+		u32 delta = BNX2X_ISCSI_START_CID - start_cid;
+
+		cp->iscsi_start_cid = BNX2X_ISCSI_START_CID;
+		cp->fcoe_start_cid += delta;
+		cp->max_cid_space += delta;
+	}
+
+	cp->iscsi_tbl = kzalloc(sizeof(struct cnic_iscsi) * MAX_ISCSI_TBL_SZ,
+				GFP_KERNEL);
+	if (!cp->iscsi_tbl)
+		goto error;
+
+	cp->ctx_tbl = kzalloc(sizeof(struct cnic_context) *
+				cp->max_cid_space, GFP_KERNEL);
+	if (!cp->ctx_tbl)
+		goto error;
+
+	for (i = 0; i < MAX_ISCSI_TBL_SZ; i++) {
+		cp->ctx_tbl[i].proto.iscsi = &cp->iscsi_tbl[i];
+		cp->ctx_tbl[i].ulp_proto_id = CNIC_ULP_ISCSI;
+	}
+
+	for (i = MAX_ISCSI_TBL_SZ; i < cp->max_cid_space; i++)
+		cp->ctx_tbl[i].ulp_proto_id = CNIC_ULP_FCOE;
+
+	pages = PAGE_ALIGN(cp->max_cid_space * CNIC_KWQ16_DATA_SIZE) /
+		PAGE_SIZE;
+
+	ret = cnic_alloc_dma(dev, kwq_16_dma, pages, 0);
+	if (ret)
+		return -ENOMEM;
+
+	n = PAGE_SIZE / CNIC_KWQ16_DATA_SIZE;
+	for (i = 0, j = 0; i < cp->max_cid_space; i++) {
+		long off = CNIC_KWQ16_DATA_SIZE * (i % n);
+
+		cp->ctx_tbl[i].kwqe_data = kwq_16_dma->pg_arr[j] + off;
+		cp->ctx_tbl[i].kwqe_data_mapping = kwq_16_dma->pg_map_arr[j] +
+						   off;
+
+		if ((i % n) == (n - 1))
+			j++;
+	}
+
+	ret = cnic_alloc_kcq(dev, &cp->kcq1, false);
+	if (ret)
+		goto error;
+
+	if (BNX2X_CHIP_IS_E2_PLUS(cp->chip_id)) {
+#if (NEW_BNX2X_HSI >= 64)
+		ret = cnic_alloc_kcq(dev, &cp->kcq2, true);
+#else
+		ret = cnic_alloc_kcq(dev, &cp->kcq2, false);
+#endif
+
+		if (ret)
+			goto error;
+	}
+
+#if (NEW_BNX2X_HSI <= 60)
+	pages = PAGE_ALIGN(BNX2X_ISCSI_NUM_CONNECTIONS *
+			   BNX2X_ISCSI_CONN_BUF_SIZE) / PAGE_SIZE;
+	ret = cnic_alloc_dma(dev, &cp->conn_buf_info, pages, 1);
+	if (ret)
+		goto error;
+#endif
+
+	pages = PAGE_ALIGN(BNX2X_ISCSI_GLB_BUF_SIZE) / PAGE_SIZE;
+	ret = cnic_alloc_dma(dev, &cp->gbl_buf_info, pages, 0);
+	if (ret)
+		goto error;
+
+	ret = cnic_alloc_bnx2x_context(dev);
+	if (ret)
+		goto error;
+
+	cp->bnx2x_def_status_blk = cp->ethdev->irq_arr[1].status_blk;
+
+	cp->l2_rx_ring_size = 15;
+
+	ret = cnic_alloc_uio_rings(dev, 4);
+	if (ret)
+		goto error;
+
+	ret = cnic_init_uio(dev);
+	if (ret)
+		goto error;
+
+#if (CNIC_ISCSI_OOO_SUPPORT)
+	cnic_alloc_bnx2x_ooo_resc(dev);
+#endif
+	return 0;
+
+error:
+	cnic_free_resc(dev);
+	return -ENOMEM;
+}
+
+static inline u32 cnic_kwq_avail(struct cnic_local *cp)
+{
+	return cp->max_kwq_idx -
+		((cp->kwq_prod_idx - cp->kwq_con_idx) & cp->max_kwq_idx);
+}
+
+static int cnic_submit_bnx2_kwqes(struct cnic_dev *dev, struct kwqe *wqes[],
+				  u32 num_wqes)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct kwqe *prod_qe;
+	u16 prod, sw_prod, i;
+#if (CNIC_ISCSI_OOO_SUPPORT)
+	u32 opcode;
+	struct kwqe *kwqe;
+#endif
+
+	if (!test_bit(CNIC_F_CNIC_UP, &dev->flags))
+		return -EAGAIN;		/* bnx2 is down */
+
+	spin_lock_bh(&cp->cnic_ulp_lock);
+	if (num_wqes > cnic_kwq_avail(cp) &&
+	    !test_bit(CNIC_LCL_FL_KWQ_INIT, &cp->cnic_local_flags)) {
+		spin_unlock_bh(&cp->cnic_ulp_lock);
+		return -EAGAIN;
+	}
+
+	clear_bit(CNIC_LCL_FL_KWQ_INIT, &cp->cnic_local_flags);
+
+	prod = cp->kwq_prod_idx;
+	sw_prod = prod & MAX_KWQ_IDX;
+	for (i = 0; i < num_wqes; i++) {
+		prod_qe = &cp->kwq[KWQ_PG(sw_prod)][KWQ_IDX(sw_prod)];
+#if (CNIC_ISCSI_OOO_SUPPORT)
+		kwqe = wqes[i];
+		opcode = KWQE_OPCODE(kwqe->kwqe_op_flag);
+		switch (opcode) {
+		case ISCSI_KWQE_OPCODE_UPDATE_CONN:
+			cnic_bnx2_ooo_iscsi_conn_update(dev, kwqe);
+			break;
+		case ISCSI_KWQE_OPCODE_DESTROY_CONN:
+			cnic_bnx2_ooo_iscsi_destroy(dev, kwqe);
+			break;
+		default:
+			break;
+		}
+#endif
+		memcpy(prod_qe, wqes[i], sizeof(struct kwqe));
+		prod++;
+		sw_prod = prod & MAX_KWQ_IDX;
+	}
+	cp->kwq_prod_idx = prod;
+
+	CNIC_WR16(dev, cp->kwq_io_addr, cp->kwq_prod_idx);
+
+	spin_unlock_bh(&cp->cnic_ulp_lock);
+	return 0;
+}
+
+static void *cnic_get_kwqe_16_data(struct cnic_local *cp, u32 l5_cid,
+				   union l5cm_specific_data *l5_data)
+{
+	struct cnic_context *ctx = &cp->ctx_tbl[l5_cid];
+	dma_addr_t map;
+
+	map = ctx->kwqe_data_mapping;
+	l5_data->phy_address.lo = (u64) map & 0xffffffff;
+	l5_data->phy_address.hi = (u64) map >> 32;
+	return ctx->kwqe_data;
+}
+
+static int cnic_submit_kwqe_16(struct cnic_dev *dev, u32 cmd, u32 cid,
+				u32 type, union l5cm_specific_data *l5_data)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct l5cm_spe kwqe;
+	struct kwqe_16 *kwq[1];
+	u16 type_16;
+	int ret;
+
+	kwqe.hdr.conn_and_cmd_data =
+		cpu_to_le32(((cmd << SPE_HDR_CMD_ID_SHIFT) |
+			     BNX2X_HW_CID(cp, cid)));
+
+	type_16 = (type << SPE_HDR_CONN_TYPE_SHIFT) & SPE_HDR_CONN_TYPE;
+	type_16 |= (cp->pfid << SPE_HDR_FUNCTION_ID_SHIFT) &
+		   SPE_HDR_FUNCTION_ID;
+
+	kwqe.hdr.type = cpu_to_le16(type_16);
+	kwqe.hdr.reserved1 = 0;
+	kwqe.data.phy_address.lo = cpu_to_le32(l5_data->phy_address.lo);
+	kwqe.data.phy_address.hi = cpu_to_le32(l5_data->phy_address.hi);
+
+	kwq[0] = (struct kwqe_16 *) &kwqe;
+
+	spin_lock_bh(&cp->cnic_ulp_lock);
+	ret = cp->ethdev->drv_submit_kwqes_16(dev->netdev, kwq, 1);
+	spin_unlock_bh(&cp->cnic_ulp_lock);
+
+	cnic_print_ramrod_info(dev, cmd, cid, kwq[0]);
+
+	if (ret == 1)
+		return 0;
+
+	return ret;
+}
+
+static void cnic_reply_bnx2x_kcqes(struct cnic_dev *dev, int ulp_type,
+				   struct kcqe *cqes[], u32 num_cqes)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_ulp_ops *ulp_ops;
+
+	rcu_read_lock();
+	ulp_ops = rcu_dereference(cp->ulp_ops[ulp_type]);
+	if (likely(ulp_ops)) {
+		ulp_ops->indicate_kcqes(cp->ulp_handle[ulp_type],
+					  cqes, num_cqes);
+	}
+	rcu_read_unlock();
+}
+
+static int cnic_bnx2x_iscsi_init1(struct cnic_dev *dev, struct kwqe *kwqe)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct iscsi_kwqe_init1 *req1 = (struct iscsi_kwqe_init1 *) kwqe;
+	int hq_bds, pages;
+	u32 pfid = cp->pfid;
+
+	cp->num_iscsi_tasks = req1->num_tasks_per_conn;
+	cp->num_ccells = req1->num_ccells_per_conn;
+	cp->task_array_size = BNX2X_ISCSI_TASK_CONTEXT_SIZE *
+			      cp->num_iscsi_tasks;
+	cp->r2tq_size = cp->num_iscsi_tasks * BNX2X_ISCSI_MAX_PENDING_R2TS *
+			BNX2X_ISCSI_R2TQE_SIZE;
+	cp->hq_size = cp->num_ccells * BNX2X_ISCSI_HQ_BD_SIZE;
+	pages = PAGE_ALIGN(cp->hq_size) / PAGE_SIZE;
+	hq_bds = pages * (PAGE_SIZE / BNX2X_ISCSI_HQ_BD_SIZE);
+	cp->num_cqs = req1->num_cqs;
+
+	if (!dev->max_iscsi_conn)
+		return 0;
+
+	/* init Tstorm RAM */
+	CNIC_WR16(dev, BAR_TSTRORM_INTMEM + TSTORM_ISCSI_RQ_SIZE_OFFSET(pfid),
+		  req1->rq_num_wqes);
+	CNIC_WR16(dev, BAR_TSTRORM_INTMEM + TSTORM_ISCSI_PAGE_SIZE_OFFSET(pfid),
+		  PAGE_SIZE);
+	CNIC_WR8(dev, BAR_TSTRORM_INTMEM +
+		 TSTORM_ISCSI_PAGE_SIZE_LOG_OFFSET(pfid), PAGE_SHIFT);
+	CNIC_WR16(dev, BAR_TSTRORM_INTMEM +
+		  TSTORM_ISCSI_NUM_OF_TASKS_OFFSET(pfid),
+		  req1->num_tasks_per_conn);
+
+	/* init Ustorm RAM */
+	CNIC_WR16(dev, BAR_USTRORM_INTMEM +
+		  USTORM_ISCSI_RQ_BUFFER_SIZE_OFFSET(pfid),
+		  req1->rq_buffer_size);
+	CNIC_WR16(dev, BAR_USTRORM_INTMEM + USTORM_ISCSI_PAGE_SIZE_OFFSET(pfid),
+		  PAGE_SIZE);
+	CNIC_WR8(dev, BAR_USTRORM_INTMEM +
+		 USTORM_ISCSI_PAGE_SIZE_LOG_OFFSET(pfid), PAGE_SHIFT);
+	CNIC_WR16(dev, BAR_USTRORM_INTMEM +
+		  USTORM_ISCSI_NUM_OF_TASKS_OFFSET(pfid),
+		  req1->num_tasks_per_conn);
+	CNIC_WR16(dev, BAR_USTRORM_INTMEM + USTORM_ISCSI_RQ_SIZE_OFFSET(pfid),
+		  req1->rq_num_wqes);
+	CNIC_WR16(dev, BAR_USTRORM_INTMEM + USTORM_ISCSI_CQ_SIZE_OFFSET(pfid),
+		  req1->cq_num_wqes);
+	CNIC_WR16(dev, BAR_USTRORM_INTMEM + USTORM_ISCSI_R2TQ_SIZE_OFFSET(pfid),
+		  cp->num_iscsi_tasks * BNX2X_ISCSI_MAX_PENDING_R2TS);
+
+	/* init Xstorm RAM */
+	CNIC_WR16(dev, BAR_XSTRORM_INTMEM + XSTORM_ISCSI_PAGE_SIZE_OFFSET(pfid),
+		  PAGE_SIZE);
+	CNIC_WR8(dev, BAR_XSTRORM_INTMEM +
+		 XSTORM_ISCSI_PAGE_SIZE_LOG_OFFSET(pfid), PAGE_SHIFT);
+	CNIC_WR16(dev, BAR_XSTRORM_INTMEM +
+		  XSTORM_ISCSI_NUM_OF_TASKS_OFFSET(pfid),
+		  req1->num_tasks_per_conn);
+	CNIC_WR16(dev, BAR_XSTRORM_INTMEM + XSTORM_ISCSI_HQ_SIZE_OFFSET(pfid),
+		  hq_bds);
+	CNIC_WR16(dev, BAR_XSTRORM_INTMEM + XSTORM_ISCSI_SQ_SIZE_OFFSET(pfid),
+		  req1->num_tasks_per_conn);
+	CNIC_WR16(dev, BAR_XSTRORM_INTMEM + XSTORM_ISCSI_R2TQ_SIZE_OFFSET(pfid),
+		  cp->num_iscsi_tasks * BNX2X_ISCSI_MAX_PENDING_R2TS);
+
+	/* init Cstorm RAM */
+	CNIC_WR16(dev, BAR_CSTRORM_INTMEM + CSTORM_ISCSI_PAGE_SIZE_OFFSET(pfid),
+		  PAGE_SIZE);
+	CNIC_WR8(dev, BAR_CSTRORM_INTMEM +
+		 CSTORM_ISCSI_PAGE_SIZE_LOG_OFFSET(pfid), PAGE_SHIFT);
+	CNIC_WR16(dev, BAR_CSTRORM_INTMEM +
+		  CSTORM_ISCSI_NUM_OF_TASKS_OFFSET(pfid),
+		  req1->num_tasks_per_conn);
+	CNIC_WR16(dev, BAR_CSTRORM_INTMEM + CSTORM_ISCSI_CQ_SIZE_OFFSET(pfid),
+		  req1->cq_num_wqes);
+	CNIC_WR16(dev, BAR_CSTRORM_INTMEM + CSTORM_ISCSI_HQ_SIZE_OFFSET(pfid),
+		  hq_bds);
+
+	return 0;
+}
+
+static int cnic_bnx2x_iscsi_init2(struct cnic_dev *dev, struct kwqe *kwqe)
+{
+	struct iscsi_kwqe_init2 *req2 = (struct iscsi_kwqe_init2 *) kwqe;
+	struct cnic_local *cp = dev->cnic_priv;
+	u32 pfid = cp->pfid;
+	struct iscsi_kcqe kcqe;
+	struct kcqe *cqes[1];
+
+	memset(&kcqe, 0, sizeof(kcqe));
+	if (!dev->max_iscsi_conn) {
+		kcqe.completion_status =
+			ISCSI_KCQE_COMPLETION_STATUS_ISCSI_NOT_SUPPORTED;
+		goto done;
+	}
+
+	CNIC_WR(dev, BAR_TSTRORM_INTMEM +
+		TSTORM_ISCSI_ERROR_BITMAP_OFFSET(pfid), req2->error_bit_map[0]);
+	CNIC_WR(dev, BAR_TSTRORM_INTMEM +
+		TSTORM_ISCSI_ERROR_BITMAP_OFFSET(pfid) + 4,
+		req2->error_bit_map[1]);
+
+	CNIC_WR16(dev, BAR_USTRORM_INTMEM +
+		  USTORM_ISCSI_CQ_SQN_SIZE_OFFSET(pfid), req2->max_cq_sqn);
+	CNIC_WR(dev, BAR_USTRORM_INTMEM +
+		USTORM_ISCSI_ERROR_BITMAP_OFFSET(pfid), req2->error_bit_map[0]);
+	CNIC_WR(dev, BAR_USTRORM_INTMEM +
+		USTORM_ISCSI_ERROR_BITMAP_OFFSET(pfid) + 4,
+		req2->error_bit_map[1]);
+
+	CNIC_WR16(dev, BAR_CSTRORM_INTMEM +
+		  CSTORM_ISCSI_CQ_SQN_SIZE_OFFSET(pfid), req2->max_cq_sqn);
+
+	kcqe.completion_status = ISCSI_KCQE_COMPLETION_STATUS_SUCCESS;
+
+done:
+	kcqe.op_code = ISCSI_KCQE_OPCODE_INIT;
+	cqes[0] = (struct kcqe *) &kcqe;
+	cnic_reply_bnx2x_kcqes(dev, CNIC_ULP_ISCSI, cqes, 1);
+
+	return 0;
+}
+
+static void cnic_free_bnx2x_conn_resc(struct cnic_dev *dev, u32 l5_cid)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_context *ctx = &cp->ctx_tbl[l5_cid];
+
+	if (ctx->ulp_proto_id == CNIC_ULP_ISCSI) {
+		struct cnic_iscsi *iscsi = ctx->proto.iscsi;
+
+		cnic_free_dma(dev, &iscsi->hq_info);
+		cnic_free_dma(dev, &iscsi->r2tq_info);
+		cnic_free_dma(dev, &iscsi->task_array_info);
+		cnic_free_id(&cp->cid_tbl, ctx->cid);
+	} else {
+		cnic_free_id(&cp->fcoe_cid_tbl, ctx->cid);
+	}
+
+	ctx->cid = 0;
+}
+
+static int cnic_alloc_bnx2x_conn_resc(struct cnic_dev *dev, u32 l5_cid)
+{
+	u32 cid;
+	int ret, pages;
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_context *ctx = &cp->ctx_tbl[l5_cid];
+	struct cnic_iscsi *iscsi = ctx->proto.iscsi;
+
+	if (ctx->ulp_proto_id == CNIC_ULP_FCOE) {
+		cid = cnic_alloc_new_id(&cp->fcoe_cid_tbl);
+		if (cid == -1) {
+			ret = -ENOMEM;
+			goto error;
+		}
+		ctx->cid = cid;
+		return 0;
+	}
+
+	cid = cnic_alloc_new_id(&cp->cid_tbl);
+	if (cid == -1) {
+		ret = -ENOMEM;
+		goto error;
+	}
+
+	ctx->cid = cid;
+	pages = PAGE_ALIGN(cp->task_array_size) / PAGE_SIZE;
+
+	ret = cnic_alloc_dma(dev, &iscsi->task_array_info, pages, 1);
+	if (ret)
+		goto error;
+
+	pages = PAGE_ALIGN(cp->r2tq_size) / PAGE_SIZE;
+	ret = cnic_alloc_dma(dev, &iscsi->r2tq_info, pages, 1);
+	if (ret)
+		goto error;
+
+	pages = PAGE_ALIGN(cp->hq_size) / PAGE_SIZE;
+	ret = cnic_alloc_dma(dev, &iscsi->hq_info, pages, 1);
+	if (ret)
+		goto error;
+
+	return 0;
+
+error:
+	cnic_free_bnx2x_conn_resc(dev, l5_cid);
+	return ret;
+}
+
+static void *cnic_get_bnx2x_ctx(struct cnic_dev *dev, u32 cid, int init,
+				struct regpair *ctx_addr)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_eth_dev *ethdev = cp->ethdev;
+	int blk = (cid - ethdev->starting_cid) / cp->cids_per_blk;
+	int off = (cid - ethdev->starting_cid) % cp->cids_per_blk;
+	unsigned long align_off = 0;
+	dma_addr_t ctx_map;
+	void *ctx;
+
+	if (cp->ctx_align) {
+		unsigned long mask = cp->ctx_align - 1;
+
+		if (cp->ctx_arr[blk].mapping & mask)
+			align_off = cp->ctx_align -
+				    (cp->ctx_arr[blk].mapping & mask);
+	}
+	ctx_map = cp->ctx_arr[blk].mapping + align_off +
+		(off * BNX2X_CONTEXT_MEM_SIZE);
+	ctx = cp->ctx_arr[blk].ctx + align_off +
+	      (off * BNX2X_CONTEXT_MEM_SIZE);
+	if (init)
+		memset(ctx, 0, BNX2X_CONTEXT_MEM_SIZE);
+
+	ctx_addr->lo = ctx_map & 0xffffffff;
+	ctx_addr->hi = (u64) ctx_map >> 32;
+	return ctx;
+}
+
+static int cnic_setup_bnx2x_ctx(struct cnic_dev *dev, struct kwqe *wqes[],
+				u32 num)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct iscsi_kwqe_conn_offload1 *req1 =
+			(struct iscsi_kwqe_conn_offload1 *) wqes[0];
+	struct iscsi_kwqe_conn_offload2 *req2 =
+			(struct iscsi_kwqe_conn_offload2 *) wqes[1];
+	struct iscsi_kwqe_conn_offload3 *req3;
+	struct cnic_context *ctx = &cp->ctx_tbl[req1->iscsi_conn_id];
+	struct cnic_iscsi *iscsi = ctx->proto.iscsi;
+	u32 cid = ctx->cid;
+	u32 hw_cid = BNX2X_HW_CID(cp, cid);
+	struct iscsi_context *ictx;
+	struct regpair context_addr;
+	int i, j, n = 2, n_max;
+#if (NEW_BNX2X_HSI >= 64)
+	u8 port = CNIC_PORT(cp);
+#endif
+
+	ctx->ctx_flags = 0;
+	if (!req2->num_additional_wqes)
+		return -EINVAL;
+
+	n_max = req2->num_additional_wqes + 2;
+
+	ictx = cnic_get_bnx2x_ctx(dev, cid, 1, &context_addr);
+	if (ictx == NULL)
+		return -ENOMEM;
+
+	req3 = (struct iscsi_kwqe_conn_offload3 *) wqes[n++];
+
+	ictx->xstorm_ag_context.hq_prod = 1;
+
+	ictx->xstorm_st_context.iscsi.first_burst_length =
+		ISCSI_DEF_FIRST_BURST_LEN;
+	ictx->xstorm_st_context.iscsi.max_send_pdu_length =
+		ISCSI_DEF_MAX_RECV_SEG_LEN;
+	ictx->xstorm_st_context.iscsi.sq_pbl_base.lo =
+		req1->sq_page_table_addr_lo;
+	ictx->xstorm_st_context.iscsi.sq_pbl_base.hi =
+		req1->sq_page_table_addr_hi;
+	ictx->xstorm_st_context.iscsi.sq_curr_pbe.lo = req2->sq_first_pte.hi;
+	ictx->xstorm_st_context.iscsi.sq_curr_pbe.hi = req2->sq_first_pte.lo;
+	ictx->xstorm_st_context.iscsi.hq_pbl_base.lo =
+		iscsi->hq_info.pgtbl_map & 0xffffffff;
+	ictx->xstorm_st_context.iscsi.hq_pbl_base.hi =
+		(u64) iscsi->hq_info.pgtbl_map >> 32;
+	ictx->xstorm_st_context.iscsi.hq_curr_pbe_base.lo =
+		iscsi->hq_info.pgtbl[0];
+	ictx->xstorm_st_context.iscsi.hq_curr_pbe_base.hi =
+		iscsi->hq_info.pgtbl[1];
+	ictx->xstorm_st_context.iscsi.r2tq_pbl_base.lo =
+		iscsi->r2tq_info.pgtbl_map & 0xffffffff;
+	ictx->xstorm_st_context.iscsi.r2tq_pbl_base.hi =
+		(u64) iscsi->r2tq_info.pgtbl_map >> 32;
+	ictx->xstorm_st_context.iscsi.r2tq_curr_pbe_base.lo =
+		iscsi->r2tq_info.pgtbl[0];
+	ictx->xstorm_st_context.iscsi.r2tq_curr_pbe_base.hi =
+		iscsi->r2tq_info.pgtbl[1];
+	ictx->xstorm_st_context.iscsi.task_pbl_base.lo =
+		iscsi->task_array_info.pgtbl_map & 0xffffffff;
+	ictx->xstorm_st_context.iscsi.task_pbl_base.hi =
+		(u64) iscsi->task_array_info.pgtbl_map >> 32;
+	ictx->xstorm_st_context.iscsi.task_pbl_cache_idx =
+		BNX2X_ISCSI_PBL_NOT_CACHED;
+	ictx->xstorm_st_context.iscsi.flags.flags |=
+		XSTORM_ISCSI_CONTEXT_FLAGS_B_IMMEDIATE_DATA;
+	ictx->xstorm_st_context.iscsi.flags.flags |=
+		XSTORM_ISCSI_CONTEXT_FLAGS_B_INITIAL_R2T;
+#if (NEW_BNX2X_HSI >= 64)
+	ictx->xstorm_st_context.common.ethernet.reserved_vlan_type =
+		ETH_P_8021Q;
+	if (BNX2X_CHIP_IS_E2_PLUS(cp->chip_id) &&
+		cp->port_mode == CHIP_2_PORT_MODE) {
+
+		port = 0;
+	}
+	ictx->xstorm_st_context.common.flags =
+		1 << XSTORM_COMMON_CONTEXT_SECTION_PHYSQ_INITIALIZED_SHIFT;
+#if (NEW_BNX2X_HSI == 70)
+	ictx->xstorm_st_context.common.flags =
+		port << XSTORM_COMMON_CONTEXT_SECTION_PBF_PORT_SHIFT;
+#else
+	ictx->xstorm_st_context.common.dcb_val =
+		port << XSTORM_COMMON_CONTEXT_SECTION_PBF_PORT_SHIFT;
+#endif
+#endif
+
+	ictx->tstorm_st_context.iscsi.hdr_bytes_2_fetch = ISCSI_HEADER_SIZE;
+	/* TSTORM requires the base address of RQ DB & not PTE */
+	ictx->tstorm_st_context.iscsi.rq_db_phy_addr.lo =
+		req2->rq_page_table_addr_lo & PAGE_MASK;
+	ictx->tstorm_st_context.iscsi.rq_db_phy_addr.hi =
+		req2->rq_page_table_addr_hi;
+	ictx->tstorm_st_context.iscsi.iscsi_conn_id = req1->iscsi_conn_id;
+	ictx->tstorm_st_context.tcp.cwnd = 0x5A8;
+	ictx->tstorm_st_context.tcp.flags2 |=
+		TSTORM_TCP_ST_CONTEXT_SECTION_DA_EN;
+	ictx->tstorm_st_context.tcp.ooo_support_mode =
+		TCP_TSTORM_OOO_DROP_AND_PROC_ACK;
+
+	ictx->timers_context.flags |= TIMERS_BLOCK_CONTEXT_CONN_VALID_FLG;
+
+	ictx->ustorm_st_context.ring.rq.pbl_base.lo =
+		req2->rq_page_table_addr_lo;
+	ictx->ustorm_st_context.ring.rq.pbl_base.hi =
+		req2->rq_page_table_addr_hi;
+	ictx->ustorm_st_context.ring.rq.curr_pbe.lo = req3->qp_first_pte[0].hi;
+	ictx->ustorm_st_context.ring.rq.curr_pbe.hi = req3->qp_first_pte[0].lo;
+	ictx->ustorm_st_context.ring.r2tq.pbl_base.lo =
+		iscsi->r2tq_info.pgtbl_map & 0xffffffff;
+	ictx->ustorm_st_context.ring.r2tq.pbl_base.hi =
+		(u64) iscsi->r2tq_info.pgtbl_map >> 32;
+	ictx->ustorm_st_context.ring.r2tq.curr_pbe.lo =
+		iscsi->r2tq_info.pgtbl[0];
+	ictx->ustorm_st_context.ring.r2tq.curr_pbe.hi =
+		iscsi->r2tq_info.pgtbl[1];
+	ictx->ustorm_st_context.ring.cq_pbl_base.lo =
+		req1->cq_page_table_addr_lo;
+	ictx->ustorm_st_context.ring.cq_pbl_base.hi =
+		req1->cq_page_table_addr_hi;
+	ictx->ustorm_st_context.ring.cq[0].cq_sn = ISCSI_INITIAL_SN;
+	ictx->ustorm_st_context.ring.cq[0].curr_pbe.lo = req2->cq_first_pte.hi;
+	ictx->ustorm_st_context.ring.cq[0].curr_pbe.hi = req2->cq_first_pte.lo;
+	ictx->ustorm_st_context.task_pbe_cache_index =
+		BNX2X_ISCSI_PBL_NOT_CACHED;
+	ictx->ustorm_st_context.task_pdu_cache_index =
+		BNX2X_ISCSI_PDU_HEADER_NOT_CACHED;
+
+	for (i = 1, j = 1; i < cp->num_cqs; i++, j++) {
+		if (j == 3) {
+			if (n >= n_max)
+				break;
+			req3 = (struct iscsi_kwqe_conn_offload3 *) wqes[n++];
+			j = 0;
+		}
+		ictx->ustorm_st_context.ring.cq[i].cq_sn = ISCSI_INITIAL_SN;
+		ictx->ustorm_st_context.ring.cq[i].curr_pbe.lo =
+			req3->qp_first_pte[j].hi;
+		ictx->ustorm_st_context.ring.cq[i].curr_pbe.hi =
+			req3->qp_first_pte[j].lo;
+	}
+
+	ictx->ustorm_st_context.task_pbl_base.lo =
+		iscsi->task_array_info.pgtbl_map & 0xffffffff;
+	ictx->ustorm_st_context.task_pbl_base.hi =
+		(u64) iscsi->task_array_info.pgtbl_map >> 32;
+	ictx->ustorm_st_context.tce_phy_addr.lo =
+		iscsi->task_array_info.pgtbl[0];
+	ictx->ustorm_st_context.tce_phy_addr.hi =
+		iscsi->task_array_info.pgtbl[1];
+	ictx->ustorm_st_context.iscsi_conn_id = req1->iscsi_conn_id;
+	ictx->ustorm_st_context.num_cqs = cp->num_cqs;
+	ictx->ustorm_st_context.negotiated_rx |= ISCSI_DEF_MAX_RECV_SEG_LEN;
+	ictx->ustorm_st_context.negotiated_rx_and_flags |=
+		ISCSI_DEF_MAX_BURST_LEN;
+	ictx->ustorm_st_context.negotiated_rx |=
+		ISCSI_DEFAULT_MAX_OUTSTANDING_R2T <<
+		USTORM_ISCSI_ST_CONTEXT_MAX_OUTSTANDING_R2TS_SHIFT;
+
+	ictx->cstorm_st_context.hq_pbl_base.lo =
+		iscsi->hq_info.pgtbl_map & 0xffffffff;
+	ictx->cstorm_st_context.hq_pbl_base.hi =
+		(u64) iscsi->hq_info.pgtbl_map >> 32;
+	ictx->cstorm_st_context.hq_curr_pbe.lo = iscsi->hq_info.pgtbl[0];
+	ictx->cstorm_st_context.hq_curr_pbe.hi = iscsi->hq_info.pgtbl[1];
+	ictx->cstorm_st_context.task_pbl_base.lo =
+		iscsi->task_array_info.pgtbl_map & 0xffffffff;
+	ictx->cstorm_st_context.task_pbl_base.hi =
+		(u64) iscsi->task_array_info.pgtbl_map >> 32;
+	/* CSTORM and USTORM initialization is different, CSTORM requires
+	 * CQ DB base & not PTE addr */
+	ictx->cstorm_st_context.cq_db_base.lo =
+		req1->cq_page_table_addr_lo & PAGE_MASK;
+	ictx->cstorm_st_context.cq_db_base.hi = req1->cq_page_table_addr_hi;
+	ictx->cstorm_st_context.iscsi_conn_id = req1->iscsi_conn_id;
+	ictx->cstorm_st_context.cq_proc_en_bit_map = (1 << cp->num_cqs) - 1;
+	for (i = 0; i < cp->num_cqs; i++) {
+		ictx->cstorm_st_context.cq_c_prod_sqn_arr.sqn[i] =
+			ISCSI_INITIAL_SN;
+		ictx->cstorm_st_context.cq_c_sqn_2_notify_arr.sqn[i] =
+			ISCSI_INITIAL_SN;
+	}
+
+	ictx->xstorm_ag_context.cdu_reserved =
+		CDU_RSRVD_VALUE_TYPE_A(hw_cid, CDU_REGION_NUMBER_XCM_AG,
+				       ISCSI_CONNECTION_TYPE);
+	ictx->ustorm_ag_context.cdu_usage =
+		CDU_RSRVD_VALUE_TYPE_A(hw_cid, CDU_REGION_NUMBER_UCM_AG,
+				       ISCSI_CONNECTION_TYPE);
+	return 0;
+
+}
+
+static int cnic_bnx2x_iscsi_ofld1(struct cnic_dev *dev, struct kwqe *wqes[],
+				   u32 num, int *work)
+{
+	struct iscsi_kwqe_conn_offload1 *req1;
+	struct iscsi_kwqe_conn_offload2 *req2;
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_context *ctx;
+	struct iscsi_kcqe kcqe;
+	struct kcqe *cqes[1];
+	u32 l5_cid;
+	int ret = 0;
+
+	if (num < 2) {
+		*work = num;
+		return -EINVAL;
+	}
+
+	req1 = (struct iscsi_kwqe_conn_offload1 *) wqes[0];
+	req2 = (struct iscsi_kwqe_conn_offload2 *) wqes[1];
+	if ((num - 2) < req2->num_additional_wqes) {
+		*work = num;
+		return -EINVAL;
+	}
+	*work = 2 + req2->num_additional_wqes;
+
+	l5_cid = req1->iscsi_conn_id;
+	if (l5_cid >= MAX_ISCSI_TBL_SZ)
+		return -EINVAL;
+
+	memset(&kcqe, 0, sizeof(kcqe));
+	kcqe.op_code = ISCSI_KCQE_OPCODE_OFFLOAD_CONN;
+	kcqe.iscsi_conn_id = l5_cid;
+	kcqe.completion_status = ISCSI_KCQE_COMPLETION_STATUS_CTX_ALLOC_FAILURE;
+
+	ctx = &cp->ctx_tbl[l5_cid];
+	if (test_bit(CTX_FL_OFFLD_START, &ctx->ctx_flags)) {
+		kcqe.completion_status =
+			ISCSI_KCQE_COMPLETION_STATUS_CID_BUSY;
+		goto done;
+	}
+
+	if (atomic_inc_return(&cp->iscsi_conn) > dev->max_iscsi_conn) {
+		atomic_dec(&cp->iscsi_conn);
+		goto done;
+	}
+	ret = cnic_alloc_bnx2x_conn_resc(dev, l5_cid);
+	if (ret) {
+		atomic_dec(&cp->iscsi_conn);
+		ret = 0;
+		goto done;
+	}
+	ret = cnic_setup_bnx2x_ctx(dev, wqes, num);
+	if (ret < 0) {
+		cnic_free_bnx2x_conn_resc(dev, l5_cid);
+		atomic_dec(&cp->iscsi_conn);
+		goto done;
+	}
+
+	kcqe.completion_status = ISCSI_KCQE_COMPLETION_STATUS_SUCCESS;
+	kcqe.iscsi_conn_context_id = BNX2X_HW_CID(cp, cp->ctx_tbl[l5_cid].cid);
+
+done:
+	cqes[0] = (struct kcqe *) &kcqe;
+	cnic_reply_bnx2x_kcqes(dev, CNIC_ULP_ISCSI, cqes, 1);
+	return 0;
+}
+
+
+static int cnic_bnx2x_iscsi_update(struct cnic_dev *dev, struct kwqe *kwqe)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct iscsi_kwqe_conn_update *req =
+		(struct iscsi_kwqe_conn_update *) kwqe;
+	void *data;
+	union l5cm_specific_data l5_data;
+	u32 l5_cid, cid = BNX2X_SW_CID(req->context_id);
+	int ret;
+
+	if (cnic_get_l5_cid(cp, cid, &l5_cid) != 0)
+		return -EINVAL;
+
+	data = cnic_get_kwqe_16_data(cp, l5_cid, &l5_data);
+	if (!data)
+		return -ENOMEM;
+
+#if (CNIC_ISCSI_OOO_SUPPORT)
+	cnic_bnx2x_ooo_iscsi_conn_update(dev, kwqe);
+#endif
+	memcpy(data, kwqe, sizeof(struct kwqe));
+
+	ret = cnic_submit_kwqe_16(dev, ISCSI_RAMROD_CMD_ID_UPDATE_CONN,
+			req->context_id, ISCSI_CONNECTION_TYPE, &l5_data);
+	return ret;
+}
+
+static int cnic_bnx2x_destroy_ramrod(struct cnic_dev *dev, u32 l5_cid)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_context *ctx = &cp->ctx_tbl[l5_cid];
+	union l5cm_specific_data l5_data;
+	int ret;
+	u32 hw_cid;
+
+	init_waitqueue_head(&ctx->waitq);
+	ctx->wait_cond = 0;
+	memset(&l5_data, 0, sizeof(l5_data));
+	hw_cid = BNX2X_HW_CID(cp, ctx->cid);
+
+	ret = cnic_submit_kwqe_16(dev, RAMROD_CMD_ID_COMMON_CFC_DEL,
+				  hw_cid, NONE_CONNECTION_TYPE, &l5_data);
+
+	if (ret == 0) {
+		wait_event_timeout(ctx->waitq, ctx->wait_cond, BNX2X_RAMROD_TO);
+		if (unlikely(test_bit(CTX_FL_CID_ERROR, &ctx->ctx_flags)))
+			return -EBUSY;
+	}
+
+	return 0;
+}
+
+static int cnic_bnx2x_iscsi_destroy(struct cnic_dev *dev, struct kwqe *kwqe)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct iscsi_kwqe_conn_destroy *req =
+		(struct iscsi_kwqe_conn_destroy *) kwqe;
+	u32 l5_cid = req->reserved0;
+	struct cnic_context *ctx = &cp->ctx_tbl[l5_cid];
+	int ret = 0;
+	struct iscsi_kcqe kcqe;
+	struct kcqe *cqes[1];
+
+	if (!test_bit(CTX_FL_OFFLD_START, &ctx->ctx_flags))
+		goto skip_cfc_delete;
+
+	if (!time_after(jiffies, ctx->timestamp + (2 * HZ))) {
+		unsigned long delta = ctx->timestamp + (2 * HZ) - jiffies;
+
+		if (delta > (2 * HZ))
+			delta = 0;
+
+		set_bit(CTX_FL_DELETE_WAIT, &ctx->ctx_flags);
+		queue_delayed_work(cnic_wq, &cp->delete_task, delta);
+		goto destroy_reply;
+	}
+
+	ret = cnic_bnx2x_destroy_ramrod(dev, l5_cid);
+
+skip_cfc_delete:
+	cnic_free_bnx2x_conn_resc(dev, l5_cid);
+
+	if (!ret) {
+		atomic_dec(&cp->iscsi_conn);
+		clear_bit(CTX_FL_OFFLD_START, &ctx->ctx_flags);
+	}
+
+destroy_reply:
+	memset(&kcqe, 0, sizeof(kcqe));
+	kcqe.op_code = ISCSI_KCQE_OPCODE_DESTROY_CONN;
+	kcqe.iscsi_conn_id = l5_cid;
+	kcqe.completion_status = ISCSI_KCQE_COMPLETION_STATUS_SUCCESS;
+	kcqe.iscsi_conn_context_id = req->context_id;
+
+	cqes[0] = (struct kcqe *) &kcqe;
+	cnic_reply_bnx2x_kcqes(dev, CNIC_ULP_ISCSI, cqes, 1);
+
+	return 0;
+}
+
+static void cnic_init_storm_conn_bufs(struct cnic_dev *dev,
+				      struct l4_kwq_connect_req1 *kwqe1,
+				      struct l4_kwq_connect_req3 *kwqe3,
+				      struct l5cm_active_conn_buffer *conn_buf)
+{
+	struct l5cm_conn_addr_params *conn_addr = &conn_buf->conn_addr_buf;
+	struct l5cm_xstorm_conn_buffer *xstorm_buf =
+		&conn_buf->xstorm_conn_buffer;
+	struct l5cm_tstorm_conn_buffer *tstorm_buf =
+		&conn_buf->tstorm_conn_buffer;
+	struct regpair context_addr;
+	u32 cid = BNX2X_SW_CID(kwqe1->cid);
+	struct in6_addr src_ip, dst_ip;
+	int i;
+	u32 *addrp;
+
+	addrp = (u32 *) &conn_addr->local_ip_addr;
+	for (i = 0; i < 4; i++, addrp++)
+		src_ip.in6_u.u6_addr32[i] = cpu_to_be32(*addrp);
+
+	addrp = (u32 *) &conn_addr->remote_ip_addr;
+	for (i = 0; i < 4; i++, addrp++)
+		dst_ip.in6_u.u6_addr32[i] = cpu_to_be32(*addrp);
+
+	cnic_get_bnx2x_ctx(dev, cid, 0, &context_addr);
+
+	xstorm_buf->context_addr.hi = context_addr.hi;
+	xstorm_buf->context_addr.lo = context_addr.lo;
+	xstorm_buf->mss = 0xffff;
+	xstorm_buf->rcv_buf = kwqe3->rcv_buf;
+	if (kwqe1->tcp_flags & L4_KWQ_CONNECT_REQ1_NAGLE_ENABLE)
+		xstorm_buf->params |= L5CM_XSTORM_CONN_BUFFER_NAGLE_ENABLE;
+	xstorm_buf->pseudo_header_checksum =
+		swab16(~csum_ipv6_magic(&src_ip, &dst_ip, 0, IPPROTO_TCP, 0));
+
+	if (!(kwqe1->tcp_flags & L4_KWQ_CONNECT_REQ1_NO_DELAY_ACK))
+		tstorm_buf->params |=
+			L5CM_TSTORM_CONN_BUFFER_DELAYED_ACK_ENABLE;
+	if (kwqe3->ka_timeout) {
+		tstorm_buf->ka_enable = 1;
+		tstorm_buf->ka_timeout = kwqe3->ka_timeout;
+		tstorm_buf->ka_interval = kwqe3->ka_interval;
+		tstorm_buf->ka_max_probe_count = kwqe3->ka_max_probe_count;
+	}
+#if (NEW_BNX2X_HSI <= 60)
+	tstorm_buf->rcv_buf = kwqe3->rcv_buf;
+	tstorm_buf->snd_buf = kwqe3->snd_buf;
+#endif
+	tstorm_buf->max_rt_time = 0xffffffff;
+}
+
+static void cnic_init_bnx2x_mac(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	u32 pfid = cp->pfid;
+	u8 *mac = dev->mac_addr;
+
+	CNIC_WR8(dev, BAR_XSTRORM_INTMEM +
+		 XSTORM_ISCSI_LOCAL_MAC_ADDR0_OFFSET(pfid), mac[0]);
+	CNIC_WR8(dev, BAR_XSTRORM_INTMEM +
+		 XSTORM_ISCSI_LOCAL_MAC_ADDR1_OFFSET(pfid), mac[1]);
+	CNIC_WR8(dev, BAR_XSTRORM_INTMEM +
+		 XSTORM_ISCSI_LOCAL_MAC_ADDR2_OFFSET(pfid), mac[2]);
+	CNIC_WR8(dev, BAR_XSTRORM_INTMEM +
+		 XSTORM_ISCSI_LOCAL_MAC_ADDR3_OFFSET(pfid), mac[3]);
+	CNIC_WR8(dev, BAR_XSTRORM_INTMEM +
+		 XSTORM_ISCSI_LOCAL_MAC_ADDR4_OFFSET(pfid), mac[4]);
+	CNIC_WR8(dev, BAR_XSTRORM_INTMEM +
+		 XSTORM_ISCSI_LOCAL_MAC_ADDR5_OFFSET(pfid), mac[5]);
+
+	CNIC_WR8(dev, BAR_TSTRORM_INTMEM +
+		 TSTORM_ISCSI_TCP_VARS_LSB_LOCAL_MAC_ADDR_OFFSET(pfid), mac[5]);
+	CNIC_WR8(dev, BAR_TSTRORM_INTMEM +
+		 TSTORM_ISCSI_TCP_VARS_LSB_LOCAL_MAC_ADDR_OFFSET(pfid) + 1,
+		 mac[4]);
+#if (NEW_BNX2X_HSI >= 64)
+	CNIC_WR8(dev, BAR_TSTRORM_INTMEM +
+		 TSTORM_ISCSI_TCP_VARS_MID_LOCAL_MAC_ADDR_OFFSET(pfid), mac[3]);
+	CNIC_WR8(dev, BAR_TSTRORM_INTMEM +
+		 TSTORM_ISCSI_TCP_VARS_MID_LOCAL_MAC_ADDR_OFFSET(pfid) + 1,
+		 mac[2]);
+	CNIC_WR8(dev, BAR_TSTRORM_INTMEM +
+		 TSTORM_ISCSI_TCP_VARS_MSB_LOCAL_MAC_ADDR_OFFSET(pfid), mac[1]);
+	CNIC_WR8(dev, BAR_TSTRORM_INTMEM +
+		 TSTORM_ISCSI_TCP_VARS_MSB_LOCAL_MAC_ADDR_OFFSET(pfid) + 1,
+		 mac[0]);
+#else
+	CNIC_WR8(dev, BAR_TSTRORM_INTMEM +
+		 TSTORM_ISCSI_TCP_VARS_MSB_LOCAL_MAC_ADDR_OFFSET(pfid), mac[3]);
+	CNIC_WR8(dev, BAR_TSTRORM_INTMEM +
+		 TSTORM_ISCSI_TCP_VARS_MSB_LOCAL_MAC_ADDR_OFFSET(pfid) + 1,
+		 mac[2]);
+	CNIC_WR8(dev, BAR_TSTRORM_INTMEM +
+		 TSTORM_ISCSI_TCP_VARS_MSB_LOCAL_MAC_ADDR_OFFSET(pfid) + 2,
+		 mac[1]);
+	CNIC_WR8(dev, BAR_TSTRORM_INTMEM +
+		 TSTORM_ISCSI_TCP_VARS_MSB_LOCAL_MAC_ADDR_OFFSET(pfid) + 3,
+		 mac[0]);
+#endif
+}
+
+static void cnic_bnx2x_set_tcp_timestamp(struct cnic_dev *dev, int tcp_ts)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	u8 xstorm_flags = XSTORM_L5CM_TCP_FLAGS_WND_SCL_EN;
+	u16 tstorm_flags = 0;
+
+	if (tcp_ts) {
+		xstorm_flags |= XSTORM_L5CM_TCP_FLAGS_TS_ENABLED;
+		tstorm_flags |= TSTORM_L5CM_TCP_FLAGS_TS_ENABLED;
+	}
+
+	CNIC_WR8(dev, BAR_XSTRORM_INTMEM +
+		 XSTORM_ISCSI_TCP_VARS_FLAGS_OFFSET(cp->pfid), xstorm_flags);
+
+	CNIC_WR16(dev, BAR_TSTRORM_INTMEM +
+		  TSTORM_ISCSI_TCP_VARS_FLAGS_OFFSET(cp->pfid), tstorm_flags);
+}
+
+static int cnic_bnx2x_connect(struct cnic_dev *dev, struct kwqe *wqes[],
+			      u32 num, int *work)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct l4_kwq_connect_req1 *kwqe1 =
+		(struct l4_kwq_connect_req1 *) wqes[0];
+	struct l4_kwq_connect_req3 *kwqe3;
+	struct l5cm_active_conn_buffer *conn_buf;
+	struct l5cm_conn_addr_params *conn_addr;
+	union l5cm_specific_data l5_data;
+	u32 l5_cid = kwqe1->pg_cid;
+	struct cnic_sock *csk = &cp->csk_tbl[l5_cid];
+	struct cnic_context *ctx = &cp->ctx_tbl[l5_cid];
+	int ret;
+
+	if (num < 2) {
+		*work = num;
+		return -EINVAL;
+	}
+
+	if (kwqe1->conn_flags & L4_KWQ_CONNECT_REQ1_IP_V6)
+		*work = 3;
+	else
+		*work = 2;
+
+	if (num < *work) {
+		*work = num;
+		return -EINVAL;
+	}
+
+	if (sizeof(*conn_buf) > CNIC_KWQ16_DATA_SIZE) {
+		netdev_err(dev->netdev, "conn_buf size too big\n");
+		return -ENOMEM;
+	}
+	conn_buf = cnic_get_kwqe_16_data(cp, l5_cid, &l5_data);
+	if (!conn_buf)
+		return -ENOMEM;
+
+	memset(conn_buf, 0, sizeof(*conn_buf));
+
+	conn_addr = &conn_buf->conn_addr_buf;
+	conn_addr->remote_addr_0 = csk->ha[0];
+	conn_addr->remote_addr_1 = csk->ha[1];
+	conn_addr->remote_addr_2 = csk->ha[2];
+	conn_addr->remote_addr_3 = csk->ha[3];
+	conn_addr->remote_addr_4 = csk->ha[4];
+	conn_addr->remote_addr_5 = csk->ha[5];
+
+	if (kwqe1->conn_flags & L4_KWQ_CONNECT_REQ1_IP_V6) {
+		struct l4_kwq_connect_req2 *kwqe2 =
+			(struct l4_kwq_connect_req2 *) wqes[1];
+
+		conn_addr->local_ip_addr.ip_addr_hi_hi = kwqe2->src_ip_v6_4;
+		conn_addr->local_ip_addr.ip_addr_hi_lo = kwqe2->src_ip_v6_3;
+		conn_addr->local_ip_addr.ip_addr_lo_hi = kwqe2->src_ip_v6_2;
+
+		conn_addr->remote_ip_addr.ip_addr_hi_hi = kwqe2->dst_ip_v6_4;
+		conn_addr->remote_ip_addr.ip_addr_hi_lo = kwqe2->dst_ip_v6_3;
+		conn_addr->remote_ip_addr.ip_addr_lo_hi = kwqe2->dst_ip_v6_2;
+		conn_addr->params |= L5CM_CONN_ADDR_PARAMS_IP_VERSION;
+	}
+	kwqe3 = (struct l4_kwq_connect_req3 *) wqes[*work - 1];
+
+	conn_addr->local_ip_addr.ip_addr_lo_lo = kwqe1->src_ip;
+	conn_addr->remote_ip_addr.ip_addr_lo_lo = kwqe1->dst_ip;
+	conn_addr->local_tcp_port = kwqe1->src_port;
+	conn_addr->remote_tcp_port = kwqe1->dst_port;
+
+	conn_addr->pmtu = kwqe3->pmtu;
+	cnic_init_storm_conn_bufs(dev, kwqe1, kwqe3, conn_buf);
+
+	CNIC_WR16(dev, BAR_XSTRORM_INTMEM +
+		  XSTORM_ISCSI_LOCAL_VLAN_OFFSET(cp->pfid), csk->vlan_id);
+
+	cnic_bnx2x_set_tcp_timestamp(dev,
+		kwqe1->tcp_flags & L4_KWQ_CONNECT_REQ1_TIME_STAMP);
+
+	ret = cnic_submit_kwqe_16(dev, L5CM_RAMROD_CMD_ID_TCP_CONNECT,
+			kwqe1->cid, ISCSI_CONNECTION_TYPE, &l5_data);
+	if (!ret)
+		set_bit(CTX_FL_OFFLD_START, &ctx->ctx_flags);
+
+	return ret;
+}
+
+static int cnic_bnx2x_close(struct cnic_dev *dev, struct kwqe *kwqe)
+{
+	struct l4_kwq_close_req *req = (struct l4_kwq_close_req *) kwqe;
+	union l5cm_specific_data l5_data;
+	int ret;
+
+	memset(&l5_data, 0, sizeof(l5_data));
+	ret = cnic_submit_kwqe_16(dev, L5CM_RAMROD_CMD_ID_CLOSE,
+			req->cid, ISCSI_CONNECTION_TYPE, &l5_data);
+	return ret;
+}
+
+static int cnic_bnx2x_reset(struct cnic_dev *dev, struct kwqe *kwqe)
+{
+	struct l4_kwq_reset_req *req = (struct l4_kwq_reset_req *) kwqe;
+	union l5cm_specific_data l5_data;
+	int ret;
+
+	memset(&l5_data, 0, sizeof(l5_data));
+	ret = cnic_submit_kwqe_16(dev, L5CM_RAMROD_CMD_ID_ABORT,
+			req->cid, ISCSI_CONNECTION_TYPE, &l5_data);
+	return ret;
+}
+static int cnic_bnx2x_offload_pg(struct cnic_dev *dev, struct kwqe *kwqe)
+{
+	struct l4_kwq_offload_pg *req = (struct l4_kwq_offload_pg *) kwqe;
+	struct l4_kcq kcqe;
+	struct kcqe *cqes[1];
+
+	memset(&kcqe, 0, sizeof(kcqe));
+	kcqe.pg_host_opaque = req->host_opaque;
+	kcqe.pg_cid = req->host_opaque;
+	kcqe.op_code = L4_KCQE_OPCODE_VALUE_OFFLOAD_PG;
+	cqes[0] = (struct kcqe *) &kcqe;
+	cnic_reply_bnx2x_kcqes(dev, CNIC_ULP_L4, cqes, 1);
+	return 0;
+}
+
+static int cnic_bnx2x_update_pg(struct cnic_dev *dev, struct kwqe *kwqe)
+{
+	struct l4_kwq_update_pg *req = (struct l4_kwq_update_pg *) kwqe;
+	struct l4_kcq kcqe;
+	struct kcqe *cqes[1];
+
+	memset(&kcqe, 0, sizeof(kcqe));
+	kcqe.pg_host_opaque = req->pg_host_opaque;
+	kcqe.pg_cid = req->pg_cid;
+	kcqe.op_code = L4_KCQE_OPCODE_VALUE_UPDATE_PG;
+	cqes[0] = (struct kcqe *) &kcqe;
+	cnic_reply_bnx2x_kcqes(dev, CNIC_ULP_L4, cqes, 1);
+	return 0;
+}
+
+static int cnic_bnx2x_fcoe_stat(struct cnic_dev *dev, struct kwqe *kwqe)
+{
+	struct fcoe_kwqe_stat *req;
+	struct fcoe_stat_ramrod_params *fcoe_stat;
+	union l5cm_specific_data l5_data;
+	struct cnic_local *cp = dev->cnic_priv;
+	int ret;
+	u32 cid;
+
+	req = (struct fcoe_kwqe_stat *) kwqe;
+	cid = BNX2X_HW_CID(cp, cp->fcoe_init_cid);
+
+	fcoe_stat = cnic_get_kwqe_16_data(cp, BNX2X_FCOE_L5_CID_BASE, &l5_data);
+	if (!fcoe_stat)
+		return -ENOMEM;
+
+	memset(fcoe_stat, 0, sizeof(*fcoe_stat));
+	memcpy(&fcoe_stat->stat_kwqe, req, sizeof(*req));
+
+#if (NEW_BNX2X_HSI >= 64)
+	ret = cnic_submit_kwqe_16(dev, FCOE_RAMROD_CMD_ID_STAT_FUNC, cid,
+				  FCOE_CONNECTION_TYPE, &l5_data);
+#else
+	ret = cnic_submit_kwqe_16(dev, FCOE_RAMROD_CMD_ID_STAT, cid,
+				  FCOE_CONNECTION_TYPE, &l5_data);
+#endif
+	return ret;
+}
+
+static int cnic_bnx2x_fcoe_init1(struct cnic_dev *dev, struct kwqe *wqes[],
+				 u32 num, int *work)
+{
+	int ret;
+	struct cnic_local *cp = dev->cnic_priv;
+	u32 cid;
+	struct fcoe_init_ramrod_params *fcoe_init;
+	struct fcoe_kwqe_init1 *req1;
+	struct fcoe_kwqe_init2 *req2;
+	struct fcoe_kwqe_init3 *req3;
+	union l5cm_specific_data l5_data;
+
+	if (num < 3) {
+		*work = num;
+		return -EINVAL;
+	}
+	req1 = (struct fcoe_kwqe_init1 *) wqes[0];
+	req2 = (struct fcoe_kwqe_init2 *) wqes[1];
+	req3 = (struct fcoe_kwqe_init3 *) wqes[2];
+	if (req2->hdr.op_code != FCOE_KWQE_OPCODE_INIT2) {
+		*work = 1;
+		return -EINVAL;
+	}
+	if (req3->hdr.op_code != FCOE_KWQE_OPCODE_INIT3) {
+		*work = 2;
+		return -EINVAL;
+	}
+
+	if (sizeof(*fcoe_init) > CNIC_KWQ16_DATA_SIZE) {
+		netdev_err(dev->netdev, "fcoe_init size too big\n");
+		return -ENOMEM;
+	}
+	fcoe_init = cnic_get_kwqe_16_data(cp, BNX2X_FCOE_L5_CID_BASE, &l5_data);
+	if (!fcoe_init)
+		return -ENOMEM;
+
+	memset(fcoe_init, 0, sizeof(*fcoe_init));
+	memcpy(&fcoe_init->init_kwqe1, req1, sizeof(*req1));
+	memcpy(&fcoe_init->init_kwqe2, req2, sizeof(*req2));
+	memcpy(&fcoe_init->init_kwqe3, req3, sizeof(*req3));
+#if (NEW_BNX2X_HSI >= 64)
+	fcoe_init->eq_pbl_base.lo = cp->kcq2.dma.pgtbl_map & 0xffffffff;
+	fcoe_init->eq_pbl_base.hi = (u64) cp->kcq2.dma.pgtbl_map >> 32;
+	fcoe_init->eq_pbl_size = cp->kcq2.dma.num_pages;
+#else
+	fcoe_init->eq_addr.lo = cp->kcq2.dma.pg_map_arr[0] & 0xffffffff;
+	fcoe_init->eq_addr.hi = (u64) cp->kcq2.dma.pg_map_arr[0] >> 32;
+	fcoe_init->eq_next_page_addr.lo =
+		cp->kcq2.dma.pg_map_arr[1] & 0xffffffff;
+	fcoe_init->eq_next_page_addr.hi =
+		(u64) cp->kcq2.dma.pg_map_arr[1] >> 32;
+#endif
+
+	fcoe_init->sb_num = cp->status_blk_num;
+	fcoe_init->eq_prod = MAX_KCQ_IDX;
+	fcoe_init->sb_id = HC_INDEX_FCOE_EQ_CONS;
+	cp->kcq2.sw_prod_idx = 0;
+
+	cid = BNX2X_HW_CID(cp, cp->fcoe_init_cid);
+#if (NEW_BNX2X_HSI >= 64)
+	ret = cnic_submit_kwqe_16(dev, FCOE_RAMROD_CMD_ID_INIT_FUNC, cid,
+				  FCOE_CONNECTION_TYPE, &l5_data);
+#else
+	ret = cnic_submit_kwqe_16(dev, FCOE_RAMROD_CMD_ID_INIT, cid,
+				  FCOE_CONNECTION_TYPE, &l5_data);
+#endif
+	*work = 3;
+	return ret;
+}
+
+static int cnic_bnx2x_fcoe_ofld1(struct cnic_dev *dev, struct kwqe *wqes[],
+				 u32 num, int *work)
+{
+	int ret = 0;
+	u32 cid = -1, l5_cid;
+	struct cnic_local *cp = dev->cnic_priv;
+	struct fcoe_kwqe_conn_offload1 *req1;
+	struct fcoe_kwqe_conn_offload2 *req2;
+	struct fcoe_kwqe_conn_offload3 *req3;
+	struct fcoe_kwqe_conn_offload4 *req4;
+	struct fcoe_conn_offload_ramrod_params *fcoe_offload;
+	struct cnic_context *ctx;
+	struct fcoe_context *fctx;
+	struct regpair ctx_addr;
+	union l5cm_specific_data l5_data;
+	struct fcoe_kcqe kcqe;
+	struct kcqe *cqes[1];
+
+	if (num < 4) {
+		*work = num;
+		return -EINVAL;
+	}
+	req1 = (struct fcoe_kwqe_conn_offload1 *) wqes[0];
+	req2 = (struct fcoe_kwqe_conn_offload2 *) wqes[1];
+	req3 = (struct fcoe_kwqe_conn_offload3 *) wqes[2];
+	req4 = (struct fcoe_kwqe_conn_offload4 *) wqes[3];
+
+	*work = 4;
+
+	l5_cid = req1->fcoe_conn_id;
+	if (l5_cid >= dev->max_fcoe_conn)
+		goto err_reply;
+
+	l5_cid += BNX2X_FCOE_L5_CID_BASE;
+
+	ctx = &cp->ctx_tbl[l5_cid];
+	if (test_bit(CTX_FL_OFFLD_START, &ctx->ctx_flags))
+		goto err_reply;
+
+	ret = cnic_alloc_bnx2x_conn_resc(dev, l5_cid);
+	if (ret) {
+		ret = 0;
+		goto err_reply;
+	}
+	cid = ctx->cid;
+
+	fctx = cnic_get_bnx2x_ctx(dev, cid, 1, &ctx_addr);
+	if (fctx) {
+		u32 hw_cid = BNX2X_HW_CID(cp, cid);
+		u32 val;
+
+		val = CDU_RSRVD_VALUE_TYPE_A(hw_cid, CDU_REGION_NUMBER_XCM_AG,
+					     FCOE_CONNECTION_TYPE);
+		fctx->xstorm_ag_context.cdu_reserved = val;
+		val = CDU_RSRVD_VALUE_TYPE_A(hw_cid, CDU_REGION_NUMBER_UCM_AG,
+					     FCOE_CONNECTION_TYPE);
+		fctx->ustorm_ag_context.cdu_usage = val;
+	}
+	if (sizeof(*fcoe_offload) > CNIC_KWQ16_DATA_SIZE) {
+		netdev_err(dev->netdev, "fcoe_offload size too big\n");
+		goto err_reply;
+	}
+	fcoe_offload = cnic_get_kwqe_16_data(cp, l5_cid, &l5_data);
+	if (!fcoe_offload)
+		goto err_reply;
+
+	memset(fcoe_offload, 0, sizeof(*fcoe_offload));
+	memcpy(&fcoe_offload->offload_kwqe1, req1, sizeof(*req1));
+	memcpy(&fcoe_offload->offload_kwqe2, req2, sizeof(*req2));
+	memcpy(&fcoe_offload->offload_kwqe3, req3, sizeof(*req3));
+	memcpy(&fcoe_offload->offload_kwqe4, req4, sizeof(*req4));
+
+	cid = BNX2X_HW_CID(cp, cid);
+	ret = cnic_submit_kwqe_16(dev, FCOE_RAMROD_CMD_ID_OFFLOAD_CONN, cid,
+				  FCOE_CONNECTION_TYPE, &l5_data);
+	if (!ret)
+		set_bit(CTX_FL_OFFLD_START, &ctx->ctx_flags);
+
+	return ret;
+
+err_reply:
+	if (cid != -1)
+		cnic_free_bnx2x_conn_resc(dev, l5_cid);
+
+	memset(&kcqe, 0, sizeof(kcqe));
+	kcqe.op_code = FCOE_KCQE_OPCODE_OFFLOAD_CONN;
+	kcqe.fcoe_conn_id = req1->fcoe_conn_id;
+	kcqe.completion_status = FCOE_KCQE_COMPLETION_STATUS_CTX_ALLOC_FAILURE;
+
+	cqes[0] = (struct kcqe *) &kcqe;
+	cnic_reply_bnx2x_kcqes(dev, CNIC_ULP_FCOE, cqes, 1);
+	return ret;
+}
+
+static int cnic_bnx2x_fcoe_enable(struct cnic_dev *dev, struct kwqe *kwqe)
+{
+	struct fcoe_kwqe_conn_enable_disable *req;
+	struct fcoe_conn_enable_disable_ramrod_params *fcoe_enable;
+	union l5cm_specific_data l5_data;
+	int ret;
+	u32 cid, l5_cid;
+	struct cnic_local *cp = dev->cnic_priv;
+
+	req = (struct fcoe_kwqe_conn_enable_disable *) kwqe;
+	cid = req->context_id;
+	l5_cid = req->conn_id + BNX2X_FCOE_L5_CID_BASE;
+
+	if (sizeof(*fcoe_enable) > CNIC_KWQ16_DATA_SIZE) {
+		netdev_err(dev->netdev, "fcoe_enable size too big\n");
+		return -ENOMEM;
+	}
+	fcoe_enable = cnic_get_kwqe_16_data(cp, l5_cid, &l5_data);
+	if (!fcoe_enable)
+		return -ENOMEM;
+
+	memset(fcoe_enable, 0, sizeof(*fcoe_enable));
+	memcpy(&fcoe_enable->enable_disable_kwqe, req, sizeof(*req));
+	ret = cnic_submit_kwqe_16(dev, FCOE_RAMROD_CMD_ID_ENABLE_CONN, cid,
+				  FCOE_CONNECTION_TYPE, &l5_data);
+	return ret;
+}
+
+static int cnic_bnx2x_fcoe_disable(struct cnic_dev *dev, struct kwqe *kwqe)
+{
+	struct fcoe_kwqe_conn_enable_disable *req;
+	struct fcoe_conn_enable_disable_ramrod_params *fcoe_disable;
+	union l5cm_specific_data l5_data;
+	int ret;
+	u32 cid, l5_cid;
+	struct cnic_local *cp = dev->cnic_priv;
+
+	req = (struct fcoe_kwqe_conn_enable_disable *) kwqe;
+	cid = req->context_id;
+	l5_cid = req->conn_id;
+	if (l5_cid >= dev->max_fcoe_conn)
+		return -EINVAL;
+
+	l5_cid += BNX2X_FCOE_L5_CID_BASE;
+
+	if (sizeof(*fcoe_disable) > CNIC_KWQ16_DATA_SIZE) {
+		netdev_err(dev->netdev, "fcoe_disable size too big\n");
+		return -ENOMEM;
+	}
+	fcoe_disable = cnic_get_kwqe_16_data(cp, l5_cid, &l5_data);
+	if (!fcoe_disable)
+		return -ENOMEM;
+
+	memset(fcoe_disable, 0, sizeof(*fcoe_disable));
+	memcpy(&fcoe_disable->enable_disable_kwqe, req, sizeof(*req));
+	ret = cnic_submit_kwqe_16(dev, FCOE_RAMROD_CMD_ID_DISABLE_CONN, cid,
+				  FCOE_CONNECTION_TYPE, &l5_data);
+	return ret;
+}
+
+static int cnic_bnx2x_fcoe_destroy(struct cnic_dev *dev, struct kwqe *kwqe)
+{
+	struct fcoe_kwqe_conn_destroy *req;
+	union l5cm_specific_data l5_data;
+	int ret;
+	u32 cid, l5_cid;
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_context *ctx;
+	struct fcoe_kcqe kcqe;
+	struct kcqe *cqes[1];
+
+	req = (struct fcoe_kwqe_conn_destroy *) kwqe;
+	cid = req->context_id;
+	l5_cid = req->conn_id;
+	if (l5_cid >= dev->max_fcoe_conn)
+		return -EINVAL;
+
+	l5_cid += BNX2X_FCOE_L5_CID_BASE;
+
+	ctx = &cp->ctx_tbl[l5_cid];
+
+	init_waitqueue_head(&ctx->waitq);
+	ctx->wait_cond = 0;
+
+	memset(&kcqe, 0, sizeof(kcqe));
+	kcqe.completion_status = FCOE_KCQE_COMPLETION_STATUS_ERROR;
+	memset(&l5_data, 0, sizeof(l5_data));
+	ret = cnic_submit_kwqe_16(dev, FCOE_RAMROD_CMD_ID_TERMINATE_CONN, cid,
+				  FCOE_CONNECTION_TYPE, &l5_data);
+	if (ret == 0) {
+		wait_event_timeout(ctx->waitq, ctx->wait_cond, BNX2X_RAMROD_TO);
+		if (ctx->wait_cond)
+			kcqe.completion_status = 0;
+	}
+
+	set_bit(CTX_FL_DELETE_WAIT, &ctx->ctx_flags);
+	queue_delayed_work(cnic_wq, &cp->delete_task, msecs_to_jiffies(2000));
+
+	kcqe.op_code = FCOE_KCQE_OPCODE_DESTROY_CONN;
+	kcqe.fcoe_conn_id = req->conn_id;
+	kcqe.fcoe_conn_context_id = cid;
+
+	cqes[0] = (struct kcqe *) &kcqe;
+	cnic_reply_bnx2x_kcqes(dev, CNIC_ULP_FCOE, cqes, 1);
+	return ret;
+}
+
+static void cnic_bnx2x_delete_wait(struct cnic_dev *dev, u32 start_cid)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	u32 i;
+
+	for (i = start_cid; i < cp->max_cid_space; i++) {
+		struct cnic_context *ctx = &cp->ctx_tbl[i];
+		int j;
+
+		while (test_bit(CTX_FL_DELETE_WAIT, &ctx->ctx_flags))
+			msleep(10);
+
+		for (j = 0; j < 5; j++) {
+			if (!test_bit(CTX_FL_OFFLD_START, &ctx->ctx_flags))
+				break;
+			msleep(20);
+		}
+
+		if (test_bit(CTX_FL_OFFLD_START, &ctx->ctx_flags))
+			netdev_warn(dev->netdev, "CID %x not deleted\n",
+				   ctx->cid);
+	}
+}
+
+static int cnic_bnx2x_fcoe_fw_destroy(struct cnic_dev *dev, struct kwqe *kwqe)
+{
+	struct fcoe_kwqe_destroy *req;
+	union l5cm_specific_data l5_data;
+	struct cnic_local *cp = dev->cnic_priv;
+	int ret;
+	u32 cid;
+
+	cnic_bnx2x_delete_wait(dev, MAX_ISCSI_TBL_SZ);
+
+	req = (struct fcoe_kwqe_destroy *) kwqe;
+	cid = BNX2X_HW_CID(cp, cp->fcoe_init_cid);
+
+	memset(&l5_data, 0, sizeof(l5_data));
+#if (NEW_BNX2X_HSI >= 64)
+	ret = cnic_submit_kwqe_16(dev, FCOE_RAMROD_CMD_ID_DESTROY_FUNC, cid,
+				  FCOE_CONNECTION_TYPE, &l5_data);
+#else
+	ret = cnic_submit_kwqe_16(dev, FCOE_RAMROD_CMD_ID_DESTROY, cid,
+				  FCOE_CONNECTION_TYPE, &l5_data);
+#endif
+	return ret;
+}
+
+static void cnic_bnx2x_kwqe_err(struct cnic_dev *dev, struct kwqe *kwqe)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct kcqe kcqe;
+	struct kcqe *cqes[1];
+	u32 cid;
+	u32 opcode = KWQE_OPCODE(kwqe->kwqe_op_flag);
+	u32 layer_code = kwqe->kwqe_op_flag & KWQE_LAYER_MASK;
+	u32 kcqe_op;
+	int ulp_type;
+
+	cid = kwqe->kwqe_info0;
+	memset(&kcqe, 0, sizeof(kcqe));
+
+	if (layer_code == KWQE_FLAGS_LAYER_MASK_L5_FCOE) {
+		u32 l5_cid = 0;
+
+		ulp_type = CNIC_ULP_FCOE;
+		if (opcode == FCOE_KWQE_OPCODE_DISABLE_CONN) {
+			struct fcoe_kwqe_conn_enable_disable *req;
+
+			req = (struct fcoe_kwqe_conn_enable_disable *) kwqe;
+			kcqe_op = FCOE_KCQE_OPCODE_DISABLE_CONN;
+			cid = req->context_id;
+			l5_cid = req->conn_id;
+		} else if (opcode == FCOE_KWQE_OPCODE_DESTROY) {
+			kcqe_op = FCOE_KCQE_OPCODE_DESTROY_FUNC;
+		} else {
+			return;
+		}
+		kcqe.kcqe_op_flag = kcqe_op << KCQE_FLAGS_OPCODE_SHIFT;
+		kcqe.kcqe_op_flag |= KCQE_FLAGS_LAYER_MASK_L5_FCOE;
+		kcqe.kcqe_info1 = FCOE_KCQE_COMPLETION_STATUS_PARITY_ERROR;
+		kcqe.kcqe_info2 = cid;
+		kcqe.kcqe_info0 = l5_cid;
+
+	} else if (layer_code == KWQE_FLAGS_LAYER_MASK_L5_ISCSI) {
+		ulp_type = CNIC_ULP_ISCSI;
+		if (opcode == ISCSI_KWQE_OPCODE_UPDATE_CONN)
+			cid = kwqe->kwqe_info1;
+
+		kcqe.kcqe_op_flag = (opcode + 0x10) << KCQE_FLAGS_OPCODE_SHIFT;
+		kcqe.kcqe_op_flag |= KCQE_FLAGS_LAYER_MASK_L5_ISCSI;
+		kcqe.kcqe_info1 = ISCSI_KCQE_COMPLETION_STATUS_PARITY_ERR;
+		kcqe.kcqe_info2 = cid;
+		cnic_get_l5_cid(cp, BNX2X_SW_CID(cid), &kcqe.kcqe_info0);
+
+	} else if (layer_code == KWQE_FLAGS_LAYER_MASK_L4) {
+		struct l4_kcq *l4kcqe = (struct l4_kcq *) &kcqe;
+
+		ulp_type = CNIC_ULP_L4;
+		if (opcode == L4_KWQE_OPCODE_VALUE_CONNECT1)
+			kcqe_op = L4_KCQE_OPCODE_VALUE_CONNECT_COMPLETE;
+		else if (opcode == L4_KWQE_OPCODE_VALUE_RESET)
+			kcqe_op = L4_KCQE_OPCODE_VALUE_RESET_COMP;
+		else if (opcode == L4_KWQE_OPCODE_VALUE_CLOSE)
+			kcqe_op = L4_KCQE_OPCODE_VALUE_CLOSE_COMP;
+		else
+			return;
+
+		kcqe.kcqe_op_flag = (kcqe_op << KCQE_FLAGS_OPCODE_SHIFT) |
+				    KCQE_FLAGS_LAYER_MASK_L4;
+		l4kcqe->status = L4_KCQE_COMPLETION_STATUS_PARITY_ERROR;
+		l4kcqe->cid = cid;
+		cnic_get_l5_cid(cp, BNX2X_SW_CID(cid), &l4kcqe->conn_id);
+	} else {
+		return;
+	}
+
+	cqes[0] = (struct kcqe *) &kcqe;
+	cnic_reply_bnx2x_kcqes(dev, ulp_type, cqes, 1);
+}
+
+static int cnic_submit_bnx2x_iscsi_kwqes(struct cnic_dev *dev,
+					 struct kwqe *wqes[], u32 num_wqes)
+{
+	int i, work, ret;
+	u32 opcode;
+	struct kwqe *kwqe;
+
+	if (!test_bit(CNIC_F_CNIC_UP, &dev->flags))
+		return -EAGAIN;		/* bnx2 is down */
+
+	for (i = 0; i < num_wqes; ) {
+		kwqe = wqes[i];
+		opcode = KWQE_OPCODE(kwqe->kwqe_op_flag);
+		work = 1;
+
+		switch (opcode) {
+		case ISCSI_KWQE_OPCODE_INIT1:
+			ret = cnic_bnx2x_iscsi_init1(dev, kwqe);
+			break;
+		case ISCSI_KWQE_OPCODE_INIT2:
+			ret = cnic_bnx2x_iscsi_init2(dev, kwqe);
+			break;
+		case ISCSI_KWQE_OPCODE_OFFLOAD_CONN1:
+			ret = cnic_bnx2x_iscsi_ofld1(dev, &wqes[i],
+						     num_wqes - i, &work);
+			break;
+		case ISCSI_KWQE_OPCODE_UPDATE_CONN:
+			ret = cnic_bnx2x_iscsi_update(dev, kwqe);
+			break;
+		case ISCSI_KWQE_OPCODE_DESTROY_CONN:
+			ret = cnic_bnx2x_iscsi_destroy(dev, kwqe);
+			break;
+		case L4_KWQE_OPCODE_VALUE_CONNECT1:
+			ret = cnic_bnx2x_connect(dev, &wqes[i], num_wqes - i,
+						 &work);
+			break;
+		case L4_KWQE_OPCODE_VALUE_CLOSE:
+			ret = cnic_bnx2x_close(dev, kwqe);
+			break;
+		case L4_KWQE_OPCODE_VALUE_RESET:
+			ret = cnic_bnx2x_reset(dev, kwqe);
+			break;
+		case L4_KWQE_OPCODE_VALUE_OFFLOAD_PG:
+			ret = cnic_bnx2x_offload_pg(dev, kwqe);
+			break;
+		case L4_KWQE_OPCODE_VALUE_UPDATE_PG:
+			ret = cnic_bnx2x_update_pg(dev, kwqe);
+			break;
+		case L4_KWQE_OPCODE_VALUE_UPLOAD_PG:
+			ret = 0;
+			break;
+		default:
+			ret = 0;
+			netdev_err(dev->netdev, "Unknown type of KWQE(0x%x)\n",
+				   opcode);
+			break;
+		}
+		if (ret < 0) {
+			netdev_err(dev->netdev, "KWQE(0x%x) failed\n",
+				   opcode);
+
+			/* Possibly bnx2x parity error, send completion
+			 * to ulp drivers with error code to speed up
+			 * cleanup and reset recovery.
+			 */
+			if (ret == -EIO || ret == -EAGAIN)
+				cnic_bnx2x_kwqe_err(dev, kwqe);
+		}
+		i += work;
+	}
+	return 0;
+}
+
+static int cnic_submit_bnx2x_fcoe_kwqes(struct cnic_dev *dev,
+					struct kwqe *wqes[], u32 num_wqes)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	int i, work, ret;
+	u32 opcode;
+	struct kwqe *kwqe;
+
+	if (!test_bit(CNIC_F_CNIC_UP, &dev->flags))
+		return -EAGAIN;		/* bnx2 is down */
+
+	if (!BNX2X_CHIP_IS_E2_PLUS(cp->chip_id))
+		return -EINVAL;
+
+	for (i = 0; i < num_wqes; ) {
+		kwqe = wqes[i];
+		opcode = KWQE_OPCODE(kwqe->kwqe_op_flag);
+		work = 1;
+
+		switch (opcode) {
+		case FCOE_KWQE_OPCODE_INIT1:
+			ret = cnic_bnx2x_fcoe_init1(dev, &wqes[i],
+						    num_wqes - i, &work);
+			break;
+		case FCOE_KWQE_OPCODE_OFFLOAD_CONN1:
+			ret = cnic_bnx2x_fcoe_ofld1(dev, &wqes[i],
+						    num_wqes - i, &work);
+			break;
+		case FCOE_KWQE_OPCODE_ENABLE_CONN:
+			ret = cnic_bnx2x_fcoe_enable(dev, kwqe);
+			break;
+		case FCOE_KWQE_OPCODE_DISABLE_CONN:
+			ret = cnic_bnx2x_fcoe_disable(dev, kwqe);
+			break;
+		case FCOE_KWQE_OPCODE_DESTROY_CONN:
+			ret = cnic_bnx2x_fcoe_destroy(dev, kwqe);
+			break;
+		case FCOE_KWQE_OPCODE_DESTROY:
+			ret = cnic_bnx2x_fcoe_fw_destroy(dev, kwqe);
+			break;
+		case FCOE_KWQE_OPCODE_STAT:
+			ret = cnic_bnx2x_fcoe_stat(dev, kwqe);
+			break;
+		default:
+			ret = 0;
+			netdev_err(dev->netdev, "Unknown type of KWQE(0x%x)\n",
+				   opcode);
+			break;
+		}
+		if (ret < 0) {
+			netdev_err(dev->netdev, "KWQE(0x%x) failed\n",
+				   opcode);
+
+			/* Possibly bnx2x parity error, send completion
+			 * to ulp drivers with error code to speed up
+			 * cleanup and reset recovery.
+			 */
+			if (ret == -EIO || ret == -EAGAIN)
+				cnic_bnx2x_kwqe_err(dev, kwqe);
+		}
+		i += work;
+	}
+	return 0;
+}
+
+static int cnic_submit_bnx2x_kwqes(struct cnic_dev *dev, struct kwqe *wqes[],
+				   u32 num_wqes)
+{
+	int ret = -EINVAL;
+	u32 layer_code;
+
+	if (!test_bit(CNIC_F_CNIC_UP, &dev->flags))
+		return -EAGAIN;		/* bnx2x is down */
+
+	if (!num_wqes)
+		return 0;
+
+	layer_code = wqes[0]->kwqe_op_flag & KWQE_LAYER_MASK;
+	switch (layer_code) {
+	case KWQE_FLAGS_LAYER_MASK_L5_ISCSI:
+	case KWQE_FLAGS_LAYER_MASK_L4:
+	case KWQE_FLAGS_LAYER_MASK_L2:
+		ret = cnic_submit_bnx2x_iscsi_kwqes(dev, wqes, num_wqes);
+		break;
+
+	case KWQE_FLAGS_LAYER_MASK_L5_FCOE:
+		ret = cnic_submit_bnx2x_fcoe_kwqes(dev, wqes, num_wqes);
+		break;
+	}
+	return ret;
+}
+
+static inline u32 cnic_get_kcqe_layer_mask(u32 opflag)
+{
+	if (unlikely(KCQE_OPCODE(opflag) == FCOE_RAMROD_CMD_ID_TERMINATE_CONN))
+		return KCQE_FLAGS_LAYER_MASK_L4;
+
+	return opflag & KCQE_FLAGS_LAYER_MASK;
+}
+
+static void service_kcqes(struct cnic_dev *dev, int num_cqes)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	int i, j, comp = 0;
+
+	i = 0;
+	j = 1;
+	while (num_cqes) {
+		struct cnic_ulp_ops *ulp_ops;
+		int ulp_type;
+		u32 kcqe_op_flag = cp->completed_kcq[i]->kcqe_op_flag;
+		u32 kcqe_layer = cnic_get_kcqe_layer_mask(kcqe_op_flag);
+
+		if (unlikely(kcqe_op_flag & KCQE_RAMROD_COMPLETION))
+			comp++;
+
+		while (j < num_cqes) {
+			u32 next_op = cp->completed_kcq[i + j]->kcqe_op_flag;
+
+			if (cnic_get_kcqe_layer_mask(next_op) != kcqe_layer)
+				break;
+
+			if (unlikely(next_op & KCQE_RAMROD_COMPLETION))
+				comp++;
+			j++;
+		}
+
+		if (kcqe_layer == KCQE_FLAGS_LAYER_MASK_L5_RDMA)
+			ulp_type = CNIC_ULP_RDMA;
+		else if (kcqe_layer == KCQE_FLAGS_LAYER_MASK_L5_ISCSI)
+			ulp_type = CNIC_ULP_ISCSI;
+		else if (kcqe_layer == KCQE_FLAGS_LAYER_MASK_L5_FCOE)
+			ulp_type = CNIC_ULP_FCOE;
+		else if (kcqe_layer == KCQE_FLAGS_LAYER_MASK_L4)
+			ulp_type = CNIC_ULP_L4;
+		else if (kcqe_layer == KCQE_FLAGS_LAYER_MASK_L2)
+			goto end;
+		else {
+			netdev_err(dev->netdev, "Unknown type of KCQE(0x%x)\n",
+				   kcqe_op_flag);
+			goto end;
+		}
+
+		rcu_read_lock();
+		ulp_ops = rcu_dereference(cp->ulp_ops[ulp_type]);
+		if (likely(ulp_ops)) {
+			ulp_ops->indicate_kcqes(cp->ulp_handle[ulp_type],
+						  cp->completed_kcq + i, j);
+		}
+		rcu_read_unlock();
+end:
+		num_cqes -= j;
+		i += j;
+		j = 1;
+	}
+	if (unlikely(comp))
+		cnic_spq_completion(dev, DRV_CTL_RET_L5_SPQ_CREDIT_CMD, comp);
+}
+
+static int cnic_get_kcqes(struct cnic_dev *dev, struct kcq_info *info)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	u16 i, ri, hw_prod, last;
+	struct kcqe *kcqe;
+	int kcqe_cnt = 0, last_cnt = 0;
+	u32 kcq_diff;
+
+	i = ri = last = info->sw_prod_idx;
+	ri &= MAX_KCQ_IDX;
+	hw_prod = *info->hw_prod_idx_ptr;
+	hw_prod = info->hw_idx(hw_prod);
+
+	if (unlikely(hw_prod < last))
+		kcq_diff = (65536 + hw_prod) - last;
+	else
+		kcq_diff = hw_prod - last;
+
+	if (unlikely(kcq_diff > MAX_KCQ_IDX))
+		netdev_warn(dev->netdev, "kcq abs(hw_prod(%d) - sw_prod(%d)) > MAX_KCQ_IDX(%lu)\n",
+			    hw_prod, last, (unsigned long) MAX_KCQ_IDX);
+
+	while ((i != hw_prod) && (kcqe_cnt < MAX_COMPLETED_KCQE)) {
+		kcqe = &info->kcq[KCQ_PG(ri)][KCQ_IDX(ri)];
+		cp->completed_kcq[kcqe_cnt++] = kcqe;
+		i = info->next_idx(i);
+		ri = i & MAX_KCQ_IDX;
+		if (likely(!(kcqe->kcqe_op_flag & KCQE_FLAGS_NEXT))) {
+			last_cnt = kcqe_cnt;
+			last = i;
+		}
+	}
+
+	info->sw_prod_idx = last;
+	return last_cnt;
+}
+
+static int cnic_l2_completion(struct cnic_local *cp)
+{
+	u16 hw_cons, sw_cons;
+	struct cnic_uio_dev *udev = cp->udev;
+	union eth_rx_cqe *cqe, *cqe_ring = (union eth_rx_cqe *)
+					(udev->l2_ring + (2 * BCM_PAGE_SIZE));
+	u32 cmd;
+	int comp = 0;
+
+	if (!test_bit(CNIC_F_BNX2X_CLASS, &cp->dev->flags))
+		return 0;
+
+	hw_cons = *cp->rx_cons_ptr;
+	if ((hw_cons & BNX2X_MAX_RCQ_DESC_CNT) == BNX2X_MAX_RCQ_DESC_CNT)
+		hw_cons++;
+
+	sw_cons = cp->rx_cons;
+	while (sw_cons != hw_cons) {
+		u8 cqe_fp_flags;
+
+		cqe = &cqe_ring[sw_cons & BNX2X_MAX_RCQ_DESC_CNT];
+		cqe_fp_flags = cqe->fast_path_cqe.type_error_flags;
+		if (cqe_fp_flags & ETH_FAST_PATH_RX_CQE_TYPE) {
+			cmd = le32_to_cpu(cqe->ramrod_cqe.conn_and_cmd_data);
+			cmd >>= COMMON_RAMROD_ETH_RX_CQE_CMD_ID_SHIFT;
+			if (cmd == RAMROD_CMD_ID_ETH_CLIENT_SETUP ||
+			    cmd == RAMROD_CMD_ID_ETH_HALT)
+				comp++;
+		}
+		sw_cons = BNX2X_NEXT_RCQE(sw_cons);
+	}
+	return comp;
+}
+
+static void cnic_chk_pkt_rings(struct cnic_local *cp)
+{
+	u16 rx_cons, tx_cons;
+	int comp = 0;
+
+	if (!test_bit(CNIC_LCL_FL_RINGS_INITED, &cp->cnic_local_flags))
+		return;
+
+	rx_cons = *cp->rx_cons_ptr;
+	tx_cons = *cp->tx_cons_ptr;
+	if (cp->tx_cons != tx_cons || cp->rx_cons != rx_cons) {
+		if (test_bit(CNIC_LCL_FL_L2_WAIT, &cp->cnic_local_flags))
+			comp = cnic_l2_completion(cp);
+
+		cp->tx_cons = tx_cons;
+		cp->rx_cons = rx_cons;
+
+		if (cp->udev)
+			uio_event_notify(&cp->udev->cnic_uinfo);
+	}
+	if (comp)
+		clear_bit(CNIC_LCL_FL_L2_WAIT, &cp->cnic_local_flags);
+}
+
+static u32 cnic_service_bnx2_queues(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	u32 status_idx = (u16) *cp->kcq1.status_idx_ptr;
+	int kcqe_cnt;
+
+	/* status block index must be read before reading other fields */
+	rmb();
+	cp->kwq_con_idx = *cp->kwq_con_idx_ptr;
+
+	while ((kcqe_cnt = cnic_get_kcqes(dev, &cp->kcq1))) {
+
+		service_kcqes(dev, kcqe_cnt);
+
+		/* Tell compiler that status_blk fields can change. */
+		barrier();
+		status_idx = (u16) *cp->kcq1.status_idx_ptr;
+		/* status block index must be read first */
+		rmb();
+		cp->kwq_con_idx = *cp->kwq_con_idx_ptr;
+	}
+
+	CNIC_WR16(dev, cp->kcq1.io_addr, cp->kcq1.sw_prod_idx);
+
+	cnic_chk_pkt_rings(cp);
+
+#if (CNIC_ISCSI_OOO_SUPPORT)
+	cnic_handle_bnx2_ooo_rx_event(dev);
+	cnic_handle_bnx2_ooo_tx_event(dev);
+#endif
+	return status_idx;
+}
+
+static int cnic_service_bnx2(void *data, void *status_blk)
+{
+	struct cnic_dev *dev = data;
+
+	if (unlikely(!test_bit(CNIC_F_CNIC_UP, &dev->flags))) {
+		struct status_block *sblk = status_blk;
+
+		return sblk->status_idx;
+	}
+
+	return cnic_service_bnx2_queues(dev);
+}
+
+static void cnic_service_bnx2_msix(unsigned long data)
+{
+	struct cnic_dev *dev = (struct cnic_dev *) data;
+	struct cnic_local *cp = dev->cnic_priv;
+
+	cp->last_status_idx = cnic_service_bnx2_queues(dev);
+
+	CNIC_WR(dev, BNX2_PCICFG_INT_ACK_CMD, cp->int_num |
+		BNX2_PCICFG_INT_ACK_CMD_INDEX_VALID | cp->last_status_idx);
+}
+
+static void cnic_doirq(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+
+	if (likely(test_bit(CNIC_F_CNIC_UP, &dev->flags))) {
+		u16 prod = cp->kcq1.sw_prod_idx & MAX_KCQ_IDX;
+
+		prefetch(cp->status_blk.gen);
+		prefetch(&cp->kcq1.kcq[KCQ_PG(prod)][KCQ_IDX(prod)]);
+
+		tasklet_schedule(&cp->cnic_irq_task);
+	}
+}
+
+#if (LINUX_VERSION_CODE >= 0x20613)
+static irqreturn_t cnic_irq(int irq, void *dev_instance)
+#else
+static irqreturn_t cnic_irq(int irq, void *dev_instance, struct pt_regs *regs)
+#endif
+{
+	struct cnic_dev *dev = dev_instance;
+	struct cnic_local *cp = dev->cnic_priv;
+
+	if (cp->ack_int)
+		cp->ack_int(dev);
+
+	cnic_doirq(dev);
+
+	return IRQ_HANDLED;
+}
+
+static inline void cnic_ack_bnx2x_int(struct cnic_dev *dev, u8 id, u8 storm,
+				      u16 index, u8 op, u8 update)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	u32 hc_addr = (HC_REG_COMMAND_REG + CNIC_PORT(cp) * 32 +
+		       COMMAND_REG_INT_ACK);
+	struct igu_ack_register igu_ack;
+
+	igu_ack.status_block_index = index;
+	igu_ack.sb_id_and_flags =
+			((id << IGU_ACK_REGISTER_STATUS_BLOCK_ID_SHIFT) |
+			 (storm << IGU_ACK_REGISTER_STORM_ID_SHIFT) |
+			 (update << IGU_ACK_REGISTER_UPDATE_INDEX_SHIFT) |
+			 (op << IGU_ACK_REGISTER_INTERRUPT_MODE_SHIFT));
+
+	CNIC_WR(dev, hc_addr, (*(u32 *)&igu_ack));
+}
+
+static void cnic_ack_igu_sb(struct cnic_dev *dev, u8 igu_sb_id, u8 segment,
+			    u16 index, u8 op, u8 update)
+{
+	struct igu_regular cmd_data;
+	u32 igu_addr = BAR_IGU_INTMEM + (IGU_CMD_INT_ACK_BASE + igu_sb_id) * 8;
+
+	cmd_data.sb_id_and_flags =
+		(index << IGU_REGULAR_SB_INDEX_SHIFT) |
+		(segment << IGU_REGULAR_SEGMENT_ACCESS_SHIFT) |
+		(update << IGU_REGULAR_BUPDATE_SHIFT) |
+		(op << IGU_REGULAR_ENABLE_INT_SHIFT);
+
+
+	CNIC_WR(dev, igu_addr, cmd_data.sb_id_and_flags);
+}
+
+static void cnic_ack_bnx2x_msix(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+
+	cnic_ack_bnx2x_int(dev, cp->bnx2x_igu_sb_id, CSTORM_ID, 0,
+			   IGU_INT_DISABLE, 0);
+}
+
+static void cnic_ack_bnx2x_e2_msix(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+
+	cnic_ack_igu_sb(dev, cp->bnx2x_igu_sb_id, IGU_SEG_ACCESS_DEF, 0,
+			IGU_INT_DISABLE, 0);
+}
+
+static u32 cnic_service_bnx2x_kcq(struct cnic_dev *dev, struct kcq_info *info)
+{
+	u32 last_status = *info->status_idx_ptr;
+	int kcqe_cnt;
+
+	/* status block index must be read before reading the KCQ */
+	rmb();
+	while ((kcqe_cnt = cnic_get_kcqes(dev, info))) {
+
+		service_kcqes(dev, kcqe_cnt);
+
+		/* Tell compiler that sblk fields can change. */
+		barrier();
+
+		last_status = *info->status_idx_ptr;
+		/* status block index must be read before reading the KCQ */
+		rmb();
+	}
+	return last_status;
+}
+
+static void cnic_service_bnx2x_bh(unsigned long data)
+{
+	struct cnic_dev *dev = (struct cnic_dev *) data;
+	struct cnic_local *cp = dev->cnic_priv;
+	u32 status_idx, new_status_idx;
+
+	if (unlikely(!test_bit(CNIC_F_CNIC_UP, &dev->flags)))
+		return;
+
+	while (1) {
+		status_idx = cnic_service_bnx2x_kcq(dev, &cp->kcq1);
+
+		CNIC_WR16(dev, cp->kcq1.io_addr,
+			  cp->kcq1.sw_prod_idx + MAX_KCQ_IDX);
+
+#if (CNIC_ISCSI_OOO_SUPPORT)
+		cnic_handle_bnx2x_ooo_tx_event(dev);
+		cnic_handle_bnx2x_ooo_rx_event(dev);
+#endif
+
+		if (!BNX2X_CHIP_IS_E2_PLUS(cp->chip_id)) {
+			cnic_ack_bnx2x_int(dev, cp->bnx2x_igu_sb_id, USTORM_ID,
+					   status_idx, IGU_INT_ENABLE, 1);
+			break;
+		}
+
+		new_status_idx = cnic_service_bnx2x_kcq(dev, &cp->kcq2);
+
+		if (new_status_idx != status_idx)
+			continue;
+
+		CNIC_WR16(dev, cp->kcq2.io_addr, cp->kcq2.sw_prod_idx +
+			  MAX_KCQ_IDX);
+
+		cnic_ack_igu_sb(dev, cp->bnx2x_igu_sb_id, IGU_SEG_ACCESS_DEF,
+				status_idx, IGU_INT_ENABLE, 1);
+
+		break;
+	}
+}
+
+static int cnic_service_bnx2x(void *data, void *status_blk)
+{
+	struct cnic_dev *dev = data;
+	struct cnic_local *cp = dev->cnic_priv;
+
+	if (!(cp->ethdev->drv_state & CNIC_DRV_STATE_USING_MSIX))
+		cnic_doirq(dev);
+
+	cnic_chk_pkt_rings(cp);
+
+	return 0;
+}
+
+static void cnic_ulp_stop_one(struct cnic_local *cp, int if_type)
+{
+	struct cnic_ulp_ops *ulp_ops;
+
+	if (if_type == CNIC_ULP_ISCSI)
+		cnic_send_nlmsg(cp, ISCSI_KEVENT_IF_DOWN, NULL);
+
+	mutex_lock(&cnic_lock);
+	ulp_ops = rcu_dereference_protected(cp->ulp_ops[if_type],
+					    lockdep_is_held(&cnic_lock));
+	if (!ulp_ops) {
+		mutex_unlock(&cnic_lock);
+		return;
+	}
+	set_bit(ULP_F_CALL_PENDING, &cp->ulp_flags[if_type]);
+	mutex_unlock(&cnic_lock);
+
+	if (test_and_clear_bit(ULP_F_START, &cp->ulp_flags[if_type]))
+		ulp_ops->cnic_stop(cp->ulp_handle[if_type]);
+
+	clear_bit(ULP_F_CALL_PENDING, &cp->ulp_flags[if_type]);
+}
+
+static void cnic_ulp_stop(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	int if_type;
+
+	for (if_type = 0; if_type < MAX_CNIC_ULP_TYPE; if_type++)
+		cnic_ulp_stop_one(cp, if_type);
+}
+
+static void cnic_ulp_start(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	int if_type;
+
+	for (if_type = 0; if_type < MAX_CNIC_ULP_TYPE; if_type++) {
+		struct cnic_ulp_ops *ulp_ops;
+
+		mutex_lock(&cnic_lock);
+		ulp_ops = rcu_dereference_protected(cp->ulp_ops[if_type],
+						    lockdep_is_held(&cnic_lock));
+		if (!ulp_ops || !ulp_ops->cnic_start) {
+			mutex_unlock(&cnic_lock);
+			continue;
+		}
+		set_bit(ULP_F_CALL_PENDING, &cp->ulp_flags[if_type]);
+		mutex_unlock(&cnic_lock);
+
+		if (!test_and_set_bit(ULP_F_START, &cp->ulp_flags[if_type]))
+			ulp_ops->cnic_start(cp->ulp_handle[if_type]);
+
+		clear_bit(ULP_F_CALL_PENDING, &cp->ulp_flags[if_type]);
+	}
+}
+
+static int cnic_copy_ulp_stats(struct cnic_dev *dev, int ulp_type)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_ulp_ops *ulp_ops;
+	int rc;
+
+	mutex_lock(&cnic_lock);
+	ulp_ops = cnic_ulp_tbl_prot(ulp_type);
+	if (ulp_ops && ulp_ops->cnic_get_stats)
+		rc = ulp_ops->cnic_get_stats(cp->ulp_handle[ulp_type]);
+	else
+		rc = -ENODEV;
+	mutex_unlock(&cnic_lock);
+	return rc;
+}
+
+static int cnic_ctl(void *data, struct cnic_ctl_info *info)
+{
+	struct cnic_dev *dev = data;
+	int ulp_type = CNIC_ULP_ISCSI;
+
+	switch (info->cmd) {
+	case CNIC_CTL_STOP_CMD:
+		cnic_hold(dev);
+
+		cnic_ulp_stop(dev);
+		cnic_stop_hw(dev);
+
+		cnic_put(dev);
+		break;
+	case CNIC_CTL_START_CMD:
+		cnic_hold(dev);
+
+		if (!cnic_start_hw(dev))
+			cnic_ulp_start(dev);
+
+		cnic_put(dev);
+		break;
+	case CNIC_CTL_STOP_ISCSI_CMD: {
+		struct cnic_local *cp = dev->cnic_priv;
+		set_bit(CNIC_LCL_FL_STOP_ISCSI, &cp->cnic_local_flags);
+		queue_delayed_work(cnic_wq, &cp->delete_task, 0);
+		break;
+	}
+	case CNIC_CTL_COMPLETION_CMD: {
+		struct cnic_ctl_completion *comp = &info->data.comp;
+		u32 cid = BNX2X_SW_CID(comp->cid);
+		u32 l5_cid;
+		struct cnic_local *cp = dev->cnic_priv;
+
+		if (!test_bit(CNIC_F_CNIC_UP, &dev->flags))
+			break;
+
+		if (cnic_get_l5_cid(cp, cid, &l5_cid) == 0) {
+			struct cnic_context *ctx = &cp->ctx_tbl[l5_cid];
+
+			if (unlikely(comp->error)) {
+				set_bit(CTX_FL_CID_ERROR, &ctx->ctx_flags);
+				netdev_err(dev->netdev,
+					   "CID %x CFC delete comp error %x\n",
+					   cid, comp->error);
+			}
+
+			ctx->wait_cond = 1;
+			wake_up(&ctx->waitq);
+		}
+		break;
+	}
+	case CNIC_CTL_FCOE_STATS_GET_CMD:
+		ulp_type = CNIC_ULP_FCOE;
+		/* fall through */
+	case CNIC_CTL_ISCSI_STATS_GET_CMD:
+		cnic_hold(dev);
+		cnic_copy_ulp_stats(dev, ulp_type);
+		cnic_put(dev);
+		break;
+
+	default:
+		return -EINVAL;
+	}
+	return 0;
+}
+
+static void cnic_ulp_init(struct cnic_dev *dev)
+{
+	int i;
+	struct cnic_local *cp = dev->cnic_priv;
+
+	for (i = 0; i < MAX_CNIC_ULP_TYPE_EXT; i++) {
+		struct cnic_ulp_ops *ulp_ops;
+
+		mutex_lock(&cnic_lock);
+		ulp_ops = cnic_ulp_tbl_prot(i);
+		if (!ulp_ops || !ulp_ops->cnic_init) {
+			mutex_unlock(&cnic_lock);
+			continue;
+		}
+		ulp_get(ulp_ops);
+		mutex_unlock(&cnic_lock);
+
+		if (!test_and_set_bit(ULP_F_INIT, &cp->ulp_flags[i]))
+			ulp_ops->cnic_init(dev);
+
+		ulp_put(ulp_ops);
+	}
+}
+
+static void cnic_ulp_exit(struct cnic_dev *dev)
+{
+	int i;
+	struct cnic_local *cp = dev->cnic_priv;
+
+	for (i = 0; i < MAX_CNIC_ULP_TYPE_EXT; i++) {
+		struct cnic_ulp_ops *ulp_ops;
+
+		mutex_lock(&cnic_lock);
+		ulp_ops = cnic_ulp_tbl_prot(i);
+		if (!ulp_ops || !ulp_ops->cnic_exit) {
+			mutex_unlock(&cnic_lock);
+			continue;
+		}
+		ulp_get(ulp_ops);
+		mutex_unlock(&cnic_lock);
+
+		if (test_and_clear_bit(ULP_F_INIT, &cp->ulp_flags[i]))
+			ulp_ops->cnic_exit(dev);
+
+		ulp_put(ulp_ops);
+	}
+}
+
+static int cnic_cm_offload_pg(struct cnic_sock *csk)
+{
+	struct cnic_dev *dev = csk->dev;
+	struct l4_kwq_offload_pg *l4kwqe;
+	struct kwqe *wqes[1];
+
+	l4kwqe = (struct l4_kwq_offload_pg *) &csk->kwqe1;
+	memset(l4kwqe, 0, sizeof(*l4kwqe));
+	wqes[0] = (struct kwqe *) l4kwqe;
+
+	l4kwqe->op_code = L4_KWQE_OPCODE_VALUE_OFFLOAD_PG;
+	l4kwqe->flags =
+		L4_LAYER_CODE << L4_KWQ_OFFLOAD_PG_LAYER_CODE_SHIFT;
+	l4kwqe->l2hdr_nbytes = ETH_HLEN;
+
+	l4kwqe->da0 = csk->ha[0];
+	l4kwqe->da1 = csk->ha[1];
+	l4kwqe->da2 = csk->ha[2];
+	l4kwqe->da3 = csk->ha[3];
+	l4kwqe->da4 = csk->ha[4];
+	l4kwqe->da5 = csk->ha[5];
+
+	l4kwqe->sa0 = dev->mac_addr[0];
+	l4kwqe->sa1 = dev->mac_addr[1];
+	l4kwqe->sa2 = dev->mac_addr[2];
+	l4kwqe->sa3 = dev->mac_addr[3];
+	l4kwqe->sa4 = dev->mac_addr[4];
+	l4kwqe->sa5 = dev->mac_addr[5];
+
+	l4kwqe->etype = ETH_P_IP;
+	l4kwqe->ipid_start = DEF_IPID_START;
+	l4kwqe->host_opaque = csk->l5_cid;
+
+	if (csk->vlan_id) {
+		l4kwqe->pg_flags |= L4_KWQ_OFFLOAD_PG_VLAN_TAGGING;
+		l4kwqe->vlan_tag = csk->vlan_id;
+		l4kwqe->l2hdr_nbytes += 4;
+	}
+
+	return dev->submit_kwqes(dev, wqes, 1);
+}
+
+static int cnic_cm_update_pg(struct cnic_sock *csk)
+{
+	struct cnic_dev *dev = csk->dev;
+	struct l4_kwq_update_pg *l4kwqe;
+	struct kwqe *wqes[1];
+
+	l4kwqe = (struct l4_kwq_update_pg *) &csk->kwqe1;
+	memset(l4kwqe, 0, sizeof(*l4kwqe));
+	wqes[0] = (struct kwqe *) l4kwqe;
+
+	l4kwqe->opcode = L4_KWQE_OPCODE_VALUE_UPDATE_PG;
+	l4kwqe->flags =
+		L4_LAYER_CODE << L4_KWQ_UPDATE_PG_LAYER_CODE_SHIFT;
+	l4kwqe->pg_cid = csk->pg_cid;
+
+	l4kwqe->da0 = csk->ha[0];
+	l4kwqe->da1 = csk->ha[1];
+	l4kwqe->da2 = csk->ha[2];
+	l4kwqe->da3 = csk->ha[3];
+	l4kwqe->da4 = csk->ha[4];
+	l4kwqe->da5 = csk->ha[5];
+
+	l4kwqe->pg_host_opaque = csk->l5_cid;
+	l4kwqe->pg_valids = L4_KWQ_UPDATE_PG_VALIDS_DA;
+
+	return dev->submit_kwqes(dev, wqes, 1);
+}
+
+static int cnic_cm_upload_pg(struct cnic_sock *csk)
+{
+	struct cnic_dev *dev = csk->dev;
+	struct l4_kwq_upload *l4kwqe;
+	struct kwqe *wqes[1];
+
+	l4kwqe = (struct l4_kwq_upload *) &csk->kwqe1;
+	memset(l4kwqe, 0, sizeof(*l4kwqe));
+	wqes[0] = (struct kwqe *) l4kwqe;
+
+	l4kwqe->opcode = L4_KWQE_OPCODE_VALUE_UPLOAD_PG;
+	l4kwqe->flags =
+		L4_LAYER_CODE << L4_KWQ_UPLOAD_LAYER_CODE_SHIFT;
+	l4kwqe->cid = csk->pg_cid;
+
+	return dev->submit_kwqes(dev, wqes, 1);
+}
+
+static int cnic_cm_conn_req(struct cnic_sock *csk)
+{
+	struct cnic_dev *dev = csk->dev;
+	struct l4_kwq_connect_req1 *l4kwqe1;
+	struct l4_kwq_connect_req2 *l4kwqe2;
+	struct l4_kwq_connect_req3 *l4kwqe3;
+	struct kwqe *wqes[3];
+	u8 tcp_flags = 0;
+	int num_wqes = 2;
+
+	l4kwqe1 = (struct l4_kwq_connect_req1 *) &csk->kwqe1;
+	l4kwqe2 = (struct l4_kwq_connect_req2 *) &csk->kwqe2;
+	l4kwqe3 = (struct l4_kwq_connect_req3 *) &csk->kwqe3;
+	memset(l4kwqe1, 0, sizeof(*l4kwqe1));
+	memset(l4kwqe2, 0, sizeof(*l4kwqe2));
+	memset(l4kwqe3, 0, sizeof(*l4kwqe3));
+
+	l4kwqe3->op_code = L4_KWQE_OPCODE_VALUE_CONNECT3;
+	l4kwqe3->flags =
+		L4_LAYER_CODE << L4_KWQ_CONNECT_REQ3_LAYER_CODE_SHIFT;
+	l4kwqe3->ka_timeout = csk->ka_timeout;
+	l4kwqe3->ka_interval = csk->ka_interval;
+	l4kwqe3->ka_max_probe_count = csk->ka_max_probe_count;
+	l4kwqe3->tos = csk->tos;
+	l4kwqe3->ttl = csk->ttl;
+	l4kwqe3->snd_seq_scale = csk->snd_seq_scale;
+	l4kwqe3->pmtu = csk->mtu;
+	l4kwqe3->rcv_buf = csk->rcv_buf;
+	l4kwqe3->snd_buf = csk->snd_buf;
+	l4kwqe3->seed = csk->seed;
+
+	wqes[0] = (struct kwqe *) l4kwqe1;
+	if (test_bit(SK_F_IPV6, &csk->flags)) {
+		wqes[1] = (struct kwqe *) l4kwqe2;
+		wqes[2] = (struct kwqe *) l4kwqe3;
+		num_wqes = 3;
+
+		l4kwqe1->conn_flags = L4_KWQ_CONNECT_REQ1_IP_V6;
+		l4kwqe2->op_code = L4_KWQE_OPCODE_VALUE_CONNECT2;
+		l4kwqe2->flags =
+			L4_KWQ_CONNECT_REQ2_LINKED_WITH_NEXT |
+			L4_LAYER_CODE << L4_KWQ_CONNECT_REQ2_LAYER_CODE_SHIFT;
+		l4kwqe2->src_ip_v6_2 = be32_to_cpu(csk->src_ip[1]);
+		l4kwqe2->src_ip_v6_3 = be32_to_cpu(csk->src_ip[2]);
+		l4kwqe2->src_ip_v6_4 = be32_to_cpu(csk->src_ip[3]);
+		l4kwqe2->dst_ip_v6_2 = be32_to_cpu(csk->dst_ip[1]);
+		l4kwqe2->dst_ip_v6_3 = be32_to_cpu(csk->dst_ip[2]);
+		l4kwqe2->dst_ip_v6_4 = be32_to_cpu(csk->dst_ip[3]);
+		l4kwqe3->mss = l4kwqe3->pmtu - sizeof(struct ipv6hdr) -
+			       sizeof(struct tcphdr);
+	} else {
+		wqes[1] = (struct kwqe *) l4kwqe3;
+		l4kwqe3->mss = l4kwqe3->pmtu - sizeof(struct iphdr) -
+			       sizeof(struct tcphdr);
+	}
+
+	l4kwqe1->op_code = L4_KWQE_OPCODE_VALUE_CONNECT1;
+	l4kwqe1->flags =
+		(L4_LAYER_CODE << L4_KWQ_CONNECT_REQ1_LAYER_CODE_SHIFT) |
+		 L4_KWQ_CONNECT_REQ3_LINKED_WITH_NEXT;
+	l4kwqe1->cid = csk->cid;
+	l4kwqe1->pg_cid = csk->pg_cid;
+	l4kwqe1->src_ip = be32_to_cpu(csk->src_ip[0]);
+	l4kwqe1->dst_ip = be32_to_cpu(csk->dst_ip[0]);
+	l4kwqe1->src_port = be16_to_cpu(csk->src_port);
+	l4kwqe1->dst_port = be16_to_cpu(csk->dst_port);
+	if (csk->tcp_flags & SK_TCP_NO_DELAY_ACK)
+		tcp_flags |= L4_KWQ_CONNECT_REQ1_NO_DELAY_ACK;
+	if (csk->tcp_flags & SK_TCP_KEEP_ALIVE)
+		tcp_flags |= L4_KWQ_CONNECT_REQ1_KEEP_ALIVE;
+	if (csk->tcp_flags & SK_TCP_NAGLE)
+		tcp_flags |= L4_KWQ_CONNECT_REQ1_NAGLE_ENABLE;
+	if (csk->tcp_flags & SK_TCP_TIMESTAMP)
+		tcp_flags |= L4_KWQ_CONNECT_REQ1_TIME_STAMP;
+	if (csk->tcp_flags & SK_TCP_SACK)
+		tcp_flags |= L4_KWQ_CONNECT_REQ1_SACK;
+	if (csk->tcp_flags & SK_TCP_SEG_SCALING)
+		tcp_flags |= L4_KWQ_CONNECT_REQ1_SEG_SCALING;
+
+	l4kwqe1->tcp_flags = tcp_flags;
+
+	return dev->submit_kwqes(dev, wqes, num_wqes);
+}
+
+static int cnic_cm_close_req(struct cnic_sock *csk)
+{
+	struct cnic_dev *dev = csk->dev;
+	struct l4_kwq_close_req *l4kwqe;
+	struct kwqe *wqes[1];
+
+	l4kwqe = (struct l4_kwq_close_req *) &csk->kwqe2;
+	memset(l4kwqe, 0, sizeof(*l4kwqe));
+	wqes[0] = (struct kwqe *) l4kwqe;
+
+	l4kwqe->op_code = L4_KWQE_OPCODE_VALUE_CLOSE;
+	l4kwqe->flags = L4_LAYER_CODE << L4_KWQ_CLOSE_REQ_LAYER_CODE_SHIFT;
+	l4kwqe->cid = csk->cid;
+
+	return dev->submit_kwqes(dev, wqes, 1);
+}
+
+static int cnic_cm_abort_req(struct cnic_sock *csk)
+{
+	struct cnic_dev *dev = csk->dev;
+	struct l4_kwq_reset_req *l4kwqe;
+	struct kwqe *wqes[1];
+
+	l4kwqe = (struct l4_kwq_reset_req *) &csk->kwqe2;
+	memset(l4kwqe, 0, sizeof(*l4kwqe));
+	wqes[0] = (struct kwqe *) l4kwqe;
+
+	l4kwqe->op_code = L4_KWQE_OPCODE_VALUE_RESET;
+	l4kwqe->flags = L4_LAYER_CODE << L4_KWQ_RESET_REQ_LAYER_CODE_SHIFT;
+	l4kwqe->cid = csk->cid;
+
+	return dev->submit_kwqes(dev, wqes, 1);
+}
+
+static int cnic_cm_create(struct cnic_dev *dev, int ulp_type, u32 cid,
+			  u32 l5_cid, struct cnic_sock **csk, void *context)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_sock *csk1;
+
+	if (l5_cid >= MAX_CM_SK_TBL_SZ)
+		return -EINVAL;
+
+	if (cp->ctx_tbl) {
+		struct cnic_context *ctx = &cp->ctx_tbl[l5_cid];
+
+		if (test_bit(CTX_FL_OFFLD_START, &ctx->ctx_flags))
+			return -EAGAIN;
+	}
+
+	csk1 = &cp->csk_tbl[l5_cid];
+	if (atomic_read(&csk1->ref_count))
+		return -EAGAIN;
+
+	if (test_and_set_bit(SK_F_INUSE, &csk1->flags))
+		return -EBUSY;
+
+	csk1->dev = dev;
+	csk1->cid = cid;
+	csk1->l5_cid = l5_cid;
+	csk1->ulp_type = ulp_type;
+	csk1->context = context;
+
+	csk1->ka_timeout = DEF_KA_TIMEOUT;
+	csk1->ka_interval = DEF_KA_INTERVAL;
+	csk1->ka_max_probe_count = DEF_KA_MAX_PROBE_COUNT;
+	csk1->tos = DEF_TOS;
+	csk1->ttl = DEF_TTL;
+	csk1->snd_seq_scale = DEF_SND_SEQ_SCALE;
+	csk1->rcv_buf = DEF_RCV_BUF;
+	csk1->snd_buf = DEF_SND_BUF;
+	csk1->seed = DEF_SEED;
+
+#if (CNIC_ISCSI_OOO_SUPPORT)
+	cnic_conn_ooo_init(cp, l5_cid);
+#endif
+	*csk = csk1;
+	return 0;
+}
+
+static void cnic_cm_cleanup(struct cnic_sock *csk)
+{
+	if (csk->src_port) {
+		struct cnic_dev *dev = csk->dev;
+		struct cnic_local *cp = dev->cnic_priv;
+
+		cnic_free_id(&cp->csk_port_tbl, be16_to_cpu(csk->src_port));
+		csk->src_port = 0;
+	}
+}
+
+static void cnic_close_conn(struct cnic_sock *csk)
+{
+	if (test_bit(SK_F_PG_OFFLD_COMPLETE, &csk->flags)) {
+		cnic_cm_upload_pg(csk);
+		clear_bit(SK_F_PG_OFFLD_COMPLETE, &csk->flags);
+	}
+	cnic_cm_cleanup(csk);
+}
+
+static int cnic_cm_destroy(struct cnic_sock *csk)
+{
+	if (!cnic_in_use(csk))
+		return -EINVAL;
+
+#if (CNIC_ISCSI_OOO_SUPPORT)
+	cnic_flush_ooo(csk->dev, csk->l5_cid);
+#endif
+	csk_hold(csk);
+	clear_bit(SK_F_INUSE, &csk->flags);
+	smp_mb__after_clear_bit();
+	while (atomic_read(&csk->ref_count) != 1)
+		msleep(1);
+	cnic_cm_cleanup(csk);
+
+	csk->flags = 0;
+	csk_put(csk);
+	return 0;
+}
+
+static inline u16 cnic_get_vlan(struct net_device *dev,
+				struct net_device **vlan_dev)
+{
+	if (dev->priv_flags & IFF_802_1Q_VLAN) {
+#ifdef VLAN_DEV_INFO
+		*vlan_dev = VLAN_DEV_INFO(dev)->real_dev;
+		return VLAN_DEV_INFO(dev)->vlan_id;
+#else
+#ifdef VLAN_TX_COOKIE_MAGIC
+		*vlan_dev = vlan_dev_info(dev)->real_dev;
+		return vlan_dev_info(dev)->vlan_id;
+#else
+		*vlan_dev = vlan_dev_real_dev(dev);
+		return vlan_dev_vlan_id(dev);
+#endif
+#endif
+	}
+	*vlan_dev = dev;
+	return 0;
+}
+
+static int cnic_get_v4_route(struct sockaddr_in *dst_addr,
+			     struct dst_entry **dst)
+{
+#if defined(CONFIG_INET)
+#if (LINUX_VERSION_CODE >= 0x030000)
+	struct rtable *rt;
+
+	rt = ip_route_output(&init_net, dst_addr->sin_addr.s_addr, 0, 0, 0);
+	if (!IS_ERR(rt)) {
+		*dst = &rt->dst;
+		return 0;
+	}
+	return PTR_ERR(rt);
+#else
+	struct flowi fl;
+	int err;
+	struct rtable *rt;
+
+	memset(&fl, 0, sizeof(fl));
+	fl.nl_u.ip4_u.daddr = dst_addr->sin_addr.s_addr;
+
+#if (LINUX_VERSION_CODE >= 0x020619)
+	err = ip_route_output_key(&init_net, &rt, &fl);
+#else
+	err = ip_route_output_key(&rt, &fl);
+#endif
+	if (!err)
+#if (LINUX_VERSION_CODE >= 0x020624)
+		*dst = &rt->dst;
+#else
+		*dst = &rt->u.dst;
+#endif
+	return err;
+#endif
+#else
+	return -ENETUNREACH;
+#endif
+}
+
+#if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)
+#if (LINUX_VERSION_CODE >= 0x030000)
+static struct dst_entry *cnic_ip6_rte_output(struct sock *sk, struct flowi6 *fl)
+{
+	struct dst_entry *(*fn)(struct net *, const struct sock *,
+				struct flowi6 *);
+	struct dst_entry *dst = NULL;
+
+	fn = symbol_get(ip6_route_output);
+	if (fn) {
+		dst = (*fn)(&init_net, sk, fl);
+		symbol_put(ip6_route_output);
+	}
+	return dst;
+}
+
+#else
+
+static struct dst_entry *cnic_ip6_rte_output(struct sock *sk, struct flowi *fl)
+{
+#if (LINUX_VERSION_CODE >= 0x02061a)
+	struct dst_entry *(*fn)(struct net *, struct sock *, struct flowi *);
+#else
+	struct dst_entry *(*fn)(struct sock *, struct flowi *);
+#endif
+	struct dst_entry *dst = NULL;
+
+	fn = symbol_get(ip6_route_output);
+	if (fn) {
+#if (LINUX_VERSION_CODE >= 0x02061a)
+		dst = (*fn)(&init_net, sk, fl);
+#else
+		dst = (*fn)(sk, fl);
+#endif
+		symbol_put(ip6_route_output);
+	}
+	return dst;
+}
+#endif
+
+static int cnic_ipv6_addr_type(const struct in6_addr *addr)
+{
+	int (*fn)(const struct in6_addr *addr);
+	int type = 0;
+
+	fn = symbol_get(__ipv6_addr_type);
+	if (fn) {
+		type = fn(addr) & 0xffff;
+		symbol_put(__ipv6_addr_type);
+	}
+	return type;
+}
+
+#endif
+
+static int cnic_get_v6_route(struct sockaddr_in6 *dst_addr,
+			     struct dst_entry **dst)
+{
+#if defined(CONFIG_IPV6) || (defined(CONFIG_IPV6_MODULE) && defined(MODULE))
+#if (LINUX_VERSION_CODE >= 0x030000)
+	struct flowi6 fl6;
+
+	memset(&fl6, 0, sizeof(fl6));
+	fl6.daddr = dst_addr->sin6_addr;
+	if (cnic_ipv6_addr_type(&fl6.daddr) & IPV6_ADDR_LINKLOCAL)
+		fl6.flowi6_oif = dst_addr->sin6_scope_id;
+
+	*dst = cnic_ip6_rte_output(NULL, &fl6);
+	if (*dst == NULL)
+		return -ENETUNREACH;
+	if ((*dst)->error) {
+		dst_release(*dst);
+		*dst = NULL;
+		return -ENETUNREACH;
+	} else
+		return 0;
+#else
+	struct flowi fl;
+
+	memset(&fl, 0, sizeof(fl));
+	ipv6_addr_copy(&fl.fl6_dst, &dst_addr->sin6_addr);
+	if (cnic_ipv6_addr_type(&fl.fl6_dst) & IPV6_ADDR_LINKLOCAL)
+		fl.oif = dst_addr->sin6_scope_id;
+
+	*dst = cnic_ip6_rte_output(NULL, &fl);
+	if (*dst)
+		return 0;
+#endif
+#endif
+
+	return -ENETUNREACH;
+}
+
+static struct cnic_dev *cnic_cm_select_dev(struct sockaddr_in *dst_addr,
+					   int ulp_type)
+{
+	struct cnic_dev *dev = NULL;
+	struct dst_entry *dst;
+	struct net_device *netdev = NULL;
+	int err = -ENETUNREACH;
+
+	if (dst_addr->sin_family == AF_INET)
+		err = cnic_get_v4_route(dst_addr, &dst);
+	else if (dst_addr->sin_family == AF_INET6) {
+		struct sockaddr_in6 *dst_addr6 =
+			(struct sockaddr_in6 *) dst_addr;
+
+		err = cnic_get_v6_route(dst_addr6, &dst);
+	} else
+		return NULL;
+
+	if (err)
+		return NULL;
+
+	if (!dst->dev)
+		goto done;
+
+	cnic_get_vlan(dst->dev, &netdev);
+
+	dev = cnic_from_netdev(netdev);
+
+done:
+	dst_release(dst);
+	if (dev)
+		cnic_put(dev);
+	return dev;
+}
+
+static int cnic_resolve_addr(struct cnic_sock *csk, struct cnic_sockaddr *saddr)
+{
+	struct cnic_dev *dev = csk->dev;
+	struct cnic_local *cp = dev->cnic_priv;
+
+	return cnic_send_nlmsg(cp, ISCSI_KEVENT_PATH_REQ, csk);
+}
+
+static int cnic_get_route(struct cnic_sock *csk, struct cnic_sockaddr *saddr)
+{
+	struct cnic_dev *dev = csk->dev;
+	struct cnic_local *cp = dev->cnic_priv;
+	int is_v6, rc = 0;
+	struct dst_entry *dst = NULL;
+	struct net_device *realdev;
+	__be16 local_port;
+	u32 port_id;
+
+	if (saddr->local.v6.sin6_family == AF_INET6 &&
+	    saddr->remote.v6.sin6_family == AF_INET6)
+		is_v6 = 1;
+	else if (saddr->local.v4.sin_family == AF_INET &&
+		 saddr->remote.v4.sin_family == AF_INET)
+		is_v6 = 0;
+	else
+		return -EINVAL;
+
+	clear_bit(SK_F_IPV6, &csk->flags);
+
+	if (is_v6) {
+		set_bit(SK_F_IPV6, &csk->flags);
+		cnic_get_v6_route(&saddr->remote.v6, &dst);
+
+		memcpy(&csk->dst_ip[0], &saddr->remote.v6.sin6_addr,
+		       sizeof(struct in6_addr));
+		csk->dst_port = saddr->remote.v6.sin6_port;
+		local_port = saddr->local.v6.sin6_port;
+
+	} else {
+		cnic_get_v4_route(&saddr->remote.v4, &dst);
+
+		csk->dst_ip[0] = saddr->remote.v4.sin_addr.s_addr;
+		csk->dst_port = saddr->remote.v4.sin_port;
+		local_port = saddr->local.v4.sin_port;
+	}
+
+	csk->vlan_id = 0;
+	csk->mtu = dev->netdev->mtu;
+	if (dst && dst->dev) {
+		u16 vlan = cnic_get_vlan(dst->dev, &realdev);
+		if (realdev == dev->netdev) {
+			csk->vlan_id = vlan;
+			csk->mtu = dst_mtu(dst);
+		}
+	}
+
+	port_id = be16_to_cpu(local_port);
+	if (port_id >= CNIC_LOCAL_PORT_MIN &&
+	    port_id < CNIC_LOCAL_PORT_MAX) {
+		if (cnic_alloc_id(&cp->csk_port_tbl, port_id))
+			port_id = 0;
+	} else
+		port_id = 0;
+
+	if (!port_id) {
+		port_id = cnic_alloc_new_id(&cp->csk_port_tbl);
+		if (port_id == -1) {
+			rc = -ENOMEM;
+			goto err_out;
+		}
+		local_port = cpu_to_be16(port_id);
+	}
+	csk->src_port = local_port;
+
+err_out:
+	dst_release(dst);
+	return rc;
+}
+
+static void cnic_init_csk_state(struct cnic_sock *csk)
+{
+	csk->state = 0;
+	clear_bit(SK_F_OFFLD_SCHED, &csk->flags);
+	clear_bit(SK_F_CLOSING, &csk->flags);
+}
+
+static int cnic_cm_connect(struct cnic_sock *csk, struct cnic_sockaddr *saddr)
+{
+	struct cnic_local *cp = csk->dev->cnic_priv;
+	int err = 0;
+
+	if (cp->ethdev->drv_state & CNIC_DRV_STATE_NO_ISCSI)
+		return -EOPNOTSUPP;
+
+	if (!cnic_in_use(csk))
+		return -EINVAL;
+
+	if (test_and_set_bit(SK_F_CONNECT_START, &csk->flags))
+		return -EINVAL;
+
+	cnic_init_csk_state(csk);
+
+	err = cnic_get_route(csk, saddr);
+	if (err)
+		goto err_out;
+
+	err = cnic_resolve_addr(csk, saddr);
+	if (!err)
+		return 0;
+
+err_out:
+	clear_bit(SK_F_CONNECT_START, &csk->flags);
+	return err;
+}
+
+static int cnic_cm_abort(struct cnic_sock *csk)
+{
+	struct cnic_local *cp = csk->dev->cnic_priv;
+	u32 opcode = L4_KCQE_OPCODE_VALUE_RESET_COMP;
+
+	if (!cnic_in_use(csk))
+		return -EINVAL;
+
+	if (cnic_abort_prep(csk))
+		return cnic_cm_abort_req(csk);
+
+	/* Getting here means that we haven't started connect, or
+	 * connect was not successful.
+	 */
+
+	cp->close_conn(csk, opcode);
+	if (csk->state != opcode)
+		return -EALREADY;
+
+	return 0;
+}
+
+static int cnic_cm_close(struct cnic_sock *csk)
+{
+	if (!cnic_in_use(csk))
+		return -EINVAL;
+
+	if (cnic_close_prep(csk)) {
+		csk->state = L4_KCQE_OPCODE_VALUE_CLOSE_COMP;
+		return cnic_cm_close_req(csk);
+	} else {
+		return -EALREADY;
+	}
+	return 0;
+}
+
+static void cnic_cm_upcall(struct cnic_local *cp, struct cnic_sock *csk,
+			   u8 opcode)
+{
+	struct cnic_ulp_ops *ulp_ops;
+	int ulp_type = csk->ulp_type;
+
+	rcu_read_lock();
+	ulp_ops = rcu_dereference(cp->ulp_ops[ulp_type]);
+	if (ulp_ops) {
+		if (opcode == L4_KCQE_OPCODE_VALUE_CONNECT_COMPLETE)
+			ulp_ops->cm_connect_complete(csk);
+		else if (opcode == L4_KCQE_OPCODE_VALUE_CLOSE_COMP)
+			ulp_ops->cm_close_complete(csk);
+		else if (opcode == L4_KCQE_OPCODE_VALUE_RESET_RECEIVED)
+			ulp_ops->cm_remote_abort(csk);
+		else if (opcode == L4_KCQE_OPCODE_VALUE_RESET_COMP)
+			ulp_ops->cm_abort_complete(csk);
+		else if (opcode == L4_KCQE_OPCODE_VALUE_CLOSE_RECEIVED)
+			ulp_ops->cm_remote_close(csk);
+	}
+	rcu_read_unlock();
+}
+
+static int cnic_cm_set_pg(struct cnic_sock *csk)
+{
+	if (cnic_offld_prep(csk)) {
+		if (test_bit(SK_F_PG_OFFLD_COMPLETE, &csk->flags))
+			cnic_cm_update_pg(csk);
+		else
+			cnic_cm_offload_pg(csk);
+	}
+	return 0;
+}
+
+static void cnic_cm_process_offld_pg(struct cnic_dev *dev, struct l4_kcq *kcqe)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	u32 l5_cid = kcqe->pg_host_opaque;
+	u8 opcode = kcqe->op_code;
+	struct cnic_sock *csk = &cp->csk_tbl[l5_cid];
+
+	csk_hold(csk);
+	if (!cnic_in_use(csk))
+		goto done;
+
+	if (opcode == L4_KCQE_OPCODE_VALUE_UPDATE_PG) {
+		clear_bit(SK_F_OFFLD_SCHED, &csk->flags);
+		goto done;
+	}
+	/* Possible PG kcqe status:  SUCCESS, OFFLOADED_PG, or CTX_ALLOC_FAIL */
+	if (kcqe->status == L4_KCQE_COMPLETION_STATUS_CTX_ALLOC_FAIL) {
+		clear_bit(SK_F_OFFLD_SCHED, &csk->flags);
+		cnic_cm_upcall(cp, csk,
+			       L4_KCQE_OPCODE_VALUE_CONNECT_COMPLETE);
+		goto done;
+	}
+
+	csk->pg_cid = kcqe->pg_cid;
+	set_bit(SK_F_PG_OFFLD_COMPLETE, &csk->flags);
+	cnic_cm_conn_req(csk);
+
+done:
+	csk_put(csk);
+}
+
+static void cnic_process_fcoe_term_conn(struct cnic_dev *dev, struct kcqe *kcqe)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct fcoe_kcqe *fc_kcqe = (struct fcoe_kcqe *) kcqe;
+	u32 l5_cid = fc_kcqe->fcoe_conn_id + BNX2X_FCOE_L5_CID_BASE;
+	struct cnic_context *ctx = &cp->ctx_tbl[l5_cid];
+
+	ctx->timestamp = jiffies;
+	ctx->wait_cond = 1;
+	wake_up(&ctx->waitq);
+}
+
+static void cnic_cm_process_kcqe(struct cnic_dev *dev, struct kcqe *kcqe)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct l4_kcq *l4kcqe = (struct l4_kcq *) kcqe;
+	u8 opcode = l4kcqe->op_code;
+	u32 l5_cid;
+	struct cnic_sock *csk;
+
+	switch (opcode) {
+	case FCOE_RAMROD_CMD_ID_TERMINATE_CONN:
+		cnic_process_fcoe_term_conn(dev, kcqe);
+		return;
+	case L4_KCQE_OPCODE_VALUE_OFFLOAD_PG:
+	case L4_KCQE_OPCODE_VALUE_UPDATE_PG:
+		cnic_cm_process_offld_pg(dev, l4kcqe);
+		return;
+#if (CNIC_ISCSI_OOO_SUPPORT)
+	case L4_KCQE_OPCODE_VALUE_OOO_FLUSH:
+		cnic_flush_ooo(dev, l4kcqe->cid);
+		return;
+
+	case L4_KCQE_OPCODE_VALUE_OOO_EVENT_NOTIFICATION:
+		set_bit(IOOO_START_HANDLER, &cp->iooo_mgmr.flags);
+		return;
+#endif
+	}
+
+	l5_cid = l4kcqe->conn_id;
+	if (opcode & 0x80)
+		l5_cid = l4kcqe->cid;
+	if (l5_cid >= MAX_CM_SK_TBL_SZ)
+		return;
+
+	csk = &cp->csk_tbl[l5_cid];
+	csk_hold(csk);
+
+	if (!cnic_in_use(csk)) {
+		csk_put(csk);
+		return;
+	}
+
+	switch (opcode) {
+	case L5CM_RAMROD_CMD_ID_TCP_CONNECT:
+		if (l4kcqe->status != 0) {
+			clear_bit(SK_F_OFFLD_SCHED, &csk->flags);
+			cnic_cm_upcall(cp, csk,
+				       L4_KCQE_OPCODE_VALUE_CONNECT_COMPLETE);
+		}
+		break;
+	case L4_KCQE_OPCODE_VALUE_CONNECT_COMPLETE:
+		if (l4kcqe->status == 0)
+			set_bit(SK_F_OFFLD_COMPLETE, &csk->flags);
+		else if (l4kcqe->status ==
+                         L4_KCQE_COMPLETION_STATUS_PARITY_ERROR)
+			set_bit(SK_F_HW_ERR, &csk->flags);
+
+		smp_mb__before_clear_bit();
+		clear_bit(SK_F_OFFLD_SCHED, &csk->flags);
+		cnic_cm_upcall(cp, csk, opcode);
+		break;
+
+	case L4_KCQE_OPCODE_VALUE_RESET_RECEIVED:
+	case L4_KCQE_OPCODE_VALUE_CLOSE_COMP:
+	case L4_KCQE_OPCODE_VALUE_RESET_COMP:
+	case L5CM_RAMROD_CMD_ID_SEARCHER_DELETE:
+	case L5CM_RAMROD_CMD_ID_TERMINATE_OFFLOAD:
+		if (l4kcqe->status == L4_KCQE_COMPLETION_STATUS_PARITY_ERROR)
+			set_bit(SK_F_HW_ERR, &csk->flags);
+
+		cp->close_conn(csk, opcode);
+		break;
+
+	case L4_KCQE_OPCODE_VALUE_CLOSE_RECEIVED:
+		/* after we already sent CLOSE_REQ */
+		if (test_bit(CNIC_F_BNX2X_CLASS, &dev->flags) &&
+		    !test_bit(SK_F_OFFLD_COMPLETE, &csk->flags) &&
+		    csk->state == L4_KCQE_OPCODE_VALUE_CLOSE_COMP)
+			cp->close_conn(csk, L4_KCQE_OPCODE_VALUE_RESET_COMP);
+		else
+			cnic_cm_upcall(cp, csk, opcode);
+		break;
+	}
+	csk_put(csk);
+}
+
+static void cnic_cm_indicate_kcqe(void *data, struct kcqe *kcqe[], u32 num)
+{
+	struct cnic_dev *dev = data;
+	int i;
+
+	for (i = 0; i < num; i++)
+		cnic_cm_process_kcqe(dev, kcqe[i]);
+}
+
+static struct cnic_ulp_ops cm_ulp_ops = {
+	.indicate_kcqes		= cnic_cm_indicate_kcqe,
+};
+
+static void cnic_cm_free_mem(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+
+	kfree(cp->csk_tbl);
+	cp->csk_tbl = NULL;
+	cnic_free_id_tbl(&cp->csk_port_tbl);
+}
+
+static int cnic_cm_alloc_mem(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	u32 port_id;
+
+	cp->csk_tbl = kzalloc(sizeof(struct cnic_sock) * MAX_CM_SK_TBL_SZ,
+			      GFP_KERNEL);
+	if (!cp->csk_tbl)
+		return -ENOMEM;
+
+	get_random_bytes(&port_id, sizeof(port_id));
+	port_id %= CNIC_LOCAL_PORT_RANGE;
+	if (cnic_init_id_tbl(&cp->csk_port_tbl, CNIC_LOCAL_PORT_RANGE,
+			     CNIC_LOCAL_PORT_MIN, port_id)) {
+		cnic_cm_free_mem(dev);
+		return -ENOMEM;
+	}
+	return 0;
+}
+
+static int cnic_ready_to_close(struct cnic_sock *csk, u32 opcode)
+{
+	if (test_and_clear_bit(SK_F_OFFLD_COMPLETE, &csk->flags)) {
+		/* Unsolicited RESET_COMP or RESET_RECEIVED */
+		opcode = L4_KCQE_OPCODE_VALUE_RESET_RECEIVED;
+		csk->state = opcode;
+	}
+
+	/* 1. If event opcode matches the expected event in csk->state
+	 * 2. If the expected event is CLOSE_COMP or RESET_COMP, we accept any
+	 *    event
+	 * 3. If the expected event is 0, meaning the connection was never
+	 *    never established, we accept the opcode from cm_abort.
+	 */
+	if (opcode == csk->state || csk->state == 0 ||
+	    csk->state == L4_KCQE_OPCODE_VALUE_CLOSE_COMP ||
+	    csk->state == L4_KCQE_OPCODE_VALUE_RESET_COMP) {
+		if (!test_and_set_bit(SK_F_CLOSING, &csk->flags)) {
+			if (csk->state == 0)
+				csk->state = opcode;
+			return 1;
+		}
+	}
+	return 0;
+}
+
+static void cnic_close_bnx2_conn(struct cnic_sock *csk, u32 opcode)
+{
+	struct cnic_dev *dev = csk->dev;
+	struct cnic_local *cp = dev->cnic_priv;
+
+	if (opcode == L4_KCQE_OPCODE_VALUE_RESET_RECEIVED) {
+		cnic_cm_upcall(cp, csk, opcode);
+		return;
+	}
+
+	clear_bit(SK_F_CONNECT_START, &csk->flags);
+	cnic_close_conn(csk);
+	csk->state = opcode;
+	cnic_cm_upcall(cp, csk, opcode);
+}
+
+static void cnic_cm_stop_bnx2_hw(struct cnic_dev *dev)
+{
+}
+
+static int cnic_cm_init_bnx2_hw(struct cnic_dev *dev)
+{
+	u32 seed;
+
+	get_random_bytes(&seed, 4);
+	cnic_ctx_wr(dev, 45, 0, seed);
+	return 0;
+}
+
+static void cnic_close_bnx2x_conn(struct cnic_sock *csk, u32 opcode)
+{
+	struct cnic_dev *dev = csk->dev;
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_context *ctx = &cp->ctx_tbl[csk->l5_cid];
+	union l5cm_specific_data l5_data;
+	u32 cmd = 0;
+	int close_complete = 0;
+
+	switch (opcode) {
+	case L4_KCQE_OPCODE_VALUE_RESET_RECEIVED:
+	case L4_KCQE_OPCODE_VALUE_CLOSE_COMP:
+	case L4_KCQE_OPCODE_VALUE_RESET_COMP:
+		if (cnic_ready_to_close(csk, opcode)) {
+			if (test_bit(SK_F_HW_ERR, &csk->flags))
+				close_complete = 1;
+			else if (test_bit(SK_F_PG_OFFLD_COMPLETE, &csk->flags))
+				cmd = L5CM_RAMROD_CMD_ID_SEARCHER_DELETE;
+			else
+				close_complete = 1;
+		}
+		break;
+	case L5CM_RAMROD_CMD_ID_SEARCHER_DELETE:
+		cmd = L5CM_RAMROD_CMD_ID_TERMINATE_OFFLOAD;
+		break;
+	case L5CM_RAMROD_CMD_ID_TERMINATE_OFFLOAD:
+		close_complete = 1;
+		break;
+	}
+	if (cmd) {
+		memset(&l5_data, 0, sizeof(l5_data));
+
+		cnic_submit_kwqe_16(dev, cmd, csk->cid, ISCSI_CONNECTION_TYPE,
+				    &l5_data);
+	} else if (close_complete) {
+		ctx->timestamp = jiffies;
+		cnic_close_conn(csk);
+		cnic_cm_upcall(cp, csk, csk->state);
+	}
+}
+
+static void cnic_cm_stop_bnx2x_hw(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+
+	if (!cp->ctx_tbl)
+		return;
+
+	if (!netif_running(dev->netdev))
+		return;
+
+	cnic_bnx2x_delete_wait(dev, 0);
+
+	cancel_delayed_work(&cp->delete_task);
+	flush_workqueue(cnic_wq);
+
+	if (atomic_read(&cp->iscsi_conn) != 0)
+		netdev_warn(dev->netdev, "%d iSCSI connections not destroyed\n",
+			    atomic_read(&cp->iscsi_conn));
+}
+
+static int cnic_cm_init_bnx2x_hw(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	u32 pfid = cp->pfid;
+	u32 port = CNIC_PORT(cp);
+
+	cnic_init_bnx2x_mac(dev);
+	cnic_bnx2x_set_tcp_timestamp(dev, 1);
+
+	CNIC_WR16(dev, BAR_XSTRORM_INTMEM +
+		  XSTORM_ISCSI_LOCAL_VLAN_OFFSET(pfid), 0);
+
+	CNIC_WR(dev, BAR_XSTRORM_INTMEM +
+		XSTORM_TCP_GLOBAL_DEL_ACK_COUNTER_ENABLED_OFFSET(port), 1);
+	CNIC_WR(dev, BAR_XSTRORM_INTMEM +
+		XSTORM_TCP_GLOBAL_DEL_ACK_COUNTER_MAX_COUNT_OFFSET(port),
+		DEF_MAX_DA_COUNT);
+
+	CNIC_WR8(dev, BAR_XSTRORM_INTMEM +
+		 XSTORM_ISCSI_TCP_VARS_TTL_OFFSET(pfid), DEF_TTL);
+	CNIC_WR8(dev, BAR_XSTRORM_INTMEM +
+		 XSTORM_ISCSI_TCP_VARS_TOS_OFFSET(pfid), DEF_TOS);
+	CNIC_WR8(dev, BAR_XSTRORM_INTMEM +
+		 XSTORM_ISCSI_TCP_VARS_ADV_WND_SCL_OFFSET(pfid), 2);
+	CNIC_WR(dev, BAR_XSTRORM_INTMEM +
+		XSTORM_TCP_TX_SWS_TIMER_VAL_OFFSET(pfid), DEF_SWS_TIMER);
+
+	CNIC_WR(dev, BAR_TSTRORM_INTMEM + TSTORM_TCP_MAX_CWND_OFFSET(pfid),
+		DEF_MAX_CWND);
+	return 0;
+}
+
+#ifdef DECLARE_DELAYED_WORK
+static void cnic_delete_task(struct work_struct *work)
+#else
+static void cnic_delete_task(void *data)
+#endif
+{
+	struct cnic_local *cp;
+	struct cnic_dev *dev;
+	u32 i;
+	int need_resched = 0;
+
+#ifdef DECLARE_DELAYED_WORK
+	cp = container_of(work, struct cnic_local, delete_task.work);
+#else
+	cp = (struct cnic_local *) data;
+#endif
+	dev = cp->dev;
+
+	if (test_and_clear_bit(CNIC_LCL_FL_STOP_ISCSI, &cp->cnic_local_flags)) {
+		struct drv_ctl_info info;
+
+		cnic_ulp_stop_one(cp, CNIC_ULP_ISCSI);
+
+		info.cmd = DRV_CTL_ISCSI_STOPPED_CMD;
+		cp->ethdev->drv_ctl(dev->netdev, &info);
+	}
+
+	for (i = 0; i < cp->max_cid_space; i++) {
+		struct cnic_context *ctx = &cp->ctx_tbl[i];
+		int err;
+
+		if (!test_bit(CTX_FL_OFFLD_START, &ctx->ctx_flags) ||
+		    !test_bit(CTX_FL_DELETE_WAIT, &ctx->ctx_flags))
+			continue;
+
+		if (!time_after(jiffies, ctx->timestamp + (2 * HZ))) {
+			need_resched = 1;
+			continue;
+		}
+
+		if (!test_and_clear_bit(CTX_FL_DELETE_WAIT, &ctx->ctx_flags))
+			continue;
+
+		err = cnic_bnx2x_destroy_ramrod(dev, i);
+
+		cnic_free_bnx2x_conn_resc(dev, i);
+		if (!err) {
+			if (ctx->ulp_proto_id == CNIC_ULP_ISCSI)
+				atomic_dec(&cp->iscsi_conn);
+
+			clear_bit(CTX_FL_OFFLD_START, &ctx->ctx_flags);
+		}
+	}
+
+	if (need_resched)
+		queue_delayed_work(cnic_wq, &cp->delete_task,
+				   msecs_to_jiffies(10));
+
+}
+
+static int cnic_cm_open(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	int err;
+
+	err = cnic_cm_alloc_mem(dev);
+	if (err)
+		return err;
+
+	err = cp->start_cm(dev);
+
+	if (err)
+		goto err_out;
+
+#ifdef DECLARE_DELAYED_WORK
+	INIT_DELAYED_WORK(&cp->delete_task, cnic_delete_task);
+#else
+	INIT_WORK(&cp->delete_task, cnic_delete_task, cp);
+#endif
+
+	dev->cm_create = cnic_cm_create;
+	dev->cm_destroy = cnic_cm_destroy;
+	dev->cm_connect = cnic_cm_connect;
+	dev->cm_abort = cnic_cm_abort;
+	dev->cm_close = cnic_cm_close;
+	dev->cm_select_dev = cnic_cm_select_dev;
+
+	cp->ulp_handle[CNIC_ULP_L4] = dev;
+	rcu_assign_pointer(cp->ulp_ops[CNIC_ULP_L4], &cm_ulp_ops);
+	return 0;
+
+err_out:
+	cnic_cm_free_mem(dev);
+	return err;
+}
+
+static int cnic_cm_shutdown(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	int i;
+
+	cp->stop_cm(dev);
+
+	if (!cp->csk_tbl)
+		return 0;
+
+	for (i = 0; i < MAX_CM_SK_TBL_SZ; i++) {
+		struct cnic_sock *csk = &cp->csk_tbl[i];
+
+		clear_bit(SK_F_INUSE, &csk->flags);
+		cnic_cm_cleanup(csk);
+	}
+	cnic_cm_free_mem(dev);
+
+	return 0;
+}
+
+static void cnic_init_context(struct cnic_dev *dev, u32 cid)
+{
+	u32 cid_addr;
+	int i;
+
+	cid_addr = GET_CID_ADDR(cid);
+
+	for (i = 0; i < CTX_SIZE; i += 4)
+		cnic_ctx_wr(dev, cid_addr, i, 0);
+}
+
+static int cnic_setup_5709_context(struct cnic_dev *dev, int valid)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	int ret = 0, i;
+	u32 valid_bit = valid ? BNX2_CTX_HOST_PAGE_TBL_DATA0_VALID : 0;
+
+	if (CHIP_NUM(cp) != CHIP_NUM_5709)
+		return 0;
+
+	for (i = 0; i < cp->ctx_blks; i++) {
+		int j;
+		u32 idx = cp->ctx_arr[i].cid / cp->cids_per_blk;
+		u32 val;
+
+		memset(cp->ctx_arr[i].ctx, 0, BCM_PAGE_SIZE);
+
+		CNIC_WR(dev, BNX2_CTX_HOST_PAGE_TBL_DATA0,
+			(cp->ctx_arr[i].mapping & 0xffffffff) | valid_bit);
+		CNIC_WR(dev, BNX2_CTX_HOST_PAGE_TBL_DATA1,
+			(u64) cp->ctx_arr[i].mapping >> 32);
+		CNIC_WR(dev, BNX2_CTX_HOST_PAGE_TBL_CTRL, idx |
+			BNX2_CTX_HOST_PAGE_TBL_CTRL_WRITE_REQ);
+		for (j = 0; j < 10; j++) {
+
+			val = CNIC_RD(dev, BNX2_CTX_HOST_PAGE_TBL_CTRL);
+			if (!(val & BNX2_CTX_HOST_PAGE_TBL_CTRL_WRITE_REQ))
+				break;
+			udelay(5);
+		}
+		if (val & BNX2_CTX_HOST_PAGE_TBL_CTRL_WRITE_REQ) {
+			ret = -EBUSY;
+			break;
+		}
+	}
+	return ret;
+}
+
+static void cnic_free_irq(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_eth_dev *ethdev = cp->ethdev;
+
+	if (ethdev->drv_state & CNIC_DRV_STATE_USING_MSIX) {
+		cp->disable_int_sync(dev);
+		tasklet_kill(&cp->cnic_irq_task);
+		free_irq(ethdev->irq_arr[0].vector, dev);
+	}
+}
+
+static int cnic_request_irq(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_eth_dev *ethdev = cp->ethdev;
+	int err;
+
+	err = request_irq(ethdev->irq_arr[0].vector, cnic_irq, 0, "cnic", dev);
+	if (err)
+		tasklet_disable(&cp->cnic_irq_task);
+
+	return err;
+}
+
+static int cnic_init_bnx2_irq(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_eth_dev *ethdev = cp->ethdev;
+
+	if (ethdev->drv_state & CNIC_DRV_STATE_USING_MSIX) {
+		int err, i = 0;
+		int sblk_num = cp->status_blk_num;
+		u32 base = ((sblk_num - 1) * BNX2_HC_SB_CONFIG_SIZE) +
+			   BNX2_HC_SB_CONFIG_1;
+
+		CNIC_WR(dev, base, BNX2_HC_SB_CONFIG_1_ONE_SHOT);
+
+		CNIC_WR(dev, base + BNX2_HC_COMP_PROD_TRIP_OFF, (2 << 16) | 8);
+		CNIC_WR(dev, base + BNX2_HC_COM_TICKS_OFF, (64 << 16) | 220);
+		CNIC_WR(dev, base + BNX2_HC_CMD_TICKS_OFF, (64 << 16) | 220);
+
+		cp->last_status_idx = cp->status_blk.bnx2->status_idx;
+		tasklet_init(&cp->cnic_irq_task, cnic_service_bnx2_msix,
+			     (unsigned long) dev);
+		err = cnic_request_irq(dev);
+		if (err)
+			return err;
+
+		while (cp->status_blk.bnx2->status_completion_producer_index &&
+		       i < 10) {
+			CNIC_WR(dev, BNX2_HC_COALESCE_NOW,
+				1 << (11 + sblk_num));
+			udelay(10);
+			i++;
+			barrier();
+		}
+		if (cp->status_blk.bnx2->status_completion_producer_index) {
+			cnic_free_irq(dev);
+			goto failed;
+		}
+
+	} else {
+		struct status_block *sblk = cp->status_blk.gen;
+		u32 hc_cmd = CNIC_RD(dev, BNX2_HC_COMMAND);
+		int i = 0;
+
+		while (sblk->status_completion_producer_index && i < 10) {
+			CNIC_WR(dev, BNX2_HC_COMMAND,
+				hc_cmd | BNX2_HC_COMMAND_COAL_NOW_WO_INT);
+			udelay(10);
+			i++;
+			barrier();
+		}
+		if (sblk->status_completion_producer_index)
+			goto failed;
+
+	}
+	return 0;
+
+failed:
+	netdev_err(dev->netdev, "KCQ index not resetting to 0\n");
+	return -EBUSY;
+}
+
+static void cnic_enable_bnx2_int(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_eth_dev *ethdev = cp->ethdev;
+
+	if (!(ethdev->drv_state & CNIC_DRV_STATE_USING_MSIX))
+		return;
+
+	CNIC_WR(dev, BNX2_PCICFG_INT_ACK_CMD, cp->int_num |
+		BNX2_PCICFG_INT_ACK_CMD_INDEX_VALID | cp->last_status_idx);
+}
+
+static void cnic_disable_bnx2_int_sync(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_eth_dev *ethdev = cp->ethdev;
+
+	if (!(ethdev->drv_state & CNIC_DRV_STATE_USING_MSIX))
+		return;
+
+	CNIC_WR(dev, BNX2_PCICFG_INT_ACK_CMD, cp->int_num |
+		BNX2_PCICFG_INT_ACK_CMD_MASK_INT);
+	CNIC_RD(dev, BNX2_PCICFG_INT_ACK_CMD);
+	synchronize_irq(ethdev->irq_arr[0].vector);
+}
+
+static void cnic_init_bnx2_tx_ring_start(struct cnic_dev *dev, u32 cid,
+					 dma_addr_t ring_map)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	u32 cid_addr, val, offset0, offset1, offset2, offset3;
+
+	cid_addr = GET_CID_ADDR(cid);
+	if (CHIP_NUM(cp) == CHIP_NUM_5709) {
+		int i;
+		u32 cid_addr2 = GET_CID_ADDR(cid + 4) + 0x40;
+
+		for (i = 0; i < PHY_CTX_SIZE; i += 4)
+			cnic_ctx_wr(dev, cid_addr2, i, 0);
+
+		offset0 = BNX2_L2CTX_TYPE_XI;
+		offset1 = BNX2_L2CTX_CMD_TYPE_XI;
+		offset2 = BNX2_L2CTX_TBDR_BHADDR_HI_XI;
+		offset3 = BNX2_L2CTX_TBDR_BHADDR_LO_XI;
+	} else {
+		cnic_init_context(dev, cid);
+		cnic_init_context(dev, cid + 1);
+
+		offset0 = BNX2_L2CTX_TYPE;
+		offset1 = BNX2_L2CTX_CMD_TYPE;
+		offset2 = BNX2_L2CTX_TBDR_BHADDR_HI;
+		offset3 = BNX2_L2CTX_TBDR_BHADDR_LO;
+	}
+	val = BNX2_L2CTX_TYPE_TYPE_L2 | BNX2_L2CTX_TYPE_SIZE_L2;
+	cnic_ctx_wr(dev, cid_addr, offset0, val);
+
+	val = BNX2_L2CTX_CMD_TYPE_TYPE_L2 | (8 << 16);
+	cnic_ctx_wr(dev, cid_addr, offset1, val);
+
+	val = (u64) ring_map >> 32;
+	cnic_ctx_wr(dev, cid_addr, offset2, val);
+
+	val = (u64) ring_map & 0xffffffff;
+	cnic_ctx_wr(dev, cid_addr, offset3, val);
+}
+
+static void cnic_init_bnx2_tx_ring(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_eth_dev *ethdev = cp->ethdev;
+	struct cnic_uio_dev *udev = cp->udev;
+	u32 tx_cid, sb_id;
+	u32 val;
+	int i;
+	struct tx_bd *txbd;
+	dma_addr_t buf_map, ring_map = udev->l2_ring_map;
+	struct status_block *s_blk = cp->status_blk.gen;
+
+	sb_id = cp->status_blk_num;
+	tx_cid = 20;
+	cp->tx_cons_ptr = (u16 *) &s_blk->status_tx_quick_consumer_index2;
+	if (ethdev->drv_state & CNIC_DRV_STATE_USING_MSIX) {
+		struct status_block_msix *sblk = cp->status_blk.bnx2;
+
+		tx_cid = TX_TSS_CID + sb_id - 1;
+		CNIC_WR(dev, BNX2_TSCH_TSS_CFG, (sb_id << 24) |
+			(TX_TSS_CID << 7));
+		cp->tx_cons_ptr = (u16 *) &sblk->status_tx_quick_consumer_index;
+	}
+	cp->tx_cons = *cp->tx_cons_ptr;
+
+	cnic_init_bnx2_tx_ring_start(dev, tx_cid, ring_map);
+
+	txbd = udev->l2_ring;
+
+	buf_map = udev->l2_buf_map;
+	for (i = 0; i < MAX_TX_DESC_CNT; i++, txbd++) {
+		txbd->tx_bd_haddr_hi = (u64) buf_map >> 32;
+		txbd->tx_bd_haddr_lo = (u64) buf_map & 0xffffffff;
+	}
+	val = (u64) ring_map >> 32;
+	txbd->tx_bd_haddr_hi = val;
+
+	val = (u64) ring_map & 0xffffffff;
+	txbd->tx_bd_haddr_lo = val;
+}
+
+static void cnic_init_bnx2_rx_ring_start(struct cnic_dev *dev, u32 cid,
+					 u16 *sb_idx, dma_addr_t ring_map,
+					 u32 sb_id)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_eth_dev *ethdev = cp->ethdev;
+	u32 cid_addr, val, coal_reg, coal_val;
+	int i;
+
+	cnic_init_context(dev, cid);
+	coal_reg = BNX2_HC_COMMAND;
+	coal_val = CNIC_RD(dev, coal_reg);
+	if (ethdev->drv_state & CNIC_DRV_STATE_USING_MSIX) {
+		coal_reg = BNX2_HC_COALESCE_NOW;
+		coal_val = 1 << (11 + sb_id);
+	}
+	i = 0;
+	while (*sb_idx != 0 && i < 10) {
+		CNIC_WR(dev, coal_reg, coal_val);
+		udelay(10);
+		i++;
+		barrier();
+	}
+
+	cid_addr = GET_CID_ADDR(cid);
+	val = BNX2_L2CTX_CTX_TYPE_CTX_BD_CHN_TYPE_VALUE |
+	      BNX2_L2CTX_CTX_TYPE_SIZE_L2 | (0x02 << 8);
+	cnic_ctx_wr(dev, cid_addr, BNX2_L2CTX_CTX_TYPE, val);
+
+	if (sb_id == 0)
+		val = 2 << BNX2_L2CTX_L2_STATUSB_NUM_SHIFT;
+	else
+		val = BNX2_L2CTX_L2_STATUSB_NUM(sb_id);
+	cnic_ctx_wr(dev, cid_addr, BNX2_L2CTX_HOST_BDIDX, val);
+
+	val = (u64) ring_map >> 32;
+	cnic_ctx_wr(dev, cid_addr, BNX2_L2CTX_NX_BDHADDR_HI, val);
+
+	val = (u64) ring_map & 0xffffffff;
+	cnic_ctx_wr(dev, cid_addr, BNX2_L2CTX_NX_BDHADDR_LO, val);
+}
+
+static void cnic_set_bnx2_rxbd(struct rx_bd *rxbd, u32 len, dma_addr_t map)
+{
+	rxbd->rx_bd_len = len;
+	rxbd->rx_bd_flags = RX_BD_FLAGS_START | RX_BD_FLAGS_END;
+	rxbd->rx_bd_haddr_hi = (u64) map >> 32;
+	rxbd->rx_bd_haddr_lo = (u64) map & 0xffffffff;
+}
+
+static void cnic_init_bnx2_rx_ring(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_eth_dev *ethdev = cp->ethdev;
+	struct cnic_uio_dev *udev = cp->udev;
+	int i;
+	struct rx_bd *rxbd;
+	struct status_block *s_blk = cp->status_blk.gen;
+	u32 val, len;
+	dma_addr_t ring_map = udev->l2_ring_map;
+
+	cp->rx_cons_ptr = (u16 *) &s_blk->status_rx_quick_consumer_index2;
+	if (ethdev->drv_state & CNIC_DRV_STATE_USING_MSIX) {
+		struct status_block_msix *sblk = cp->status_blk.bnx2;
+
+		cp->rx_cons_ptr = (u16 *) &sblk->status_rx_quick_consumer_index;
+	}
+	cnic_init_bnx2_rx_ring_start(dev, 2, cp->rx_cons_ptr,
+				     ring_map + BCM_PAGE_SIZE,
+				     cp->status_blk_num);
+	cp->rx_cons = *cp->rx_cons_ptr;
+
+	rxbd = udev->l2_ring + BCM_PAGE_SIZE;
+	len = cp->l2_single_buf_size;
+	for (i = 0; i < MAX_RX_DESC_CNT; i++, rxbd++) {
+		dma_addr_t buf_map;
+		int n = (i % cp->l2_rx_ring_size) + 1;
+
+		buf_map = udev->l2_buf_map + (n * len);
+		cnic_set_bnx2_rxbd(rxbd, len, buf_map);
+	}
+	cnic_set_bnx2_rxbd(rxbd, 0, ring_map + BCM_PAGE_SIZE);
+
+	val = cnic_reg_rd_ind(dev, BNX2_RXP_SCRATCH_RXP_FLOOD);
+	cnic_reg_wr_ind(dev, BNX2_RXP_SCRATCH_RXP_FLOOD, val | (1 << 2));
+}
+
+static void cnic_shutdown_bnx2_rx_ring(struct cnic_dev *dev)
+{
+	struct kwqe *wqes[1], l2kwqe;
+
+	memset(&l2kwqe, 0, sizeof(l2kwqe));
+	wqes[0] = &l2kwqe;
+	l2kwqe.kwqe_op_flag = (L2_LAYER_CODE << KWQE_LAYER_SHIFT) |
+			      (L2_KWQE_OPCODE_VALUE_FLUSH <<
+			       KWQE_OPCODE_SHIFT) | 2;
+	dev->submit_kwqes(dev, wqes, 1);
+	msleep(10);
+}
+
+static void cnic_set_bnx2_mac(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	u32 val;
+
+	val = cp->func << 2;
+
+	cp->shmem_base = cnic_reg_rd_ind(dev, BNX2_SHM_HDR_ADDR_0 + val);
+
+	val = cnic_reg_rd_ind(dev, cp->shmem_base +
+			      BNX2_PORT_HW_CFG_ISCSI_MAC_UPPER);
+	dev->mac_addr[0] = (u8) (val >> 8);
+	dev->mac_addr[1] = (u8) val;
+
+	CNIC_WR(dev, BNX2_EMAC_MAC_MATCH4, val);
+
+	val = cnic_reg_rd_ind(dev, cp->shmem_base +
+			      BNX2_PORT_HW_CFG_ISCSI_MAC_LOWER);
+	dev->mac_addr[2] = (u8) (val >> 24);
+	dev->mac_addr[3] = (u8) (val >> 16);
+	dev->mac_addr[4] = (u8) (val >> 8);
+	dev->mac_addr[5] = (u8) val;
+
+	CNIC_WR(dev, BNX2_EMAC_MAC_MATCH5, val);
+
+	val = 4 | BNX2_RPM_SORT_USER2_BC_EN;
+	if (CHIP_NUM(cp) != CHIP_NUM_5709)
+		val |= BNX2_RPM_SORT_USER2_PROM_VLAN;
+
+	CNIC_WR(dev, BNX2_RPM_SORT_USER2, 0x0);
+	CNIC_WR(dev, BNX2_RPM_SORT_USER2, val);
+	CNIC_WR(dev, BNX2_RPM_SORT_USER2, val | BNX2_RPM_SORT_USER2_ENA);
+}
+
+static int cnic_start_bnx2_hw(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_eth_dev *ethdev = cp->ethdev;
+	struct status_block *sblk = cp->status_blk.gen;
+	u32 val;
+	int err;
+
+	cnic_set_bnx2_mac(dev);
+
+	val = CNIC_RD(dev, BNX2_MQ_CONFIG);
+	val &= ~BNX2_MQ_CONFIG_KNL_BYP_BLK_SIZE;
+	if (BCM_PAGE_BITS > 12)
+		val |= (12 - 8)  << 4;
+	else
+		val |= (BCM_PAGE_BITS - 8)  << 4;
+
+	CNIC_WR(dev, BNX2_MQ_CONFIG, val);
+
+	CNIC_WR(dev, BNX2_HC_COMP_PROD_TRIP, (2 << 16) | 8);
+	CNIC_WR(dev, BNX2_HC_COM_TICKS, (64 << 16) | 220);
+	CNIC_WR(dev, BNX2_HC_CMD_TICKS, (64 << 16) | 220);
+
+	err = cnic_setup_5709_context(dev, 1);
+	if (err)
+		return err;
+
+	cnic_init_context(dev, KWQ_CID);
+	cnic_init_context(dev, KCQ_CID);
+
+	cp->kwq_cid_addr = GET_CID_ADDR(KWQ_CID);
+	cp->kwq_io_addr = MB_GET_CID_ADDR(KWQ_CID) + L5_KRNLQ_HOST_QIDX;
+
+	cp->max_kwq_idx = MAX_KWQ_IDX;
+	cp->kwq_prod_idx = 0;
+	cp->kwq_con_idx = 0;
+	set_bit(CNIC_LCL_FL_KWQ_INIT, &cp->cnic_local_flags);
+
+	if (CHIP_NUM(cp) == CHIP_NUM_5706 || CHIP_NUM(cp) == CHIP_NUM_5708)
+		cp->kwq_con_idx_ptr = &sblk->status_rx_quick_consumer_index15;
+	else
+		cp->kwq_con_idx_ptr = &sblk->status_cmd_consumer_index;
+
+	/* Initialize the kernel work queue context. */
+	val = KRNLQ_TYPE_TYPE_KRNLQ | KRNLQ_SIZE_TYPE_SIZE |
+	      (BCM_PAGE_BITS - 8) | KRNLQ_FLAGS_QE_SELF_SEQ;
+	cnic_ctx_wr(dev, cp->kwq_cid_addr, L5_KRNLQ_TYPE, val);
+
+	val = (BCM_PAGE_SIZE / sizeof(struct kwqe) - 1) << 16;
+	cnic_ctx_wr(dev, cp->kwq_cid_addr, L5_KRNLQ_QE_SELF_SEQ_MAX, val);
+
+	val = ((BCM_PAGE_SIZE / sizeof(struct kwqe)) << 16) | KWQ_PAGE_CNT;
+	cnic_ctx_wr(dev, cp->kwq_cid_addr, L5_KRNLQ_PGTBL_NPAGES, val);
+
+	val = (u32) ((u64) cp->kwq_info.pgtbl_map >> 32);
+	cnic_ctx_wr(dev, cp->kwq_cid_addr, L5_KRNLQ_PGTBL_HADDR_HI, val);
+
+	val = (u32) cp->kwq_info.pgtbl_map;
+	cnic_ctx_wr(dev, cp->kwq_cid_addr, L5_KRNLQ_PGTBL_HADDR_LO, val);
+
+	cp->kcq_cid_addr = GET_CID_ADDR(KCQ_CID);
+	cp->kcq1.io_addr = MB_GET_CID_ADDR(KCQ_CID) + L5_KRNLQ_HOST_QIDX;
+
+	cp->kcq1.sw_prod_idx = 0;
+	cp->kcq1.hw_prod_idx_ptr =
+		(u16 *) &sblk->status_completion_producer_index;
+
+	cp->kcq1.status_idx_ptr = (u16 *) &sblk->status_idx;
+
+	/* Initialize the kernel complete queue context. */
+	val = KRNLQ_TYPE_TYPE_KRNLQ | KRNLQ_SIZE_TYPE_SIZE |
+	      (BCM_PAGE_BITS - 8) | KRNLQ_FLAGS_QE_SELF_SEQ;
+	cnic_ctx_wr(dev, cp->kcq_cid_addr, L5_KRNLQ_TYPE, val);
+
+	val = (BCM_PAGE_SIZE / sizeof(struct kcqe) - 1) << 16;
+	cnic_ctx_wr(dev, cp->kcq_cid_addr, L5_KRNLQ_QE_SELF_SEQ_MAX, val);
+
+	val = ((BCM_PAGE_SIZE / sizeof(struct kcqe)) << 16) | KCQ_PAGE_CNT;
+	cnic_ctx_wr(dev, cp->kcq_cid_addr, L5_KRNLQ_PGTBL_NPAGES, val);
+
+	val = (u32) ((u64) cp->kcq1.dma.pgtbl_map >> 32);
+	cnic_ctx_wr(dev, cp->kcq_cid_addr, L5_KRNLQ_PGTBL_HADDR_HI, val);
+
+	val = (u32) cp->kcq1.dma.pgtbl_map;
+	cnic_ctx_wr(dev, cp->kcq_cid_addr, L5_KRNLQ_PGTBL_HADDR_LO, val);
+
+	cp->int_num = 0;
+	if (ethdev->drv_state & CNIC_DRV_STATE_USING_MSIX) {
+		struct status_block_msix *msblk = cp->status_blk.bnx2;
+		u32 sb_id = cp->status_blk_num;
+		u32 sb = BNX2_L2CTX_L5_STATUSB_NUM(sb_id);
+
+		cp->kcq1.hw_prod_idx_ptr =
+			(u16 *) &msblk->status_completion_producer_index;
+		cp->kcq1.status_idx_ptr = (u16 *) &msblk->status_idx;
+		cp->kwq_con_idx_ptr = (u16 *) &msblk->status_cmd_consumer_index;
+		cp->int_num = sb_id << BNX2_PCICFG_INT_ACK_CMD_INT_NUM_SHIFT;
+		cnic_ctx_wr(dev, cp->kwq_cid_addr, L5_KRNLQ_HOST_QIDX, sb);
+		cnic_ctx_wr(dev, cp->kcq_cid_addr, L5_KRNLQ_HOST_QIDX, sb);
+	}
+
+	/* Enable Commnad Scheduler notification when we write to the
+	 * host producer index of the kernel contexts. */
+	CNIC_WR(dev, BNX2_MQ_KNL_CMD_MASK1, 2);
+
+	/* Enable Command Scheduler notification when we write to either
+	 * the Send Queue or Receive Queue producer indexes of the kernel
+	 * bypass contexts. */
+	CNIC_WR(dev, BNX2_MQ_KNL_BYP_CMD_MASK1, 7);
+	CNIC_WR(dev, BNX2_MQ_KNL_BYP_WRITE_MASK1, 7);
+
+	/* Notify COM when the driver post an application buffer. */
+	CNIC_WR(dev, BNX2_MQ_KNL_RX_V2P_MASK2, 0x2000);
+
+	/* Set the CP and COM doorbells.  These two processors polls the
+	 * doorbell for a non zero value before running.  This must be done
+	 * after setting up the kernel queue contexts. */
+	val = cnic_reg_rd_ind(dev, BNX2_CP_SCRATCH + 0x20);
+	cnic_reg_wr_ind(dev, BNX2_CP_SCRATCH + 0x20, val | 1);
+
+	val = cnic_reg_rd_ind(dev, BNX2_COM_SCRATCH + 0x20);
+	cnic_reg_wr_ind(dev, BNX2_COM_SCRATCH + 0x20, val | 1);
+
+	cnic_init_bnx2_tx_ring(dev);
+	cnic_init_bnx2_rx_ring(dev);
+
+	err = cnic_init_bnx2_irq(dev);
+	if (err) {
+		netdev_err(dev->netdev, "cnic_init_irq failed\n");
+
+		val = cnic_reg_rd_ind(dev, BNX2_CP_SCRATCH + 0x20);
+		cnic_reg_wr_ind(dev, BNX2_CP_SCRATCH + 0x20, val & ~0x1);
+
+		val = cnic_reg_rd_ind(dev, BNX2_COM_SCRATCH + 0x20);
+		cnic_reg_wr_ind(dev, BNX2_COM_SCRATCH + 0x20, val & ~0x1);
+
+		return err;
+	}
+
+#if (CNIC_ISCSI_OOO_SUPPORT)
+	cnic_start_bnx2_ooo_hw(dev);
+#endif
+	return 0;
+}
+
+static void cnic_setup_bnx2x_context(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_eth_dev *ethdev = cp->ethdev;
+	u32 start_offset = ethdev->ctx_tbl_offset;
+	int i;
+
+	for (i = 0; i < cp->ctx_blks; i++) {
+		struct cnic_ctx *ctx = &cp->ctx_arr[i];
+		dma_addr_t map = ctx->mapping;
+
+		if (cp->ctx_align) {
+			unsigned long mask = cp->ctx_align - 1;
+
+			map = (map + mask) & ~mask;
+		}
+
+		cnic_ctx_tbl_wr(dev, start_offset + i, map);
+	}
+}
+
+static int cnic_init_bnx2x_irq(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_eth_dev *ethdev = cp->ethdev;
+	int err = 0;
+
+	tasklet_init(&cp->cnic_irq_task, cnic_service_bnx2x_bh,
+		     (unsigned long) dev);
+	if (ethdev->drv_state & CNIC_DRV_STATE_USING_MSIX)
+		err = cnic_request_irq(dev);
+
+	return err;
+}
+
+static inline void cnic_storm_memset_hc_disable(struct cnic_dev *dev,
+						u16 sb_id, u8 sb_index,
+						u8 disable)
+{
+
+	u32 addr = BAR_CSTRORM_INTMEM +
+			CSTORM_STATUS_BLOCK_DATA_OFFSET(sb_id) +
+			offsetof(struct hc_status_block_data_e1x, index_data) +
+			sizeof(struct hc_index_data)*sb_index +
+			offsetof(struct hc_index_data, flags);
+	u16 flags = CNIC_RD16(dev, addr);
+	/* clear and set */
+	flags &= ~HC_INDEX_DATA_HC_ENABLED;
+	flags |= (((~disable) << HC_INDEX_DATA_HC_ENABLED_SHIFT) &
+		  HC_INDEX_DATA_HC_ENABLED);
+	CNIC_WR16(dev, addr, flags);
+}
+
+static void cnic_enable_bnx2x_int(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	u8 sb_id = cp->status_blk_num;
+
+	CNIC_WR8(dev, BAR_CSTRORM_INTMEM +
+			CSTORM_STATUS_BLOCK_DATA_OFFSET(sb_id) +
+			offsetof(struct hc_status_block_data_e1x, index_data) +
+			sizeof(struct hc_index_data)*HC_INDEX_ISCSI_EQ_CONS +
+			offsetof(struct hc_index_data, timeout), 64 / 4);
+	cnic_storm_memset_hc_disable(dev, sb_id, HC_INDEX_ISCSI_EQ_CONS, 0);
+}
+
+static void cnic_disable_bnx2x_int_sync(struct cnic_dev *dev)
+{
+}
+
+static void cnic_init_bnx2x_tx_ring(struct cnic_dev *dev,
+				    struct client_init_ramrod_data *data)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_uio_dev *udev = cp->udev;
+	union eth_tx_bd_types *txbd = (union eth_tx_bd_types *) udev->l2_ring;
+	dma_addr_t buf_map, ring_map = udev->l2_ring_map;
+	struct host_sp_status_block *sb = cp->bnx2x_def_status_blk;
+	int i;
+	u32 cli = cp->ethdev->iscsi_l2_client_id;
+	u32 val;
+
+	memset(txbd, 0, BCM_PAGE_SIZE);
+
+	buf_map = udev->l2_buf_map;
+	for (i = 0; i < MAX_TX_DESC_CNT; i += 3, txbd += 3) {
+		struct eth_tx_start_bd *start_bd = &txbd->start_bd;
+		struct eth_tx_bd *reg_bd = &((txbd + 2)->reg_bd);
+
+		start_bd->addr_hi = cpu_to_le32((u64) buf_map >> 32);
+		start_bd->addr_lo = cpu_to_le32(buf_map & 0xffffffff);
+		reg_bd->addr_hi = start_bd->addr_hi;
+		reg_bd->addr_lo = start_bd->addr_lo + 0x10;
+		start_bd->nbytes = cpu_to_le16(0x10);
+		start_bd->nbd = cpu_to_le16(3);
+		start_bd->bd_flags.as_bitfield = ETH_TX_BD_FLAGS_START_BD;
+		start_bd->general_data = (UNICAST_ADDRESS <<
+			ETH_TX_START_BD_ETH_ADDR_TYPE_SHIFT);
+		start_bd->general_data |= (1 << ETH_TX_START_BD_HDR_NBDS_SHIFT);
+
+	}
+
+	val = (u64) ring_map >> 32;
+	txbd->next_bd.addr_hi = cpu_to_le32(val);
+
+	data->tx.tx_bd_page_base.hi = cpu_to_le32(val);
+
+	val = (u64) ring_map & 0xffffffff;
+	txbd->next_bd.addr_lo = cpu_to_le32(val);
+
+	data->tx.tx_bd_page_base.lo = cpu_to_le32(val);
+
+	/* Other ramrod params */
+	data->tx.tx_sb_index_number = HC_SP_INDEX_ETH_ISCSI_CQ_CONS;
+	data->tx.tx_status_block_id = BNX2X_DEF_SB_ID;
+
+	/* reset xstorm per client statistics */
+	if (cli < MAX_STAT_COUNTER_ID) {
+#if (NEW_BNX2X_HSI > 60)
+		data->general.statistics_zero_flg = 1;
+		data->general.statistics_en_flg = 1;
+		data->general.statistics_counter_id = cli;
+#else
+		int port = CNIC_PORT(cp);
+
+		val = BAR_XSTRORM_INTMEM +
+		      XSTORM_PER_COUNTER_ID_STATS_OFFSET(port, cli);
+		for (i = 0; i < sizeof(struct xstorm_per_client_stats) / 4; i++)
+			CNIC_WR(dev, val + i * 4, 0);
+#endif
+	}
+
+	cp->tx_cons_ptr =
+		&sb->sp_sb.index_values[HC_SP_INDEX_ETH_ISCSI_CQ_CONS];
+}
+
+static void cnic_init_bnx2x_rx_ring(struct cnic_dev *dev,
+				    struct client_init_ramrod_data *data)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_uio_dev *udev = cp->udev;
+	struct eth_rx_bd *rxbd = (struct eth_rx_bd *) (udev->l2_ring +
+				BCM_PAGE_SIZE);
+	struct eth_rx_cqe_next_page *rxcqe = (struct eth_rx_cqe_next_page *)
+				(udev->l2_ring + (2 * BCM_PAGE_SIZE));
+	struct host_sp_status_block *sb = cp->bnx2x_def_status_blk;
+	int i;
+	u32 cli = cp->ethdev->iscsi_l2_client_id;
+	int cl_qzone_id = BNX2X_CL_QZONE_ID(cp, cli);
+	u32 val;
+	dma_addr_t ring_map = udev->l2_ring_map;
+
+	/* General data */
+	data->general.client_id = cli;
+	data->general.activate_flg = 1;
+	data->general.sp_client_id = cli;
+#if (NEW_BNX2X_HSI >= 64)
+	data->general.mtu = cpu_to_le16(cp->l2_single_buf_size - 14);
+	data->general.func_id = cp->pfid;
+#endif
+
+	for (i = 0; i < BNX2X_MAX_RX_DESC_CNT; i++, rxbd++) {
+		dma_addr_t buf_map;
+		int n = (i % cp->l2_rx_ring_size) + 1;
+
+		buf_map = udev->l2_buf_map + (n * cp->l2_single_buf_size);
+		rxbd->addr_hi = cpu_to_le32((u64) buf_map >> 32);
+		rxbd->addr_lo = cpu_to_le32(buf_map & 0xffffffff);
+	}
+
+	val = (u64) (ring_map + BCM_PAGE_SIZE) >> 32;
+	rxbd->addr_hi = cpu_to_le32(val);
+	data->rx.bd_page_base.hi = cpu_to_le32(val);
+
+	val = (u64) (ring_map + BCM_PAGE_SIZE) & 0xffffffff;
+	rxbd->addr_lo = cpu_to_le32(val);
+	data->rx.bd_page_base.lo = cpu_to_le32(val);
+
+	rxcqe += BNX2X_MAX_RCQ_DESC_CNT;
+	val = (u64) (ring_map + (2 * BCM_PAGE_SIZE)) >> 32;
+	rxcqe->addr_hi = cpu_to_le32(val);
+	data->rx.cqe_page_base.hi = cpu_to_le32(val);
+
+	val = (u64) (ring_map + (2 * BCM_PAGE_SIZE)) & 0xffffffff;
+	rxcqe->addr_lo = cpu_to_le32(val);
+	data->rx.cqe_page_base.lo = cpu_to_le32(val);
+
+	/* Other ramrod params */
+	data->rx.client_qzone_id = cl_qzone_id;
+	data->rx.rx_sb_index_number = HC_SP_INDEX_ETH_ISCSI_RX_CQ_CONS;
+	data->rx.status_block_id = BNX2X_DEF_SB_ID;
+
+	data->rx.cache_line_alignment_log_size = L1_CACHE_SHIFT;
+#if (NEW_BNX2X_HSI == 60)
+	data->rx.bd_buff_size =	cpu_to_le16(cp->l2_single_buf_size);
+
+	data->rx.mtu = cpu_to_le16(cp->l2_single_buf_size - 14);
+#else
+	data->rx.max_bytes_on_bd = cpu_to_le16(cp->l2_single_buf_size);
+#endif
+	data->rx.outer_vlan_removal_enable_flg = 1;
+#if (NEW_BNX2X_HSI >= 64)
+	data->rx.silent_vlan_removal_flg = 1;
+	data->rx.silent_vlan_value = 0;
+	data->rx.silent_vlan_mask = 0xffff;
+#endif
+
+#if (NEW_BNX2X_HSI == 60)
+	/* reset tstorm and ustorm per client statistics */
+	if (cli < MAX_STAT_COUNTER_ID) {
+		int port = CNIC_PORT(cp);
+
+		val = BAR_TSTRORM_INTMEM +
+		      TSTORM_PER_COUNTER_ID_STATS_OFFSET(port, cli);
+		for (i = 0; i < sizeof(struct tstorm_per_client_stats) / 4; i++)
+			CNIC_WR(dev, val + i * 4, 0);
+
+		val = BAR_USTRORM_INTMEM +
+		      USTORM_PER_COUNTER_ID_STATS_OFFSET(port, cli);
+		for (i = 0; i < sizeof(struct ustorm_per_client_stats) / 4; i++)
+			CNIC_WR(dev, val + i * 4, 0);
+	}
+
+#endif
+	cp->rx_cons_ptr =
+		&sb->sp_sb.index_values[HC_SP_INDEX_ETH_ISCSI_RX_CQ_CONS];
+	cp->rx_cons = *cp->rx_cons_ptr;
+}
+
+static void cnic_init_bnx2x_kcq(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	u32 pfid = cp->pfid;
+
+	cp->kcq1.io_addr = BAR_CSTRORM_INTMEM +
+			   CSTORM_ISCSI_EQ_PROD_OFFSET(pfid, 0);
+	cp->kcq1.sw_prod_idx = 0;
+
+	if (BNX2X_CHIP_IS_E2_PLUS(cp->chip_id)) {
+		struct host_hc_status_block_e2 *sb = cp->status_blk.gen;
+
+		cp->kcq1.hw_prod_idx_ptr =
+			&sb->sb.index_values[HC_INDEX_ISCSI_EQ_CONS];
+		cp->kcq1.status_idx_ptr =
+			&sb->sb.running_index[SM_RX_ID];
+	} else {
+		struct host_hc_status_block_e1x *sb = cp->status_blk.gen;
+
+		cp->kcq1.hw_prod_idx_ptr =
+			&sb->sb.index_values[HC_INDEX_ISCSI_EQ_CONS];
+		cp->kcq1.status_idx_ptr =
+			&sb->sb.running_index[SM_RX_ID];
+	}
+
+	if (BNX2X_CHIP_IS_E2_PLUS(cp->chip_id)) {
+		struct host_hc_status_block_e2 *sb = cp->status_blk.gen;
+
+		cp->kcq2.io_addr = BAR_USTRORM_INTMEM +
+					USTORM_FCOE_EQ_PROD_OFFSET(pfid);
+		cp->kcq2.sw_prod_idx = 0;
+		cp->kcq2.hw_prod_idx_ptr =
+			&sb->sb.index_values[HC_INDEX_FCOE_EQ_CONS];
+		cp->kcq2.status_idx_ptr =
+			&sb->sb.running_index[SM_RX_ID];
+	}
+}
+
+static int cnic_start_bnx2x_hw(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_eth_dev *ethdev = cp->ethdev;
+	int func = CNIC_FUNC(cp), ret;
+#if (NEW_BNX2X_HSI <= 60)
+	int i;
+#endif
+	u32 pfid;
+
+	dev->stats_addr = ethdev->addr_drv_info_to_mcp;
+	cp->port_mode = CHIP_PORT_MODE_NONE;
+
+	if (BNX2X_CHIP_IS_E2_PLUS(cp->chip_id)) {
+		u32 val = CNIC_RD(dev, MISC_REG_PORT4MODE_EN_OVWR);
+
+		if (!(val & 1))
+			val = CNIC_RD(dev, MISC_REG_PORT4MODE_EN);
+		else
+			val = (val >> 1) & 1;
+
+		if (val) {
+			cp->port_mode = CHIP_4_PORT_MODE;
+			cp->pfid = func >> 1;
+		} else {
+			cp->port_mode = CHIP_2_PORT_MODE;
+			cp->pfid = func & 0x6;
+		}
+	} else {
+		cp->pfid = func;
+	}
+	pfid = cp->pfid;
+
+	ret = cnic_init_id_tbl(&cp->cid_tbl, MAX_ISCSI_TBL_SZ,
+			       cp->iscsi_start_cid, 0);
+
+	if (ret)
+		return -ENOMEM;
+
+	if (BNX2X_CHIP_IS_E2_PLUS(cp->chip_id)) {
+		ret = cnic_init_id_tbl(&cp->fcoe_cid_tbl, dev->max_fcoe_conn,
+					cp->fcoe_start_cid, 0);
+
+		if (ret)
+			return -ENOMEM;
+	}
+
+	cp->bnx2x_igu_sb_id = ethdev->irq_arr[0].status_blk_num2;
+
+	cnic_init_bnx2x_kcq(dev);
+
+	/* Only 1 EQ */
+	CNIC_WR16(dev, cp->kcq1.io_addr, MAX_KCQ_IDX);
+	CNIC_WR(dev, BAR_CSTRORM_INTMEM +
+		CSTORM_ISCSI_EQ_CONS_OFFSET(pfid, 0), 0);
+	CNIC_WR(dev, BAR_CSTRORM_INTMEM +
+		CSTORM_ISCSI_EQ_NEXT_PAGE_ADDR_OFFSET(pfid, 0),
+		cp->kcq1.dma.pg_map_arr[1] & 0xffffffff);
+	CNIC_WR(dev, BAR_CSTRORM_INTMEM +
+		CSTORM_ISCSI_EQ_NEXT_PAGE_ADDR_OFFSET(pfid, 0) + 4,
+		(u64) cp->kcq1.dma.pg_map_arr[1] >> 32);
+	CNIC_WR(dev, BAR_CSTRORM_INTMEM +
+		CSTORM_ISCSI_EQ_NEXT_EQE_ADDR_OFFSET(pfid, 0),
+		cp->kcq1.dma.pg_map_arr[0] & 0xffffffff);
+	CNIC_WR(dev, BAR_CSTRORM_INTMEM +
+		CSTORM_ISCSI_EQ_NEXT_EQE_ADDR_OFFSET(pfid, 0) + 4,
+		(u64) cp->kcq1.dma.pg_map_arr[0] >> 32);
+	CNIC_WR8(dev, BAR_CSTRORM_INTMEM +
+		CSTORM_ISCSI_EQ_NEXT_PAGE_ADDR_VALID_OFFSET(pfid, 0), 1);
+	CNIC_WR16(dev, BAR_CSTRORM_INTMEM +
+		CSTORM_ISCSI_EQ_SB_NUM_OFFSET(pfid, 0), cp->status_blk_num);
+	CNIC_WR8(dev, BAR_CSTRORM_INTMEM +
+		CSTORM_ISCSI_EQ_SB_INDEX_OFFSET(pfid, 0),
+		HC_INDEX_ISCSI_EQ_CONS);
+
+#if (NEW_BNX2X_HSI <= 60)
+	for (i = 0; i < cp->conn_buf_info.num_pages; i++) {
+		CNIC_WR(dev, BAR_TSTRORM_INTMEM +
+			TSTORM_ISCSI_CONN_BUF_PBL_OFFSET(pfid, i),
+			cp->conn_buf_info.pgtbl[2 * i]);
+		CNIC_WR(dev, BAR_TSTRORM_INTMEM +
+			TSTORM_ISCSI_CONN_BUF_PBL_OFFSET(pfid, i) + 4,
+			cp->conn_buf_info.pgtbl[(2 * i) + 1]);
+	}
+#endif
+
+	CNIC_WR(dev, BAR_USTRORM_INTMEM +
+		USTORM_ISCSI_GLOBAL_BUF_PHYS_ADDR_OFFSET(pfid),
+		cp->gbl_buf_info.pg_map_arr[0] & 0xffffffff);
+	CNIC_WR(dev, BAR_USTRORM_INTMEM +
+		USTORM_ISCSI_GLOBAL_BUF_PHYS_ADDR_OFFSET(pfid) + 4,
+		(u64) cp->gbl_buf_info.pg_map_arr[0] >> 32);
+
+	CNIC_WR(dev, BAR_TSTRORM_INTMEM +
+		TSTORM_ISCSI_TCP_LOCAL_ADV_WND_OFFSET(pfid), DEF_RCV_BUF);
+
+	cnic_setup_bnx2x_context(dev);
+
+#if (CNIC_ISCSI_OOO_SUPPORT)
+	cnic_start_bnx2x_ooo_hw(dev);
+#endif
+	ret = cnic_init_bnx2x_irq(dev);
+	if (ret)
+		return ret;
+
+	return 0;
+}
+
+static void cnic_init_rings(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_uio_dev *udev = cp->udev;
+
+	if (test_bit(CNIC_LCL_FL_RINGS_INITED, &cp->cnic_local_flags))
+		return;
+
+	if (test_bit(CNIC_F_BNX2_CLASS, &dev->flags)) {
+		cnic_init_bnx2_tx_ring(dev);
+		cnic_init_bnx2_rx_ring(dev);
+		set_bit(CNIC_LCL_FL_RINGS_INITED, &cp->cnic_local_flags);
+	} else if (test_bit(CNIC_F_BNX2X_CLASS, &dev->flags)) {
+		u32 cli = cp->ethdev->iscsi_l2_client_id;
+		u32 cid = cp->ethdev->iscsi_l2_cid;
+		u32 cl_qzone_id;
+		struct client_init_ramrod_data *data;
+		union l5cm_specific_data l5_data;
+		struct ustorm_eth_rx_producers rx_prods = {0};
+		u32 off, i, *cid_ptr;
+
+		rx_prods.bd_prod = 0;
+		rx_prods.cqe_prod = BNX2X_MAX_RCQ_DESC_CNT;
+		barrier();
+
+		cl_qzone_id = BNX2X_CL_QZONE_ID(cp, cli);
+
+		off = BAR_USTRORM_INTMEM +
+			(BNX2X_CHIP_IS_E2_PLUS(cp->chip_id) ?
+			 USTORM_RX_PRODS_E2_OFFSET(cl_qzone_id) :
+			 USTORM_RX_PRODS_E1X_OFFSET(CNIC_PORT(cp), cli));
+
+		for (i = 0; i < sizeof(struct ustorm_eth_rx_producers) / 4; i++)
+			CNIC_WR(dev, off + i * 4, ((u32 *) &rx_prods)[i]);
+
+		set_bit(CNIC_LCL_FL_L2_WAIT, &cp->cnic_local_flags);
+
+		data = udev->l2_buf;
+		cid_ptr = udev->l2_buf + 12;
+
+		memset(data, 0, sizeof(*data));
+
+		cnic_init_bnx2x_tx_ring(dev, data);
+		cnic_init_bnx2x_rx_ring(dev, data);
+
+		l5_data.phy_address.lo = udev->l2_buf_map & 0xffffffff;
+		l5_data.phy_address.hi = (u64) udev->l2_buf_map >> 32;
+
+		set_bit(CNIC_LCL_FL_RINGS_INITED, &cp->cnic_local_flags);
+
+		cnic_submit_kwqe_16(dev, RAMROD_CMD_ID_ETH_CLIENT_SETUP,
+			cid, ETH_CONNECTION_TYPE, &l5_data);
+
+		i = 0;
+		while (test_bit(CNIC_LCL_FL_L2_WAIT, &cp->cnic_local_flags) &&
+		       ++i < 10)
+			msleep(1);
+
+		if (test_bit(CNIC_LCL_FL_L2_WAIT, &cp->cnic_local_flags))
+			netdev_err(dev->netdev,
+				"iSCSI CLIENT_SETUP did not complete\n");
+		cnic_spq_completion(dev, DRV_CTL_RET_L2_SPQ_CREDIT_CMD, 1);
+		cnic_ring_ctl(dev, cid, cli, 1);
+		*cid_ptr = cid;
+	}
+}
+
+static void cnic_shutdown_rings(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_uio_dev *udev = cp->udev;
+	void *rx_ring;
+
+	if (!test_bit(CNIC_LCL_FL_RINGS_INITED, &cp->cnic_local_flags))
+		return;
+
+	if (test_bit(CNIC_F_BNX2_CLASS, &dev->flags)) {
+		cnic_shutdown_bnx2_rx_ring(dev);
+	} else if (test_bit(CNIC_F_BNX2X_CLASS, &dev->flags)) {
+		u32 cli = cp->ethdev->iscsi_l2_client_id;
+		u32 cid = cp->ethdev->iscsi_l2_cid;
+		union l5cm_specific_data l5_data;
+		int i;
+
+		cnic_ring_ctl(dev, cid, cli, 0);
+
+		set_bit(CNIC_LCL_FL_L2_WAIT, &cp->cnic_local_flags);
+
+		l5_data.phy_address.lo = cli;
+		l5_data.phy_address.hi = 0;
+		cnic_submit_kwqe_16(dev, RAMROD_CMD_ID_ETH_HALT,
+			cid, ETH_CONNECTION_TYPE, &l5_data);
+		i = 0;
+		while (test_bit(CNIC_LCL_FL_L2_WAIT, &cp->cnic_local_flags) &&
+		       ++i < 10)
+			msleep(1);
+
+		if (test_bit(CNIC_LCL_FL_L2_WAIT, &cp->cnic_local_flags))
+			netdev_err(dev->netdev,
+				"iSCSI CLIENT_HALT did not complete\n");
+		cnic_spq_completion(dev, DRV_CTL_RET_L2_SPQ_CREDIT_CMD, 1);
+
+		memset(&l5_data, 0, sizeof(l5_data));
+		cnic_submit_kwqe_16(dev, RAMROD_CMD_ID_COMMON_CFC_DEL,
+			cid, NONE_CONNECTION_TYPE, &l5_data);
+		msleep(10);
+	}
+	clear_bit(CNIC_LCL_FL_RINGS_INITED, &cp->cnic_local_flags);
+	rx_ring = udev->l2_ring + BCM_PAGE_SIZE;
+	memset(rx_ring, 0, BCM_PAGE_SIZE);
+}
+
+static int cnic_register_netdev(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_eth_dev *ethdev = cp->ethdev;
+	int err;
+
+	if (!ethdev)
+		return -ENODEV;
+
+	if (ethdev->drv_state & CNIC_DRV_STATE_REGD)
+		return 0;
+
+	err = ethdev->drv_register_cnic(dev->netdev, cp->cnic_ops, dev);
+	if (err)
+		netdev_err(dev->netdev, "register_cnic failed\n");
+
+	return err;
+}
+
+static void cnic_unregister_netdev(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_eth_dev *ethdev = cp->ethdev;
+
+	if (!ethdev)
+		return;
+
+	if (ethdev->drv_state & CNIC_DRV_STATE_REGD)
+		ethdev->drv_unregister_cnic(dev->netdev);
+}
+
+static int cnic_start_hw(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_eth_dev *ethdev = cp->ethdev;
+	int err;
+
+	if (test_bit(CNIC_F_CNIC_UP, &dev->flags))
+		return -EALREADY;
+
+	dev->regview = ethdev->io_base;
+	pci_dev_get(dev->pcidev);
+	cp->func = PCI_FUNC(dev->pcidev->devfn);
+	cp->status_blk.gen = ethdev->irq_arr[0].status_blk;
+	cp->status_blk_num = ethdev->irq_arr[0].status_blk_num;
+
+	err = cp->alloc_resc(dev);
+	if (err) {
+		netdev_err(dev->netdev, "allocate resource failure\n");
+		goto err1;
+	}
+
+	err = cp->start_hw(dev);
+	if (err)
+		goto err1;
+
+	err = cnic_cm_open(dev);
+	if (err)
+		goto err1;
+
+	set_bit(CNIC_F_CNIC_UP, &dev->flags);
+
+	cp->enable_int(dev);
+
+	return 0;
+
+err1:
+	cp->free_resc(dev);
+	pci_dev_put(dev->pcidev);
+	return err;
+}
+
+static void cnic_stop_bnx2_hw(struct cnic_dev *dev)
+{
+	u32 val;
+
+	cnic_disable_bnx2_int_sync(dev);
+
+	val = cnic_reg_rd_ind(dev, BNX2_CP_SCRATCH + 0x20);
+	cnic_reg_wr_ind(dev, BNX2_CP_SCRATCH + 0x20, val & ~0x1);
+
+	val = cnic_reg_rd_ind(dev, BNX2_COM_SCRATCH + 0x20);
+	cnic_reg_wr_ind(dev, BNX2_COM_SCRATCH + 0x20, val & ~0x1);
+
+	cnic_init_context(dev, KWQ_CID);
+	cnic_init_context(dev, KCQ_CID);
+
+	cnic_setup_5709_context(dev, 0);
+	cnic_free_irq(dev);
+
+	cnic_free_resc(dev);
+}
+
+
+static void cnic_stop_bnx2x_hw(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+
+	cnic_free_irq(dev);
+	*cp->kcq1.hw_prod_idx_ptr = 0;
+	CNIC_WR(dev, BAR_CSTRORM_INTMEM +
+		CSTORM_ISCSI_EQ_CONS_OFFSET(cp->pfid, 0), 0);
+	CNIC_WR16(dev, cp->kcq1.io_addr, 0);
+	cnic_free_resc(dev);
+}
+
+static void cnic_stop_hw(struct cnic_dev *dev)
+{
+	if (test_bit(CNIC_F_CNIC_UP, &dev->flags)) {
+		struct cnic_local *cp = dev->cnic_priv;
+		int i = 0;
+
+#if (CNIC_ISCSI_OOO_SUPPORT)
+		/* Must stop the ooo engine before freeing kwqe resources */
+		cp->stop_ooo_hw(dev);
+#endif
+		/* Need to wait for the ring shutdown event to complete
+		 * before clearing the CNIC_UP flag.
+		 */
+		while (cp->udev->uio_dev != -1 && i < 15) {
+			msleep(100);
+			i++;
+		}
+		cnic_shutdown_rings(dev);
+		clear_bit(CNIC_F_CNIC_UP, &dev->flags);
+		RCU_INIT_POINTER(cp->ulp_ops[CNIC_ULP_L4], NULL);
+		synchronize_rcu();
+		cnic_cm_shutdown(dev);
+		cp->stop_hw(dev);
+		pci_dev_put(dev->pcidev);
+	}
+}
+
+static void cnic_free_dev(struct cnic_dev *dev)
+{
+	int i = 0;
+
+	while ((atomic_read(&dev->ref_count) != 0) && i < 10) {
+		msleep(100);
+		i++;
+	}
+	if (atomic_read(&dev->ref_count) != 0)
+		netdev_err(dev->netdev, "Failed waiting for ref count to go to zero\n");
+
+	netdev_info(dev->netdev, "Removed CNIC device\n");
+	dev_put(dev->netdev);
+	kfree(dev);
+}
+
+static struct cnic_dev *cnic_alloc_dev(struct net_device *dev,
+				       struct pci_dev *pdev)
+{
+	struct cnic_dev *cdev;
+	struct cnic_local *cp;
+	int alloc_size;
+
+	alloc_size = sizeof(struct cnic_dev) + sizeof(struct cnic_local);
+
+	cdev = kzalloc(alloc_size , GFP_KERNEL);
+	if (cdev == NULL) {
+		netdev_err(dev, "allocate dev struct failure\n");
+		return NULL;
+	}
+
+	cdev->version = CNIC_DEV_VER;
+	cdev->netdev = dev;
+	cdev->cnic_priv = (char *)cdev + sizeof(struct cnic_dev);
+	cdev->register_device = cnic_register_device;
+	cdev->unregister_device = cnic_unregister_device;
+	cdev->iscsi_nl_msg_recv = cnic_iscsi_nl_msg_recv;
+
+	cp = cdev->cnic_priv;
+	cp->dev = cdev;
+	cp->l2_single_buf_size = 0x400;
+	cp->l2_rx_ring_size = 3;
+
+	atomic_set(&cp->nl_count, 0);
+	cp->nl_timestamp = jiffies;
+
+	spin_lock_init(&cp->cnic_ulp_lock);
+
+	netdev_info(dev, "Added CNIC device\n");
+
+	return cdev;
+}
+
+static struct cnic_dev *init_bnx2_cnic(struct net_device *dev)
+{
+	struct pci_dev *pdev;
+	struct cnic_dev *cdev;
+	struct cnic_local *cp;
+	struct cnic_eth_dev *ethdev = NULL;
+	struct cnic_eth_dev *(*probe)(struct net_device *) = NULL;
+
+	probe = symbol_get(bnx2_cnic_probe2);
+	if (probe) {
+		ethdev = (*probe)(dev);
+		symbol_put(bnx2_cnic_probe2);
+	}
+	if (!ethdev)
+		return NULL;
+
+	if (ethdev->version != CNIC_ETH_DEV_VER) {
+		pr_warn("bnx2 not compatible with cnic expecting: 0x%x got: 0x%x\n",
+			CNIC_ETH_DEV_VER, ethdev->version);
+		return NULL;
+	}
+
+	pdev = ethdev->pdev;
+	if (!pdev)
+		return NULL;
+
+	dev_hold(dev);
+	pci_dev_get(pdev);
+	if (pdev->device == PCI_DEVICE_ID_NX2_5709 ||
+	    pdev->device == PCI_DEVICE_ID_NX2_5709S) {
+		u8 rev;
+
+		pci_read_config_byte(pdev, PCI_REVISION_ID, &rev);
+		if (rev < 0x10) {
+			pci_dev_put(pdev);
+			goto cnic_err;
+		}
+	}
+	pci_dev_put(pdev);
+
+	cdev = cnic_alloc_dev(dev, pdev);
+	if (cdev == NULL)
+		goto cnic_err;
+
+	set_bit(CNIC_F_BNX2_CLASS, &cdev->flags);
+	cdev->submit_kwqes = cnic_submit_bnx2_kwqes;
+
+	cp = cdev->cnic_priv;
+	cp->ethdev = ethdev;
+	cdev->pcidev = pdev;
+	cp->chip_id = ethdev->chip_id;
+
+	cdev->max_iscsi_conn = ethdev->max_iscsi_conn;
+
+	cp->cnic_ops = &cnic_bnx2_ops;
+	cp->start_hw = cnic_start_bnx2_hw;
+	cp->stop_hw = cnic_stop_bnx2_hw;
+	cp->setup_pgtbl = cnic_setup_page_tbl;
+	cp->alloc_resc = cnic_alloc_bnx2_resc;
+	cp->free_resc = cnic_free_resc;
+	cp->start_cm = cnic_cm_init_bnx2_hw;
+	cp->stop_cm = cnic_cm_stop_bnx2_hw;
+	cp->enable_int = cnic_enable_bnx2_int;
+	cp->disable_int_sync = cnic_disable_bnx2_int_sync;
+	cp->close_conn = cnic_close_bnx2_conn;
+
+#if (CNIC_ISCSI_OOO_SUPPORT)
+	cp->stop_ooo_hw = cnic_stop_bnx2_ooo_hw;
+#endif
+	return cdev;
+
+cnic_err:
+	dev_put(dev);
+	return NULL;
+}
+
+static struct cnic_dev *init_bnx2x_cnic(struct net_device *dev)
+{
+	struct pci_dev *pdev;
+	struct cnic_dev *cdev;
+	struct cnic_local *cp;
+	struct cnic_eth_dev *ethdev = NULL;
+	struct cnic_eth_dev *(*probe)(struct net_device *) = NULL;
+
+	probe = symbol_get(bnx2x_cnic_probe2);
+	if (probe) {
+		ethdev = (*probe)(dev);
+		symbol_put(bnx2x_cnic_probe2);
+	}
+	if (!ethdev)
+		return NULL;
+
+	if (ethdev->version != CNIC_ETH_DEV_VER) {
+		pr_warn("bnx2x not compatible with cnic expecting: 0x%x got: 0x%x\n",
+			CNIC_ETH_DEV_VER, ethdev->version);
+		return NULL;
+	}
+
+	pdev = ethdev->pdev;
+	if (!pdev)
+		return NULL;
+
+	dev_hold(dev);
+	cdev = cnic_alloc_dev(dev, pdev);
+	if (cdev == NULL) {
+		dev_put(dev);
+		return NULL;
+	}
+
+	set_bit(CNIC_F_BNX2X_CLASS, &cdev->flags);
+	cdev->submit_kwqes = cnic_submit_bnx2x_kwqes;
+
+	cp = cdev->cnic_priv;
+	cp->ethdev = ethdev;
+	cdev->pcidev = pdev;
+	cp->chip_id = ethdev->chip_id;
+
+	cdev->stats_addr = ethdev->addr_drv_info_to_mcp;
+
+	if (!(ethdev->drv_state & CNIC_DRV_STATE_NO_ISCSI))
+		cdev->max_iscsi_conn = ethdev->max_iscsi_conn;
+	if (BNX2X_CHIP_IS_E2_PLUS(cp->chip_id) &&
+	    !(ethdev->drv_state & CNIC_DRV_STATE_NO_FCOE))
+		cdev->max_fcoe_conn = ethdev->max_fcoe_conn;
+
+	if (cdev->max_fcoe_conn > BNX2X_FCOE_NUM_CONNECTIONS)
+		cdev->max_fcoe_conn = BNX2X_FCOE_NUM_CONNECTIONS;
+
+	memcpy(cdev->mac_addr, ethdev->iscsi_mac, 6);
+
+	cp->cnic_ops = &cnic_bnx2x_ops;
+	cp->start_hw = cnic_start_bnx2x_hw;
+	cp->stop_hw = cnic_stop_bnx2x_hw;
+	cp->setup_pgtbl = cnic_setup_page_tbl_le;
+	cp->alloc_resc = cnic_alloc_bnx2x_resc;
+	cp->free_resc = cnic_free_resc;
+	cp->start_cm = cnic_cm_init_bnx2x_hw;
+	cp->stop_cm = cnic_cm_stop_bnx2x_hw;
+	cp->enable_int = cnic_enable_bnx2x_int;
+	cp->disable_int_sync = cnic_disable_bnx2x_int_sync;
+	if (BNX2X_CHIP_IS_E2_PLUS(cp->chip_id))
+		cp->ack_int = cnic_ack_bnx2x_e2_msix;
+	else
+		cp->ack_int = cnic_ack_bnx2x_msix;
+	cp->close_conn = cnic_close_bnx2x_conn;
+#if (CNIC_ISCSI_OOO_SUPPORT)
+	cp->stop_ooo_hw = cnic_stop_bnx2x_ooo_hw;
+#endif
+	return cdev;
+}
+
+static struct cnic_dev *is_cnic_dev(struct net_device *dev)
+{
+	struct ethtool_drvinfo drvinfo;
+	struct cnic_dev *cdev = NULL;
+
+	if (dev->ethtool_ops && dev->ethtool_ops->get_drvinfo) {
+		memset(&drvinfo, 0, sizeof(drvinfo));
+		dev->ethtool_ops->get_drvinfo(dev, &drvinfo);
+
+		if (!strcmp(drvinfo.driver, "bnx2"))
+			cdev = init_bnx2_cnic(dev);
+		if (!strcmp(drvinfo.driver, "bnx2x"))
+			cdev = init_bnx2x_cnic(dev);
+		if (cdev) {
+			write_lock(&cnic_dev_lock);
+			list_add(&cdev->list, &cnic_dev_list);
+			write_unlock(&cnic_dev_lock);
+		}
+	}
+	return cdev;
+}
+
+static void cnic_rcv_netevent(struct cnic_local *cp, unsigned long event,
+			      u16 vlan_id)
+{
+	int if_type;
+
+	rcu_read_lock();
+	for (if_type = 0; if_type < MAX_CNIC_ULP_TYPE; if_type++) {
+		struct cnic_ulp_ops *ulp_ops;
+		void *ctx;
+
+		ulp_ops = rcu_dereference(cp->ulp_ops[if_type]);
+		if (!ulp_ops || !ulp_ops->indicate_netevent)
+			continue;
+
+		ctx = cp->ulp_handle[if_type];
+
+		ulp_ops->indicate_netevent(ctx, event, vlan_id);
+	}
+	rcu_read_unlock();
+}
+
+/**
+ * netdev event handler
+ */
+static int cnic_netdev_event(struct notifier_block *this, unsigned long event,
+							 void *ptr)
+{
+	struct net_device *netdev = ptr;
+	struct cnic_dev *dev;
+	int new_dev = 0;
+
+	dev = cnic_from_netdev(netdev);
+
+	if (!dev && (event == NETDEV_REGISTER || netif_running(netdev))) {
+		/* Check for the hot-plug device */
+		dev = is_cnic_dev(netdev);
+		if (dev) {
+			new_dev = 1;
+			cnic_hold(dev);
+		}
+	}
+	if (dev) {
+		struct cnic_local *cp = dev->cnic_priv;
+
+		if (new_dev)
+			cnic_ulp_init(dev);
+		else if (event == NETDEV_UNREGISTER)
+			cnic_ulp_exit(dev);
+
+		if (event == NETDEV_UP || (new_dev && netif_running(netdev))) {
+			if (cnic_register_netdev(dev) != 0) {
+				cnic_put(dev);
+				goto done;
+			}
+			if (!cnic_start_hw(dev))
+				cnic_ulp_start(dev);
+		}
+
+		cnic_rcv_netevent(cp, event, 0);
+
+		if (event == NETDEV_GOING_DOWN) {
+			cnic_ulp_stop(dev);
+			cnic_stop_hw(dev);
+			cnic_unregister_netdev(dev);
+		} else if (event == NETDEV_UNREGISTER) {
+			write_lock(&cnic_dev_lock);
+			list_del_init(&dev->list);
+			write_unlock(&cnic_dev_lock);
+
+			cnic_put(dev);
+			cnic_free_dev(dev);
+			goto done;
+		}
+		cnic_put(dev);
+	} else {
+		struct net_device *realdev;
+		u16 vid;
+
+		vid = cnic_get_vlan(netdev, &realdev);
+		if (realdev) {
+			dev = cnic_from_netdev(realdev);
+			if (dev) {
+				vid |= VLAN_TAG_PRESENT;
+				cnic_rcv_netevent(dev->cnic_priv, event, vid);
+				cnic_put(dev);
+			}
+		}
+	}
+done:
+	return NOTIFY_DONE;
+}
+
+static struct notifier_block cnic_netdev_notifier = {
+	.notifier_call = cnic_netdev_event
+};
+
+#if (CNIC_ISCSI_OOO_SUPPORT)
+/* General OOO engine initialization after it is enabled successfully */
+static void ooo_init(struct iooo_mgmt *im)
+{
+	int i;
+
+	/* Defaults */
+	im->flags = 0;
+
+	/* Rings */
+	im->rxr.rx_max_ring = 0;
+	im->txr.tx_max_ring = 0;
+
+	/* Packet descriptors */
+	for (i = 0; i < MAX_OOO_RX_DESC_CNT; i++)
+		im->rxr.rx_pkt_desc[i] = NULL;
+	for (i = 0; i < MAX_OOO_TX_DESC_CNT; i++)
+		im->txr.tx_pkt_desc[i] = NULL;
+	im->blk_prod = MAX_IOOO_BLOCK_SUPPORTED - 1;
+	im->blk_cons = 0;
+
+	/* Blocks */
+	for (i = 0; i < MAX_IOOO_BLOCK_SUPPORTED; i++) {
+		im->blk_alloc[i] = i;
+		im->blk[i].id = i;
+		im->blk[i].pkt_cnt = 0;
+		INIT_LIST_HEAD(&im->blk[i].pd_head.list);
+	}
+
+	/* Pending queues */
+	INIT_LIST_HEAD(&im->txr.tx_pend_pd_head.list);
+	im->txr.tx_pend_pd_cnt = 0;
+
+	/* Statistics */
+	im->txr.tx_total_pkt_sent = 0;
+}
+
+static int ooo_free_buf_single(struct cnic_dev *dev,
+			       struct iooo_pkt_desc *pd)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+
+	if (!pd) {
+		printk(KERN_ERR PFX "%s: ooo_free_buf_single: pd = NULL!\n",
+			dev->netdev->name);
+		return -EINVAL;
+	}
+	if (pd->buf) {
+		dma_free_coherent(&dev->pcidev->dev,
+				  cp->iooo_mgmr.pkt_buf_size,
+				  pd->buf, pd->mapping);
+		pd->buf = NULL;
+	}
+	if (pd->skb) {
+		if (cnic_reuse_ooo_pkt(pd->skb, dev))
+			printk(KERN_ERR PFX "%s: ooo_free_buf_single: Error "
+				"freeing skb\n", dev->netdev->name);
+		pd->skb = NULL;
+	}
+	kfree(pd);
+
+	return 0;
+}
+
+static void ooo_free_tx_pend(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct iooo_mgmt *im = &cp->iooo_mgmr;
+	struct iooo_pkt_desc *pd;
+	struct list_head *pos, *q;
+
+	list_for_each_safe(pos, q, &im->txr.tx_pend_pd_head.list) {
+		pd = list_entry(pos, struct iooo_pkt_desc, list);
+		list_del(pos);
+		if (ooo_free_buf_single(dev, pd))
+			printk(KERN_ERR PFX "%s: ooo_free_tx_pend: Error "
+				"freeing tx pend list\n", dev->netdev->name);
+		im->txr.tx_pend_pd_cnt--;
+	}
+	if (im->txr.tx_pend_pd_cnt)
+		printk(KERN_ERR PFX "%s: ooo_free_tx_pend: tx_pend_pd_cnt = %d"
+			"\n", dev->netdev->name, im->txr.tx_pend_pd_cnt);
+}
+
+static int ooo_free_blk(struct cnic_dev *dev, struct iooo_block *blk)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct iooo_mgmt *im = &cp->iooo_mgmr;
+	struct list_head *pos, *q;
+	struct iooo_pkt_desc *pd;
+
+	if (test_bit(IOOO_BLK_EMPTY, &im->flags)) {
+		printk(KERN_ERR PFX "%s: ooo_free_blk: Freeing an empty blk "
+			"list?!\n", dev->netdev->name);
+		return -EINVAL;
+	}
+
+	if (blk->pkt_cnt) {
+		list_for_each_safe(pos, q, &blk->pd_head.list) {
+			pd = list_entry(pos, struct iooo_pkt_desc, list);
+			list_del(pos);
+			ooo_free_buf_single(dev, pd);
+			blk->pkt_cnt--;
+		}
+		if (blk->pkt_cnt) {
+			printk(KERN_ERR PFX "%s: ooo_free_blk: blk free error! "
+				"pkt_cnt=%d\n", dev->netdev->name,
+				blk->pkt_cnt);
+			blk->pkt_cnt = 0;
+		}
+	}
+
+	im->blk_prod++;
+	if (im->blk_prod >= MAX_IOOO_BLOCK_SUPPORTED)
+		im->blk_prod = 0;
+
+	im->blk_alloc[im->blk_prod] = blk->id;
+
+	if (im->blk_cons == im->blk_prod)
+		set_bit(IOOO_BLK_EMPTY, &im->flags);
+	clear_bit(IOOO_BLK_FULL, &im->flags);
+	return 0;
+}
+
+static void ooo_free_tx_buf(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct iooo_tx_ring_info *txr = &cp->iooo_mgmr.txr;
+	u32 hw_tx_cons, sw_cons;
+	struct iooo_pkt_desc *pd;
+
+	if (!test_bit(IOOO_START_TX_FREE, &cp->iooo_mgmr.flags))
+		return;
+
+	hw_tx_cons = *txr->tx_cons_idx_ptr;
+	while (hw_tx_cons != txr->tx_cons) {
+		sw_cons = txr->tx_cons % TX_DESC_CNT;
+		if (sw_cons != MAX_TX_DESC_CNT) {
+			pd = txr->tx_pkt_desc[txr->tx_cons &
+				(txr->tx_desc_cnt_max - 1)];
+			txr->tx_pkt_desc[txr->tx_cons &
+				(txr->tx_desc_cnt_max - 1)] = NULL;
+			txr->tx_desc_cnt++;
+			if (pd)
+				ooo_free_buf_single(dev, pd);
+		}
+		txr->tx_cons++;
+	}
+}
+
+static void ooo_free_all_buf(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct iooo_mgmt *im = &cp->iooo_mgmr;
+	int i;
+
+	for (i = 0; i < MAX_OOO_RX_DESC_CNT; i++)
+		if (im->rxr.rx_pkt_desc[i]) {
+			ooo_free_buf_single(dev, im->rxr.rx_pkt_desc[i]);
+			im->rxr.rx_pkt_desc[i] = NULL;
+		}
+
+	for (i = 0; i < MAX_IOOO_BLOCK_SUPPORTED; i++)
+		if (im->blk[i].pkt_cnt)
+			ooo_free_blk(dev, &im->blk[i]);
+
+	for (i = 0; i < MAX_OOO_TX_DESC_CNT; i++)
+		if (im->txr.tx_pkt_desc[i]) {
+			ooo_free_buf_single(dev, im->txr.tx_pkt_desc[i]);
+			im->txr.tx_pkt_desc[i] = NULL;
+		}
+
+	ooo_free_tx_pend(dev);
+}
+
+/* Whenever the rxbd's prod - cons < 1/2 MAX, replenish
+   gfp presents ATOMIC vs. KERNEL | COMP (sleep-able) */
+static int ooo_alloc_buf_single(struct cnic_dev *dev, int gfp,
+				 struct iooo_pkt_desc **pd, int len)
+{
+	*pd = kmalloc(sizeof(struct iooo_pkt_desc), gfp);
+	if (*pd == NULL) {
+		printk(KERN_ERR PFX "%s: ooo_alloc_buf_single: Failed to alloc "
+			"rx pkt_desc\n", dev->netdev->name);
+		return -ENOMEM;
+	}
+
+	(*pd)->buf = NULL;
+	if (test_bit(CNIC_F_BNX2_CLASS, &dev->flags)) {
+		(*pd)->buf = dma_alloc_coherent(&dev->pcidev->dev, len,
+						&(*pd)->mapping, gfp);
+		if (!(*pd)->buf) {
+			printk(KERN_ERR PFX "%s: ooo_alloc_buf_single: Failed "
+				"to alloc rx buf\n", dev->netdev->name);
+			kfree(*pd);
+			return -ENOMEM;
+		}
+	}
+
+	(*pd)->skb = NULL;
+
+	return 0;
+}
+
+static int ooo_alloc_blk(struct iooo_mgmt *im)
+{
+	int ret;
+
+	if (test_bit(IOOO_BLK_FULL, &im->flags))
+		return MAX_IOOO_BLOCK_SUPPORTED;
+
+	ret = im->blk_alloc[im->blk_cons];
+
+	im->blk[ret].pkt_cnt = 0;
+
+	im->blk_cons++;
+	if (im->blk_cons >= MAX_IOOO_BLOCK_SUPPORTED)
+		im->blk_cons = 0;
+	if (im->blk_cons == im->blk_prod)
+		set_bit(IOOO_BLK_FULL, &im->flags);
+	clear_bit(IOOO_BLK_EMPTY, &im->flags);
+	return ret;
+}
+
+static int ooo_alloc_rx_buf(struct cnic_dev *dev, int gfp)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct iooo_rx_ring_info *rxr = &cp->iooo_mgmr.rxr;
+	struct iooo_pkt_desc *pd = NULL;
+	struct rx_bd *rxbd;
+	u32 ring, sw_rx_prod, want;
+	int ret = 0, cnt = 0;
+
+	want = rxr->rx_desc_cnt_max - rxr->rx_desc_cnt -
+	       (rxr->rx_desc_cnt_max / RX_DESC_CNT);
+
+	while (want > cnt) {
+		ring = (rxr->rx_prod & (rxr->rx_desc_cnt_max - 1)) /
+			RX_DESC_CNT;
+		sw_rx_prod = rxr->rx_prod % RX_DESC_CNT;
+		rxbd = &rxr->rx_desc_ring[ring][sw_rx_prod];
+		if (sw_rx_prod != MAX_RX_DESC_CNT) {
+			if ((gfp != GFP_KERNEL) &&
+			    (rxr->rx_desc_cnt >= want >> 1))
+				goto done;
+
+			ret = ooo_alloc_buf_single(dev, gfp, &pd,
+						   cp->iooo_mgmr.pkt_buf_size);
+			if (ret)
+				goto done;
+
+			rxr->rx_prod_bseq += cp->iooo_mgmr.pkt_buf_size;
+			rxr->rx_pkt_desc[rxr->rx_prod &
+				(rxr->rx_desc_cnt_max - 1)] = pd;
+			rxbd->rx_bd_haddr_hi = (u64) pd->mapping >> 32;
+			rxbd->rx_bd_haddr_lo = (u64) pd->mapping & 0xffffffff;
+			rxr->rx_desc_cnt++;
+			cnt++;
+		}
+		rxr->rx_prod++;
+	}
+done:
+	CNIC_WR16(dev, rxr->rx_bidx_addr, rxr->rx_prod);
+	CNIC_WR(dev, rxr->rx_bseq_addr, rxr->rx_prod_bseq);
+	return ret;
+}
+
+static void ooo_free_ring(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct iooo_tx_ring_info *txr = &cp->iooo_mgmr.txr;
+	struct iooo_rx_ring_info *rxr = &cp->iooo_mgmr.rxr;
+	int i;
+
+	for (i = 0; i < rxr->rx_max_ring; i++) {
+		if (rxr->rx_desc_ring[i]) {
+			dma_free_coherent(&dev->pcidev->dev,
+					BCM_PAGE_SIZE,
+					rxr->rx_desc_ring[i],
+					rxr->rx_desc_mapping[i]);
+			rxr->rx_desc_ring[i] = NULL;
+		}
+	}
+	for (i = 0; i < txr->tx_max_ring; i++) {
+		if (txr->tx_desc_ring[i]) {
+			dma_free_coherent(&dev->pcidev->dev,
+					BCM_PAGE_SIZE,
+					txr->tx_desc_ring[i],
+					txr->tx_desc_mapping[i]);
+			txr->tx_desc_ring[i] = NULL;
+		}
+	}
+}
+
+static int ooo_alloc_ring(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct iooo_tx_ring_info *txr = &cp->iooo_mgmr.txr;
+	struct iooo_rx_ring_info *rxr = &cp->iooo_mgmr.rxr;
+	int i;
+
+	rxr->rx_max_ring = rxr->rx_desc_cnt_max / RX_DESC_CNT;
+	if (rxr->rx_desc_cnt_max % RX_DESC_CNT)
+		++(rxr->rx_max_ring);
+	for (i = 0; i < rxr->rx_max_ring; i++) {
+		rxr->rx_desc_ring[i] = dma_alloc_coherent(&dev->pcidev->dev,
+					  BCM_PAGE_SIZE,
+					  &rxr->rx_desc_mapping[i],
+					  GFP_KERNEL);
+		if (!rxr->rx_desc_ring[i])
+			goto free;
+	}
+
+	txr->tx_max_ring = txr->tx_desc_cnt_max / TX_DESC_CNT;
+	if (txr->tx_desc_cnt_max % TX_DESC_CNT)
+		++(txr->tx_max_ring);
+	for (i = 0; i < txr->tx_max_ring; i++) {
+		txr->tx_desc_ring[i] = dma_alloc_coherent(&dev->pcidev->dev,
+					  BCM_PAGE_SIZE,
+					  &txr->tx_desc_mapping[i],
+					  GFP_KERNEL);
+		if (!txr->tx_desc_ring[i])
+			goto free;
+	}
+	return 0;
+
+free:
+	ooo_free_ring(dev);
+	return -ENOMEM;
+}
+
+static void ooo_init_rings(struct iooo_mgmt *im)
+{
+	struct iooo_rx_ring_info *rxr = &im->rxr;
+	struct iooo_tx_ring_info *txr = &im->txr;
+	struct tx_bd *txbd;
+	u32 next;
+	int i, j;
+
+	for (i = 0; i < rxr->rx_max_ring; i++) {
+		next = i + 1;
+		if (next >= rxr->rx_max_ring)
+			next = 0;
+		for (j = 0; j < MAX_RX_DESC_CNT; j++)
+			cnic_set_bnx2_rxbd(&rxr->rx_desc_ring[i][j],
+					   im->pkt_buf_size, 0);
+		cnic_set_bnx2_rxbd(&rxr->rx_desc_ring[i][j],
+				   BCM_PAGE_SIZE,
+				   rxr->rx_desc_mapping[next]); 
+	}
+	for (i = 0; i < txr->tx_max_ring; i++) {
+		next = i + 1;
+		if (next >= txr->tx_max_ring)
+			next = 0;
+		for (j = 0; j < MAX_TX_DESC_CNT; j++) {
+			txbd = &txr->tx_desc_ring[i][j];
+			txbd->tx_bd_vlan_tag_flags = TX_BD_FLAGS_START |
+						     TX_BD_FLAGS_END;
+		}
+		txbd = &txr->tx_desc_ring[i][MAX_TX_DESC_CNT];
+		txbd->tx_bd_haddr_hi =
+				(u64) txr->tx_desc_mapping[next] >> 32;
+		txbd->tx_bd_haddr_lo =
+				(u64) txr->tx_desc_mapping[next] & 0xffffffff;
+	}
+}
+
+/* Actual placement of the pkt to the txbd */
+static int ooo_send(struct iooo_tx_ring_info *txr,
+		    struct iooo_pkt_desc *pd)
+{
+	struct tx_bd *txbd;
+	u32 ring, sw_tx_prod;
+	int i;
+
+	dma_addr_t txpd_mapping;
+	if (!txr->tx_desc_cnt)
+		return -ENOMEM;
+
+	for (i = 0; i < 2; i++) {
+		ring = (txr->tx_prod & (txr->tx_desc_cnt_max - 1)) /
+			TX_DESC_CNT;
+		sw_tx_prod = txr->tx_prod % TX_DESC_CNT;
+		txbd = &txr->tx_desc_ring[ring][sw_tx_prod];
+		if (sw_tx_prod != MAX_TX_DESC_CNT) {
+			txr->tx_pkt_desc[txr->tx_prod &
+				(txr->tx_desc_cnt_max - 1)] = pd;
+			txpd_mapping = pd->mapping + BNX2_RX_OFFSET;
+			txbd->tx_bd_mss_nbytes = pd->pkt_len;
+			txbd->tx_bd_haddr_hi = (u64) txpd_mapping >> 32;
+			txbd->tx_bd_haddr_lo = (u64) txpd_mapping & 0xffffffff;
+			txr->tx_prod_bseq += pd->pkt_len;
+			txr->tx_prod++;
+			txr->tx_desc_cnt--;
+			txr->tx_total_pkt_sent++;
+			return 0;
+		} else
+			txr->tx_prod++;
+	}
+	return 0;
+}
+
+static int ooo_send_bnx2x(struct cnic_dev *dev, struct iooo_tx_ring_info *txr,
+			  struct iooo_pkt_desc *pd)
+{
+	int ret;
+
+	ret = cnic_send_ooo_pkt(pd->skb, dev);
+	if (NETDEV_TX_OK == ret) {
+		txr->tx_total_pkt_sent++;
+		/* Once sent, cnic no longer owns the skb */
+		pd->skb = NULL;
+		ret = 0;
+	} else
+		printk(KERN_ERR PFX "ooo_send_bnx2x: send_ooo ret=%d\n", ret);
+
+	ooo_free_buf_single(dev, pd);
+
+	return ret;
+}
+
+static void ooo_send_pend(struct cnic_dev *dev, struct iooo_tx_ring_info *txr)
+{
+	struct iooo_pkt_desc *pd;
+	struct list_head *pos, *q;
+	int cnt = 0;
+
+	if (list_empty(&txr->tx_pend_pd_head.list)) {
+		if (txr->tx_pend_pd_cnt)
+			printk(KERN_ERR PFX "%s: ooo_send_pend: pend cnt out "
+				"of sync=%d\n", dev->netdev->name,
+				txr->tx_pend_pd_cnt);
+		return;
+	}
+	list_for_each_safe(pos, q, &txr->tx_pend_pd_head.list) {
+		pd = list_entry(pos, struct iooo_pkt_desc, list);
+		list_del(pos);
+		if (test_bit(CNIC_F_BNX2_CLASS, &dev->flags))
+			ooo_send(txr, pd);
+		else
+			ooo_send_bnx2x(dev, txr, pd);
+
+		txr->tx_pend_pd_cnt--;
+		cnt++;
+	}
+	if (test_bit(CNIC_F_BNX2_CLASS, &dev->flags) && cnt) {
+		CNIC_WR16(dev, txr->tx_bidx_addr, txr->tx_prod);
+		CNIC_WR(dev, txr->tx_bseq_addr, txr->tx_prod_bseq);
+	}
+}
+
+static void ooo_send_pkt(struct iooo_tx_ring_info *txr,
+			 struct iooo_pkt_desc *pd)
+{
+	list_add_tail(&pd->list, &txr->tx_pend_pd_head.list);
+	txr->tx_pend_pd_cnt++;
+}
+
+static int ooo_send_blk(struct iooo_tx_ring_info *txr,
+			struct iooo_block *blk)
+{
+	struct iooo_pkt_desc *pd;
+	struct list_head *pos, *q;
+
+	list_for_each_safe(pos, q, &blk->pd_head.list) {
+		pd = list_entry(pos, struct iooo_pkt_desc, list);
+		list_del(pos);
+		ooo_send_pkt(txr, pd);
+		blk->pkt_cnt--;
+	}
+	return blk->pkt_cnt;
+}
+
+static void ooo_engine(struct cnic_dev *dev, struct iooo_pkt_desc *pkt_desc,
+		       u32 l5_cid)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct iooo_mgmt *im = &cp->iooo_mgmr;
+	struct cnic_context *ctx = &cp->ctx_tbl[l5_cid];
+	struct cnic_iscsi *iscsi = ctx->proto.iscsi;
+	struct iooo_block *pen = &iscsi->pen;
+	struct iooo_block *blk, *blk_nxt;
+	struct list_head *pos, *q;
+	int blk_idx, new_blk_idx;
+/*
+	printk("cnic: cid=0x%x op %d blk %d dblk %d size %d bcnt=%d\n",
+		im->hsi.iscsi_cid, im->hsi.opcode, im->hsi.blk_idx,
+		im->hsi.drop_blk_idx, im->hsi.drop_size,
+		iscsi->blk_cnt);
+*/
+	if (im->hsi.drop_size) {
+		if (!im->hsi.drop_blk_idx || list_empty(&pen->list)) {
+			printk(KERN_ERR PFX "%s: ooo_engine: drop_blk_idx=%d "
+				"or list empty\n", dev->netdev->name,
+				im->hsi.drop_blk_idx);
+			goto orphan;
+		}
+		blk_idx = 1;
+		list_for_each_safe(pos, q, &pen->list) {
+			if (im->hsi.drop_blk_idx == blk_idx++) {
+				blk = list_entry(pos, struct iooo_block, list);
+				ooo_free_blk(dev, blk);
+				iscsi->blk_cnt--;
+				im->hsi.drop_blk_idx++;
+				list_del(pos);
+				if (!(--im->hsi.drop_size))
+					break;
+			}
+		}
+	}
+
+	blk = NULL;
+	switch (im->hsi.opcode) {
+	case OOO_OPCODE_ADD_RIGHT:
+		blk_idx = 1;
+		list_for_each_entry(blk, &pen->list, list) {
+			if (im->hsi.blk_idx == blk_idx++)
+				break;
+		}
+		if (list_empty(&pen->list) || im->hsi.blk_idx != --blk_idx) {
+			printk(KERN_ERR PFX "%s: ooo_engine: can't find block "
+				"to add right to!\n", dev->netdev->name);
+			goto orphan;
+		}
+		list_add_tail(&pkt_desc->list, &blk->pd_head.list);
+		blk->pkt_cnt++;
+		break;
+
+	case OOO_OPCODE_ADD_LEFT:
+		blk_idx = 1;
+		list_for_each_entry(blk, &pen->list, list) {
+			if (im->hsi.blk_idx == blk_idx++)
+				break;
+		}
+		if (list_empty(&pen->list) || im->hsi.blk_idx != --blk_idx) {
+			printk(KERN_ERR PFX "%s: ooo_engine: can't find block "
+				"to add left to!\n", dev->netdev->name);
+			goto orphan;
+		}
+		list_add(&pkt_desc->list, &blk->pd_head.list);
+		blk->pkt_cnt++;
+		break;
+
+	case OOO_OPCODE_ADD_NEW:
+		new_blk_idx = ooo_alloc_blk(im);
+		if (MAX_IOOO_BLOCK_SUPPORTED == new_blk_idx) {
+			printk(KERN_ERR PFX "%s: ooo_engine: max blk reached!"
+				"\n", dev->netdev->name);
+			goto orphan;
+		}
+		/* Find blk to add to */
+		if (im->hsi.blk_idx == 1)
+			blk = pen;
+		else {
+			blk_idx = 2;
+			list_for_each_entry(blk, &pen->list, list) {
+				if (im->hsi.blk_idx == blk_idx++)
+					break;
+			}
+		}
+		list_add(&im->blk[new_blk_idx].list, &blk->list);
+		iscsi->blk_cnt++;
+
+		/* Attach pkt to blk */
+		blk = &im->blk[new_blk_idx];
+		list_add(&pkt_desc->list, &blk->pd_head.list);
+		blk->pkt_cnt++;
+		break;
+
+	case OOO_OPCODE_JOIN:
+		if (!im->hsi.blk_idx) {
+			if (list_empty(&pen->list)) {
+				printk(KERN_ERR PFX "%s: ooo_engine: can't find"
+					" block to join 0!\n",
+					dev->netdev->name);
+				goto orphan;
+			}
+			blk = list_first_entry(&pen->list, struct iooo_block,
+				list);
+			list_add(&pkt_desc->list, &blk->pd_head.list);
+			blk->pkt_cnt++;
+			if (ooo_send_blk(&im->txr, blk)) {
+				printk(KERN_ERR PFX "%s: ooo_send_blk: blk sent"
+					"err! pkt_cnt=%d\n", dev->netdev->name,
+					blk->pkt_cnt);
+				blk->pkt_cnt = 0;
+			}
+			ooo_free_blk(dev, blk);
+			iscsi->blk_cnt--;
+			list_del(&blk->list);
+		} else {
+			blk_idx = 1;
+			blk = blk_nxt = NULL;
+			list_for_each_entry(blk, &pen->list, list) {
+				if (im->hsi.blk_idx == blk_idx++) {
+					blk_nxt = list_entry(blk->list.next,
+						struct iooo_block, list);
+					break;
+				}
+			}
+			if (!blk_nxt || !blk) {
+				printk(KERN_ERR PFX "%s: ooo_engine: can't find"
+					" block to join!\n", dev->netdev->name);
+				goto orphan;
+			}
+			list_add_tail(&pkt_desc->list, &blk->pd_head.list);
+			blk->pkt_cnt++;
+			/* Append all the pkts from the nxt blk to this blk */
+			list_for_each_safe(pos, q, &blk_nxt->pd_head.list) {
+				list_move_tail(pos, &blk->pd_head.list);
+				blk->pkt_cnt++;
+				blk_nxt->pkt_cnt--;
+			}
+			ooo_free_blk(dev, blk_nxt);
+			iscsi->blk_cnt--;
+			list_del(&blk_nxt->list);
+		}
+		break;
+
+	case OOO_OPCODE_ADD_PEN:
+		ooo_send_pkt(&im->txr, pkt_desc);
+		break;
+
+	default:
+		break;
+	}
+
+	return;
+
+orphan:
+	if (pkt_desc)
+		ooo_free_buf_single(dev, pkt_desc);
+}
+
+static void ooo_handle_rx_event(struct cnic_dev *dev,
+			       struct iooo_pkt_desc *pd)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct iooo_mgmt *im = &cp->iooo_mgmr;
+	u32 l5_cid;
+
+	/* For 0 len placement, just free the pkt */
+	if (unlikely(!pd->pkt_len)) {
+		ooo_free_buf_single(dev, pd);
+		return;
+	}
+
+	if (cnic_get_l5_cid(cp, im->hsi.iscsi_cid, &l5_cid) == 0) {
+		if (l5_cid >= MAX_CM_SK_TBL_SZ) {
+			printk(KERN_ERR PFX "%s: ooo_handle_rx_event: bad "
+				"l5_cid=%d\n", dev->netdev->name, l5_cid);
+			ooo_free_buf_single(dev, pd);
+		} else
+			ooo_engine(dev, pd, l5_cid);
+	} else {
+		printk(KERN_ERR PFX "%s: ooo_handle_rx_event: get l5_cid failed"
+			"\n", dev->netdev->name);
+		ooo_free_buf_single(dev, pd);
+	}
+}
+
+static void cnic_handle_bnx2_ooo_rx_event(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct iooo_mgmt *im = &cp->iooo_mgmr;
+	struct iooo_pkt_desc *pkt_desc;
+	struct bnx2_ooo_fhdr *pkt_hsi;
+	u16 hw_rx_cons, sw_cons;
+
+	/* Process only if ready to start handler */
+	if (unlikely(!test_bit(IOOO_START_HANDLER, &im->flags)))
+		return;
+
+	/* Handle RX placement */
+	hw_rx_cons = *im->rxr.rx_cons_idx_ptr;
+	while (hw_rx_cons != im->rxr.rx_cons) {
+		sw_cons = im->rxr.rx_cons % RX_DESC_CNT;
+		if (sw_cons != MAX_RX_DESC_CNT) {
+			pkt_desc = im->rxr.rx_pkt_desc[im->rxr.rx_cons &
+				(im->rxr.rx_desc_cnt_max - 1)];
+			if (!pkt_desc) {
+				printk(KERN_ERR PFX "cnic_handle_bnx2_ooo_rx"
+				       "_event: pkt_desc = NULL?! rx_cons=%d\n",
+					im->rxr.rx_cons &
+					(im->rxr.rx_desc_cnt_max - 1));
+				goto out;
+			}
+			im->rxr.rx_pkt_desc[im->rxr.rx_cons &
+				(im->rxr.rx_desc_cnt_max - 1)] = NULL;
+
+			pkt_hsi = (struct bnx2_ooo_fhdr *)pkt_desc->buf;
+			pkt_desc->pkt_len = pkt_hsi->pkt_len;
+			im->hsi.iscsi_cid = pkt_hsi->icid;
+			im->hsi.opcode = pkt_hsi->opcode;
+			im->hsi.blk_idx = pkt_hsi->blk_idx;
+			im->hsi.drop_size = pkt_hsi->drop_size;
+			im->hsi.drop_blk_idx = pkt_hsi->drop_blk_idx;
+
+			ooo_handle_rx_event(dev, pkt_desc);
+
+			im->rxr.rx_desc_cnt--;
+		}
+out:
+		im->rxr.rx_cons++;
+	}
+
+	/* If already stopped, keep processing the rx queue but do not alloc
+	   more buffers */
+
+	if (unlikely(!test_bit(IOOO_START, &im->flags)))
+		return;
+
+	ooo_alloc_rx_buf(dev, GFP_ATOMIC);
+}
+
+static void cnic_handle_bnx2_ooo_tx_event(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct iooo_mgmt *im = &cp->iooo_mgmr;
+	u16 hw_cons, sw_cons;
+
+	if (unlikely(!test_bit(IOOO_START_HANDLER, &im->flags)))
+		return;
+
+	/* Handle fwd ring tx completion */
+	hw_cons = *im->txr.tx_cons_idx_ptr;
+	sw_cons = im->txr.tx_cons;
+	if (sw_cons == hw_cons && !im->txr.tx_pend_pd_cnt)
+		return;
+
+	/* Must wait for at least 1 tx completion before attempting to free */
+	if (!test_bit(IOOO_START_TX_FREE, &cp->iooo_mgmr.flags) &&
+	    im->txr.tx_desc_cnt < (im->txr.tx_desc_cnt_max >> 1))
+		set_bit(IOOO_START_TX_FREE, &cp->iooo_mgmr.flags);
+
+	ooo_free_tx_buf(dev);
+
+	if (unlikely(!test_bit(IOOO_START, &im->flags)))
+		return;
+
+	ooo_send_pend(dev, &im->txr);
+}
+
+static void cnic_handle_bnx2x_ooo_rx_event(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct iooo_mgmt *im = &cp->iooo_mgmr;
+	struct iooo_pkt_desc *pkt_desc;
+	struct iooo_hsi_bnx2x *pkt_hsi;
+	struct cnic_ooo_cqe ooo_cqe;
+	int ret;
+	u16 hw_cons, sw_cons;
+
+	/* Process only if ready to start */
+	if (unlikely(!test_bit(IOOO_START, &im->flags)))
+		return;
+
+	hw_cons = *im->rxr.rx_cons_idx_ptr;
+	sw_cons = im->rxr.rx_cons;
+	if (sw_cons == hw_cons)
+		return;
+
+	im->rxr.rx_cons = hw_cons;
+
+	ooo_cqe.cqe_type = 0xffffffff;
+	/* Handle the rx cqe */
+	do {
+		ret = cnic_get_ooo_cqe(dev, &ooo_cqe);
+		if (ret < 0) {
+			printk(KERN_ERR PFX "cnic_handle_bnx2x_ooo_rx_event"
+				": ERROR at retrieving OOO CQE\n");
+			goto error;
+		}
+		if (0xffffffff == ooo_cqe.cqe_type)
+			goto empty;
+		else if (OOO_BD_CQE != ooo_cqe.cqe_type) {
+			printk(KERN_ERR PFX "cnic_handle_bnx2x_ooo_rx_event"
+				": OOO CQE type=%d!\n",	ooo_cqe.cqe_type);
+			goto reuse;
+		}
+		if (!ooo_alloc_buf_single(dev, GFP_ATOMIC, &pkt_desc, 0)) {
+			pkt_desc->skb = ooo_cqe.u.cqe.pkt_desc;
+			pkt_desc->pkt_len = pkt_desc->skb->len;
+			pkt_hsi = (struct iooo_hsi_bnx2x *)
+				   ooo_cqe.u.cqe.raw_data;
+			/* Must mask out for port identifier (bit 23) */
+			im->hsi.iscsi_cid = BNX2X_SW_CID(pkt_hsi->iscsi_cid);
+			im->hsi.opcode = pkt_hsi->opcode;
+			im->hsi.blk_idx = pkt_hsi->blk_idx;
+			im->hsi.drop_size = pkt_hsi->drop_size;
+			im->hsi.drop_blk_idx = pkt_hsi->drop_blk_idx;
+
+			ooo_handle_rx_event(dev, pkt_desc);
+
+		} else {
+			printk(KERN_ERR PFX "cnic_handle_bnx2x_ooo_rx_event"
+				": Failed to allocate pk desc!\n");
+reuse:
+			cnic_reuse_ooo_pkt(ooo_cqe.u.cqe.pkt_desc, dev);
+			return;
+		}
+	} while (ret);
+error:
+empty:
+	/* Send any tx pending pkt */
+	ooo_send_pend(dev, &im->txr);
+
+	return;
+}
+
+static void cnic_handle_bnx2x_ooo_tx_event(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct iooo_mgmt *im = &cp->iooo_mgmr;
+	u16 hw_cons, sw_cons;
+
+	/* Handle fwd ring tx completion */
+	hw_cons = *im->txr.tx_cons_idx_ptr;
+	sw_cons = im->txr.tx_cons;
+	if (sw_cons == hw_cons)
+		return;
+
+	im->txr.tx_cons = hw_cons;
+
+	/* Handle tx completion by sending event to bnx2x */
+	cnic_comp_ooo_tx_pkts(dev);
+
+	/* Lastly, send any tx pending pkt */
+	if (unlikely(!test_bit(IOOO_START, &im->flags)))
+		return;
+
+	ooo_send_pend(dev, &im->txr);
+}
+
+static void cnic_alloc_bnx2_ooo_resc(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	int ret;
+
+	/* Chip specific */
+	cp->iooo_mgmr.rxr.rx_desc_cnt_max = MAX_BNX2_OOO_RX_DESC_CNT;
+	cp->iooo_mgmr.txr.tx_desc_cnt_max = MAX_BNX2_OOO_TX_DESC_CNT;
+	cp->iooo_mgmr.pkt_buf_size = dev->netdev->mtu + ETH_HLEN +
+				     BNX2_RX_OFFSET + 8;
+	/* General */
+	ooo_init(&cp->iooo_mgmr);
+
+	if (CHIP_NUM(cp) != CHIP_NUM_5709)
+		return;
+
+	ret = ooo_alloc_ring(dev);
+	if (!ret)
+		set_bit(IOOO_RESC_AVAIL, &cp->iooo_mgmr.flags);
+}
+
+static void cnic_alloc_bnx2x_ooo_resc(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+
+	/* General */
+	ooo_init(&cp->iooo_mgmr);
+	set_bit(IOOO_RESC_AVAIL, &cp->iooo_mgmr.flags);
+}
+
+static void cnic_stop_bnx2_ooo_hw(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct iooo_mgmt *im = &cp->iooo_mgmr;
+	int cnt = 10;
+	struct kwqe *wqes[1], l2kwqe;
+
+	if (!(test_bit(IOOO_START, &cp->iooo_mgmr.flags)))
+		return;
+
+	/* Send kwqe to clean up the L2 OOO rx ring */
+	memset(&l2kwqe, 0, sizeof(l2kwqe));
+	wqes[0] = &l2kwqe;
+	l2kwqe.kwqe_op_flag = (L2_LAYER_CODE << KWQE_LAYER_SHIFT) |
+			      (L2_KWQE_OPCODE_VALUE_VM_FREE_RX_QUEUE <<
+			       KWQE_OPCODE_SHIFT) | (RX_CATCHUP_CID <<
+			       KWQE_QID_SHIFT);
+	dev->submit_kwqes(dev, wqes, 1);
+
+	/* Wait for the hardware indexes to match producer */
+	while ((*im->rxr.rx_cons_idx_ptr != im->rxr.rx_prod)
+		&& cnt) {
+		msleep(10);
+		cnt--;
+	}
+
+	if (!cnt)
+		printk(KERN_ERR PFX "cnic_stop_bnx2_ooo_hw: hw rx_cons=%d != "
+			"sw rx_cons=%d rx_prod=%d\n", *im->rxr.rx_cons_idx_ptr,
+			im->rxr.rx_cons, im->rxr.rx_prod);
+
+	cnt = 10;
+	while ((*im->txr.tx_cons_idx_ptr != im->txr.tx_prod)
+		&& cnt) {
+		msleep(10);
+		cnt--;
+	}
+	if (!cnt)
+		printk(KERN_ERR PFX "cnic_stop_bnx2_ooo_hw: hw tx_cons=%d != "
+			"sw tx_cons=%d tx_prod=%d\n", *im->txr.tx_cons_idx_ptr,
+			im->txr.tx_cons, im->txr.tx_prod);
+	clear_bit(IOOO_START, &im->flags);
+	clear_bit(IOOO_START_HANDLER, &im->flags);
+}
+
+static void cnic_stop_bnx2x_ooo_hw(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct iooo_mgmt *im = &cp->iooo_mgmr;
+
+	/* Nothing to do here as the free_ooo_resc gets called in stop_hw */
+	clear_bit(IOOO_START, &im->flags);
+}
+
+static void cnic_start_bnx2_ooo_hw(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct status_block *sblk = (struct status_block *)
+		((unsigned long)cp->status_blk.gen & PAGE_MASK);
+	struct iooo_rx_ring_info *rxr = &cp->iooo_mgmr.rxr;
+	struct iooo_tx_ring_info *txr = &cp->iooo_mgmr.txr;
+	u32 val;
+
+	if (!(test_bit(IOOO_RESC_AVAIL, &cp->iooo_mgmr.flags)))
+		return;
+
+	rxr->rx_cid_addr = GET_CID_ADDR(RX_CATCHUP_CID);
+	rxr->rx_bidx_addr = MB_GET_CID_ADDR(RX_CATCHUP_CID) +
+			    L5_KRNLQ_HOST_QIDX;
+	rxr->rx_bseq_addr = MB_GET_CID_ADDR(RX_CATCHUP_CID) +
+			    L5_KRNLQ_HOST_FW_QIDX;
+	rxr->rx_prod = 0;
+	rxr->rx_prod_bseq = 0;
+	rxr->rx_cons = 0;
+
+	rxr->rx_cons_idx_ptr = (u16 *) (&sblk->status_rx_quick_consumer_index1);
+	cnic_init_bnx2_rx_ring_start(dev, RX_CATCHUP_CID, rxr->rx_cons_idx_ptr,
+				     rxr->rx_desc_mapping[0], 0);
+	if (*rxr->rx_cons_idx_ptr)
+		printk(KERN_ERR PFX "cnic_start_bnx2_ooo_hw: stale hw "
+			"rx_cons=%d\n", *rxr->rx_cons_idx_ptr);
+
+	txr->tx_cid_addr = GET_CID_ADDR(TX_CATCHUP_CID);
+	txr->tx_bidx_addr = MB_GET_CID_ADDR(TX_CATCHUP_CID) +
+			    BNX2_L2CTX_TX_HOST_BIDX;
+	txr->tx_bseq_addr = MB_GET_CID_ADDR(TX_CATCHUP_CID) +
+			    BNX2_L2CTX_TX_HOST_BSEQ;
+	txr->tx_cons_idx_ptr = (u16 *) (&sblk->status_tx_quick_consumer_index1);
+	txr->tx_prod = 0;
+	txr->tx_prod_bseq = 0;
+	txr->tx_cons = 0;
+
+	cnic_init_bnx2_tx_ring_start(dev, TX_CATCHUP_CID,
+				     txr->tx_desc_mapping[0]); 
+
+	ooo_init_rings(&cp->iooo_mgmr);
+
+	val = BNX2_L2CTX_CMD_TYPE_TYPE_L2 | (TX_OOO_EST_NBD << 16);
+	cnic_ctx_wr(dev, txr->tx_cid_addr, BNX2_L2CTX_CMD_TYPE_XI, val);
+
+	/* Allocate rx buf, no tx buf yet */
+	rxr->rx_desc_cnt = 0;
+	txr->tx_desc_cnt = txr->tx_desc_cnt_max - txr->tx_desc_cnt_max /
+			   TX_DESC_CNT;
+	ooo_alloc_rx_buf(dev, GFP_KERNEL);
+	set_bit(IOOO_START, &cp->iooo_mgmr.flags);
+}
+
+static void cnic_start_bnx2x_ooo_hw(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct iooo_rx_ring_info *rxr = &cp->iooo_mgmr.rxr;
+	struct iooo_tx_ring_info *txr = &cp->iooo_mgmr.txr;
+	int i;
+
+	if (!(test_bit(IOOO_RESC_AVAIL, &cp->iooo_mgmr.flags)))
+		return;
+
+	for (i = 0; i < MAX_OOO_RX_DESC_CNT; i++)
+		rxr->rx_pkt_desc[i] = NULL;
+	for (i = 0; i < MAX_OOO_TX_DESC_CNT; i++)
+		txr->tx_pkt_desc[i] = NULL;
+
+	if (BNX2X_CHIP_IS_E2_PLUS(cp->chip_id)) {
+		struct host_hc_status_block_e2 *sb = cp->status_blk.gen;
+
+		cp->iooo_mgmr.txr.tx_cons_idx_ptr =
+			&sb->sb.index_values[HC_INDEX_FWD_TX_CQ_CONS];
+		cp->iooo_mgmr.rxr.rx_cons_idx_ptr =
+			&sb->sb.index_values[HC_INDEX_OOO_RX_CQ_CONS];
+	} else {
+		struct host_hc_status_block_e1x *sb = cp->status_blk.gen;
+
+		cp->iooo_mgmr.txr.tx_cons_idx_ptr =
+			&sb->sb.index_values[HC_INDEX_FWD_TX_CQ_CONS];
+		cp->iooo_mgmr.rxr.rx_cons_idx_ptr =
+			&sb->sb.index_values[HC_INDEX_OOO_RX_CQ_CONS];
+	}
+	set_bit(IOOO_START, &cp->iooo_mgmr.flags);
+}
+
+static void cnic_free_ooo_resc(struct cnic_dev *dev)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+
+	if (!(test_bit(IOOO_RESC_AVAIL, &cp->iooo_mgmr.flags)))
+		return;
+
+	clear_bit(IOOO_RESC_AVAIL, &cp->iooo_mgmr.flags);
+	ooo_free_all_buf(dev);
+	ooo_free_ring(dev);
+}
+
+static void cnic_conn_ooo_init(struct cnic_local *cp, u32 l5_cid)
+{
+	struct cnic_context *ctx = &cp->ctx_tbl[l5_cid];
+	struct cnic_iscsi *iscsi = ctx->proto.iscsi;
+
+	iscsi->blk_cnt = 0;
+	iscsi->pen.pkt_cnt = 0;
+	INIT_LIST_HEAD(&iscsi->pen.list);
+}
+
+/* Flush the associated iooo_block for the connection specified */
+static void cnic_flush_ooo(struct cnic_dev *dev, u32 l5_cid)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct cnic_context *ctx;
+	struct cnic_iscsi *iscsi;
+	struct list_head *pos, *q;
+	struct iooo_block *blk;
+
+	if (l5_cid >= MAX_CM_SK_TBL_SZ)
+		goto skip;
+
+	ctx = &cp->ctx_tbl[l5_cid];
+	if (!ctx)
+		goto skip;
+
+	iscsi = ctx->proto.iscsi;
+
+	if (!iscsi->blk_cnt)
+		goto skip;
+
+	list_for_each_safe(pos, q, &iscsi->pen.list) {
+		blk = list_entry(pos, struct iooo_block, list);
+		ooo_free_blk(dev, blk);
+		iscsi->blk_cnt--;
+		list_del(pos);
+	}
+	if (iscsi->blk_cnt) {
+		printk(KERN_ERR PFX "%s: cnic_flush_ooo: blk cnt=%d != 0\n",
+			dev->netdev->name, iscsi->blk_cnt);
+		iscsi->blk_cnt = 0;
+	}
+skip:
+	if (test_bit(CNIC_F_BNX2_CLASS, &dev->flags))
+		ooo_free_tx_buf(dev);
+
+	clear_bit(IOOO_START_TX_FREE, &cp->iooo_mgmr.flags);
+}
+
+static void cnic_bnx2_ooo_iscsi_conn_update(struct cnic_dev *dev,
+					    struct kwqe *kwqe)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct iscsi_kwqe_conn_update *req =
+		(struct iscsi_kwqe_conn_update *) kwqe;
+	u32 l5_cid;
+	struct cnic_context *ctx;
+
+	l5_cid = req->reserved2;
+	if (l5_cid >= MAX_ISCSI_TBL_SZ)
+		return;
+
+	ctx = &cp->ctx_tbl[l5_cid];
+	ctx->cid = req->context_id << 7;
+
+	if (!(test_bit(IOOO_RESC_AVAIL, &cp->iooo_mgmr.flags)))
+		return;
+
+	if (test_bit(CNIC_F_ISCSI_OOO_ENABLE, &dev->flags)) {
+		cnic_reg_wr_ind(dev, BNX2_RXP_SCRATCH_OOO_RX_CID,
+				GET_CID_ADDR(RX_CATCHUP_CID));
+		cnic_reg_wr_ind(dev, BNX2_RXP_SCRATCH_OOO_FLAGS,
+				BNX2_IOOO_FLAGS_OVERRIDE |
+				BNX2_IOOO_FLAGS_ENABLE);
+	}
+}
+
+static void cnic_bnx2_ooo_iscsi_destroy(struct cnic_dev *dev, struct kwqe *kwqe)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct iscsi_kwqe_conn_destroy *req =
+		(struct iscsi_kwqe_conn_destroy *) kwqe;
+	u32 l5_cid = req->reserved0;
+	struct cnic_context *ctx;
+
+	if (l5_cid >= MAX_ISCSI_TBL_SZ)
+		return;
+
+	ctx = &cp->ctx_tbl[l5_cid];
+	ctx->cid = 0;
+}
+
+static void cnic_bnx2x_ooo_iscsi_conn_update(struct cnic_dev *dev,
+					     struct kwqe *kwqe)
+{
+	struct cnic_local *cp = dev->cnic_priv;
+	struct iscsi_kwqe_conn_update *req =
+		(struct iscsi_kwqe_conn_update *) kwqe;
+
+	if (!(test_bit(IOOO_RESC_AVAIL, &cp->iooo_mgmr.flags)))
+		return;
+
+	if (test_bit(CNIC_F_ISCSI_OOO_ENABLE, &dev->flags) &&
+	    !(cp->ethdev->drv_state & CNIC_DRV_STATE_NO_ISCSI_OOO))
+		req->conn_flags =
+			(req->conn_flags &
+			 ~ISCSI_KWQE_CONN_UPDATE_OOO_SUPPORT_MODE) |
+			(TCP_TSTORM_OOO_SUPPORTED <<
+			 ISCSI_KWQE_CONN_UPDATE_OOO_SUPPORT_MODE_SHIFT);
+}
+
+#endif  /* CNIC_ISCSI_OOO_SUPPORT */
+
+static void cnic_release(void)
+{
+	struct cnic_dev *dev;
+	struct cnic_uio_dev *udev;
+
+	while (!list_empty(&cnic_dev_list)) {
+		dev = list_entry(cnic_dev_list.next, struct cnic_dev, list);
+		if (test_bit(CNIC_F_CNIC_UP, &dev->flags)) {
+			cnic_ulp_stop(dev);
+			cnic_stop_hw(dev);
+		}
+
+		cnic_ulp_exit(dev);
+		cnic_unregister_netdev(dev);
+		list_del_init(&dev->list);
+		cnic_free_dev(dev);
+	}
+	while (!list_empty(&cnic_udev_list)) {
+		udev = list_entry(cnic_udev_list.next, struct cnic_uio_dev,
+				  list);
+		cnic_free_uio(udev);
+	}
+}
+
+static int __init cnic_init(void)
+{
+	int rc = 0;
+
+	pr_info("%s", version);
+
+	rc = register_netdevice_notifier(&cnic_netdev_notifier);
+	if (rc) {
+		cnic_release();
+		return rc;
+	}
+
+	cnic_wq = create_singlethread_workqueue("cnic_wq");
+	if (!cnic_wq) {
+		cnic_release();
+		unregister_netdevice_notifier(&cnic_netdev_notifier);
+		return -ENOMEM;
+	}
+
+	return 0;
+}
+
+static void __exit cnic_exit(void)
+{
+	unregister_netdevice_notifier(&cnic_netdev_notifier);
+	cnic_release();
+	destroy_workqueue(cnic_wq);
+}
+
+module_init(cnic_init);
+module_exit(cnic_exit);
diff -r 2e9e6572f41c drivers/net/bnx2/cnic.h
--- /dev/null
+++ b/drivers/net/bnx2/cnic.h
@@ -0,0 +1,797 @@
+/* cnic.h: Broadcom CNIC core network driver.
+ *
+ * Copyright (c) 2006-2011 Broadcom Corporation
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation.
+ *
+ * Written by: John(Zongxi) Chen (zongxic@broadcom.com)
+ */
+
+
+#ifndef CNIC_H
+#define CNIC_H
+
+#if !defined(__LITTLE_ENDIAN) && !defined(__BIG_ENDIAN)
+	#error "Missing either LITTLE_ENDIAN or BIG_ENDIAN definition."
+#endif
+
+#ifndef DIV_ROUND_UP
+#define DIV_ROUND_UP(n,d) (((n) + (d) - 1) / (d))
+#endif
+
+/*  Taken from arch/x86/include/asm/atomic.h */
+/*
+ * cnic_atomic_dec_if_positive - decrement by 1 if old value positive
+ * @v: pointer of type atomic_t
+ *
+ * The function returns the old value of *v minus 1, even if
+ * the atomic variable, v, was not decremented.
+ */
+static inline int cnic_atomic_dec_if_positive(atomic_t *v)
+{
+	int c, old, dec;
+	c = atomic_read(v);
+	for (;;) {
+		dec = c - 1;
+		if (unlikely(dec < 0))
+			break;
+		old = atomic_cmpxchg((v), c, dec);
+		if (likely(old == c))
+			break;
+		c = old;
+	}
+	return dec;
+}
+
+#ifndef ISCSI_DEF_FIRST_BURST_LEN
+#define ISCSI_DEF_FIRST_BURST_LEN		65536
+#endif
+
+#ifndef ISCSI_DEF_MAX_RECV_SEG_LEN
+#define ISCSI_DEF_MAX_RECV_SEG_LEN		8192
+#endif
+
+#ifndef ISCSI_DEF_MAX_BURST_LEN
+#define ISCSI_DEF_MAX_BURST_LEN			262144
+#endif
+
+#ifndef rcu_dereference_protected
+
+#define rcu_dereference_protected(p, c) \
+	rcu_dereference((p))
+
+#endif
+
+#ifndef __rcu
+#define __rcu
+#endif
+
+#define ISCSI_DEFAULT_MAX_OUTSTANDING_R2T 	(1)
+
+/* Formerly Cstorm iSCSI EQ index (HC_INDEX_C_ISCSI_EQ_CONS) */
+#define HC_INDEX_ISCSI_EQ_CONS          	6
+
+/* Formerly Ustorm iSCSI EQ index (HC_INDEX_U_FCOE_EQ_CONS) */
+#define HC_INDEX_FCOE_EQ_CONS			3
+
+#define HC_INDEX_FWD_TX_CQ_CONS			5
+#define HC_INDEX_OOO_RX_CQ_CONS			1
+
+#define HC_SP_INDEX_ETH_ISCSI_CQ_CONS		5
+#define HC_SP_INDEX_ETH_ISCSI_RX_CQ_CONS	1
+
+#define KWQ_PAGE_CNT	4
+#define KCQ_PAGE_CNT	16
+
+#define KWQ_CID 		24
+#define KCQ_CID 		25
+
+/*
+ *	krnlq_context definition
+ */
+#define L5_KRNLQ_FLAGS	0x00000000
+#define L5_KRNLQ_SIZE	0x00000000
+#define L5_KRNLQ_TYPE	0x00000000
+#define KRNLQ_FLAGS_PG_SZ					(0xf<<0)
+#define KRNLQ_FLAGS_PG_SZ_256					(0<<0)
+#define KRNLQ_FLAGS_PG_SZ_512					(1<<0)
+#define KRNLQ_FLAGS_PG_SZ_1K					(2<<0)
+#define KRNLQ_FLAGS_PG_SZ_2K					(3<<0)
+#define KRNLQ_FLAGS_PG_SZ_4K					(4<<0)
+#define KRNLQ_FLAGS_PG_SZ_8K					(5<<0)
+#define KRNLQ_FLAGS_PG_SZ_16K					(6<<0)
+#define KRNLQ_FLAGS_PG_SZ_32K					(7<<0)
+#define KRNLQ_FLAGS_PG_SZ_64K					(8<<0)
+#define KRNLQ_FLAGS_PG_SZ_128K					(9<<0)
+#define KRNLQ_FLAGS_PG_SZ_256K					(10<<0)
+#define KRNLQ_FLAGS_PG_SZ_512K					(11<<0)
+#define KRNLQ_FLAGS_PG_SZ_1M					(12<<0)
+#define KRNLQ_FLAGS_PG_SZ_2M					(13<<0)
+#define KRNLQ_FLAGS_QE_SELF_SEQ					(1<<15)
+#define KRNLQ_SIZE_TYPE_SIZE	((((0x28 + 0x1f) & ~0x1f) / 0x20) << 16)
+#define KRNLQ_TYPE_TYPE						(0xf<<28)
+#define KRNLQ_TYPE_TYPE_EMPTY					(0<<28)
+#define KRNLQ_TYPE_TYPE_KRNLQ					(6<<28)
+
+#define L5_KRNLQ_HOST_QIDX		0x00000004
+#define L5_KRNLQ_HOST_FW_QIDX		0x00000008
+#define L5_KRNLQ_NX_QE_SELF_SEQ 	0x0000000c
+#define L5_KRNLQ_QE_SELF_SEQ_MAX	0x0000000c
+#define L5_KRNLQ_NX_QE_HADDR_HI 	0x00000010
+#define L5_KRNLQ_NX_QE_HADDR_LO 	0x00000014
+#define L5_KRNLQ_PGTBL_PGIDX		0x00000018
+#define L5_KRNLQ_NX_PG_QIDX 		0x00000018
+#define L5_KRNLQ_PGTBL_NPAGES		0x0000001c
+#define L5_KRNLQ_QIDX_INCR		0x0000001c
+#define L5_KRNLQ_PGTBL_HADDR_HI 	0x00000020
+#define L5_KRNLQ_PGTBL_HADDR_LO 	0x00000024
+
+#define BNX2_PG_CTX_MAP			0x1a0034
+#define BNX2_ISCSI_CTX_MAP		0x1a0074
+
+#define MAX_CM_SK_TBL_SZ	256
+#define MAX_COMPLETED_KCQE	64
+
+#define MAX_ISCSI_TBL_SZ	256
+
+#define CNIC_LOCAL_PORT_MIN	60000
+#define CNIC_LOCAL_PORT_MAX	61024
+#define CNIC_LOCAL_PORT_RANGE	(CNIC_LOCAL_PORT_MAX - CNIC_LOCAL_PORT_MIN)
+
+#define KWQE_CNT (BCM_PAGE_SIZE / sizeof(struct kwqe))
+#define KCQE_CNT (BCM_PAGE_SIZE / sizeof(struct kcqe))
+#define MAX_KWQE_CNT (KWQE_CNT - 1)
+#define MAX_KCQE_CNT (KCQE_CNT - 1)
+
+#define MAX_KWQ_IDX	((KWQ_PAGE_CNT * KWQE_CNT) - 1)
+#define MAX_KCQ_IDX	((KCQ_PAGE_CNT * KCQE_CNT) - 1)
+
+#define KWQ_PG(x) (((x) & ~MAX_KWQE_CNT) >> (BCM_PAGE_BITS - 5))
+#define KWQ_IDX(x) ((x) & MAX_KWQE_CNT)
+
+#define KCQ_PG(x) (((x) & ~MAX_KCQE_CNT) >> (BCM_PAGE_BITS - 5))
+#define KCQ_IDX(x) ((x) & MAX_KCQE_CNT)
+
+#define BNX2X_NEXT_KCQE(x) (((x) & (MAX_KCQE_CNT - 1)) ==		\
+		(MAX_KCQE_CNT - 1)) ?					\
+		(x) + 2 : (x) + 1
+
+#define BNX2X_KWQ_DATA_PG(cp, x) ((x) / (cp)->kwq_16_data_pp)
+#define BNX2X_KWQ_DATA_IDX(cp, x) ((x) % (cp)->kwq_16_data_pp)
+#define BNX2X_KWQ_DATA(cp, x)						\
+	&(cp)->kwq_16_data[BNX2X_KWQ_DATA_PG(cp, x)][BNX2X_KWQ_DATA_IDX(cp, x)]
+
+#define DEF_IPID_START		0x8000
+
+#define DEF_KA_TIMEOUT		10000
+#define DEF_KA_INTERVAL		300000
+#define DEF_KA_MAX_PROBE_COUNT	3
+#define DEF_TOS			0
+#define DEF_TTL			0xfe
+#define DEF_SND_SEQ_SCALE	0
+#define DEF_RCV_BUF		0xffff
+#define DEF_SND_BUF		0xffff
+#define DEF_SEED		0
+#define DEF_MAX_RT_TIME		500
+#define DEF_MAX_DA_COUNT	2
+#define DEF_SWS_TIMER		1000
+#define DEF_MAX_CWND		0xffff
+
+#define CNIC_ISCSI_OOO_SUPPORT		(1)
+
+#define MAX_IOOO_BLOCK_SUPPORTED	(256)
+#define MAX_OOO_RX_DESC_CNT		(RX_DESC_CNT * 4)
+#define MAX_OOO_TX_DESC_CNT		(RX_DESC_CNT * 4)
+#define MAX_BNX2_OOO_RX_DESC_CNT	(RX_DESC_CNT * 2)
+#define MAX_BNX2_OOO_TX_DESC_CNT	(RX_DESC_CNT * 2)
+
+#define MAX_RX_OOO_RING			(10)
+#define MAX_TX_OOO_RING			(10)
+
+#define BNX2_RXP_SCRATCH_OOO_RX_CID	(BNX2_RXP_SCRATCH + 0x31e0)
+#define BNX2_RXP_SCRATCH_OOO_FLAGS	(BNX2_RXP_SCRATCH + 0x31e4)
+
+#define RX_CATCHUP_CID			(RX_CID + 1)
+#define TX_CATCHUP_CID			(TX_CID + 2)
+#define BNX2_IOOO_FLAGS_ENABLE		(1<<0)
+#define BNX2_IOOO_FLAGS_OVERRIDE	(1<<31)
+
+#define TX_OOO_EST_NBD			8
+
+#if (CNIC_ISCSI_OOO_SUPPORT)
+/* packet descriptor for 1g, 10g uses skb  */
+struct iooo_pkt_desc {
+	struct list_head	list;
+	u32			pkt_len;
+	void			*buf;
+	dma_addr_t		mapping;
+	struct sk_buff		*skb;	/* 10g */
+};
+
+struct iooo_block {
+	u32			id;
+	u32			pkt_cnt;
+	struct iooo_pkt_desc	pd_head;
+	struct list_head	list;
+};
+
+struct bnx2_ooo_fhdr {
+	u8			drop_blk_idx;
+	u8			drop_size;
+	u8			opcode;
+	u8			blk_idx;
+	u32			icid;
+	u16			vlan_tag;
+	u16			pkt_len;
+	u16			tcp_udp_xsum;
+	u16			ip_xsum;
+};
+
+struct bnx2x_ooo_fhdr {
+	u8			qidx;
+	u8			pl_offset;
+	u8			status;
+	u8			error;
+	u32			rss_hash;
+	u16			pkt_len;
+	u16			vlan;
+	u16			flags;
+	u16			bd_len;
+	u32			cid;
+	u8			blk_idx;
+	u8			opcode;
+	u8			drop_size;
+	u8			drop_blk_idx;
+};
+
+struct iooo_tx_ring_info {
+	u32			tx_prod_bseq;
+	u16			tx_prod;
+	u32			tx_desc_cnt;
+	u32			tx_desc_cnt_max;
+
+	u16			*tx_cons_idx_ptr;
+	u32			tx_cid_addr;
+	u32			tx_bidx_addr;
+	u32			tx_bseq_addr;
+	u32			tx_buf_size;
+	u32			tx_max_ring;
+	struct iooo_pkt_desc	tx_pend_pd_head;
+	u32			tx_pend_pd_cnt;
+	u32			tx_total_pkt_sent;
+
+	struct tx_bd		*tx_desc_ring[MAX_TX_OOO_RING];
+	struct iooo_pkt_desc	*tx_pkt_desc[MAX_OOO_TX_DESC_CNT];
+
+	u16			tx_cons;
+	u16			hw_tx_cons;
+
+	dma_addr_t		tx_desc_mapping[MAX_TX_OOO_RING];
+};
+
+struct iooo_rx_ring_info {
+	u32			rx_prod_bseq;
+	u16			rx_prod;
+	u16			rx_cons;
+
+	u16			*rx_cons_idx_ptr;
+	u32			rx_cid_addr;
+	u32			rx_bidx_addr;
+	u32			rx_bseq_addr;
+
+	u32			rx_max_ring;
+
+	u32			rx_desc_cnt;
+	u32			rx_desc_cnt_max;
+	u32			rx_buf_size;
+
+	struct iooo_pkt_desc	*rx_pkt_desc[MAX_OOO_RX_DESC_CNT];
+	struct rx_bd		*rx_desc_ring[MAX_RX_OOO_RING];
+
+	dma_addr_t		rx_desc_mapping[MAX_RX_OOO_RING];
+};
+
+struct iooo_hsi {
+	u32			iscsi_cid;
+	u8			blk_idx;
+	u8			opcode;
+	u8			drop_size;
+	u8			drop_blk_idx;
+};
+
+struct iooo_hsi_bnx2x {
+	u32			iscsi_cid;
+	u8			drop_blk_idx;
+	u8			drop_size;
+	u8			opcode;
+	u8			blk_idx;
+};
+
+struct iooo_mgmt {
+	unsigned long		flags;
+	/* Control flags */
+#define IOOO_RESC_AVAIL		(0)
+#define IOOO_START		(1)
+	/* Runtime flags */
+#define IOOO_BLK_FULL		(10)
+#define IOOO_BLK_EMPTY		(11)
+	/* - 1G specifics */
+#define IOOO_START_HANDLER	(12)
+#define IOOO_START_TX_FREE	(13)
+	u16			blk_cons;
+	u16			blk_prod;
+	u16			blk_alloc[MAX_IOOO_BLOCK_SUPPORTED];
+	struct iooo_block	blk[MAX_IOOO_BLOCK_SUPPORTED];
+
+	struct iooo_hsi		hsi;
+	struct iooo_rx_ring_info rxr;
+	struct iooo_tx_ring_info txr;
+	u32			pkt_buf_size;
+};
+
+#endif
+
+struct cnic_ctx {
+	u32		cid;
+	void		*ctx;
+	dma_addr_t	mapping;
+};
+
+#define BNX2_MAX_CID		0x2000
+
+struct cnic_dma {
+	int		num_pages;
+	void		**pg_arr;
+	dma_addr_t	*pg_map_arr;
+	int		pgtbl_size;
+	u32		*pgtbl;
+	dma_addr_t	pgtbl_map;
+};
+
+struct cnic_id_tbl {
+	spinlock_t	lock;
+	u32		start;
+	u32		max;
+	u32		next;
+	unsigned long	*table;
+};
+
+#define CNIC_KWQ16_DATA_SIZE	128
+
+struct kwqe_16_data {
+	u8	data[CNIC_KWQ16_DATA_SIZE];
+};
+
+struct cnic_iscsi {
+	struct cnic_dma		task_array_info;
+	struct cnic_dma		r2tq_info;
+	struct cnic_dma		hq_info;
+#if (CNIC_ISCSI_OOO_SUPPORT)
+	struct iooo_block	pen;
+	u32			blk_cnt;
+#endif
+};
+
+struct cnic_context {
+	u32			cid;
+	struct kwqe_16_data	*kwqe_data;
+	dma_addr_t		kwqe_data_mapping;
+	wait_queue_head_t	waitq;
+	int			wait_cond;
+	unsigned long		timestamp;
+	unsigned long		ctx_flags;
+#define	CTX_FL_OFFLD_START	0
+#define	CTX_FL_DELETE_WAIT	1
+#define	CTX_FL_CID_ERROR	2
+	u8			ulp_proto_id;
+	union {
+		struct cnic_iscsi	*iscsi;
+	} proto;
+};
+
+struct kcq_info {
+	struct cnic_dma	dma;
+	struct kcqe	**kcq;
+
+	u16		*hw_prod_idx_ptr;
+	u16		sw_prod_idx;
+	u16		*status_idx_ptr;
+	u32		io_addr;
+
+	u16		(*next_idx)(u16);
+	u16		(*hw_idx)(u16);
+};
+
+struct l5cm_spe;
+
+struct iro {
+	u32 base;
+	u16 m1;
+	u16 m2;
+	u16 m3;
+	u16 size;
+};
+
+struct cnic_uio_dev {
+	struct uio_info		cnic_uinfo;
+	u32			uio_dev;
+
+	int			l2_ring_size;
+	void			*l2_ring;
+	dma_addr_t		l2_ring_map;
+
+	int			l2_buf_size;
+	void			*l2_buf;
+	dma_addr_t		l2_buf_map;
+
+	struct cnic_dev		*dev;
+	struct pci_dev		*pdev;
+	struct list_head	list;
+};
+
+struct cnic_local {
+
+	spinlock_t cnic_ulp_lock;
+	void *ulp_handle[MAX_CNIC_ULP_TYPE];
+	unsigned long ulp_flags[MAX_CNIC_ULP_TYPE];
+#define ULP_F_INIT	0
+#define ULP_F_START	1
+#define ULP_F_CALL_PENDING	2
+	struct cnic_ulp_ops __rcu *ulp_ops[MAX_CNIC_ULP_TYPE];
+
+	unsigned long cnic_local_flags;
+#define	CNIC_LCL_FL_KWQ_INIT		0x0
+#define	CNIC_LCL_FL_L2_WAIT		0x1
+#define	CNIC_LCL_FL_RINGS_INITED	0x2
+#define	CNIC_LCL_FL_STOP_ISCSI		0x4
+
+	struct cnic_dev *dev;
+
+	struct cnic_eth_dev *ethdev;
+
+	struct cnic_uio_dev *udev;
+
+	int		l2_rx_ring_size;
+	int		l2_single_buf_size;
+
+	u16		*rx_cons_ptr;
+	u16		*tx_cons_ptr;
+	u16		rx_cons;
+	u16		tx_cons;
+
+	const struct iro	*iro_arr;
+#define IRO (((struct cnic_local *) dev->cnic_priv)->iro_arr)
+
+	u32 kwq_cid_addr;
+	u32 kcq_cid_addr;
+
+	struct cnic_dma		kwq_info;
+	struct kwqe		**kwq;
+
+	struct cnic_dma		kwq_16_data_info;
+
+	u16		max_kwq_idx;
+
+	u16		kwq_prod_idx;
+	u32		kwq_io_addr;
+
+	volatile u16	*kwq_con_idx_ptr;
+	u16		kwq_con_idx;
+
+	struct kcq_info	kcq1;
+	struct kcq_info	kcq2;
+
+	union {
+		void				*gen;
+		struct status_block_msix	*bnx2;
+#if (NEW_BNX2X_HSI >= 60)
+		struct host_hc_status_block_e1x	*bnx2x_e1x;
+		struct host_hc_status_block_e2	*bnx2x_e2;
+		/* index values - which counter to update */
+		#define SM_RX_ID		0
+		#define SM_TX_ID		1
+#else
+		struct host_status_block	*bnx2x;
+#endif
+	} status_blk;
+
+#if (NEW_BNX2X_HSI >= 60)
+	struct host_sp_status_block	*bnx2x_def_status_blk;
+#else
+	struct host_def_status_block	*bnx2x_def_status_blk;
+#endif
+
+	u32				status_blk_num;
+	u32				bnx2x_igu_sb_id;
+	u32				int_num;
+	u32				last_status_idx;
+	struct tasklet_struct		cnic_irq_task;
+
+	struct kcqe	*completed_kcq[MAX_COMPLETED_KCQE];
+
+	struct cnic_sock *csk_tbl;
+	struct cnic_id_tbl	csk_port_tbl;
+
+	struct cnic_dma	conn_buf_info;
+	struct cnic_dma	gbl_buf_info;
+
+	struct cnic_iscsi	*iscsi_tbl;
+	struct cnic_context	*ctx_tbl;
+	struct cnic_id_tbl	cid_tbl;
+	atomic_t		iscsi_conn;
+	u32			iscsi_start_cid;
+
+	u32			fcoe_init_cid;
+	u32			fcoe_start_cid;
+	struct cnic_id_tbl	fcoe_cid_tbl;
+
+	u32			max_cid_space;
+
+	/* per connection parameters */
+	int			num_iscsi_tasks;
+	int			num_ccells;
+	int			task_array_size;
+	int			r2tq_size;
+	int			hq_size;
+	int			num_cqs;
+
+	struct notifier_block cm_nb;
+
+#ifdef DECLARE_DELAYED_WORK
+	struct delayed_work	delete_task;
+#else
+	struct work_struct	delete_task;
+#endif
+
+	struct cnic_ctx		*ctx_arr;
+	int			ctx_blks;
+	int			ctx_blk_size;
+	unsigned long		ctx_align;
+	int			cids_per_blk;
+
+	u32			chip_id;
+	int			func;
+	u32			pfid;
+	u8			port_mode;
+#define CHIP_4_PORT_MODE	0
+#define CHIP_2_PORT_MODE	1
+#define CHIP_PORT_MODE_NONE	2
+
+	u32			shmem_base;
+
+	atomic_t		nl_count;
+	unsigned long		nl_timestamp;
+
+#if (CNIC_ISCSI_OOO_SUPPORT)
+	struct iooo_mgmt	iooo_mgmr;
+#endif
+
+	struct cnic_ops		*cnic_ops;
+	int			(*start_hw)(struct cnic_dev *);
+	void			(*stop_hw)(struct cnic_dev *);
+	void			(*setup_pgtbl)(struct cnic_dev *,
+					       struct cnic_dma *);
+	int			(*alloc_resc)(struct cnic_dev *);
+	void			(*free_resc)(struct cnic_dev *);
+	int			(*start_cm)(struct cnic_dev *);
+	void			(*stop_cm)(struct cnic_dev *);
+	void			(*enable_int)(struct cnic_dev *);
+	void			(*disable_int_sync)(struct cnic_dev *);
+	void			(*ack_int)(struct cnic_dev *);
+	void			(*close_conn)(struct cnic_sock *, u32 opcode);
+#if (CNIC_ISCSI_OOO_SUPPORT)
+	void			(*stop_ooo_hw)(struct cnic_dev *);
+#endif
+};
+
+struct bnx2x_bd_chain_next {
+	u32	addr_lo;
+	u32	addr_hi;
+	u8	reserved[8];
+};
+
+#define ISCSI_RAMROD_CMD_ID_UPDATE_CONN		(ISCSI_KCQE_OPCODE_UPDATE_CONN)
+#define ISCSI_RAMROD_CMD_ID_INIT		(ISCSI_KCQE_OPCODE_INIT)
+
+#define CDU_REGION_NUMBER_XCM_AG 2
+#define CDU_REGION_NUMBER_UCM_AG 4
+
+#if (NEW_BNX2X_HSI == 48)
+static u8 calc_crc8( u32 data, u8 crc) 
+{
+    u8 D[32];
+    u8 NewCRC[8];
+    u8 C[8];
+    u8 crc_res;
+    u8 i;
+
+    /* split the data into 31 bits */
+    for (i = 0; i < 32; i++) {
+        D[i] = (u8)(data & 1);
+        data = data >> 1;
+    }
+
+    /* split the crc into 8 bits */
+    for (i = 0; i < 8; i++ ) {
+        C[i] = crc & 1;
+        crc = crc >> 1;
+    }
+    
+    NewCRC[0] = D[31] ^ D[30] ^ D[28] ^ D[23] ^ D[21] ^ D[19] ^ D[18] ^ D[16] ^ D[14] ^ D[12] ^ D[8] ^ D[7] ^ D[6] ^ D[0] ^ C[4] ^ C[6] ^ C[7];
+    NewCRC[1] = D[30] ^ D[29] ^ D[28] ^ D[24] ^ D[23] ^ D[22] ^ D[21] ^ D[20] ^ D[18] ^ D[17] ^ D[16] ^ D[15] ^ D[14] ^ D[13] ^ D[12] ^ D[9] ^ D[6] ^ D[1] ^ D[0] ^ C[0] ^ C[4] ^ C[5] ^ C[6];
+    NewCRC[2] = D[29] ^ D[28] ^ D[25] ^ D[24] ^ D[22] ^ D[17] ^ D[15] ^ D[13] ^ D[12] ^ D[10] ^ D[8] ^ D[6] ^ D[2] ^ D[1] ^ D[0] ^ C[0] ^ C[1] ^ C[4] ^ C[5];
+    NewCRC[3] = D[30] ^ D[29] ^ D[26] ^ D[25] ^ D[23] ^ D[18] ^ D[16] ^ D[14] ^ D[13] ^ D[11] ^ D[9] ^ D[7] ^ D[3] ^ D[2] ^ D[1] ^ C[1] ^ C[2] ^ C[5] ^ C[6];
+    NewCRC[4] = D[31] ^ D[30] ^ D[27] ^ D[26] ^ D[24] ^ D[19] ^ D[17] ^ D[15] ^ D[14] ^ D[12] ^ D[10] ^ D[8] ^ D[4] ^ D[3] ^ D[2] ^ C[0] ^ C[2] ^ C[3] ^ C[6] ^ C[7];
+    NewCRC[5] = D[31] ^ D[28] ^ D[27] ^ D[25] ^ D[20] ^ D[18] ^ D[16] ^ D[15] ^ D[13] ^ D[11] ^ D[9] ^ D[5] ^ D[4] ^ D[3] ^ C[1] ^ C[3] ^ C[4] ^ C[7];
+    NewCRC[6] = D[29] ^ D[28] ^ D[26] ^ D[21] ^ D[19] ^ D[17] ^ D[16] ^ D[14] ^ D[12] ^ D[10] ^ D[6] ^ D[5] ^ D[4] ^ C[2] ^ C[4] ^ C[5];
+    NewCRC[7] = D[30] ^ D[29] ^ D[27] ^ D[22] ^ D[20] ^ D[18] ^ D[17] ^ D[15] ^ D[13] ^ D[11] ^ D[7] ^ D[6] ^ D[5] ^ C[3] ^ C[5] ^ C[6];
+
+    crc_res = 0;
+    for (i = 0; i < 8; i++) {
+        crc_res |= (NewCRC[i] << i);
+    }
+    
+    return crc_res;
+}
+#endif
+
+#define CDU_VALID_DATA(_cid, _region, _type)	\
+	(((_cid) << 8) | (((_region)&0xf)<<4) | (((_type)&0xf)))
+
+#define CDU_CRC8(_cid, _region, _type)	\
+	(calc_crc8(CDU_VALID_DATA(_cid, _region, _type), 0xff))
+
+#define CDU_RSRVD_VALUE_TYPE_A(_cid, _region, _type)	\
+	(0x80 | ((CDU_CRC8(_cid, _region, _type)) & 0x7f))
+
+#if (NEW_BNX2X_HSI < 60)
+/* iSCSI client IDs are 17, 19, 21, 23 */
+#define BNX2X_ISCSI_BASE_CL_ID		17
+#define BNX2X_ISCSI_CL_ID(vn)		(BNX2X_ISCSI_BASE_CL_ID + ((vn) << 1))
+
+#define BNX2X_ISCSI_L2_CID		17
+#endif
+
+#define BNX2X_ISCSI_START_CID		18
+#define BNX2X_ISCSI_NUM_CONNECTIONS	128
+#define BNX2X_ISCSI_TASK_CONTEXT_SIZE	128
+#define BNX2X_ISCSI_CONTEXT_MEM_SIZE	1024
+#define BNX2X_ISCSI_MAX_PENDING_R2TS	4
+#define BNX2X_ISCSI_R2TQE_SIZE		8
+#define BNX2X_ISCSI_HQ_BD_SIZE		64
+#define BNX2X_ISCSI_CONN_BUF_SIZE	64
+#define BNX2X_ISCSI_GLB_BUF_SIZE	64
+#define BNX2X_ISCSI_PBL_NOT_CACHED	0xff
+#define BNX2X_ISCSI_PDU_HEADER_NOT_CACHED	0xff
+
+#define BNX2X_FCOE_NUM_CONNECTIONS	1024
+
+#define BNX2X_FCOE_L5_CID_BASE		MAX_ISCSI_TBL_SZ
+
+#define BNX2X_CONTEXT_MEM_SIZE		1024
+
+#define BNX2X_CHIP_NUM_57710		0x164e
+#define BNX2X_CHIP_NUM_57711		0x164f
+#define BNX2X_CHIP_NUM_57711E		0x1650
+#define BNX2X_CHIP_NUM_57712		0x1662
+#define BNX2X_CHIP_NUM_57712E		0x1663
+#define BNX2X_CHIP_NUM_57713		0x1651
+#define BNX2X_CHIP_NUM_57713E		0x1652
+#define BNX2X_CHIP_NUM_57800		0x168a
+#define BNX2X_CHIP_NUM_57810		0x168e
+#define BNX2X_CHIP_NUM_57840		0x168d
+
+#define BNX2X_CHIP_NUM(x)		(x >> 16)
+#define BNX2X_CHIP_IS_57710(x)		\
+	(BNX2X_CHIP_NUM(x) == BNX2X_CHIP_NUM_57710)
+#define BNX2X_CHIP_IS_57711(x)		\
+	(BNX2X_CHIP_NUM(x) == BNX2X_CHIP_NUM_57711)
+#define BNX2X_CHIP_IS_57711E(x)		\
+	(BNX2X_CHIP_NUM(x) == BNX2X_CHIP_NUM_57711E)
+#define BNX2X_CHIP_IS_E1H(x)		\
+	(BNX2X_CHIP_IS_57711(x) || BNX2X_CHIP_IS_57711E(x))
+#define BNX2X_CHIP_IS_57712(x)		\
+	(BNX2X_CHIP_NUM(x) == BNX2X_CHIP_NUM_57712)
+#define BNX2X_CHIP_IS_57712E(x)		\
+	(BNX2X_CHIP_NUM(x) == BNX2X_CHIP_NUM_57712E)
+#define BNX2X_CHIP_IS_57713(x)		\
+	(BNX2X_CHIP_NUM(x) == BNX2X_CHIP_NUM_57713)
+#define BNX2X_CHIP_IS_57713E(x)		\
+	(BNX2X_CHIP_NUM(x) == BNX2X_CHIP_NUM_57713E)
+#define BNX2X_CHIP_IS_57800(x)		\
+	(BNX2X_CHIP_NUM(x) == BNX2X_CHIP_NUM_57800)
+#define BNX2X_CHIP_IS_57810(x)		\
+	(BNX2X_CHIP_NUM(x) == BNX2X_CHIP_NUM_57810)
+#define BNX2X_CHIP_IS_57840(x)		\
+	(BNX2X_CHIP_NUM(x) == BNX2X_CHIP_NUM_57840)
+#define BNX2X_CHIP_IS_E2(x)			\
+	(BNX2X_CHIP_IS_57712(x) || BNX2X_CHIP_IS_57712E(x) || \
+	 BNX2X_CHIP_IS_57713(x) || BNX2X_CHIP_IS_57713E(x))
+#define BNX2X_CHIP_IS_E3(x)			\
+	(BNX2X_CHIP_IS_57800(x) || BNX2X_CHIP_IS_57810(x) || \
+	 BNX2X_CHIP_IS_57840(x))
+#define BNX2X_CHIP_IS_E2_PLUS(x) (BNX2X_CHIP_IS_E2(x) || BNX2X_CHIP_IS_E3(x))
+
+#define IS_E1H_OFFSET       		BNX2X_CHIP_IS_E1H(cp->chip_id)
+
+#define BNX2X_RX_DESC_CNT		(BCM_PAGE_SIZE / sizeof(struct eth_rx_bd))
+#define BNX2X_MAX_RX_DESC_CNT		(BNX2X_RX_DESC_CNT - 2)
+#define BNX2X_RCQ_DESC_CNT		(BCM_PAGE_SIZE / sizeof(union eth_rx_cqe))
+#define BNX2X_MAX_RCQ_DESC_CNT		(BNX2X_RCQ_DESC_CNT - 1)
+
+#define BNX2X_NEXT_RCQE(x) (((x) & BNX2X_MAX_RCQ_DESC_CNT) ==		\
+		(BNX2X_MAX_RCQ_DESC_CNT - 1)) ?				\
+		(x) + 2 : (x) + 1
+
+#if (NEW_BNX2X_HSI >= 60)
+#define BNX2X_DEF_SB_ID			HC_SP_SB_ID
+#else
+#define BNX2X_DEF_SB_ID			16
+#endif
+
+#if (NEW_BNX2X_HSI < 60)
+#define BNX2X_ISCSI_RX_SB_INDEX_NUM					\
+		((HC_INDEX_DEF_U_ETH_ISCSI_RX_CQ_CONS << \
+		  USTORM_ETH_ST_CONTEXT_CONFIG_CQE_SB_INDEX_NUMBER_SHIFT) & \
+		 USTORM_ETH_ST_CONTEXT_CONFIG_CQE_SB_INDEX_NUMBER)
+#endif
+
+#define BNX2X_SHMEM_MF_BLK_OFFSET	0x7e4
+
+#define BNX2X_SHMEM_ADDR(base, field)	(base + \
+					 offsetof(struct shmem_region, field))
+
+#define BNX2X_SHMEM2_ADDR(base, field)	(base + \
+					 offsetof(struct shmem2_region, field))
+
+#define BNX2X_SHMEM2_HAS(base, field)				\
+		((base) &&		 			\
+		 (CNIC_RD(dev, BNX2X_SHMEM2_ADDR(base, size)) >	\
+		  offsetof(struct shmem2_region, field)))
+
+#define BNX2X_MF_CFG_ADDR(base, field)				\
+			((base) + offsetof(struct mf_cfg, field))
+
+#ifndef ETH_MAX_RX_CLIENTS_E2
+#define ETH_MAX_RX_CLIENTS_E2 		ETH_MAX_RX_CLIENTS_E1H
+#endif
+
+#if (NEW_BNX2X_HSI >= 60)
+#define CNIC_PORT(cp)			((cp)->pfid & 1)
+#else
+#define CNIC_PORT(cp)			((cp)->func % PORT_MAX)
+#endif
+
+#define CNIC_FUNC(cp)			((cp)->func)
+#define CNIC_PATH(cp)			(!BNX2X_CHIP_IS_E2_PLUS(cp->chip_id) ? \
+					 0 : (CNIC_FUNC(cp) & 1))
+#define CNIC_E1HVN(cp)			((cp)->pfid >> 1)
+
+#define BNX2X_HW_CID(cp, x)		((CNIC_PORT(cp) << 23) | \
+					 (CNIC_E1HVN(cp) << 17) | (x))
+
+#define BNX2X_SW_CID(x)			((x) & 0x1ffff)
+
+#define BNX2X_CL_QZONE_ID(cp, cli)					\
+		(BNX2X_CHIP_IS_E2_PLUS(cp->chip_id) ? cli :		\
+		 cli + (CNIC_PORT(cp) * ETH_MAX_RX_CLIENTS_E1H))
+
+#ifndef MAX_STAT_COUNTER_ID
+#define MAX_STAT_COUNTER_ID						\
+	(BNX2X_CHIP_IS_E1H((cp)->chip_id) ? MAX_STAT_COUNTER_ID_E1H :	\
+	 ((BNX2X_CHIP_IS_E2_PLUS((cp)->chip_id)) ? MAX_STAT_COUNTER_ID_E2 :\
+	  MAX_STAT_COUNTER_ID_E1))
+#endif
+
+#define TCP_TSTORM_OOO_MASK			(3<<4)
+#if (NEW_BNX2X_HSI == 60)
+#define TCP_TSTORM_OOO_DROP_AND_PROC_ACK	(0<<4)
+#define TCP_TSTORM_OOO_SEND_PURE_ACK		(1<<4)
+#define TCP_TSTORM_OOO_SUPPORTED		(2<<4)
+#endif
+
+#define BNX2X_RAMROD_TO				(HZ / 4)
+#endif
+
diff -r 2e9e6572f41c drivers/net/bnx2/cnic_defs.h
--- /dev/null
+++ b/drivers/net/bnx2/cnic_defs.h
@@ -0,0 +1,5458 @@
+
+/* cnic.c: Broadcom CNIC core network driver.
+ *
+ * Copyright (c) 2006-2012 Broadcom Corporation
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation.
+ *
+ */
+
+#ifndef CNIC_DEFS_H
+#define CNIC_DEFS_H
+
+/* KWQ (kernel work queue) request op codes */
+#define L2_KWQE_OPCODE_VALUE_FLUSH                  (4)
+#define L2_KWQE_OPCODE_VALUE_VM_FREE_RX_QUEUE       (8)
+
+#define L4_KWQE_OPCODE_VALUE_CONNECT1               (50)
+#define L4_KWQE_OPCODE_VALUE_CONNECT2               (51)
+#define L4_KWQE_OPCODE_VALUE_CONNECT3               (52)
+#define L4_KWQE_OPCODE_VALUE_RESET                  (53)
+#define L4_KWQE_OPCODE_VALUE_CLOSE                  (54)
+#define L4_KWQE_OPCODE_VALUE_UPDATE_SECRET          (60)
+#define L4_KWQE_OPCODE_VALUE_INIT_ULP               (61)
+
+#define L4_KWQE_OPCODE_VALUE_OFFLOAD_PG             (1)
+#define L4_KWQE_OPCODE_VALUE_UPDATE_PG              (9)
+#define L4_KWQE_OPCODE_VALUE_UPLOAD_PG              (14)
+
+#define L5CM_RAMROD_CMD_ID_BASE			(0x80)
+#define L5CM_RAMROD_CMD_ID_TCP_CONNECT		(L5CM_RAMROD_CMD_ID_BASE + 3)
+#define L5CM_RAMROD_CMD_ID_CLOSE		(L5CM_RAMROD_CMD_ID_BASE + 12)
+#define L5CM_RAMROD_CMD_ID_ABORT		(L5CM_RAMROD_CMD_ID_BASE + 13)
+#define L5CM_RAMROD_CMD_ID_SEARCHER_DELETE	(L5CM_RAMROD_CMD_ID_BASE + 14)
+#define L5CM_RAMROD_CMD_ID_TERMINATE_OFFLOAD	(L5CM_RAMROD_CMD_ID_BASE + 15)
+
+#define FCOE_RAMROD_CMD_ID_INIT_FUNC		(FCOE_KCQE_OPCODE_INIT_FUNC)
+#define FCOE_RAMROD_CMD_ID_DESTROY_FUNC		(FCOE_KCQE_OPCODE_DESTROY_FUNC)
+#define FCOE_RAMROD_CMD_ID_STAT_FUNC		(FCOE_KCQE_OPCODE_STAT_FUNC)
+#define FCOE_RAMROD_CMD_ID_OFFLOAD_CONN		(FCOE_KCQE_OPCODE_OFFLOAD_CONN)
+#define FCOE_RAMROD_CMD_ID_ENABLE_CONN		(FCOE_KCQE_OPCODE_ENABLE_CONN)
+#define FCOE_RAMROD_CMD_ID_DISABLE_CONN		(FCOE_KCQE_OPCODE_DISABLE_CONN) 
+#define FCOE_RAMROD_CMD_ID_DESTROY_CONN		(FCOE_KCQE_OPCODE_DESTROY_CONN) 
+#define FCOE_RAMROD_CMD_ID_TERMINATE_CONN	(0x81)
+
+/* KCQ (kernel completion queue) response op codes */
+#define L4_KCQE_OPCODE_VALUE_CLOSE_COMP             (53)
+#define L4_KCQE_OPCODE_VALUE_RESET_COMP             (54)
+#define L4_KCQE_OPCODE_VALUE_FW_TCP_UPDATE          (55)
+#define L4_KCQE_OPCODE_VALUE_CONNECT_COMPLETE       (56)
+#define L4_KCQE_OPCODE_VALUE_RESET_RECEIVED         (57)
+#define L4_KCQE_OPCODE_VALUE_CLOSE_RECEIVED         (58)
+#define L4_KCQE_OPCODE_VALUE_INIT_ULP               (61)
+
+#define L4_KCQE_OPCODE_VALUE_OFFLOAD_PG             (1)
+#define L4_KCQE_OPCODE_VALUE_UPDATE_PG              (9)
+#define L4_KCQE_OPCODE_VALUE_UPLOAD_PG              (14)
+
+/* KCQ (kernel completion queue) completion status */
+#define L4_KCQE_COMPLETION_STATUS_SUCCESS           (0)
+#define L4_KCQE_COMPLETION_STATUS_NIC_ERROR         (4)
+#define L4_KCQE_COMPLETION_STATUS_PARITY_ERROR	    (0x81)
+#define L4_KCQE_COMPLETION_STATUS_TIMEOUT           (0x93)
+
+#define L4_KCQE_COMPLETION_STATUS_CTX_ALLOC_FAIL    (0x83)
+#define L4_KCQE_COMPLETION_STATUS_OFFLOADED_PG      (0x89)
+
+#define L4_KCQE_OPCODE_VALUE_OOO_EVENT_NOTIFICATION (0xa0)
+#define L4_KCQE_OPCODE_VALUE_OOO_FLUSH              (0xa1)
+
+#define L4_LAYER_CODE (4)
+#define L2_LAYER_CODE (2)
+
+/*
+ * L4 KCQ CQE
+ */
+struct l4_kcq {
+	u32 cid;
+	u32 pg_cid;
+	u32 conn_id;
+	u32 pg_host_opaque;
+#if defined(__BIG_ENDIAN)
+	u16 status;
+	u16 reserved1;
+#elif defined(__LITTLE_ENDIAN)
+	u16 reserved1;
+	u16 status;
+#endif
+	u32 reserved2[2];
+#if defined(__BIG_ENDIAN)
+	u8 flags;
+#define L4_KCQ_RESERVED3 (0x7<<0)
+#define L4_KCQ_RESERVED3_SHIFT 0
+#define L4_KCQ_RAMROD_COMPLETION (0x1<<3) /* Everest only */
+#define L4_KCQ_RAMROD_COMPLETION_SHIFT 3
+#define L4_KCQ_LAYER_CODE (0x7<<4)
+#define L4_KCQ_LAYER_CODE_SHIFT 4
+#define L4_KCQ_RESERVED4 (0x1<<7)
+#define L4_KCQ_RESERVED4_SHIFT 7
+	u8 op_code;
+	u16 qe_self_seq;
+#elif defined(__LITTLE_ENDIAN)
+	u16 qe_self_seq;
+	u8 op_code;
+	u8 flags;
+#define L4_KCQ_RESERVED3 (0xF<<0)
+#define L4_KCQ_RESERVED3_SHIFT 0
+#define L4_KCQ_RAMROD_COMPLETION (0x1<<3) /* Everest only */
+#define L4_KCQ_RAMROD_COMPLETION_SHIFT 3
+#define L4_KCQ_LAYER_CODE (0x7<<4)
+#define L4_KCQ_LAYER_CODE_SHIFT 4
+#define L4_KCQ_RESERVED4 (0x1<<7)
+#define L4_KCQ_RESERVED4_SHIFT 7
+#endif
+};
+
+
+/*
+ * L4 KCQ CQE PG upload
+ */
+struct l4_kcq_upload_pg {
+	u32 pg_cid;
+#if defined(__BIG_ENDIAN)
+	u16 pg_status;
+	u16 pg_ipid_count;
+#elif defined(__LITTLE_ENDIAN)
+	u16 pg_ipid_count;
+	u16 pg_status;
+#endif
+	u32 reserved1[5];
+#if defined(__BIG_ENDIAN)
+	u8 flags;
+#define L4_KCQ_UPLOAD_PG_RESERVED3 (0xF<<0)
+#define L4_KCQ_UPLOAD_PG_RESERVED3_SHIFT 0
+#define L4_KCQ_UPLOAD_PG_LAYER_CODE (0x7<<4)
+#define L4_KCQ_UPLOAD_PG_LAYER_CODE_SHIFT 4
+#define L4_KCQ_UPLOAD_PG_RESERVED4 (0x1<<7)
+#define L4_KCQ_UPLOAD_PG_RESERVED4_SHIFT 7
+	u8 op_code;
+	u16 qe_self_seq;
+#elif defined(__LITTLE_ENDIAN)
+	u16 qe_self_seq;
+	u8 op_code;
+	u8 flags;
+#define L4_KCQ_UPLOAD_PG_RESERVED3 (0xF<<0)
+#define L4_KCQ_UPLOAD_PG_RESERVED3_SHIFT 0
+#define L4_KCQ_UPLOAD_PG_LAYER_CODE (0x7<<4)
+#define L4_KCQ_UPLOAD_PG_LAYER_CODE_SHIFT 4
+#define L4_KCQ_UPLOAD_PG_RESERVED4 (0x1<<7)
+#define L4_KCQ_UPLOAD_PG_RESERVED4_SHIFT 7
+#endif
+};
+
+
+/*
+ * Gracefully close the connection request
+ */
+struct l4_kwq_close_req {
+#if defined(__BIG_ENDIAN)
+	u8 flags;
+#define L4_KWQ_CLOSE_REQ_RESERVED1 (0xF<<0)
+#define L4_KWQ_CLOSE_REQ_RESERVED1_SHIFT 0
+#define L4_KWQ_CLOSE_REQ_LAYER_CODE (0x7<<4)
+#define L4_KWQ_CLOSE_REQ_LAYER_CODE_SHIFT 4
+#define L4_KWQ_CLOSE_REQ_LINKED_WITH_NEXT (0x1<<7)
+#define L4_KWQ_CLOSE_REQ_LINKED_WITH_NEXT_SHIFT 7
+	u8 op_code;
+	u16 reserved0;
+#elif defined(__LITTLE_ENDIAN)
+	u16 reserved0;
+	u8 op_code;
+	u8 flags;
+#define L4_KWQ_CLOSE_REQ_RESERVED1 (0xF<<0)
+#define L4_KWQ_CLOSE_REQ_RESERVED1_SHIFT 0
+#define L4_KWQ_CLOSE_REQ_LAYER_CODE (0x7<<4)
+#define L4_KWQ_CLOSE_REQ_LAYER_CODE_SHIFT 4
+#define L4_KWQ_CLOSE_REQ_LINKED_WITH_NEXT (0x1<<7)
+#define L4_KWQ_CLOSE_REQ_LINKED_WITH_NEXT_SHIFT 7
+#endif
+	u32 cid;
+	u32 reserved2[6];
+};
+
+
+/*
+ * The first request to be passed in order to establish connection in option2
+ */
+struct l4_kwq_connect_req1 {
+#if defined(__BIG_ENDIAN)
+	u8 flags;
+#define L4_KWQ_CONNECT_REQ1_RESERVED1 (0xF<<0)
+#define L4_KWQ_CONNECT_REQ1_RESERVED1_SHIFT 0
+#define L4_KWQ_CONNECT_REQ1_LAYER_CODE (0x7<<4)
+#define L4_KWQ_CONNECT_REQ1_LAYER_CODE_SHIFT 4
+#define L4_KWQ_CONNECT_REQ1_LINKED_WITH_NEXT (0x1<<7)
+#define L4_KWQ_CONNECT_REQ1_LINKED_WITH_NEXT_SHIFT 7
+	u8 op_code;
+	u8 reserved0;
+	u8 conn_flags;
+#define L4_KWQ_CONNECT_REQ1_IS_PG_HOST_OPAQUE (0x1<<0)
+#define L4_KWQ_CONNECT_REQ1_IS_PG_HOST_OPAQUE_SHIFT 0
+#define L4_KWQ_CONNECT_REQ1_IP_V6 (0x1<<1)
+#define L4_KWQ_CONNECT_REQ1_IP_V6_SHIFT 1
+#define L4_KWQ_CONNECT_REQ1_PASSIVE_FLAG (0x1<<2)
+#define L4_KWQ_CONNECT_REQ1_PASSIVE_FLAG_SHIFT 2
+#define L4_KWQ_CONNECT_REQ1_RSRV (0x1F<<3)
+#define L4_KWQ_CONNECT_REQ1_RSRV_SHIFT 3
+#elif defined(__LITTLE_ENDIAN)
+	u8 conn_flags;
+#define L4_KWQ_CONNECT_REQ1_IS_PG_HOST_OPAQUE (0x1<<0)
+#define L4_KWQ_CONNECT_REQ1_IS_PG_HOST_OPAQUE_SHIFT 0
+#define L4_KWQ_CONNECT_REQ1_IP_V6 (0x1<<1)
+#define L4_KWQ_CONNECT_REQ1_IP_V6_SHIFT 1
+#define L4_KWQ_CONNECT_REQ1_PASSIVE_FLAG (0x1<<2)
+#define L4_KWQ_CONNECT_REQ1_PASSIVE_FLAG_SHIFT 2
+#define L4_KWQ_CONNECT_REQ1_RSRV (0x1F<<3)
+#define L4_KWQ_CONNECT_REQ1_RSRV_SHIFT 3
+	u8 reserved0;
+	u8 op_code;
+	u8 flags;
+#define L4_KWQ_CONNECT_REQ1_RESERVED1 (0xF<<0)
+#define L4_KWQ_CONNECT_REQ1_RESERVED1_SHIFT 0
+#define L4_KWQ_CONNECT_REQ1_LAYER_CODE (0x7<<4)
+#define L4_KWQ_CONNECT_REQ1_LAYER_CODE_SHIFT 4
+#define L4_KWQ_CONNECT_REQ1_LINKED_WITH_NEXT (0x1<<7)
+#define L4_KWQ_CONNECT_REQ1_LINKED_WITH_NEXT_SHIFT 7
+#endif
+	u32 cid;
+	u32 pg_cid;
+	u32 src_ip;
+	u32 dst_ip;
+#if defined(__BIG_ENDIAN)
+	u16 dst_port;
+	u16 src_port;
+#elif defined(__LITTLE_ENDIAN)
+	u16 src_port;
+	u16 dst_port;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 rsrv1[3];
+	u8 tcp_flags;
+#define L4_KWQ_CONNECT_REQ1_NO_DELAY_ACK (0x1<<0)
+#define L4_KWQ_CONNECT_REQ1_NO_DELAY_ACK_SHIFT 0
+#define L4_KWQ_CONNECT_REQ1_KEEP_ALIVE (0x1<<1)
+#define L4_KWQ_CONNECT_REQ1_KEEP_ALIVE_SHIFT 1
+#define L4_KWQ_CONNECT_REQ1_NAGLE_ENABLE (0x1<<2)
+#define L4_KWQ_CONNECT_REQ1_NAGLE_ENABLE_SHIFT 2
+#define L4_KWQ_CONNECT_REQ1_TIME_STAMP (0x1<<3)
+#define L4_KWQ_CONNECT_REQ1_TIME_STAMP_SHIFT 3
+#define L4_KWQ_CONNECT_REQ1_SACK (0x1<<4)
+#define L4_KWQ_CONNECT_REQ1_SACK_SHIFT 4
+#define L4_KWQ_CONNECT_REQ1_SEG_SCALING (0x1<<5)
+#define L4_KWQ_CONNECT_REQ1_SEG_SCALING_SHIFT 5
+#define L4_KWQ_CONNECT_REQ1_RESERVED2 (0x3<<6)
+#define L4_KWQ_CONNECT_REQ1_RESERVED2_SHIFT 6
+#elif defined(__LITTLE_ENDIAN)
+	u8 tcp_flags;
+#define L4_KWQ_CONNECT_REQ1_NO_DELAY_ACK (0x1<<0)
+#define L4_KWQ_CONNECT_REQ1_NO_DELAY_ACK_SHIFT 0
+#define L4_KWQ_CONNECT_REQ1_KEEP_ALIVE (0x1<<1)
+#define L4_KWQ_CONNECT_REQ1_KEEP_ALIVE_SHIFT 1
+#define L4_KWQ_CONNECT_REQ1_NAGLE_ENABLE (0x1<<2)
+#define L4_KWQ_CONNECT_REQ1_NAGLE_ENABLE_SHIFT 2
+#define L4_KWQ_CONNECT_REQ1_TIME_STAMP (0x1<<3)
+#define L4_KWQ_CONNECT_REQ1_TIME_STAMP_SHIFT 3
+#define L4_KWQ_CONNECT_REQ1_SACK (0x1<<4)
+#define L4_KWQ_CONNECT_REQ1_SACK_SHIFT 4
+#define L4_KWQ_CONNECT_REQ1_SEG_SCALING (0x1<<5)
+#define L4_KWQ_CONNECT_REQ1_SEG_SCALING_SHIFT 5
+#define L4_KWQ_CONNECT_REQ1_RESERVED2 (0x3<<6)
+#define L4_KWQ_CONNECT_REQ1_RESERVED2_SHIFT 6
+	u8 rsrv1[3];
+#endif
+	u32 rsrv2;
+};
+
+
+/*
+ * The second ( optional )request to be passed in order to establish
+ * connection in option2 - for IPv6 only
+ */
+struct l4_kwq_connect_req2 {
+#if defined(__BIG_ENDIAN)
+	u8 flags;
+#define L4_KWQ_CONNECT_REQ2_RESERVED1 (0xF<<0)
+#define L4_KWQ_CONNECT_REQ2_RESERVED1_SHIFT 0
+#define L4_KWQ_CONNECT_REQ2_LAYER_CODE (0x7<<4)
+#define L4_KWQ_CONNECT_REQ2_LAYER_CODE_SHIFT 4
+#define L4_KWQ_CONNECT_REQ2_LINKED_WITH_NEXT (0x1<<7)
+#define L4_KWQ_CONNECT_REQ2_LINKED_WITH_NEXT_SHIFT 7
+	u8 op_code;
+	u8 reserved0;
+	u8 rsrv;
+#elif defined(__LITTLE_ENDIAN)
+	u8 rsrv;
+	u8 reserved0;
+	u8 op_code;
+	u8 flags;
+#define L4_KWQ_CONNECT_REQ2_RESERVED1 (0xF<<0)
+#define L4_KWQ_CONNECT_REQ2_RESERVED1_SHIFT 0
+#define L4_KWQ_CONNECT_REQ2_LAYER_CODE (0x7<<4)
+#define L4_KWQ_CONNECT_REQ2_LAYER_CODE_SHIFT 4
+#define L4_KWQ_CONNECT_REQ2_LINKED_WITH_NEXT (0x1<<7)
+#define L4_KWQ_CONNECT_REQ2_LINKED_WITH_NEXT_SHIFT 7
+#endif
+	u32 reserved2;
+	u32 src_ip_v6_2;
+	u32 src_ip_v6_3;
+	u32 src_ip_v6_4;
+	u32 dst_ip_v6_2;
+	u32 dst_ip_v6_3;
+	u32 dst_ip_v6_4;
+};
+
+
+/*
+ * The third ( and last )request to be passed in order to establish
+ * connection in option2
+ */
+struct l4_kwq_connect_req3 {
+#if defined(__BIG_ENDIAN)
+	u8 flags;
+#define L4_KWQ_CONNECT_REQ3_RESERVED1 (0xF<<0)
+#define L4_KWQ_CONNECT_REQ3_RESERVED1_SHIFT 0
+#define L4_KWQ_CONNECT_REQ3_LAYER_CODE (0x7<<4)
+#define L4_KWQ_CONNECT_REQ3_LAYER_CODE_SHIFT 4
+#define L4_KWQ_CONNECT_REQ3_LINKED_WITH_NEXT (0x1<<7)
+#define L4_KWQ_CONNECT_REQ3_LINKED_WITH_NEXT_SHIFT 7
+	u8 op_code;
+	u16 reserved0;
+#elif defined(__LITTLE_ENDIAN)
+	u16 reserved0;
+	u8 op_code;
+	u8 flags;
+#define L4_KWQ_CONNECT_REQ3_RESERVED1 (0xF<<0)
+#define L4_KWQ_CONNECT_REQ3_RESERVED1_SHIFT 0
+#define L4_KWQ_CONNECT_REQ3_LAYER_CODE (0x7<<4)
+#define L4_KWQ_CONNECT_REQ3_LAYER_CODE_SHIFT 4
+#define L4_KWQ_CONNECT_REQ3_LINKED_WITH_NEXT (0x1<<7)
+#define L4_KWQ_CONNECT_REQ3_LINKED_WITH_NEXT_SHIFT 7
+#endif
+	u32 ka_timeout;
+	u32 ka_interval ;
+#if defined(__BIG_ENDIAN)
+	u8 snd_seq_scale;
+	u8 ttl;
+	u8 tos;
+	u8 ka_max_probe_count;
+#elif defined(__LITTLE_ENDIAN)
+	u8 ka_max_probe_count;
+	u8 tos;
+	u8 ttl;
+	u8 snd_seq_scale;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 pmtu;
+	u16 mss;
+#elif defined(__LITTLE_ENDIAN)
+	u16 mss;
+	u16 pmtu;
+#endif
+	u32 rcv_buf;
+	u32 snd_buf;
+	u32 seed;
+};
+
+
+/*
+ * a KWQE request to offload a PG connection
+ */
+struct l4_kwq_offload_pg {
+#if defined(__BIG_ENDIAN)
+	u8 flags;
+#define L4_KWQ_OFFLOAD_PG_RESERVED1 (0xF<<0)
+#define L4_KWQ_OFFLOAD_PG_RESERVED1_SHIFT 0
+#define L4_KWQ_OFFLOAD_PG_LAYER_CODE (0x7<<4)
+#define L4_KWQ_OFFLOAD_PG_LAYER_CODE_SHIFT 4
+#define L4_KWQ_OFFLOAD_PG_LINKED_WITH_NEXT (0x1<<7)
+#define L4_KWQ_OFFLOAD_PG_LINKED_WITH_NEXT_SHIFT 7
+	u8 op_code;
+	u16 reserved0;
+#elif defined(__LITTLE_ENDIAN)
+	u16 reserved0;
+	u8 op_code;
+	u8 flags;
+#define L4_KWQ_OFFLOAD_PG_RESERVED1 (0xF<<0)
+#define L4_KWQ_OFFLOAD_PG_RESERVED1_SHIFT 0
+#define L4_KWQ_OFFLOAD_PG_LAYER_CODE (0x7<<4)
+#define L4_KWQ_OFFLOAD_PG_LAYER_CODE_SHIFT 4
+#define L4_KWQ_OFFLOAD_PG_LINKED_WITH_NEXT (0x1<<7)
+#define L4_KWQ_OFFLOAD_PG_LINKED_WITH_NEXT_SHIFT 7
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 l2hdr_nbytes;
+	u8 pg_flags;
+#define L4_KWQ_OFFLOAD_PG_SNAP_ENCAP (0x1<<0)
+#define L4_KWQ_OFFLOAD_PG_SNAP_ENCAP_SHIFT 0
+#define L4_KWQ_OFFLOAD_PG_VLAN_TAGGING (0x1<<1)
+#define L4_KWQ_OFFLOAD_PG_VLAN_TAGGING_SHIFT 1
+#define L4_KWQ_OFFLOAD_PG_RESERVED2 (0x3F<<2)
+#define L4_KWQ_OFFLOAD_PG_RESERVED2_SHIFT 2
+	u8 da0;
+	u8 da1;
+#elif defined(__LITTLE_ENDIAN)
+	u8 da1;
+	u8 da0;
+	u8 pg_flags;
+#define L4_KWQ_OFFLOAD_PG_SNAP_ENCAP (0x1<<0)
+#define L4_KWQ_OFFLOAD_PG_SNAP_ENCAP_SHIFT 0
+#define L4_KWQ_OFFLOAD_PG_VLAN_TAGGING (0x1<<1)
+#define L4_KWQ_OFFLOAD_PG_VLAN_TAGGING_SHIFT 1
+#define L4_KWQ_OFFLOAD_PG_RESERVED2 (0x3F<<2)
+#define L4_KWQ_OFFLOAD_PG_RESERVED2_SHIFT 2
+	u8 l2hdr_nbytes;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 da2;
+	u8 da3;
+	u8 da4;
+	u8 da5;
+#elif defined(__LITTLE_ENDIAN)
+	u8 da5;
+	u8 da4;
+	u8 da3;
+	u8 da2;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 sa0;
+	u8 sa1;
+	u8 sa2;
+	u8 sa3;
+#elif defined(__LITTLE_ENDIAN)
+	u8 sa3;
+	u8 sa2;
+	u8 sa1;
+	u8 sa0;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 sa4;
+	u8 sa5;
+	u16 etype;
+#elif defined(__LITTLE_ENDIAN)
+	u16 etype;
+	u8 sa5;
+	u8 sa4;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 vlan_tag;
+	u16 ipid_start;
+#elif defined(__LITTLE_ENDIAN)
+	u16 ipid_start;
+	u16 vlan_tag;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 ipid_count;
+	u16 reserved3;
+#elif defined(__LITTLE_ENDIAN)
+	u16 reserved3;
+	u16 ipid_count;
+#endif
+	u32 host_opaque;
+};
+
+
+/*
+ * Abortively close the connection request
+ */
+struct l4_kwq_reset_req {
+#if defined(__BIG_ENDIAN)
+	u8 flags;
+#define L4_KWQ_RESET_REQ_RESERVED1 (0xF<<0)
+#define L4_KWQ_RESET_REQ_RESERVED1_SHIFT 0
+#define L4_KWQ_RESET_REQ_LAYER_CODE (0x7<<4)
+#define L4_KWQ_RESET_REQ_LAYER_CODE_SHIFT 4
+#define L4_KWQ_RESET_REQ_LINKED_WITH_NEXT (0x1<<7)
+#define L4_KWQ_RESET_REQ_LINKED_WITH_NEXT_SHIFT 7
+	u8 op_code;
+	u16 reserved0;
+#elif defined(__LITTLE_ENDIAN)
+	u16 reserved0;
+	u8 op_code;
+	u8 flags;
+#define L4_KWQ_RESET_REQ_RESERVED1 (0xF<<0)
+#define L4_KWQ_RESET_REQ_RESERVED1_SHIFT 0
+#define L4_KWQ_RESET_REQ_LAYER_CODE (0x7<<4)
+#define L4_KWQ_RESET_REQ_LAYER_CODE_SHIFT 4
+#define L4_KWQ_RESET_REQ_LINKED_WITH_NEXT (0x1<<7)
+#define L4_KWQ_RESET_REQ_LINKED_WITH_NEXT_SHIFT 7
+#endif
+	u32 cid;
+	u32 reserved2[6];
+};
+
+
+/*
+ * a KWQE request to update a PG connection
+ */
+struct l4_kwq_update_pg {
+#if defined(__BIG_ENDIAN)
+	u8 flags;
+#define L4_KWQ_UPDATE_PG_RESERVED1 (0xF<<0)
+#define L4_KWQ_UPDATE_PG_RESERVED1_SHIFT 0
+#define L4_KWQ_UPDATE_PG_LAYER_CODE (0x7<<4)
+#define L4_KWQ_UPDATE_PG_LAYER_CODE_SHIFT 4
+#define L4_KWQ_UPDATE_PG_LINKED_WITH_NEXT (0x1<<7)
+#define L4_KWQ_UPDATE_PG_LINKED_WITH_NEXT_SHIFT 7
+	u8 opcode;
+	u16 oper16;
+#elif defined(__LITTLE_ENDIAN)
+	u16 oper16;
+	u8 opcode;
+	u8 flags;
+#define L4_KWQ_UPDATE_PG_RESERVED1 (0xF<<0)
+#define L4_KWQ_UPDATE_PG_RESERVED1_SHIFT 0
+#define L4_KWQ_UPDATE_PG_LAYER_CODE (0x7<<4)
+#define L4_KWQ_UPDATE_PG_LAYER_CODE_SHIFT 4
+#define L4_KWQ_UPDATE_PG_LINKED_WITH_NEXT (0x1<<7)
+#define L4_KWQ_UPDATE_PG_LINKED_WITH_NEXT_SHIFT 7
+#endif
+	u32 pg_cid;
+	u32 pg_host_opaque;
+#if defined(__BIG_ENDIAN)
+	u8 pg_valids;
+#define L4_KWQ_UPDATE_PG_VALIDS_IPID_COUNT (0x1<<0)
+#define L4_KWQ_UPDATE_PG_VALIDS_IPID_COUNT_SHIFT 0
+#define L4_KWQ_UPDATE_PG_VALIDS_DA (0x1<<1)
+#define L4_KWQ_UPDATE_PG_VALIDS_DA_SHIFT 1
+#define L4_KWQ_UPDATE_PG_RESERVERD2 (0x3F<<2)
+#define L4_KWQ_UPDATE_PG_RESERVERD2_SHIFT 2
+	u8 pg_unused_a;
+	u16 pg_ipid_count;
+#elif defined(__LITTLE_ENDIAN)
+	u16 pg_ipid_count;
+	u8 pg_unused_a;
+	u8 pg_valids;
+#define L4_KWQ_UPDATE_PG_VALIDS_IPID_COUNT (0x1<<0)
+#define L4_KWQ_UPDATE_PG_VALIDS_IPID_COUNT_SHIFT 0
+#define L4_KWQ_UPDATE_PG_VALIDS_DA (0x1<<1)
+#define L4_KWQ_UPDATE_PG_VALIDS_DA_SHIFT 1
+#define L4_KWQ_UPDATE_PG_RESERVERD2 (0x3F<<2)
+#define L4_KWQ_UPDATE_PG_RESERVERD2_SHIFT 2
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 reserverd3;
+	u8 da0;
+	u8 da1;
+#elif defined(__LITTLE_ENDIAN)
+	u8 da1;
+	u8 da0;
+	u16 reserverd3;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 da2;
+	u8 da3;
+	u8 da4;
+	u8 da5;
+#elif defined(__LITTLE_ENDIAN)
+	u8 da5;
+	u8 da4;
+	u8 da3;
+	u8 da2;
+#endif
+	u32 reserved4;
+	u32 reserved5;
+};
+
+
+/*
+ * a KWQE request to upload a PG or L4 context
+ */
+struct l4_kwq_upload {
+#if defined(__BIG_ENDIAN)
+	u8 flags;
+#define L4_KWQ_UPLOAD_RESERVED1 (0xF<<0)
+#define L4_KWQ_UPLOAD_RESERVED1_SHIFT 0
+#define L4_KWQ_UPLOAD_LAYER_CODE (0x7<<4)
+#define L4_KWQ_UPLOAD_LAYER_CODE_SHIFT 4
+#define L4_KWQ_UPLOAD_LINKED_WITH_NEXT (0x1<<7)
+#define L4_KWQ_UPLOAD_LINKED_WITH_NEXT_SHIFT 7
+	u8 opcode;
+	u16 oper16;
+#elif defined(__LITTLE_ENDIAN)
+	u16 oper16;
+	u8 opcode;
+	u8 flags;
+#define L4_KWQ_UPLOAD_RESERVED1 (0xF<<0)
+#define L4_KWQ_UPLOAD_RESERVED1_SHIFT 0
+#define L4_KWQ_UPLOAD_LAYER_CODE (0x7<<4)
+#define L4_KWQ_UPLOAD_LAYER_CODE_SHIFT 4
+#define L4_KWQ_UPLOAD_LINKED_WITH_NEXT (0x1<<7)
+#define L4_KWQ_UPLOAD_LINKED_WITH_NEXT_SHIFT 7
+#endif
+	u32 cid;
+	u32 reserved2[6];
+};
+
+/*
+ * bnx2x structures
+ */
+
+/*
+ * The iscsi aggregative context of Cstorm
+ */
+struct cstorm_iscsi_ag_context {
+	u32 agg_vars1;
+#define CSTORM_ISCSI_AG_CONTEXT_STATE (0xFF<<0)
+#define CSTORM_ISCSI_AG_CONTEXT_STATE_SHIFT 0
+#define __CSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM0 (0x1<<8)
+#define __CSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM0_SHIFT 8
+#define __CSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM1 (0x1<<9)
+#define __CSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM1_SHIFT 9
+#define __CSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM2 (0x1<<10)
+#define __CSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM2_SHIFT 10
+#define __CSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM3 (0x1<<11)
+#define __CSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM3_SHIFT 11
+#define __CSTORM_ISCSI_AG_CONTEXT_RESERVED_ULP_RX_SE_CF_EN (0x1<<12)
+#define __CSTORM_ISCSI_AG_CONTEXT_RESERVED_ULP_RX_SE_CF_EN_SHIFT 12
+#define __CSTORM_ISCSI_AG_CONTEXT_RESERVED_ULP_RX_INV_CF_EN (0x1<<13)
+#define __CSTORM_ISCSI_AG_CONTEXT_RESERVED_ULP_RX_INV_CF_EN_SHIFT 13
+#define __CSTORM_ISCSI_AG_CONTEXT_AUX4_CF (0x3<<14)
+#define __CSTORM_ISCSI_AG_CONTEXT_AUX4_CF_SHIFT 14
+#define __CSTORM_ISCSI_AG_CONTEXT_RESERVED66 (0x3<<16)
+#define __CSTORM_ISCSI_AG_CONTEXT_RESERVED66_SHIFT 16
+#define __CSTORM_ISCSI_AG_CONTEXT_FIN_RECEIVED_CF_EN (0x1<<18)
+#define __CSTORM_ISCSI_AG_CONTEXT_FIN_RECEIVED_CF_EN_SHIFT 18
+#define __CSTORM_ISCSI_AG_CONTEXT_AUX1_CF_EN (0x1<<19)
+#define __CSTORM_ISCSI_AG_CONTEXT_AUX1_CF_EN_SHIFT 19
+#define __CSTORM_ISCSI_AG_CONTEXT_AUX2_CF_EN (0x1<<20)
+#define __CSTORM_ISCSI_AG_CONTEXT_AUX2_CF_EN_SHIFT 20
+#define __CSTORM_ISCSI_AG_CONTEXT_AUX3_CF_EN (0x1<<21)
+#define __CSTORM_ISCSI_AG_CONTEXT_AUX3_CF_EN_SHIFT 21
+#define __CSTORM_ISCSI_AG_CONTEXT_AUX4_CF_EN (0x1<<22)
+#define __CSTORM_ISCSI_AG_CONTEXT_AUX4_CF_EN_SHIFT 22
+#define __CSTORM_ISCSI_AG_CONTEXT_REL_SEQ_RULE (0x7<<23)
+#define __CSTORM_ISCSI_AG_CONTEXT_REL_SEQ_RULE_SHIFT 23
+#define CSTORM_ISCSI_AG_CONTEXT_HQ_PROD_RULE (0x3<<26)
+#define CSTORM_ISCSI_AG_CONTEXT_HQ_PROD_RULE_SHIFT 26
+#define __CSTORM_ISCSI_AG_CONTEXT_RESERVED52 (0x3<<28)
+#define __CSTORM_ISCSI_AG_CONTEXT_RESERVED52_SHIFT 28
+#define __CSTORM_ISCSI_AG_CONTEXT_RESERVED53 (0x3<<30)
+#define __CSTORM_ISCSI_AG_CONTEXT_RESERVED53_SHIFT 30
+#if defined(__BIG_ENDIAN)
+	u8 __aux1_th;
+	u8 __aux1_val;
+	u16 __agg_vars2;
+#elif defined(__LITTLE_ENDIAN)
+	u16 __agg_vars2;
+	u8 __aux1_val;
+	u8 __aux1_th;
+#endif
+	u32 rel_seq;
+	u32 rel_seq_th;
+#if defined(__BIG_ENDIAN)
+	u16 hq_cons;
+	u16 hq_prod;
+#elif defined(__LITTLE_ENDIAN)
+	u16 hq_prod;
+	u16 hq_cons;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 __reserved62;
+	u8 __reserved61;
+	u8 __reserved60;
+	u8 __reserved59;
+#elif defined(__LITTLE_ENDIAN)
+	u8 __reserved59;
+	u8 __reserved60;
+	u8 __reserved61;
+	u8 __reserved62;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 __reserved64;
+	u16 cq_u_prod;
+#elif defined(__LITTLE_ENDIAN)
+	u16 cq_u_prod;
+	u16 __reserved64;
+#endif
+	u32 __cq_u_prod1;
+#if defined(__BIG_ENDIAN)
+	u16 __agg_vars3;
+	u16 cq_u_pend;
+#elif defined(__LITTLE_ENDIAN)
+	u16 cq_u_pend;
+	u16 __agg_vars3;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 __aux2_th;
+	u16 aux2_val;
+#elif defined(__LITTLE_ENDIAN)
+	u16 aux2_val;
+	u16 __aux2_th;
+#endif
+};
+
+/*
+ * The fcoe extra aggregative context section of Tstorm
+ */
+struct tstorm_fcoe_extra_ag_context_section {
+	u32 __agg_val1;
+#if defined(__BIG_ENDIAN)
+	u8 __tcp_agg_vars2;
+	u8 __agg_val3;
+	u16 __agg_val2;
+#elif defined(__LITTLE_ENDIAN)
+	u16 __agg_val2;
+	u8 __agg_val3;
+	u8 __tcp_agg_vars2;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 __agg_val5;
+	u8 __agg_val6;
+	u8 __tcp_agg_vars3;
+#elif defined(__LITTLE_ENDIAN)
+	u8 __tcp_agg_vars3;
+	u8 __agg_val6;
+	u16 __agg_val5;
+#endif
+	u32 __lcq_prod;
+	u32 rtt_seq;
+	u32 rtt_time;
+	u32 __reserved66;
+	u32 wnd_right_edge;
+	u32 tcp_agg_vars1;
+#define TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_FIN_SENT_FLAG (0x1<<0)
+#define TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_FIN_SENT_FLAG_SHIFT 0
+#define TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_LAST_PACKET_FIN_FLAG (0x1<<1)
+#define TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_LAST_PACKET_FIN_FLAG_SHIFT 1
+#define TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_WND_UPD_CF (0x3<<2)
+#define TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_WND_UPD_CF_SHIFT 2
+#define TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_TIMEOUT_CF (0x3<<4)
+#define TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_TIMEOUT_CF_SHIFT 4
+#define TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_WND_UPD_CF_EN (0x1<<6)
+#define TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_WND_UPD_CF_EN_SHIFT 6
+#define TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_TIMEOUT_CF_EN (0x1<<7)
+#define TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_TIMEOUT_CF_EN_SHIFT 7
+#define TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RETRANSMIT_SEQ_EN (0x1<<8)
+#define TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RETRANSMIT_SEQ_EN_SHIFT 8
+#define __TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_LCQ_SND_EN (0x1<<9)
+#define __TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_LCQ_SND_EN_SHIFT 9
+#define TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_AUX1_FLAG (0x1<<10)
+#define TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_AUX1_FLAG_SHIFT 10
+#define TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_AUX2_FLAG (0x1<<11)
+#define TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_AUX2_FLAG_SHIFT 11
+#define TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_AUX1_CF_EN (0x1<<12)
+#define TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_AUX1_CF_EN_SHIFT 12
+#define TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_AUX2_CF_EN (0x1<<13)
+#define TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_AUX2_CF_EN_SHIFT 13
+#define TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_AUX1_CF (0x3<<14)
+#define TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_AUX1_CF_SHIFT 14
+#define TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_AUX2_CF (0x3<<16)
+#define TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_AUX2_CF_SHIFT 16
+#define TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_TX_BLOCKED (0x1<<18)
+#define TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_TX_BLOCKED_SHIFT 18
+#define __TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_AUX10_CF_EN (0x1<<19)
+#define __TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_AUX10_CF_EN_SHIFT 19
+#define __TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_AUX11_CF_EN (0x1<<20)
+#define __TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_AUX11_CF_EN_SHIFT 20
+#define __TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_AUX12_CF_EN (0x1<<21)
+#define __TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_AUX12_CF_EN_SHIFT 21
+#define __TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED1 (0x3<<22)
+#define __TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED1_SHIFT 22
+#define TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RETRANSMIT_PEND_SEQ (0xF<<24)
+#define TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RETRANSMIT_PEND_SEQ_SHIFT 24
+#define TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RETRANSMIT_DONE_SEQ (0xF<<28)
+#define TSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RETRANSMIT_DONE_SEQ_SHIFT 28
+	u32 snd_max;
+	u32 __lcq_cons;
+	u32 __reserved2;
+};
+
+/*
+ * The fcoe aggregative context of Tstorm
+ */
+struct tstorm_fcoe_ag_context {
+#if defined(__BIG_ENDIAN)
+	u16 ulp_credit;
+	u8 agg_vars1;
+#define TSTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM0 (0x1<<0)
+#define TSTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM0_SHIFT 0
+#define TSTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM1 (0x1<<1)
+#define TSTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM1_SHIFT 1
+#define TSTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM2 (0x1<<2)
+#define TSTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM2_SHIFT 2
+#define TSTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM3 (0x1<<3)
+#define TSTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM3_SHIFT 3
+#define __TSTORM_FCOE_AG_CONTEXT_QUEUE0_FLUSH_CF (0x3<<4)
+#define __TSTORM_FCOE_AG_CONTEXT_QUEUE0_FLUSH_CF_SHIFT 4
+#define __TSTORM_FCOE_AG_CONTEXT_AUX3_FLAG (0x1<<6)
+#define __TSTORM_FCOE_AG_CONTEXT_AUX3_FLAG_SHIFT 6
+#define __TSTORM_FCOE_AG_CONTEXT_AUX4_FLAG (0x1<<7)
+#define __TSTORM_FCOE_AG_CONTEXT_AUX4_FLAG_SHIFT 7
+	u8 state;
+#elif defined(__LITTLE_ENDIAN)
+	u8 state;
+	u8 agg_vars1;
+#define TSTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM0 (0x1<<0)
+#define TSTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM0_SHIFT 0
+#define TSTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM1 (0x1<<1)
+#define TSTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM1_SHIFT 1
+#define TSTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM2 (0x1<<2)
+#define TSTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM2_SHIFT 2
+#define TSTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM3 (0x1<<3)
+#define TSTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM3_SHIFT 3
+#define __TSTORM_FCOE_AG_CONTEXT_QUEUE0_FLUSH_CF (0x3<<4)
+#define __TSTORM_FCOE_AG_CONTEXT_QUEUE0_FLUSH_CF_SHIFT 4
+#define __TSTORM_FCOE_AG_CONTEXT_AUX3_FLAG (0x1<<6)
+#define __TSTORM_FCOE_AG_CONTEXT_AUX3_FLAG_SHIFT 6
+#define __TSTORM_FCOE_AG_CONTEXT_AUX4_FLAG (0x1<<7)
+#define __TSTORM_FCOE_AG_CONTEXT_AUX4_FLAG_SHIFT 7
+	u16 ulp_credit;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 __agg_val4;
+	u16 agg_vars2;
+#define __TSTORM_FCOE_AG_CONTEXT_AUX5_FLAG (0x1<<0)
+#define __TSTORM_FCOE_AG_CONTEXT_AUX5_FLAG_SHIFT 0
+#define __TSTORM_FCOE_AG_CONTEXT_AUX6_FLAG (0x1<<1)
+#define __TSTORM_FCOE_AG_CONTEXT_AUX6_FLAG_SHIFT 1
+#define __TSTORM_FCOE_AG_CONTEXT_AUX4_CF (0x3<<2)
+#define __TSTORM_FCOE_AG_CONTEXT_AUX4_CF_SHIFT 2
+#define __TSTORM_FCOE_AG_CONTEXT_AUX5_CF (0x3<<4)
+#define __TSTORM_FCOE_AG_CONTEXT_AUX5_CF_SHIFT 4
+#define __TSTORM_FCOE_AG_CONTEXT_AUX6_CF (0x3<<6)
+#define __TSTORM_FCOE_AG_CONTEXT_AUX6_CF_SHIFT 6
+#define __TSTORM_FCOE_AG_CONTEXT_AUX7_CF (0x3<<8)
+#define __TSTORM_FCOE_AG_CONTEXT_AUX7_CF_SHIFT 8
+#define __TSTORM_FCOE_AG_CONTEXT_AUX7_FLAG (0x1<<10)
+#define __TSTORM_FCOE_AG_CONTEXT_AUX7_FLAG_SHIFT 10
+#define __TSTORM_FCOE_AG_CONTEXT_QUEUE0_FLUSH_CF_EN (0x1<<11)
+#define __TSTORM_FCOE_AG_CONTEXT_QUEUE0_FLUSH_CF_EN_SHIFT 11
+#define TSTORM_FCOE_AG_CONTEXT_AUX4_CF_EN (0x1<<12)
+#define TSTORM_FCOE_AG_CONTEXT_AUX4_CF_EN_SHIFT 12
+#define TSTORM_FCOE_AG_CONTEXT_AUX5_CF_EN (0x1<<13)
+#define TSTORM_FCOE_AG_CONTEXT_AUX5_CF_EN_SHIFT 13
+#define TSTORM_FCOE_AG_CONTEXT_AUX6_CF_EN (0x1<<14)
+#define TSTORM_FCOE_AG_CONTEXT_AUX6_CF_EN_SHIFT 14
+#define TSTORM_FCOE_AG_CONTEXT_AUX7_CF_EN (0x1<<15)
+#define TSTORM_FCOE_AG_CONTEXT_AUX7_CF_EN_SHIFT 15
+#elif defined(__LITTLE_ENDIAN)
+	u16 agg_vars2;
+#define __TSTORM_FCOE_AG_CONTEXT_AUX5_FLAG (0x1<<0)
+#define __TSTORM_FCOE_AG_CONTEXT_AUX5_FLAG_SHIFT 0
+#define __TSTORM_FCOE_AG_CONTEXT_AUX6_FLAG (0x1<<1)
+#define __TSTORM_FCOE_AG_CONTEXT_AUX6_FLAG_SHIFT 1
+#define __TSTORM_FCOE_AG_CONTEXT_AUX4_CF (0x3<<2)
+#define __TSTORM_FCOE_AG_CONTEXT_AUX4_CF_SHIFT 2
+#define __TSTORM_FCOE_AG_CONTEXT_AUX5_CF (0x3<<4)
+#define __TSTORM_FCOE_AG_CONTEXT_AUX5_CF_SHIFT 4
+#define __TSTORM_FCOE_AG_CONTEXT_AUX6_CF (0x3<<6)
+#define __TSTORM_FCOE_AG_CONTEXT_AUX6_CF_SHIFT 6
+#define __TSTORM_FCOE_AG_CONTEXT_AUX7_CF (0x3<<8)
+#define __TSTORM_FCOE_AG_CONTEXT_AUX7_CF_SHIFT 8
+#define __TSTORM_FCOE_AG_CONTEXT_AUX7_FLAG (0x1<<10)
+#define __TSTORM_FCOE_AG_CONTEXT_AUX7_FLAG_SHIFT 10
+#define __TSTORM_FCOE_AG_CONTEXT_QUEUE0_FLUSH_CF_EN (0x1<<11)
+#define __TSTORM_FCOE_AG_CONTEXT_QUEUE0_FLUSH_CF_EN_SHIFT 11
+#define TSTORM_FCOE_AG_CONTEXT_AUX4_CF_EN (0x1<<12)
+#define TSTORM_FCOE_AG_CONTEXT_AUX4_CF_EN_SHIFT 12
+#define TSTORM_FCOE_AG_CONTEXT_AUX5_CF_EN (0x1<<13)
+#define TSTORM_FCOE_AG_CONTEXT_AUX5_CF_EN_SHIFT 13
+#define TSTORM_FCOE_AG_CONTEXT_AUX6_CF_EN (0x1<<14)
+#define TSTORM_FCOE_AG_CONTEXT_AUX6_CF_EN_SHIFT 14
+#define TSTORM_FCOE_AG_CONTEXT_AUX7_CF_EN (0x1<<15)
+#define TSTORM_FCOE_AG_CONTEXT_AUX7_CF_EN_SHIFT 15
+	u16 __agg_val4;
+#endif
+	struct tstorm_fcoe_extra_ag_context_section __extra_section;
+};
+
+
+
+/*
+ * The tcp aggregative context section of Tstorm
+ */
+struct tstorm_tcp_tcp_ag_context_section {
+	u32 __agg_val1;
+#if defined(__BIG_ENDIAN)
+	u8 __tcp_agg_vars2;
+	u8 __agg_val3;
+	u16 __agg_val2;
+#elif defined(__LITTLE_ENDIAN)
+	u16 __agg_val2;
+	u8 __agg_val3;
+	u8 __tcp_agg_vars2;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 __agg_val5;
+	u8 __agg_val6;
+	u8 __tcp_agg_vars3;
+#elif defined(__LITTLE_ENDIAN)
+	u8 __tcp_agg_vars3;
+	u8 __agg_val6;
+	u16 __agg_val5;
+#endif
+	u32 snd_nxt;
+	u32 rtt_seq;
+	u32 rtt_time;
+	u32 __reserved66;
+	u32 wnd_right_edge;
+	u32 tcp_agg_vars1;
+#define TSTORM_TCP_TCP_AG_CONTEXT_SECTION_FIN_SENT_FLAG (0x1<<0)
+#define TSTORM_TCP_TCP_AG_CONTEXT_SECTION_FIN_SENT_FLAG_SHIFT 0
+#define TSTORM_TCP_TCP_AG_CONTEXT_SECTION_LAST_PACKET_FIN_FLAG (0x1<<1)
+#define TSTORM_TCP_TCP_AG_CONTEXT_SECTION_LAST_PACKET_FIN_FLAG_SHIFT 1
+#define TSTORM_TCP_TCP_AG_CONTEXT_SECTION_WND_UPD_CF (0x3<<2)
+#define TSTORM_TCP_TCP_AG_CONTEXT_SECTION_WND_UPD_CF_SHIFT 2
+#define TSTORM_TCP_TCP_AG_CONTEXT_SECTION_TIMEOUT_CF (0x3<<4)
+#define TSTORM_TCP_TCP_AG_CONTEXT_SECTION_TIMEOUT_CF_SHIFT 4
+#define TSTORM_TCP_TCP_AG_CONTEXT_SECTION_WND_UPD_CF_EN (0x1<<6)
+#define TSTORM_TCP_TCP_AG_CONTEXT_SECTION_WND_UPD_CF_EN_SHIFT 6
+#define TSTORM_TCP_TCP_AG_CONTEXT_SECTION_TIMEOUT_CF_EN (0x1<<7)
+#define TSTORM_TCP_TCP_AG_CONTEXT_SECTION_TIMEOUT_CF_EN_SHIFT 7
+#define TSTORM_TCP_TCP_AG_CONTEXT_SECTION_RETRANSMIT_SEQ_EN (0x1<<8)
+#define TSTORM_TCP_TCP_AG_CONTEXT_SECTION_RETRANSMIT_SEQ_EN_SHIFT 8
+#define TSTORM_TCP_TCP_AG_CONTEXT_SECTION_SND_NXT_EN (0x1<<9)
+#define TSTORM_TCP_TCP_AG_CONTEXT_SECTION_SND_NXT_EN_SHIFT 9
+#define TSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX1_FLAG (0x1<<10)
+#define TSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX1_FLAG_SHIFT 10
+#define TSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX2_FLAG (0x1<<11)
+#define TSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX2_FLAG_SHIFT 11
+#define TSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX1_CF_EN (0x1<<12)
+#define TSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX1_CF_EN_SHIFT 12
+#define TSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX2_CF_EN (0x1<<13)
+#define TSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX2_CF_EN_SHIFT 13
+#define TSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX1_CF (0x3<<14)
+#define TSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX1_CF_SHIFT 14
+#define TSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX2_CF (0x3<<16)
+#define TSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX2_CF_SHIFT 16
+#define TSTORM_TCP_TCP_AG_CONTEXT_SECTION_TX_BLOCKED (0x1<<18)
+#define TSTORM_TCP_TCP_AG_CONTEXT_SECTION_TX_BLOCKED_SHIFT 18
+#define __TSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX10_CF_EN (0x1<<19)
+#define __TSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX10_CF_EN_SHIFT 19
+#define __TSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX11_CF_EN (0x1<<20)
+#define __TSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX11_CF_EN_SHIFT 20
+#define __TSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX12_CF_EN (0x1<<21)
+#define __TSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX12_CF_EN_SHIFT 21
+#define __TSTORM_TCP_TCP_AG_CONTEXT_SECTION_RESERVED1 (0x3<<22)
+#define __TSTORM_TCP_TCP_AG_CONTEXT_SECTION_RESERVED1_SHIFT 22
+#define TSTORM_TCP_TCP_AG_CONTEXT_SECTION_RETRANSMIT_PEND_SEQ (0xF<<24)
+#define TSTORM_TCP_TCP_AG_CONTEXT_SECTION_RETRANSMIT_PEND_SEQ_SHIFT 24
+#define TSTORM_TCP_TCP_AG_CONTEXT_SECTION_RETRANSMIT_DONE_SEQ (0xF<<28)
+#define TSTORM_TCP_TCP_AG_CONTEXT_SECTION_RETRANSMIT_DONE_SEQ_SHIFT 28
+	u32 snd_max;
+	u32 snd_una;
+	u32 __reserved2;
+};
+
+/*
+ * The iscsi aggregative context of Tstorm
+ */
+struct tstorm_iscsi_ag_context {
+#if defined(__BIG_ENDIAN)
+	u16 ulp_credit;
+	u8 agg_vars1;
+#define TSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM0 (0x1<<0)
+#define TSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM0_SHIFT 0
+#define TSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM1 (0x1<<1)
+#define TSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM1_SHIFT 1
+#define TSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM2 (0x1<<2)
+#define TSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM2_SHIFT 2
+#define TSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM3 (0x1<<3)
+#define TSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM3_SHIFT 3
+#define __TSTORM_ISCSI_AG_CONTEXT_QUEUES_FLUSH_Q0_CF (0x3<<4)
+#define __TSTORM_ISCSI_AG_CONTEXT_QUEUES_FLUSH_Q0_CF_SHIFT 4
+#define __TSTORM_ISCSI_AG_CONTEXT_AUX3_FLAG (0x1<<6)
+#define __TSTORM_ISCSI_AG_CONTEXT_AUX3_FLAG_SHIFT 6
+#define __TSTORM_ISCSI_AG_CONTEXT_ACK_ON_FIN_SENT_FLAG (0x1<<7)
+#define __TSTORM_ISCSI_AG_CONTEXT_ACK_ON_FIN_SENT_FLAG_SHIFT 7
+	u8 state;
+#elif defined(__LITTLE_ENDIAN)
+	u8 state;
+	u8 agg_vars1;
+#define TSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM0 (0x1<<0)
+#define TSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM0_SHIFT 0
+#define TSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM1 (0x1<<1)
+#define TSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM1_SHIFT 1
+#define TSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM2 (0x1<<2)
+#define TSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM2_SHIFT 2
+#define TSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM3 (0x1<<3)
+#define TSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM3_SHIFT 3
+#define __TSTORM_ISCSI_AG_CONTEXT_QUEUES_FLUSH_Q0_CF (0x3<<4)
+#define __TSTORM_ISCSI_AG_CONTEXT_QUEUES_FLUSH_Q0_CF_SHIFT 4
+#define __TSTORM_ISCSI_AG_CONTEXT_AUX3_FLAG (0x1<<6)
+#define __TSTORM_ISCSI_AG_CONTEXT_AUX3_FLAG_SHIFT 6
+#define __TSTORM_ISCSI_AG_CONTEXT_ACK_ON_FIN_SENT_FLAG (0x1<<7)
+#define __TSTORM_ISCSI_AG_CONTEXT_ACK_ON_FIN_SENT_FLAG_SHIFT 7
+	u16 ulp_credit;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 __agg_val4;
+	u16 agg_vars2;
+#define __TSTORM_ISCSI_AG_CONTEXT_MSL_TIMER_SET_FLAG (0x1<<0)
+#define __TSTORM_ISCSI_AG_CONTEXT_MSL_TIMER_SET_FLAG_SHIFT 0
+#define __TSTORM_ISCSI_AG_CONTEXT_FIN_SENT_FIRST_FLAG (0x1<<1)
+#define __TSTORM_ISCSI_AG_CONTEXT_FIN_SENT_FIRST_FLAG_SHIFT 1
+#define __TSTORM_ISCSI_AG_CONTEXT_RST_SENT_CF (0x3<<2)
+#define __TSTORM_ISCSI_AG_CONTEXT_RST_SENT_CF_SHIFT 2
+#define __TSTORM_ISCSI_AG_CONTEXT_WAKEUP_CALL_CF (0x3<<4)
+#define __TSTORM_ISCSI_AG_CONTEXT_WAKEUP_CALL_CF_SHIFT 4
+#define __TSTORM_ISCSI_AG_CONTEXT_AUX6_CF (0x3<<6)
+#define __TSTORM_ISCSI_AG_CONTEXT_AUX6_CF_SHIFT 6
+#define __TSTORM_ISCSI_AG_CONTEXT_AUX7_CF (0x3<<8)
+#define __TSTORM_ISCSI_AG_CONTEXT_AUX7_CF_SHIFT 8
+#define __TSTORM_ISCSI_AG_CONTEXT_AUX7_FLAG (0x1<<10)
+#define __TSTORM_ISCSI_AG_CONTEXT_AUX7_FLAG_SHIFT 10
+#define __TSTORM_ISCSI_AG_CONTEXT_QUEUES_FLUSH_Q0_CF_EN (0x1<<11)
+#define __TSTORM_ISCSI_AG_CONTEXT_QUEUES_FLUSH_Q0_CF_EN_SHIFT 11
+#define __TSTORM_ISCSI_AG_CONTEXT_RST_SENT_CF_EN (0x1<<12)
+#define __TSTORM_ISCSI_AG_CONTEXT_RST_SENT_CF_EN_SHIFT 12
+#define __TSTORM_ISCSI_AG_CONTEXT_WAKEUP_CALL_CF_EN (0x1<<13)
+#define __TSTORM_ISCSI_AG_CONTEXT_WAKEUP_CALL_CF_EN_SHIFT 13
+#define TSTORM_ISCSI_AG_CONTEXT_AUX6_CF_EN (0x1<<14)
+#define TSTORM_ISCSI_AG_CONTEXT_AUX6_CF_EN_SHIFT 14
+#define TSTORM_ISCSI_AG_CONTEXT_AUX7_CF_EN (0x1<<15)
+#define TSTORM_ISCSI_AG_CONTEXT_AUX7_CF_EN_SHIFT 15
+#elif defined(__LITTLE_ENDIAN)
+	u16 agg_vars2;
+#define __TSTORM_ISCSI_AG_CONTEXT_MSL_TIMER_SET_FLAG (0x1<<0)
+#define __TSTORM_ISCSI_AG_CONTEXT_MSL_TIMER_SET_FLAG_SHIFT 0
+#define __TSTORM_ISCSI_AG_CONTEXT_FIN_SENT_FIRST_FLAG (0x1<<1)
+#define __TSTORM_ISCSI_AG_CONTEXT_FIN_SENT_FIRST_FLAG_SHIFT 1
+#define __TSTORM_ISCSI_AG_CONTEXT_RST_SENT_CF (0x3<<2)
+#define __TSTORM_ISCSI_AG_CONTEXT_RST_SENT_CF_SHIFT 2
+#define __TSTORM_ISCSI_AG_CONTEXT_WAKEUP_CALL_CF (0x3<<4)
+#define __TSTORM_ISCSI_AG_CONTEXT_WAKEUP_CALL_CF_SHIFT 4
+#define __TSTORM_ISCSI_AG_CONTEXT_AUX6_CF (0x3<<6)
+#define __TSTORM_ISCSI_AG_CONTEXT_AUX6_CF_SHIFT 6
+#define __TSTORM_ISCSI_AG_CONTEXT_AUX7_CF (0x3<<8)
+#define __TSTORM_ISCSI_AG_CONTEXT_AUX7_CF_SHIFT 8
+#define __TSTORM_ISCSI_AG_CONTEXT_AUX7_FLAG (0x1<<10)
+#define __TSTORM_ISCSI_AG_CONTEXT_AUX7_FLAG_SHIFT 10
+#define __TSTORM_ISCSI_AG_CONTEXT_QUEUES_FLUSH_Q0_CF_EN (0x1<<11)
+#define __TSTORM_ISCSI_AG_CONTEXT_QUEUES_FLUSH_Q0_CF_EN_SHIFT 11
+#define __TSTORM_ISCSI_AG_CONTEXT_RST_SENT_CF_EN (0x1<<12)
+#define __TSTORM_ISCSI_AG_CONTEXT_RST_SENT_CF_EN_SHIFT 12
+#define __TSTORM_ISCSI_AG_CONTEXT_WAKEUP_CALL_CF_EN (0x1<<13)
+#define __TSTORM_ISCSI_AG_CONTEXT_WAKEUP_CALL_CF_EN_SHIFT 13
+#define TSTORM_ISCSI_AG_CONTEXT_AUX6_CF_EN (0x1<<14)
+#define TSTORM_ISCSI_AG_CONTEXT_AUX6_CF_EN_SHIFT 14
+#define TSTORM_ISCSI_AG_CONTEXT_AUX7_CF_EN (0x1<<15)
+#define TSTORM_ISCSI_AG_CONTEXT_AUX7_CF_EN_SHIFT 15
+	u16 __agg_val4;
+#endif
+	struct tstorm_tcp_tcp_ag_context_section tcp;
+};
+
+
+
+/*
+ * The fcoe aggregative context of Ustorm
+ */
+struct ustorm_fcoe_ag_context {
+#if defined(__BIG_ENDIAN)
+	u8 __aux_counter_flags;
+	u8 agg_vars2;
+#define USTORM_FCOE_AG_CONTEXT_TX_CF (0x3<<0)
+#define USTORM_FCOE_AG_CONTEXT_TX_CF_SHIFT 0
+#define __USTORM_FCOE_AG_CONTEXT_TIMER_CF (0x3<<2)
+#define __USTORM_FCOE_AG_CONTEXT_TIMER_CF_SHIFT 2
+#define USTORM_FCOE_AG_CONTEXT_AGG_MISC4_RULE (0x7<<4)
+#define USTORM_FCOE_AG_CONTEXT_AGG_MISC4_RULE_SHIFT 4
+#define __USTORM_FCOE_AG_CONTEXT_AGG_VAL2_MASK (0x1<<7)
+#define __USTORM_FCOE_AG_CONTEXT_AGG_VAL2_MASK_SHIFT 7
+	u8 agg_vars1;
+#define __USTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM0 (0x1<<0)
+#define __USTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM0_SHIFT 0
+#define USTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM1 (0x1<<1)
+#define USTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM1_SHIFT 1
+#define USTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM2 (0x1<<2)
+#define USTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM2_SHIFT 2
+#define USTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM3 (0x1<<3)
+#define USTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM3_SHIFT 3
+#define USTORM_FCOE_AG_CONTEXT_INV_CF (0x3<<4)
+#define USTORM_FCOE_AG_CONTEXT_INV_CF_SHIFT 4
+#define USTORM_FCOE_AG_CONTEXT_COMPLETION_CF (0x3<<6)
+#define USTORM_FCOE_AG_CONTEXT_COMPLETION_CF_SHIFT 6
+	u8 state;
+#elif defined(__LITTLE_ENDIAN)
+	u8 state;
+	u8 agg_vars1;
+#define __USTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM0 (0x1<<0)
+#define __USTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM0_SHIFT 0
+#define USTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM1 (0x1<<1)
+#define USTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM1_SHIFT 1
+#define USTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM2 (0x1<<2)
+#define USTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM2_SHIFT 2
+#define USTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM3 (0x1<<3)
+#define USTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM3_SHIFT 3
+#define USTORM_FCOE_AG_CONTEXT_INV_CF (0x3<<4)
+#define USTORM_FCOE_AG_CONTEXT_INV_CF_SHIFT 4
+#define USTORM_FCOE_AG_CONTEXT_COMPLETION_CF (0x3<<6)
+#define USTORM_FCOE_AG_CONTEXT_COMPLETION_CF_SHIFT 6
+	u8 agg_vars2;
+#define USTORM_FCOE_AG_CONTEXT_TX_CF (0x3<<0)
+#define USTORM_FCOE_AG_CONTEXT_TX_CF_SHIFT 0
+#define __USTORM_FCOE_AG_CONTEXT_TIMER_CF (0x3<<2)
+#define __USTORM_FCOE_AG_CONTEXT_TIMER_CF_SHIFT 2
+#define USTORM_FCOE_AG_CONTEXT_AGG_MISC4_RULE (0x7<<4)
+#define USTORM_FCOE_AG_CONTEXT_AGG_MISC4_RULE_SHIFT 4
+#define __USTORM_FCOE_AG_CONTEXT_AGG_VAL2_MASK (0x1<<7)
+#define __USTORM_FCOE_AG_CONTEXT_AGG_VAL2_MASK_SHIFT 7
+	u8 __aux_counter_flags;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 cdu_usage;
+	u8 agg_misc2;
+	u16 pbf_tx_seq_ack;
+#elif defined(__LITTLE_ENDIAN)
+	u16 pbf_tx_seq_ack;
+	u8 agg_misc2;
+	u8 cdu_usage;
+#endif
+	u32 agg_misc4;
+#if defined(__BIG_ENDIAN)
+	u8 agg_val3_th;
+	u8 agg_val3;
+	u16 agg_misc3;
+#elif defined(__LITTLE_ENDIAN)
+	u16 agg_misc3;
+	u8 agg_val3;
+	u8 agg_val3_th;
+#endif
+	u32 expired_task_id;
+	u32 agg_misc4_th;
+#if defined(__BIG_ENDIAN)
+	u16 cq_prod;
+	u16 cq_cons;
+#elif defined(__LITTLE_ENDIAN)
+	u16 cq_cons;
+	u16 cq_prod;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 __reserved2;
+	u8 decision_rules;
+#define USTORM_FCOE_AG_CONTEXT_CQ_DEC_RULE (0x7<<0)
+#define USTORM_FCOE_AG_CONTEXT_CQ_DEC_RULE_SHIFT 0
+#define __USTORM_FCOE_AG_CONTEXT_AGG_VAL3_RULE (0x7<<3)
+#define __USTORM_FCOE_AG_CONTEXT_AGG_VAL3_RULE_SHIFT 3
+#define USTORM_FCOE_AG_CONTEXT_CQ_ARM_N_FLAG (0x1<<6)
+#define USTORM_FCOE_AG_CONTEXT_CQ_ARM_N_FLAG_SHIFT 6
+#define __USTORM_FCOE_AG_CONTEXT_RESERVED1 (0x1<<7)
+#define __USTORM_FCOE_AG_CONTEXT_RESERVED1_SHIFT 7
+	u8 decision_rule_enable_bits;
+#define __USTORM_FCOE_AG_CONTEXT_RESERVED_INV_CF_EN (0x1<<0)
+#define __USTORM_FCOE_AG_CONTEXT_RESERVED_INV_CF_EN_SHIFT 0
+#define USTORM_FCOE_AG_CONTEXT_COMPLETION_CF_EN (0x1<<1)
+#define USTORM_FCOE_AG_CONTEXT_COMPLETION_CF_EN_SHIFT 1
+#define USTORM_FCOE_AG_CONTEXT_TX_CF_EN (0x1<<2)
+#define USTORM_FCOE_AG_CONTEXT_TX_CF_EN_SHIFT 2
+#define __USTORM_FCOE_AG_CONTEXT_TIMER_CF_EN (0x1<<3)
+#define __USTORM_FCOE_AG_CONTEXT_TIMER_CF_EN_SHIFT 3
+#define __USTORM_FCOE_AG_CONTEXT_AUX1_CF_EN (0x1<<4)
+#define __USTORM_FCOE_AG_CONTEXT_AUX1_CF_EN_SHIFT 4
+#define __USTORM_FCOE_AG_CONTEXT_QUEUE0_CF_EN (0x1<<5)
+#define __USTORM_FCOE_AG_CONTEXT_QUEUE0_CF_EN_SHIFT 5
+#define __USTORM_FCOE_AG_CONTEXT_AUX3_CF_EN (0x1<<6)
+#define __USTORM_FCOE_AG_CONTEXT_AUX3_CF_EN_SHIFT 6
+#define __USTORM_FCOE_AG_CONTEXT_DQ_CF_EN (0x1<<7)
+#define __USTORM_FCOE_AG_CONTEXT_DQ_CF_EN_SHIFT 7
+#elif defined(__LITTLE_ENDIAN)
+	u8 decision_rule_enable_bits;
+#define __USTORM_FCOE_AG_CONTEXT_RESERVED_INV_CF_EN (0x1<<0)
+#define __USTORM_FCOE_AG_CONTEXT_RESERVED_INV_CF_EN_SHIFT 0
+#define USTORM_FCOE_AG_CONTEXT_COMPLETION_CF_EN (0x1<<1)
+#define USTORM_FCOE_AG_CONTEXT_COMPLETION_CF_EN_SHIFT 1
+#define USTORM_FCOE_AG_CONTEXT_TX_CF_EN (0x1<<2)
+#define USTORM_FCOE_AG_CONTEXT_TX_CF_EN_SHIFT 2
+#define __USTORM_FCOE_AG_CONTEXT_TIMER_CF_EN (0x1<<3)
+#define __USTORM_FCOE_AG_CONTEXT_TIMER_CF_EN_SHIFT 3
+#define __USTORM_FCOE_AG_CONTEXT_AUX1_CF_EN (0x1<<4)
+#define __USTORM_FCOE_AG_CONTEXT_AUX1_CF_EN_SHIFT 4
+#define __USTORM_FCOE_AG_CONTEXT_QUEUE0_CF_EN (0x1<<5)
+#define __USTORM_FCOE_AG_CONTEXT_QUEUE0_CF_EN_SHIFT 5
+#define __USTORM_FCOE_AG_CONTEXT_AUX3_CF_EN (0x1<<6)
+#define __USTORM_FCOE_AG_CONTEXT_AUX3_CF_EN_SHIFT 6
+#define __USTORM_FCOE_AG_CONTEXT_DQ_CF_EN (0x1<<7)
+#define __USTORM_FCOE_AG_CONTEXT_DQ_CF_EN_SHIFT 7
+	u8 decision_rules;
+#define USTORM_FCOE_AG_CONTEXT_CQ_DEC_RULE (0x7<<0)
+#define USTORM_FCOE_AG_CONTEXT_CQ_DEC_RULE_SHIFT 0
+#define __USTORM_FCOE_AG_CONTEXT_AGG_VAL3_RULE (0x7<<3)
+#define __USTORM_FCOE_AG_CONTEXT_AGG_VAL3_RULE_SHIFT 3
+#define USTORM_FCOE_AG_CONTEXT_CQ_ARM_N_FLAG (0x1<<6)
+#define USTORM_FCOE_AG_CONTEXT_CQ_ARM_N_FLAG_SHIFT 6
+#define __USTORM_FCOE_AG_CONTEXT_RESERVED1 (0x1<<7)
+#define __USTORM_FCOE_AG_CONTEXT_RESERVED1_SHIFT 7
+	u16 __reserved2;
+#endif
+};
+
+
+/*
+ * The iscsi aggregative context of Ustorm
+ */
+struct ustorm_iscsi_ag_context {
+#if defined(__BIG_ENDIAN)
+	u8 __aux_counter_flags;
+	u8 agg_vars2;
+#define USTORM_ISCSI_AG_CONTEXT_TX_CF (0x3<<0)
+#define USTORM_ISCSI_AG_CONTEXT_TX_CF_SHIFT 0
+#define __USTORM_ISCSI_AG_CONTEXT_TIMER_CF (0x3<<2)
+#define __USTORM_ISCSI_AG_CONTEXT_TIMER_CF_SHIFT 2
+#define USTORM_ISCSI_AG_CONTEXT_AGG_MISC4_RULE (0x7<<4)
+#define USTORM_ISCSI_AG_CONTEXT_AGG_MISC4_RULE_SHIFT 4
+#define __USTORM_ISCSI_AG_CONTEXT_AGG_VAL2_MASK (0x1<<7)
+#define __USTORM_ISCSI_AG_CONTEXT_AGG_VAL2_MASK_SHIFT 7
+	u8 agg_vars1;
+#define __USTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM0 (0x1<<0)
+#define __USTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM0_SHIFT 0
+#define USTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM1 (0x1<<1)
+#define USTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM1_SHIFT 1
+#define USTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM2 (0x1<<2)
+#define USTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM2_SHIFT 2
+#define USTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM3 (0x1<<3)
+#define USTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM3_SHIFT 3
+#define USTORM_ISCSI_AG_CONTEXT_INV_CF (0x3<<4)
+#define USTORM_ISCSI_AG_CONTEXT_INV_CF_SHIFT 4
+#define USTORM_ISCSI_AG_CONTEXT_COMPLETION_CF (0x3<<6)
+#define USTORM_ISCSI_AG_CONTEXT_COMPLETION_CF_SHIFT 6
+	u8 state;
+#elif defined(__LITTLE_ENDIAN)
+	u8 state;
+	u8 agg_vars1;
+#define __USTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM0 (0x1<<0)
+#define __USTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM0_SHIFT 0
+#define USTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM1 (0x1<<1)
+#define USTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM1_SHIFT 1
+#define USTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM2 (0x1<<2)
+#define USTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM2_SHIFT 2
+#define USTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM3 (0x1<<3)
+#define USTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM3_SHIFT 3
+#define USTORM_ISCSI_AG_CONTEXT_INV_CF (0x3<<4)
+#define USTORM_ISCSI_AG_CONTEXT_INV_CF_SHIFT 4
+#define USTORM_ISCSI_AG_CONTEXT_COMPLETION_CF (0x3<<6)
+#define USTORM_ISCSI_AG_CONTEXT_COMPLETION_CF_SHIFT 6
+	u8 agg_vars2;
+#define USTORM_ISCSI_AG_CONTEXT_TX_CF (0x3<<0)
+#define USTORM_ISCSI_AG_CONTEXT_TX_CF_SHIFT 0
+#define __USTORM_ISCSI_AG_CONTEXT_TIMER_CF (0x3<<2)
+#define __USTORM_ISCSI_AG_CONTEXT_TIMER_CF_SHIFT 2
+#define USTORM_ISCSI_AG_CONTEXT_AGG_MISC4_RULE (0x7<<4)
+#define USTORM_ISCSI_AG_CONTEXT_AGG_MISC4_RULE_SHIFT 4
+#define __USTORM_ISCSI_AG_CONTEXT_AGG_VAL2_MASK (0x1<<7)
+#define __USTORM_ISCSI_AG_CONTEXT_AGG_VAL2_MASK_SHIFT 7
+	u8 __aux_counter_flags;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 cdu_usage;
+	u8 agg_misc2;
+	u16 __cq_local_comp_itt_val;
+#elif defined(__LITTLE_ENDIAN)
+	u16 __cq_local_comp_itt_val;
+	u8 agg_misc2;
+	u8 cdu_usage;
+#endif
+	u32 agg_misc4;
+#if defined(__BIG_ENDIAN)
+	u8 agg_val3_th;
+	u8 agg_val3;
+	u16 agg_misc3;
+#elif defined(__LITTLE_ENDIAN)
+	u16 agg_misc3;
+	u8 agg_val3;
+	u8 agg_val3_th;
+#endif
+	u32 agg_val1;
+	u32 agg_misc4_th;
+#if defined(__BIG_ENDIAN)
+	u16 agg_val2_th;
+	u16 agg_val2;
+#elif defined(__LITTLE_ENDIAN)
+	u16 agg_val2;
+	u16 agg_val2_th;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 __reserved2;
+	u8 decision_rules;
+#define USTORM_ISCSI_AG_CONTEXT_AGG_VAL2_RULE (0x7<<0)
+#define USTORM_ISCSI_AG_CONTEXT_AGG_VAL2_RULE_SHIFT 0
+#define __USTORM_ISCSI_AG_CONTEXT_AGG_VAL3_RULE (0x7<<3)
+#define __USTORM_ISCSI_AG_CONTEXT_AGG_VAL3_RULE_SHIFT 3
+#define USTORM_ISCSI_AG_CONTEXT_AGG_VAL2_ARM_N_FLAG (0x1<<6)
+#define USTORM_ISCSI_AG_CONTEXT_AGG_VAL2_ARM_N_FLAG_SHIFT 6
+#define __USTORM_ISCSI_AG_CONTEXT_RESERVED1 (0x1<<7)
+#define __USTORM_ISCSI_AG_CONTEXT_RESERVED1_SHIFT 7
+	u8 decision_rule_enable_bits;
+#define USTORM_ISCSI_AG_CONTEXT_INV_CF_EN (0x1<<0)
+#define USTORM_ISCSI_AG_CONTEXT_INV_CF_EN_SHIFT 0
+#define USTORM_ISCSI_AG_CONTEXT_COMPLETION_CF_EN (0x1<<1)
+#define USTORM_ISCSI_AG_CONTEXT_COMPLETION_CF_EN_SHIFT 1
+#define USTORM_ISCSI_AG_CONTEXT_TX_CF_EN (0x1<<2)
+#define USTORM_ISCSI_AG_CONTEXT_TX_CF_EN_SHIFT 2
+#define __USTORM_ISCSI_AG_CONTEXT_TIMER_CF_EN (0x1<<3)
+#define __USTORM_ISCSI_AG_CONTEXT_TIMER_CF_EN_SHIFT 3
+#define __USTORM_ISCSI_AG_CONTEXT_CQ_LOCAL_COMP_CF_EN (0x1<<4)
+#define __USTORM_ISCSI_AG_CONTEXT_CQ_LOCAL_COMP_CF_EN_SHIFT 4
+#define __USTORM_ISCSI_AG_CONTEXT_QUEUES_FLUSH_Q0_CF_EN (0x1<<5)
+#define __USTORM_ISCSI_AG_CONTEXT_QUEUES_FLUSH_Q0_CF_EN_SHIFT 5
+#define __USTORM_ISCSI_AG_CONTEXT_AUX3_CF_EN (0x1<<6)
+#define __USTORM_ISCSI_AG_CONTEXT_AUX3_CF_EN_SHIFT 6
+#define __USTORM_ISCSI_AG_CONTEXT_DQ_CF_EN (0x1<<7)
+#define __USTORM_ISCSI_AG_CONTEXT_DQ_CF_EN_SHIFT 7
+#elif defined(__LITTLE_ENDIAN)
+	u8 decision_rule_enable_bits;
+#define USTORM_ISCSI_AG_CONTEXT_INV_CF_EN (0x1<<0)
+#define USTORM_ISCSI_AG_CONTEXT_INV_CF_EN_SHIFT 0
+#define USTORM_ISCSI_AG_CONTEXT_COMPLETION_CF_EN (0x1<<1)
+#define USTORM_ISCSI_AG_CONTEXT_COMPLETION_CF_EN_SHIFT 1
+#define USTORM_ISCSI_AG_CONTEXT_TX_CF_EN (0x1<<2)
+#define USTORM_ISCSI_AG_CONTEXT_TX_CF_EN_SHIFT 2
+#define __USTORM_ISCSI_AG_CONTEXT_TIMER_CF_EN (0x1<<3)
+#define __USTORM_ISCSI_AG_CONTEXT_TIMER_CF_EN_SHIFT 3
+#define __USTORM_ISCSI_AG_CONTEXT_CQ_LOCAL_COMP_CF_EN (0x1<<4)
+#define __USTORM_ISCSI_AG_CONTEXT_CQ_LOCAL_COMP_CF_EN_SHIFT 4
+#define __USTORM_ISCSI_AG_CONTEXT_QUEUES_FLUSH_Q0_CF_EN (0x1<<5)
+#define __USTORM_ISCSI_AG_CONTEXT_QUEUES_FLUSH_Q0_CF_EN_SHIFT 5
+#define __USTORM_ISCSI_AG_CONTEXT_AUX3_CF_EN (0x1<<6)
+#define __USTORM_ISCSI_AG_CONTEXT_AUX3_CF_EN_SHIFT 6
+#define __USTORM_ISCSI_AG_CONTEXT_DQ_CF_EN (0x1<<7)
+#define __USTORM_ISCSI_AG_CONTEXT_DQ_CF_EN_SHIFT 7
+	u8 decision_rules;
+#define USTORM_ISCSI_AG_CONTEXT_AGG_VAL2_RULE (0x7<<0)
+#define USTORM_ISCSI_AG_CONTEXT_AGG_VAL2_RULE_SHIFT 0
+#define __USTORM_ISCSI_AG_CONTEXT_AGG_VAL3_RULE (0x7<<3)
+#define __USTORM_ISCSI_AG_CONTEXT_AGG_VAL3_RULE_SHIFT 3
+#define USTORM_ISCSI_AG_CONTEXT_AGG_VAL2_ARM_N_FLAG (0x1<<6)
+#define USTORM_ISCSI_AG_CONTEXT_AGG_VAL2_ARM_N_FLAG_SHIFT 6
+#define __USTORM_ISCSI_AG_CONTEXT_RESERVED1 (0x1<<7)
+#define __USTORM_ISCSI_AG_CONTEXT_RESERVED1_SHIFT 7
+	u16 __reserved2;
+#endif
+};
+
+
+/*
+ * The fcoe aggregative context section of Xstorm
+ */
+struct xstorm_fcoe_extra_ag_context_section {
+#if defined(__BIG_ENDIAN)
+	u8 tcp_agg_vars1;
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED51 (0x3<<0)
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED51_SHIFT 0
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_ACK_TO_FE_UPDATED (0x3<<2)
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_ACK_TO_FE_UPDATED_SHIFT 2
+#define XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_SIDEBAND_SENT_CF (0x3<<4)
+#define XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_SIDEBAND_SENT_CF_SHIFT 4
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED_CLEAR_DA_TIMER_EN (0x1<<6)
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED_CLEAR_DA_TIMER_EN_SHIFT 6
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED_DA_EXPIRATION_FLAG (0x1<<7)
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED_DA_EXPIRATION_FLAG_SHIFT 7
+	u8 __reserved_da_cnt;
+	u16 __mtu;
+#elif defined(__LITTLE_ENDIAN)
+	u16 __mtu;
+	u8 __reserved_da_cnt;
+	u8 tcp_agg_vars1;
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED51 (0x3<<0)
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED51_SHIFT 0
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_ACK_TO_FE_UPDATED (0x3<<2)
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_ACK_TO_FE_UPDATED_SHIFT 2
+#define XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_SIDEBAND_SENT_CF (0x3<<4)
+#define XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_SIDEBAND_SENT_CF_SHIFT 4
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED_CLEAR_DA_TIMER_EN (0x1<<6)
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED_CLEAR_DA_TIMER_EN_SHIFT 6
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED_DA_EXPIRATION_FLAG (0x1<<7)
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED_DA_EXPIRATION_FLAG_SHIFT 7
+#endif
+	u32 snd_nxt;
+	u32 __xfrqe_bd_addr_lo;
+	u32 __xfrqe_bd_addr_hi;
+	u32 __xfrqe_data1;
+#if defined(__BIG_ENDIAN)
+	u8 __agg_val8_th;
+	u8 __tx_dest;
+	u16 tcp_agg_vars2;
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED57 (0x1<<0)
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED57_SHIFT 0
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED58 (0x1<<1)
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED58_SHIFT 1
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED59 (0x1<<2)
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED59_SHIFT 2
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_AUX3_FLAG (0x1<<3)
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_AUX3_FLAG_SHIFT 3
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_AUX4_FLAG (0x1<<4)
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_AUX4_FLAG_SHIFT 4
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED60 (0x1<<5)
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED60_SHIFT 5
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED_ACK_TO_FE_UPDATED_EN (0x1<<6)
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED_ACK_TO_FE_UPDATED_EN_SHIFT 6
+#define XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_SIDEBAND_SENT_CF_EN (0x1<<7)
+#define XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_SIDEBAND_SENT_CF_EN_SHIFT 7
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED_TX_FIN_FLAG_EN (0x1<<8)
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED_TX_FIN_FLAG_EN_SHIFT 8
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_AUX1_FLAG (0x1<<9)
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_AUX1_FLAG_SHIFT 9
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_SET_RTO_CF (0x3<<10)
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_SET_RTO_CF_SHIFT 10
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_TS_TO_ECHO_UPDATED_CF (0x3<<12)
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_TS_TO_ECHO_UPDATED_CF_SHIFT 12
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_TX_DEST_UPDATED_CF (0x3<<14)
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_TX_DEST_UPDATED_CF_SHIFT 14
+#elif defined(__LITTLE_ENDIAN)
+	u16 tcp_agg_vars2;
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED57 (0x1<<0)
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED57_SHIFT 0
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED58 (0x1<<1)
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED58_SHIFT 1
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED59 (0x1<<2)
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED59_SHIFT 2
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_AUX3_FLAG (0x1<<3)
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_AUX3_FLAG_SHIFT 3
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_AUX4_FLAG (0x1<<4)
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_AUX4_FLAG_SHIFT 4
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED60 (0x1<<5)
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED60_SHIFT 5
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED_ACK_TO_FE_UPDATED_EN (0x1<<6)
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED_ACK_TO_FE_UPDATED_EN_SHIFT 6
+#define XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_SIDEBAND_SENT_CF_EN (0x1<<7)
+#define XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_SIDEBAND_SENT_CF_EN_SHIFT 7
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED_TX_FIN_FLAG_EN (0x1<<8)
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_RESERVED_TX_FIN_FLAG_EN_SHIFT 8
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_AUX1_FLAG (0x1<<9)
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_AUX1_FLAG_SHIFT 9
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_SET_RTO_CF (0x3<<10)
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_SET_RTO_CF_SHIFT 10
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_TS_TO_ECHO_UPDATED_CF (0x3<<12)
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_TS_TO_ECHO_UPDATED_CF_SHIFT 12
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_TX_DEST_UPDATED_CF (0x3<<14)
+#define __XSTORM_FCOE_EXTRA_AG_CONTEXT_SECTION_TX_DEST_UPDATED_CF_SHIFT 14
+	u8 __tx_dest;
+	u8 __agg_val8_th;
+#endif
+	u32 __sq_base_addr_lo;
+	u32 __sq_base_addr_hi;
+	u32 __xfrq_base_addr_lo;
+	u32 __xfrq_base_addr_hi;
+#if defined(__BIG_ENDIAN)
+	u16 __xfrq_cons;
+	u16 __xfrq_prod;
+#elif defined(__LITTLE_ENDIAN)
+	u16 __xfrq_prod;
+	u16 __xfrq_cons;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 __tcp_agg_vars5;
+	u8 __tcp_agg_vars4;
+	u8 __tcp_agg_vars3;
+	u8 __reserved_force_pure_ack_cnt;
+#elif defined(__LITTLE_ENDIAN)
+	u8 __reserved_force_pure_ack_cnt;
+	u8 __tcp_agg_vars3;
+	u8 __tcp_agg_vars4;
+	u8 __tcp_agg_vars5;
+#endif
+	u32 __tcp_agg_vars6;
+#if defined(__BIG_ENDIAN)
+	u16 __xfrqe_mng;
+	u16 __tcp_agg_vars7;
+#elif defined(__LITTLE_ENDIAN)
+	u16 __tcp_agg_vars7;
+	u16 __xfrqe_mng;
+#endif
+	u32 __xfrqe_data0;
+	u32 __agg_val10_th;
+#if defined(__BIG_ENDIAN)
+	u16 __reserved3;
+	u8 __reserved2;
+	u8 __da_only_cnt;
+#elif defined(__LITTLE_ENDIAN)
+	u8 __da_only_cnt;
+	u8 __reserved2;
+	u16 __reserved3;
+#endif
+};
+
+/*
+ * The fcoe aggregative context of Xstorm
+ */
+struct xstorm_fcoe_ag_context {
+#if defined(__BIG_ENDIAN)
+	u16 agg_val1;
+	u8 agg_vars1;
+#define __XSTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM0 (0x1<<0)
+#define __XSTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM0_SHIFT 0
+#define __XSTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM1 (0x1<<1)
+#define __XSTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM1_SHIFT 1
+#define __XSTORM_FCOE_AG_CONTEXT_RESERVED51 (0x1<<2)
+#define __XSTORM_FCOE_AG_CONTEXT_RESERVED51_SHIFT 2
+#define __XSTORM_FCOE_AG_CONTEXT_RESERVED52 (0x1<<3)
+#define __XSTORM_FCOE_AG_CONTEXT_RESERVED52_SHIFT 3
+#define __XSTORM_FCOE_AG_CONTEXT_MORE_TO_SEND_EN (0x1<<4)
+#define __XSTORM_FCOE_AG_CONTEXT_MORE_TO_SEND_EN_SHIFT 4
+#define XSTORM_FCOE_AG_CONTEXT_NAGLE_EN (0x1<<5)
+#define XSTORM_FCOE_AG_CONTEXT_NAGLE_EN_SHIFT 5
+#define __XSTORM_FCOE_AG_CONTEXT_DQ_SPARE_FLAG (0x1<<6)
+#define __XSTORM_FCOE_AG_CONTEXT_DQ_SPARE_FLAG_SHIFT 6
+#define __XSTORM_FCOE_AG_CONTEXT_RESERVED_UNA_GT_NXT_EN (0x1<<7)
+#define __XSTORM_FCOE_AG_CONTEXT_RESERVED_UNA_GT_NXT_EN_SHIFT 7
+	u8 __state;
+#elif defined(__LITTLE_ENDIAN)
+	u8 __state;
+	u8 agg_vars1;
+#define __XSTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM0 (0x1<<0)
+#define __XSTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM0_SHIFT 0
+#define __XSTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM1 (0x1<<1)
+#define __XSTORM_FCOE_AG_CONTEXT_EXISTS_IN_QM1_SHIFT 1
+#define __XSTORM_FCOE_AG_CONTEXT_RESERVED51 (0x1<<2)
+#define __XSTORM_FCOE_AG_CONTEXT_RESERVED51_SHIFT 2
+#define __XSTORM_FCOE_AG_CONTEXT_RESERVED52 (0x1<<3)
+#define __XSTORM_FCOE_AG_CONTEXT_RESERVED52_SHIFT 3
+#define __XSTORM_FCOE_AG_CONTEXT_MORE_TO_SEND_EN (0x1<<4)
+#define __XSTORM_FCOE_AG_CONTEXT_MORE_TO_SEND_EN_SHIFT 4
+#define XSTORM_FCOE_AG_CONTEXT_NAGLE_EN (0x1<<5)
+#define XSTORM_FCOE_AG_CONTEXT_NAGLE_EN_SHIFT 5
+#define __XSTORM_FCOE_AG_CONTEXT_DQ_SPARE_FLAG (0x1<<6)
+#define __XSTORM_FCOE_AG_CONTEXT_DQ_SPARE_FLAG_SHIFT 6
+#define __XSTORM_FCOE_AG_CONTEXT_RESERVED_UNA_GT_NXT_EN (0x1<<7)
+#define __XSTORM_FCOE_AG_CONTEXT_RESERVED_UNA_GT_NXT_EN_SHIFT 7
+	u16 agg_val1;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 cdu_reserved;
+	u8 __agg_vars4;
+	u8 agg_vars3;
+#define XSTORM_FCOE_AG_CONTEXT_PHYSICAL_QUEUE_NUM2 (0x3F<<0)
+#define XSTORM_FCOE_AG_CONTEXT_PHYSICAL_QUEUE_NUM2_SHIFT 0
+#define __XSTORM_FCOE_AG_CONTEXT_AUX19_CF (0x3<<6)
+#define __XSTORM_FCOE_AG_CONTEXT_AUX19_CF_SHIFT 6
+	u8 agg_vars2;
+#define __XSTORM_FCOE_AG_CONTEXT_DQ_CF (0x3<<0)
+#define __XSTORM_FCOE_AG_CONTEXT_DQ_CF_SHIFT 0
+#define __XSTORM_FCOE_AG_CONTEXT_DQ_SPARE_FLAG_EN (0x1<<2)
+#define __XSTORM_FCOE_AG_CONTEXT_DQ_SPARE_FLAG_EN_SHIFT 2
+#define __XSTORM_FCOE_AG_CONTEXT_AUX8_FLAG (0x1<<3)
+#define __XSTORM_FCOE_AG_CONTEXT_AUX8_FLAG_SHIFT 3
+#define __XSTORM_FCOE_AG_CONTEXT_AUX9_FLAG (0x1<<4)
+#define __XSTORM_FCOE_AG_CONTEXT_AUX9_FLAG_SHIFT 4
+#define XSTORM_FCOE_AG_CONTEXT_DECISION_RULE1 (0x3<<5)
+#define XSTORM_FCOE_AG_CONTEXT_DECISION_RULE1_SHIFT 5
+#define __XSTORM_FCOE_AG_CONTEXT_DQ_CF_EN (0x1<<7)
+#define __XSTORM_FCOE_AG_CONTEXT_DQ_CF_EN_SHIFT 7
+#elif defined(__LITTLE_ENDIAN)
+	u8 agg_vars2;
+#define __XSTORM_FCOE_AG_CONTEXT_DQ_CF (0x3<<0)
+#define __XSTORM_FCOE_AG_CONTEXT_DQ_CF_SHIFT 0
+#define __XSTORM_FCOE_AG_CONTEXT_DQ_SPARE_FLAG_EN (0x1<<2)
+#define __XSTORM_FCOE_AG_CONTEXT_DQ_SPARE_FLAG_EN_SHIFT 2
+#define __XSTORM_FCOE_AG_CONTEXT_AUX8_FLAG (0x1<<3)
+#define __XSTORM_FCOE_AG_CONTEXT_AUX8_FLAG_SHIFT 3
+#define __XSTORM_FCOE_AG_CONTEXT_AUX9_FLAG (0x1<<4)
+#define __XSTORM_FCOE_AG_CONTEXT_AUX9_FLAG_SHIFT 4
+#define XSTORM_FCOE_AG_CONTEXT_DECISION_RULE1 (0x3<<5)
+#define XSTORM_FCOE_AG_CONTEXT_DECISION_RULE1_SHIFT 5
+#define __XSTORM_FCOE_AG_CONTEXT_DQ_CF_EN (0x1<<7)
+#define __XSTORM_FCOE_AG_CONTEXT_DQ_CF_EN_SHIFT 7
+	u8 agg_vars3;
+#define XSTORM_FCOE_AG_CONTEXT_PHYSICAL_QUEUE_NUM2 (0x3F<<0)
+#define XSTORM_FCOE_AG_CONTEXT_PHYSICAL_QUEUE_NUM2_SHIFT 0
+#define __XSTORM_FCOE_AG_CONTEXT_AUX19_CF (0x3<<6)
+#define __XSTORM_FCOE_AG_CONTEXT_AUX19_CF_SHIFT 6
+	u8 __agg_vars4;
+	u8 cdu_reserved;
+#endif
+	u32 more_to_send;
+#if defined(__BIG_ENDIAN)
+	u16 agg_vars5;
+#define XSTORM_FCOE_AG_CONTEXT_DECISION_RULE5 (0x3<<0)
+#define XSTORM_FCOE_AG_CONTEXT_DECISION_RULE5_SHIFT 0
+#define XSTORM_FCOE_AG_CONTEXT_PHYSICAL_QUEUE_NUM0 (0x3F<<2)
+#define XSTORM_FCOE_AG_CONTEXT_PHYSICAL_QUEUE_NUM0_SHIFT 2
+#define XSTORM_FCOE_AG_CONTEXT_PHYSICAL_QUEUE_NUM1 (0x3F<<8)
+#define XSTORM_FCOE_AG_CONTEXT_PHYSICAL_QUEUE_NUM1_SHIFT 8
+#define __XSTORM_FCOE_AG_CONTEXT_CONFQ_DEC_RULE (0x3<<14)
+#define __XSTORM_FCOE_AG_CONTEXT_CONFQ_DEC_RULE_SHIFT 14
+	u16 sq_cons;
+#elif defined(__LITTLE_ENDIAN)
+	u16 sq_cons;
+	u16 agg_vars5;
+#define XSTORM_FCOE_AG_CONTEXT_DECISION_RULE5 (0x3<<0)
+#define XSTORM_FCOE_AG_CONTEXT_DECISION_RULE5_SHIFT 0
+#define XSTORM_FCOE_AG_CONTEXT_PHYSICAL_QUEUE_NUM0 (0x3F<<2)
+#define XSTORM_FCOE_AG_CONTEXT_PHYSICAL_QUEUE_NUM0_SHIFT 2
+#define XSTORM_FCOE_AG_CONTEXT_PHYSICAL_QUEUE_NUM1 (0x3F<<8)
+#define XSTORM_FCOE_AG_CONTEXT_PHYSICAL_QUEUE_NUM1_SHIFT 8
+#define __XSTORM_FCOE_AG_CONTEXT_CONFQ_DEC_RULE (0x3<<14)
+#define __XSTORM_FCOE_AG_CONTEXT_CONFQ_DEC_RULE_SHIFT 14
+#endif
+	struct xstorm_fcoe_extra_ag_context_section __extra_section;
+#if defined(__BIG_ENDIAN)
+	u16 agg_vars7;
+#define __XSTORM_FCOE_AG_CONTEXT_AGG_VAL11_DECISION_RULE (0x7<<0)
+#define __XSTORM_FCOE_AG_CONTEXT_AGG_VAL11_DECISION_RULE_SHIFT 0
+#define __XSTORM_FCOE_AG_CONTEXT_AUX13_FLAG (0x1<<3)
+#define __XSTORM_FCOE_AG_CONTEXT_AUX13_FLAG_SHIFT 3
+#define __XSTORM_FCOE_AG_CONTEXT_QUEUE0_CF (0x3<<4)
+#define __XSTORM_FCOE_AG_CONTEXT_QUEUE0_CF_SHIFT 4
+#define XSTORM_FCOE_AG_CONTEXT_DECISION_RULE3 (0x3<<6)
+#define XSTORM_FCOE_AG_CONTEXT_DECISION_RULE3_SHIFT 6
+#define XSTORM_FCOE_AG_CONTEXT_AUX1_CF (0x3<<8)
+#define XSTORM_FCOE_AG_CONTEXT_AUX1_CF_SHIFT 8
+#define __XSTORM_FCOE_AG_CONTEXT_RESERVED62 (0x1<<10)
+#define __XSTORM_FCOE_AG_CONTEXT_RESERVED62_SHIFT 10
+#define __XSTORM_FCOE_AG_CONTEXT_AUX1_CF_EN (0x1<<11)
+#define __XSTORM_FCOE_AG_CONTEXT_AUX1_CF_EN_SHIFT 11
+#define __XSTORM_FCOE_AG_CONTEXT_AUX10_FLAG (0x1<<12)
+#define __XSTORM_FCOE_AG_CONTEXT_AUX10_FLAG_SHIFT 12
+#define __XSTORM_FCOE_AG_CONTEXT_AUX11_FLAG (0x1<<13)
+#define __XSTORM_FCOE_AG_CONTEXT_AUX11_FLAG_SHIFT 13
+#define __XSTORM_FCOE_AG_CONTEXT_AUX12_FLAG (0x1<<14)
+#define __XSTORM_FCOE_AG_CONTEXT_AUX12_FLAG_SHIFT 14
+#define __XSTORM_FCOE_AG_CONTEXT_AUX2_FLAG (0x1<<15)
+#define __XSTORM_FCOE_AG_CONTEXT_AUX2_FLAG_SHIFT 15
+	u8 agg_val3_th;
+	u8 agg_vars6;
+#define XSTORM_FCOE_AG_CONTEXT_DECISION_RULE6 (0x7<<0)
+#define XSTORM_FCOE_AG_CONTEXT_DECISION_RULE6_SHIFT 0
+#define __XSTORM_FCOE_AG_CONTEXT_XFRQ_DEC_RULE (0x7<<3)
+#define __XSTORM_FCOE_AG_CONTEXT_XFRQ_DEC_RULE_SHIFT 3
+#define __XSTORM_FCOE_AG_CONTEXT_SQ_DEC_RULE (0x3<<6)
+#define __XSTORM_FCOE_AG_CONTEXT_SQ_DEC_RULE_SHIFT 6
+#elif defined(__LITTLE_ENDIAN)
+	u8 agg_vars6;
+#define XSTORM_FCOE_AG_CONTEXT_DECISION_RULE6 (0x7<<0)
+#define XSTORM_FCOE_AG_CONTEXT_DECISION_RULE6_SHIFT 0
+#define __XSTORM_FCOE_AG_CONTEXT_XFRQ_DEC_RULE (0x7<<3)
+#define __XSTORM_FCOE_AG_CONTEXT_XFRQ_DEC_RULE_SHIFT 3
+#define __XSTORM_FCOE_AG_CONTEXT_SQ_DEC_RULE (0x3<<6)
+#define __XSTORM_FCOE_AG_CONTEXT_SQ_DEC_RULE_SHIFT 6
+	u8 agg_val3_th;
+	u16 agg_vars7;
+#define __XSTORM_FCOE_AG_CONTEXT_AGG_VAL11_DECISION_RULE (0x7<<0)
+#define __XSTORM_FCOE_AG_CONTEXT_AGG_VAL11_DECISION_RULE_SHIFT 0
+#define __XSTORM_FCOE_AG_CONTEXT_AUX13_FLAG (0x1<<3)
+#define __XSTORM_FCOE_AG_CONTEXT_AUX13_FLAG_SHIFT 3
+#define __XSTORM_FCOE_AG_CONTEXT_QUEUE0_CF (0x3<<4)
+#define __XSTORM_FCOE_AG_CONTEXT_QUEUE0_CF_SHIFT 4
+#define XSTORM_FCOE_AG_CONTEXT_DECISION_RULE3 (0x3<<6)
+#define XSTORM_FCOE_AG_CONTEXT_DECISION_RULE3_SHIFT 6
+#define XSTORM_FCOE_AG_CONTEXT_AUX1_CF (0x3<<8)
+#define XSTORM_FCOE_AG_CONTEXT_AUX1_CF_SHIFT 8
+#define __XSTORM_FCOE_AG_CONTEXT_RESERVED62 (0x1<<10)
+#define __XSTORM_FCOE_AG_CONTEXT_RESERVED62_SHIFT 10
+#define __XSTORM_FCOE_AG_CONTEXT_AUX1_CF_EN (0x1<<11)
+#define __XSTORM_FCOE_AG_CONTEXT_AUX1_CF_EN_SHIFT 11
+#define __XSTORM_FCOE_AG_CONTEXT_AUX10_FLAG (0x1<<12)
+#define __XSTORM_FCOE_AG_CONTEXT_AUX10_FLAG_SHIFT 12
+#define __XSTORM_FCOE_AG_CONTEXT_AUX11_FLAG (0x1<<13)
+#define __XSTORM_FCOE_AG_CONTEXT_AUX11_FLAG_SHIFT 13
+#define __XSTORM_FCOE_AG_CONTEXT_AUX12_FLAG (0x1<<14)
+#define __XSTORM_FCOE_AG_CONTEXT_AUX12_FLAG_SHIFT 14
+#define __XSTORM_FCOE_AG_CONTEXT_AUX2_FLAG (0x1<<15)
+#define __XSTORM_FCOE_AG_CONTEXT_AUX2_FLAG_SHIFT 15
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 __agg_val11_th;
+	u16 __agg_val11;
+#elif defined(__LITTLE_ENDIAN)
+	u16 __agg_val11;
+	u16 __agg_val11_th;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 __reserved1;
+	u8 __agg_val6_th;
+	u16 __agg_val9;
+#elif defined(__LITTLE_ENDIAN)
+	u16 __agg_val9;
+	u8 __agg_val6_th;
+	u8 __reserved1;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 confq_cons;
+	u16 confq_prod;
+#elif defined(__LITTLE_ENDIAN)
+	u16 confq_prod;
+	u16 confq_cons;
+#endif
+	u32 agg_vars8;
+#define XSTORM_FCOE_AG_CONTEXT_AGG_MISC2 (0xFFFFFF<<0)
+#define XSTORM_FCOE_AG_CONTEXT_AGG_MISC2_SHIFT 0
+#define XSTORM_FCOE_AG_CONTEXT_AGG_MISC3 (0xFF<<24)
+#define XSTORM_FCOE_AG_CONTEXT_AGG_MISC3_SHIFT 24
+#if defined(__BIG_ENDIAN)
+	u16 __cache_wqe_db;
+	u16 sq_prod;
+#elif defined(__LITTLE_ENDIAN)
+	u16 sq_prod;
+	u16 __cache_wqe_db;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 agg_val3;
+	u8 agg_val6;
+	u8 agg_val5_th;
+	u8 agg_val5;
+#elif defined(__LITTLE_ENDIAN)
+	u8 agg_val5;
+	u8 agg_val5_th;
+	u8 agg_val6;
+	u8 agg_val3;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 __agg_misc1;
+	u16 agg_limit1;
+#elif defined(__LITTLE_ENDIAN)
+	u16 agg_limit1;
+	u16 __agg_misc1;
+#endif
+	u32 completion_seq;
+	u32 confq_pbl_base_lo;
+	u32 confq_pbl_base_hi;
+};
+
+
+
+/*
+ * The tcp aggregative context section of Xstorm
+ */
+struct xstorm_tcp_tcp_ag_context_section {
+#if defined(__BIG_ENDIAN)
+	u8 tcp_agg_vars1;
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_SET_DA_TIMER_CF (0x3<<0)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_SET_DA_TIMER_CF_SHIFT 0
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_ACK_TO_FE_UPDATED (0x3<<2)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_ACK_TO_FE_UPDATED_SHIFT 2
+#define XSTORM_TCP_TCP_AG_CONTEXT_SECTION_SIDEBAND_SENT_CF (0x3<<4)
+#define XSTORM_TCP_TCP_AG_CONTEXT_SECTION_SIDEBAND_SENT_CF_SHIFT 4
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_CLEAR_DA_TIMER_EN (0x1<<6)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_CLEAR_DA_TIMER_EN_SHIFT 6
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_DA_EXPIRATION_FLAG (0x1<<7)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_DA_EXPIRATION_FLAG_SHIFT 7
+	u8 __da_cnt;
+	u16 mss;
+#elif defined(__LITTLE_ENDIAN)
+	u16 mss;
+	u8 __da_cnt;
+	u8 tcp_agg_vars1;
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_SET_DA_TIMER_CF (0x3<<0)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_SET_DA_TIMER_CF_SHIFT 0
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_ACK_TO_FE_UPDATED (0x3<<2)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_ACK_TO_FE_UPDATED_SHIFT 2
+#define XSTORM_TCP_TCP_AG_CONTEXT_SECTION_SIDEBAND_SENT_CF (0x3<<4)
+#define XSTORM_TCP_TCP_AG_CONTEXT_SECTION_SIDEBAND_SENT_CF_SHIFT 4
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_CLEAR_DA_TIMER_EN (0x1<<6)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_CLEAR_DA_TIMER_EN_SHIFT 6
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_DA_EXPIRATION_FLAG (0x1<<7)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_DA_EXPIRATION_FLAG_SHIFT 7
+#endif
+	u32 snd_nxt;
+	u32 tx_wnd;
+	u32 snd_una;
+	u32 local_adv_wnd;
+#if defined(__BIG_ENDIAN)
+	u8 __agg_val8_th;
+	u8 __tx_dest;
+	u16 tcp_agg_vars2;
+#define XSTORM_TCP_TCP_AG_CONTEXT_SECTION_TX_FIN_FLAG (0x1<<0)
+#define XSTORM_TCP_TCP_AG_CONTEXT_SECTION_TX_FIN_FLAG_SHIFT 0
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_TX_UNBLOCKED (0x1<<1)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_TX_UNBLOCKED_SHIFT 1
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_DA_TIMER_ACTIVE (0x1<<2)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_DA_TIMER_ACTIVE_SHIFT 2
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX3_FLAG (0x1<<3)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX3_FLAG_SHIFT 3
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX4_FLAG (0x1<<4)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX4_FLAG_SHIFT 4
+#define XSTORM_TCP_TCP_AG_CONTEXT_SECTION_DA_ENABLE (0x1<<5)
+#define XSTORM_TCP_TCP_AG_CONTEXT_SECTION_DA_ENABLE_SHIFT 5
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_ACK_TO_FE_UPDATED_EN (0x1<<6)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_ACK_TO_FE_UPDATED_EN_SHIFT 6
+#define XSTORM_TCP_TCP_AG_CONTEXT_SECTION_SIDEBAND_SENT_CF_EN (0x1<<7)
+#define XSTORM_TCP_TCP_AG_CONTEXT_SECTION_SIDEBAND_SENT_CF_EN_SHIFT 7
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_TX_FIN_FLAG_EN (0x1<<8)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_TX_FIN_FLAG_EN_SHIFT 8
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX1_FLAG (0x1<<9)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX1_FLAG_SHIFT 9
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_SET_RTO_CF (0x3<<10)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_SET_RTO_CF_SHIFT 10
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_TS_TO_ECHO_UPDATED_CF (0x3<<12)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_TS_TO_ECHO_UPDATED_CF_SHIFT 12
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_TX_DEST_UPDATED_CF (0x3<<14)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_TX_DEST_UPDATED_CF_SHIFT 14
+#elif defined(__LITTLE_ENDIAN)
+	u16 tcp_agg_vars2;
+#define XSTORM_TCP_TCP_AG_CONTEXT_SECTION_TX_FIN_FLAG (0x1<<0)
+#define XSTORM_TCP_TCP_AG_CONTEXT_SECTION_TX_FIN_FLAG_SHIFT 0
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_TX_UNBLOCKED (0x1<<1)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_TX_UNBLOCKED_SHIFT 1
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_DA_TIMER_ACTIVE (0x1<<2)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_DA_TIMER_ACTIVE_SHIFT 2
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX3_FLAG (0x1<<3)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX3_FLAG_SHIFT 3
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX4_FLAG (0x1<<4)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX4_FLAG_SHIFT 4
+#define XSTORM_TCP_TCP_AG_CONTEXT_SECTION_DA_ENABLE (0x1<<5)
+#define XSTORM_TCP_TCP_AG_CONTEXT_SECTION_DA_ENABLE_SHIFT 5
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_ACK_TO_FE_UPDATED_EN (0x1<<6)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_ACK_TO_FE_UPDATED_EN_SHIFT 6
+#define XSTORM_TCP_TCP_AG_CONTEXT_SECTION_SIDEBAND_SENT_CF_EN (0x1<<7)
+#define XSTORM_TCP_TCP_AG_CONTEXT_SECTION_SIDEBAND_SENT_CF_EN_SHIFT 7
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_TX_FIN_FLAG_EN (0x1<<8)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_TX_FIN_FLAG_EN_SHIFT 8
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX1_FLAG (0x1<<9)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX1_FLAG_SHIFT 9
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_SET_RTO_CF (0x3<<10)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_SET_RTO_CF_SHIFT 10
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_TS_TO_ECHO_UPDATED_CF (0x3<<12)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_TS_TO_ECHO_UPDATED_CF_SHIFT 12
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_TX_DEST_UPDATED_CF (0x3<<14)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_TX_DEST_UPDATED_CF_SHIFT 14
+	u8 __tx_dest;
+	u8 __agg_val8_th;
+#endif
+	u32 ack_to_far_end;
+	u32 rto_timer;
+	u32 ka_timer;
+	u32 ts_to_echo;
+#if defined(__BIG_ENDIAN)
+	u16 __agg_val7_th;
+	u16 __agg_val7;
+#elif defined(__LITTLE_ENDIAN)
+	u16 __agg_val7;
+	u16 __agg_val7_th;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 __tcp_agg_vars5;
+	u8 __tcp_agg_vars4;
+	u8 __tcp_agg_vars3;
+	u8 __force_pure_ack_cnt;
+#elif defined(__LITTLE_ENDIAN)
+	u8 __force_pure_ack_cnt;
+	u8 __tcp_agg_vars3;
+	u8 __tcp_agg_vars4;
+	u8 __tcp_agg_vars5;
+#endif
+	u32 tcp_agg_vars6;
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_TS_TO_ECHO_CF_EN (0x1<<0)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_TS_TO_ECHO_CF_EN_SHIFT 0
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_TX_DEST_UPDATED_CF_EN (0x1<<1)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_TX_DEST_UPDATED_CF_EN_SHIFT 1
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX9_CF_EN (0x1<<2)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX9_CF_EN_SHIFT 2
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX10_CF_EN (0x1<<3)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX10_CF_EN_SHIFT 3
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX6_FLAG (0x1<<4)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX6_FLAG_SHIFT 4
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX7_FLAG (0x1<<5)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX7_FLAG_SHIFT 5
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX5_CF (0x3<<6)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX5_CF_SHIFT 6
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX9_CF (0x3<<8)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX9_CF_SHIFT 8
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX10_CF (0x3<<10)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX10_CF_SHIFT 10
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX11_CF (0x3<<12)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX11_CF_SHIFT 12
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX12_CF (0x3<<14)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX12_CF_SHIFT 14
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX13_CF (0x3<<16)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX13_CF_SHIFT 16
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX14_CF (0x3<<18)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX14_CF_SHIFT 18
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX15_CF (0x3<<20)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX15_CF_SHIFT 20
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX16_CF (0x3<<22)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX16_CF_SHIFT 22
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX17_CF (0x3<<24)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_AUX17_CF_SHIFT 24
+#define XSTORM_TCP_TCP_AG_CONTEXT_SECTION_ECE_FLAG (0x1<<26)
+#define XSTORM_TCP_TCP_AG_CONTEXT_SECTION_ECE_FLAG_SHIFT 26
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_RESERVED71 (0x1<<27)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_RESERVED71_SHIFT 27
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_FORCE_PURE_ACK_CNT_DIRTY (0x1<<28)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_FORCE_PURE_ACK_CNT_DIRTY_SHIFT 28
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_TCP_AUTO_STOP_FLAG (0x1<<29)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_TCP_AUTO_STOP_FLAG_SHIFT 29
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_DO_TS_UPDATE_FLAG (0x1<<30)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_DO_TS_UPDATE_FLAG_SHIFT 30
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_CANCEL_RETRANSMIT_FLAG (0x1<<31)
+#define __XSTORM_TCP_TCP_AG_CONTEXT_SECTION_CANCEL_RETRANSMIT_FLAG_SHIFT 31
+#if defined(__BIG_ENDIAN)
+	u16 __agg_misc6;
+	u16 __tcp_agg_vars7;
+#elif defined(__LITTLE_ENDIAN)
+	u16 __tcp_agg_vars7;
+	u16 __agg_misc6;
+#endif
+	u32 __agg_val10;
+	u32 __agg_val10_th;
+#if defined(__BIG_ENDIAN)
+	u16 __reserved3;
+	u8 __reserved2;
+	u8 __da_only_cnt;
+#elif defined(__LITTLE_ENDIAN)
+	u8 __da_only_cnt;
+	u8 __reserved2;
+	u16 __reserved3;
+#endif
+};
+
+/*
+ * The iscsi aggregative context of Xstorm
+ */
+struct xstorm_iscsi_ag_context {
+#if defined(__BIG_ENDIAN)
+	u16 agg_val1;
+	u8 agg_vars1;
+#define __XSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM0 (0x1<<0)
+#define __XSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM0_SHIFT 0
+#define XSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM1 (0x1<<1)
+#define XSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM1_SHIFT 1
+#define XSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM2 (0x1<<2)
+#define XSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM2_SHIFT 2
+#define XSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM3 (0x1<<3)
+#define XSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM3_SHIFT 3
+#define __XSTORM_ISCSI_AG_CONTEXT_MORE_TO_SEND_EN (0x1<<4)
+#define __XSTORM_ISCSI_AG_CONTEXT_MORE_TO_SEND_EN_SHIFT 4
+#define XSTORM_ISCSI_AG_CONTEXT_NAGLE_EN (0x1<<5)
+#define XSTORM_ISCSI_AG_CONTEXT_NAGLE_EN_SHIFT 5
+#define __XSTORM_ISCSI_AG_CONTEXT_DQ_SPARE_FLAG (0x1<<6)
+#define __XSTORM_ISCSI_AG_CONTEXT_DQ_SPARE_FLAG_SHIFT 6
+#define __XSTORM_ISCSI_AG_CONTEXT_UNA_GT_NXT_EN (0x1<<7)
+#define __XSTORM_ISCSI_AG_CONTEXT_UNA_GT_NXT_EN_SHIFT 7
+	u8 state;
+#elif defined(__LITTLE_ENDIAN)
+	u8 state;
+	u8 agg_vars1;
+#define __XSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM0 (0x1<<0)
+#define __XSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM0_SHIFT 0
+#define XSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM1 (0x1<<1)
+#define XSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM1_SHIFT 1
+#define XSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM2 (0x1<<2)
+#define XSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM2_SHIFT 2
+#define XSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM3 (0x1<<3)
+#define XSTORM_ISCSI_AG_CONTEXT_EXISTS_IN_QM3_SHIFT 3
+#define __XSTORM_ISCSI_AG_CONTEXT_MORE_TO_SEND_EN (0x1<<4)
+#define __XSTORM_ISCSI_AG_CONTEXT_MORE_TO_SEND_EN_SHIFT 4
+#define XSTORM_ISCSI_AG_CONTEXT_NAGLE_EN (0x1<<5)
+#define XSTORM_ISCSI_AG_CONTEXT_NAGLE_EN_SHIFT 5
+#define __XSTORM_ISCSI_AG_CONTEXT_DQ_SPARE_FLAG (0x1<<6)
+#define __XSTORM_ISCSI_AG_CONTEXT_DQ_SPARE_FLAG_SHIFT 6
+#define __XSTORM_ISCSI_AG_CONTEXT_UNA_GT_NXT_EN (0x1<<7)
+#define __XSTORM_ISCSI_AG_CONTEXT_UNA_GT_NXT_EN_SHIFT 7
+	u16 agg_val1;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 cdu_reserved;
+	u8 __agg_vars4;
+	u8 agg_vars3;
+#define XSTORM_ISCSI_AG_CONTEXT_PHYSICAL_QUEUE_NUM2 (0x3F<<0)
+#define XSTORM_ISCSI_AG_CONTEXT_PHYSICAL_QUEUE_NUM2_SHIFT 0
+#define __XSTORM_ISCSI_AG_CONTEXT_RX_TS_EN_CF (0x3<<6)
+#define __XSTORM_ISCSI_AG_CONTEXT_RX_TS_EN_CF_SHIFT 6
+	u8 agg_vars2;
+#define __XSTORM_ISCSI_AG_CONTEXT_DQ_CF (0x3<<0)
+#define __XSTORM_ISCSI_AG_CONTEXT_DQ_CF_SHIFT 0
+#define __XSTORM_ISCSI_AG_CONTEXT_DQ_SPARE_FLAG_EN (0x1<<2)
+#define __XSTORM_ISCSI_AG_CONTEXT_DQ_SPARE_FLAG_EN_SHIFT 2
+#define __XSTORM_ISCSI_AG_CONTEXT_AUX8_FLAG (0x1<<3)
+#define __XSTORM_ISCSI_AG_CONTEXT_AUX8_FLAG_SHIFT 3
+#define __XSTORM_ISCSI_AG_CONTEXT_AUX9_FLAG (0x1<<4)
+#define __XSTORM_ISCSI_AG_CONTEXT_AUX9_FLAG_SHIFT 4
+#define XSTORM_ISCSI_AG_CONTEXT_DECISION_RULE1 (0x3<<5)
+#define XSTORM_ISCSI_AG_CONTEXT_DECISION_RULE1_SHIFT 5
+#define __XSTORM_ISCSI_AG_CONTEXT_DQ_CF_EN (0x1<<7)
+#define __XSTORM_ISCSI_AG_CONTEXT_DQ_CF_EN_SHIFT 7
+#elif defined(__LITTLE_ENDIAN)
+	u8 agg_vars2;
+#define __XSTORM_ISCSI_AG_CONTEXT_DQ_CF (0x3<<0)
+#define __XSTORM_ISCSI_AG_CONTEXT_DQ_CF_SHIFT 0
+#define __XSTORM_ISCSI_AG_CONTEXT_DQ_SPARE_FLAG_EN (0x1<<2)
+#define __XSTORM_ISCSI_AG_CONTEXT_DQ_SPARE_FLAG_EN_SHIFT 2
+#define __XSTORM_ISCSI_AG_CONTEXT_AUX8_FLAG (0x1<<3)
+#define __XSTORM_ISCSI_AG_CONTEXT_AUX8_FLAG_SHIFT 3
+#define __XSTORM_ISCSI_AG_CONTEXT_AUX9_FLAG (0x1<<4)
+#define __XSTORM_ISCSI_AG_CONTEXT_AUX9_FLAG_SHIFT 4
+#define XSTORM_ISCSI_AG_CONTEXT_DECISION_RULE1 (0x3<<5)
+#define XSTORM_ISCSI_AG_CONTEXT_DECISION_RULE1_SHIFT 5
+#define __XSTORM_ISCSI_AG_CONTEXT_DQ_CF_EN (0x1<<7)
+#define __XSTORM_ISCSI_AG_CONTEXT_DQ_CF_EN_SHIFT 7
+	u8 agg_vars3;
+#define XSTORM_ISCSI_AG_CONTEXT_PHYSICAL_QUEUE_NUM2 (0x3F<<0)
+#define XSTORM_ISCSI_AG_CONTEXT_PHYSICAL_QUEUE_NUM2_SHIFT 0
+#define __XSTORM_ISCSI_AG_CONTEXT_RX_TS_EN_CF (0x3<<6)
+#define __XSTORM_ISCSI_AG_CONTEXT_RX_TS_EN_CF_SHIFT 6
+	u8 __agg_vars4;
+	u8 cdu_reserved;
+#endif
+	u32 more_to_send;
+#if defined(__BIG_ENDIAN)
+	u16 agg_vars5;
+#define XSTORM_ISCSI_AG_CONTEXT_DECISION_RULE5 (0x3<<0)
+#define XSTORM_ISCSI_AG_CONTEXT_DECISION_RULE5_SHIFT 0
+#define XSTORM_ISCSI_AG_CONTEXT_PHYSICAL_QUEUE_NUM0 (0x3F<<2)
+#define XSTORM_ISCSI_AG_CONTEXT_PHYSICAL_QUEUE_NUM0_SHIFT 2
+#define XSTORM_ISCSI_AG_CONTEXT_PHYSICAL_QUEUE_NUM1 (0x3F<<8)
+#define XSTORM_ISCSI_AG_CONTEXT_PHYSICAL_QUEUE_NUM1_SHIFT 8
+#define XSTORM_ISCSI_AG_CONTEXT_DECISION_RULE2 (0x3<<14)
+#define XSTORM_ISCSI_AG_CONTEXT_DECISION_RULE2_SHIFT 14
+	u16 sq_cons;
+#elif defined(__LITTLE_ENDIAN)
+	u16 sq_cons;
+	u16 agg_vars5;
+#define XSTORM_ISCSI_AG_CONTEXT_DECISION_RULE5 (0x3<<0)
+#define XSTORM_ISCSI_AG_CONTEXT_DECISION_RULE5_SHIFT 0
+#define XSTORM_ISCSI_AG_CONTEXT_PHYSICAL_QUEUE_NUM0 (0x3F<<2)
+#define XSTORM_ISCSI_AG_CONTEXT_PHYSICAL_QUEUE_NUM0_SHIFT 2
+#define XSTORM_ISCSI_AG_CONTEXT_PHYSICAL_QUEUE_NUM1 (0x3F<<8)
+#define XSTORM_ISCSI_AG_CONTEXT_PHYSICAL_QUEUE_NUM1_SHIFT 8
+#define XSTORM_ISCSI_AG_CONTEXT_DECISION_RULE2 (0x3<<14)
+#define XSTORM_ISCSI_AG_CONTEXT_DECISION_RULE2_SHIFT 14
+#endif
+	struct xstorm_tcp_tcp_ag_context_section tcp;
+#if defined(__BIG_ENDIAN)
+	u16 agg_vars7;
+#define __XSTORM_ISCSI_AG_CONTEXT_AGG_VAL11_DECISION_RULE (0x7<<0)
+#define __XSTORM_ISCSI_AG_CONTEXT_AGG_VAL11_DECISION_RULE_SHIFT 0
+#define __XSTORM_ISCSI_AG_CONTEXT_AUX13_FLAG (0x1<<3)
+#define __XSTORM_ISCSI_AG_CONTEXT_AUX13_FLAG_SHIFT 3
+#define __XSTORM_ISCSI_AG_CONTEXT_STORMS_SYNC_CF (0x3<<4)
+#define __XSTORM_ISCSI_AG_CONTEXT_STORMS_SYNC_CF_SHIFT 4
+#define XSTORM_ISCSI_AG_CONTEXT_DECISION_RULE3 (0x3<<6)
+#define XSTORM_ISCSI_AG_CONTEXT_DECISION_RULE3_SHIFT 6
+#define XSTORM_ISCSI_AG_CONTEXT_AUX1_CF (0x3<<8)
+#define XSTORM_ISCSI_AG_CONTEXT_AUX1_CF_SHIFT 8
+#define __XSTORM_ISCSI_AG_CONTEXT_COMPLETION_SEQ_DECISION_MASK (0x1<<10)
+#define __XSTORM_ISCSI_AG_CONTEXT_COMPLETION_SEQ_DECISION_MASK_SHIFT 10
+#define __XSTORM_ISCSI_AG_CONTEXT_AUX1_CF_EN (0x1<<11)
+#define __XSTORM_ISCSI_AG_CONTEXT_AUX1_CF_EN_SHIFT 11
+#define __XSTORM_ISCSI_AG_CONTEXT_AUX10_FLAG (0x1<<12)
+#define __XSTORM_ISCSI_AG_CONTEXT_AUX10_FLAG_SHIFT 12
+#define __XSTORM_ISCSI_AG_CONTEXT_AUX11_FLAG (0x1<<13)
+#define __XSTORM_ISCSI_AG_CONTEXT_AUX11_FLAG_SHIFT 13
+#define __XSTORM_ISCSI_AG_CONTEXT_AUX12_FLAG (0x1<<14)
+#define __XSTORM_ISCSI_AG_CONTEXT_AUX12_FLAG_SHIFT 14
+#define __XSTORM_ISCSI_AG_CONTEXT_RX_WND_SCL_EN (0x1<<15)
+#define __XSTORM_ISCSI_AG_CONTEXT_RX_WND_SCL_EN_SHIFT 15
+	u8 agg_val3_th;
+	u8 agg_vars6;
+#define XSTORM_ISCSI_AG_CONTEXT_DECISION_RULE6 (0x7<<0)
+#define XSTORM_ISCSI_AG_CONTEXT_DECISION_RULE6_SHIFT 0
+#define XSTORM_ISCSI_AG_CONTEXT_DECISION_RULE7 (0x7<<3)
+#define XSTORM_ISCSI_AG_CONTEXT_DECISION_RULE7_SHIFT 3
+#define XSTORM_ISCSI_AG_CONTEXT_DECISION_RULE4 (0x3<<6)
+#define XSTORM_ISCSI_AG_CONTEXT_DECISION_RULE4_SHIFT 6
+#elif defined(__LITTLE_ENDIAN)
+	u8 agg_vars6;
+#define XSTORM_ISCSI_AG_CONTEXT_DECISION_RULE6 (0x7<<0)
+#define XSTORM_ISCSI_AG_CONTEXT_DECISION_RULE6_SHIFT 0
+#define XSTORM_ISCSI_AG_CONTEXT_DECISION_RULE7 (0x7<<3)
+#define XSTORM_ISCSI_AG_CONTEXT_DECISION_RULE7_SHIFT 3
+#define XSTORM_ISCSI_AG_CONTEXT_DECISION_RULE4 (0x3<<6)
+#define XSTORM_ISCSI_AG_CONTEXT_DECISION_RULE4_SHIFT 6
+	u8 agg_val3_th;
+	u16 agg_vars7;
+#define __XSTORM_ISCSI_AG_CONTEXT_AGG_VAL11_DECISION_RULE (0x7<<0)
+#define __XSTORM_ISCSI_AG_CONTEXT_AGG_VAL11_DECISION_RULE_SHIFT 0
+#define __XSTORM_ISCSI_AG_CONTEXT_AUX13_FLAG (0x1<<3)
+#define __XSTORM_ISCSI_AG_CONTEXT_AUX13_FLAG_SHIFT 3
+#define __XSTORM_ISCSI_AG_CONTEXT_STORMS_SYNC_CF (0x3<<4)
+#define __XSTORM_ISCSI_AG_CONTEXT_STORMS_SYNC_CF_SHIFT 4
+#define XSTORM_ISCSI_AG_CONTEXT_DECISION_RULE3 (0x3<<6)
+#define XSTORM_ISCSI_AG_CONTEXT_DECISION_RULE3_SHIFT 6
+#define XSTORM_ISCSI_AG_CONTEXT_AUX1_CF (0x3<<8)
+#define XSTORM_ISCSI_AG_CONTEXT_AUX1_CF_SHIFT 8
+#define __XSTORM_ISCSI_AG_CONTEXT_COMPLETION_SEQ_DECISION_MASK (0x1<<10)
+#define __XSTORM_ISCSI_AG_CONTEXT_COMPLETION_SEQ_DECISION_MASK_SHIFT 10
+#define __XSTORM_ISCSI_AG_CONTEXT_AUX1_CF_EN (0x1<<11)
+#define __XSTORM_ISCSI_AG_CONTEXT_AUX1_CF_EN_SHIFT 11
+#define __XSTORM_ISCSI_AG_CONTEXT_AUX10_FLAG (0x1<<12)
+#define __XSTORM_ISCSI_AG_CONTEXT_AUX10_FLAG_SHIFT 12
+#define __XSTORM_ISCSI_AG_CONTEXT_AUX11_FLAG (0x1<<13)
+#define __XSTORM_ISCSI_AG_CONTEXT_AUX11_FLAG_SHIFT 13
+#define __XSTORM_ISCSI_AG_CONTEXT_AUX12_FLAG (0x1<<14)
+#define __XSTORM_ISCSI_AG_CONTEXT_AUX12_FLAG_SHIFT 14
+#define __XSTORM_ISCSI_AG_CONTEXT_RX_WND_SCL_EN (0x1<<15)
+#define __XSTORM_ISCSI_AG_CONTEXT_RX_WND_SCL_EN_SHIFT 15
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 __agg_val11_th;
+	u16 __gen_data;
+#elif defined(__LITTLE_ENDIAN)
+	u16 __gen_data;
+	u16 __agg_val11_th;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 __reserved1;
+	u8 __agg_val6_th;
+	u16 __agg_val9;
+#elif defined(__LITTLE_ENDIAN)
+	u16 __agg_val9;
+	u8 __agg_val6_th;
+	u8 __reserved1;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 hq_prod;
+	u16 hq_cons;
+#elif defined(__LITTLE_ENDIAN)
+	u16 hq_cons;
+	u16 hq_prod;
+#endif
+	u32 agg_vars8;
+#define XSTORM_ISCSI_AG_CONTEXT_AGG_MISC2 (0xFFFFFF<<0)
+#define XSTORM_ISCSI_AG_CONTEXT_AGG_MISC2_SHIFT 0
+#define XSTORM_ISCSI_AG_CONTEXT_AGG_MISC3 (0xFF<<24)
+#define XSTORM_ISCSI_AG_CONTEXT_AGG_MISC3_SHIFT 24
+#if defined(__BIG_ENDIAN)
+	u16 r2tq_prod;
+	u16 sq_prod;
+#elif defined(__LITTLE_ENDIAN)
+	u16 sq_prod;
+	u16 r2tq_prod;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 agg_val3;
+	u8 agg_val6;
+	u8 agg_val5_th;
+	u8 agg_val5;
+#elif defined(__LITTLE_ENDIAN)
+	u8 agg_val5;
+	u8 agg_val5_th;
+	u8 agg_val6;
+	u8 agg_val3;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 __agg_misc1;
+	u16 agg_limit1;
+#elif defined(__LITTLE_ENDIAN)
+	u16 agg_limit1;
+	u16 __agg_misc1;
+#endif
+	u32 hq_cons_tcp_seq;
+	u32 exp_stat_sn;
+	u32 rst_seq_num;
+};
+
+
+/*
+ * The L5cm aggregative context of XStorm
+ */
+struct xstorm_l5cm_ag_context {
+#if defined(__BIG_ENDIAN)
+	u16 agg_val1;
+	u8 agg_vars1;
+#define __XSTORM_L5CM_AG_CONTEXT_EXISTS_IN_QM0 (0x1<<0)
+#define __XSTORM_L5CM_AG_CONTEXT_EXISTS_IN_QM0_SHIFT 0
+#define XSTORM_L5CM_AG_CONTEXT_EXISTS_IN_QM1 (0x1<<1)
+#define XSTORM_L5CM_AG_CONTEXT_EXISTS_IN_QM1_SHIFT 1
+#define XSTORM_L5CM_AG_CONTEXT_EXISTS_IN_QM2 (0x1<<2)
+#define XSTORM_L5CM_AG_CONTEXT_EXISTS_IN_QM2_SHIFT 2
+#define XSTORM_L5CM_AG_CONTEXT_EXISTS_IN_QM3 (0x1<<3)
+#define XSTORM_L5CM_AG_CONTEXT_EXISTS_IN_QM3_SHIFT 3
+#define __XSTORM_L5CM_AG_CONTEXT_MORE_TO_SEND_EN (0x1<<4)
+#define __XSTORM_L5CM_AG_CONTEXT_MORE_TO_SEND_EN_SHIFT 4
+#define XSTORM_L5CM_AG_CONTEXT_NAGLE_EN (0x1<<5)
+#define XSTORM_L5CM_AG_CONTEXT_NAGLE_EN_SHIFT 5
+#define __XSTORM_L5CM_AG_CONTEXT_DQ_SPARE_FLAG (0x1<<6)
+#define __XSTORM_L5CM_AG_CONTEXT_DQ_SPARE_FLAG_SHIFT 6
+#define __XSTORM_L5CM_AG_CONTEXT_UNA_GT_NXT_EN (0x1<<7)
+#define __XSTORM_L5CM_AG_CONTEXT_UNA_GT_NXT_EN_SHIFT 7
+	u8 state;
+#elif defined(__LITTLE_ENDIAN)
+	u8 state;
+	u8 agg_vars1;
+#define __XSTORM_L5CM_AG_CONTEXT_EXISTS_IN_QM0 (0x1<<0)
+#define __XSTORM_L5CM_AG_CONTEXT_EXISTS_IN_QM0_SHIFT 0
+#define XSTORM_L5CM_AG_CONTEXT_EXISTS_IN_QM1 (0x1<<1)
+#define XSTORM_L5CM_AG_CONTEXT_EXISTS_IN_QM1_SHIFT 1
+#define XSTORM_L5CM_AG_CONTEXT_EXISTS_IN_QM2 (0x1<<2)
+#define XSTORM_L5CM_AG_CONTEXT_EXISTS_IN_QM2_SHIFT 2
+#define XSTORM_L5CM_AG_CONTEXT_EXISTS_IN_QM3 (0x1<<3)
+#define XSTORM_L5CM_AG_CONTEXT_EXISTS_IN_QM3_SHIFT 3
+#define __XSTORM_L5CM_AG_CONTEXT_MORE_TO_SEND_EN (0x1<<4)
+#define __XSTORM_L5CM_AG_CONTEXT_MORE_TO_SEND_EN_SHIFT 4
+#define XSTORM_L5CM_AG_CONTEXT_NAGLE_EN (0x1<<5)
+#define XSTORM_L5CM_AG_CONTEXT_NAGLE_EN_SHIFT 5
+#define __XSTORM_L5CM_AG_CONTEXT_DQ_SPARE_FLAG (0x1<<6)
+#define __XSTORM_L5CM_AG_CONTEXT_DQ_SPARE_FLAG_SHIFT 6
+#define __XSTORM_L5CM_AG_CONTEXT_UNA_GT_NXT_EN (0x1<<7)
+#define __XSTORM_L5CM_AG_CONTEXT_UNA_GT_NXT_EN_SHIFT 7
+	u16 agg_val1;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 cdu_reserved;
+	u8 __agg_vars4;
+	u8 agg_vars3;
+#define XSTORM_L5CM_AG_CONTEXT_PHYSICAL_QUEUE_NUM2 (0x3F<<0)
+#define XSTORM_L5CM_AG_CONTEXT_PHYSICAL_QUEUE_NUM2_SHIFT 0
+#define __XSTORM_L5CM_AG_CONTEXT_RX_TS_EN_CF (0x3<<6)
+#define __XSTORM_L5CM_AG_CONTEXT_RX_TS_EN_CF_SHIFT 6
+	u8 agg_vars2;
+#define XSTORM_L5CM_AG_CONTEXT_AUX4_CF (0x3<<0)
+#define XSTORM_L5CM_AG_CONTEXT_AUX4_CF_SHIFT 0
+#define __XSTORM_L5CM_AG_CONTEXT_DQ_SPARE_FLAG_EN (0x1<<2)
+#define __XSTORM_L5CM_AG_CONTEXT_DQ_SPARE_FLAG_EN_SHIFT 2
+#define __XSTORM_L5CM_AG_CONTEXT_AUX8_FLAG (0x1<<3)
+#define __XSTORM_L5CM_AG_CONTEXT_AUX8_FLAG_SHIFT 3
+#define __XSTORM_L5CM_AG_CONTEXT_AUX9_FLAG (0x1<<4)
+#define __XSTORM_L5CM_AG_CONTEXT_AUX9_FLAG_SHIFT 4
+#define XSTORM_L5CM_AG_CONTEXT_DECISION_RULE1 (0x3<<5)
+#define XSTORM_L5CM_AG_CONTEXT_DECISION_RULE1_SHIFT 5
+#define XSTORM_L5CM_AG_CONTEXT_AUX4_CF_EN (0x1<<7)
+#define XSTORM_L5CM_AG_CONTEXT_AUX4_CF_EN_SHIFT 7
+#elif defined(__LITTLE_ENDIAN)
+	u8 agg_vars2;
+#define XSTORM_L5CM_AG_CONTEXT_AUX4_CF (0x3<<0)
+#define XSTORM_L5CM_AG_CONTEXT_AUX4_CF_SHIFT 0
+#define __XSTORM_L5CM_AG_CONTEXT_DQ_SPARE_FLAG_EN (0x1<<2)
+#define __XSTORM_L5CM_AG_CONTEXT_DQ_SPARE_FLAG_EN_SHIFT 2
+#define __XSTORM_L5CM_AG_CONTEXT_AUX8_FLAG (0x1<<3)
+#define __XSTORM_L5CM_AG_CONTEXT_AUX8_FLAG_SHIFT 3
+#define __XSTORM_L5CM_AG_CONTEXT_AUX9_FLAG (0x1<<4)
+#define __XSTORM_L5CM_AG_CONTEXT_AUX9_FLAG_SHIFT 4
+#define XSTORM_L5CM_AG_CONTEXT_DECISION_RULE1 (0x3<<5)
+#define XSTORM_L5CM_AG_CONTEXT_DECISION_RULE1_SHIFT 5
+#define XSTORM_L5CM_AG_CONTEXT_AUX4_CF_EN (0x1<<7)
+#define XSTORM_L5CM_AG_CONTEXT_AUX4_CF_EN_SHIFT 7
+	u8 agg_vars3;
+#define XSTORM_L5CM_AG_CONTEXT_PHYSICAL_QUEUE_NUM2 (0x3F<<0)
+#define XSTORM_L5CM_AG_CONTEXT_PHYSICAL_QUEUE_NUM2_SHIFT 0
+#define __XSTORM_L5CM_AG_CONTEXT_RX_TS_EN_CF (0x3<<6)
+#define __XSTORM_L5CM_AG_CONTEXT_RX_TS_EN_CF_SHIFT 6
+	u8 __agg_vars4;
+	u8 cdu_reserved;
+#endif
+	u32 more_to_send;
+#if defined(__BIG_ENDIAN)
+	u16 agg_vars5;
+#define XSTORM_L5CM_AG_CONTEXT_DECISION_RULE5 (0x3<<0)
+#define XSTORM_L5CM_AG_CONTEXT_DECISION_RULE5_SHIFT 0
+#define XSTORM_L5CM_AG_CONTEXT_PHYSICAL_QUEUE_NUM0 (0x3F<<2)
+#define XSTORM_L5CM_AG_CONTEXT_PHYSICAL_QUEUE_NUM0_SHIFT 2
+#define XSTORM_L5CM_AG_CONTEXT_PHYSICAL_QUEUE_NUM1 (0x3F<<8)
+#define XSTORM_L5CM_AG_CONTEXT_PHYSICAL_QUEUE_NUM1_SHIFT 8
+#define XSTORM_L5CM_AG_CONTEXT_DECISION_RULE2 (0x3<<14)
+#define XSTORM_L5CM_AG_CONTEXT_DECISION_RULE2_SHIFT 14
+	u16 agg_val4_th;
+#elif defined(__LITTLE_ENDIAN)
+	u16 agg_val4_th;
+	u16 agg_vars5;
+#define XSTORM_L5CM_AG_CONTEXT_DECISION_RULE5 (0x3<<0)
+#define XSTORM_L5CM_AG_CONTEXT_DECISION_RULE5_SHIFT 0
+#define XSTORM_L5CM_AG_CONTEXT_PHYSICAL_QUEUE_NUM0 (0x3F<<2)
+#define XSTORM_L5CM_AG_CONTEXT_PHYSICAL_QUEUE_NUM0_SHIFT 2
+#define XSTORM_L5CM_AG_CONTEXT_PHYSICAL_QUEUE_NUM1 (0x3F<<8)
+#define XSTORM_L5CM_AG_CONTEXT_PHYSICAL_QUEUE_NUM1_SHIFT 8
+#define XSTORM_L5CM_AG_CONTEXT_DECISION_RULE2 (0x3<<14)
+#define XSTORM_L5CM_AG_CONTEXT_DECISION_RULE2_SHIFT 14
+#endif
+	struct xstorm_tcp_tcp_ag_context_section tcp;
+#if defined(__BIG_ENDIAN)
+	u16 agg_vars7;
+#define __XSTORM_L5CM_AG_CONTEXT_AGG_VAL11_DECISION_RULE (0x7<<0)
+#define __XSTORM_L5CM_AG_CONTEXT_AGG_VAL11_DECISION_RULE_SHIFT 0
+#define __XSTORM_L5CM_AG_CONTEXT_AUX13_FLAG (0x1<<3)
+#define __XSTORM_L5CM_AG_CONTEXT_AUX13_FLAG_SHIFT 3
+#define __XSTORM_L5CM_AG_CONTEXT_STORMS_SYNC_CF (0x3<<4)
+#define __XSTORM_L5CM_AG_CONTEXT_STORMS_SYNC_CF_SHIFT 4
+#define XSTORM_L5CM_AG_CONTEXT_DECISION_RULE3 (0x3<<6)
+#define XSTORM_L5CM_AG_CONTEXT_DECISION_RULE3_SHIFT 6
+#define XSTORM_L5CM_AG_CONTEXT_AUX1_CF (0x3<<8)
+#define XSTORM_L5CM_AG_CONTEXT_AUX1_CF_SHIFT 8
+#define __XSTORM_L5CM_AG_CONTEXT_COMPLETION_SEQ_DECISION_MASK (0x1<<10)
+#define __XSTORM_L5CM_AG_CONTEXT_COMPLETION_SEQ_DECISION_MASK_SHIFT 10
+#define __XSTORM_L5CM_AG_CONTEXT_AUX1_CF_EN (0x1<<11)
+#define __XSTORM_L5CM_AG_CONTEXT_AUX1_CF_EN_SHIFT 11
+#define __XSTORM_L5CM_AG_CONTEXT_AUX10_FLAG (0x1<<12)
+#define __XSTORM_L5CM_AG_CONTEXT_AUX10_FLAG_SHIFT 12
+#define __XSTORM_L5CM_AG_CONTEXT_AUX11_FLAG (0x1<<13)
+#define __XSTORM_L5CM_AG_CONTEXT_AUX11_FLAG_SHIFT 13
+#define __XSTORM_L5CM_AG_CONTEXT_AUX12_FLAG (0x1<<14)
+#define __XSTORM_L5CM_AG_CONTEXT_AUX12_FLAG_SHIFT 14
+#define __XSTORM_L5CM_AG_CONTEXT_RX_WND_SCL_EN (0x1<<15)
+#define __XSTORM_L5CM_AG_CONTEXT_RX_WND_SCL_EN_SHIFT 15
+	u8 agg_val3_th;
+	u8 agg_vars6;
+#define XSTORM_L5CM_AG_CONTEXT_DECISION_RULE6 (0x7<<0)
+#define XSTORM_L5CM_AG_CONTEXT_DECISION_RULE6_SHIFT 0
+#define XSTORM_L5CM_AG_CONTEXT_DECISION_RULE7 (0x7<<3)
+#define XSTORM_L5CM_AG_CONTEXT_DECISION_RULE7_SHIFT 3
+#define XSTORM_L5CM_AG_CONTEXT_DECISION_RULE4 (0x3<<6)
+#define XSTORM_L5CM_AG_CONTEXT_DECISION_RULE4_SHIFT 6
+#elif defined(__LITTLE_ENDIAN)
+	u8 agg_vars6;
+#define XSTORM_L5CM_AG_CONTEXT_DECISION_RULE6 (0x7<<0)
+#define XSTORM_L5CM_AG_CONTEXT_DECISION_RULE6_SHIFT 0
+#define XSTORM_L5CM_AG_CONTEXT_DECISION_RULE7 (0x7<<3)
+#define XSTORM_L5CM_AG_CONTEXT_DECISION_RULE7_SHIFT 3
+#define XSTORM_L5CM_AG_CONTEXT_DECISION_RULE4 (0x3<<6)
+#define XSTORM_L5CM_AG_CONTEXT_DECISION_RULE4_SHIFT 6
+	u8 agg_val3_th;
+	u16 agg_vars7;
+#define __XSTORM_L5CM_AG_CONTEXT_AGG_VAL11_DECISION_RULE (0x7<<0)
+#define __XSTORM_L5CM_AG_CONTEXT_AGG_VAL11_DECISION_RULE_SHIFT 0
+#define __XSTORM_L5CM_AG_CONTEXT_AUX13_FLAG (0x1<<3)
+#define __XSTORM_L5CM_AG_CONTEXT_AUX13_FLAG_SHIFT 3
+#define __XSTORM_L5CM_AG_CONTEXT_STORMS_SYNC_CF (0x3<<4)
+#define __XSTORM_L5CM_AG_CONTEXT_STORMS_SYNC_CF_SHIFT 4
+#define XSTORM_L5CM_AG_CONTEXT_DECISION_RULE3 (0x3<<6)
+#define XSTORM_L5CM_AG_CONTEXT_DECISION_RULE3_SHIFT 6
+#define XSTORM_L5CM_AG_CONTEXT_AUX1_CF (0x3<<8)
+#define XSTORM_L5CM_AG_CONTEXT_AUX1_CF_SHIFT 8
+#define __XSTORM_L5CM_AG_CONTEXT_COMPLETION_SEQ_DECISION_MASK (0x1<<10)
+#define __XSTORM_L5CM_AG_CONTEXT_COMPLETION_SEQ_DECISION_MASK_SHIFT 10
+#define __XSTORM_L5CM_AG_CONTEXT_AUX1_CF_EN (0x1<<11)
+#define __XSTORM_L5CM_AG_CONTEXT_AUX1_CF_EN_SHIFT 11
+#define __XSTORM_L5CM_AG_CONTEXT_AUX10_FLAG (0x1<<12)
+#define __XSTORM_L5CM_AG_CONTEXT_AUX10_FLAG_SHIFT 12
+#define __XSTORM_L5CM_AG_CONTEXT_AUX11_FLAG (0x1<<13)
+#define __XSTORM_L5CM_AG_CONTEXT_AUX11_FLAG_SHIFT 13
+#define __XSTORM_L5CM_AG_CONTEXT_AUX12_FLAG (0x1<<14)
+#define __XSTORM_L5CM_AG_CONTEXT_AUX12_FLAG_SHIFT 14
+#define __XSTORM_L5CM_AG_CONTEXT_RX_WND_SCL_EN (0x1<<15)
+#define __XSTORM_L5CM_AG_CONTEXT_RX_WND_SCL_EN_SHIFT 15
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 __agg_val11_th;
+	u16 __gen_data;
+#elif defined(__LITTLE_ENDIAN)
+	u16 __gen_data;
+	u16 __agg_val11_th;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 __reserved1;
+	u8 __agg_val6_th;
+	u16 __agg_val9;
+#elif defined(__LITTLE_ENDIAN)
+	u16 __agg_val9;
+	u8 __agg_val6_th;
+	u8 __reserved1;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 agg_val2_th;
+	u16 agg_val2;
+#elif defined(__LITTLE_ENDIAN)
+	u16 agg_val2;
+	u16 agg_val2_th;
+#endif
+	u32 agg_vars8;
+#define XSTORM_L5CM_AG_CONTEXT_AGG_MISC2 (0xFFFFFF<<0)
+#define XSTORM_L5CM_AG_CONTEXT_AGG_MISC2_SHIFT 0
+#define XSTORM_L5CM_AG_CONTEXT_AGG_MISC3 (0xFF<<24)
+#define XSTORM_L5CM_AG_CONTEXT_AGG_MISC3_SHIFT 24
+#if defined(__BIG_ENDIAN)
+	u16 agg_misc0;
+	u16 agg_val4;
+#elif defined(__LITTLE_ENDIAN)
+	u16 agg_val4;
+	u16 agg_misc0;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 agg_val3;
+	u8 agg_val6;
+	u8 agg_val5_th;
+	u8 agg_val5;
+#elif defined(__LITTLE_ENDIAN)
+	u8 agg_val5;
+	u8 agg_val5_th;
+	u8 agg_val6;
+	u8 agg_val3;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 __agg_misc1;
+	u16 agg_limit1;
+#elif defined(__LITTLE_ENDIAN)
+	u16 agg_limit1;
+	u16 __agg_misc1;
+#endif
+	u32 completion_seq;
+	u32 agg_misc4;
+	u32 rst_seq_num;
+};
+
+/*
+ * ABTS info $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_abts_info {
+	__le16 aborted_task_id;
+	__le16 reserved0;
+	__le32 reserved1;
+};
+
+
+/*
+ * Fixed size structure in order to plant it in Union structure $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_abts_rsp_union {
+	u8 r_ctl;
+	u8 rsrv[3];
+	__le32 abts_rsp_payload[7];
+};
+
+
+/*
+ * 4 regs size $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_bd_ctx {
+	__le32 buf_addr_hi;
+	__le32 buf_addr_lo;
+	__le16 buf_len;
+	__le16 rsrv0;
+	__le16 flags;
+	__le16 rsrv1;
+};
+
+
+/*
+ * FCoE cached sges context $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_cached_sge_ctx {
+	struct regpair cur_buf_addr;
+	__le16 cur_buf_rem;
+	__le16 second_buf_rem;
+	struct regpair second_buf_addr;
+};
+
+
+/*
+ * Cleanup info $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_cleanup_info {
+	__le16 cleaned_task_id;
+	__le16 rolled_tx_seq_cnt;
+	__le32 rolled_tx_data_offset;
+};
+
+
+/*
+ * Fcp RSP flags $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_fcp_rsp_flags {
+	u8 flags;
+#define FCOE_FCP_RSP_FLAGS_FCP_RSP_LEN_VALID (0x1<<0)
+#define FCOE_FCP_RSP_FLAGS_FCP_RSP_LEN_VALID_SHIFT 0
+#define FCOE_FCP_RSP_FLAGS_FCP_SNS_LEN_VALID (0x1<<1)
+#define FCOE_FCP_RSP_FLAGS_FCP_SNS_LEN_VALID_SHIFT 1
+#define FCOE_FCP_RSP_FLAGS_FCP_RESID_OVER (0x1<<2)
+#define FCOE_FCP_RSP_FLAGS_FCP_RESID_OVER_SHIFT 2
+#define FCOE_FCP_RSP_FLAGS_FCP_RESID_UNDER (0x1<<3)
+#define FCOE_FCP_RSP_FLAGS_FCP_RESID_UNDER_SHIFT 3
+#define FCOE_FCP_RSP_FLAGS_FCP_CONF_REQ (0x1<<4)
+#define FCOE_FCP_RSP_FLAGS_FCP_CONF_REQ_SHIFT 4
+#define FCOE_FCP_RSP_FLAGS_FCP_BIDI_FLAGS (0x7<<5)
+#define FCOE_FCP_RSP_FLAGS_FCP_BIDI_FLAGS_SHIFT 5
+};
+
+/*
+ * Fcp RSP payload $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_fcp_rsp_payload {
+	struct regpair reserved0;
+	__le32 fcp_resid;
+	u8 scsi_status_code;
+	struct fcoe_fcp_rsp_flags fcp_flags;
+	__le16 retry_delay_timer;
+	__le32 fcp_rsp_len;
+	__le32 fcp_sns_len;
+};
+
+/*
+ * Fixed size structure in order to plant it in Union structure $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_fcp_rsp_union {
+	struct fcoe_fcp_rsp_payload payload;
+	struct regpair reserved0;
+};
+
+/*
+ * FC header $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_fc_hdr {
+	u8 s_id[3];
+	u8 cs_ctl;
+	u8 d_id[3];
+	u8 r_ctl;
+	__le16 seq_cnt;
+	u8 df_ctl;
+	u8 seq_id;
+	u8 f_ctl[3];
+	u8 type;
+	__le32 parameters;
+	__le16 rx_id;
+	__le16 ox_id;
+};
+
+/*
+ * FC header union $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_mp_rsp_union {
+	struct fcoe_fc_hdr fc_hdr;
+	__le32 mp_payload_len;
+	__le32 rsrv;
+};
+
+/*
+ * Completion information $$KEEP_ENDIANNESS$$
+ */
+union fcoe_comp_flow_info {
+	struct fcoe_fcp_rsp_union fcp_rsp;
+	struct fcoe_abts_rsp_union abts_rsp;
+	struct fcoe_mp_rsp_union mp_rsp;
+	__le32 opaque[8];
+};
+
+
+/*
+ * External ABTS info $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_ext_abts_info {
+	__le32 rsrv0[6];
+	struct fcoe_abts_info ctx;
+};
+
+
+/*
+ * External cleanup info $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_ext_cleanup_info {
+	__le32 rsrv0[6];
+	struct fcoe_cleanup_info ctx;
+};
+
+
+/*
+ * Fcoe FW Tx sequence context $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_fw_tx_seq_ctx {
+	__le32 data_offset;
+	__le16 seq_cnt;
+	__le16 rsrv0;
+};
+
+/*
+ * Fcoe external FW Tx sequence context $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_ext_fw_tx_seq_ctx {
+	__le32 rsrv0[6];
+	struct fcoe_fw_tx_seq_ctx ctx;
+};
+
+
+/*
+ * FCoE multiple sges context $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_mul_sges_ctx {
+	struct regpair cur_sge_addr;
+	__le16 cur_sge_off;
+	u8 cur_sge_idx;
+	u8 sgl_size;
+};
+
+/*
+ * FCoE external multiple sges context $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_ext_mul_sges_ctx {
+	struct fcoe_mul_sges_ctx mul_sgl;
+	struct regpair rsrv0;
+};
+
+
+/*
+ * FCP CMD payload $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_fcp_cmd_payload {
+	__le32 opaque[8];
+};
+
+
+
+
+
+/*
+ * Fcp xfr rdy payload $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_fcp_xfr_rdy_payload {
+	__le32 burst_len;
+	__le32 data_ro;
+};
+
+
+/*
+ * FC frame $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_fc_frame {
+	struct fcoe_fc_hdr fc_hdr;
+	__le32 reserved0[2];
+};
+
+
+
+
+/*
+ * FCoE KCQ CQE parameters $$KEEP_ENDIANNESS$$
+ */
+union fcoe_kcqe_params {
+	__le32 reserved0[4];
+};
+
+/*
+ * FCoE KCQ CQE $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_kcqe {
+	__le32 fcoe_conn_id;
+	__le32 completion_status;
+	__le32 fcoe_conn_context_id;
+	union fcoe_kcqe_params params;
+	__le16 qe_self_seq;
+	u8 op_code;
+	u8 flags;
+#define FCOE_KCQE_RESERVED0 (0x7<<0)
+#define FCOE_KCQE_RESERVED0_SHIFT 0
+#define FCOE_KCQE_RAMROD_COMPLETION (0x1<<3)
+#define FCOE_KCQE_RAMROD_COMPLETION_SHIFT 3
+#define FCOE_KCQE_LAYER_CODE (0x7<<4)
+#define FCOE_KCQE_LAYER_CODE_SHIFT 4
+#define FCOE_KCQE_LINKED_WITH_NEXT (0x1<<7)
+#define FCOE_KCQE_LINKED_WITH_NEXT_SHIFT 7
+};
+
+
+
+/*
+ * FCoE KWQE header $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_kwqe_header {
+	u8 op_code;
+	u8 flags;
+#define FCOE_KWQE_HEADER_RESERVED0 (0xF<<0)
+#define FCOE_KWQE_HEADER_RESERVED0_SHIFT 0
+#define FCOE_KWQE_HEADER_LAYER_CODE (0x7<<4)
+#define FCOE_KWQE_HEADER_LAYER_CODE_SHIFT 4
+#define FCOE_KWQE_HEADER_RESERVED1 (0x1<<7)
+#define FCOE_KWQE_HEADER_RESERVED1_SHIFT 7
+};
+
+/*
+ * FCoE firmware init request 1 $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_kwqe_init1 {
+	__le16 num_tasks;
+	struct fcoe_kwqe_header hdr;
+	__le32 task_list_pbl_addr_lo;
+	__le32 task_list_pbl_addr_hi;
+	__le32 dummy_buffer_addr_lo;
+	__le32 dummy_buffer_addr_hi;
+	__le16 sq_num_wqes;
+	__le16 rq_num_wqes;
+	__le16 rq_buffer_log_size;
+	__le16 cq_num_wqes;
+	__le16 mtu;
+	u8 num_sessions_log;
+	u8 flags;
+#define FCOE_KWQE_INIT1_LOG_PAGE_SIZE (0xF<<0)
+#define FCOE_KWQE_INIT1_LOG_PAGE_SIZE_SHIFT 0
+#define FCOE_KWQE_INIT1_LOG_CACHED_PBES_PER_FUNC (0x7<<4)
+#define FCOE_KWQE_INIT1_LOG_CACHED_PBES_PER_FUNC_SHIFT 4
+#define FCOE_KWQE_INIT1_RESERVED1 (0x1<<7)
+#define FCOE_KWQE_INIT1_RESERVED1_SHIFT 7
+};
+
+/*
+ * FCoE firmware init request 2 $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_kwqe_init2 {
+	u8 hsi_major_version;
+	u8 hsi_minor_version;
+	struct fcoe_kwqe_header hdr;
+	__le32 hash_tbl_pbl_addr_lo;
+	__le32 hash_tbl_pbl_addr_hi;
+	__le32 t2_hash_tbl_addr_lo;
+	__le32 t2_hash_tbl_addr_hi;
+	__le32 t2_ptr_hash_tbl_addr_lo;
+	__le32 t2_ptr_hash_tbl_addr_hi;
+	__le32 free_list_count;
+};
+
+/*
+ * FCoE firmware init request 3 $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_kwqe_init3 {
+	__le16 reserved0;
+	struct fcoe_kwqe_header hdr;
+	__le32 error_bit_map_lo;
+	__le32 error_bit_map_hi;
+	u8 perf_config;
+	u8 reserved21[3];
+	__le32 reserved2[4];
+};
+
+/*
+ * FCoE connection offload request 1 $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_kwqe_conn_offload1 {
+	__le16 fcoe_conn_id;
+	struct fcoe_kwqe_header hdr;
+	__le32 sq_addr_lo;
+	__le32 sq_addr_hi;
+	__le32 rq_pbl_addr_lo;
+	__le32 rq_pbl_addr_hi;
+	__le32 rq_first_pbe_addr_lo;
+	__le32 rq_first_pbe_addr_hi;
+	__le16 rq_prod;
+	__le16 reserved0;
+};
+
+/*
+ * FCoE connection offload request 2 $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_kwqe_conn_offload2 {
+	__le16 tx_max_fc_pay_len;
+	struct fcoe_kwqe_header hdr;
+	__le32 cq_addr_lo;
+	__le32 cq_addr_hi;
+	__le32 xferq_addr_lo;
+	__le32 xferq_addr_hi;
+	__le32 conn_db_addr_lo;
+	__le32 conn_db_addr_hi;
+	__le32 reserved1;
+};
+
+/*
+ * FCoE connection offload request 3 $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_kwqe_conn_offload3 {
+	__le16 vlan_tag;
+#define FCOE_KWQE_CONN_OFFLOAD3_VLAN_ID (0xFFF<<0)
+#define FCOE_KWQE_CONN_OFFLOAD3_VLAN_ID_SHIFT 0
+#define FCOE_KWQE_CONN_OFFLOAD3_CFI (0x1<<12)
+#define FCOE_KWQE_CONN_OFFLOAD3_CFI_SHIFT 12
+#define FCOE_KWQE_CONN_OFFLOAD3_PRIORITY (0x7<<13)
+#define FCOE_KWQE_CONN_OFFLOAD3_PRIORITY_SHIFT 13
+	struct fcoe_kwqe_header hdr;
+	u8 s_id[3];
+	u8 tx_max_conc_seqs_c3;
+	u8 d_id[3];
+	u8 flags;
+#define FCOE_KWQE_CONN_OFFLOAD3_B_MUL_N_PORT_IDS (0x1<<0)
+#define FCOE_KWQE_CONN_OFFLOAD3_B_MUL_N_PORT_IDS_SHIFT 0
+#define FCOE_KWQE_CONN_OFFLOAD3_B_E_D_TOV_RES (0x1<<1)
+#define FCOE_KWQE_CONN_OFFLOAD3_B_E_D_TOV_RES_SHIFT 1
+#define FCOE_KWQE_CONN_OFFLOAD3_B_CONT_INCR_SEQ_CNT (0x1<<2)
+#define FCOE_KWQE_CONN_OFFLOAD3_B_CONT_INCR_SEQ_CNT_SHIFT 2
+#define FCOE_KWQE_CONN_OFFLOAD3_B_CONF_REQ (0x1<<3)
+#define FCOE_KWQE_CONN_OFFLOAD3_B_CONF_REQ_SHIFT 3
+#define FCOE_KWQE_CONN_OFFLOAD3_B_REC_VALID (0x1<<4)
+#define FCOE_KWQE_CONN_OFFLOAD3_B_REC_VALID_SHIFT 4
+#define FCOE_KWQE_CONN_OFFLOAD3_B_C2_VALID (0x1<<5)
+#define FCOE_KWQE_CONN_OFFLOAD3_B_C2_VALID_SHIFT 5
+#define FCOE_KWQE_CONN_OFFLOAD3_B_ACK_0 (0x1<<6)
+#define FCOE_KWQE_CONN_OFFLOAD3_B_ACK_0_SHIFT 6
+#define FCOE_KWQE_CONN_OFFLOAD3_B_VLAN_FLAG (0x1<<7)
+#define FCOE_KWQE_CONN_OFFLOAD3_B_VLAN_FLAG_SHIFT 7
+	__le32 reserved;
+	__le32 confq_first_pbe_addr_lo;
+	__le32 confq_first_pbe_addr_hi;
+	__le16 tx_total_conc_seqs;
+	__le16 rx_max_fc_pay_len;
+	__le16 rx_total_conc_seqs;
+	u8 rx_max_conc_seqs_c3;
+	u8 rx_open_seqs_exch_c3;
+};
+
+/*
+ * FCoE connection offload request 4 $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_kwqe_conn_offload4 {
+	u8 e_d_tov_timer_val;
+	u8 reserved2;
+	struct fcoe_kwqe_header hdr;
+	u8 src_mac_addr_lo[2];
+	u8 src_mac_addr_mid[2];
+	u8 src_mac_addr_hi[2];
+	u8 dst_mac_addr_hi[2];
+	u8 dst_mac_addr_lo[2];
+	u8 dst_mac_addr_mid[2];
+	__le32 lcq_addr_lo;
+	__le32 lcq_addr_hi;
+	__le32 confq_pbl_base_addr_lo;
+	__le32 confq_pbl_base_addr_hi;
+};
+
+/*
+ * FCoE connection enable request $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_kwqe_conn_enable_disable {
+	__le16 reserved0;
+	struct fcoe_kwqe_header hdr;
+	u8 src_mac_addr_lo[2];
+	u8 src_mac_addr_mid[2];
+	u8 src_mac_addr_hi[2];
+	u16 vlan_tag;
+#define FCOE_KWQE_CONN_ENABLE_DISABLE_VLAN_ID (0xFFF<<0)
+#define FCOE_KWQE_CONN_ENABLE_DISABLE_VLAN_ID_SHIFT 0
+#define FCOE_KWQE_CONN_ENABLE_DISABLE_CFI (0x1<<12)
+#define FCOE_KWQE_CONN_ENABLE_DISABLE_CFI_SHIFT 12
+#define FCOE_KWQE_CONN_ENABLE_DISABLE_PRIORITY (0x7<<13)
+#define FCOE_KWQE_CONN_ENABLE_DISABLE_PRIORITY_SHIFT 13
+	u8 dst_mac_addr_lo[2];
+	u8 dst_mac_addr_mid[2];
+	u8 dst_mac_addr_hi[2];
+	__le16 reserved1;
+	u8 s_id[3];
+	u8 vlan_flag;
+	u8 d_id[3];
+	u8 reserved3;
+	__le32 context_id;
+	__le32 conn_id;
+	__le32 reserved4;
+};
+
+/*
+ * FCoE connection destroy request $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_kwqe_conn_destroy {
+	__le16 reserved0;
+	struct fcoe_kwqe_header hdr;
+	__le32 context_id;
+	__le32 conn_id;
+	__le32 reserved1[5];
+};
+
+/*
+ * FCoe destroy request $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_kwqe_destroy {
+	__le16 reserved0;
+	struct fcoe_kwqe_header hdr;
+	__le32 reserved1[7];
+};
+
+/*
+ * FCoe statistics request $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_kwqe_stat {
+	__le16 reserved0;
+	struct fcoe_kwqe_header hdr;
+	__le32 stat_params_addr_lo;
+	__le32 stat_params_addr_hi;
+	__le32 reserved1[5];
+};
+
+/*
+ * FCoE KWQ WQE $$KEEP_ENDIANNESS$$
+ */
+union fcoe_kwqe {
+	struct fcoe_kwqe_init1 init1;
+	struct fcoe_kwqe_init2 init2;
+	struct fcoe_kwqe_init3 init3;
+	struct fcoe_kwqe_conn_offload1 conn_offload1;
+	struct fcoe_kwqe_conn_offload2 conn_offload2;
+	struct fcoe_kwqe_conn_offload3 conn_offload3;
+	struct fcoe_kwqe_conn_offload4 conn_offload4;
+	struct fcoe_kwqe_conn_enable_disable conn_enable_disable;
+	struct fcoe_kwqe_conn_destroy conn_destroy;
+	struct fcoe_kwqe_destroy destroy;
+	struct fcoe_kwqe_stat statistics;
+};
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*
+ * TX SGL context $$KEEP_ENDIANNESS$$
+ */
+union fcoe_sgl_union_ctx {
+	struct fcoe_cached_sge_ctx cached_sge;
+	struct fcoe_ext_mul_sges_ctx sgl;
+	__le32 opaque[5];
+};
+
+/*
+ * Data-In/ELS/BLS information $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_read_flow_info {
+	union fcoe_sgl_union_ctx sgl_ctx;
+	__le32 rsrv0[3];
+};
+
+
+/*
+ * Fcoe stat context $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_s_stat_ctx {
+	u8 flags;
+#define FCOE_S_STAT_CTX_ACTIVE (0x1<<0)
+#define FCOE_S_STAT_CTX_ACTIVE_SHIFT 0
+#define FCOE_S_STAT_CTX_ACK_ABORT_SEQ_COND (0x1<<1)
+#define FCOE_S_STAT_CTX_ACK_ABORT_SEQ_COND_SHIFT 1
+#define FCOE_S_STAT_CTX_ABTS_PERFORMED (0x1<<2)
+#define FCOE_S_STAT_CTX_ABTS_PERFORMED_SHIFT 2
+#define FCOE_S_STAT_CTX_SEQ_TIMEOUT (0x1<<3)
+#define FCOE_S_STAT_CTX_SEQ_TIMEOUT_SHIFT 3
+#define FCOE_S_STAT_CTX_P_RJT (0x1<<4)
+#define FCOE_S_STAT_CTX_P_RJT_SHIFT 4
+#define FCOE_S_STAT_CTX_ACK_EOFT (0x1<<5)
+#define FCOE_S_STAT_CTX_ACK_EOFT_SHIFT 5
+#define FCOE_S_STAT_CTX_RSRV1 (0x3<<6)
+#define FCOE_S_STAT_CTX_RSRV1_SHIFT 6
+};
+
+/*
+ * Fcoe rx seq context $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_rx_seq_ctx {
+	u8 seq_id;
+	struct fcoe_s_stat_ctx s_stat;
+	__le16 seq_cnt;
+	__le32 low_exp_ro;
+	__le32 high_exp_ro;
+};
+
+
+/*
+ * Fcoe rx_wr union context $$KEEP_ENDIANNESS$$
+ */
+union fcoe_rx_wr_union_ctx {
+	struct fcoe_read_flow_info read_info;
+	union fcoe_comp_flow_info comp_info;
+	__le32 opaque[8];
+};
+
+
+
+/*
+ * FCoE SQ element $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_sqe {
+	__le16 wqe;
+#define FCOE_SQE_TASK_ID (0x7FFF<<0)
+#define FCOE_SQE_TASK_ID_SHIFT 0
+#define FCOE_SQE_TOGGLE_BIT (0x1<<15)
+#define FCOE_SQE_TOGGLE_BIT_SHIFT 15
+};
+
+
+
+/*
+ * 14 regs $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_tce_tx_only {
+	union fcoe_sgl_union_ctx sgl_ctx;
+	__le32 rsrv0;
+};
+
+/*
+ * 32 bytes (8 regs) used for TX only purposes $$KEEP_ENDIANNESS$$
+ */
+union fcoe_tx_wr_rx_rd_union_ctx {
+	struct fcoe_fc_frame tx_frame;
+	struct fcoe_fcp_cmd_payload fcp_cmd;
+	struct fcoe_ext_cleanup_info cleanup;
+	struct fcoe_ext_abts_info abts;
+	struct fcoe_ext_fw_tx_seq_ctx tx_seq;
+	__le32 opaque[8];
+};
+
+/*
+ * tce_tx_wr_rx_rd_const $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_tce_tx_wr_rx_rd_const {
+	u8 init_flags;
+#define FCOE_TCE_TX_WR_RX_RD_CONST_TASK_TYPE (0x7<<0)
+#define FCOE_TCE_TX_WR_RX_RD_CONST_TASK_TYPE_SHIFT 0
+#define FCOE_TCE_TX_WR_RX_RD_CONST_DEV_TYPE (0x1<<3)
+#define FCOE_TCE_TX_WR_RX_RD_CONST_DEV_TYPE_SHIFT 3
+#define FCOE_TCE_TX_WR_RX_RD_CONST_CLASS_TYPE (0x1<<4)
+#define FCOE_TCE_TX_WR_RX_RD_CONST_CLASS_TYPE_SHIFT 4
+#define FCOE_TCE_TX_WR_RX_RD_CONST_CACHED_SGE (0x3<<5)
+#define FCOE_TCE_TX_WR_RX_RD_CONST_CACHED_SGE_SHIFT 5
+#define FCOE_TCE_TX_WR_RX_RD_CONST_SUPPORT_REC_TOV (0x1<<7)
+#define FCOE_TCE_TX_WR_RX_RD_CONST_SUPPORT_REC_TOV_SHIFT 7
+	u8 tx_flags;
+#define FCOE_TCE_TX_WR_RX_RD_CONST_TX_VALID (0x1<<0)
+#define FCOE_TCE_TX_WR_RX_RD_CONST_TX_VALID_SHIFT 0
+#define FCOE_TCE_TX_WR_RX_RD_CONST_TX_STATE (0xF<<1)
+#define FCOE_TCE_TX_WR_RX_RD_CONST_TX_STATE_SHIFT 1
+#define FCOE_TCE_TX_WR_RX_RD_CONST_RSRV1 (0x1<<5)
+#define FCOE_TCE_TX_WR_RX_RD_CONST_RSRV1_SHIFT 5
+#define FCOE_TCE_TX_WR_RX_RD_CONST_TX_SEQ_INIT (0x1<<6)
+#define FCOE_TCE_TX_WR_RX_RD_CONST_TX_SEQ_INIT_SHIFT 6
+#define FCOE_TCE_TX_WR_RX_RD_CONST_TX_COMP_TRNS (0x1<<7)
+#define FCOE_TCE_TX_WR_RX_RD_CONST_TX_COMP_TRNS_SHIFT 7
+	__le16 rsrv3;
+	__le32 verify_tx_seq;
+};
+
+/*
+ * tce_tx_wr_rx_rd $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_tce_tx_wr_rx_rd {
+	union fcoe_tx_wr_rx_rd_union_ctx union_ctx;
+	struct fcoe_tce_tx_wr_rx_rd_const const_ctx;
+};
+
+/*
+ * tce_rx_wr_tx_rd_const $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_tce_rx_wr_tx_rd_const {
+	__le32 data_2_trns;
+	__le32 init_flags;
+#define FCOE_TCE_RX_WR_TX_RD_CONST_CID (0xFFFFFF<<0)
+#define FCOE_TCE_RX_WR_TX_RD_CONST_CID_SHIFT 0
+#define FCOE_TCE_RX_WR_TX_RD_CONST_RSRV0 (0xFF<<24)
+#define FCOE_TCE_RX_WR_TX_RD_CONST_RSRV0_SHIFT 24
+};
+
+/*
+ * tce_rx_wr_tx_rd_var $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_tce_rx_wr_tx_rd_var {
+	__le16 rx_flags;
+#define FCOE_TCE_RX_WR_TX_RD_VAR_RSRV1 (0xF<<0)
+#define FCOE_TCE_RX_WR_TX_RD_VAR_RSRV1_SHIFT 0
+#define FCOE_TCE_RX_WR_TX_RD_VAR_NUM_RQ_WQE (0x7<<4)
+#define FCOE_TCE_RX_WR_TX_RD_VAR_NUM_RQ_WQE_SHIFT 4
+#define FCOE_TCE_RX_WR_TX_RD_VAR_CONF_REQ (0x1<<7)
+#define FCOE_TCE_RX_WR_TX_RD_VAR_CONF_REQ_SHIFT 7
+#define FCOE_TCE_RX_WR_TX_RD_VAR_RX_STATE (0xF<<8)
+#define FCOE_TCE_RX_WR_TX_RD_VAR_RX_STATE_SHIFT 8
+#define FCOE_TCE_RX_WR_TX_RD_VAR_EXP_FIRST_FRAME (0x1<<12)
+#define FCOE_TCE_RX_WR_TX_RD_VAR_EXP_FIRST_FRAME_SHIFT 12
+#define FCOE_TCE_RX_WR_TX_RD_VAR_RX_SEQ_INIT (0x1<<13)
+#define FCOE_TCE_RX_WR_TX_RD_VAR_RX_SEQ_INIT_SHIFT 13
+#define FCOE_TCE_RX_WR_TX_RD_VAR_RSRV2 (0x1<<14)
+#define FCOE_TCE_RX_WR_TX_RD_VAR_RSRV2_SHIFT 14
+#define FCOE_TCE_RX_WR_TX_RD_VAR_RX_VALID (0x1<<15)
+#define FCOE_TCE_RX_WR_TX_RD_VAR_RX_VALID_SHIFT 15
+	__le16 rx_id;
+	struct fcoe_fcp_xfr_rdy_payload fcp_xfr_rdy;
+};
+
+/*
+ * tce_rx_wr_tx_rd $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_tce_rx_wr_tx_rd {
+	struct fcoe_tce_rx_wr_tx_rd_const const_ctx;
+	struct fcoe_tce_rx_wr_tx_rd_var var_ctx;
+};
+
+/*
+ * tce_rx_only $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_tce_rx_only {
+	struct fcoe_rx_seq_ctx rx_seq_ctx;
+	union fcoe_rx_wr_union_ctx union_ctx;
+};
+
+/*
+ * task_ctx_entry $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_task_ctx_entry {
+	struct fcoe_tce_tx_only txwr_only;
+	struct fcoe_tce_tx_wr_rx_rd txwr_rxrd;
+	struct fcoe_tce_rx_wr_tx_rd rxwr_txrd;
+	struct fcoe_tce_rx_only rxwr_only;
+};
+
+
+
+
+
+
+
+
+
+
+/*
+ * FCoE XFRQ element $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_xfrqe {
+	__le16 wqe;
+#define FCOE_XFRQE_TASK_ID (0x7FFF<<0)
+#define FCOE_XFRQE_TASK_ID_SHIFT 0
+#define FCOE_XFRQE_TOGGLE_BIT (0x1<<15)
+#define FCOE_XFRQE_TOGGLE_BIT_SHIFT 15
+};
+
+
+/*
+ * Cached SGEs $$KEEP_ENDIANNESS$$
+ */
+struct common_fcoe_sgl {
+	struct fcoe_bd_ctx sge[3];
+};
+
+
+/*
+ * FCoE SQ\XFRQ element
+ */
+struct fcoe_cached_wqe {
+	struct fcoe_sqe sqe;
+	struct fcoe_xfrqe xfrqe;
+};
+
+
+/*
+ * FCoE connection enable\disable params passed by driver to FW in FCoE enable ramrod $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_conn_enable_disable_ramrod_params {
+	struct fcoe_kwqe_conn_enable_disable enable_disable_kwqe;
+};
+
+
+/*
+ * FCoE connection offload params passed by driver to FW in FCoE offload ramrod $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_conn_offload_ramrod_params {
+	struct fcoe_kwqe_conn_offload1 offload_kwqe1;
+	struct fcoe_kwqe_conn_offload2 offload_kwqe2;
+	struct fcoe_kwqe_conn_offload3 offload_kwqe3;
+	struct fcoe_kwqe_conn_offload4 offload_kwqe4;
+};
+
+
+struct ustorm_fcoe_mng_ctx {
+#if defined(__BIG_ENDIAN)
+	u8 mid_seq_proc_flag;
+	u8 tce_in_cam_flag;
+	u8 tce_on_ior_flag;
+	u8 en_cached_tce_flag;
+#elif defined(__LITTLE_ENDIAN)
+	u8 en_cached_tce_flag;
+	u8 tce_on_ior_flag;
+	u8 tce_in_cam_flag;
+	u8 mid_seq_proc_flag;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 tce_cam_addr;
+	u8 cached_conn_flag;
+	u16 rsrv0;
+#elif defined(__LITTLE_ENDIAN)
+	u16 rsrv0;
+	u8 cached_conn_flag;
+	u8 tce_cam_addr;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 dma_tce_ram_addr;
+	u16 tce_ram_addr;
+#elif defined(__LITTLE_ENDIAN)
+	u16 tce_ram_addr;
+	u16 dma_tce_ram_addr;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 ox_id;
+	u16 wr_done_seq;
+#elif defined(__LITTLE_ENDIAN)
+	u16 wr_done_seq;
+	u16 ox_id;
+#endif
+	struct regpair task_addr;
+};
+
+/*
+ * Parameters initialized during offloaded according to FLOGI/PLOGI/PRLI and used in FCoE context section
+ */
+struct ustorm_fcoe_params {
+#if defined(__BIG_ENDIAN)
+	u16 fcoe_conn_id;
+	u16 flags;
+#define USTORM_FCOE_PARAMS_B_MUL_N_PORT_IDS (0x1<<0)
+#define USTORM_FCOE_PARAMS_B_MUL_N_PORT_IDS_SHIFT 0
+#define USTORM_FCOE_PARAMS_B_E_D_TOV_RES (0x1<<1)
+#define USTORM_FCOE_PARAMS_B_E_D_TOV_RES_SHIFT 1
+#define USTORM_FCOE_PARAMS_B_CONT_INCR_SEQ_CNT (0x1<<2)
+#define USTORM_FCOE_PARAMS_B_CONT_INCR_SEQ_CNT_SHIFT 2
+#define USTORM_FCOE_PARAMS_B_CONF_REQ (0x1<<3)
+#define USTORM_FCOE_PARAMS_B_CONF_REQ_SHIFT 3
+#define USTORM_FCOE_PARAMS_B_REC_VALID (0x1<<4)
+#define USTORM_FCOE_PARAMS_B_REC_VALID_SHIFT 4
+#define USTORM_FCOE_PARAMS_B_CQ_TOGGLE_BIT (0x1<<5)
+#define USTORM_FCOE_PARAMS_B_CQ_TOGGLE_BIT_SHIFT 5
+#define USTORM_FCOE_PARAMS_B_XFRQ_TOGGLE_BIT (0x1<<6)
+#define USTORM_FCOE_PARAMS_B_XFRQ_TOGGLE_BIT_SHIFT 6
+#define USTORM_FCOE_PARAMS_RSRV0 (0x1FF<<7)
+#define USTORM_FCOE_PARAMS_RSRV0_SHIFT 7
+#elif defined(__LITTLE_ENDIAN)
+	u16 flags;
+#define USTORM_FCOE_PARAMS_B_MUL_N_PORT_IDS (0x1<<0)
+#define USTORM_FCOE_PARAMS_B_MUL_N_PORT_IDS_SHIFT 0
+#define USTORM_FCOE_PARAMS_B_E_D_TOV_RES (0x1<<1)
+#define USTORM_FCOE_PARAMS_B_E_D_TOV_RES_SHIFT 1
+#define USTORM_FCOE_PARAMS_B_CONT_INCR_SEQ_CNT (0x1<<2)
+#define USTORM_FCOE_PARAMS_B_CONT_INCR_SEQ_CNT_SHIFT 2
+#define USTORM_FCOE_PARAMS_B_CONF_REQ (0x1<<3)
+#define USTORM_FCOE_PARAMS_B_CONF_REQ_SHIFT 3
+#define USTORM_FCOE_PARAMS_B_REC_VALID (0x1<<4)
+#define USTORM_FCOE_PARAMS_B_REC_VALID_SHIFT 4
+#define USTORM_FCOE_PARAMS_B_CQ_TOGGLE_BIT (0x1<<5)
+#define USTORM_FCOE_PARAMS_B_CQ_TOGGLE_BIT_SHIFT 5
+#define USTORM_FCOE_PARAMS_B_XFRQ_TOGGLE_BIT (0x1<<6)
+#define USTORM_FCOE_PARAMS_B_XFRQ_TOGGLE_BIT_SHIFT 6
+#define USTORM_FCOE_PARAMS_RSRV0 (0x1FF<<7)
+#define USTORM_FCOE_PARAMS_RSRV0_SHIFT 7
+	u16 fcoe_conn_id;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 hc_csdm_byte_en;
+	u8 func_id;
+	u8 port_id;
+	u8 vnic_id;
+#elif defined(__LITTLE_ENDIAN)
+	u8 vnic_id;
+	u8 port_id;
+	u8 func_id;
+	u8 hc_csdm_byte_en;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 rx_total_conc_seqs;
+	u16 rx_max_fc_pay_len;
+#elif defined(__LITTLE_ENDIAN)
+	u16 rx_max_fc_pay_len;
+	u16 rx_total_conc_seqs;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 task_pbe_idx_off;
+	u8 task_in_page_log_size;
+	u16 rx_max_conc_seqs;
+#elif defined(__LITTLE_ENDIAN)
+	u16 rx_max_conc_seqs;
+	u8 task_in_page_log_size;
+	u8 task_pbe_idx_off;
+#endif
+};
+
+/*
+ * FCoE 16-bits index structure
+ */
+struct fcoe_idx16_fields {
+	u16 fields;
+#define FCOE_IDX16_FIELDS_IDX (0x7FFF<<0)
+#define FCOE_IDX16_FIELDS_IDX_SHIFT 0
+#define FCOE_IDX16_FIELDS_MSB (0x1<<15)
+#define FCOE_IDX16_FIELDS_MSB_SHIFT 15
+};
+
+/*
+ * FCoE 16-bits index union
+ */
+union fcoe_idx16_field_union {
+	struct fcoe_idx16_fields fields;
+	u16 val;
+};
+
+/*
+ * Parameters required for placement according to SGL
+ */
+struct ustorm_fcoe_data_place_mng {
+#if defined(__BIG_ENDIAN)
+	u16 sge_off;
+	u8 num_sges;
+	u8 sge_idx;
+#elif defined(__LITTLE_ENDIAN)
+	u8 sge_idx;
+	u8 num_sges;
+	u16 sge_off;
+#endif
+};
+
+/*
+ * Parameters required for placement according to SGL
+ */
+struct ustorm_fcoe_data_place {
+	struct ustorm_fcoe_data_place_mng cached_mng;
+	struct fcoe_bd_ctx cached_sge[2];
+};
+
+/*
+ * TX processing shall write and RX processing shall read from this section
+ */
+union fcoe_u_tce_tx_wr_rx_rd_union {
+	struct fcoe_abts_info abts;
+	struct fcoe_cleanup_info cleanup;
+	struct fcoe_fw_tx_seq_ctx tx_seq_ctx;
+	u32 opaque[2];
+};
+
+/*
+ * TX processing shall write and RX processing shall read from this section
+ */
+struct fcoe_u_tce_tx_wr_rx_rd {
+	union fcoe_u_tce_tx_wr_rx_rd_union union_ctx;
+	struct fcoe_tce_tx_wr_rx_rd_const const_ctx;
+};
+
+struct ustorm_fcoe_tce {
+	struct fcoe_u_tce_tx_wr_rx_rd txwr_rxrd;
+	struct fcoe_tce_rx_wr_tx_rd rxwr_txrd;
+	struct fcoe_tce_rx_only rxwr;
+};
+
+struct ustorm_fcoe_cache_ctx {
+	u32 rsrv0;
+	struct ustorm_fcoe_data_place data_place;
+	struct ustorm_fcoe_tce tce;
+};
+
+/*
+ * Ustorm FCoE Storm Context
+ */
+struct ustorm_fcoe_st_context {
+	struct ustorm_fcoe_mng_ctx mng_ctx;
+	struct ustorm_fcoe_params fcoe_params;
+	struct regpair cq_base_addr;
+	struct regpair rq_pbl_base;
+	struct regpair rq_cur_page_addr;
+	struct regpair confq_pbl_base_addr;
+	struct regpair conn_db_base;
+	struct regpair xfrq_base_addr;
+	struct regpair lcq_base_addr;
+#if defined(__BIG_ENDIAN)
+	union fcoe_idx16_field_union rq_cons;
+	union fcoe_idx16_field_union rq_prod;
+#elif defined(__LITTLE_ENDIAN)
+	union fcoe_idx16_field_union rq_prod;
+	union fcoe_idx16_field_union rq_cons;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 xfrq_prod;
+	u16 cq_cons;
+#elif defined(__LITTLE_ENDIAN)
+	u16 cq_cons;
+	u16 xfrq_prod;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 lcq_cons;
+	u16 hc_cram_address;
+#elif defined(__LITTLE_ENDIAN)
+	u16 hc_cram_address;
+	u16 lcq_cons;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 sq_xfrq_lcq_confq_size;
+	u16 confq_prod;
+#elif defined(__LITTLE_ENDIAN)
+	u16 confq_prod;
+	u16 sq_xfrq_lcq_confq_size;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 hc_csdm_agg_int;
+	u8 rsrv2;
+	u8 available_rqes;
+	u8 sp_q_flush_cnt;
+#elif defined(__LITTLE_ENDIAN)
+	u8 sp_q_flush_cnt;
+	u8 available_rqes;
+	u8 rsrv2;
+	u8 hc_csdm_agg_int;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 num_pend_tasks;
+	u16 pbf_ack_ram_addr;
+#elif defined(__LITTLE_ENDIAN)
+	u16 pbf_ack_ram_addr;
+	u16 num_pend_tasks;
+#endif
+	struct ustorm_fcoe_cache_ctx cache_ctx;
+};
+
+/*
+ * The FCoE non-aggregative context of Tstorm
+ */
+struct tstorm_fcoe_st_context {
+	struct regpair reserved0;
+	struct regpair reserved1;
+};
+
+/*
+ * Ethernet context section
+ */
+struct xstorm_fcoe_eth_context_section {
+#if defined(__BIG_ENDIAN)
+	u8 remote_addr_4;
+	u8 remote_addr_5;
+	u8 local_addr_0;
+	u8 local_addr_1;
+#elif defined(__LITTLE_ENDIAN)
+	u8 local_addr_1;
+	u8 local_addr_0;
+	u8 remote_addr_5;
+	u8 remote_addr_4;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 remote_addr_0;
+	u8 remote_addr_1;
+	u8 remote_addr_2;
+	u8 remote_addr_3;
+#elif defined(__LITTLE_ENDIAN)
+	u8 remote_addr_3;
+	u8 remote_addr_2;
+	u8 remote_addr_1;
+	u8 remote_addr_0;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 reserved_vlan_type;
+	u16 params;
+#define XSTORM_FCOE_ETH_CONTEXT_SECTION_VLAN_ID (0xFFF<<0)
+#define XSTORM_FCOE_ETH_CONTEXT_SECTION_VLAN_ID_SHIFT 0
+#define XSTORM_FCOE_ETH_CONTEXT_SECTION_CFI (0x1<<12)
+#define XSTORM_FCOE_ETH_CONTEXT_SECTION_CFI_SHIFT 12
+#define XSTORM_FCOE_ETH_CONTEXT_SECTION_PRIORITY (0x7<<13)
+#define XSTORM_FCOE_ETH_CONTEXT_SECTION_PRIORITY_SHIFT 13
+#elif defined(__LITTLE_ENDIAN)
+	u16 params;
+#define XSTORM_FCOE_ETH_CONTEXT_SECTION_VLAN_ID (0xFFF<<0)
+#define XSTORM_FCOE_ETH_CONTEXT_SECTION_VLAN_ID_SHIFT 0
+#define XSTORM_FCOE_ETH_CONTEXT_SECTION_CFI (0x1<<12)
+#define XSTORM_FCOE_ETH_CONTEXT_SECTION_CFI_SHIFT 12
+#define XSTORM_FCOE_ETH_CONTEXT_SECTION_PRIORITY (0x7<<13)
+#define XSTORM_FCOE_ETH_CONTEXT_SECTION_PRIORITY_SHIFT 13
+	u16 reserved_vlan_type;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 local_addr_2;
+	u8 local_addr_3;
+	u8 local_addr_4;
+	u8 local_addr_5;
+#elif defined(__LITTLE_ENDIAN)
+	u8 local_addr_5;
+	u8 local_addr_4;
+	u8 local_addr_3;
+	u8 local_addr_2;
+#endif
+};
+
+/*
+ * Flags used in FCoE context section - 1 byte
+ */
+struct xstorm_fcoe_context_flags {
+	u8 flags;
+#define XSTORM_FCOE_CONTEXT_FLAGS_B_PROC_Q (0x3<<0)
+#define XSTORM_FCOE_CONTEXT_FLAGS_B_PROC_Q_SHIFT 0
+#define XSTORM_FCOE_CONTEXT_FLAGS_B_MID_SEQ (0x1<<2)
+#define XSTORM_FCOE_CONTEXT_FLAGS_B_MID_SEQ_SHIFT 2
+#define XSTORM_FCOE_CONTEXT_FLAGS_B_BLOCK_SQ (0x1<<3)
+#define XSTORM_FCOE_CONTEXT_FLAGS_B_BLOCK_SQ_SHIFT 3
+#define XSTORM_FCOE_CONTEXT_FLAGS_B_REC_SUPPORT (0x1<<4)
+#define XSTORM_FCOE_CONTEXT_FLAGS_B_REC_SUPPORT_SHIFT 4
+#define XSTORM_FCOE_CONTEXT_FLAGS_B_SQ_TOGGLE (0x1<<5)
+#define XSTORM_FCOE_CONTEXT_FLAGS_B_SQ_TOGGLE_SHIFT 5
+#define XSTORM_FCOE_CONTEXT_FLAGS_B_XFRQ_TOGGLE (0x1<<6)
+#define XSTORM_FCOE_CONTEXT_FLAGS_B_XFRQ_TOGGLE_SHIFT 6
+#define XSTORM_FCOE_CONTEXT_FLAGS_B_VNTAG_VLAN (0x1<<7)
+#define XSTORM_FCOE_CONTEXT_FLAGS_B_VNTAG_VLAN_SHIFT 7
+};
+
+struct xstorm_fcoe_tce {
+	struct fcoe_tce_tx_only txwr;
+	struct fcoe_tce_tx_wr_rx_rd txwr_rxrd;
+};
+
+/*
+ * FCP_DATA parameters required for transmission
+ */
+struct xstorm_fcoe_fcp_data {
+	u32 io_rem;
+#if defined(__BIG_ENDIAN)
+	u16 cached_sge_off;
+	u8 cached_num_sges;
+	u8 cached_sge_idx;
+#elif defined(__LITTLE_ENDIAN)
+	u8 cached_sge_idx;
+	u8 cached_num_sges;
+	u16 cached_sge_off;
+#endif
+	u32 buf_addr_hi_0;
+	u32 buf_addr_lo_0;
+#if defined(__BIG_ENDIAN)
+	u16 num_of_pending_tasks;
+	u16 buf_len_0;
+#elif defined(__LITTLE_ENDIAN)
+	u16 buf_len_0;
+	u16 num_of_pending_tasks;
+#endif
+	u32 buf_addr_hi_1;
+	u32 buf_addr_lo_1;
+#if defined(__BIG_ENDIAN)
+	u16 task_pbe_idx_off;
+	u16 buf_len_1;
+#elif defined(__LITTLE_ENDIAN)
+	u16 buf_len_1;
+	u16 task_pbe_idx_off;
+#endif
+	u32 buf_addr_hi_2;
+	u32 buf_addr_lo_2;
+#if defined(__BIG_ENDIAN)
+	u16 ox_id;
+	u16 buf_len_2;
+#elif defined(__LITTLE_ENDIAN)
+	u16 buf_len_2;
+	u16 ox_id;
+#endif
+};
+
+/*
+ * vlan configuration
+ */
+struct xstorm_fcoe_vlan_conf {
+	u8 vlan_conf;
+#define XSTORM_FCOE_VLAN_CONF_PRIORITY (0x7<<0)
+#define XSTORM_FCOE_VLAN_CONF_PRIORITY_SHIFT 0
+#define XSTORM_FCOE_VLAN_CONF_INNER_VLAN_FLAG (0x1<<3)
+#define XSTORM_FCOE_VLAN_CONF_INNER_VLAN_FLAG_SHIFT 3
+#define XSTORM_FCOE_VLAN_CONF_RESERVED (0xF<<4)
+#define XSTORM_FCOE_VLAN_CONF_RESERVED_SHIFT 4
+};
+
+/*
+ * FCoE 16-bits vlan structure
+ */
+struct fcoe_vlan_fields {
+	u16 fields;
+#define FCOE_VLAN_FIELDS_VID (0xFFF<<0)
+#define FCOE_VLAN_FIELDS_VID_SHIFT 0
+#define FCOE_VLAN_FIELDS_CLI (0x1<<12)
+#define FCOE_VLAN_FIELDS_CLI_SHIFT 12
+#define FCOE_VLAN_FIELDS_PRI (0x7<<13)
+#define FCOE_VLAN_FIELDS_PRI_SHIFT 13
+};
+
+/*
+ * FCoE 16-bits vlan union
+ */
+union fcoe_vlan_field_union {
+	struct fcoe_vlan_fields fields;
+	u16 val;
+};
+
+/*
+ * FCoE 16-bits vlan, vif union
+ */
+union fcoe_vlan_vif_field_union {
+	union fcoe_vlan_field_union vlan;
+	u16 vif;
+};
+
+/*
+ * FCoE context section
+ */
+struct xstorm_fcoe_context_section {
+#if defined(__BIG_ENDIAN)
+	u8 cs_ctl;
+	u8 s_id[3];
+#elif defined(__LITTLE_ENDIAN)
+	u8 s_id[3];
+	u8 cs_ctl;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 rctl;
+	u8 d_id[3];
+#elif defined(__LITTLE_ENDIAN)
+	u8 d_id[3];
+	u8 rctl;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 sq_xfrq_lcq_confq_size;
+	u16 tx_max_fc_pay_len;
+#elif defined(__LITTLE_ENDIAN)
+	u16 tx_max_fc_pay_len;
+	u16 sq_xfrq_lcq_confq_size;
+#endif
+	u32 lcq_prod;
+#if defined(__BIG_ENDIAN)
+	u8 port_id;
+	u8 func_id;
+	u8 seq_id;
+	struct xstorm_fcoe_context_flags tx_flags;
+#elif defined(__LITTLE_ENDIAN)
+	struct xstorm_fcoe_context_flags tx_flags;
+	u8 seq_id;
+	u8 func_id;
+	u8 port_id;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 mtu;
+	u8 func_mode;
+	u8 vnic_id;
+#elif defined(__LITTLE_ENDIAN)
+	u8 vnic_id;
+	u8 func_mode;
+	u16 mtu;
+#endif
+	struct regpair confq_curr_page_addr;
+	struct fcoe_cached_wqe cached_wqe[8];
+	struct regpair lcq_base_addr;
+	struct xstorm_fcoe_tce tce;
+	struct xstorm_fcoe_fcp_data fcp_data;
+#if defined(__BIG_ENDIAN)
+	u8 tx_max_conc_seqs_c3;
+	u8 vlan_flag;
+	u8 dcb_val;
+	u8 data_pb_cmd_size;
+#elif defined(__LITTLE_ENDIAN)
+	u8 data_pb_cmd_size;
+	u8 dcb_val;
+	u8 vlan_flag;
+	u8 tx_max_conc_seqs_c3;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 fcoe_tx_stat_params_ram_addr;
+	u16 fcoe_tx_fc_seq_ram_addr;
+#elif defined(__LITTLE_ENDIAN)
+	u16 fcoe_tx_fc_seq_ram_addr;
+	u16 fcoe_tx_stat_params_ram_addr;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 fcp_cmd_line_credit;
+	u8 eth_hdr_size;
+	u16 pbf_addr;
+#elif defined(__LITTLE_ENDIAN)
+	u16 pbf_addr;
+	u8 eth_hdr_size;
+	u8 fcp_cmd_line_credit;
+#endif
+#if defined(__BIG_ENDIAN)
+	union fcoe_vlan_vif_field_union multi_func_val;
+	u8 page_log_size;
+	struct xstorm_fcoe_vlan_conf orig_vlan_conf;
+#elif defined(__LITTLE_ENDIAN)
+	struct xstorm_fcoe_vlan_conf orig_vlan_conf;
+	u8 page_log_size;
+	union fcoe_vlan_vif_field_union multi_func_val;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 fcp_cmd_frame_size;
+	u16 pbf_addr_ff;
+#elif defined(__LITTLE_ENDIAN)
+	u16 pbf_addr_ff;
+	u16 fcp_cmd_frame_size;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 vlan_num;
+	u8 cos;
+	u8 cache_xfrq_cons;
+	u8 cache_sq_cons;
+#elif defined(__LITTLE_ENDIAN)
+	u8 cache_sq_cons;
+	u8 cache_xfrq_cons;
+	u8 cos;
+	u8 vlan_num;
+#endif
+	u32 verify_tx_seq;
+};
+
+/*
+ * Xstorm FCoE Storm Context
+ */
+struct xstorm_fcoe_st_context {
+	struct xstorm_fcoe_eth_context_section eth;
+	struct xstorm_fcoe_context_section fcoe;
+};
+
+/*
+ * Fcoe connection context 
+ */
+struct fcoe_context {
+	struct ustorm_fcoe_st_context ustorm_st_context;
+	struct tstorm_fcoe_st_context tstorm_st_context;
+	struct xstorm_fcoe_ag_context xstorm_ag_context;
+	struct tstorm_fcoe_ag_context tstorm_ag_context;
+	struct ustorm_fcoe_ag_context ustorm_ag_context;
+	struct timers_block_context timers_context;
+	struct xstorm_fcoe_st_context xstorm_st_context;
+};
+
+
+
+
+/*
+ * FCoE init params passed by driver to FW in FCoE init ramrod $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_init_ramrod_params {
+	struct fcoe_kwqe_init1 init_kwqe1;
+	struct fcoe_kwqe_init2 init_kwqe2;
+	struct fcoe_kwqe_init3 init_kwqe3;
+	struct regpair eq_pbl_base;
+	__le32 eq_pbl_size;
+	__le32 reserved2;
+	__le16 eq_prod;
+	__le16 sb_num;
+	u8 sb_id;
+	u8 reserved0;
+	__le16 reserved1;
+};
+
+
+/*
+ * FCoE statistics params buffer passed by driver to FW in FCoE statistics ramrod $$KEEP_ENDIANNESS$$
+ */
+struct fcoe_stat_ramrod_params {
+	struct fcoe_kwqe_stat stat_kwqe;
+};
+
+/*
+ * CQ DB CQ producer and pending completion counter
+ */
+struct iscsi_cq_db_prod_pnd_cmpltn_cnt {
+#if defined(__BIG_ENDIAN)
+	u16 cntr;
+	u16 prod;
+#elif defined(__LITTLE_ENDIAN)
+	u16 prod;
+	u16 cntr;
+#endif
+};
+
+/*
+ * CQ DB pending completion ITT array
+ */
+struct iscsi_cq_db_prod_pnd_cmpltn_cnt_arr {
+	struct iscsi_cq_db_prod_pnd_cmpltn_cnt prod_pend_comp[8];
+};
+
+/*
+ * Cstorm CQ sequence to notify array, updated by driver
+ */
+struct iscsi_cq_db_sqn_2_notify_arr {
+	u16 sqn[8];
+};
+
+/*
+ * Cstorm iSCSI Storm Context
+ */
+struct cstorm_iscsi_st_context {
+	struct iscsi_cq_db_prod_pnd_cmpltn_cnt_arr cq_c_prod_pend_comp_ctr_arr;
+	struct iscsi_cq_db_sqn_2_notify_arr cq_c_prod_sqn_arr;
+	struct iscsi_cq_db_sqn_2_notify_arr cq_c_sqn_2_notify_arr;
+	struct regpair hq_pbl_base;
+	struct regpair hq_curr_pbe;
+	struct regpair task_pbl_base;
+	struct regpair cq_db_base;
+#if defined(__BIG_ENDIAN)
+	u16 hq_bd_itt;
+	u16 iscsi_conn_id;
+#elif defined(__LITTLE_ENDIAN)
+	u16 iscsi_conn_id;
+	u16 hq_bd_itt;
+#endif
+	u32 hq_bd_data_segment_len;
+	u32 hq_bd_buffer_offset;
+#if defined(__BIG_ENDIAN)
+	u8 rsrv;
+	u8 cq_proc_en_bit_map;
+	u8 cq_pend_comp_itt_valid_bit_map;
+	u8 hq_bd_opcode;
+#elif defined(__LITTLE_ENDIAN)
+	u8 hq_bd_opcode;
+	u8 cq_pend_comp_itt_valid_bit_map;
+	u8 cq_proc_en_bit_map;
+	u8 rsrv;
+#endif
+	u32 hq_tcp_seq;
+#if defined(__BIG_ENDIAN)
+	u16 flags;
+#define CSTORM_ISCSI_ST_CONTEXT_DATA_DIGEST_EN (0x1<<0)
+#define CSTORM_ISCSI_ST_CONTEXT_DATA_DIGEST_EN_SHIFT 0
+#define CSTORM_ISCSI_ST_CONTEXT_HDR_DIGEST_EN (0x1<<1)
+#define CSTORM_ISCSI_ST_CONTEXT_HDR_DIGEST_EN_SHIFT 1
+#define CSTORM_ISCSI_ST_CONTEXT_HQ_BD_CTXT_VALID (0x1<<2)
+#define CSTORM_ISCSI_ST_CONTEXT_HQ_BD_CTXT_VALID_SHIFT 2
+#define CSTORM_ISCSI_ST_CONTEXT_HQ_BD_LCL_CMPLN_FLG (0x1<<3)
+#define CSTORM_ISCSI_ST_CONTEXT_HQ_BD_LCL_CMPLN_FLG_SHIFT 3
+#define CSTORM_ISCSI_ST_CONTEXT_HQ_BD_WRITE_TASK (0x1<<4)
+#define CSTORM_ISCSI_ST_CONTEXT_HQ_BD_WRITE_TASK_SHIFT 4
+#define CSTORM_ISCSI_ST_CONTEXT_CTRL_FLAGS_RSRV (0x7FF<<5)
+#define CSTORM_ISCSI_ST_CONTEXT_CTRL_FLAGS_RSRV_SHIFT 5
+	u16 hq_cons;
+#elif defined(__LITTLE_ENDIAN)
+	u16 hq_cons;
+	u16 flags;
+#define CSTORM_ISCSI_ST_CONTEXT_DATA_DIGEST_EN (0x1<<0)
+#define CSTORM_ISCSI_ST_CONTEXT_DATA_DIGEST_EN_SHIFT 0
+#define CSTORM_ISCSI_ST_CONTEXT_HDR_DIGEST_EN (0x1<<1)
+#define CSTORM_ISCSI_ST_CONTEXT_HDR_DIGEST_EN_SHIFT 1
+#define CSTORM_ISCSI_ST_CONTEXT_HQ_BD_CTXT_VALID (0x1<<2)
+#define CSTORM_ISCSI_ST_CONTEXT_HQ_BD_CTXT_VALID_SHIFT 2
+#define CSTORM_ISCSI_ST_CONTEXT_HQ_BD_LCL_CMPLN_FLG (0x1<<3)
+#define CSTORM_ISCSI_ST_CONTEXT_HQ_BD_LCL_CMPLN_FLG_SHIFT 3
+#define CSTORM_ISCSI_ST_CONTEXT_HQ_BD_WRITE_TASK (0x1<<4)
+#define CSTORM_ISCSI_ST_CONTEXT_HQ_BD_WRITE_TASK_SHIFT 4
+#define CSTORM_ISCSI_ST_CONTEXT_CTRL_FLAGS_RSRV (0x7FF<<5)
+#define CSTORM_ISCSI_ST_CONTEXT_CTRL_FLAGS_RSRV_SHIFT 5
+#endif
+	struct regpair rsrv1;
+};
+
+
+/*
+ * SCSI read/write SQ WQE
+ */
+struct iscsi_cmd_pdu_hdr_little_endian {
+#if defined(__BIG_ENDIAN)
+	u8 opcode;
+	u8 op_attr;
+#define ISCSI_CMD_PDU_HDR_LITTLE_ENDIAN_ATTRIBUTES (0x7<<0)
+#define ISCSI_CMD_PDU_HDR_LITTLE_ENDIAN_ATTRIBUTES_SHIFT 0
+#define ISCSI_CMD_PDU_HDR_LITTLE_ENDIAN_RSRV1 (0x3<<3)
+#define ISCSI_CMD_PDU_HDR_LITTLE_ENDIAN_RSRV1_SHIFT 3
+#define ISCSI_CMD_PDU_HDR_LITTLE_ENDIAN_WRITE_FLAG (0x1<<5)
+#define ISCSI_CMD_PDU_HDR_LITTLE_ENDIAN_WRITE_FLAG_SHIFT 5
+#define ISCSI_CMD_PDU_HDR_LITTLE_ENDIAN_READ_FLAG (0x1<<6)
+#define ISCSI_CMD_PDU_HDR_LITTLE_ENDIAN_READ_FLAG_SHIFT 6
+#define ISCSI_CMD_PDU_HDR_LITTLE_ENDIAN_FINAL_FLAG (0x1<<7)
+#define ISCSI_CMD_PDU_HDR_LITTLE_ENDIAN_FINAL_FLAG_SHIFT 7
+	u16 rsrv0;
+#elif defined(__LITTLE_ENDIAN)
+	u16 rsrv0;
+	u8 op_attr;
+#define ISCSI_CMD_PDU_HDR_LITTLE_ENDIAN_ATTRIBUTES (0x7<<0)
+#define ISCSI_CMD_PDU_HDR_LITTLE_ENDIAN_ATTRIBUTES_SHIFT 0
+#define ISCSI_CMD_PDU_HDR_LITTLE_ENDIAN_RSRV1 (0x3<<3)
+#define ISCSI_CMD_PDU_HDR_LITTLE_ENDIAN_RSRV1_SHIFT 3
+#define ISCSI_CMD_PDU_HDR_LITTLE_ENDIAN_WRITE_FLAG (0x1<<5)
+#define ISCSI_CMD_PDU_HDR_LITTLE_ENDIAN_WRITE_FLAG_SHIFT 5
+#define ISCSI_CMD_PDU_HDR_LITTLE_ENDIAN_READ_FLAG (0x1<<6)
+#define ISCSI_CMD_PDU_HDR_LITTLE_ENDIAN_READ_FLAG_SHIFT 6
+#define ISCSI_CMD_PDU_HDR_LITTLE_ENDIAN_FINAL_FLAG (0x1<<7)
+#define ISCSI_CMD_PDU_HDR_LITTLE_ENDIAN_FINAL_FLAG_SHIFT 7
+	u8 opcode;
+#endif
+	u32 data_fields;
+#define ISCSI_CMD_PDU_HDR_LITTLE_ENDIAN_DATA_SEGMENT_LENGTH (0xFFFFFF<<0)
+#define ISCSI_CMD_PDU_HDR_LITTLE_ENDIAN_DATA_SEGMENT_LENGTH_SHIFT 0
+#define ISCSI_CMD_PDU_HDR_LITTLE_ENDIAN_TOTAL_AHS_LENGTH (0xFF<<24)
+#define ISCSI_CMD_PDU_HDR_LITTLE_ENDIAN_TOTAL_AHS_LENGTH_SHIFT 24
+	struct regpair lun;
+	u32 itt;
+	u32 expected_data_transfer_length;
+	u32 cmd_sn;
+	u32 exp_stat_sn;
+	u32 scsi_command_block[4];
+};
+
+
+/*
+ * Buffer per connection, used in Tstorm
+ */
+struct iscsi_conn_buf {
+	struct regpair reserved[8];
+};
+
+
+/*
+ * iSCSI context region, used only in iSCSI
+ */
+struct ustorm_iscsi_rq_db {
+	struct regpair pbl_base;
+	struct regpair curr_pbe;
+};
+
+/*
+ * iSCSI context region, used only in iSCSI
+ */
+struct ustorm_iscsi_r2tq_db {
+	struct regpair pbl_base;
+	struct regpair curr_pbe;
+};
+
+/*
+ * iSCSI context region, used only in iSCSI
+ */
+struct ustorm_iscsi_cq_db {
+#if defined(__BIG_ENDIAN)
+	u16 cq_sn;
+	u16 prod;
+#elif defined(__LITTLE_ENDIAN)
+	u16 prod;
+	u16 cq_sn;
+#endif
+	struct regpair curr_pbe;
+};
+
+/*
+ * iSCSI context region, used only in iSCSI
+ */
+struct rings_db {
+	struct ustorm_iscsi_rq_db rq;
+	struct ustorm_iscsi_r2tq_db r2tq;
+	struct ustorm_iscsi_cq_db cq[8];
+#if defined(__BIG_ENDIAN)
+	u16 rq_prod;
+	u16 r2tq_prod;
+#elif defined(__LITTLE_ENDIAN)
+	u16 r2tq_prod;
+	u16 rq_prod;
+#endif
+	struct regpair cq_pbl_base;
+};
+
+/*
+ * iSCSI context region, used only in iSCSI
+ */
+struct ustorm_iscsi_placement_db {
+	u32 sgl_base_lo;
+	u32 sgl_base_hi;
+	u32 local_sge_0_address_hi;
+	u32 local_sge_0_address_lo;
+#if defined(__BIG_ENDIAN)
+	u16 curr_sge_offset;
+	u16 local_sge_0_size;
+#elif defined(__LITTLE_ENDIAN)
+	u16 local_sge_0_size;
+	u16 curr_sge_offset;
+#endif
+	u32 local_sge_1_address_hi;
+	u32 local_sge_1_address_lo;
+#if defined(__BIG_ENDIAN)
+	u8 exp_padding_2b;
+	u8 nal_len_3b;
+	u16 local_sge_1_size;
+#elif defined(__LITTLE_ENDIAN)
+	u16 local_sge_1_size;
+	u8 nal_len_3b;
+	u8 exp_padding_2b;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 sgl_size;
+	u8 local_sge_index_2b;
+	u16 reserved7;
+#elif defined(__LITTLE_ENDIAN)
+	u16 reserved7;
+	u8 local_sge_index_2b;
+	u8 sgl_size;
+#endif
+	u32 rem_pdu;
+	u32 place_db_bitfield_1;
+#define USTORM_ISCSI_PLACEMENT_DB_REM_PDU_PAYLOAD (0xFFFFFF<<0)
+#define USTORM_ISCSI_PLACEMENT_DB_REM_PDU_PAYLOAD_SHIFT 0
+#define USTORM_ISCSI_PLACEMENT_DB_CQ_ID (0xFF<<24)
+#define USTORM_ISCSI_PLACEMENT_DB_CQ_ID_SHIFT 24
+	u32 place_db_bitfield_2;
+#define USTORM_ISCSI_PLACEMENT_DB_BYTES_2_TRUNCATE (0xFFFFFF<<0)
+#define USTORM_ISCSI_PLACEMENT_DB_BYTES_2_TRUNCATE_SHIFT 0
+#define USTORM_ISCSI_PLACEMENT_DB_HOST_SGE_INDEX (0xFF<<24)
+#define USTORM_ISCSI_PLACEMENT_DB_HOST_SGE_INDEX_SHIFT 24
+	u32 nal;
+#define USTORM_ISCSI_PLACEMENT_DB_REM_SGE_SIZE (0xFFFFFF<<0)
+#define USTORM_ISCSI_PLACEMENT_DB_REM_SGE_SIZE_SHIFT 0
+#define USTORM_ISCSI_PLACEMENT_DB_EXP_DIGEST_3B (0xFF<<24)
+#define USTORM_ISCSI_PLACEMENT_DB_EXP_DIGEST_3B_SHIFT 24
+};
+
+/*
+ * Ustorm iSCSI Storm Context
+ */
+struct ustorm_iscsi_st_context {
+	u32 exp_stat_sn;
+	u32 exp_data_sn;
+	struct rings_db ring;
+	struct regpair task_pbl_base;
+	struct regpair tce_phy_addr;
+	struct ustorm_iscsi_placement_db place_db;
+	u32 reserved8;
+	u32 rem_rcv_len;
+#if defined(__BIG_ENDIAN)
+	u16 hdr_itt;
+	u16 iscsi_conn_id;
+#elif defined(__LITTLE_ENDIAN)
+	u16 iscsi_conn_id;
+	u16 hdr_itt;
+#endif
+	u32 nal_bytes;
+#if defined(__BIG_ENDIAN)
+	u8 hdr_second_byte_union;
+	u8 bitfield_0;
+#define USTORM_ISCSI_ST_CONTEXT_BMIDDLEOFPDU (0x1<<0)
+#define USTORM_ISCSI_ST_CONTEXT_BMIDDLEOFPDU_SHIFT 0
+#define USTORM_ISCSI_ST_CONTEXT_BFENCECQE (0x1<<1)
+#define USTORM_ISCSI_ST_CONTEXT_BFENCECQE_SHIFT 1
+#define USTORM_ISCSI_ST_CONTEXT_BRESETCRC (0x1<<2)
+#define USTORM_ISCSI_ST_CONTEXT_BRESETCRC_SHIFT 2
+#define USTORM_ISCSI_ST_CONTEXT_RESERVED1 (0x1F<<3)
+#define USTORM_ISCSI_ST_CONTEXT_RESERVED1_SHIFT 3
+	u8 task_pdu_cache_index;
+	u8 task_pbe_cache_index;
+#elif defined(__LITTLE_ENDIAN)
+	u8 task_pbe_cache_index;
+	u8 task_pdu_cache_index;
+	u8 bitfield_0;
+#define USTORM_ISCSI_ST_CONTEXT_BMIDDLEOFPDU (0x1<<0)
+#define USTORM_ISCSI_ST_CONTEXT_BMIDDLEOFPDU_SHIFT 0
+#define USTORM_ISCSI_ST_CONTEXT_BFENCECQE (0x1<<1)
+#define USTORM_ISCSI_ST_CONTEXT_BFENCECQE_SHIFT 1
+#define USTORM_ISCSI_ST_CONTEXT_BRESETCRC (0x1<<2)
+#define USTORM_ISCSI_ST_CONTEXT_BRESETCRC_SHIFT 2
+#define USTORM_ISCSI_ST_CONTEXT_RESERVED1 (0x1F<<3)
+#define USTORM_ISCSI_ST_CONTEXT_RESERVED1_SHIFT 3
+	u8 hdr_second_byte_union;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 reserved3;
+	u8 reserved2;
+	u8 acDecrement;
+#elif defined(__LITTLE_ENDIAN)
+	u8 acDecrement;
+	u8 reserved2;
+	u16 reserved3;
+#endif
+	u32 task_stat;
+#if defined(__BIG_ENDIAN)
+	u8 hdr_opcode;
+	u8 num_cqs;
+	u16 reserved5;
+#elif defined(__LITTLE_ENDIAN)
+	u16 reserved5;
+	u8 num_cqs;
+	u8 hdr_opcode;
+#endif
+	u32 negotiated_rx;
+#define USTORM_ISCSI_ST_CONTEXT_MAX_RECV_PDU_LENGTH (0xFFFFFF<<0)
+#define USTORM_ISCSI_ST_CONTEXT_MAX_RECV_PDU_LENGTH_SHIFT 0
+#define USTORM_ISCSI_ST_CONTEXT_MAX_OUTSTANDING_R2TS (0xFF<<24)
+#define USTORM_ISCSI_ST_CONTEXT_MAX_OUTSTANDING_R2TS_SHIFT 24
+	u32 negotiated_rx_and_flags;
+#define USTORM_ISCSI_ST_CONTEXT_MAX_BURST_LENGTH (0xFFFFFF<<0)
+#define USTORM_ISCSI_ST_CONTEXT_MAX_BURST_LENGTH_SHIFT 0
+#define USTORM_ISCSI_ST_CONTEXT_B_CQE_POSTED_OR_HEADER_CACHED (0x1<<24)
+#define USTORM_ISCSI_ST_CONTEXT_B_CQE_POSTED_OR_HEADER_CACHED_SHIFT 24
+#define USTORM_ISCSI_ST_CONTEXT_B_HDR_DIGEST_EN (0x1<<25)
+#define USTORM_ISCSI_ST_CONTEXT_B_HDR_DIGEST_EN_SHIFT 25
+#define USTORM_ISCSI_ST_CONTEXT_B_DATA_DIGEST_EN (0x1<<26)
+#define USTORM_ISCSI_ST_CONTEXT_B_DATA_DIGEST_EN_SHIFT 26
+#define USTORM_ISCSI_ST_CONTEXT_B_PROTOCOL_ERROR (0x1<<27)
+#define USTORM_ISCSI_ST_CONTEXT_B_PROTOCOL_ERROR_SHIFT 27
+#define USTORM_ISCSI_ST_CONTEXT_B_TASK_VALID (0x1<<28)
+#define USTORM_ISCSI_ST_CONTEXT_B_TASK_VALID_SHIFT 28
+#define USTORM_ISCSI_ST_CONTEXT_TASK_TYPE (0x3<<29)
+#define USTORM_ISCSI_ST_CONTEXT_TASK_TYPE_SHIFT 29
+#define USTORM_ISCSI_ST_CONTEXT_B_ALL_DATA_ACKED (0x1<<31)
+#define USTORM_ISCSI_ST_CONTEXT_B_ALL_DATA_ACKED_SHIFT 31
+};
+
+/*
+ * TCP context region, shared in TOE, RDMA and ISCSI
+ */
+struct tstorm_tcp_st_context_section {
+	u32 flags1;
+#define TSTORM_TCP_ST_CONTEXT_SECTION_RTT_SRTT (0xFFFFFF<<0)
+#define TSTORM_TCP_ST_CONTEXT_SECTION_RTT_SRTT_SHIFT 0
+#define TSTORM_TCP_ST_CONTEXT_SECTION_PAWS_INVALID (0x1<<24)
+#define TSTORM_TCP_ST_CONTEXT_SECTION_PAWS_INVALID_SHIFT 24
+#define TSTORM_TCP_ST_CONTEXT_SECTION_TIMESTAMP_EXISTS (0x1<<25)
+#define TSTORM_TCP_ST_CONTEXT_SECTION_TIMESTAMP_EXISTS_SHIFT 25
+#define TSTORM_TCP_ST_CONTEXT_SECTION_RESERVED0 (0x1<<26)
+#define TSTORM_TCP_ST_CONTEXT_SECTION_RESERVED0_SHIFT 26
+#define TSTORM_TCP_ST_CONTEXT_SECTION_STOP_RX_PAYLOAD (0x1<<27)
+#define TSTORM_TCP_ST_CONTEXT_SECTION_STOP_RX_PAYLOAD_SHIFT 27
+#define TSTORM_TCP_ST_CONTEXT_SECTION_KA_ENABLED (0x1<<28)
+#define TSTORM_TCP_ST_CONTEXT_SECTION_KA_ENABLED_SHIFT 28
+#define TSTORM_TCP_ST_CONTEXT_SECTION_FIRST_RTO_ESTIMATE (0x1<<29)
+#define TSTORM_TCP_ST_CONTEXT_SECTION_FIRST_RTO_ESTIMATE_SHIFT 29
+#define TSTORM_TCP_ST_CONTEXT_SECTION_MAX_SEG_RETRANSMIT_EN (0x1<<30)
+#define TSTORM_TCP_ST_CONTEXT_SECTION_MAX_SEG_RETRANSMIT_EN_SHIFT 30
+#define TSTORM_TCP_ST_CONTEXT_SECTION_LAST_ISLE_HAS_FIN (0x1<<31)
+#define TSTORM_TCP_ST_CONTEXT_SECTION_LAST_ISLE_HAS_FIN_SHIFT 31
+	u32 flags2;
+#define TSTORM_TCP_ST_CONTEXT_SECTION_RTT_VARIATION (0xFFFFFF<<0)
+#define TSTORM_TCP_ST_CONTEXT_SECTION_RTT_VARIATION_SHIFT 0
+#define TSTORM_TCP_ST_CONTEXT_SECTION_DA_EN (0x1<<24)
+#define TSTORM_TCP_ST_CONTEXT_SECTION_DA_EN_SHIFT 24
+#define TSTORM_TCP_ST_CONTEXT_SECTION_DA_COUNTER_EN (0x1<<25)
+#define TSTORM_TCP_ST_CONTEXT_SECTION_DA_COUNTER_EN_SHIFT 25
+#define __TSTORM_TCP_ST_CONTEXT_SECTION_KA_PROBE_SENT (0x1<<26)
+#define __TSTORM_TCP_ST_CONTEXT_SECTION_KA_PROBE_SENT_SHIFT 26
+#define __TSTORM_TCP_ST_CONTEXT_SECTION_PERSIST_PROBE_SENT (0x1<<27)
+#define __TSTORM_TCP_ST_CONTEXT_SECTION_PERSIST_PROBE_SENT_SHIFT 27
+#define TSTORM_TCP_ST_CONTEXT_SECTION_UPDATE_L2_STATSTICS (0x1<<28)
+#define TSTORM_TCP_ST_CONTEXT_SECTION_UPDATE_L2_STATSTICS_SHIFT 28
+#define TSTORM_TCP_ST_CONTEXT_SECTION_UPDATE_L4_STATSTICS (0x1<<29)
+#define TSTORM_TCP_ST_CONTEXT_SECTION_UPDATE_L4_STATSTICS_SHIFT 29
+#define __TSTORM_TCP_ST_CONTEXT_SECTION_IN_WINDOW_RST_ATTACK (0x1<<30)
+#define __TSTORM_TCP_ST_CONTEXT_SECTION_IN_WINDOW_RST_ATTACK_SHIFT 30
+#define __TSTORM_TCP_ST_CONTEXT_SECTION_IN_WINDOW_SYN_ATTACK (0x1<<31)
+#define __TSTORM_TCP_ST_CONTEXT_SECTION_IN_WINDOW_SYN_ATTACK_SHIFT 31
+#if defined(__BIG_ENDIAN)
+	u16 mss;
+	u8 tcp_sm_state;
+	u8 rto_exp;
+#elif defined(__LITTLE_ENDIAN)
+	u8 rto_exp;
+	u8 tcp_sm_state;
+	u16 mss;
+#endif
+	u32 rcv_nxt;
+	u32 timestamp_recent;
+	u32 timestamp_recent_time;
+	u32 cwnd;
+	u32 ss_thresh;
+	u32 cwnd_accum;
+	u32 prev_seg_seq;
+	u32 expected_rel_seq;
+	u32 recover;
+#if defined(__BIG_ENDIAN)
+	u8 retransmit_count;
+	u8 ka_max_probe_count;
+	u8 persist_probe_count;
+	u8 ka_probe_count;
+#elif defined(__LITTLE_ENDIAN)
+	u8 ka_probe_count;
+	u8 persist_probe_count;
+	u8 ka_max_probe_count;
+	u8 retransmit_count;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 statistics_counter_id;
+	u8 ooo_support_mode;
+	u8 snd_wnd_scale;
+	u8 dup_ack_count;
+#elif defined(__LITTLE_ENDIAN)
+	u8 dup_ack_count;
+	u8 snd_wnd_scale;
+	u8 ooo_support_mode;
+	u8 statistics_counter_id;
+#endif
+	u32 retransmit_start_time;
+	u32 ka_timeout;
+	u32 ka_interval;
+	u32 isle_start_seq;
+	u32 isle_end_seq;
+#if defined(__BIG_ENDIAN)
+	u16 second_isle_address;
+	u16 recent_seg_wnd;
+#elif defined(__LITTLE_ENDIAN)
+	u16 recent_seg_wnd;
+	u16 second_isle_address;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 max_isles_ever_happened;
+	u8 isles_number;
+	u16 last_isle_address;
+#elif defined(__LITTLE_ENDIAN)
+	u16 last_isle_address;
+	u8 isles_number;
+	u8 max_isles_ever_happened;
+#endif
+	u32 max_rt_time;
+#if defined(__BIG_ENDIAN)
+	u16 lsb_mac_address;
+	u16 vlan_id;
+#elif defined(__LITTLE_ENDIAN)
+	u16 vlan_id;
+	u16 lsb_mac_address;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 msb_mac_address;
+	u16 mid_mac_address;
+#elif defined(__LITTLE_ENDIAN)
+	u16 mid_mac_address;
+	u16 msb_mac_address;
+#endif
+	u32 rightmost_received_seq;
+};
+
+/*
+ * Termination variables
+ */
+struct iscsi_term_vars {
+	u8 BitMap;
+#define ISCSI_TERM_VARS_TCP_STATE (0xF<<0)
+#define ISCSI_TERM_VARS_TCP_STATE_SHIFT 0
+#define ISCSI_TERM_VARS_FIN_RECEIVED_SBIT (0x1<<4)
+#define ISCSI_TERM_VARS_FIN_RECEIVED_SBIT_SHIFT 4
+#define ISCSI_TERM_VARS_ACK_ON_FIN_RECEIVED_SBIT (0x1<<5)
+#define ISCSI_TERM_VARS_ACK_ON_FIN_RECEIVED_SBIT_SHIFT 5
+#define ISCSI_TERM_VARS_TERM_ON_CHIP (0x1<<6)
+#define ISCSI_TERM_VARS_TERM_ON_CHIP_SHIFT 6
+#define ISCSI_TERM_VARS_RSRV (0x1<<7)
+#define ISCSI_TERM_VARS_RSRV_SHIFT 7
+};
+
+/*
+ * iSCSI context region, used only in iSCSI
+ */
+struct tstorm_iscsi_st_context_section {
+	u32 nalPayload;
+	u32 b2nh;
+#if defined(__BIG_ENDIAN)
+	u16 rq_cons;
+	u8 flags;
+#define TSTORM_ISCSI_ST_CONTEXT_SECTION_B_HDR_DIGEST_EN (0x1<<0)
+#define TSTORM_ISCSI_ST_CONTEXT_SECTION_B_HDR_DIGEST_EN_SHIFT 0
+#define TSTORM_ISCSI_ST_CONTEXT_SECTION_B_DATA_DIGEST_EN (0x1<<1)
+#define TSTORM_ISCSI_ST_CONTEXT_SECTION_B_DATA_DIGEST_EN_SHIFT 1
+#define TSTORM_ISCSI_ST_CONTEXT_SECTION_B_PARTIAL_HEADER (0x1<<2)
+#define TSTORM_ISCSI_ST_CONTEXT_SECTION_B_PARTIAL_HEADER_SHIFT 2
+#define TSTORM_ISCSI_ST_CONTEXT_SECTION_B_FULL_FEATURE (0x1<<3)
+#define TSTORM_ISCSI_ST_CONTEXT_SECTION_B_FULL_FEATURE_SHIFT 3
+#define TSTORM_ISCSI_ST_CONTEXT_SECTION_B_DROP_ALL_PDUS (0x1<<4)
+#define TSTORM_ISCSI_ST_CONTEXT_SECTION_B_DROP_ALL_PDUS_SHIFT 4
+#define TSTORM_ISCSI_ST_CONTEXT_SECTION_NALLEN (0x3<<5)
+#define TSTORM_ISCSI_ST_CONTEXT_SECTION_NALLEN_SHIFT 5
+#define TSTORM_ISCSI_ST_CONTEXT_SECTION_RSRV0 (0x1<<7)
+#define TSTORM_ISCSI_ST_CONTEXT_SECTION_RSRV0_SHIFT 7
+	u8 hdr_bytes_2_fetch;
+#elif defined(__LITTLE_ENDIAN)
+	u8 hdr_bytes_2_fetch;
+	u8 flags;
+#define TSTORM_ISCSI_ST_CONTEXT_SECTION_B_HDR_DIGEST_EN (0x1<<0)
+#define TSTORM_ISCSI_ST_CONTEXT_SECTION_B_HDR_DIGEST_EN_SHIFT 0
+#define TSTORM_ISCSI_ST_CONTEXT_SECTION_B_DATA_DIGEST_EN (0x1<<1)
+#define TSTORM_ISCSI_ST_CONTEXT_SECTION_B_DATA_DIGEST_EN_SHIFT 1
+#define TSTORM_ISCSI_ST_CONTEXT_SECTION_B_PARTIAL_HEADER (0x1<<2)
+#define TSTORM_ISCSI_ST_CONTEXT_SECTION_B_PARTIAL_HEADER_SHIFT 2
+#define TSTORM_ISCSI_ST_CONTEXT_SECTION_B_FULL_FEATURE (0x1<<3)
+#define TSTORM_ISCSI_ST_CONTEXT_SECTION_B_FULL_FEATURE_SHIFT 3
+#define TSTORM_ISCSI_ST_CONTEXT_SECTION_B_DROP_ALL_PDUS (0x1<<4)
+#define TSTORM_ISCSI_ST_CONTEXT_SECTION_B_DROP_ALL_PDUS_SHIFT 4
+#define TSTORM_ISCSI_ST_CONTEXT_SECTION_NALLEN (0x3<<5)
+#define TSTORM_ISCSI_ST_CONTEXT_SECTION_NALLEN_SHIFT 5
+#define TSTORM_ISCSI_ST_CONTEXT_SECTION_RSRV0 (0x1<<7)
+#define TSTORM_ISCSI_ST_CONTEXT_SECTION_RSRV0_SHIFT 7
+	u16 rq_cons;
+#endif
+	struct regpair rq_db_phy_addr;
+#if defined(__BIG_ENDIAN)
+	struct iscsi_term_vars term_vars;
+	u8 rsrv1;
+	u16 iscsi_conn_id;
+#elif defined(__LITTLE_ENDIAN)
+	u16 iscsi_conn_id;
+	u8 rsrv1;
+	struct iscsi_term_vars term_vars;
+#endif
+	u32 process_nxt;
+};
+
+/*
+ * The iSCSI non-aggregative context of Tstorm
+ */
+struct tstorm_iscsi_st_context {
+	struct tstorm_tcp_st_context_section tcp;
+	struct tstorm_iscsi_st_context_section iscsi;
+};
+
+/*
+ * Ethernet context section, shared in TOE, RDMA and ISCSI
+ */
+struct xstorm_eth_context_section {
+#if defined(__BIG_ENDIAN)
+	u8 remote_addr_4;
+	u8 remote_addr_5;
+	u8 local_addr_0;
+	u8 local_addr_1;
+#elif defined(__LITTLE_ENDIAN)
+	u8 local_addr_1;
+	u8 local_addr_0;
+	u8 remote_addr_5;
+	u8 remote_addr_4;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 remote_addr_0;
+	u8 remote_addr_1;
+	u8 remote_addr_2;
+	u8 remote_addr_3;
+#elif defined(__LITTLE_ENDIAN)
+	u8 remote_addr_3;
+	u8 remote_addr_2;
+	u8 remote_addr_1;
+	u8 remote_addr_0;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 reserved_vlan_type;
+	u16 vlan_params;
+#define XSTORM_ETH_CONTEXT_SECTION_VLAN_ID (0xFFF<<0)
+#define XSTORM_ETH_CONTEXT_SECTION_VLAN_ID_SHIFT 0
+#define XSTORM_ETH_CONTEXT_SECTION_CFI (0x1<<12)
+#define XSTORM_ETH_CONTEXT_SECTION_CFI_SHIFT 12
+#define XSTORM_ETH_CONTEXT_SECTION_PRIORITY (0x7<<13)
+#define XSTORM_ETH_CONTEXT_SECTION_PRIORITY_SHIFT 13
+#elif defined(__LITTLE_ENDIAN)
+	u16 vlan_params;
+#define XSTORM_ETH_CONTEXT_SECTION_VLAN_ID (0xFFF<<0)
+#define XSTORM_ETH_CONTEXT_SECTION_VLAN_ID_SHIFT 0
+#define XSTORM_ETH_CONTEXT_SECTION_CFI (0x1<<12)
+#define XSTORM_ETH_CONTEXT_SECTION_CFI_SHIFT 12
+#define XSTORM_ETH_CONTEXT_SECTION_PRIORITY (0x7<<13)
+#define XSTORM_ETH_CONTEXT_SECTION_PRIORITY_SHIFT 13
+	u16 reserved_vlan_type;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 local_addr_2;
+	u8 local_addr_3;
+	u8 local_addr_4;
+	u8 local_addr_5;
+#elif defined(__LITTLE_ENDIAN)
+	u8 local_addr_5;
+	u8 local_addr_4;
+	u8 local_addr_3;
+	u8 local_addr_2;
+#endif
+};
+
+/*
+ * IpV4 context section, shared in TOE, RDMA and ISCSI
+ */
+struct xstorm_ip_v4_context_section {
+#if defined(__BIG_ENDIAN)
+	u16 __pbf_hdr_cmd_rsvd_id;
+	u16 __pbf_hdr_cmd_rsvd_flags_offset;
+#elif defined(__LITTLE_ENDIAN)
+	u16 __pbf_hdr_cmd_rsvd_flags_offset;
+	u16 __pbf_hdr_cmd_rsvd_id;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 __pbf_hdr_cmd_rsvd_ver_ihl;
+	u8 tos;
+	u16 __pbf_hdr_cmd_rsvd_length;
+#elif defined(__LITTLE_ENDIAN)
+	u16 __pbf_hdr_cmd_rsvd_length;
+	u8 tos;
+	u8 __pbf_hdr_cmd_rsvd_ver_ihl;
+#endif
+	u32 ip_local_addr;
+#if defined(__BIG_ENDIAN)
+	u8 ttl;
+	u8 __pbf_hdr_cmd_rsvd_protocol;
+	u16 __pbf_hdr_cmd_rsvd_csum;
+#elif defined(__LITTLE_ENDIAN)
+	u16 __pbf_hdr_cmd_rsvd_csum;
+	u8 __pbf_hdr_cmd_rsvd_protocol;
+	u8 ttl;
+#endif
+	u32 __pbf_hdr_cmd_rsvd_1;
+	u32 ip_remote_addr;
+};
+
+/*
+ * context section, shared in TOE, RDMA and ISCSI
+ */
+struct xstorm_padded_ip_v4_context_section {
+	struct xstorm_ip_v4_context_section ip_v4;
+	u32 reserved1[4];
+};
+
+/*
+ * IpV6 context section, shared in TOE, RDMA and ISCSI
+ */
+struct xstorm_ip_v6_context_section {
+#if defined(__BIG_ENDIAN)
+	u16 pbf_hdr_cmd_rsvd_payload_len;
+	u8 pbf_hdr_cmd_rsvd_nxt_hdr;
+	u8 hop_limit;
+#elif defined(__LITTLE_ENDIAN)
+	u8 hop_limit;
+	u8 pbf_hdr_cmd_rsvd_nxt_hdr;
+	u16 pbf_hdr_cmd_rsvd_payload_len;
+#endif
+	u32 priority_flow_label;
+#define XSTORM_IP_V6_CONTEXT_SECTION_FLOW_LABEL (0xFFFFF<<0)
+#define XSTORM_IP_V6_CONTEXT_SECTION_FLOW_LABEL_SHIFT 0
+#define XSTORM_IP_V6_CONTEXT_SECTION_TRAFFIC_CLASS (0xFF<<20)
+#define XSTORM_IP_V6_CONTEXT_SECTION_TRAFFIC_CLASS_SHIFT 20
+#define XSTORM_IP_V6_CONTEXT_SECTION_PBF_HDR_CMD_RSVD_VER (0xF<<28)
+#define XSTORM_IP_V6_CONTEXT_SECTION_PBF_HDR_CMD_RSVD_VER_SHIFT 28
+	u32 ip_local_addr_lo_hi;
+	u32 ip_local_addr_lo_lo;
+	u32 ip_local_addr_hi_hi;
+	u32 ip_local_addr_hi_lo;
+	u32 ip_remote_addr_lo_hi;
+	u32 ip_remote_addr_lo_lo;
+	u32 ip_remote_addr_hi_hi;
+	u32 ip_remote_addr_hi_lo;
+};
+
+union xstorm_ip_context_section_types {
+	struct xstorm_padded_ip_v4_context_section padded_ip_v4;
+	struct xstorm_ip_v6_context_section ip_v6;
+};
+
+/*
+ * TCP context section, shared in TOE, RDMA and ISCSI
+ */
+struct xstorm_tcp_context_section {
+	u32 snd_max;
+#if defined(__BIG_ENDIAN)
+	u16 remote_port;
+	u16 local_port;
+#elif defined(__LITTLE_ENDIAN)
+	u16 local_port;
+	u16 remote_port;
+#endif
+#if defined(__BIG_ENDIAN)
+	u8 original_nagle_1b;
+	u8 ts_enabled;
+	u16 tcp_params;
+#define XSTORM_TCP_CONTEXT_SECTION_TOTAL_HEADER_SIZE (0xFF<<0)
+#define XSTORM_TCP_CONTEXT_SECTION_TOTAL_HEADER_SIZE_SHIFT 0
+#define __XSTORM_TCP_CONTEXT_SECTION_ECT_BIT (0x1<<8)
+#define __XSTORM_TCP_CONTEXT_SECTION_ECT_BIT_SHIFT 8
+#define __XSTORM_TCP_CONTEXT_SECTION_ECN_ENABLED (0x1<<9)
+#define __XSTORM_TCP_CONTEXT_SECTION_ECN_ENABLED_SHIFT 9
+#define XSTORM_TCP_CONTEXT_SECTION_SACK_ENABLED (0x1<<10)
+#define XSTORM_TCP_CONTEXT_SECTION_SACK_ENABLED_SHIFT 10
+#define XSTORM_TCP_CONTEXT_SECTION_SMALL_WIN_ADV (0x1<<11)
+#define XSTORM_TCP_CONTEXT_SECTION_SMALL_WIN_ADV_SHIFT 11
+#define XSTORM_TCP_CONTEXT_SECTION_FIN_SENT_FLAG (0x1<<12)
+#define XSTORM_TCP_CONTEXT_SECTION_FIN_SENT_FLAG_SHIFT 12
+#define XSTORM_TCP_CONTEXT_SECTION_WINDOW_SATURATED (0x1<<13)
+#define XSTORM_TCP_CONTEXT_SECTION_WINDOW_SATURATED_SHIFT 13
+#define XSTORM_TCP_CONTEXT_SECTION_SLOWPATH_QUEUES_FLUSH_COUNTER (0x3<<14)
+#define XSTORM_TCP_CONTEXT_SECTION_SLOWPATH_QUEUES_FLUSH_COUNTER_SHIFT 14
+#elif defined(__LITTLE_ENDIAN)
+	u16 tcp_params;
+#define XSTORM_TCP_CONTEXT_SECTION_TOTAL_HEADER_SIZE (0xFF<<0)
+#define XSTORM_TCP_CONTEXT_SECTION_TOTAL_HEADER_SIZE_SHIFT 0
+#define __XSTORM_TCP_CONTEXT_SECTION_ECT_BIT (0x1<<8)
+#define __XSTORM_TCP_CONTEXT_SECTION_ECT_BIT_SHIFT 8
+#define __XSTORM_TCP_CONTEXT_SECTION_ECN_ENABLED (0x1<<9)
+#define __XSTORM_TCP_CONTEXT_SECTION_ECN_ENABLED_SHIFT 9
+#define XSTORM_TCP_CONTEXT_SECTION_SACK_ENABLED (0x1<<10)
+#define XSTORM_TCP_CONTEXT_SECTION_SACK_ENABLED_SHIFT 10
+#define XSTORM_TCP_CONTEXT_SECTION_SMALL_WIN_ADV (0x1<<11)
+#define XSTORM_TCP_CONTEXT_SECTION_SMALL_WIN_ADV_SHIFT 11
+#define XSTORM_TCP_CONTEXT_SECTION_FIN_SENT_FLAG (0x1<<12)
+#define XSTORM_TCP_CONTEXT_SECTION_FIN_SENT_FLAG_SHIFT 12
+#define XSTORM_TCP_CONTEXT_SECTION_WINDOW_SATURATED (0x1<<13)
+#define XSTORM_TCP_CONTEXT_SECTION_WINDOW_SATURATED_SHIFT 13
+#define XSTORM_TCP_CONTEXT_SECTION_SLOWPATH_QUEUES_FLUSH_COUNTER (0x3<<14)
+#define XSTORM_TCP_CONTEXT_SECTION_SLOWPATH_QUEUES_FLUSH_COUNTER_SHIFT 14
+	u8 ts_enabled;
+	u8 original_nagle_1b;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 pseudo_csum;
+	u16 window_scaling_factor;
+#elif defined(__LITTLE_ENDIAN)
+	u16 window_scaling_factor;
+	u16 pseudo_csum;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 reserved2;
+	u8 statistics_counter_id;
+	u8 statistics_params;
+#define XSTORM_TCP_CONTEXT_SECTION_UPDATE_L2_STATSTICS (0x1<<0)
+#define XSTORM_TCP_CONTEXT_SECTION_UPDATE_L2_STATSTICS_SHIFT 0
+#define XSTORM_TCP_CONTEXT_SECTION_UPDATE_L4_STATSTICS (0x1<<1)
+#define XSTORM_TCP_CONTEXT_SECTION_UPDATE_L4_STATSTICS_SHIFT 1
+#define XSTORM_TCP_CONTEXT_SECTION_RESERVED (0x3F<<2)
+#define XSTORM_TCP_CONTEXT_SECTION_RESERVED_SHIFT 2
+#elif defined(__LITTLE_ENDIAN)
+	u8 statistics_params;
+#define XSTORM_TCP_CONTEXT_SECTION_UPDATE_L2_STATSTICS (0x1<<0)
+#define XSTORM_TCP_CONTEXT_SECTION_UPDATE_L2_STATSTICS_SHIFT 0
+#define XSTORM_TCP_CONTEXT_SECTION_UPDATE_L4_STATSTICS (0x1<<1)
+#define XSTORM_TCP_CONTEXT_SECTION_UPDATE_L4_STATSTICS_SHIFT 1
+#define XSTORM_TCP_CONTEXT_SECTION_RESERVED (0x3F<<2)
+#define XSTORM_TCP_CONTEXT_SECTION_RESERVED_SHIFT 2
+	u8 statistics_counter_id;
+	u16 reserved2;
+#endif
+	u32 ts_time_diff;
+	u32 __next_timer_expir;
+};
+
+/*
+ * Common context section, shared in TOE, RDMA and ISCSI
+ */
+struct xstorm_common_context_section {
+	struct xstorm_eth_context_section ethernet;
+	union xstorm_ip_context_section_types ip_union;
+	struct xstorm_tcp_context_section tcp;
+#if defined(__BIG_ENDIAN)
+	u8 __dcb_val;
+	u8 flags;
+#define XSTORM_COMMON_CONTEXT_SECTION_PHYSQ_INITIALIZED (0x1<<0)
+#define XSTORM_COMMON_CONTEXT_SECTION_PHYSQ_INITIALIZED_SHIFT 0
+#define XSTORM_COMMON_CONTEXT_SECTION_PBF_PORT (0x7<<1)
+#define XSTORM_COMMON_CONTEXT_SECTION_PBF_PORT_SHIFT 1
+#define XSTORM_COMMON_CONTEXT_SECTION_VLAN_MODE (0x1<<4)
+#define XSTORM_COMMON_CONTEXT_SECTION_VLAN_MODE_SHIFT 4
+#define XSTORM_COMMON_CONTEXT_SECTION_ORIGINAL_PRIORITY (0x7<<5)
+#define XSTORM_COMMON_CONTEXT_SECTION_ORIGINAL_PRIORITY_SHIFT 5
+	u8 reserved;
+	u8 ip_version_1b;
+#elif defined(__LITTLE_ENDIAN)
+	u8 ip_version_1b;
+	u8 reserved;
+	u8 flags;
+#define XSTORM_COMMON_CONTEXT_SECTION_PHYSQ_INITIALIZED (0x1<<0)
+#define XSTORM_COMMON_CONTEXT_SECTION_PHYSQ_INITIALIZED_SHIFT 0
+#define XSTORM_COMMON_CONTEXT_SECTION_PBF_PORT (0x7<<1)
+#define XSTORM_COMMON_CONTEXT_SECTION_PBF_PORT_SHIFT 1
+#define XSTORM_COMMON_CONTEXT_SECTION_VLAN_MODE (0x1<<4)
+#define XSTORM_COMMON_CONTEXT_SECTION_VLAN_MODE_SHIFT 4
+#define XSTORM_COMMON_CONTEXT_SECTION_ORIGINAL_PRIORITY (0x7<<5)
+#define XSTORM_COMMON_CONTEXT_SECTION_ORIGINAL_PRIORITY_SHIFT 5
+	u8 __dcb_val;
+#endif
+};
+
+/*
+ * Flags used in ISCSI context section
+ */
+struct xstorm_iscsi_context_flags {
+	u8 flags;
+#define XSTORM_ISCSI_CONTEXT_FLAGS_B_IMMEDIATE_DATA (0x1<<0)
+#define XSTORM_ISCSI_CONTEXT_FLAGS_B_IMMEDIATE_DATA_SHIFT 0
+#define XSTORM_ISCSI_CONTEXT_FLAGS_B_INITIAL_R2T (0x1<<1)
+#define XSTORM_ISCSI_CONTEXT_FLAGS_B_INITIAL_R2T_SHIFT 1
+#define XSTORM_ISCSI_CONTEXT_FLAGS_B_EN_HEADER_DIGEST (0x1<<2)
+#define XSTORM_ISCSI_CONTEXT_FLAGS_B_EN_HEADER_DIGEST_SHIFT 2
+#define XSTORM_ISCSI_CONTEXT_FLAGS_B_EN_DATA_DIGEST (0x1<<3)
+#define XSTORM_ISCSI_CONTEXT_FLAGS_B_EN_DATA_DIGEST_SHIFT 3
+#define XSTORM_ISCSI_CONTEXT_FLAGS_B_HQ_BD_WRITTEN (0x1<<4)
+#define XSTORM_ISCSI_CONTEXT_FLAGS_B_HQ_BD_WRITTEN_SHIFT 4
+#define XSTORM_ISCSI_CONTEXT_FLAGS_B_LAST_OP_SQ (0x1<<5)
+#define XSTORM_ISCSI_CONTEXT_FLAGS_B_LAST_OP_SQ_SHIFT 5
+#define XSTORM_ISCSI_CONTEXT_FLAGS_B_UPDATE_SND_NXT (0x1<<6)
+#define XSTORM_ISCSI_CONTEXT_FLAGS_B_UPDATE_SND_NXT_SHIFT 6
+#define XSTORM_ISCSI_CONTEXT_FLAGS_RESERVED4 (0x1<<7)
+#define XSTORM_ISCSI_CONTEXT_FLAGS_RESERVED4_SHIFT 7
+};
+
+struct iscsi_task_context_entry_x {
+	u32 data_out_buffer_offset;
+	u32 itt;
+	u32 data_sn;
+};
+
+struct iscsi_task_context_entry_xuc_x_write_only {
+	u32 tx_r2t_sn;
+};
+
+struct iscsi_task_context_entry_xuc_xu_write_both {
+	u32 sgl_base_lo;
+	u32 sgl_base_hi;
+#if defined(__BIG_ENDIAN)
+	u8 sgl_size;
+	u8 sge_index;
+	u16 sge_offset;
+#elif defined(__LITTLE_ENDIAN)
+	u16 sge_offset;
+	u8 sge_index;
+	u8 sgl_size;
+#endif
+};
+
+/*
+ * iSCSI context section
+ */
+struct xstorm_iscsi_context_section {
+	u32 first_burst_length;
+	u32 max_send_pdu_length;
+	struct regpair sq_pbl_base;
+	struct regpair sq_curr_pbe;
+	struct regpair hq_pbl_base;
+	struct regpair hq_curr_pbe_base;
+	struct regpair r2tq_pbl_base;
+	struct regpair r2tq_curr_pbe_base;
+	struct regpair task_pbl_base;
+#if defined(__BIG_ENDIAN)
+	u16 data_out_count;
+	struct xstorm_iscsi_context_flags flags;
+	u8 task_pbl_cache_idx;
+#elif defined(__LITTLE_ENDIAN)
+	u8 task_pbl_cache_idx;
+	struct xstorm_iscsi_context_flags flags;
+	u16 data_out_count;
+#endif
+	u32 seq_more_2_send;
+	u32 pdu_more_2_send;
+	struct iscsi_task_context_entry_x temp_tce_x;
+	struct iscsi_task_context_entry_xuc_x_write_only temp_tce_x_wr;
+	struct iscsi_task_context_entry_xuc_xu_write_both temp_tce_xu_wr;
+	struct regpair lun;
+	u32 exp_data_transfer_len_ttt;
+	u32 pdu_data_2_rxmit;
+	u32 rxmit_bytes_2_dr;
+#if defined(__BIG_ENDIAN)
+	u16 rxmit_sge_offset;
+	u16 hq_rxmit_cons;
+#elif defined(__LITTLE_ENDIAN)
+	u16 hq_rxmit_cons;
+	u16 rxmit_sge_offset;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 r2tq_cons;
+	u8 rxmit_flags;
+#define XSTORM_ISCSI_CONTEXT_SECTION_B_NEW_HQ_BD (0x1<<0)
+#define XSTORM_ISCSI_CONTEXT_SECTION_B_NEW_HQ_BD_SHIFT 0
+#define XSTORM_ISCSI_CONTEXT_SECTION_B_RXMIT_PDU_HDR (0x1<<1)
+#define XSTORM_ISCSI_CONTEXT_SECTION_B_RXMIT_PDU_HDR_SHIFT 1
+#define XSTORM_ISCSI_CONTEXT_SECTION_B_RXMIT_END_PDU (0x1<<2)
+#define XSTORM_ISCSI_CONTEXT_SECTION_B_RXMIT_END_PDU_SHIFT 2
+#define XSTORM_ISCSI_CONTEXT_SECTION_B_RXMIT_DR (0x1<<3)
+#define XSTORM_ISCSI_CONTEXT_SECTION_B_RXMIT_DR_SHIFT 3
+#define XSTORM_ISCSI_CONTEXT_SECTION_B_RXMIT_START_DR (0x1<<4)
+#define XSTORM_ISCSI_CONTEXT_SECTION_B_RXMIT_START_DR_SHIFT 4
+#define XSTORM_ISCSI_CONTEXT_SECTION_B_RXMIT_PADDING (0x3<<5)
+#define XSTORM_ISCSI_CONTEXT_SECTION_B_RXMIT_PADDING_SHIFT 5
+#define XSTORM_ISCSI_CONTEXT_SECTION_B_ISCSI_CONT_FAST_RXMIT (0x1<<7)
+#define XSTORM_ISCSI_CONTEXT_SECTION_B_ISCSI_CONT_FAST_RXMIT_SHIFT 7
+	u8 rxmit_sge_idx;
+#elif defined(__LITTLE_ENDIAN)
+	u8 rxmit_sge_idx;
+	u8 rxmit_flags;
+#define XSTORM_ISCSI_CONTEXT_SECTION_B_NEW_HQ_BD (0x1<<0)
+#define XSTORM_ISCSI_CONTEXT_SECTION_B_NEW_HQ_BD_SHIFT 0
+#define XSTORM_ISCSI_CONTEXT_SECTION_B_RXMIT_PDU_HDR (0x1<<1)
+#define XSTORM_ISCSI_CONTEXT_SECTION_B_RXMIT_PDU_HDR_SHIFT 1
+#define XSTORM_ISCSI_CONTEXT_SECTION_B_RXMIT_END_PDU (0x1<<2)
+#define XSTORM_ISCSI_CONTEXT_SECTION_B_RXMIT_END_PDU_SHIFT 2
+#define XSTORM_ISCSI_CONTEXT_SECTION_B_RXMIT_DR (0x1<<3)
+#define XSTORM_ISCSI_CONTEXT_SECTION_B_RXMIT_DR_SHIFT 3
+#define XSTORM_ISCSI_CONTEXT_SECTION_B_RXMIT_START_DR (0x1<<4)
+#define XSTORM_ISCSI_CONTEXT_SECTION_B_RXMIT_START_DR_SHIFT 4
+#define XSTORM_ISCSI_CONTEXT_SECTION_B_RXMIT_PADDING (0x3<<5)
+#define XSTORM_ISCSI_CONTEXT_SECTION_B_RXMIT_PADDING_SHIFT 5
+#define XSTORM_ISCSI_CONTEXT_SECTION_B_ISCSI_CONT_FAST_RXMIT (0x1<<7)
+#define XSTORM_ISCSI_CONTEXT_SECTION_B_ISCSI_CONT_FAST_RXMIT_SHIFT 7
+	u16 r2tq_cons;
+#endif
+	u32 hq_rxmit_tcp_seq;
+};
+
+/*
+ * Xstorm iSCSI Storm Context
+ */
+struct xstorm_iscsi_st_context {
+	struct xstorm_common_context_section common;
+	struct xstorm_iscsi_context_section iscsi;
+};
+
+/*
+ * Iscsi connection context 
+ */
+struct iscsi_context {
+	struct ustorm_iscsi_st_context ustorm_st_context;
+	struct tstorm_iscsi_st_context tstorm_st_context;
+	struct xstorm_iscsi_ag_context xstorm_ag_context;
+	struct tstorm_iscsi_ag_context tstorm_ag_context;
+	struct cstorm_iscsi_ag_context cstorm_ag_context;
+	struct ustorm_iscsi_ag_context ustorm_ag_context;
+	struct timers_block_context timers_context;
+	struct regpair upb_context;
+	struct xstorm_iscsi_st_context xstorm_st_context;
+	struct regpair xpb_context;
+	struct cstorm_iscsi_st_context cstorm_st_context;
+};
+
+
+/*
+ * PDU header of an iSCSI DATA-OUT
+ */
+struct iscsi_data_pdu_hdr_little_endian {
+#if defined(__BIG_ENDIAN)
+	u8 opcode;
+	u8 op_attr;
+#define ISCSI_DATA_PDU_HDR_LITTLE_ENDIAN_RSRV1 (0x7F<<0)
+#define ISCSI_DATA_PDU_HDR_LITTLE_ENDIAN_RSRV1_SHIFT 0
+#define ISCSI_DATA_PDU_HDR_LITTLE_ENDIAN_FINAL_FLAG (0x1<<7)
+#define ISCSI_DATA_PDU_HDR_LITTLE_ENDIAN_FINAL_FLAG_SHIFT 7
+	u16 rsrv0;
+#elif defined(__LITTLE_ENDIAN)
+	u16 rsrv0;
+	u8 op_attr;
+#define ISCSI_DATA_PDU_HDR_LITTLE_ENDIAN_RSRV1 (0x7F<<0)
+#define ISCSI_DATA_PDU_HDR_LITTLE_ENDIAN_RSRV1_SHIFT 0
+#define ISCSI_DATA_PDU_HDR_LITTLE_ENDIAN_FINAL_FLAG (0x1<<7)
+#define ISCSI_DATA_PDU_HDR_LITTLE_ENDIAN_FINAL_FLAG_SHIFT 7
+	u8 opcode;
+#endif
+	u32 data_fields;
+#define ISCSI_DATA_PDU_HDR_LITTLE_ENDIAN_DATA_SEGMENT_LENGTH (0xFFFFFF<<0)
+#define ISCSI_DATA_PDU_HDR_LITTLE_ENDIAN_DATA_SEGMENT_LENGTH_SHIFT 0
+#define ISCSI_DATA_PDU_HDR_LITTLE_ENDIAN_TOTAL_AHS_LENGTH (0xFF<<24)
+#define ISCSI_DATA_PDU_HDR_LITTLE_ENDIAN_TOTAL_AHS_LENGTH_SHIFT 24
+	struct regpair lun;
+	u32 itt;
+	u32 ttt;
+	u32 rsrv2;
+	u32 exp_stat_sn;
+	u32 rsrv3;
+	u32 data_sn;
+	u32 buffer_offset;
+	u32 rsrv4;
+};
+
+
+/*
+ * PDU header of an iSCSI login request
+ */
+struct iscsi_login_req_hdr_little_endian {
+#if defined(__BIG_ENDIAN)
+	u8 opcode;
+	u8 op_attr;
+#define ISCSI_LOGIN_REQ_HDR_LITTLE_ENDIAN_NSG (0x3<<0)
+#define ISCSI_LOGIN_REQ_HDR_LITTLE_ENDIAN_NSG_SHIFT 0
+#define ISCSI_LOGIN_REQ_HDR_LITTLE_ENDIAN_CSG (0x3<<2)
+#define ISCSI_LOGIN_REQ_HDR_LITTLE_ENDIAN_CSG_SHIFT 2
+#define ISCSI_LOGIN_REQ_HDR_LITTLE_ENDIAN_RSRV0 (0x3<<4)
+#define ISCSI_LOGIN_REQ_HDR_LITTLE_ENDIAN_RSRV0_SHIFT 4
+#define ISCSI_LOGIN_REQ_HDR_LITTLE_ENDIAN_CONTINUE_FLG (0x1<<6)
+#define ISCSI_LOGIN_REQ_HDR_LITTLE_ENDIAN_CONTINUE_FLG_SHIFT 6
+#define ISCSI_LOGIN_REQ_HDR_LITTLE_ENDIAN_TRANSIT (0x1<<7)
+#define ISCSI_LOGIN_REQ_HDR_LITTLE_ENDIAN_TRANSIT_SHIFT 7
+	u8 version_max;
+	u8 version_min;
+#elif defined(__LITTLE_ENDIAN)
+	u8 version_min;
+	u8 version_max;
+	u8 op_attr;
+#define ISCSI_LOGIN_REQ_HDR_LITTLE_ENDIAN_NSG (0x3<<0)
+#define ISCSI_LOGIN_REQ_HDR_LITTLE_ENDIAN_NSG_SHIFT 0
+#define ISCSI_LOGIN_REQ_HDR_LITTLE_ENDIAN_CSG (0x3<<2)
+#define ISCSI_LOGIN_REQ_HDR_LITTLE_ENDIAN_CSG_SHIFT 2
+#define ISCSI_LOGIN_REQ_HDR_LITTLE_ENDIAN_RSRV0 (0x3<<4)
+#define ISCSI_LOGIN_REQ_HDR_LITTLE_ENDIAN_RSRV0_SHIFT 4
+#define ISCSI_LOGIN_REQ_HDR_LITTLE_ENDIAN_CONTINUE_FLG (0x1<<6)
+#define ISCSI_LOGIN_REQ_HDR_LITTLE_ENDIAN_CONTINUE_FLG_SHIFT 6
+#define ISCSI_LOGIN_REQ_HDR_LITTLE_ENDIAN_TRANSIT (0x1<<7)
+#define ISCSI_LOGIN_REQ_HDR_LITTLE_ENDIAN_TRANSIT_SHIFT 7
+	u8 opcode;
+#endif
+	u32 data_fields;
+#define ISCSI_LOGIN_REQ_HDR_LITTLE_ENDIAN_DATA_SEGMENT_LENGTH (0xFFFFFF<<0)
+#define ISCSI_LOGIN_REQ_HDR_LITTLE_ENDIAN_DATA_SEGMENT_LENGTH_SHIFT 0
+#define ISCSI_LOGIN_REQ_HDR_LITTLE_ENDIAN_TOTAL_AHS_LENGTH (0xFF<<24)
+#define ISCSI_LOGIN_REQ_HDR_LITTLE_ENDIAN_TOTAL_AHS_LENGTH_SHIFT 24
+	u32 isid_lo;
+#if defined(__BIG_ENDIAN)
+	u16 isid_hi;
+	u16 tsih;
+#elif defined(__LITTLE_ENDIAN)
+	u16 tsih;
+	u16 isid_hi;
+#endif
+	u32 itt;
+#if defined(__BIG_ENDIAN)
+	u16 cid;
+	u16 rsrv1;
+#elif defined(__LITTLE_ENDIAN)
+	u16 rsrv1;
+	u16 cid;
+#endif
+	u32 cmd_sn;
+	u32 exp_stat_sn;
+	u32 rsrv2[4];
+};
+
+/*
+ * PDU header of an iSCSI logout request
+ */
+struct iscsi_logout_req_hdr_little_endian {
+#if defined(__BIG_ENDIAN)
+	u8 opcode;
+	u8 op_attr;
+#define ISCSI_LOGOUT_REQ_HDR_LITTLE_ENDIAN_REASON_CODE (0x7F<<0)
+#define ISCSI_LOGOUT_REQ_HDR_LITTLE_ENDIAN_REASON_CODE_SHIFT 0
+#define ISCSI_LOGOUT_REQ_HDR_LITTLE_ENDIAN_RSRV1_1 (0x1<<7)
+#define ISCSI_LOGOUT_REQ_HDR_LITTLE_ENDIAN_RSRV1_1_SHIFT 7
+	u16 rsrv0;
+#elif defined(__LITTLE_ENDIAN)
+	u16 rsrv0;
+	u8 op_attr;
+#define ISCSI_LOGOUT_REQ_HDR_LITTLE_ENDIAN_REASON_CODE (0x7F<<0)
+#define ISCSI_LOGOUT_REQ_HDR_LITTLE_ENDIAN_REASON_CODE_SHIFT 0
+#define ISCSI_LOGOUT_REQ_HDR_LITTLE_ENDIAN_RSRV1_1 (0x1<<7)
+#define ISCSI_LOGOUT_REQ_HDR_LITTLE_ENDIAN_RSRV1_1_SHIFT 7
+	u8 opcode;
+#endif
+	u32 data_fields;
+#define ISCSI_LOGOUT_REQ_HDR_LITTLE_ENDIAN_DATA_SEGMENT_LENGTH (0xFFFFFF<<0)
+#define ISCSI_LOGOUT_REQ_HDR_LITTLE_ENDIAN_DATA_SEGMENT_LENGTH_SHIFT 0
+#define ISCSI_LOGOUT_REQ_HDR_LITTLE_ENDIAN_TOTAL_AHS_LENGTH (0xFF<<24)
+#define ISCSI_LOGOUT_REQ_HDR_LITTLE_ENDIAN_TOTAL_AHS_LENGTH_SHIFT 24
+	u32 rsrv2[2];
+	u32 itt;
+#if defined(__BIG_ENDIAN)
+	u16 cid;
+	u16 rsrv1;
+#elif defined(__LITTLE_ENDIAN)
+	u16 rsrv1;
+	u16 cid;
+#endif
+	u32 cmd_sn;
+	u32 exp_stat_sn;
+	u32 rsrv3[4];
+};
+
+/*
+ * PDU header of an iSCSI TMF request
+ */
+struct iscsi_tmf_req_hdr_little_endian {
+#if defined(__BIG_ENDIAN)
+	u8 opcode;
+	u8 op_attr;
+#define ISCSI_TMF_REQ_HDR_LITTLE_ENDIAN_FUNCTION (0x7F<<0)
+#define ISCSI_TMF_REQ_HDR_LITTLE_ENDIAN_FUNCTION_SHIFT 0
+#define ISCSI_TMF_REQ_HDR_LITTLE_ENDIAN_RSRV1_1 (0x1<<7)
+#define ISCSI_TMF_REQ_HDR_LITTLE_ENDIAN_RSRV1_1_SHIFT 7
+	u16 rsrv0;
+#elif defined(__LITTLE_ENDIAN)
+	u16 rsrv0;
+	u8 op_attr;
+#define ISCSI_TMF_REQ_HDR_LITTLE_ENDIAN_FUNCTION (0x7F<<0)
+#define ISCSI_TMF_REQ_HDR_LITTLE_ENDIAN_FUNCTION_SHIFT 0
+#define ISCSI_TMF_REQ_HDR_LITTLE_ENDIAN_RSRV1_1 (0x1<<7)
+#define ISCSI_TMF_REQ_HDR_LITTLE_ENDIAN_RSRV1_1_SHIFT 7
+	u8 opcode;
+#endif
+	u32 data_fields;
+#define ISCSI_TMF_REQ_HDR_LITTLE_ENDIAN_DATA_SEGMENT_LENGTH (0xFFFFFF<<0)
+#define ISCSI_TMF_REQ_HDR_LITTLE_ENDIAN_DATA_SEGMENT_LENGTH_SHIFT 0
+#define ISCSI_TMF_REQ_HDR_LITTLE_ENDIAN_TOTAL_AHS_LENGTH (0xFF<<24)
+#define ISCSI_TMF_REQ_HDR_LITTLE_ENDIAN_TOTAL_AHS_LENGTH_SHIFT 24
+	struct regpair lun;
+	u32 itt;
+	u32 referenced_task_tag;
+	u32 cmd_sn;
+	u32 exp_stat_sn;
+	u32 ref_cmd_sn;
+	u32 exp_data_sn;
+	u32 rsrv2[2];
+};
+
+/*
+ * PDU header of an iSCSI Text request
+ */
+struct iscsi_text_req_hdr_little_endian {
+#if defined(__BIG_ENDIAN)
+	u8 opcode;
+	u8 op_attr;
+#define ISCSI_TEXT_REQ_HDR_LITTLE_ENDIAN_RSRV1 (0x3F<<0)
+#define ISCSI_TEXT_REQ_HDR_LITTLE_ENDIAN_RSRV1_SHIFT 0
+#define ISCSI_TEXT_REQ_HDR_LITTLE_ENDIAN_CONTINUE_FLG (0x1<<6)
+#define ISCSI_TEXT_REQ_HDR_LITTLE_ENDIAN_CONTINUE_FLG_SHIFT 6
+#define ISCSI_TEXT_REQ_HDR_LITTLE_ENDIAN_FINAL (0x1<<7)
+#define ISCSI_TEXT_REQ_HDR_LITTLE_ENDIAN_FINAL_SHIFT 7
+	u16 rsrv0;
+#elif defined(__LITTLE_ENDIAN)
+	u16 rsrv0;
+	u8 op_attr;
+#define ISCSI_TEXT_REQ_HDR_LITTLE_ENDIAN_RSRV1 (0x3F<<0)
+#define ISCSI_TEXT_REQ_HDR_LITTLE_ENDIAN_RSRV1_SHIFT 0
+#define ISCSI_TEXT_REQ_HDR_LITTLE_ENDIAN_CONTINUE_FLG (0x1<<6)
+#define ISCSI_TEXT_REQ_HDR_LITTLE_ENDIAN_CONTINUE_FLG_SHIFT 6
+#define ISCSI_TEXT_REQ_HDR_LITTLE_ENDIAN_FINAL (0x1<<7)
+#define ISCSI_TEXT_REQ_HDR_LITTLE_ENDIAN_FINAL_SHIFT 7
+	u8 opcode;
+#endif
+	u32 data_fields;
+#define ISCSI_TEXT_REQ_HDR_LITTLE_ENDIAN_DATA_SEGMENT_LENGTH (0xFFFFFF<<0)
+#define ISCSI_TEXT_REQ_HDR_LITTLE_ENDIAN_DATA_SEGMENT_LENGTH_SHIFT 0
+#define ISCSI_TEXT_REQ_HDR_LITTLE_ENDIAN_TOTAL_AHS_LENGTH (0xFF<<24)
+#define ISCSI_TEXT_REQ_HDR_LITTLE_ENDIAN_TOTAL_AHS_LENGTH_SHIFT 24
+	struct regpair lun;
+	u32 itt;
+	u32 ttt;
+	u32 cmd_sn;
+	u32 exp_stat_sn;
+	u32 rsrv3[4];
+};
+
+/*
+ * PDU header of an iSCSI Nop-Out
+ */
+struct iscsi_nop_out_hdr_little_endian {
+#if defined(__BIG_ENDIAN)
+	u8 opcode;
+	u8 op_attr;
+#define ISCSI_NOP_OUT_HDR_LITTLE_ENDIAN_RSRV1 (0x7F<<0)
+#define ISCSI_NOP_OUT_HDR_LITTLE_ENDIAN_RSRV1_SHIFT 0
+#define ISCSI_NOP_OUT_HDR_LITTLE_ENDIAN_RSRV2_1 (0x1<<7)
+#define ISCSI_NOP_OUT_HDR_LITTLE_ENDIAN_RSRV2_1_SHIFT 7
+	u16 rsrv0;
+#elif defined(__LITTLE_ENDIAN)
+	u16 rsrv0;
+	u8 op_attr;
+#define ISCSI_NOP_OUT_HDR_LITTLE_ENDIAN_RSRV1 (0x7F<<0)
+#define ISCSI_NOP_OUT_HDR_LITTLE_ENDIAN_RSRV1_SHIFT 0
+#define ISCSI_NOP_OUT_HDR_LITTLE_ENDIAN_RSRV2_1 (0x1<<7)
+#define ISCSI_NOP_OUT_HDR_LITTLE_ENDIAN_RSRV2_1_SHIFT 7
+	u8 opcode;
+#endif
+	u32 data_fields;
+#define ISCSI_NOP_OUT_HDR_LITTLE_ENDIAN_DATA_SEGMENT_LENGTH (0xFFFFFF<<0)
+#define ISCSI_NOP_OUT_HDR_LITTLE_ENDIAN_DATA_SEGMENT_LENGTH_SHIFT 0
+#define ISCSI_NOP_OUT_HDR_LITTLE_ENDIAN_TOTAL_AHS_LENGTH (0xFF<<24)
+#define ISCSI_NOP_OUT_HDR_LITTLE_ENDIAN_TOTAL_AHS_LENGTH_SHIFT 24
+	struct regpair lun;
+	u32 itt;
+	u32 ttt;
+	u32 cmd_sn;
+	u32 exp_stat_sn;
+	u32 rsrv3[4];
+};
+
+/*
+ * iscsi pdu headers in little endian form.
+ */
+union iscsi_pdu_headers_little_endian {
+	u32 fullHeaderSize[12];
+	struct iscsi_cmd_pdu_hdr_little_endian command_pdu_hdr;
+	struct iscsi_data_pdu_hdr_little_endian data_out_pdu_hdr;
+	struct iscsi_login_req_hdr_little_endian login_req_pdu_hdr;
+	struct iscsi_logout_req_hdr_little_endian logout_req_pdu_hdr;
+	struct iscsi_tmf_req_hdr_little_endian tmf_req_pdu_hdr;
+	struct iscsi_text_req_hdr_little_endian text_req_pdu_hdr;
+	struct iscsi_nop_out_hdr_little_endian nop_out_pdu_hdr;
+};
+
+struct iscsi_hq_bd {
+	union iscsi_pdu_headers_little_endian pdu_header;
+#if defined(__BIG_ENDIAN)
+	u16 reserved1;
+	u16 lcl_cmp_flg;
+#elif defined(__LITTLE_ENDIAN)
+	u16 lcl_cmp_flg;
+	u16 reserved1;
+#endif
+	u32 sgl_base_lo;
+	u32 sgl_base_hi;
+#if defined(__BIG_ENDIAN)
+	u8 sgl_size;
+	u8 sge_index;
+	u16 sge_offset;
+#elif defined(__LITTLE_ENDIAN)
+	u16 sge_offset;
+	u8 sge_index;
+	u8 sgl_size;
+#endif
+};
+
+
+/*
+ * CQE data for L2 OOO connection $$KEEP_ENDIANNESS$$
+ */
+struct iscsi_l2_ooo_data {
+	__le32 iscsi_cid;
+	u8 drop_isle;
+	u8 drop_size;
+	u8 ooo_opcode;
+	u8 ooo_isle;
+	u8 reserved[8];
+};
+
+
+
+
+
+
+struct iscsi_task_context_entry_xuc_c_write_only {
+	u32 total_data_acked;
+};
+
+struct iscsi_task_context_r2t_table_entry {
+	u32 ttt;
+	u32 desired_data_len;
+};
+
+struct iscsi_task_context_entry_xuc_u_write_only {
+	u32 exp_r2t_sn;
+	struct iscsi_task_context_r2t_table_entry r2t_table[4];
+#if defined(__BIG_ENDIAN)
+	u16 data_in_count;
+	u8 cq_id;
+	u8 valid_1b;
+#elif defined(__LITTLE_ENDIAN)
+	u8 valid_1b;
+	u8 cq_id;
+	u16 data_in_count;
+#endif
+};
+
+struct iscsi_task_context_entry_xuc {
+	struct iscsi_task_context_entry_xuc_c_write_only write_c;
+	u32 exp_data_transfer_len;
+	struct iscsi_task_context_entry_xuc_x_write_only write_x;
+	u32 lun_lo;
+	struct iscsi_task_context_entry_xuc_xu_write_both write_xu;
+	u32 lun_hi;
+	struct iscsi_task_context_entry_xuc_u_write_only write_u;
+};
+
+struct iscsi_task_context_entry_u {
+	u32 exp_r2t_buff_offset;
+	u32 rem_rcv_len;
+	u32 exp_data_sn;
+};
+
+struct iscsi_task_context_entry {
+	struct iscsi_task_context_entry_x tce_x;
+#if defined(__BIG_ENDIAN)
+	u16 data_out_count;
+	u16 rsrv0;
+#elif defined(__LITTLE_ENDIAN)
+	u16 rsrv0;
+	u16 data_out_count;
+#endif
+	struct iscsi_task_context_entry_xuc tce_xuc;
+	struct iscsi_task_context_entry_u tce_u;
+	u32 rsrv1[7];
+};
+
+
+
+
+
+
+
+
+struct iscsi_task_context_entry_xuc_x_init_only {
+	struct regpair lun;
+	u32 exp_data_transfer_len;
+};
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*
+ * ipv6 structure
+ */
+struct ip_v6_addr {
+	u32 ip_addr_lo_lo;
+	u32 ip_addr_lo_hi;
+	u32 ip_addr_hi_lo;
+	u32 ip_addr_hi_hi;
+};
+
+
+
+/*
+ * l5cm- connection identification params
+ */
+struct l5cm_conn_addr_params {
+	u32 pmtu;
+#if defined(__BIG_ENDIAN)
+	u8 remote_addr_3;
+	u8 remote_addr_2;
+	u8 remote_addr_1;
+	u8 remote_addr_0;
+#elif defined(__LITTLE_ENDIAN)
+	u8 remote_addr_0;
+	u8 remote_addr_1;
+	u8 remote_addr_2;
+	u8 remote_addr_3;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 params;
+#define L5CM_CONN_ADDR_PARAMS_IP_VERSION (0x1<<0)
+#define L5CM_CONN_ADDR_PARAMS_IP_VERSION_SHIFT 0
+#define L5CM_CONN_ADDR_PARAMS_RSRV (0x7FFF<<1)
+#define L5CM_CONN_ADDR_PARAMS_RSRV_SHIFT 1
+	u8 remote_addr_5;
+	u8 remote_addr_4;
+#elif defined(__LITTLE_ENDIAN)
+	u8 remote_addr_4;
+	u8 remote_addr_5;
+	u16 params;
+#define L5CM_CONN_ADDR_PARAMS_IP_VERSION (0x1<<0)
+#define L5CM_CONN_ADDR_PARAMS_IP_VERSION_SHIFT 0
+#define L5CM_CONN_ADDR_PARAMS_RSRV (0x7FFF<<1)
+#define L5CM_CONN_ADDR_PARAMS_RSRV_SHIFT 1
+#endif
+	struct ip_v6_addr local_ip_addr;
+	struct ip_v6_addr remote_ip_addr;
+	u32 ipv6_flow_label_20b;
+	u32 reserved1;
+#if defined(__BIG_ENDIAN)
+	u16 remote_tcp_port;
+	u16 local_tcp_port;
+#elif defined(__LITTLE_ENDIAN)
+	u16 local_tcp_port;
+	u16 remote_tcp_port;
+#endif
+};
+
+/*
+ * l5cm-xstorm connection buffer
+ */
+struct l5cm_xstorm_conn_buffer {
+#if defined(__BIG_ENDIAN)
+	u16 rsrv1;
+	u16 params;
+#define L5CM_XSTORM_CONN_BUFFER_NAGLE_ENABLE (0x1<<0)
+#define L5CM_XSTORM_CONN_BUFFER_NAGLE_ENABLE_SHIFT 0
+#define L5CM_XSTORM_CONN_BUFFER_RSRV (0x7FFF<<1)
+#define L5CM_XSTORM_CONN_BUFFER_RSRV_SHIFT 1
+#elif defined(__LITTLE_ENDIAN)
+	u16 params;
+#define L5CM_XSTORM_CONN_BUFFER_NAGLE_ENABLE (0x1<<0)
+#define L5CM_XSTORM_CONN_BUFFER_NAGLE_ENABLE_SHIFT 0
+#define L5CM_XSTORM_CONN_BUFFER_RSRV (0x7FFF<<1)
+#define L5CM_XSTORM_CONN_BUFFER_RSRV_SHIFT 1
+	u16 rsrv1;
+#endif
+#if defined(__BIG_ENDIAN)
+	u16 mss;
+	u16 pseudo_header_checksum;
+#elif defined(__LITTLE_ENDIAN)
+	u16 pseudo_header_checksum;
+	u16 mss;
+#endif
+	u32 rcv_buf;
+	u32 rsrv2;
+	struct regpair context_addr;
+};
+
+/*
+ * l5cm-tstorm connection buffer
+ */
+struct l5cm_tstorm_conn_buffer {
+	u32 rsrv1[2];
+#if defined(__BIG_ENDIAN)
+	u16 params;
+#define L5CM_TSTORM_CONN_BUFFER_DELAYED_ACK_ENABLE (0x1<<0)
+#define L5CM_TSTORM_CONN_BUFFER_DELAYED_ACK_ENABLE_SHIFT 0
+#define L5CM_TSTORM_CONN_BUFFER_RSRV (0x7FFF<<1)
+#define L5CM_TSTORM_CONN_BUFFER_RSRV_SHIFT 1
+	u8 ka_max_probe_count;
+	u8 ka_enable;
+#elif defined(__LITTLE_ENDIAN)
+	u8 ka_enable;
+	u8 ka_max_probe_count;
+	u16 params;
+#define L5CM_TSTORM_CONN_BUFFER_DELAYED_ACK_ENABLE (0x1<<0)
+#define L5CM_TSTORM_CONN_BUFFER_DELAYED_ACK_ENABLE_SHIFT 0
+#define L5CM_TSTORM_CONN_BUFFER_RSRV (0x7FFF<<1)
+#define L5CM_TSTORM_CONN_BUFFER_RSRV_SHIFT 1
+#endif
+	u32 ka_timeout;
+	u32 ka_interval;
+	u32 max_rt_time;
+};
+
+/*
+ * l5cm connection buffer for active side
+ */
+struct l5cm_active_conn_buffer {
+	struct l5cm_conn_addr_params conn_addr_buf;
+	struct l5cm_xstorm_conn_buffer xstorm_conn_buffer;
+	struct l5cm_tstorm_conn_buffer tstorm_conn_buffer;
+};
+
+
+
+/*
+ * The l5cm opaque buffer passed in add new connection ramrod passive side
+ */
+struct l5cm_hash_input_string {
+	u32 __opaque1;
+#if defined(__BIG_ENDIAN)
+	u16 __opaque3;
+	u16 __opaque2;
+#elif defined(__LITTLE_ENDIAN)
+	u16 __opaque2;
+	u16 __opaque3;
+#endif
+	struct ip_v6_addr __opaque4;
+	struct ip_v6_addr __opaque5;
+	u32 __opaque6;
+	u32 __opaque7[5];
+};
+
+
+/*
+ * syn cookie component
+ */
+struct l5cm_syn_cookie_comp {
+	u32 __opaque;
+};
+
+/*
+ * data related to listeners of a TCP port
+ */
+struct l5cm_port_listener_data {
+	u8 params;
+#define L5CM_PORT_LISTENER_DATA_ENABLE (0x1<<0)
+#define L5CM_PORT_LISTENER_DATA_ENABLE_SHIFT 0
+#define L5CM_PORT_LISTENER_DATA_IP_INDEX (0xF<<1)
+#define L5CM_PORT_LISTENER_DATA_IP_INDEX_SHIFT 1
+#define L5CM_PORT_LISTENER_DATA_NET_FILTER (0x1<<5)
+#define L5CM_PORT_LISTENER_DATA_NET_FILTER_SHIFT 5
+#define L5CM_PORT_LISTENER_DATA_DEFFERED_MODE (0x1<<6)
+#define L5CM_PORT_LISTENER_DATA_DEFFERED_MODE_SHIFT 6
+#define L5CM_PORT_LISTENER_DATA_MPA_MODE (0x1<<7)
+#define L5CM_PORT_LISTENER_DATA_MPA_MODE_SHIFT 7
+};
+
+/*
+ * Opaque structure passed from U to X when final ack arrives
+ */
+struct l5cm_opaque_buf {
+	u32 __opaque1;
+	u32 __opaque2;
+	u32 __opaque3;
+	u32 __opaque4;
+	struct l5cm_syn_cookie_comp __opaque5;
+#if defined(__BIG_ENDIAN)
+	u16 rsrv2;
+	u8 rsrv;
+	struct l5cm_port_listener_data __opaque6;
+#elif defined(__LITTLE_ENDIAN)
+	struct l5cm_port_listener_data __opaque6;
+	u8 rsrv;
+	u16 rsrv2;
+#endif
+};
+
+
+/*
+ * l5cm slow path element
+ */
+struct l5cm_packet_size {
+	u32 size;
+	u32 rsrv;
+};
+
+
+/*
+ * The final-ack union structure in PCS entry after final ack arrived
+ */
+struct l5cm_pcse_ack {
+	struct l5cm_xstorm_conn_buffer tx_socket_params;
+	struct l5cm_opaque_buf opaque_buf;
+	struct l5cm_tstorm_conn_buffer rx_socket_params;
+};
+
+
+/*
+ * The syn union structure in PCS entry after syn arrived
+ */
+struct l5cm_pcse_syn {
+	struct l5cm_opaque_buf opaque_buf;
+	u32 rsrv[12];
+};
+
+
+/*
+ * pcs entry data for passive connections
+ */
+struct l5cm_pcs_attributes {
+#if defined(__BIG_ENDIAN)
+	u16 pcs_id;
+	u8 status;
+	u8 flags;
+#define L5CM_PCS_ATTRIBUTES_NET_FILTER (0x1<<0)
+#define L5CM_PCS_ATTRIBUTES_NET_FILTER_SHIFT 0
+#define L5CM_PCS_ATTRIBUTES_CALCULATE_HASH (0x1<<1)
+#define L5CM_PCS_ATTRIBUTES_CALCULATE_HASH_SHIFT 1
+#define L5CM_PCS_ATTRIBUTES_COMPARE_HASH_RESULT (0x1<<2)
+#define L5CM_PCS_ATTRIBUTES_COMPARE_HASH_RESULT_SHIFT 2
+#define L5CM_PCS_ATTRIBUTES_QUERY_ULP_ACCEPT (0x1<<3)
+#define L5CM_PCS_ATTRIBUTES_QUERY_ULP_ACCEPT_SHIFT 3
+#define L5CM_PCS_ATTRIBUTES_FIND_DEST_MAC (0x1<<4)
+#define L5CM_PCS_ATTRIBUTES_FIND_DEST_MAC_SHIFT 4
+#define L5CM_PCS_ATTRIBUTES_L4_OFFLOAD (0x1<<5)
+#define L5CM_PCS_ATTRIBUTES_L4_OFFLOAD_SHIFT 5
+#define L5CM_PCS_ATTRIBUTES_FORWARD_PACKET (0x1<<6)
+#define L5CM_PCS_ATTRIBUTES_FORWARD_PACKET_SHIFT 6
+#define L5CM_PCS_ATTRIBUTES_RSRV (0x1<<7)
+#define L5CM_PCS_ATTRIBUTES_RSRV_SHIFT 7
+#elif defined(__LITTLE_ENDIAN)
+	u8 flags;
+#define L5CM_PCS_ATTRIBUTES_NET_FILTER (0x1<<0)
+#define L5CM_PCS_ATTRIBUTES_NET_FILTER_SHIFT 0
+#define L5CM_PCS_ATTRIBUTES_CALCULATE_HASH (0x1<<1)
+#define L5CM_PCS_ATTRIBUTES_CALCULATE_HASH_SHIFT 1
+#define L5CM_PCS_ATTRIBUTES_COMPARE_HASH_RESULT (0x1<<2)
+#define L5CM_PCS_ATTRIBUTES_COMPARE_HASH_RESULT_SHIFT 2
+#define L5CM_PCS_ATTRIBUTES_QUERY_ULP_ACCEPT (0x1<<3)
+#define L5CM_PCS_ATTRIBUTES_QUERY_ULP_ACCEPT_SHIFT 3
+#define L5CM_PCS_ATTRIBUTES_FIND_DEST_MAC (0x1<<4)
+#define L5CM_PCS_ATTRIBUTES_FIND_DEST_MAC_SHIFT 4
+#define L5CM_PCS_ATTRIBUTES_L4_OFFLOAD (0x1<<5)
+#define L5CM_PCS_ATTRIBUTES_L4_OFFLOAD_SHIFT 5
+#define L5CM_PCS_ATTRIBUTES_FORWARD_PACKET (0x1<<6)
+#define L5CM_PCS_ATTRIBUTES_FORWARD_PACKET_SHIFT 6
+#define L5CM_PCS_ATTRIBUTES_RSRV (0x1<<7)
+#define L5CM_PCS_ATTRIBUTES_RSRV_SHIFT 7
+	u8 status;
+	u16 pcs_id;
+#endif
+};
+
+
+union l5cm_seg_params {
+	struct l5cm_pcse_syn syn_seg_params;
+	struct l5cm_pcse_ack ack_seg_params;
+};
+
+/*
+ * pcs entry data for passive connections
+ */
+struct l5cm_pcs_hdr {
+	struct l5cm_hash_input_string hash_input_string;
+	struct l5cm_conn_addr_params conn_addr_buf;
+	u32 cid;
+	u32 hash_result;
+	union l5cm_seg_params seg_params;
+	struct l5cm_pcs_attributes att;
+#if defined(__BIG_ENDIAN)
+	u16 rsrv;
+	u16 rx_seg_size;
+#elif defined(__LITTLE_ENDIAN)
+	u16 rx_seg_size;
+	u16 rsrv;
+#endif
+};
+
+/*
+ * pcs entry for passive connections
+ */
+struct l5cm_pcs_entry {
+	struct l5cm_pcs_hdr hdr;
+	u8 rx_segment[1516];
+};
+
+
+
+
+/*
+ * l5cm connection parameters
+ */
+union l5cm_reduce_param_union {
+	u32 opaque1;
+	u32 opaque2;
+};
+
+/*
+ * l5cm connection parameters
+ */
+struct l5cm_reduce_conn {
+	union l5cm_reduce_param_union opaque1;
+	u32 opaque2;
+};
+
+/*
+ * l5cm slow path element
+ */
+union l5cm_specific_data {
+	u8 protocol_data[8];
+	struct regpair phy_address;
+	struct l5cm_packet_size packet_size;
+	struct l5cm_reduce_conn reduced_conn;
+};
+
+/*
+ * l5 slow path element
+ */
+struct l5cm_spe {
+	struct spe_hdr hdr;
+	union l5cm_specific_data data;
+};
+
+
+
+
+/*
+ * Termination variables
+ */
+struct l5cm_term_vars {
+	u8 BitMap;
+#define L5CM_TERM_VARS_TCP_STATE (0xF<<0)
+#define L5CM_TERM_VARS_TCP_STATE_SHIFT 0
+#define L5CM_TERM_VARS_FIN_RECEIVED_SBIT (0x1<<4)
+#define L5CM_TERM_VARS_FIN_RECEIVED_SBIT_SHIFT 4
+#define L5CM_TERM_VARS_ACK_ON_FIN_RECEIVED_SBIT (0x1<<5)
+#define L5CM_TERM_VARS_ACK_ON_FIN_RECEIVED_SBIT_SHIFT 5
+#define L5CM_TERM_VARS_TERM_ON_CHIP (0x1<<6)
+#define L5CM_TERM_VARS_TERM_ON_CHIP_SHIFT 6
+#define L5CM_TERM_VARS_RSRV (0x1<<7)
+#define L5CM_TERM_VARS_RSRV_SHIFT 7
+};
+
+
+
+
+/*
+ * Tstorm Tcp flags
+ */
+struct tstorm_l5cm_tcp_flags {
+	u16 flags;
+#define TSTORM_L5CM_TCP_FLAGS_VLAN_ID (0xFFF<<0)
+#define TSTORM_L5CM_TCP_FLAGS_VLAN_ID_SHIFT 0
+#define TSTORM_L5CM_TCP_FLAGS_RSRV0 (0x1<<12)
+#define TSTORM_L5CM_TCP_FLAGS_RSRV0_SHIFT 12
+#define TSTORM_L5CM_TCP_FLAGS_TS_ENABLED (0x1<<13)
+#define TSTORM_L5CM_TCP_FLAGS_TS_ENABLED_SHIFT 13
+#define TSTORM_L5CM_TCP_FLAGS_RSRV1 (0x3<<14)
+#define TSTORM_L5CM_TCP_FLAGS_RSRV1_SHIFT 14
+};
+
+
+/*
+ * Xstorm Tcp flags
+ */
+struct xstorm_l5cm_tcp_flags {
+	u8 flags;
+#define XSTORM_L5CM_TCP_FLAGS_ENC_ENABLED (0x1<<0)
+#define XSTORM_L5CM_TCP_FLAGS_ENC_ENABLED_SHIFT 0
+#define XSTORM_L5CM_TCP_FLAGS_TS_ENABLED (0x1<<1)
+#define XSTORM_L5CM_TCP_FLAGS_TS_ENABLED_SHIFT 1
+#define XSTORM_L5CM_TCP_FLAGS_WND_SCL_EN (0x1<<2)
+#define XSTORM_L5CM_TCP_FLAGS_WND_SCL_EN_SHIFT 2
+#define XSTORM_L5CM_TCP_FLAGS_RSRV (0x1F<<3)
+#define XSTORM_L5CM_TCP_FLAGS_RSRV_SHIFT 3
+};
+
+
+
+/*
+ * Out-of-order states
+ */
+enum tcp_ooo_event {
+	TCP_EVENT_ADD_PEN=0,
+	TCP_EVENT_ADD_NEW_ISLE=1,
+	TCP_EVENT_ADD_ISLE_RIGHT=2,
+	TCP_EVENT_ADD_ISLE_LEFT=3,
+	TCP_EVENT_JOIN=4,
+	TCP_EVENT_NOP=5,
+	MAX_TCP_OOO_EVENT
+};
+
+
+/*
+ * OOO support modes
+ */
+enum tcp_tstorm_ooo {
+	TCP_TSTORM_OOO_DROP_AND_PROC_ACK=0,
+	TCP_TSTORM_OOO_SEND_PURE_ACK=1,
+	TCP_TSTORM_OOO_SUPPORTED=2,
+	MAX_TCP_TSTORM_OOO
+};
+
+
+
+
+
+
+
+
+
+#endif /* __5710_HSI_CNIC_LE__ */
diff -r 2e9e6572f41c drivers/net/bnx2/cnic_if.h
--- /dev/null
+++ b/drivers/net/bnx2/cnic_if.h
@@ -0,0 +1,442 @@
+/* cnic_if.h: Broadcom CNIC core network driver.
+ *
+ * Copyright (c) 2006 - 2012 Broadcom Corporation
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation.
+ *
+ */
+
+
+#ifndef CNIC_IF_H
+#define CNIC_IF_H
+
+#include "bnx2x_mfw_req.h"
+
+#define CNIC_MODULE_VERSION	"2.5.9d"
+#define CNIC_MODULE_RELDATE	"Mar 07, 2012"
+
+#define CNIC_ULP_RDMA		0
+#define CNIC_ULP_ISCSI		1
+#define CNIC_ULP_FCOE		2
+#define CNIC_ULP_L4		3
+#define MAX_CNIC_ULP_TYPE_EXT	3
+#define MAX_CNIC_ULP_TYPE	4
+
+#ifndef VLAN_TAG_PRESENT
+#define VLAN_TAG_PRESENT	0x1000
+#endif
+
+struct kwqe {
+	u32 kwqe_op_flag;
+
+#define KWQE_QID_SHIFT		8
+#define KWQE_OPCODE_MASK	0x00ff0000
+#define KWQE_OPCODE_SHIFT	16
+#define KWQE_OPCODE(x)		((x & KWQE_OPCODE_MASK) >> KWQE_OPCODE_SHIFT)
+#define KWQE_LAYER_MASK			0x70000000
+#define KWQE_LAYER_SHIFT		28
+#define KWQE_FLAGS_LAYER_MASK_L2	(2<<28)
+#define KWQE_FLAGS_LAYER_MASK_L3	(3<<28)
+#define KWQE_FLAGS_LAYER_MASK_L4	(4<<28)
+#define KWQE_FLAGS_LAYER_MASK_L5_RDMA	(5<<28)
+#define KWQE_FLAGS_LAYER_MASK_L5_ISCSI	(6<<28)
+#define KWQE_FLAGS_LAYER_MASK_L5_FCOE	(7<<28)
+
+	u32 kwqe_info0;
+	u32 kwqe_info1;
+	u32 kwqe_info2;
+	u32 kwqe_info3;
+	u32 kwqe_info4;
+	u32 kwqe_info5;
+	u32 kwqe_info6;
+};
+
+struct kwqe_16 {
+	u32 kwqe_info0;
+	u32 kwqe_info1;
+	u32 kwqe_info2;
+	u32 kwqe_info3;
+};
+
+struct kcqe {
+	u32 kcqe_info0;
+	u32 kcqe_info1;
+	u32 kcqe_info2;
+	u32 kcqe_info3;
+	u32 kcqe_info4;
+	u32 kcqe_info5;
+	u32 kcqe_info6;
+	u32 kcqe_op_flag;
+		#define KCQE_RAMROD_COMPLETION		(0x1<<27) /* Everest */
+		#define KCQE_FLAGS_LAYER_MASK		(0x7<<28)
+		#define KCQE_FLAGS_LAYER_MASK_MISC	(0<<28)
+		#define KCQE_FLAGS_LAYER_MASK_L2	(2<<28)
+		#define KCQE_FLAGS_LAYER_MASK_L3	(3<<28)
+		#define KCQE_FLAGS_LAYER_MASK_L4	(4<<28)
+		#define KCQE_FLAGS_LAYER_MASK_L5_RDMA	(5<<28)
+		#define KCQE_FLAGS_LAYER_MASK_L5_ISCSI	(6<<28)
+		#define KCQE_FLAGS_LAYER_MASK_L5_FCOE	(7<<28)
+		#define KCQE_FLAGS_NEXT 		(1<<31)
+		#define KCQE_FLAGS_OPCODE_MASK		(0xff<<16)
+		#define KCQE_FLAGS_OPCODE_SHIFT		(16)
+		#define KCQE_OPCODE(op)			\
+		(((op) & KCQE_FLAGS_OPCODE_MASK) >> KCQE_FLAGS_OPCODE_SHIFT)
+};
+
+#define MAX_CNIC_CTL_DATA	64
+#define MAX_DRV_CTL_DATA	64
+
+#define CNIC_CTL_STOP_CMD			1
+#define CNIC_CTL_START_CMD			2
+#define CNIC_CTL_COMPLETION_CMD			3
+#define CNIC_CTL_STOP_ISCSI_CMD			4
+#define CNIC_CTL_FCOE_STATS_GET_CMD		5
+#define CNIC_CTL_ISCSI_STATS_GET_CMD		6
+
+#define DRV_CTL_IO_WR_CMD		0x101
+#define DRV_CTL_IO_RD_CMD		0x102
+#define DRV_CTL_CTX_WR_CMD		0x103
+#define DRV_CTL_CTXTBL_WR_CMD		0x104
+#define DRV_CTL_RET_L5_SPQ_CREDIT_CMD	0x105
+#define DRV_CTL_START_L2_CMD		0x106
+#define DRV_CTL_STOP_L2_CMD		0x107
+#define DRV_CTL_GET_OOO_CQE		0x108
+#define DRV_CTL_SEND_OOO_PKT		0x109
+#define DRV_CTL_COMP_OOO_TX_PKTS	0x10a
+#define DRV_CTL_REUSE_OOO_PKT		0x10b
+#define DRV_CTL_RET_L2_SPQ_CREDIT_CMD	0x10c
+#define DRV_CTL_ISCSI_STOPPED_CMD	0x10d
+#define DRV_CTL_ULP_REGISTER_CMD	0x10e
+#define DRV_CTL_ULP_UNREGISTER_CMD	0x10f
+#if defined(__VMKLNX__)
+#define DRV_CTL_START_NPAR_CMD		0x110
+#define DRV_CTL_STOP_NPAR_CMD		0x111
+#endif
+
+struct cnic_ctl_completion {
+	u32	cid;
+	u8	opcode;
+	u8	error;
+};
+
+struct drv_ctl_spq_credit {
+	u32	credit_count;
+};
+
+struct cnic_ctl_info {
+	int	cmd;
+	union {
+		struct cnic_ctl_completion comp;
+		char bytes[MAX_CNIC_CTL_DATA];
+	} data;
+};
+
+struct drv_ctl_io {
+	u32		cid_addr;
+	u32		offset;
+	u32		data;
+	dma_addr_t	dma_addr;
+};
+
+struct drv_ctl_l2_ring {
+	u32		client_id;
+	u32		cid;
+};
+
+enum {
+	OOO_BD_CQE,
+	OOO_RAMROD_CQE
+};
+
+enum {
+	OOO_OPCODE_ADD_PEN,
+	OOO_OPCODE_ADD_NEW,
+	OOO_OPCODE_ADD_RIGHT,
+	OOO_OPCODE_ADD_LEFT,
+	OOO_OPCODE_JOIN,
+	OOO_OPCODE_NOP
+};
+
+struct cnic_ooo_cqe {
+	u32 cqe_type; /* OOO_BD_CQE or OOO_RAMROD_CQE */
+	union {
+		struct {
+                        u32		raw_data[4]; /* iSCSI CQE data */
+			struct sk_buff 	*pkt_desc;
+		} cqe;
+
+		struct {
+			struct {
+				__le32	lo;
+				__le32	hi;
+			} data;
+		} ramrod_data;
+	} u;
+};
+
+
+struct drv_ctl_ooo_cqe {
+	struct cnic_ooo_cqe *cqe;
+};
+
+struct drv_ctl_send_ooo_pkt {
+	struct sk_buff *skb;
+};
+
+struct drv_ctl_ooo_pkt {
+	struct sk_buff *skb;
+};
+
+struct drv_ctl_register_data {
+	int ulp_type;
+	struct fcoe_capabilities fcoe_features;
+};
+
+struct drv_ctl_info {
+	int	cmd;
+	union {
+		struct drv_ctl_spq_credit credit;
+		struct drv_ctl_io io;
+		struct drv_ctl_l2_ring ring;
+		int ulp_type;
+		struct drv_ctl_register_data register_data;
+		char bytes[MAX_DRV_CTL_DATA];
+		struct drv_ctl_ooo_cqe ooo_cqe;
+		struct drv_ctl_ooo_pkt pkt_desc;
+	} data;
+};
+
+struct cnic_ops {
+	struct module	*cnic_owner;
+	/* Calls to these functions are protected by RCU.  When
+	 * unregistering, we wait for any calls to complete before
+	 * continuing.
+	 */
+	int		(*cnic_handler)(void *, void *);
+	int		(*cnic_ctl)(void *, struct cnic_ctl_info *);
+};
+
+#define MAX_CNIC_VEC	8
+
+struct cnic_irq {
+	unsigned int	vector;
+	void		*status_blk;
+	u32		status_blk_num;
+	u32		status_blk_num2;
+	u32		irq_flags;
+#define CNIC_IRQ_FL_MSIX		0x00000001
+};
+
+struct cnic_eth_dev {
+	u32		version;
+#define CNIC_ETH_DEV_VER 0x12340008 /* Change this when the structure changes */
+
+	struct module	*drv_owner;
+	u32		drv_state;
+#define CNIC_DRV_STATE_REGD		0x00000001
+#define CNIC_DRV_STATE_USING_MSIX	0x00000002
+#define CNIC_DRV_STATE_NO_ISCSI_OOO	0x00000004
+#define CNIC_DRV_STATE_NO_ISCSI		0x00000008
+#define CNIC_DRV_STATE_NO_FCOE		0x00000010
+	u32		chip_id;
+	u32		max_kwqe_pending;
+	struct pci_dev	*pdev;
+	void __iomem	*io_base;
+#if defined(RHEL_RELEASE_CODE)
+#if RHEL_RELEASE_CODE >= RHEL_RELEASE_VERSION(5,5)
+	void __iomem	*io_base2;
+#endif
+#endif
+
+	u32		ctx_tbl_offset;
+	u32		ctx_tbl_len;
+	int		ctx_blk_size;
+	u32		starting_cid;
+	u32		max_iscsi_conn;
+	u32		max_fcoe_conn;
+	u32		max_rdma_conn;
+
+	u32		fcoe_init_cid;
+	u32		fcoe_wwn_port_name_hi;
+	u32		fcoe_wwn_port_name_lo;
+	u32		fcoe_wwn_node_name_hi;
+	u32		fcoe_wwn_node_name_lo;
+
+	u16		iscsi_l2_client_id;
+	u16		iscsi_l2_cid;
+	u8		iscsi_mac[ETH_ALEN];
+
+	int		num_irq;
+	struct cnic_irq	irq_arr[MAX_CNIC_VEC];
+	int		(*drv_register_cnic)(struct net_device *,
+					     struct cnic_ops *, void *);
+	int		(*drv_unregister_cnic)(struct net_device *);
+	int		(*drv_submit_kwqes_32)(struct net_device *,
+					       struct kwqe *[], u32);
+	int		(*drv_submit_kwqes_16)(struct net_device *,
+					       struct kwqe_16 *[], u32);
+	int		(*drv_ctl)(struct net_device *, struct drv_ctl_info *);
+	unsigned long	reserved1[2];
+
+#if defined(__VMKLNX__)
+	u32		mf_mode;
+#if defined(BNX2X_ESX_CNA)
+	struct vlan_group       **cna_vlgrp;
+#endif
+#endif
+	union drv_info_to_mcp	*addr_drv_info_to_mcp;
+};
+
+struct cnic_sockaddr {
+	union {
+		struct sockaddr_in	v4;
+		struct sockaddr_in6	v6;
+	} local;
+	union {
+		struct sockaddr_in	v4;
+		struct sockaddr_in6	v6;
+	} remote;
+};
+
+struct cnic_sock {
+	struct cnic_dev *dev;
+	void	*context;
+	u32	src_ip[4];
+	u32	dst_ip[4];
+	u16	src_port;
+	u16	dst_port;
+	u16	vlan_id;
+	unsigned char old_ha[6];
+	unsigned char ha[6];
+	u32	mtu;
+	u32	cid;
+	u32	l5_cid;
+	u32	pg_cid;
+	int	ulp_type;
+
+	u32	ka_timeout;
+	u32	ka_interval;
+	u8	ka_max_probe_count;
+	u8	tos;
+	u8	ttl;
+	u8	snd_seq_scale;
+	u32	rcv_buf;
+	u32	snd_buf;
+	u32	seed;
+
+	unsigned long	tcp_flags;
+#define SK_TCP_NO_DELAY_ACK	0x1
+#define SK_TCP_KEEP_ALIVE	0x2
+#define SK_TCP_NAGLE		0x4
+#define SK_TCP_TIMESTAMP	0x8
+#define SK_TCP_SACK		0x10
+#define SK_TCP_SEG_SCALING	0x20
+
+	unsigned long	flags;
+#define SK_F_INUSE		0
+#define SK_F_OFFLD_COMPLETE	1
+#define SK_F_OFFLD_SCHED	2
+#define SK_F_PG_OFFLD_COMPLETE	3
+#define SK_F_CONNECT_START	4
+#define SK_F_IPV6		5
+#define SK_F_CLOSING		7
+#define SK_F_HW_ERR		8
+
+	atomic_t ref_count;
+	u32 state;
+	struct kwqe kwqe1;
+	struct kwqe kwqe2;
+	struct kwqe kwqe3;
+};
+
+struct cnic_dev {
+	u32		version;
+#define CNIC_DEV_VER 0xcdef0004 /* Change this when the structure changes */
+
+	struct net_device	*netdev;
+	struct pci_dev		*pcidev;
+	void __iomem		*regview;
+	struct list_head	list;
+
+	int (*register_device)(struct cnic_dev *dev, int ulp_type,
+			       void *ulp_ctx);
+	int (*unregister_device)(struct cnic_dev *dev, int ulp_type);
+	int (*submit_kwqes)(struct cnic_dev *dev, struct kwqe *wqes[],
+				u32 num_wqes);
+	int (*submit_kwqes_16)(struct cnic_dev *dev, struct kwqe_16 *wqes[],
+				u32 num_wqes);
+
+	int (*cm_create)(struct cnic_dev *, int, u32, u32, struct cnic_sock **,
+			 void *);
+	int (*cm_destroy)(struct cnic_sock *);
+	int (*cm_connect)(struct cnic_sock *, struct cnic_sockaddr *);
+	int (*cm_abort)(struct cnic_sock *);
+	int (*cm_close)(struct cnic_sock *);
+	struct cnic_dev *(*cm_select_dev)(struct sockaddr_in *, int ulp_type);
+	int (*iscsi_nl_msg_recv)(struct cnic_dev *dev, u32 msg_type,
+				 char *data, u16 data_size);
+	unsigned long	flags;
+#define CNIC_F_CNIC_UP		1
+#define CNIC_F_BNX2_CLASS	3
+#define CNIC_F_BNX2X_CLASS	4
+#define CNIC_F_ISCSI_OOO_ENABLE	8
+	atomic_t	ref_count;
+	u8		mac_addr[6];
+
+	int		max_iscsi_conn;
+	int		max_fcoe_conn;
+	int		max_rdma_conn;
+
+	union drv_info_to_mcp	*stats_addr;
+	struct fcoe_capabilities	*fcoe_cap;
+
+	void		*cnic_priv;
+#if defined(BNX2X_ESX_CNA)
+	struct vlan_group       **cna_vlgrp;
+#endif
+};
+
+#define CNIC_WR(dev, off, val)		writel(val, dev->regview + off)
+#define CNIC_WR16(dev, off, val)	writew(val, dev->regview + off)
+#define CNIC_WR8(dev, off, val)		writeb(val, dev->regview + off)
+#define CNIC_RD(dev, off)		readl(dev->regview + off)
+#define CNIC_RD16(dev, off)		readw(dev->regview + off)
+
+struct cnic_ulp_ops {
+	u32		version;
+#define CNIC_ULP_OPS_VER 0x57770006 /* Change this when the structure changes */
+
+	/* Calls to these functions are protected by RCU.  When
+	 * unregistering, we wait for any calls to complete before
+	 * continuing.
+	 */
+
+	void (*cnic_init)(struct cnic_dev *dev);
+	void (*cnic_exit)(struct cnic_dev *dev);
+	void (*cnic_start)(void *ulp_ctx);
+	void (*cnic_stop)(void *ulp_ctx);
+	void (*indicate_kcqes)(void *ulp_ctx, struct kcqe *cqes[],
+				u32 num_cqes);
+	void (*indicate_netevent)(void *ulp_ctx, unsigned long event, u16 vid);
+	void (*cm_connect_complete)(struct cnic_sock *);
+	void (*cm_close_complete)(struct cnic_sock *);
+	void (*cm_abort_complete)(struct cnic_sock *);
+	void (*cm_remote_close)(struct cnic_sock *);
+	void (*cm_remote_abort)(struct cnic_sock *);
+	int (*iscsi_nl_send_msg)(void *ulp_ctx, u32 msg_type,
+				 char *data, u16 data_size);
+	int (*cnic_get_stats)(void *ulp_ctx);
+	struct module *owner;
+	atomic_t ref_count;
+};
+
+extern int cnic_register_driver2(int ulp_type, struct cnic_ulp_ops *ulp_ops);
+
+extern int cnic_unregister_driver2(int ulp_type);
+
+extern struct cnic_eth_dev *bnx2_cnic_probe2(struct net_device *dev);
+extern struct cnic_eth_dev *bnx2x_cnic_probe2(struct net_device *dev);
+
+#endif
