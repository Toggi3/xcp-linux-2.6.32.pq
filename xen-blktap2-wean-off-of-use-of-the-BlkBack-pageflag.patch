From fbbc85278fe73a0760d4473a67f996c223cd32a4 Mon Sep 17 00:00:00 2001
From: Ian Campbell <Ian.Campbell@citrix.com>
Date: Wed, 25 Mar 2009 15:03:03 +0000
Subject: [PATCH 05/23] blktap: wean off of use of the BlkBack pageflag.

Breaks chained tap devices.
---
 drivers/xen/blkback/blkback-pagemap.c |   19 ++++++++++++++++---
 drivers/xen/blkback/blkback-pagemap.h |    3 +++
 drivers/xen/blktap2/device.c           |   12 ++++++++----
 drivers/xen/blktap2/ring.c             |   10 +++++++---
 4 files changed, 34 insertions(+), 10 deletions(-)

diff --git a/drivers/xen/blkback/blkback-pagemap.c b/drivers/xen/blkback/blkback-pagemap.c
index 77550b4..b2b975a 100644
--- a/drivers/xen/blkback/blkback-pagemap.c
+++ b/drivers/xen/blkback/blkback-pagemap.c
@@ -32,7 +32,6 @@ blkback_pagemap_set(int idx, struct page *page,
 	BUG_ON(!blkback_pagemap);
 	BUG_ON(idx >= blkback_pagemap_size);
 
-	SetPageBlkback(page);
 	set_page_private(page, idx);
 
 	entry = blkback_pagemap + idx;
@@ -42,6 +41,7 @@ blkback_pagemap_set(int idx, struct page *page,
 		BUG();
 	}
 
+	entry->page  = page;
 	entry->domid = domid;
 	entry->busid = busid;
 	entry->gref  = gref;
@@ -56,7 +56,6 @@ blkback_pagemap_clear(struct page *page)
 	idx = (int)page_private(page);
 
 	BUG_ON(!blkback_pagemap);
-	BUG_ON(!PageBlkback(page));
 	BUG_ON(idx >= blkback_pagemap_size);
 
 	entry = blkback_pagemap + idx;
@@ -77,7 +76,6 @@ blkback_pagemap_read(struct page *page)
 	idx = (int)page_private(page);
 
 	BUG_ON(!blkback_pagemap);
-	BUG_ON(!PageBlkback(page));
 	BUG_ON(idx >= blkback_pagemap_size);
 
 	entry = blkback_pagemap + idx;
@@ -89,3 +87,18 @@ blkback_pagemap_read(struct page *page)
 	return *entry;
 }
 EXPORT_SYMBOL(blkback_pagemap_read);
+
+int
+blkback_pagemap_contains_page(struct page *page)
+{
+	struct blkback_pagemap *entry;
+	int idx = (int)page_private(page);
+
+	if (idx < 0 || idx >= blkback_pagemap_size)
+		return 0;
+
+	entry = blkback_pagemap + idx;
+
+	return (entry->page == page);
+}
+EXPORT_SYMBOL(blkback_pagemap_contains_page);
diff --git a/drivers/xen/blkback/blkback-pagemap.h b/drivers/xen/blkback/blkback-pagemap.h
index 5e6809f..348f4b8 100644
--- a/drivers/xen/blkback/blkback-pagemap.h
+++ b/drivers/xen/blkback/blkback-pagemap.h
@@ -7,6 +7,7 @@
 typedef unsigned int busid_t;
 
 struct blkback_pagemap {
+	struct page     *page;
 	domid_t          domid;
 	busid_t          busid;
 	grant_ref_t      gref;
@@ -14,4 +15,6 @@ struct blkback_pagemap {
 
 struct blkback_pagemap blkback_pagemap_read(struct page *);
 
+int blkback_pagemap_contains_page(struct page *page);
+
 #endif
diff --git a/drivers/xen/blktap2/device.c b/drivers/xen/blktap2/device.c
index c3b715e..5207516 100644
--- a/drivers/xen/blktap2/device.c
+++ b/drivers/xen/blktap2/device.c
@@ -21,6 +21,7 @@
 #else
 struct blkback_pagemap { };
 #define blkback_pagemap_read(page) BUG();
+#define blkback_pagemap_contains_page(page) 0
 #endif
 
 #if 0
@@ -281,10 +282,8 @@ blktap_device_fast_flush(struct blktap *tap, struct blktap_request *request)
 		page = map[offset];
 		if (page) {
 			ClearPageReserved(map[offset]);
-			if (PageBlkback(page)) {
-				ClearPageBlkback(page);
+			if (blkback_pagemap_contains_page(page))
 				set_page_private(page, 0);
-			}
 		}
 		map[offset] = NULL;
 
@@ -427,7 +426,9 @@ blktap_prep_foreign(struct blktap *tap,
 {
 	uint64_t ptep;
 	uint32_t flags;
+#ifdef BLKTAP_CHAINED_BLKTAP
 	struct page *tap_page;
+#endif
 	struct blktap_ring *ring;
 	struct blkback_pagemap map;
 	unsigned long uvaddr, kvaddr;
@@ -445,10 +446,13 @@ blktap_prep_foreign(struct blktap *tap,
 			  kvaddr, flags, map.gref, map.domid);
 	table->cnt++;
 
+
+#ifdef BLKTAP_CHAINED_BLKTAP
 	/* enable chained tap devices */
 	tap_page = pfn_to_page(__pa(kvaddr) >> PAGE_SHIFT);
 	set_page_private(tap_page, page_private(page));
 	SetPageBlkback(tap_page);
+#endif
 
 	if (xen_feature(XENFEAT_auto_translated_physmap))
 		return 0;
@@ -618,7 +622,7 @@ blktap_device_process_request(struct blktap *tap,
 				.first_sect = fsect,
 				.last_sect  = lsect };
 
-			if (PageBlkback(bvec->bv_page)) {
+			if (blkback_pagemap_contains_page(bvec->bv_page)) {
 				/* foreign page -- use xen */
 				if (blktap_prep_foreign(tap,
 							request,
diff --git a/drivers/xen/blktap2/ring.c b/drivers/xen/blktap2/ring.c
index b523fec..3217793 100644
--- a/drivers/xen/blktap2/ring.c
+++ b/drivers/xen/blktap2/ring.c
@@ -8,6 +8,12 @@
 
 #include "blktap.h"
 
+#ifdef CONFIG_XEN_BLKDEV_BACKEND
+#include "../blkback/blkback-pagemap.h"
+#else
+#define blkback_pagemap_contains_page(page) 0
+#endif
+
 static int blktap_ring_major;
 
 static inline struct blktap *
@@ -112,10 +118,8 @@ blktap_ring_clear_pte(struct vm_area_struct *vma,
 	page    = map[offset];
 	if (page) {
 		ClearPageReserved(page);
-		if (PageBlkback(page)) {
-			ClearPageBlkback(page);
+		if (blkback_pagemap_contains_page(page))
 			set_page_private(page, 0);
-		}
 	}
 	map[offset] = NULL;
 
-- 
1.7.0.4

