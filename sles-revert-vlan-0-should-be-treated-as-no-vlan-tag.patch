From: Pedro Garcia <pedro.netdev@dondevamos.com>
Subject: VLAN 0 should be treated as "no vlan tag" (802.1p packet)
Git-commit: ad1afb00393915a51c21b1ae8704562bf036855f
Patch-mainline: 2.6.36
References: bnc#654501
Acked-by: Jiri Bohac <jbohac@suse.cz>

- Without the 8021q module loaded in the kernel, all 802.1p packets
(VLAN 0 but QoS tagging) are silently discarded (as expected, as
the protocol is not loaded).

- Without this patch in 8021q module, these packets are forwarded to
the module, but they are discarded also if VLAN 0 is not configured,
which should not be the default behaviour, as VLAN 0 is not really
a VLANed packet but a 802.1p packet. Defining VLAN 0 makes it almost
impossible to communicate with mixed 802.1p and non 802.1p devices on
the same network due to arp table issues.

- Changed logic to skip vlan specific code in vlan_skb_recv if VLAN
is 0 and we have not defined a VLAN with ID 0, but we accept the
packet with the encapsulated proto and pass it later to netif_rx.

- In the vlan device event handler, added some logic to add VLAN 0
to HW filter in devices that support it (this prevented any traffic
in VLAN 0 to reach the stack in e1000e with HW filter under 2.6.35,
and probably also with other HW filtered cards, so we fix it here).

- In the vlan unregister logic, prevent the elimination of VLAN 0
in devices with HW filter.

- The default behaviour is to ignore the VLAN 0 tagging and accept
the packet as if it was not tagged, but we can still define a
VLAN 0 if desired (so it is backwards compatible).

Signed-off-by: Pedro Garcia <pedro.netdev@dondevamos.com>
Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/net/8021q/vlan.c b/net/8021q/vlan.c
index bd8a167..2fef66f 100644
--- b/net/8021q/vlan.c
+++ a/net/8021q/vlan.c
@@ -154,10 +154,9 @@
 	BUG_ON(!grp);
 
 	/* Take it out of our own structures, but be sure to interlock with
-	 * HW accelerating devices or SW vlan input packet processing if
-	 * VLAN is not 0 (leave it there for 802.1p).
+	 * HW accelerating devices or SW vlan input packet processing.
 	 */
-	if (vlan_id && (real_dev->features & NETIF_F_HW_VLAN_FILTER))
+	if (real_dev->features & NETIF_F_HW_VLAN_FILTER)
 		ops->ndo_vlan_rx_kill_vid(real_dev, vlan_id);
 
 	vlan_group_set_device(grp, vlan_id, NULL);
@@ -437,14 +436,6 @@
 	if (is_vlan_dev(dev))
 		__vlan_device_event(dev, event);
 
-	if ((event == NETDEV_UP) &&
-	    (dev->features & NETIF_F_HW_VLAN_FILTER) &&
-	    dev->netdev_ops->ndo_vlan_rx_add_vid) {
-		pr_info("8021q: adding VLAN 0 to HW filter on device %s\n",
-			dev->name);
-		dev->netdev_ops->ndo_vlan_rx_add_vid(dev, 0);
-	}
-
 	grp = __vlan_find_group(dev);
 	if (!grp)
 		goto out;
diff --git a/net/8021q/vlan_core.c b/net/8021q/vlan_core.c
index 39d6766..3276999 100644
--- b/net/8021q/vlan_core.c
+++ a/net/8021q/vlan_core.c
@@ -8,9 +8,6 @@
 int __vlan_hwaccel_rx(struct sk_buff *skb, struct vlan_group *grp,
 		      u16 vlan_tci, int polling)
 {
-	struct net_device *vlan_dev;
-	u16 vlan_id;
-
 	if (netpoll_rx(skb))
 		return NET_RX_DROP;
 
@@ -19,12 +16,9 @@
 
 	skb->iif = skb->dev->ifindex;
 	skb->vlan_tci = vlan_tci;
-	vlan_id = vlan_tci & VLAN_VID_MASK;
-	vlan_dev = vlan_group_get_device(grp, vlan_id);
+	skb->dev = vlan_group_get_device(grp, vlan_tci & VLAN_VID_MASK);
 
-	if (vlan_dev)
-		skb->dev = vlan_dev;
-	else if (vlan_id)
+	if (!skb->dev)
 		goto drop;
 
 	return (polling ? netif_receive_skb(skb) : netif_rx(skb));
@@ -85,20 +79,15 @@
 			   unsigned int vlan_tci, struct sk_buff *skb)
 {
 	struct sk_buff *p;
-	struct net_device *vlan_dev;
-	u16 vlan_id;
 
 	if (skb_bond_should_drop(skb))
 		goto drop;
 
 	skb->iif = skb->dev->ifindex;
 	skb->vlan_tci = vlan_tci;
-	vlan_id = vlan_tci & VLAN_VID_MASK;
-	vlan_dev = vlan_group_get_device(grp, vlan_id);
+	skb->dev = vlan_group_get_device(grp, vlan_tci & VLAN_VID_MASK);
 
-	if (vlan_dev)
-		skb->dev = vlan_dev;
-	else if (vlan_id)
+	if (!skb->dev)
 		goto drop;
 
 	for (p = napi->gro_list; p; p = p->next) {
diff --git a/net/8021q/vlan_dev.c b/net/8021q/vlan_dev.c
index d989a32..a5c927b 100644
--- b/net/8021q/vlan_dev.c
+++ a/net/8021q/vlan_dev.c
@@ -141,7 +141,6 @@
 {
 	struct vlan_hdr *vhdr;
 	struct net_device_stats *stats;
-	struct net_device *vlan_dev;
 	u16 vlan_id;
 	u16 vlan_tci;
 
@@ -157,62 +156,52 @@
 	vlan_id = vlan_tci & VLAN_VID_MASK;
 
 	rcu_read_lock();
-	vlan_dev = __find_vlan_dev(dev, vlan_id);
-	/* If the VLAN device is defined, we use it.
-	 * If not, and the VID is 0, it is a 802.1p packet (not
-	 * really a VLAN), so we will just netif_rx it later to the
-	 * original interface, but with the skb->proto set to the
-	 * wrapped proto: we do nothing here.
-	 */
-	if (!vlan_dev) {
-		if (vlan_id) {
-			pr_debug("%s: ERROR: No net_device for VID: %u on dev: %s\n",
-				 __func__, vlan_id, dev->name);
-			goto err_unlock;
-		}
-	} else {
-		skb->dev = vlan_dev;
-
-		stats = &skb->dev->stats;
-		stats->rx_packets++;
-		stats->rx_bytes += skb->len;
-
-		skb->priority = vlan_get_ingress_priority(skb->dev, vlan_tci);
-
-		pr_debug("%s: priority: %u for TCI: %hu\n",
-			 __func__, skb->priority, vlan_tci);
-
-		switch (skb->pkt_type) {
-		case PACKET_BROADCAST: /* Yeah, stats collect these together.. */
-			/* stats->broadcast ++; // no such counter :-( */
-			break;
-
-		case PACKET_MULTICAST:
-			stats->multicast++;
-			break;
-
-		case PACKET_OTHERHOST:
-			/* Our lower layer thinks this is not local, let's make sure.
-			 * This allows the VLAN to have a different MAC than the
-			 * underlying device, and still route correctly.
-			 */
-			if (!compare_ether_addr(eth_hdr(skb)->h_dest,
-						skb->dev->dev_addr))
-				skb->pkt_type = PACKET_HOST;
-			break;
-		default:
-			break;
-		}
+	skb->dev = __find_vlan_dev(dev, vlan_id);
+	if (!skb->dev) {
+		pr_debug("%s: ERROR: No net_device for VID: %u on dev: %s\n",
+			 __func__, vlan_id, dev->name);
+		goto err_unlock;
 	}
+
+	stats = &skb->dev->stats;
+	stats->rx_packets++;
+	stats->rx_bytes += skb->len;
+
 	skb_pull_rcsum(skb, VLAN_HLEN);
+
+	skb->priority = vlan_get_ingress_priority(skb->dev, vlan_tci);
+
+	pr_debug("%s: priority: %u for TCI: %hu\n",
+		 __func__, skb->priority, vlan_tci);
+
+	switch (skb->pkt_type) {
+	case PACKET_BROADCAST: /* Yeah, stats collect these together.. */
+		/* stats->broadcast ++; // no such counter :-( */
+		break;
+
+	case PACKET_MULTICAST:
+		stats->multicast++;
+		break;
+
+	case PACKET_OTHERHOST:
+		/* Our lower layer thinks this is not local, let's make sure.
+		 * This allows the VLAN to have a different MAC than the
+		 * underlying device, and still route correctly.
+		 */
+		if (!compare_ether_addr(eth_hdr(skb)->h_dest,
+					skb->dev->dev_addr))
+			skb->pkt_type = PACKET_HOST;
+		break;
+	default:
+		break;
+	}
+
 	vlan_set_encap_proto(skb, vhdr);
 
-	if (vlan_dev) {
-		skb = vlan_check_reorder_header(skb);
-		if (!skb) {
-			stats->rx_errors++;
-			goto err_unlock;
-		}
+	skb = vlan_check_reorder_header(skb);
+	if (!skb) {
+		stats->rx_errors++;
+		goto err_unlock;
 	}
 
 	netif_rx(skb);
