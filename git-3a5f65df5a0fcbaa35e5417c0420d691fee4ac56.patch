v2.6.36-6800-g3a5f65d

commit 3a5f65df5a0fcbaa35e5417c0420d691fee4ac56
Author: David Howells <dhowells@redhat.com>
Date:   Wed Oct 27 17:28:36 2010 +0100

    Typedef SMP call function pointer
    
    Typedef the pointer to the function to be called by smp_call_function() and
    friends:
    
    	typedef void (*smp_call_func_t)(void *info);
    
    as it is used in a fair number of places.
    
    Signed-off-by: David Howells <dhowells@redhat.com>
    cc: linux-arch@vger.kernel.org

---
 include/linux/smp.h |   15 ++++++++-------
 kernel/smp.c        |    6 +++---
 2 files changed, 11 insertions(+), 10 deletions(-)

Index: linux-2.6.32.hg/include/linux/smp.h
===================================================================
--- linux-2.6.32.hg.orig/include/linux/smp.h	2011-03-22 15:43:41.726808535 +0000
+++ linux-2.6.32.hg/include/linux/smp.h	2011-03-23 10:33:24.070850104 +0000
@@ -13,9 +13,10 @@
 
 extern void cpu_idle(void);
 
+typedef void (*smp_call_func_t)(void *info);
 struct call_single_data {
 	struct list_head list;
-	void (*func) (void *info);
+	smp_call_func_t func;
 	void *info;
 	u16 flags;
 	u16 priv;
@@ -24,8 +25,8 @@ struct call_single_data {
 /* total number of cpus in this system (may exceed NR_CPUS) */
 extern unsigned int total_cpus;
 
-int smp_call_function_single(int cpuid, void (*func) (void *info), void *info,
-				int wait);
+int smp_call_function_single(int cpuid, smp_call_func_t func, void *info,
+			     int wait);
 
 #ifdef CONFIG_SMP
 
@@ -69,9 +70,9 @@ extern void smp_cpus_done(unsigned int m
 /*
  * Call a function on all other processors
  */
-int smp_call_function(void(*func)(void *info), void *info, int wait);
+int smp_call_function(smp_call_func_t func, void *info, int wait);
 void smp_call_function_many(const struct cpumask *mask,
-			    void (*func)(void *info), void *info, bool wait);
+			    smp_call_func_t func, void *info, bool wait);
 
 void __smp_call_function_single(int cpuid, struct call_single_data *data,
 				int wait);
@@ -91,7 +92,7 @@ void ipi_call_unlock_irq(void);
 /*
  * Call a function on all processors
  */
-int on_each_cpu(void (*func) (void *info), void *info, int wait);
+int on_each_cpu(smp_call_func_t func, void *info, int wait);
 
 #define MSG_ALL_BUT_SELF	0x8000	/* Assume <32768 CPU's */
 #define MSG_ALL			0x8001
@@ -119,7 +120,7 @@ static inline void smp_send_stop(void) {
  *	These macros fold the SMP functionality into a single CPU system
  */
 #define raw_smp_processor_id()			0
-static inline int up_smp_call_function(void (*func)(void *), void *info)
+static inline int up_smp_call_function(smp_call_func_t func, void *info)
 {
 	return 0;
 }
Index: linux-2.6.32.hg/kernel/smp.c
===================================================================
--- linux-2.6.32.hg.orig/kernel/smp.c	2011-03-23 10:21:58.870852791 +0000
+++ linux-2.6.32.hg/kernel/smp.c	2011-03-23 10:29:22.791361236 +0000
@@ -298,7 +298,7 @@ static DEFINE_PER_CPU(struct call_single
  * will be implicitly turned on in case of allocation failures, since
  * we fall back to on-stack allocation.
  */
-int smp_call_function_single(int cpu, void (*func) (void *info), void *info,
+int smp_call_function_single(int cpu, smp_call_func_t func, void *info,
 			     int wait)
 {
 	struct call_single_data d = {
@@ -393,7 +393,7 @@ void __smp_call_function_single(int cpu,
  * must be disabled when calling this function.
  */
 void smp_call_function_many(const struct cpumask *mask,
-			    void (*func)(void *), void *info, bool wait)
+			    smp_call_func_t func, void *info, bool wait)
 {
 	struct call_function_data *data;
 	unsigned long flags;
@@ -488,7 +488,7 @@ EXPORT_SYMBOL(smp_call_function_many);
  * You must not call this function with disabled interrupts or from a
  * hardware interrupt handler or from a bottom half handler.
  */
-int smp_call_function(void (*func)(void *), void *info, int wait)
+int smp_call_function(smp_call_func_t func, void *info, int wait)
 {
 	preempt_disable();
 	smp_call_function_many(cpu_online_mask, func, info, wait);
