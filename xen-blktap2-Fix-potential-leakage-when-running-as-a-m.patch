From 44112a8c4e97bf68375e21ec6f8784539860c863 Mon Sep 17 00:00:00 2001
From: Daniel Stodden <daniel.stodden@citrix.com>
Date: Tue, 3 Aug 2010 00:30:32 -0700
Subject: [PATCH 05/18] xen/blktap: Fix potential leakage when running as a module.

Ring minor release used to keep kmalloced blktaps on the vector. One
problem is that we never freed that memory before exit. Another one
that this code was missing the module refs while pinning resources.

Patch adds a module_get/put per allocated minor. We now free the tap
struct right away.

Signed-off-by: Daniel Stodden <daniel.stodden@citrix.com>
---
 drivers/xen/blktap2/control.c |  130 ++++++++++++++++++++---------------------
 drivers/xen/blktap2/ring.c    |   20 +++----
 2 files changed, 72 insertions(+), 78 deletions(-)

diff --git a/drivers/xen/blktap2/control.c b/drivers/xen/blktap2/control.c
index 5a7fab4..4f3bdd2 100644
--- a/drivers/xen/blktap2/control.c
+++ b/drivers/xen/blktap2/control.c
@@ -14,22 +14,8 @@ int blktap_max_minor;
 static int ring_major;
 static int device_major;
 
-static void
-blktap_control_initialize_tap(struct blktap *tap)
-{
-	int minor = tap->minor;
-
-	memset(tap, 0, sizeof(*tap));
-	set_bit(BLKTAP_CONTROL, &tap->dev_inuse);
-	init_waitqueue_head(&tap->wq);
-	atomic_set(&tap->refcnt, 0);
-	sg_init_table(tap->sg, BLKIF_MAX_SEGMENTS_PER_REQUEST);
-
-	tap->minor = minor;
-}
-
 static struct blktap *
-blktap_control_create_tap(void)
+blktap_control_get_minor(void)
 {
 	int minor;
 	struct blktap *tap;
@@ -38,7 +24,11 @@ blktap_control_create_tap(void)
 	if (unlikely(!tap))
 		return NULL;
 
-	blktap_control_initialize_tap(tap);
+	memset(tap, 0, sizeof(*tap));
+	set_bit(BLKTAP_CONTROL, &tap->dev_inuse);
+	init_waitqueue_head(&tap->wq);
+	atomic_set(&tap->refcnt, 0);
+	sg_init_table(tap->sg, BLKIF_MAX_SEGMENTS_PER_REQUEST);
 
 	mutex_lock(&blktap_lock);
 
@@ -68,6 +58,7 @@ blktap_control_create_tap(void)
 	tap->minor = minor;
 	blktaps[minor] = tap;
 
+	__module_get(THIS_MODULE);
 out:
 	mutex_unlock(&blktap_lock);
 	return tap;
@@ -79,92 +70,102 @@ fail:
 	goto out;
 }
 
-static struct blktap *
-blktap_control_allocate_tap(void)
+static void
+blktap_control_put_minor(struct blktap* tap)
+{
+	blktaps[tap->minor] = NULL;
+	kfree(tap);
+
+	module_put(THIS_MODULE);
+}
+
+static struct blktap*
+blktap_control_create_tap(void)
 {
-	int err, minor;
 	struct blktap *tap;
+	int err;
 
-	/*
-	 * This is called only from the ioctl, which
-	 * means we should always have interrupts enabled.
-	 */
-	BUG_ON(irqs_disabled());
+	tap = blktap_control_get_minor();
+	if (!tap)
+		return NULL;
 
-	mutex_lock(&blktap_lock);
+	err = blktap_ring_create(tap);
+	if (err)
+		goto fail_tap;
 
-	for (minor = 0; minor < MAX_BLKTAP_DEVICE; minor++) {
-		tap = blktaps[minor];
-		if (!tap)
-			goto found;
+	err = blktap_sysfs_create(tap);
+	if (err)
+		goto fail_ring;
 
-		if (!tap->dev_inuse) {
-			blktap_control_initialize_tap(tap);
-			goto found;
-		}
-	}
+	return tap;
 
-	tap = NULL;
+fail_ring:
+	blktap_sysfs_destroy(tap);
+fail_tap:
+	blktap_control_put_minor(tap);
 
-found:
-	mutex_unlock(&blktap_lock);
+	return NULL;
+}
 
-	if (!tap) {
-		tap = blktap_control_create_tap();
-		if (!tap)
-			return NULL;
-	}
+static int
+blktap_control_destroy_tap(struct blktap *tap)
+{
+	int err;
 
-	err = blktap_ring_create(tap);
-	if (err) {
-		BTERR("ring creation failed: %d\n", err);
-		clear_bit(BLKTAP_CONTROL, &tap->dev_inuse);
-		return NULL;
-	}
+	err = blktap_sysfs_destroy(tap);
+	if (err)
+		return err;
 
-	BTINFO("allocated tap %p\n", tap);
-	return tap;
+	err = blktap_ring_destroy(tap);
+	if (err)
+		return err;
+
+	blktap_control_put_minor(tap);
+
+	return 0;
 }
 
 static int
 blktap_control_ioctl(struct inode *inode, struct file *filp,
 		     unsigned int cmd, unsigned long arg)
 {
-	unsigned long dev;
 	struct blktap *tap;
 
 	switch (cmd) {
 	case BLKTAP2_IOCTL_ALLOC_TAP: {
 		struct blktap_handle h;
+		void __user *ptr = (void __user*)arg;
 
-		tap = blktap_control_allocate_tap();
-		if (!tap) {
-			BTERR("error allocating device\n");
+		tap = blktap_control_create_tap();
+		if (!tap)
 			return -ENOMEM;
-		}
 
 		h.ring   = ring_major;
 		h.device = device_major;
 		h.minor  = tap->minor;
 
-		if (copy_to_user((struct blktap_handle __user *)arg,
-				 &h, sizeof(h))) {
-			blktap_control_destroy_device(tap);
+		if (copy_to_user(ptr, &h, sizeof(h))) {
+			blktap_control_destroy_tap(tap);
 			return -EFAULT;
 		}
 
 		return 0;
 	}
 
-	case BLKTAP2_IOCTL_FREE_TAP:
-		dev = arg;
+	case BLKTAP2_IOCTL_FREE_TAP: {
+		int minor = arg;
 
-		if (dev > MAX_BLKTAP_DEVICE || !blktaps[dev])
+		if (minor > MAX_BLKTAP_DEVICE)
 			return -EINVAL;
 
-		blktap_control_destroy_device(blktaps[dev]);
+		tap = blktaps[minor];
+		if (!tap)
+			return -ENODEV;
+
+		blktap_control_destroy_tap(tap);
 		return 0;
 	}
+	}
 
 	return -ENOIOCTLCMD;
 }
@@ -234,11 +235,6 @@ blktap_control_init(void)
 static void
 blktap_control_exit(void)
 {
-	int i;
-
-	for (i = 0; i < MAX_BLKTAP_DEVICE; i++)
-		blktap_control_destroy_device(blktaps[i]);
-
 	if (blktaps) {
 		kfree(blktaps);
 		blktaps = NULL;
diff --git a/drivers/xen/blktap2/ring.c b/drivers/xen/blktap2/ring.c
index c14a82f..0695dbb 100644
--- a/drivers/xen/blktap2/ring.c
+++ b/drivers/xen/blktap2/ring.c
@@ -187,11 +187,14 @@ blktap_ring_open(struct inode *inode, struct file *filp)
 	if (minor < blktap_max_minor)
 		tap = blktaps[minor];
 
+	if (!tap)
+		return -ENXIO;
+
 	if (!test_bit(BLKTAP_CONTROL, &tap->dev_inuse))
 		return -ENODEV;
 
 	if (test_bit(BLKTAP_SHUTDOWN_REQUESTED, &tap->dev_inuse))
-		return -EBUSY;
+		return -ENXIO;
 
 	/* Only one process can access ring at a time */
 	if (test_and_set_bit(BLKTAP_RING_FD, &tap->dev_inuse))
@@ -427,20 +430,15 @@ blktap_ring_destroy(struct blktap *tap)
 	return -EAGAIN;
 }
 
-static void
-blktap_ring_initialize(struct blktap_ring *ring, int minor)
-{
-	memset(ring, 0, sizeof(*ring));
-	init_waitqueue_head(&ring->poll_wait);
-	ring->devno = MKDEV(blktap_ring_major, minor);
-}
-
 int
 blktap_ring_create(struct blktap *tap)
 {
 	struct blktap_ring *ring = &tap->ring;
-	blktap_ring_initialize(ring, tap->minor);
-	return blktap_sysfs_create(tap);
+
+	init_waitqueue_head(&ring->poll_wait);
+	ring->devno = MKDEV(blktap_ring_major, tap->minor);
+
+	return 0;
 }
 
 int __init
-- 
1.7.0.4

