# HG changeset patch
# Parent 22066d8fbae8dbfc832932898fbb982928581001

diff -r 22066d8fbae8 drivers/net/igb/igb.h
--- a/drivers/net/igb/igb.h
+++ b/drivers/net/igb/igb.h
@@ -551,6 +551,7 @@ struct igb_adapter {
 	int vferr_refcount;
 	int dmac;
 	u32 *shadow_vfta;
+	int xsnsvlanfilt; /* Citrix NetScaler VLAN filtering enabled */
 
 #ifdef IGB_SYSFS
 	struct kobject *info_kobj;
@@ -691,7 +692,8 @@ extern void igb_enable_vlan_tags(struct 
 extern void igb_vlan_mode(struct net_device *, u32);
 #endif
 
-
+extern void igb_xsnsmode_set(bool v);
+extern bool igb_xsnsmode_get(void);
 
 #ifdef IGB_SYSFS
 void igb_sysfs_exit(struct igb_adapter *adapter);
diff -r 22066d8fbae8 drivers/net/igb/igb_main.c
--- a/drivers/net/igb/igb_main.c
+++ b/drivers/net/igb/igb_main.c
@@ -236,6 +236,17 @@ MODULE_DESCRIPTION("Intel(R) Gigabit Eth
 MODULE_LICENSE("GPL");
 MODULE_VERSION(DRV_VERSION);
 
+/* Special mode for Citrix XenServer NetScaler */
+static bool xsnsmode = FALSE;
+void igb_xsnsmode_set(bool v)
+{
+	xsnsmode = v;
+}
+bool igb_xsnsmode_get(void)
+{
+	return xsnsmode;
+}
+
 static void igb_vfta_set(struct igb_adapter *adapter, u32 vid, bool add)
 {
 	struct e1000_hw *hw = &adapter->hw;
@@ -3811,6 +3822,23 @@ static void igb_set_rx_mode(struct net_d
 	         ~(E1000_VMOLR_ROPE | E1000_VMOLR_MPME | E1000_VMOLR_ROMPE);
 	E1000_WRITE_REG(hw, E1000_VMOLR(vfn), vmolr);
 	igb_restore_vf_multicasts(adapter);
+
+	/* Citrix NetScaler: enable VLAN filtering if configured */
+	if (adapter->xsnsvlanfilt)
+	{
+		rctl = E1000_READ_REG(hw, E1000_RCTL);
+		rctl |= E1000_RCTL_VFE;
+		E1000_WRITE_REG(hw, E1000_RCTL, rctl);
+		printk(KERN_INFO "igb: %s enabling VLAN filtering for NetScaler\n", netdev->name);
+	}
+	else if (igb_xsnsmode_get())
+	{
+		/* Ensure the flag is cleared. */
+		rctl = E1000_READ_REG(hw, E1000_RCTL);
+		rctl &= ~E1000_RCTL_VFE;
+		E1000_WRITE_REG(hw, E1000_RCTL, rctl);
+		printk(KERN_INFO "igb: %s disabling VLAN filtering for NetScaler\n", netdev->name);
+	}
 }
 
 static void igb_check_wvbr(struct igb_adapter *adapter)
@@ -5691,6 +5719,12 @@ s32 igb_vlvf_set(struct igb_adapter *ada
 			}
 
 			adapter->vf_data[vf].vlans_enabled++;
+		} else {
+			if (igb_xsnsmode_get() && adapter->xsnsvlanfilt) {
+                                /* NetScaler: with VLAN filtering enabled
+				 * this is not a success. */
+				return -1;
+			}
 		}
 	} else {
 		if (i < E1000_VLVF_ARRAY_SIZE) {
@@ -5787,6 +5821,36 @@ static int igb_set_vf_vlan(struct igb_ad
 		igb_set_vf_vlan_strip(adapter, vf, true); 
 	else
 		igb_set_vf_vlan_strip(adapter, vf, false); 
+
+#ifdef IFLA_VF_MAX
+	/*
+	 * NetScaler: PR-1322. If the VF has a VLAN set the guest VLAN
+	 * config is disallowed, indicated by the pf_vlan field - honour this
+	 * by silently ignoring a request from the guest to filter on
+	 * the VLAN currently configured or to reject a request to
+	 * filter on a different VLAN. This applies whether or not
+	 * VLAN filtering is enabled or disabled. If no VLAN is set
+	 * and filtering is disabled then silently ignore the request by
+	 * returning 0. With no VLAN set and filtering enabled go ahead
+	 * and try to add a VLAN to the filter returning whatever status
+	 * igb_vlvf_set returns.
+	 */
+	if (igb_xsnsmode_get()) {
+		if (adapter->vf_data[vf].pf_vlan) {
+			if (adapter->vf_data[vf].pf_vlan == vid) {
+				/* no op */
+				return 0;
+			} else {
+				/* dont allow */
+				return -1;
+			}
+		}
+		if (!adapter->xsnsvlanfilt) {
+			return 0;
+		}
+	}
+#endif
+
 	return igb_vlvf_set(adapter, vid, add, vf);
 }
 
@@ -5948,6 +6012,14 @@ static void igb_rcv_msg_from_vf(struct i
 		break;
 	case E1000_VF_SET_VLAN:
 		retval = -1;
+		/*
+		 * NetScaler: defer the decision about how to
+		 * handle this request to igb_set_vf_vlan in
+		 * all cases.
+		 */
+		if (igb_xsnsmode_get()) {
+			retval = igb_set_vf_vlan(adapter, msgbuf, vf);
+		} else {
 #ifdef IFLA_VF_MAX
 		if (vf_data->pf_vlan)
 			DPRINTK(DRV, INFO,
@@ -5957,6 +6029,7 @@ static void igb_rcv_msg_from_vf(struct i
 		else
 #endif
 			retval = igb_set_vf_vlan(adapter, msgbuf, vf);
+		}
 		break;
 	default:
 		dev_err(pci_dev_to_dev(pdev), "Unhandled Msg %08x\n", msgbuf[0]);
diff -r 22066d8fbae8 drivers/net/igb/igb_param.c
--- a/drivers/net/igb/igb_param.c
+++ b/drivers/net/igb/igb_param.c
@@ -70,6 +70,24 @@
 	MODULE_PARM_DESC(X, desc);
 #endif
 
+/* XSNSMode (XenServer NetScaler mode) (CA-50148)
+ *
+ * Valid Range: 0-1
+ *  - 0 - Standard mode
+ *  - 1 - XenServer NetScaler mode
+ *
+ * Default Value: 0
+ */
+IGB_PARAM(XSNSMode, "Change XenServer NetScaler Mode (0=Standard, 1=XSNS Mode), default 0");
+#define IGB_XSNS_STD                   0
+#define IGB_XSNS_MODE                  1
+#define IGB_DEFAULT_XSNS               IGB_XSNS_STD
+
+IGB_PARAM(XSNSVLANFiltering, "Enable/disable VLAN filtering for NetScaler (0=Disabled, 1=Enabled)");
+#define IGB_XSNS_VLAN_FILT_DIS         0
+#define IGB_XSNS_VLAN_FILT_EN          1
+#define IGB_DEFAULT_XSNS_VLAN_FILT     IGB_XSNS_VLAN_FILT_DIS
+
 /* Interrupt Throttle Rate (interrupts/sec)
  *
  * Valid Range: 100-100000 (0=off, 1=dynamic, 3=dynamic conservative)
@@ -822,5 +840,51 @@ void __devinit igb_check_options(struct 
 		}
 #endif
 	}
+	{ /* XenServer NetScaler Mode */
+		static struct igb_option opt = {
+			.type = range_option,
+			.name = "XenServer NetScaler mode",
+			.err  = "using default of "
+				__MODULE_STRING(IGB_DEFAULT_XSNS),
+			.def  = IGB_DEFAULT_XSNS,
+			.arg  = { .r = { .min = IGB_XSNS_STD,
+			                 .max = IGB_XSNS_MODE }}
+		};
+		u32 xsnsmode = opt.def;
+#ifdef module_param_array
+		if (num_XSNSMode > bd) {
+#endif
+			xsnsmode = XSNSMode[bd];
+			igb_validate_option(&xsnsmode, &opt, adapter);
+#ifdef module_param_array
+		} else {
+			xsnsmode = opt.def;
+		}
+#endif
+		igb_xsnsmode_set((bool)xsnsmode);
+	}
+        { /* XenServer NetScaler VLAN Filtering enable/disable */
+		static struct igb_option opt = {
+			.type = range_option,
+			.name = "XenServer VLAN Filtering",
+			.err  = "using default of "
+			        __MODULE_STRING(IGB_DEFAULT_XSNS_VLAN_FILT),
+			.def  = IGB_DEFAULT_XSNS_VLAN_FILT,
+			.arg  = { .r = { .min = IGB_XSNS_VLAN_FILT_DIS,
+			                 .max = IGB_XSNS_VLAN_FILT_EN }}
+		};
+		u32 xsnsvlanfilt = opt.def;
+#ifdef module_param_array
+		if (num_XSNSVLANFiltering > bd) {
+#endif
+			xsnsvlanfilt = XSNSVLANFiltering[bd];
+			igb_validate_option(&xsnsvlanfilt, &opt, adapter);
+#ifdef module_param_array
+		} else {
+			xsnsvlanfilt = opt.def;
+		}
+#endif
+		adapter->xsnsvlanfilt = xsnsvlanfilt;
+	}
 }
 
