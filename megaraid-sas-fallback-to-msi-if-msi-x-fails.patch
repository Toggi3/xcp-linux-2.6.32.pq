# HG changeset patch
# Parent ecfb36cdfc11830435af9ed432f2d98ed00c58a8
LSI issued patch which allows megaraid_sas driver to fall back to MSI if Linux kernel fails to allocate MSI-X vectors.

diff -r ecfb36cdfc11 drivers/scsi/megaraid/megaraid_sas.h
--- a/drivers/scsi/megaraid/megaraid_sas.h
+++ b/drivers/scsi/megaraid/megaraid_sas.h
@@ -1674,6 +1674,7 @@ struct megasas_instance {
 	/* Ptr to hba specfic information */
 	void *ctrl_context;
 	unsigned int msix_vectors;
+	u8	msi_flag;
 	struct msix_entry msixentry[MEGASAS_MAX_MSIX_QUEUES];
 	struct megasas_irq_context irq_context[MEGASAS_MAX_MSIX_QUEUES];
 	u64 map_id;
@@ -1806,5 +1807,6 @@ struct megasas_mgmt_info {
 
 #define msi_control_reg(base) (base + PCI_MSI_FLAGS)
 #define PCI_MSIX_FLAGS_ENABLE (1 << 15)
+#define PCI_MSI_FLAGS_ENABLE 0x01
 
 #endif				/*LSI_MEGARAID_SAS_H */
diff -r ecfb36cdfc11 drivers/scsi/megaraid/megaraid_sas_base.c
--- a/drivers/scsi/megaraid/megaraid_sas_base.c
+++ b/drivers/scsi/megaraid/megaraid_sas_base.c
@@ -69,9 +69,9 @@ module_param_named(max_sectors, max_sect
 MODULE_PARM_DESC(max_sectors,
        "Maximum number of sectors per IO command");
 
-static int msix_disable;
-module_param(msix_disable, int, S_IRUGO);
-MODULE_PARM_DESC(msix_disable, "Disable MSI-X interrupt handling. Default: 0");
+static int msi_disable;
+module_param(msi_disable, int, S_IRUGO);
+MODULE_PARM_DESC(msi_disable, "Disable MSI/MSI-X interrupt handling. Default: 0");
 
 MODULE_LICENSE("GPL");
 MODULE_VERSION(MEGASAS_VERSION);
@@ -3656,7 +3656,7 @@ megasas_deplete_reply_queue(struct megas
 	// Clear the interrupt on the HBA
 	if((mfiStatus = instance->instancet->clear_intr(instance->reg_set)) == 0) {
 		/* Hardware may not set outbound_intr_status in MSI-X mode */
-		if (!instance->msix_vectors)
+		if ((!instance->msi_flag) && (!instance->msix_vectors))
 			return IRQ_NONE;
 	}
 
@@ -4728,7 +4728,7 @@ static int megasas_init_fw(struct megasa
 {
 	u32 max_sectors_1;
 	u32 max_sectors_2;
-	u32 tmp_sectors, msix_enable;
+	u32 tmp_sectors, msix_enable, msi_enable;
 	struct megasas_register_set __iomem *reg_set;
 	struct megasas_ctrl_info *ctrl_info;
 	unsigned long bar_list;
@@ -4785,7 +4785,7 @@ static int megasas_init_fw(struct megasa
 
 	/* Check if MSI-X is supported while in ready state */
 	msix_enable = (instance->instancet->read_fw_status_reg(reg_set) & 0x4000000) >> 0x1a;
-	if (msix_enable && !msix_disable) {
+	if (msix_enable && !msi_disable) {
 		/* Check max MSI-X vectors */
 		if ((instance->pdev->device == PCI_DEVICE_ID_LSI_FUSION) ||
 		    (instance->pdev->device == PCI_DEVICE_ID_LSI_INVADER)) {
@@ -4808,6 +4808,13 @@ static int megasas_init_fw(struct megasa
 			instance->msix_vectors = 0;
 	}
 
+	/* Try MSI mode if MSI-X didn't work */
+	if (!instance->msix_vectors) {
+		msi_enable = (instance->instancet->read_fw_status_reg(reg_set) & 0x2000000) >> 0x19;
+		if (msi_enable && !msi_disable && !pci_enable_msi(instance->pdev))
+			instance->msi_flag = 1;
+	}
+
 	/* Get operational params, sge flags, send init cmd to controller */
 	if (instance->instancet->init_adapter(instance))
 		goto fail_init_adapter;
@@ -5277,6 +5284,14 @@ megasas_probe_one(struct pci_dev *pdev, 
 				pci_write_config_word(pdev, msi_control_reg(pos), control & ~PCI_MSIX_FLAGS_ENABLE);
 			}
 		}
+		pos = pci_find_capability(pdev, PCI_CAP_ID_MSI);
+		if (pos) {
+			pci_read_config_word(pdev, msi_control_reg(pos), &control);
+			if (control & PCI_MSI_FLAGS_ENABLE) {
+				dev_info(&pdev->dev, "resetting MSI\n");
+				pci_write_config_word(pdev, msi_control_reg(pos), control & ~PCI_MSI_FLAGS_ENABLE);
+			}
+		}
 	}
 
 	/*
@@ -5506,6 +5521,8 @@ megasas_probe_one(struct pci_dev *pdev, 
       fail_init_mfi:
 	if (instance->msix_vectors)
 		pci_disable_msix(instance->pdev);
+	if (instance->msi_flag)
+		pci_disable_msi(instance->pdev);
       fail_alloc_dma_buf:
 	if (instance->evt_detail)
 		pci_free_consistent(pdev, sizeof(struct megasas_evt_detail),
@@ -5650,6 +5667,8 @@ megasas_suspend(struct pci_dev *pdev, pm
 		free_irq(instance->pdev->irq, &instance->irq_context[0]);
 	if (instance->msix_vectors)
 		pci_disable_msix(instance->pdev);
+	if (instance->msi_flag)
+		pci_disable_msi(instance->pdev);
 
 	pci_save_state(pdev);
 	pci_disable_device(pdev);
@@ -5700,6 +5719,8 @@ megasas_resume(struct pci_dev *pdev)
 	/* Now re-enable MSI-X */
 	if (instance->msix_vectors)
 		pci_enable_msix(instance->pdev, instance->msixentry, instance->msix_vectors);
+	if (instance->msi_flag)
+		pci_disable_msi(instance->pdev);
 
 	/*
 	 * Initialize Firmware
@@ -5857,6 +5878,8 @@ static void __devexit megasas_detach_one
 		free_irq(instance->pdev->irq, &instance->irq_context[0]);
 	if (instance->msix_vectors)
 		pci_disable_msix(instance->pdev);
+	if (instance->msi_flag)
+		pci_disable_msi(instance->pdev);
 
 	switch(instance->pdev->device)
 	{
@@ -5914,6 +5937,8 @@ static void megasas_shutdown(struct pci_
 		free_irq(instance->pdev->irq, &instance->irq_context[0]);
 	if (instance->msix_vectors)
 		pci_disable_msix(instance->pdev);
+	if (instance->msi_flag)
+		pci_disable_msi(instance->pdev);
 }
 
 /**
diff -r ecfb36cdfc11 drivers/scsi/megaraid/megaraid_sas_fusion.c
--- a/drivers/scsi/megaraid/megaraid_sas_fusion.c
+++ b/drivers/scsi/megaraid/megaraid_sas_fusion.c
@@ -1768,7 +1768,7 @@ irqreturn_t megasas_isr_fusion(int irq, 
 	struct megasas_instance *instance = irq_context->instance;
 	u32 mfiStatus, fw_state;
 
-	if (!instance->msix_vectors) {
+	if ((!instance->msi_flag) && (!instance->msix_vectors)) {
 		mfiStatus = instance->instancet->clear_intr(instance->reg_set);
 		if (!mfiStatus)
 			return IRQ_NONE;
