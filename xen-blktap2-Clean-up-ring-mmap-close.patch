From c36db10dc39a3f4e69f64cd4ec001410b55e0e82 Mon Sep 17 00:00:00 2001
From: Daniel Stodden <daniel.stodden@citrix.com>
Date: Tue, 3 Aug 2010 00:30:34 -0700
Subject: [PATCH 10/18] xen/blktap: Clean up ring mmap/close.

Apparently leaked the sring. Map/unmap simplified by treating it by
page, not pointer. Removes the RING_VMA bit and blktap_active, as
testing ring->vma is shorter and as readable.

Signed-off-by: Daniel Stodden <daniel.stodden@citrix.com>
---
 drivers/xen/blktap2/blktap.h |    7 ----
 drivers/xen/blktap2/device.c |    2 +-
 drivers/xen/blktap2/ring.c   |   82 +++++++++++++++++++-----------------------
 drivers/xen/blktap2/sysfs.c  |    2 +-
 4 files changed, 39 insertions(+), 54 deletions(-)

diff --git a/drivers/xen/blktap2/blktap.h b/drivers/xen/blktap2/blktap.h
index 3d32f0e..6254b58 100644
--- a/drivers/xen/blktap2/blktap.h
+++ b/drivers/xen/blktap2/blktap.h
@@ -28,7 +28,6 @@ extern int blktap_device_major;
 #define MAX_BLKTAP_DEVICE            1024
 
 #define BLKTAP_CONTROL               1
-#define BLKTAP_RING_VMA              3
 #define BLKTAP_DEVICE                4
 #define BLKTAP_DEVICE_CLOSED         5
 #define BLKTAP_SHUTDOWN_REQUESTED    8
@@ -174,12 +173,6 @@ extern struct mutex blktap_lock;
 extern struct blktap **blktaps;
 extern int blktap_max_minor;
 
-static inline int
-blktap_active(struct blktap *tap)
-{
-	return test_bit(BLKTAP_RING_VMA, &tap->dev_inuse);
-}
-
 int blktap_control_destroy_tap(struct blktap *);
 
 int blktap_ring_init(void);
diff --git a/drivers/xen/blktap2/device.c b/drivers/xen/blktap2/device.c
index b9523ee..0ef4b1a 100644
--- a/drivers/xen/blktap2/device.c
+++ b/drivers/xen/blktap2/device.c
@@ -294,7 +294,7 @@ blktap_unmap(struct blktap *tap, struct blktap_request *request)
 		}
 	}
 
-	if (blktap_active(tap)) {
+	if (tap->ring.vma) {
 		down_write(&tap->ring.vma->vm_mm->mmap_sem);
 		blktap_device_fast_flush(tap, request);
 		up_write(&tap->ring.vma->vm_mm->mmap_sem);
diff --git a/drivers/xen/blktap2/ring.c b/drivers/xen/blktap2/ring.c
index 1a95576..6abcd5d 100644
--- a/drivers/xen/blktap2/ring.c
+++ b/drivers/xen/blktap2/ring.c
@@ -181,11 +181,16 @@ blktap_ring_vm_close(struct vm_area_struct *vma)
 {
 	struct blktap *tap = vma_to_blktap(vma);
 	struct blktap_ring *ring = &tap->ring;
+	struct page *page = virt_to_page(ring->ring.sring);
 
 	blktap_ring_fail_pending(tap);
 
-	zap_page_range(vma, vma->vm_start, vma->vm_end - vma->vm_start, NULL);
-	clear_bit(BLKTAP_RING_VMA, &tap->dev_inuse);
+	kfree(ring->foreign_map.map);
+	ring->foreign_map.map = NULL;
+
+	zap_page_range(vma, vma->vm_start, PAGE_SIZE, NULL);
+	ClearPageReserved(page);
+	__free_page(page);
 
 	ring->vma = NULL;
 
@@ -261,19 +266,18 @@ blktap_ring_release(struct inode *inode, struct file *filp)
 static int
 blktap_ring_mmap(struct file *filp, struct vm_area_struct *vma)
 {
+	struct blktap *tap = filp->private_data;
+	struct blktap_ring *ring = &tap->ring;
+	struct blkif_sring *sring;
+	struct page *page;
 	int size, err;
 	struct page **map;
-	struct blktap *tap;
-	struct blkif_sring *sring;
-	struct blktap_ring *ring;
 
-	tap   = filp->private_data;
-	ring  = &tap->ring;
 	map   = NULL;
 	sring = NULL;
 
-	if (!tap || test_and_set_bit(BLKTAP_RING_VMA, &tap->dev_inuse))
-		return -ENOMEM;
+	if (ring->vma)
+		return -EBUSY;
 
 	size = (vma->vm_end - vma->vm_start) >> PAGE_SHIFT;
 	if (size != (MMAP_PAGES + RING_PAGES)) {
@@ -282,39 +286,28 @@ blktap_ring_mmap(struct file *filp, struct vm_area_struct *vma)
 		return -EAGAIN;
 	}
 
-	/* Allocate the fe ring. */
-	sring = (struct blkif_sring *)get_zeroed_page(GFP_KERNEL);
-	if (!sring) {
-		BTERR("Couldn't alloc sring.\n");
-		goto fail_mem;
-	}
+	/* allocate the shared ring */
+	page = alloc_page(GFP_KERNEL|__GFP_ZERO);
+	if (!page)
+		goto fail;
 
-	map = kzalloc(size * sizeof(struct page *), GFP_KERNEL);
-	if (!map) {
-		BTERR("Couldn't alloc VM_FOREIGN map.\n");
-		goto fail_mem;
-	}
+	SetPageReserved(page);
+
+	err = vm_insert_page(vma, vma->vm_start, page);
+	if (err)
+		goto fail;
 
-	SetPageReserved(virt_to_page(sring));
-    
+	sring = page_address(page);
 	SHARED_RING_INIT(sring);
 	FRONT_RING_INIT(&ring->ring, sring, PAGE_SIZE);
 
 	ring->ring_vstart = vma->vm_start;
-	ring->user_vstart = ring->ring_vstart + (RING_PAGES << PAGE_SHIFT);
-
-	/* Map the ring pages to the start of the region and reserve it. */
-	if (xen_feature(XENFEAT_auto_translated_physmap))
-		err = vm_insert_page(vma, vma->vm_start,
-				     virt_to_page(ring->ring.sring));
-	else
-		err = remap_pfn_range(vma, vma->vm_start,
-				      __pa(ring->ring.sring) >> PAGE_SHIFT,
-				      PAGE_SIZE, vma->vm_page_prot);
-	if (err) {
-		BTERR("Mapping user ring failed: %d\n", err);
+	ring->user_vstart = ring->ring_vstart + PAGE_SIZE;
+
+	/* allocate the foreign map */
+	map = kzalloc(size * sizeof(struct page *), GFP_KERNEL);
+	if (!map)
 		goto fail;
-	}
 
 	/* Mark this VM as containing foreign pages, and set up mappings. */
 	ring->foreign_map.map = map;
@@ -331,16 +324,15 @@ blktap_ring_mmap(struct file *filp, struct vm_area_struct *vma)
 	ring->vma = vma;
 	return 0;
 
- fail:
-	/* Clear any active mappings. */
-	zap_page_range(vma, vma->vm_start, 
-		       vma->vm_end - vma->vm_start, NULL);
-	ClearPageReserved(virt_to_page(sring));
- fail_mem:
-	free_page((unsigned long)sring);
-	kfree(map);
+fail:
+	if (page) {
+		zap_page_range(vma, vma->vm_start, PAGE_SIZE, NULL);
+		ClearPageReserved(page);
+		__free_page(page);
+	}
 
-	clear_bit(BLKTAP_RING_VMA, &tap->dev_inuse);
+	if (map)
+		kfree(map);
 
 	return -ENOMEM;
 }
@@ -392,7 +384,7 @@ static unsigned int blktap_ring_poll(struct file *filp, poll_table *wait)
 
 	down_read(&current->mm->mmap_sem);
 
-	if (!blktap_active(tap)) {
+	if (!ring->vma) {
 		up_read(&current->mm->mmap_sem);
 		force_sig(SIGSEGV, current);
 		return 0;
diff --git a/drivers/xen/blktap2/sysfs.c b/drivers/xen/blktap2/sysfs.c
index c491c66..051dbac 100644
--- a/drivers/xen/blktap2/sysfs.c
+++ b/drivers/xen/blktap2/sysfs.c
@@ -115,7 +115,7 @@ blktap_sysfs_remove_device(struct device *dev,
 	if (test_and_set_bit(BLKTAP_SHUTDOWN_REQUESTED, &tap->dev_inuse))
 		goto wait;
 
-	if (blktap_active(tap)) {
+	if (tap->ring.vma) {
 		blkif_sring_t *sring = tap->ring.ring.sring;
 		sring->private.tapif_user.msg = BLKTAP2_RING_MESSAGE_CLOSE;
 		blktap_ring_kick_user(tap);
-- 
1.7.0.4

