Modern kernels are able to fully represent the possible checksum
statuses of an skb so drop the Xen specific fields which used to track
the extra state.

diff -r 7f300c07ca2d drivers/xen/netback/loopback.c
--- a/drivers/xen/netback/loopback.c	Wed May 26 16:11:19 2010 +0100
+++ b/drivers/xen/netback/loopback.c	Wed May 26 16:17:25 2010 +0100
@@ -151,16 +151,6 @@
 
 	np->stats.rx_bytes += skb->len;
 	np->stats.rx_packets++;
-
-	if (skb->ip_summed == CHECKSUM_PARTIAL) {
-		/* Defer checksum calculation. */
-		skb->proto_csum_blank = 1;
-		/* Must be a local packet: assert its integrity. */
-		skb->proto_data_valid = 1;
-	}
-
-	skb->ip_summed = skb->proto_data_valid ?
-		CHECKSUM_UNNECESSARY : CHECKSUM_NONE;
 
 	skb->pkt_type = PACKET_HOST; /* overridden by eth_type_trans() */
 	skb->protocol = eth_type_trans(skb, dev);
diff -r 7f300c07ca2d drivers/xen/netback/netback.c
--- a/drivers/xen/netback/netback.c	Wed May 26 16:11:19 2010 +0100
+++ b/drivers/xen/netback/netback.c	Wed May 26 16:17:25 2010 +0100
@@ -309,7 +309,6 @@
 		/* Copy only the header fields we use in this driver. */
 		nskb->dev = skb->dev;
 		nskb->ip_summed = skb->ip_summed;
-		nskb->proto_data_valid = skb->proto_data_valid;
 		dev_kfree_skb(skb);
 		skb = nskb;
 	}
@@ -717,7 +716,7 @@
 
 		if (skb->ip_summed == CHECKSUM_PARTIAL) /* local packet? */
 			flags |= NETRXF_csum_blank | NETRXF_data_validated;
-		else if (skb->proto_data_valid) /* remote but checksummed? */
+		else if (skb->ip_summed == CHECKSUM_UNNECESSARY) /* remote but checksummed? */
 			flags |= NETRXF_data_validated;
 
 		if (meta[npo.meta_cons].copy)
@@ -1459,14 +1458,10 @@
 		 * Old frontends do not assert data_validated but we
 		 * can infer it from csum_blank so test both flags.
 		 */
-		if (txp->flags & (NETTXF_data_validated|NETTXF_csum_blank)) {
-			skb->ip_summed = CHECKSUM_UNNECESSARY;
-			skb->proto_data_valid = 1;
-		} else {
+		if (txp->flags & (NETTXF_data_validated|NETTXF_csum_blank))
+			skb->ip_summed = CHECKSUM_PARTIAL;
+		else
 			skb->ip_summed = CHECKSUM_NONE;
-			skb->proto_data_valid = 0;
-		}
-		skb->proto_csum_blank = !!(txp->flags & NETTXF_csum_blank);
 
 		netbk_fill_frags(skb);
 
diff -r 7f300c07ca2d drivers/xen/netfront/netfront.c
--- a/drivers/xen/netfront/netfront.c	Wed May 26 16:11:19 2010 +0100
+++ b/drivers/xen/netfront/netfront.c	Wed May 26 16:17:25 2010 +0100
@@ -995,10 +995,8 @@
 
 	if (skb->ip_summed == CHECKSUM_PARTIAL) /* local packet? */
 		tx->flags |= NETTXF_csum_blank | NETTXF_data_validated;
-#ifdef CONFIG_XEN
-	if (skb->proto_data_valid) /* remote but checksummed? */
+	else if (skb->ip_summed == CHECKSUM_UNNECESSARY) /* remote but checksummed? */
 		tx->flags |= NETTXF_data_validated;
-#endif
 
 #if HAVE_TSO
 	if (skb_shinfo(skb)->gso_size) {
@@ -1423,18 +1421,11 @@
 		skb->truesize += skb->data_len - (RX_COPY_THRESHOLD - len);
 		skb->len += skb->data_len;
 
-		/*
-		 * Old backends do not assert data_validated but we
-		 * can infer it from csum_blank so test both flags.
-		 */
-		if (rx->flags & (NETRXF_data_validated|NETRXF_csum_blank))
+		if (rx->flags & NETRXF_csum_blank)
+			skb->ip_summed = CHECKSUM_PARTIAL;
+		else if (rx->flags & NETRXF_data_validated)
 			skb->ip_summed = CHECKSUM_UNNECESSARY;
-		else
-			skb->ip_summed = CHECKSUM_NONE;
-#ifdef CONFIG_XEN
-		skb->proto_data_valid = (skb->ip_summed != CHECKSUM_NONE);
-		skb->proto_csum_blank = !!(rx->flags & NETRXF_csum_blank);
-#endif
+
 		np->stats.rx_packets++;
 		np->stats.rx_bytes += skb->len;
 
diff -r 7f300c07ca2d include/linux/skbuff.h
--- a/include/linux/skbuff.h	Wed May 26 16:11:19 2010 +0100
+++ b/include/linux/skbuff.h	Wed May 26 16:17:25 2010 +0100
@@ -278,8 +278,6 @@
  *	@local_df: allow local fragmentation
  *	@cloned: Head may be cloned (check refcnt to be sure)
  *	@nohdr: Payload reference only, must not modify header
- *	@proto_data_valid: Protocol data validated since arriving at localhost
- *	@proto_csum_blank: Protocol csum must be added before leaving localhost
  *	@pkt_type: Packet class
  *	@fclone: skbuff clone status
  *	@ip_summed: Driver fed us an IP checksum
@@ -381,12 +379,8 @@
 #ifdef CONFIG_IPV6_NDISC_NODETYPE
 	__u8			ndisc_nodetype:2;
 #endif
-#ifdef	CONFIG_NETVM
-	__u8			emergency:1;
-#endif
-#ifdef CONFIG_XEN
-	__u8			proto_data_valid:1,
-				proto_csum_blank:1;
+#ifdef CONFIG_NETVM
+	__u8 			emergency:1;
 #endif
 	kmemcheck_bitfield_end(flags2);
 
diff -r 7f300c07ca2d net/core/dev.c
--- a/net/core/dev.c	Wed May 26 16:11:19 2010 +0100
+++ b/net/core/dev.c	Wed May 26 16:17:25 2010 +0100
@@ -1822,11 +1822,6 @@
 	unsigned char *th;
 	int err = -EPROTO;
 
-#ifdef CONFIG_XEN
-	if (!skb->proto_csum_blank)
-		return 0;
-#endif
-
 	if (skb->protocol != htons(ETH_P_IP))
 		goto out;
 
@@ -1856,7 +1851,6 @@
 
 #ifdef CONFIG_XEN
 	skb->ip_summed = CHECKSUM_PARTIAL;
-	skb->proto_csum_blank = 0;
 #endif
 
 	err = 0;
@@ -2431,19 +2425,6 @@
 	if (skb->tc_verd & TC_NCLS) {
 		skb->tc_verd = CLR_TC_NCLS(skb->tc_verd);
 		goto ncls;
-	}
-#endif
-
-#ifdef CONFIG_XEN
-	switch (skb->ip_summed) {
-	case CHECKSUM_UNNECESSARY:
-		skb->proto_data_valid = 1;
-		break;
-	case CHECKSUM_PARTIAL:
-		/* XXX Implement me. */
-	default:
-		skb->proto_data_valid = 0;
-		break;
 	}
 #endif
 
diff -r 7f300c07ca2d net/core/skbuff.c
--- a/net/core/skbuff.c	Wed May 26 16:11:19 2010 +0100
+++ b/net/core/skbuff.c	Wed May 26 16:17:25 2010 +0100
@@ -642,10 +642,6 @@
 	n->hdr_len = skb->nohdr ? skb_headroom(skb) : skb->hdr_len;
 	n->cloned = 1;
 	n->nohdr = 0;
-#ifdef CONFIG_XEN
-	C(proto_data_valid);
-	C(proto_csum_blank);
-#endif
 	n->destructor = NULL;
 	C(tail);
 	C(end);
