PR-1322 Sysfs support for enabling/disabling per-interface VLAN filtering

diff -r bac013210d84 drivers/net/igb/igb_main.c
--- a/drivers/net/igb/igb_main.c
+++ b/drivers/net/igb/igb_main.c
@@ -46,6 +46,7 @@
 #include <linux/ethtool.h>
 #endif
 #include <linux/if_vlan.h>
+#include <linux/sysfs.h>
 
 #include "igb.h"
 #include "igb_vmdq.h"
@@ -370,6 +371,87 @@ static void __exit igb_exit_module(void)
 
 module_exit(igb_exit_module);
 
+#define IGB_XSNS_CTRL
+#ifdef IGB_XSNS_CTRL
+/* Dynamic control of VLAN filtering for Citrix NetScaler
+ */
+static ssize_t igb_xsns_show_vlan_filtering(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	struct igb_adapter *adapter;
+	struct e1000_hw *hw;
+	u32 rctl;
+
+	adapter = dev_get_drvdata(dev);
+	if (!adapter) return -EIO;
+	hw = &adapter->hw;
+
+	rctl = E1000_READ_REG(hw, E1000_RCTL);
+	return scnprintf(buf, PAGE_SIZE, "%d\n", (rctl & E1000_RCTL_VFE)?1:0);
+}
+
+static ssize_t igb_xsns_set_vlan_filtering(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)
+{
+	struct igb_adapter *adapter;
+	struct e1000_hw *hw;
+	u32 rctl;
+
+	int v;
+
+	if (sscanf(buf, "%d", &v) != 1)
+		return -EINVAL;
+
+	adapter = dev_get_drvdata(dev);
+	if (!adapter) return -EIO;
+	hw = &adapter->hw;
+
+	rctl = E1000_READ_REG(hw, E1000_RCTL);
+	if (v)
+		rctl |= E1000_RCTL_VFE;
+	else
+		rctl &= ~E1000_RCTL_VFE;
+	E1000_WRITE_REG(hw, E1000_RCTL, rctl);
+	adapter->xsnsvlanfilt = v;
+
+	printk(KERN_INFO "igb: NetScaler VLAN filtering %s enabled=%d\n", adapter->netdev->name, v);
+
+	return count;
+}
+
+static struct device_attribute igb_attrs[] = {
+	__ATTR(vlan-filtering, (S_IRUGO | S_IWUSR), igb_xsns_show_vlan_filtering, igb_xsns_set_vlan_filtering),
+};
+
+int igb_sysfs_create(struct igb_adapter *adapter)
+{
+	struct net_device *netdev = adapter->netdev;
+	int err;
+	unsigned int i;
+
+	for (i = 0 ; i < ARRAY_SIZE(igb_attrs); i++) {
+		err = device_create_file(&netdev->dev, &igb_attrs[i]);
+		if (err)
+			goto fail;
+	}
+	return 0;
+
+fail:
+	while (i-- >= 0)
+		device_remove_file(&netdev->dev, &igb_attrs[i]);
+	return err;
+}
+
+void igb_sysfs_remove(struct igb_adapter *adapter)
+{
+	struct net_device *netdev = adapter->netdev;
+	int i;
+
+	for (i = 0 ; i < ARRAY_SIZE(igb_attrs); i++)
+		device_remove_file(&netdev->dev, &igb_attrs[i]);
+}
+
+#endif /* IGB_XSNS_CTRL */
+
+
 #define Q_IDX_82576(i) (((i & 0x1) << 3) + (i >> 1))
 /**
  * igb_cache_ring_register - Descriptor ring to register mapping
@@ -2024,6 +2106,12 @@ static int __devinit igb_probe(struct pc
 	adapter = netdev_priv(netdev);
 	adapter->netdev = netdev;
 	adapter->pdev = pdev;
+
+        /*
+         * Record the adapter structure in the dev's devdata so we can
+         * get it in the sysfs handlers.
+         */
+	dev_set_drvdata(&(adapter->netdev)->dev, adapter);
 	hw = &adapter->hw;
 	hw->back = adapter;
 	adapter->port_num = hw->bus.func;
@@ -2661,6 +2749,10 @@ static int igb_open(struct net_device *n
 	 * clean_rx handler before we do so.  */
 	igb_configure(adapter);
 
+	err = igb_sysfs_create(adapter);
+	if (err)
+		goto err_req_irq;
+
 	err = igb_request_irq(adapter);
 	if (err)
 		goto err_req_irq;
@@ -2728,6 +2820,8 @@ static int igb_close(struct net_device *
 	/*CMW test */
 	igb_release_hw_control(adapter);
 
+	igb_sysfs_remove(adapter);
+
 	igb_free_irq(adapter);
 
 	igb_free_all_tx_resources(adapter);
@@ -3824,20 +3918,20 @@ static void igb_set_rx_mode(struct net_d
 	igb_restore_vf_multicasts(adapter);
 
 	/* Citrix NetScaler: enable VLAN filtering if configured */
-	if (adapter->xsnsvlanfilt)
-	{
-		rctl = E1000_READ_REG(hw, E1000_RCTL);
-		rctl |= E1000_RCTL_VFE;
-		E1000_WRITE_REG(hw, E1000_RCTL, rctl);
-		printk(KERN_INFO "igb: %s enabling VLAN filtering for NetScaler\n", netdev->name);
-	}
-	else if (igb_xsnsmode_get())
-	{
-		/* Ensure the flag is cleared. */
-		rctl = E1000_READ_REG(hw, E1000_RCTL);
-		rctl &= ~E1000_RCTL_VFE;
-		E1000_WRITE_REG(hw, E1000_RCTL, rctl);
-		printk(KERN_INFO "igb: %s disabling VLAN filtering for NetScaler\n", netdev->name);
+	if (igb_xsnsmode_get()) {
+		if (adapter->xsnsvlanfilt) {
+			rctl = E1000_READ_REG(hw, E1000_RCTL);
+			rctl |= E1000_RCTL_VFE;
+			E1000_WRITE_REG(hw, E1000_RCTL, rctl);
+			printk(KERN_INFO "igb: %s enabling VLAN filtering for NetScaler\n", netdev->name);
+		}
+		else {
+			/* Ensure the flag is cleared. */
+			rctl = E1000_READ_REG(hw, E1000_RCTL);
+			rctl &= ~E1000_RCTL_VFE;
+			E1000_WRITE_REG(hw, E1000_RCTL, rctl);
+			printk(KERN_INFO "igb: %s disabling VLAN filtering for NetScaler\n", netdev->name);
+		}
 	}
 }
 
