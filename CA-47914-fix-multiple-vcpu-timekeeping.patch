diff -r 94a4b99deaa9 arch/x86/kernel/time-xen.c
--- a/arch/x86/kernel/time-xen.c	Wed Nov 24 10:11:12 2010 +0000
+++ b/arch/x86/kernel/time-xen.c	Wed Nov 24 10:48:42 2010 +0000
@@ -372,41 +372,6 @@
 	WARN_ON_ONCE(res->state != RUNSTATE_running);
 }
 
-/*
- * Xen sched_clock implementation.  Returns the number of unstolen
- * nanoseconds, which is nanoseconds the VCPU spent in RUNNING+BLOCKED
- * states.
- */
-unsigned long long sched_clock(void)
-{
-	struct vcpu_runstate_info runstate;
-	cycle_t now;
-	u64 ret;
-	s64 offset;
-
-	/*
-	 * Ideally sched_clock should be called on a per-cpu basis
-	 * anyway, so preempt should already be disabled, but that's
-	 * not current practice at the moment.
-	 */
-	preempt_disable();
-
-	now = local_clock();
-
-	get_runstate_snapshot(&runstate);
-
-	offset = now - runstate.state_entry_time;
-	if (offset < 0)
-		offset = 0;
-
-	ret = offset + runstate.time[RUNSTATE_running]
-	      + runstate.time[RUNSTATE_blocked];
-
-	preempt_enable();
-
-	return ret;
-}
-
 unsigned long profile_pc(struct pt_regs *regs)
 {
 	unsigned long pc = instruction_pointer(regs);
@@ -693,6 +658,29 @@
 	.resume			= xen_clocksource_resume,
 };
 
+/*
+ * Xen sched_clock implementation.
+ *
+ * Matches PVops version after commit
+ * 8a22b9996b001c88f2bfb54c6de6a05fc39e177a upstream, described thus:
+ *
+ *  xen: drop xen_sched_clock in favour of using plain wallclock time
+ *
+ *  xen_sched_clock only counts unstolen time.  In principle this should
+ *  be useful to the Linux scheduler so that it knows how much time a process
+ *  actually consumed.  But in practice this doesn't work very well as the
+ *  scheduler expects the sched_clock time to be synchronized between
+ *  cpus.  It also uses sched_clock to measure the time a task spends
+ *  sleeping, in which case "unstolen time" isn't meaningful.
+ *
+ *  So just use plain xen_clocksource_read to return wallclock nanoseconds
+ *  for sched_clock.
+ */
+unsigned long long sched_clock(void)
+{
+	return xen_clocksource_read(NULL);
+}
+
 struct vcpu_runstate_info *setup_runstate_area(unsigned int cpu)
 {
 	struct vcpu_register_runstate_memory_area area;
