From 989fb89303c3ef5f1acbd7f1bc9ae7d2317d5722 Mon Sep 17 00:00:00 2001
From: Daniel Stodden <daniel.stodden@citrix.com>
Date: Thu, 3 Jun 2010 03:12:36 +0000
Subject: [PATCH 4/7] blktap: Make the device destruction path synchronous

blktap: Make the device destruction path synchronous.

Signed-off-by: Jake Wires <jake.wires@citrix.com>
Signed-off-by: Daniel Stodden <daniel.stodden@citrix.com>
Signed-off-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>
---
 drivers/xen/blktap2/control.c |   41 ++++++++++++-----------------------------
 drivers/xen/blktap2/device.c  |   18 +++++++++++-------
 drivers/xen/blktap2/ring.c    |   25 +++++++++----------------
 drivers/xen/blktap2/sysfs.c   |    9 ++++++---
 4 files changed, 38 insertions(+), 55 deletions(-)

diff --git a/drivers/xen/blktap2/control.c b/drivers/xen/blktap2/control.c
index 54bf745..9bf6c50 100644
--- a/drivers/xen/blktap2/control.c
+++ b/drivers/xen/blktap2/control.c
@@ -163,46 +163,29 @@ int
 blktap_control_destroy_device(struct blktap *tap)
 {
 	int err;
-	unsigned long inuse;
 
 	if (!tap)
 		return 0;
 
 	set_bit(BLKTAP_SHUTDOWN_REQUESTED, &tap->dev_inuse);
 
-	for (;;) {
-		inuse = tap->dev_inuse;
-		err   = blktap_device_destroy(tap);
-		if (err)
-			goto wait;
-
-		inuse = tap->dev_inuse;
-		err   = blktap_ring_destroy(tap);
-		if (err)
-			goto wait;
-
-		inuse = tap->dev_inuse;
-		err   = blktap_sysfs_destroy(tap);
-		if (err)
-			goto wait;
+	err = blktap_device_destroy(tap);
+	if (err)
+		return err;
 
-		break;
+	err = blktap_sysfs_destroy(tap);
+	if (err)
+		return err;
 
-	wait:
-		BTDBG("inuse: 0x%lx, dev_inuse: 0x%lx\n",
-		      inuse, tap->dev_inuse);
-		if (wait_event_interruptible(tap->wq, tap->dev_inuse != inuse))
-			break;
-	}
+	err = blktap_ring_destroy(tap);
+	if (err)
+		return err;
 
 	clear_bit(BLKTAP_SHUTDOWN_REQUESTED, &tap->dev_inuse);
+	clear_bit(BLKTAP_CONTROL, &tap->dev_inuse);
+	wake_up(&tap->wq);
 
-	if (tap->dev_inuse == (1UL << BLKTAP_CONTROL)) {
-		err = 0;
-		clear_bit(BLKTAP_CONTROL, &tap->dev_inuse);
-	}
-
-	return err;
+	return 0;
 }
 
 static int __init
diff --git a/drivers/xen/blktap2/device.c b/drivers/xen/blktap2/device.c
index d718fef..5c80775 100644
--- a/drivers/xen/blktap2/device.c
+++ b/drivers/xen/blktap2/device.c
@@ -65,7 +65,7 @@ blktap_device_release(struct gendisk *gd, fmode_t mode)
 
 	dev->users--;
 	if (test_bit(BLKTAP_SHUTDOWN_REQUESTED, &tap->dev_inuse))
-		blktap_device_destroy(tap);
+		blktap_control_destroy_device(tap);
 
 	return 0;
 }
@@ -306,7 +306,6 @@ blktap_unmap(struct blktap *tap, struct blktap_request *request)
 	unsigned long kvaddr;
 
 	usr_idx = request->usr_idx;
-	down_write(&tap->ring.vma->vm_mm->mmap_sem);
 
 	for (i = 0; i < request->nr_pages; i++) {
 		kvaddr = request_to_kaddr(request, i);
@@ -324,13 +323,17 @@ blktap_unmap(struct blktap *tap, struct blktap_request *request)
 		}
 	}
 
-	blktap_device_fast_flush(tap, request);
-	up_write(&tap->ring.vma->vm_mm->mmap_sem);
+	if (blktap_active(tap)) {
+		down_write(&tap->ring.vma->vm_mm->mmap_sem);
+		blktap_device_fast_flush(tap, request);
+		up_write(&tap->ring.vma->vm_mm->mmap_sem);
+	}
 }
 
 /*
  * called if the tapdisk process dies unexpectedly.
  * fail and release any pending requests and disable queue.
+ * may be called from non-tapdisk context.
  */
 void
 blktap_device_fail_pending_requests(struct blktap *tap)
@@ -933,8 +936,11 @@ blktap_device_destroy(struct blktap *tap)
 
 	BTINFO("destroy device %d users %d\n", tap->minor, dev->users);
 
-	if (dev->users)
+	if (dev->users) {
+		blktap_device_fail_pending_requests(tap);
+		blktap_device_restart(tap);
 		return -EBUSY;
+	}
 
 	spin_lock_irq(&dev->lock);
 	/* No more blktap_device_do_request(). */
@@ -952,8 +958,6 @@ blktap_device_destroy(struct blktap *tap)
 	blk_cleanup_queue(gd->queue);
 	put_disk(gd);
 
-	wake_up(&tap->wq);
-
 	return 0;
 }
 
diff --git a/drivers/xen/blktap2/ring.c b/drivers/xen/blktap2/ring.c
index adea141..1a4e937 100644
--- a/drivers/xen/blktap2/ring.c
+++ b/drivers/xen/blktap2/ring.c
@@ -161,24 +161,12 @@ blktap_ring_vm_close(struct vm_area_struct *vma)
 	struct blktap *tap = vma_to_blktap(vma);
 	struct blktap_ring *ring = &tap->ring;
 
-	blktap_device_fail_pending_requests(tap);  /* fail pending requests */
-	blktap_device_restart(tap);                /* fail deferred requests */
-
-	zap_page_range(vma, vma->vm_start, vma->vm_end - vma->vm_start, NULL);
-
-	kfree(ring->foreign_map.map);
-	ring->foreign_map.map = NULL;
-
-	/* Free the ring page. */
-	ClearPageReserved(virt_to_page(ring->ring.sring));
-	free_page((unsigned long)ring->ring.sring);
-
 	BTINFO("unmapping ring %d\n", tap->minor);
-	ring->ring.sring = NULL;
-	ring->vma = NULL;
+	zap_page_range(vma, vma->vm_start, vma->vm_end - vma->vm_start, NULL);
 	clear_bit(BLKTAP_RING_VMA, &tap->dev_inuse);
+	ring->vma = NULL;
 
-	wake_up(&tap->wq);
+	blktap_control_destroy_device(tap);
 }
 
 static struct vm_operations_struct blktap_ring_vm_operations = {
@@ -206,6 +194,9 @@ blktap_ring_open(struct inode *inode, struct file *filp)
 	if (!test_bit(BLKTAP_CONTROL, &tap->dev_inuse))
 		return -ENODEV;
 
+	if (test_bit(BLKTAP_SHUTDOWN_REQUESTED, &tap->dev_inuse))
+		return -EBUSY;
+
 	/* Only one process can access ring at a time */
 	if (test_and_set_bit(BLKTAP_RING_FD, &tap->dev_inuse))
 		return -EBUSY;
@@ -224,7 +215,9 @@ blktap_ring_release(struct inode *inode, struct file *filp)
 	BTINFO("freeing device %d\n", tap->minor);
 	clear_bit(BLKTAP_RING_FD, &tap->dev_inuse);
 	filp->private_data = NULL;
-	wake_up(&tap->wq);	
+
+	blktap_control_destroy_device(tap);
+
 	return 0;
 }
 
diff --git a/drivers/xen/blktap2/sysfs.c b/drivers/xen/blktap2/sysfs.c
index a1756c8..ff7fb9a 100644
--- a/drivers/xen/blktap2/sysfs.c
+++ b/drivers/xen/blktap2/sysfs.c
@@ -96,7 +96,6 @@ blktap_sysfs_remove_device(struct device *dev,
 			   struct device_attribute *attr,
 			   const char *buf, size_t size)
 {
-	int err;
 	struct blktap *tap = (struct blktap *)dev_get_drvdata(dev);
 
 	if (!tap->ring.dev)
@@ -105,9 +104,13 @@ blktap_sysfs_remove_device(struct device *dev,
 	if (test_and_set_bit(BLKTAP_SHUTDOWN_REQUESTED, &tap->dev_inuse))
 		return -EBUSY;
 
-	err = blktap_control_destroy_device(tap);
+	BTDBG("sending tapdisk close message\n");
+	tap->ring.ring.sring->pad[0] = BLKTAP2_RING_MESSAGE_CLOSE;
+	blktap_ring_kick_user(tap);
+	wait_event_interruptible(tap->wq,
+				 !test_bit(BLKTAP_CONTROL, &tap->dev_inuse));
 
-	return (err ? : size);
+	return 0;
 }
 CLASS_DEVICE_ATTR(remove, S_IWUSR, NULL, blktap_sysfs_remove_device);
 
-- 
1.7.0.4

