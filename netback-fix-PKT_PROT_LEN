PKT_PROT_LEN is too short to cope with maximal IP options. Redefine it
to a value sufficient to cope with maximal IP and TCP options, as well
as tagged packets.

Signed-off-by: Paul Durrant <paul.durrant@citrix.com>

diff -r 6536e97141ea drivers/xen/netback/netback.c
--- a/drivers/xen/netback/netback.c	Wed Nov 24 10:59:57 2010 +0000
+++ b/drivers/xen/netback/netback.c	Thu Nov 25 12:03:35 2010 +0000
@@ -121,7 +121,7 @@ static inline int netif_get_page_ext(str
  * packet processing on them (netfilter, routing, etc). 72 is enough
  * to cover TCP+IP headers including options.
  */
-#define PKT_PROT_LEN 72
+#define PKT_PROT_LEN    (ETH_HLEN + 4 + (15 * 4) + (15 * 4))
 
 static inline pending_ring_idx_t pending_index(unsigned i)
 {
@@ -1559,9 +1559,6 @@ static void net_tx_submit(struct xen_net
 		skb->dev      = netif->dev;
 		skb->protocol = eth_type_trans(skb, skb->dev);
 
-		netif->stats.rx_bytes += skb->len;
-		netif->stats.rx_packets++;
-
 		if (skb->ip_summed == CHECKSUM_PARTIAL) {
 			if (skb_checksum_setup(skb)) {
 				DPRINTK("Can't setup checksum in net_tx_action\n");
@@ -1580,6 +1577,9 @@ static void net_tx_submit(struct xen_net
 			kfree_skb(skb);
 			continue;
 		}
+
+		netif->stats.rx_bytes += skb->len;
+		netif->stats.rx_packets++;
 
 		netif_rx_ni(skb);
 		netif->dev->last_rx = jiffies;
